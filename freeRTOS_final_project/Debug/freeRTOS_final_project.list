
freeRTOS_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009148  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa4  08009aa4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa4  08009aa4  00019aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aac  08009aac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08009ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a0  08009b54  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000140  08009bf4  00020140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006290  200001e0  08009c94  000201e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20006470  08009c94  00026470  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 14 .comment      00000086  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001c4e9  00000000  00000000  00020296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003c24  00000000  00000000  0003c77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001568  00000000  00000000  000403a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001093  00000000  00000000  00041910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00005288  00000000  00000000  000429a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00019ee6  00000000  00000000  00047c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fb860  00000000  00000000  00061b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000063a4  00000000  00000000  0015d374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  00163718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009300 	.word	0x08009300

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009300 	.word	0x08009300

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f001 f942 	bl	800183a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f95b 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa6d 	bl	8000a98 <MX_GPIO_Init>
  MX_ETH_Init();
 80005be:	f000 f9bf 	bl	8000940 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005c2:	f000 fa0b 	bl	80009dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c6:	f000 fa39 	bl	8000a3c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  department_list[POLICE] = police_dep;
 80005ca:	4b83      	ldr	r3, [pc, #524]	; (80007d8 <main+0x22c>)
 80005cc:	4a83      	ldr	r2, [pc, #524]	; (80007dc <main+0x230>)
 80005ce:	6812      	ldr	r2, [r2, #0]
 80005d0:	4611      	mov	r1, r2
 80005d2:	8019      	strh	r1, [r3, #0]
 80005d4:	3302      	adds	r3, #2
 80005d6:	0c12      	lsrs	r2, r2, #16
 80005d8:	701a      	strb	r2, [r3, #0]
  department_list[FIRE] = fire_dep;
 80005da:	4b7f      	ldr	r3, [pc, #508]	; (80007d8 <main+0x22c>)
 80005dc:	4a80      	ldr	r2, [pc, #512]	; (80007e0 <main+0x234>)
 80005de:	3303      	adds	r3, #3
 80005e0:	8811      	ldrh	r1, [r2, #0]
 80005e2:	7892      	ldrb	r2, [r2, #2]
 80005e4:	8019      	strh	r1, [r3, #0]
 80005e6:	709a      	strb	r2, [r3, #2]
  department_list[AMBULANCE] = ambulance_dep;
 80005e8:	4b7b      	ldr	r3, [pc, #492]	; (80007d8 <main+0x22c>)
 80005ea:	4a7e      	ldr	r2, [pc, #504]	; (80007e4 <main+0x238>)
 80005ec:	3306      	adds	r3, #6
 80005ee:	8811      	ldrh	r1, [r2, #0]
 80005f0:	7892      	ldrb	r2, [r2, #2]
 80005f2:	8019      	strh	r1, [r3, #0]
 80005f4:	709a      	strb	r2, [r3, #2]
  department_list[CORONA] = corona_dep;
 80005f6:	4b78      	ldr	r3, [pc, #480]	; (80007d8 <main+0x22c>)
 80005f8:	4a7b      	ldr	r2, [pc, #492]	; (80007e8 <main+0x23c>)
 80005fa:	3309      	adds	r3, #9
 80005fc:	8811      	ldrh	r1, [r2, #0]
 80005fe:	7892      	ldrb	r2, [r2, #2]
 8000600:	8019      	strh	r1, [r3, #0]
 8000602:	709a      	strb	r2, [r3, #2]

  policeSemaphore = xSemaphoreCreateCounting(
 8000604:	210a      	movs	r1, #10
 8000606:	200a      	movs	r0, #10
 8000608:	f004 ffd3 	bl	80055b2 <xQueueCreateCountingSemaphore>
 800060c:	4603      	mov	r3, r0
 800060e:	4a77      	ldr	r2, [pc, #476]	; (80007ec <main+0x240>)
 8000610:	6013      	str	r3, [r2, #0]
	  MIN(POLICE_CONCURRENT_NUM, INIT_POLICE_NUM),
	  MIN(POLICE_CONCURRENT_NUM, INIT_POLICE_NUM)
  );
  printf("police semaphore count: %d\r\n", uxSemaphoreGetCount(policeSemaphore));
 8000612:	4b76      	ldr	r3, [pc, #472]	; (80007ec <main+0x240>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fba2 	bl	8005d60 <uxQueueMessagesWaiting>
 800061c:	4603      	mov	r3, r0
 800061e:	4619      	mov	r1, r3
 8000620:	4873      	ldr	r0, [pc, #460]	; (80007f0 <main+0x244>)
 8000622:	f007 ff0b 	bl	800843c <iprintf>
  fireSemaphore = xSemaphoreCreateCounting(
 8000626:	210a      	movs	r1, #10
 8000628:	200a      	movs	r0, #10
 800062a:	f004 ffc2 	bl	80055b2 <xQueueCreateCountingSemaphore>
 800062e:	4603      	mov	r3, r0
 8000630:	4a70      	ldr	r2, [pc, #448]	; (80007f4 <main+0x248>)
 8000632:	6013      	str	r3, [r2, #0]
	  MIN(FIRE_CONCURRENT_NUM, INIT_FIRE_NUM),
	  MIN(FIRE_CONCURRENT_NUM, INIT_FIRE_NUM)
  );
  printf("fire semaphore count: %d\r\n", uxSemaphoreGetCount(fireSemaphore));
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <main+0x248>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fb91 	bl	8005d60 <uxQueueMessagesWaiting>
 800063e:	4603      	mov	r3, r0
 8000640:	4619      	mov	r1, r3
 8000642:	486d      	ldr	r0, [pc, #436]	; (80007f8 <main+0x24c>)
 8000644:	f007 fefa 	bl	800843c <iprintf>

  ambulanceSemaphore = xSemaphoreCreateCounting(
 8000648:	210a      	movs	r1, #10
 800064a:	200a      	movs	r0, #10
 800064c:	f004 ffb1 	bl	80055b2 <xQueueCreateCountingSemaphore>
 8000650:	4603      	mov	r3, r0
 8000652:	4a6a      	ldr	r2, [pc, #424]	; (80007fc <main+0x250>)
 8000654:	6013      	str	r3, [r2, #0]
	  MIN(AMBULANCE_CONCURRENT_NUM, INIT_AMBULANCE_NUM),
	  MIN(AMBULANCE_CONCURRENT_NUM, INIT_AMBULANCE_NUM)
  );
  HAL_UART_Transmit(&huart3, "blabla\r\n", strlen("blabla\r\n"), HAL_MAX_DELAY);
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	2208      	movs	r2, #8
 800065c:	4968      	ldr	r1, [pc, #416]	; (8000800 <main+0x254>)
 800065e:	4869      	ldr	r0, [pc, #420]	; (8000804 <main+0x258>)
 8000660:	f003 fa5c 	bl	8003b1c <HAL_UART_Transmit>
  printf("ambulance semaphore count: %d\r\n", uxSemaphoreGetCount(ambulanceSemaphore));
 8000664:	4b65      	ldr	r3, [pc, #404]	; (80007fc <main+0x250>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fb79 	bl	8005d60 <uxQueueMessagesWaiting>
 800066e:	4603      	mov	r3, r0
 8000670:	4619      	mov	r1, r3
 8000672:	4865      	ldr	r0, [pc, #404]	; (8000808 <main+0x25c>)
 8000674:	f007 fee2 	bl	800843c <iprintf>

  coronaSemaphore = xSemaphoreCreateCounting(
 8000678:	210a      	movs	r1, #10
 800067a:	200a      	movs	r0, #10
 800067c:	f004 ff99 	bl	80055b2 <xQueueCreateCountingSemaphore>
 8000680:	4603      	mov	r3, r0
 8000682:	4a62      	ldr	r2, [pc, #392]	; (800080c <main+0x260>)
 8000684:	6013      	str	r3, [r2, #0]
	  MIN(CORONA_CONCURRENT_NUM, INIT_CORONA_NUM),
	  MIN(CORONA_CONCURRENT_NUM, INIT_CORONA_NUM)
  );
  printf("corona semaphore count: %d\r\n", uxSemaphoreGetCount(coronaSemaphore));
 8000686:	4b61      	ldr	r3, [pc, #388]	; (800080c <main+0x260>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fb68 	bl	8005d60 <uxQueueMessagesWaiting>
 8000690:	4603      	mov	r3, r0
 8000692:	4619      	mov	r1, r3
 8000694:	485e      	ldr	r0, [pc, #376]	; (8000810 <main+0x264>)
 8000696:	f007 fed1 	bl	800843c <iprintf>

  globalSemaphore = xSemaphoreCreateCounting(MAX_NUM_REQUESTED_VEHICLES,
 800069a:	210a      	movs	r1, #10
 800069c:	200a      	movs	r0, #10
 800069e:	f004 ff88 	bl	80055b2 <xQueueCreateCountingSemaphore>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a5b      	ldr	r2, [pc, #364]	; (8000814 <main+0x268>)
 80006a6:	6013      	str	r3, [r2, #0]
	  MAX_NUM_REQUESTED_VEHICLES);
  printf("global semaphore count: %d\r\n", uxSemaphoreGetCount(globalSemaphore));
 80006a8:	4b5a      	ldr	r3, [pc, #360]	; (8000814 <main+0x268>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f005 fb57 	bl	8005d60 <uxQueueMessagesWaiting>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4619      	mov	r1, r3
 80006b6:	4858      	ldr	r0, [pc, #352]	; (8000818 <main+0x26c>)
 80006b8:	f007 fec0 	bl	800843c <iprintf>


  semaphoreList[0] = policeSemaphore;
 80006bc:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <main+0x240>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a56      	ldr	r2, [pc, #344]	; (800081c <main+0x270>)
 80006c2:	6013      	str	r3, [r2, #0]
  semaphoreList[1] = fireSemaphore;
 80006c4:	4b4b      	ldr	r3, [pc, #300]	; (80007f4 <main+0x248>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a54      	ldr	r2, [pc, #336]	; (800081c <main+0x270>)
 80006ca:	6053      	str	r3, [r2, #4]

  semaphoreList[2] = ambulanceSemaphore;
 80006cc:	4b4b      	ldr	r3, [pc, #300]	; (80007fc <main+0x250>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a52      	ldr	r2, [pc, #328]	; (800081c <main+0x270>)
 80006d2:	6093      	str	r3, [r2, #8]

  semaphoreList[3] = coronaSemaphore;
 80006d4:	4b4d      	ldr	r3, [pc, #308]	; (800080c <main+0x260>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a50      	ldr	r2, [pc, #320]	; (800081c <main+0x270>)
 80006da:	60d3      	str	r3, [r2, #12]



  /* Create the queue(s) */
  /* creation of DispatchQueue */
  DispatchQueueHandle = xQueueCreate(DISPATCH_INIT_BUFF_SIZE_BYTES, sizeof(request));
 80006dc:	2200      	movs	r2, #0
 80006de:	2108      	movs	r1, #8
 80006e0:	200a      	movs	r0, #10
 80006e2:	f004 ff01 	bl	80054e8 <xQueueGenericCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a4d      	ldr	r2, [pc, #308]	; (8000820 <main+0x274>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* creation of AmbulanceQueue */
  AmbulanceQueueHandle = xQueueCreate(AMBULANCE_INIT_BUFF_SIZE_BYTES, sizeof(request));
 80006ec:	2200      	movs	r2, #0
 80006ee:	2108      	movs	r1, #8
 80006f0:	200a      	movs	r0, #10
 80006f2:	f004 fef9 	bl	80054e8 <xQueueGenericCreate>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a4a      	ldr	r2, [pc, #296]	; (8000824 <main+0x278>)
 80006fa:	6013      	str	r3, [r2, #0]

  /* creation of PoliceQueue */
  PoliceQueueHandle = xQueueCreate(POLICE_INIT_BUFF_SIZE_BYTES, sizeof(request));
 80006fc:	2200      	movs	r2, #0
 80006fe:	2108      	movs	r1, #8
 8000700:	200a      	movs	r0, #10
 8000702:	f004 fef1 	bl	80054e8 <xQueueGenericCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a47      	ldr	r2, [pc, #284]	; (8000828 <main+0x27c>)
 800070a:	6013      	str	r3, [r2, #0]

  /* creation of FireQueue */
  FireQueueHandle = xQueueCreate(FIRE_INIT_BUFF_SIZE_BYTES, sizeof(request));
 800070c:	2200      	movs	r2, #0
 800070e:	2108      	movs	r1, #8
 8000710:	200a      	movs	r0, #10
 8000712:	f004 fee9 	bl	80054e8 <xQueueGenericCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a44      	ldr	r2, [pc, #272]	; (800082c <main+0x280>)
 800071a:	6013      	str	r3, [r2, #0]

  /* creation of CoronaQueue */
  CoronaQueueHandle = xQueueCreate(CORONA_INIT_BUFF_SIZE_BYTES, sizeof(request));
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	200a      	movs	r0, #10
 8000722:	f004 fee1 	bl	80054e8 <xQueueGenericCreate>
 8000726:	4603      	mov	r3, r0
 8000728:	4a41      	ldr	r2, [pc, #260]	; (8000830 <main+0x284>)
 800072a:	6013      	str	r3, [r2, #0]


  /* creation of loggingThread */
  //BaseType_t log_thread = xTaskCreate(loggingStartThread, (const char*)"loggingStartThread", (const void*)LOG_THREAD_BUFFER_SIZE, NULL, LOGGING_THREAD_PRIORITY, (const TaskHandle_t*)&loggingThreadHandle);
  department_id corona_depar = CORONA;
 800072c:	2303      	movs	r3, #3
 800072e:	77fb      	strb	r3, [r7, #31]
  department_id fire_depar = FIRE;
 8000730:	2301      	movs	r3, #1
 8000732:	77bb      	strb	r3, [r7, #30]
  department_id police_depar = POLICE;
 8000734:	2300      	movs	r3, #0
 8000736:	777b      	strb	r3, [r7, #29]
  department_id ambulance_depar = AMBULANCE;
 8000738:	2302      	movs	r3, #2
 800073a:	773b      	strb	r3, [r7, #28]

  /* USER CODE BEGIN RTOS_THREADS */
  BaseType_t generate_thread = xTaskCreate(generateTask, (const char * const)"generateThread", (const)GENERATE_THREAD_BUFFER_SIZE, NULL, GENERATE_THREAD_PRIORITY, (TaskHandle_t * const)&generateThreadHandle);
 800073c:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <main+0x288>)
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2302      	movs	r3, #2
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	493b      	ldr	r1, [pc, #236]	; (8000838 <main+0x28c>)
 800074a:	483c      	ldr	r0, [pc, #240]	; (800083c <main+0x290>)
 800074c:	f005 fd11 	bl	8006172 <xTaskCreate>
 8000750:	61b8      	str	r0, [r7, #24]
  BaseType_t dispatch_thread = xTaskCreate(dispatchTask, (const char * const)"dispatchThread", (const)DISPATCH_THREAD_BUFFER_SIZE, NULL, DISPATCH_THREAD_PRIORITY, (TaskHandle_t * const)&dispatchThreadHandle);
 8000752:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <main+0x294>)
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	2302      	movs	r3, #2
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2300      	movs	r3, #0
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	4939      	ldr	r1, [pc, #228]	; (8000844 <main+0x298>)
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <main+0x29c>)
 8000762:	f005 fd06 	bl	8006172 <xTaskCreate>
 8000766:	6178      	str	r0, [r7, #20]

  BaseType_t police_thread = xTaskCreate(departmentTask, (const char * const)"policeThread", (const)POLICE_THREAD_BUFFER_SIZE, (void *)police_depar,(UBaseType_t)POLICE_THREAD_PRIORITY, (TaskHandle_t * const)&policeThreadHandle);
 8000768:	7f7b      	ldrb	r3, [r7, #29]
 800076a:	461a      	mov	r2, r3
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <main+0x2a0>)
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4613      	mov	r3, r2
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	4935      	ldr	r1, [pc, #212]	; (8000850 <main+0x2a4>)
 800077a:	4836      	ldr	r0, [pc, #216]	; (8000854 <main+0x2a8>)
 800077c:	f005 fcf9 	bl	8006172 <xTaskCreate>
 8000780:	6138      	str	r0, [r7, #16]

  BaseType_t fire_thread = xTaskCreate(departmentTask, (const char * const)"fireThread", (const)FIRE_THREAD_BUFFER_SIZE, (void *)fire_depar, (UBaseType_t)FIRE_THREAD_PRIORITY, (TaskHandle_t * const)&fireThreadHandle);
 8000782:	7fbb      	ldrb	r3, [r7, #30]
 8000784:	461a      	mov	r2, r3
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <main+0x2ac>)
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2302      	movs	r3, #2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	4613      	mov	r3, r2
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	4932      	ldr	r1, [pc, #200]	; (800085c <main+0x2b0>)
 8000794:	482f      	ldr	r0, [pc, #188]	; (8000854 <main+0x2a8>)
 8000796:	f005 fcec 	bl	8006172 <xTaskCreate>
 800079a:	60f8      	str	r0, [r7, #12]
  BaseType_t ambulnace_thread = xTaskCreate(departmentTask, (const char * const)"ambulanceThread", (const)AMBULANCE_THREAD_BUFFER_SIZE, (void *)ambulance_depar, (UBaseType_t)AMBULANCE_THREAD_PRIORITY, (TaskHandle_t * const)&ambulanceThreadHandle);
 800079c:	7f3b      	ldrb	r3, [r7, #28]
 800079e:	461a      	mov	r2, r3
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <main+0x2b4>)
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	2302      	movs	r3, #2
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	4613      	mov	r3, r2
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	492d      	ldr	r1, [pc, #180]	; (8000864 <main+0x2b8>)
 80007ae:	4829      	ldr	r0, [pc, #164]	; (8000854 <main+0x2a8>)
 80007b0:	f005 fcdf 	bl	8006172 <xTaskCreate>
 80007b4:	60b8      	str	r0, [r7, #8]
  BaseType_t corona_thread = xTaskCreate(departmentTask, (const char * const)"coronaThread", (const)CORONA_THREAD_BUFFER_SIZE, (void *)corona_depar, (UBaseType_t)CORONA_THREAD_PRIORITY, (TaskHandle_t * const)&coronaThreadHandle);
 80007b6:	7ffb      	ldrb	r3, [r7, #31]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <main+0x2bc>)
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2302      	movs	r3, #2
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4613      	mov	r3, r2
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	4929      	ldr	r1, [pc, #164]	; (800086c <main+0x2c0>)
 80007c8:	4822      	ldr	r0, [pc, #136]	; (8000854 <main+0x2a8>)
 80007ca:	f005 fcd2 	bl	8006172 <xTaskCreate>
 80007ce:	6078      	str	r0, [r7, #4]
/*const char * const pcName,	lint !e971 Unqualified char types are allowed for strings and single characters only.
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTION;*/
  vTaskStartScheduler();
 80007d0:	f005 ff7a 	bl	80066c8 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0x228>
 80007d6:	bf00      	nop
 80007d8:	20000874 	.word	0x20000874
 80007dc:	20000014 	.word	0x20000014
 80007e0:	20000018 	.word	0x20000018
 80007e4:	2000001c 	.word	0x2000001c
 80007e8:	20000020 	.word	0x20000020
 80007ec:	20000880 	.word	0x20000880
 80007f0:	08009324 	.word	0x08009324
 80007f4:	2000088c 	.word	0x2000088c
 80007f8:	08009344 	.word	0x08009344
 80007fc:	20000888 	.word	0x20000888
 8000800:	08009360 	.word	0x08009360
 8000804:	200002e4 	.word	0x200002e4
 8000808:	0800936c 	.word	0x0800936c
 800080c:	20000890 	.word	0x20000890
 8000810:	0800938c 	.word	0x0800938c
 8000814:	20000884 	.word	0x20000884
 8000818:	080093ac 	.word	0x080093ac
 800081c:	200008d0 	.word	0x200008d0
 8000820:	200008ac 	.word	0x200008ac
 8000824:	200008b0 	.word	0x200008b0
 8000828:	200008b4 	.word	0x200008b4
 800082c:	200008b8 	.word	0x200008b8
 8000830:	200008bc 	.word	0x200008bc
 8000834:	20000894 	.word	0x20000894
 8000838:	080093cc 	.word	0x080093cc
 800083c:	08001195 	.word	0x08001195
 8000840:	20000898 	.word	0x20000898
 8000844:	080093dc 	.word	0x080093dc
 8000848:	08000bdd 	.word	0x08000bdd
 800084c:	2000089c 	.word	0x2000089c
 8000850:	080093ec 	.word	0x080093ec
 8000854:	08000d3d 	.word	0x08000d3d
 8000858:	200008a0 	.word	0x200008a0
 800085c:	080093fc 	.word	0x080093fc
 8000860:	200008a4 	.word	0x200008a4
 8000864:	08009408 	.word	0x08009408
 8000868:	200008a8 	.word	0x200008a8
 800086c:	08009418 	.word	0x08009418

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f007 ff22 	bl	80086c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000894:	f002 f82a 	bl	80028ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <SystemClock_Config+0xc8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <SystemClock_Config+0xc8>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xc8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <SystemClock_Config+0xcc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b8:	4a20      	ldr	r2, [pc, #128]	; (800093c <SystemClock_Config+0xcc>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <SystemClock_Config+0xcc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008e4:	2348      	movs	r3, #72	; 0x48
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008ec:	2303      	movs	r3, #3
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f809 	bl	800290c <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000900:	f000 fca4 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2102      	movs	r1, #2
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fa97 	bl	8002e54 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800092c:	f000 fc8e 	bl	800124c <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3750      	adds	r7, #80	; 0x50
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_ETH_Init+0x84>)
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <MX_ETH_Init+0x88>)
 8000948:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_ETH_Init+0x8c>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_ETH_Init+0x8c>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ETH_Init+0x8c>)
 8000958:	22e1      	movs	r2, #225	; 0xe1
 800095a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_ETH_Init+0x8c>)
 800095e:	2200      	movs	r2, #0
 8000960:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ETH_Init+0x8c>)
 8000964:	2200      	movs	r2, #0
 8000966:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_ETH_Init+0x8c>)
 800096a:	2200      	movs	r2, #0
 800096c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_ETH_Init+0x84>)
 8000970:	4a16      	ldr	r2, [pc, #88]	; (80009cc <MX_ETH_Init+0x8c>)
 8000972:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_ETH_Init+0x84>)
 8000976:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800097a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ETH_Init+0x84>)
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <MX_ETH_Init+0x90>)
 8000980:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_ETH_Init+0x84>)
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_ETH_Init+0x94>)
 8000986:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ETH_Init+0x84>)
 800098a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800098e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x84>)
 8000992:	f001 f977 	bl	8001c84 <HAL_ETH_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800099c:	f000 fc56 	bl	800124c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009a0:	2238      	movs	r2, #56	; 0x38
 80009a2:	2100      	movs	r1, #0
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_ETH_Init+0x98>)
 80009a6:	f007 fe8f 	bl	80086c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_ETH_Init+0x98>)
 80009ac:	2221      	movs	r2, #33	; 0x21
 80009ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_ETH_Init+0x98>)
 80009b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_ETH_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000234 	.word	0x20000234
 80009c8:	40028000 	.word	0x40028000
 80009cc:	200008e0 	.word	0x200008e0
 80009d0:	20000140 	.word	0x20000140
 80009d4:	200000a0 	.word	0x200000a0
 80009d8:	200001fc 	.word	0x200001fc

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART3_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART3_UART_Init+0x58>)
 8000a20:	f003 f82e 	bl	8003a80 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 fc0f 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200002e4 	.word	0x200002e4
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	f001 fdeb 	bl	800265a <HAL_PCD_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 fbdf 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000036c 	.word	0x2000036c

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a46      	ldr	r2, [pc, #280]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a40      	ldr	r2, [pc, #256]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <MX_GPIO_Init+0x134>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b44:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0x138>)
 8000b46:	f001 fd6f 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2140      	movs	r1, #64	; 0x40
 8000b4e:	4821      	ldr	r0, [pc, #132]	; (8000bd4 <MX_GPIO_Init+0x13c>)
 8000b50:	f001 fd6a 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000b6c:	f001 fbb0 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b70:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0x138>)
 8000b8a:	f001 fba1 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b8e:	2340      	movs	r3, #64	; 0x40
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <MX_GPIO_Init+0x13c>)
 8000ba6:	f001 fb93 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_GPIO_Init+0x13c>)
 8000bbe:	f001 fb87 	bl	80022d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3730      	adds	r7, #48	; 0x30
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40021800 	.word	0x40021800
 8000bd8:	40020800 	.word	0x40020800

08000bdc <dispatchTask>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

TaskFunction_t dispatchTask(void* argument) {
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b08f      	sub	sp, #60	; 0x3c
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]



    BaseType_t retval_Sent_From_Dispatch_Queue = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    BaseType_t retval_Police_Send = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
    BaseType_t retval_Fire_Send = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    BaseType_t retval_Corona_Send = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t retval_Ambulance_Send = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24

    BaseType_t retval_Send_to_dep_list[DEPARTMENTS_NUM] = { retval_Police_Send,retval_Fire_Send, retval_Ambulance_Send,retval_Corona_Send };
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c06:	61fb      	str	r3, [r7, #28]
    department_queue_handles_lists[POLICE] = PoliceQueueHandle;
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <dispatchTask+0x124>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3d      	ldr	r2, [pc, #244]	; (8000d04 <dispatchTask+0x128>)
 8000c0e:	6013      	str	r3, [r2, #0]
    department_queue_handles_lists[FIRE] = FireQueueHandle;
 8000c10:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <dispatchTask+0x12c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a3b      	ldr	r2, [pc, #236]	; (8000d04 <dispatchTask+0x128>)
 8000c16:	6053      	str	r3, [r2, #4]
    department_queue_handles_lists[AMBULANCE] = AmbulanceQueueHandle;
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <dispatchTask+0x130>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a39      	ldr	r2, [pc, #228]	; (8000d04 <dispatchTask+0x128>)
 8000c1e:	6093      	str	r3, [r2, #8]
    department_queue_handles_lists[CORONA] = CoronaQueueHandle;
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <dispatchTask+0x134>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a37      	ldr	r2, [pc, #220]	; (8000d04 <dispatchTask+0x128>)
 8000c26:	60d3      	str	r3, [r2, #12]



    request req = { 0 };
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
    while (1) {
        if ((retval_Sent_From_Dispatch_Queue = xQueueReceive(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT)) == pdPASS) {
 8000c32:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <dispatchTask+0x138>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f107 0108 	add.w	r1, r7, #8
 8000c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 fe94 	bl	800596c <xQueueReceive>
 8000c44:	6378      	str	r0, [r7, #52]	; 0x34
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d152      	bne.n	8000cf2 <dispatchTask+0x116>
            department_id id = req.dep_id;
 8000c4c:	7a3b      	ldrb	r3, [r7, #8]
 8000c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            printf("dispatcher got request: dep_id: %d, requested vehicles: %u, time to comlete: %u\r\n", req.dep_id, req.requested_vehicles, req.time_to_complete);
 8000c52:	7a3b      	ldrb	r3, [r7, #8]
 8000c54:	4619      	mov	r1, r3
 8000c56:	7a7b      	ldrb	r3, [r7, #9]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	482e      	ldr	r0, [pc, #184]	; (8000d18 <dispatchTask+0x13c>)
 8000c5e:	f007 fbed 	bl	800843c <iprintf>


            if ((retval_Send_to_dep_list[id] = xQueueSendToBack(department_queue_handles_lists[id], &req, QueueTimeoutList[id])) == pdPASS) {
 8000c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <dispatchTask+0x128>)
 8000c68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c70:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <dispatchTask+0x140>)
 8000c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c76:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8000c7a:	f107 0108 	add.w	r1, r7, #8
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f004 fcce 	bl	8005620 <xQueueGenericSend>
 8000c84:	4602      	mov	r2, r0
 8000c86:	00a3      	lsls	r3, r4, #2
 8000c88:	3338      	adds	r3, #56	; 0x38
 8000c8a:	443b      	add	r3, r7
 8000c8c:	f843 2c28 	str.w	r2, [r3, #-40]
 8000c90:	00a3      	lsls	r3, r4, #2
 8000c92:	3338      	adds	r3, #56	; 0x38
 8000c94:	443b      	add	r3, r7
 8000c96:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d122      	bne.n	8000ce4 <dispatchTask+0x108>
                printf("request sent to department!\r\n");
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <dispatchTask+0x144>)
 8000ca0:	f007 fc32 	bl	8008508 <puts>
                switch (id) {
 8000ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d826      	bhi.n	8000cfa <dispatchTask+0x11e>
 8000cac:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <dispatchTask+0xd8>)
 8000cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb2:	bf00      	nop
 8000cb4:	08000cdd 	.word	0x08000cdd
 8000cb8:	08000cc5 	.word	0x08000cc5
 8000cbc:	08000ccd 	.word	0x08000ccd
 8000cc0:	08000cd5 	.word	0x08000cd5
                case FIRE:
                    printf("Fire request was sent to department!\r\n");
 8000cc4:	4817      	ldr	r0, [pc, #92]	; (8000d24 <dispatchTask+0x148>)
 8000cc6:	f007 fc1f 	bl	8008508 <puts>
                    break;
 8000cca:	e017      	b.n	8000cfc <dispatchTask+0x120>
                case AMBULANCE:
                    printf("Ambulance request was sent to department!\r\n");
 8000ccc:	4816      	ldr	r0, [pc, #88]	; (8000d28 <dispatchTask+0x14c>)
 8000cce:	f007 fc1b 	bl	8008508 <puts>
                    break;
 8000cd2:	e013      	b.n	8000cfc <dispatchTask+0x120>
                case CORONA:
                    printf("Corona request was sent to department!\r\n");
 8000cd4:	4815      	ldr	r0, [pc, #84]	; (8000d2c <dispatchTask+0x150>)
 8000cd6:	f007 fc17 	bl	8008508 <puts>
                    break;
 8000cda:	e00f      	b.n	8000cfc <dispatchTask+0x120>
                case POLICE:
                    printf("Police request was sent to department!\r\n");
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <dispatchTask+0x154>)
 8000cde:	f007 fc13 	bl	8008508 <puts>
                    break;
 8000ce2:	e00b      	b.n	8000cfc <dispatchTask+0x120>


                }
            }
            else {
               printf(" dispatcher sending request to department %d failed. time passed or queue is full!\r\n", (int)id);
 8000ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <dispatchTask+0x158>)
 8000cec:	f007 fba6 	bl	800843c <iprintf>
 8000cf0:	e79f      	b.n	8000c32 <dispatchTask+0x56>

            }
        }
        else {
           printf(" dispatcher couldnt get request. receiving request from main queue was failed. time passed or queue is empty!\r\n");
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <dispatchTask+0x15c>)
 8000cf4:	f007 fc08 	bl	8008508 <puts>
 8000cf8:	e79b      	b.n	8000c32 <dispatchTask+0x56>
                    break;
 8000cfa:	bf00      	nop
        if ((retval_Sent_From_Dispatch_Queue = xQueueReceive(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT)) == pdPASS) {
 8000cfc:	e799      	b.n	8000c32 <dispatchTask+0x56>
 8000cfe:	bf00      	nop
 8000d00:	200008b4 	.word	0x200008b4
 8000d04:	200008c0 	.word	0x200008c0
 8000d08:	200008b8 	.word	0x200008b8
 8000d0c:	200008b0 	.word	0x200008b0
 8000d10:	200008bc 	.word	0x200008bc
 8000d14:	200008ac 	.word	0x200008ac
 8000d18:	08009428 	.word	0x08009428
 8000d1c:	20000024 	.word	0x20000024
 8000d20:	0800947c 	.word	0x0800947c
 8000d24:	0800949c 	.word	0x0800949c
 8000d28:	080094c4 	.word	0x080094c4
 8000d2c:	080094f0 	.word	0x080094f0
 8000d30:	08009518 	.word	0x08009518
 8000d34:	08009540 	.word	0x08009540
 8000d38:	08009598 	.word	0x08009598

08000d3c <departmentTask>:
    }
}


// @brief: this function takes request from department queue and send to execute thread
TaskFunction_t departmentTask(void* dep_id) {//argument is speartment_id
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b097      	sub	sp, #92	; 0x5c
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	6078      	str	r0, [r7, #4]

    department_id depar_id = (department_id)dep_id;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    BaseType_t retval_SR_thread;
    request req;
    int thread_buffer_list[DEPARTMENTS_NUM] = { POLICE_SR_THREAD_BUFFER_SIZE, FIRE_SR_THREAD_BUFFER_SIZE, AMBULANCE_SR_THREAD_BUFFER_SIZE,CORONA_SR_THREAD_BUFFER_SIZE };
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <departmentTask+0x104>)
 8000d4c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    TaskHandle_t SR_handle_array[MAX_SR_HANDLES] = { 0 };
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2228      	movs	r2, #40	; 0x28
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f007 fcb2 	bl	80086c8 <memset>
    uint8_t sr_handle_index = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    while (1)
    {
        sr_handle_index %= MAX_SR_HANDLES;
 8000d6a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000d6e:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <departmentTask+0x108>)
 8000d70:	fba3 1302 	umull	r1, r3, r3, r2
 8000d74:	08d9      	lsrs	r1, r3, #3
 8000d76:	460b      	mov	r3, r1
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (xQueueReceive(department_queue_handles_lists[depar_id], &req, QueueTimeoutList[depar_id]) == pdPASS)
 8000d84:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d88:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <departmentTask+0x10c>)
 8000d8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d8e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d92:	4a2e      	ldr	r2, [pc, #184]	; (8000e4c <departmentTask+0x110>)
 8000d94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f004 fde5 	bl	800596c <xQueueReceive>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d144      	bne.n	8000e32 <departmentTask+0xf6>
        {
           printf(" department %d received request\r\n", (int)depar_id);
 8000da8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000dac:	4619      	mov	r1, r3
 8000dae:	4828      	ldr	r0, [pc, #160]	; (8000e50 <departmentTask+0x114>)
 8000db0:	f007 fb44 	bl	800843c <iprintf>
            switch (depar_id) {
 8000db4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d80b      	bhi.n	8000dd4 <departmentTask+0x98>
 8000dbc:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <departmentTask+0x88>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000dd5 	.word	0x08000dd5
 8000dcc:	08000dd5 	.word	0x08000dd5
 8000dd0:	08000dd5 	.word	0x08000dd5
                break;
            }
            if ((retval_SR_thread = xTaskCreate(
                ServiceRoutine,
                (const char*)"ServiceRoutineThread",
                thread_buffer_list[depar_id],
 8000dd4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	3350      	adds	r3, #80	; 0x50
 8000ddc:	443b      	add	r3, r7
 8000dde:	f853 3c20 	ldr.w	r3, [r3, #-32]
            if ((retval_SR_thread = xTaskCreate(
 8000de2:	b299      	uxth	r1, r3
                (void const*)&req, //request to be passed
                department_thread_priority[depar_id],
 8000de4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000de8:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <departmentTask+0x118>)
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            if ((retval_SR_thread = xTaskCreate(
 8000dee:	4618      	mov	r0, r3
                (const TaskHandle_t*)&SR_handle_array[sr_handle_index])) == pdPASS) //should i add handles to each of task created?
 8000df0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000df4:	f107 0208 	add.w	r2, r7, #8
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
            if ((retval_SR_thread = xTaskCreate(
 8000dfc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	9000      	str	r0, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	460a      	mov	r2, r1
 8000e08:	4913      	ldr	r1, [pc, #76]	; (8000e58 <departmentTask+0x11c>)
 8000e0a:	4814      	ldr	r0, [pc, #80]	; (8000e5c <departmentTask+0x120>)
 8000e0c:	f005 f9b1 	bl	8006172 <xTaskCreate>
 8000e10:	64b8      	str	r0, [r7, #72]	; 0x48
 8000e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d108      	bne.n	8000e2a <departmentTask+0xee>
            {
                printf("New SR was created!\r\n");
 8000e18:	4811      	ldr	r0, [pc, #68]	; (8000e60 <departmentTask+0x124>)
 8000e1a:	f007 fb75 	bl	8008508 <puts>
                sr_handle_index++;
 8000e1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e22:	3301      	adds	r3, #1
 8000e24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e28:	e79f      	b.n	8000d6a <departmentTask+0x2e>
            }
            else {
                printf("NEW SR failed to be created!\r\n");
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <departmentTask+0x128>)
 8000e2c:	f007 fb6c 	bl	8008508 <puts>
 8000e30:	e79b      	b.n	8000d6a <departmentTask+0x2e>
            }
        }
        else {
            printf("receive request from %d department queue failed. queue empty or time passed!\r\n", (int)depar_id);
 8000e32:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e36:	4619      	mov	r1, r3
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <departmentTask+0x12c>)
 8000e3a:	f007 faff 	bl	800843c <iprintf>
        sr_handle_index %= MAX_SR_HANDLES;
 8000e3e:	e794      	b.n	8000d6a <departmentTask+0x2e>
 8000e40:	080096cc 	.word	0x080096cc
 8000e44:	cccccccd 	.word	0xcccccccd
 8000e48:	200008c0 	.word	0x200008c0
 8000e4c:	20000024 	.word	0x20000024
 8000e50:	08009608 	.word	0x08009608
 8000e54:	20000004 	.word	0x20000004
 8000e58:	0800962c 	.word	0x0800962c
 8000e5c:	08000e6d 	.word	0x08000e6d
 8000e60:	08009644 	.word	0x08009644
 8000e64:	0800965c 	.word	0x0800965c
 8000e68:	0800967c 	.word	0x0800967c

08000e6c <ServiceRoutine>:

        }
    }
}

TaskFunction_t ServiceRoutine(void* req) {
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    request* reques = (request*)req;//
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
    department_id depar_id = reques->dep_id;
 8000e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int glob_semaphore_count_before_1 = uxSemaphoreGetCount(globalSemaphore);
 8000e80:	4b74      	ldr	r3, [pc, #464]	; (8001054 <ServiceRoutine+0x1e8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 ff6b 	bl	8005d60 <uxQueueMessagesWaiting>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	623b      	str	r3, [r7, #32]

    SemaphoreHandle_t department_semaphore = semaphoreList[depar_id];
 8000e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e92:	4a71      	ldr	r2, [pc, #452]	; (8001058 <ServiceRoutine+0x1ec>)
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	61fb      	str	r3, [r7, #28]
    printf("department request %d entered service routine\r\n", depar_id);
 8000e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	486e      	ldr	r0, [pc, #440]	; (800105c <ServiceRoutine+0x1f0>)
 8000ea2:	f007 facb 	bl	800843c <iprintf>
    int i = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    printf("requested cars: %d, sempahoreglobal: %d, concurrentsemaphore: %d", reques->requested_vehicles, uxSemaphoreGetCount(globalSemaphore), uxSemaphoreGetCount(department_semaphore));
 8000eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eac:	785b      	ldrb	r3, [r3, #1]
 8000eae:	461d      	mov	r5, r3
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <ServiceRoutine+0x1e8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 ff53 	bl	8005d60 <uxQueueMessagesWaiting>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	69f8      	ldr	r0, [r7, #28]
 8000ebe:	f004 ff4f 	bl	8005d60 <uxQueueMessagesWaiting>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	4865      	ldr	r0, [pc, #404]	; (8001060 <ServiceRoutine+0x1f4>)
 8000eca:	f007 fab7 	bl	800843c <iprintf>
    while (i < reques->requested_vehicles) {
 8000ece:	e0b5      	b.n	800103c <ServiceRoutine+0x1d0>
        printf("global sempahore count: %ld, concurrent semaphore count: %ld", uxSemaphoreGetCount(globalSemaphore), uxSemaphoreGetCount(department_semaphore));
 8000ed0:	4b60      	ldr	r3, [pc, #384]	; (8001054 <ServiceRoutine+0x1e8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 ff43 	bl	8005d60 <uxQueueMessagesWaiting>
 8000eda:	4604      	mov	r4, r0
 8000edc:	69f8      	ldr	r0, [r7, #28]
 8000ede:	f004 ff3f 	bl	8005d60 <uxQueueMessagesWaiting>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	485e      	ldr	r0, [pc, #376]	; (8001064 <ServiceRoutine+0x1f8>)
 8000eea:	f007 faa7 	bl	800843c <iprintf>
        int glob_semaphore_count_before_2 = uxSemaphoreGetCount(globalSemaphore);
 8000eee:	4b59      	ldr	r3, [pc, #356]	; (8001054 <ServiceRoutine+0x1e8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 ff34 	bl	8005d60 <uxQueueMessagesWaiting>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	61bb      	str	r3, [r7, #24]
        if (xSemaphoreTake(globalSemaphore, 0) == pdPASS && xSemaphoreTake(semaphoreList[depar_id], 0) == pdPASS) {
 8000efc:	4b55      	ldr	r3, [pc, #340]	; (8001054 <ServiceRoutine+0x1e8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fe18 	bl	8005b38 <xQueueSemaphoreTake>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d17b      	bne.n	8001006 <ServiceRoutine+0x19a>
 8000f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f12:	4a51      	ldr	r2, [pc, #324]	; (8001058 <ServiceRoutine+0x1ec>)
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fe0c 	bl	8005b38 <xQueueSemaphoreTake>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d16f      	bne.n	8001006 <ServiceRoutine+0x19a>
            printf("global semaphore and depar semaphore were taken! priority is %d\r\n", uxTaskPriorityGet(NULL));
 8000f26:	2000      	movs	r0, #0
 8000f28:	f005 fb14 	bl	8006554 <uxTaskPriorityGet>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	484d      	ldr	r0, [pc, #308]	; (8001068 <ServiceRoutine+0x1fc>)
 8000f32:	f007 fa83 	bl	800843c <iprintf>
            vTaskPrioritySet(NULL, uxTaskPriorityGet(NULL) + 1);// increases prioirity by one
 8000f36:	2000      	movs	r0, #0
 8000f38:	f005 fb0c 	bl	8006554 <uxTaskPriorityGet>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	2000      	movs	r0, #0
 8000f44:	f005 fb20 	bl	8006588 <vTaskPrioritySet>
            i++;
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
            int glob_semaphore_count_before_3 = uxSemaphoreGetCount(globalSemaphore);
 8000f4e:	4b41      	ldr	r3, [pc, #260]	; (8001054 <ServiceRoutine+0x1e8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 ff04 	bl	8005d60 <uxQueueMessagesWaiting>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	617b      	str	r3, [r7, #20]
            totalVehicles--;
 8000f5c:	4b43      	ldr	r3, [pc, #268]	; (800106c <ServiceRoutine+0x200>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	4a42      	ldr	r2, [pc, #264]	; (800106c <ServiceRoutine+0x200>)
 8000f64:	6013      	str	r3, [r2, #0]
            department_list[depar_id].available_num--;
 8000f66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f6a:	4941      	ldr	r1, [pc, #260]	; (8001070 <ServiceRoutine+0x204>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	3302      	adds	r3, #2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b2d8      	uxtb	r0, r3
 8000f7c:	493c      	ldr	r1, [pc, #240]	; (8001070 <ServiceRoutine+0x204>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	3302      	adds	r3, #2
 8000f88:	4602      	mov	r2, r0
 8000f8a:	701a      	strb	r2, [r3, #0]
            department_list[depar_id].concurrent_num--;
 8000f8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f90:	4937      	ldr	r1, [pc, #220]	; (8001070 <ServiceRoutine+0x204>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	4933      	ldr	r1, [pc, #204]	; (8001070 <ServiceRoutine+0x204>)
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	3301      	adds	r3, #1
 8000fae:	4602      	mov	r2, r0
 8000fb0:	701a      	strb	r2, [r3, #0]
            /* in case all resources for execution acquired, exectues, releases all semaphores and end task*/
            if (i == reques->requested_vehicles - 1) {
 8000fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb4:	785b      	ldrb	r3, [r3, #1]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d13e      	bne.n	800103c <ServiceRoutine+0x1d0>
                printf("##################################sending vehicles!\r\n");
 8000fbe:	482d      	ldr	r0, [pc, #180]	; (8001074 <ServiceRoutine+0x208>)
 8000fc0:	f007 faa2 	bl	8008508 <puts>
                vTaskDelay(pdMS_TO_TICKS(reques->time_to_complete));
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	4a29      	ldr	r2, [pc, #164]	; (8001078 <ServiceRoutine+0x20c>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	099b      	lsrs	r3, r3, #6
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 fa85 	bl	80064e8 <vTaskDelay>
                releaseResources(i, depar_id);
 8000fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fe6:	f000 f84f 	bl	8001088 <releaseResources>
                printf("released resources!\r\n");
 8000fea:	4824      	ldr	r0, [pc, #144]	; (800107c <ServiceRoutine+0x210>)
 8000fec:	f007 fa8c 	bl	8008508 <puts>
                int glob_semaphore_count_before_4 = uxSemaphoreGetCount(globalSemaphore);
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <ServiceRoutine+0x1e8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 feb3 	bl	8005d60 <uxQueueMessagesWaiting>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	613b      	str	r3, [r7, #16]
                vTaskDelete(NULL);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f005 f9fe 	bl	8006400 <vTaskDelete>
        if (xSemaphoreTake(globalSemaphore, 0) == pdPASS && xSemaphoreTake(semaphoreList[depar_id], 0) == pdPASS) {
 8001004:	e01a      	b.n	800103c <ServiceRoutine+0x1d0>
            }
        }
        else {
            /* in deadlock releases all semaphores acquired and then start again*/
            releaseResources(i, depar_id);
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800100a:	4619      	mov	r1, r3
 800100c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800100e:	f000 f83b 	bl	8001088 <releaseResources>
            vTaskPrioritySet(NULL, (UBaseType_t)department_thread_priority[depar_id]);
 8001012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001016:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <ServiceRoutine+0x214>)
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	4619      	mov	r1, r3
 800101e:	2000      	movs	r0, #0
 8001020:	f005 fab2 	bl	8006588 <vTaskPrioritySet>
            int glob_semaphore_count_before_5 = uxSemaphoreGetCount(globalSemaphore);
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <ServiceRoutine+0x1e8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fe99 	bl	8005d60 <uxQueueMessagesWaiting>
 800102e:	4603      	mov	r3, r0
 8001030:	60fb      	str	r3, [r7, #12]
            printf("collision detected, released all semaphores!\r\n");
 8001032:	4814      	ldr	r0, [pc, #80]	; (8001084 <ServiceRoutine+0x218>)
 8001034:	f007 fa68 	bl	8008508 <puts>
            i = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (i < reques->requested_vehicles) {
 800103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	461a      	mov	r2, r3
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	4293      	cmp	r3, r2
 8001046:	f6ff af43 	blt.w	8000ed0 <ServiceRoutine+0x64>


        }
    }
}
 800104a:	bf00      	nop
 800104c:	4618      	mov	r0, r3
 800104e:	3730      	adds	r7, #48	; 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bdb0      	pop	{r4, r5, r7, pc}
 8001054:	20000884 	.word	0x20000884
 8001058:	200008d0 	.word	0x200008d0
 800105c:	080096dc 	.word	0x080096dc
 8001060:	0800970c 	.word	0x0800970c
 8001064:	08009750 	.word	0x08009750
 8001068:	08009790 	.word	0x08009790
 800106c:	20000000 	.word	0x20000000
 8001070:	20000874 	.word	0x20000874
 8001074:	080097d4 	.word	0x080097d4
 8001078:	10624dd3 	.word	0x10624dd3
 800107c:	0800980c 	.word	0x0800980c
 8001080:	20000004 	.word	0x20000004
 8001084:	08009824 	.word	0x08009824

08001088 <releaseResources>:



void releaseResources(int i, department_id depar_id) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af02      	add	r7, sp, #8
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
    for (int j = 0; j < i;j++) {
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e066      	b.n	8001168 <releaseResources+0xe0>
        int glob_semaphore_count_before = uxSemaphoreGetCount(globalSemaphore);
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <releaseResources+0xf4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 fe5e 	bl	8005d60 <uxQueueMessagesWaiting>
 80010a4:	4603      	mov	r3, r0
 80010a6:	613b      	str	r3, [r7, #16]
        xSemaphoreGive(globalSemaphore);
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <releaseResources+0xf4>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	f004 fab5 	bl	8005620 <xQueueGenericSend>
        int glob_semahpore_count_after = uxSemaphoreGetCount(globalSemaphore);
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <releaseResources+0xf4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 fe50 	bl	8005d60 <uxQueueMessagesWaiting>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]
        xSemaphoreGive(semaphoreList[depar_id]);
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <releaseResources+0xf8>)
 80010c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010cc:	2300      	movs	r3, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	f004 faa5 	bl	8005620 <xQueueGenericSend>
        printf("department semaphore and global were given!\r\n");
 80010d6:	482b      	ldr	r0, [pc, #172]	; (8001184 <releaseResources+0xfc>)
 80010d8:	f007 fa16 	bl	8008508 <puts>
        totalVehicles++;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <releaseResources+0x100>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a29      	ldr	r2, [pc, #164]	; (8001188 <releaseResources+0x100>)
 80010e4:	6013      	str	r3, [r2, #0]
        department_list[depar_id].concurrent_num++;
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	4928      	ldr	r1, [pc, #160]	; (800118c <releaseResources+0x104>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2d8      	uxtb	r0, r3
 80010fa:	4924      	ldr	r1, [pc, #144]	; (800118c <releaseResources+0x104>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	440b      	add	r3, r1
 8001104:	3301      	adds	r3, #1
 8001106:	4602      	mov	r2, r0
 8001108:	701a      	strb	r2, [r3, #0]
        department_list[depar_id].available_num++;
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	491f      	ldr	r1, [pc, #124]	; (800118c <releaseResources+0x104>)
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	440b      	add	r3, r1
 8001116:	3302      	adds	r3, #2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b2d8      	uxtb	r0, r3
 800111e:	491b      	ldr	r1, [pc, #108]	; (800118c <releaseResources+0x104>)
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	440b      	add	r3, r1
 8001128:	3302      	adds	r3, #2
 800112a:	4602      	mov	r2, r0
 800112c:	701a      	strb	r2, [r3, #0]
        printf("released resources of %d department: totalVehicles: %d, concurrent num: %d, availble num: %d\r\n", depar_id, totalVehicles, department_list[depar_id].concurrent_num, department_list[depar_id].available_num);
 800112e:	78f9      	ldrb	r1, [r7, #3]
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <releaseResources+0x100>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	78fa      	ldrb	r2, [r7, #3]
 8001136:	4c15      	ldr	r4, [pc, #84]	; (800118c <releaseResources+0x104>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	4423      	add	r3, r4
 8001140:	3301      	adds	r3, #1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461d      	mov	r5, r3
 8001146:	78fa      	ldrb	r2, [r7, #3]
 8001148:	4c10      	ldr	r4, [pc, #64]	; (800118c <releaseResources+0x104>)
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	4423      	add	r3, r4
 8001152:	3302      	adds	r3, #2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	462b      	mov	r3, r5
 800115a:	4602      	mov	r2, r0
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <releaseResources+0x108>)
 800115e:	f007 f96d 	bl	800843c <iprintf>
    for (int j = 0; j < i;j++) {
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	db94      	blt.n	800109a <releaseResources+0x12>
        //to add delay time to break symmetry?
    }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bdb0      	pop	{r4, r5, r7, pc}
 800117a:	bf00      	nop
 800117c:	20000884 	.word	0x20000884
 8001180:	200008d0 	.word	0x200008d0
 8001184:	08009854 	.word	0x08009854
 8001188:	20000000 	.word	0x20000000
 800118c:	20000874 	.word	0x20000874
 8001190:	08009884 	.word	0x08009884

08001194 <generateTask>:
}


*/
TaskFunction_t generateTask(void* argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    BaseType_t retval_Send_To_Dispatch_Queue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    while (1) {
        department_id dep = rand() % DEPARTMENTS_NUM;
 80011a0:	f007 f84c 	bl	800823c <rand>
 80011a4:	4603      	mov	r3, r0
 80011a6:	425a      	negs	r2, r3
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	f002 0203 	and.w	r2, r2, #3
 80011b0:	bf58      	it	pl
 80011b2:	4253      	negpl	r3, r2
 80011b4:	76fb      	strb	r3, [r7, #27]
        uint32_t active_time = 1;//rand() % XTICKS_MAX;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
        uint8_t vehicle_num_to_dispatch = (rand() % MAX_NUM_REQUESTED_VEHICLES) + 1; // request num of vehicles can be only greater than zero
 80011ba:	f007 f83f 	bl	800823c <rand>
 80011be:	4602      	mov	r2, r0
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <generateTask+0x84>)
 80011c2:	fb83 1302 	smull	r1, r3, r3, r2
 80011c6:	1099      	asrs	r1, r3, #2
 80011c8:	17d3      	asrs	r3, r2, #31
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	1ad1      	subs	r1, r2, r3
 80011d6:	b2cb      	uxtb	r3, r1
 80011d8:	3301      	adds	r3, #1
 80011da:	74fb      	strb	r3, [r7, #19]
        request req = { dep,vehicle_num_to_dispatch,active_time };
 80011dc:	7efb      	ldrb	r3, [r7, #27]
 80011de:	723b      	strb	r3, [r7, #8]
 80011e0:	7cfb      	ldrb	r3, [r7, #19]
 80011e2:	727b      	strb	r3, [r7, #9]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	60fb      	str	r3, [r7, #12]
        if ((retval_Send_To_Dispatch_Queue = xQueueSendToBack(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT)) == pdPASS) {
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <generateTask+0x88>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f107 0108 	add.w	r1, r7, #8
 80011f0:	2300      	movs	r3, #0
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	f004 fa13 	bl	8005620 <xQueueGenericSend>
 80011fa:	61f8      	str	r0, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d106      	bne.n	8001210 <generateTask+0x7c>
            printf("generated request. request was put inside main queue! request: dep: %d, active time: %u, vehicle num: %u\r\n", dep, active_time, vehicle_num_to_dispatch);
 8001202:	7ef9      	ldrb	r1, [r7, #27]
 8001204:	7cfb      	ldrb	r3, [r7, #19]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <generateTask+0x8c>)
 800120a:	f007 f917 	bl	800843c <iprintf>
 800120e:	e7c7      	b.n	80011a0 <generateTask+0xc>

        }
        else {
            printf("request couldnt enter main queue due to it is full or time passed!\r\n");
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <generateTask+0x90>)
 8001212:	f007 f979 	bl	8008508 <puts>
    while (1) {
 8001216:	e7c3      	b.n	80011a0 <generateTask+0xc>
 8001218:	66666667 	.word	0x66666667
 800121c:	200008ac 	.word	0x200008ac
 8001220:	080098e4 	.word	0x080098e4
 8001224:	08009950 	.word	0x08009950

08001228 <__io_putchar>:


    }
}

int __io_putchar(int ch) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // Replace huartX with your UART handle
 8001230:	1d39      	adds	r1, r7, #4
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	2201      	movs	r2, #1
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <__io_putchar+0x20>)
 800123a:	f002 fc6f 	bl	8003b1c <HAL_UART_Transmit>
  return ch;
 800123e:	687b      	ldr	r3, [r7, #4]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200002e4 	.word	0x200002e4

0800124c <Error_Handler>:

void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	210f      	movs	r1, #15
 8001292:	f06f 0001 	mvn.w	r0, #1
 8001296:	f000 fc2c 	bl	8001af2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_ETH_MspInit+0x158>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	f040 8096 	bne.w	80013f8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012cc:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 80012d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a46      	ldr	r2, [pc, #280]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 80012ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b44      	ldr	r3, [pc, #272]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a40      	ldr	r2, [pc, #256]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 8001302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a3a      	ldr	r2, [pc, #232]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 8001362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_ETH_MspInit+0x15c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001374:	2332      	movs	r3, #50	; 0x32
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001384:	230b      	movs	r3, #11
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	481e      	ldr	r0, [pc, #120]	; (8001408 <HAL_ETH_MspInit+0x160>)
 8001390:	f000 ff9e 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001394:	2386      	movs	r3, #134	; 0x86
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a4:	230b      	movs	r3, #11
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4817      	ldr	r0, [pc, #92]	; (800140c <HAL_ETH_MspInit+0x164>)
 80013b0:	f000 ff8e 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c6:	230b      	movs	r3, #11
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <HAL_ETH_MspInit+0x168>)
 80013d2:	f000 ff7d 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e8:	230b      	movs	r3, #11
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4808      	ldr	r0, [pc, #32]	; (8001414 <HAL_ETH_MspInit+0x16c>)
 80013f4:	f000 ff6c 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3738      	adds	r7, #56	; 0x38
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40028000 	.word	0x40028000
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40021800 	.word	0x40021800

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0aa      	sub	sp, #168	; 0xa8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2284      	movs	r2, #132	; 0x84
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f007 f945 	bl	80086c8 <memset>
  if(huart->Instance==USART3)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a26      	ldr	r2, [pc, #152]	; (80014dc <HAL_UART_MspInit+0xc4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d144      	bne.n	80014d2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800144e:	2300      	movs	r3, #0
 8001450:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4618      	mov	r0, r3
 8001458:	f001 ff22 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001462:	f7ff fef3 	bl	800124c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_UART_MspInit+0xc8>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_UART_MspInit+0xc8>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_UART_MspInit+0xc8>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0xc8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0xc8>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0xc8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b0:	2307      	movs	r3, #7
 80014b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014ba:	4619      	mov	r1, r3
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <HAL_UART_MspInit+0xcc>)
 80014be:	f000 ff07 	bl	80022d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	2027      	movs	r0, #39	; 0x27
 80014c8:	f000 fb13 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014cc:	2027      	movs	r0, #39	; 0x27
 80014ce:	f000 fb2c 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	37a8      	adds	r7, #168	; 0xa8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004800 	.word	0x40004800
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020c00 	.word	0x40020c00

080014e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0ac      	sub	sp, #176	; 0xb0
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2284      	movs	r2, #132	; 0x84
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f007 f8dd 	bl	80086c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001516:	d159      	bne.n	80015cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001518:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800151c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4618      	mov	r0, r3
 800152a:	f001 feb9 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001534:	f7ff fe8a 	bl	800124c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a25      	ldr	r2, [pc, #148]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001550:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800156a:	230a      	movs	r3, #10
 800156c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001574:	4619      	mov	r1, r3
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <HAL_PCD_MspInit+0xf0>)
 8001578:	f000 feaa 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800157c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001594:	4619      	mov	r1, r3
 8001596:	4810      	ldr	r0, [pc, #64]	; (80015d8 <HAL_PCD_MspInit+0xf0>)
 8001598:	f000 fe9a 	bl	80022d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 800159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a0:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 80015a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a6:	6353      	str	r3, [r2, #52]	; 0x34
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015be:	6453      	str	r3, [r2, #68]	; 0x44
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_PCD_MspInit+0xec>)
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	37b0      	adds	r7, #176	; 0xb0
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f952 	bl	80018b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001610:	f005 fcb8 	bl	8006f84 <xTaskGetSchedulerState>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800161a:	f006 fb95 	bl	8007d48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <USART3_IRQHandler+0x10>)
 800162a:	f002 fafb 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002e4 	.word	0x200002e4

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_kill>:

int _kill(int pid, int sig)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001652:	f007 f887 	bl	8008764 <__errno>
 8001656:	4603      	mov	r3, r0
 8001658:	2216      	movs	r2, #22
 800165a:	601a      	str	r2, [r3, #0]
  return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_exit>:

void _exit (int status)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ffe7 	bl	8001648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800167a:	e7fe      	b.n	800167a <_exit+0x12>

0800167c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fda9 	bl	8001228 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f006 ffec 	bl	8008764 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20050000 	.word	0x20050000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	200008e8 	.word	0x200008e8
 80017c0:	20006470 	.word	0x20006470

080017c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f006 ffab 	bl	8008770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7fe fec7 	bl	80005ac <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800182c:	08009ab4 	.word	0x08009ab4
  ldr r2, =_sbss
 8001830:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001834:	20006470 	.word	0x20006470

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>

0800183a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183e:	2003      	movs	r0, #3
 8001840:	f000 f94c 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001844:	200f      	movs	r0, #15
 8001846:	f000 f805 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184a:	f7ff fd05 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f967 	bl	8001b46 <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f92f 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000034 	.word	0x20000034
 80018ac:	2000003c 	.word	0x2000003c
 80018b0:	20000038 	.word	0x20000038

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2000003c 	.word	0x2000003c
 80018d8:	200008ec 	.word	0x200008ec

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200008ec 	.word	0x200008ec

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000003c 	.word	0x2000003c

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	05fa0000 	.word	0x05fa0000

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff feb6 	bl	80018dc <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d008      	beq.n	8001b90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e052      	b.n	8001c36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0216 	bic.w	r2, r2, #22
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d103      	bne.n	8001bc0 <HAL_DMA_Abort+0x62>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0208 	bic.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be0:	e013      	b.n	8001c0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be2:	f7ff fe7b 	bl	80018dc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d90c      	bls.n	8001c0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e015      	b.n	8001c36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e4      	bne.n	8001be2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00c      	b.n	8001c76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2205      	movs	r2, #5
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06a      	b.n	8001d6c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d106      	bne.n	8001cae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2223      	movs	r2, #35	; 0x23
 8001ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fafd 	bl	80012a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_ETH_Init+0xf0>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <HAL_ETH_Init+0xf0>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_ETH_Init+0xf0>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_ETH_Init+0xf4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <HAL_ETH_Init+0xf4>)
 8001ccc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cd0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_ETH_Init+0xf4>)
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4927      	ldr	r1, [pc, #156]	; (8001d78 <HAL_ETH_Init+0xf4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_ETH_Init+0xf4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfc:	f7ff fdee 	bl	80018dc <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d02:	e011      	b.n	8001d28 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d04:	f7ff fdea 	bl	80018dc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d12:	d909      	bls.n	8001d28 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2204      	movs	r2, #4
 8001d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	22e0      	movs	r2, #224	; 0xe0
 8001d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e021      	b.n	8001d6c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1e4      	bne.n	8001d04 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f958 	bl	8001ff0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f9ff 	bl	8002144 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fa55 	bl	80021f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	461a      	mov	r2, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f9bd 	bl	80020d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2210      	movs	r2, #16
 8001d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40013800 	.word	0x40013800

08001d7c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4b51      	ldr	r3, [pc, #324]	; (8001ed8 <ETH_SetMACConfig+0x15c>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	7c1b      	ldrb	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <ETH_SetMACConfig+0x28>
 8001d9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001da2:	e000      	b.n	8001da6 <ETH_SetMACConfig+0x2a>
 8001da4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7c5b      	ldrb	r3, [r3, #17]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <ETH_SetMACConfig+0x38>
 8001dae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db2:	e000      	b.n	8001db6 <ETH_SetMACConfig+0x3a>
 8001db4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001db6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001dbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	7fdb      	ldrb	r3, [r3, #31]
 8001dc2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001dc4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	7f92      	ldrb	r2, [r2, #30]
 8001dd0:	2a00      	cmp	r2, #0
 8001dd2:	d102      	bne.n	8001dda <ETH_SetMACConfig+0x5e>
 8001dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd8:	e000      	b.n	8001ddc <ETH_SetMACConfig+0x60>
 8001dda:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ddc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001de4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001df2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	d102      	bne.n	8001e04 <ETH_SetMACConfig+0x88>
 8001dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e02:	e000      	b.n	8001e06 <ETH_SetMACConfig+0x8a>
 8001e04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7bdb      	ldrb	r3, [r3, #15]
 8001e0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff fd5c 	bl	80018f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e52:	4013      	ands	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d101      	bne.n	8001e6a <ETH_SetMACConfig+0xee>
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	e000      	b.n	8001e6c <ETH_SetMACConfig+0xf0>
 8001e6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e7a:	2a01      	cmp	r2, #1
 8001e7c:	d101      	bne.n	8001e82 <ETH_SetMACConfig+0x106>
 8001e7e:	2208      	movs	r2, #8
 8001e80:	e000      	b.n	8001e84 <ETH_SetMACConfig+0x108>
 8001e82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e8c:	2a01      	cmp	r2, #1
 8001e8e:	d101      	bne.n	8001e94 <ETH_SetMACConfig+0x118>
 8001e90:	2204      	movs	r2, #4
 8001e92:	e000      	b.n	8001e96 <ETH_SetMACConfig+0x11a>
 8001e94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e9e:	2a01      	cmp	r2, #1
 8001ea0:	d101      	bne.n	8001ea6 <ETH_SetMACConfig+0x12a>
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	e000      	b.n	8001ea8 <ETH_SetMACConfig+0x12c>
 8001ea6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7ff fd17 	bl	80018f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	ff20810f 	.word	0xff20810f

08001edc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <ETH_SetDMAConfig+0x110>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7b1b      	ldrb	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <ETH_SetDMAConfig+0x2c>
 8001f02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f06:	e000      	b.n	8001f0a <ETH_SetDMAConfig+0x2e>
 8001f08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	7b5b      	ldrb	r3, [r3, #13]
 8001f0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	7f52      	ldrb	r2, [r2, #29]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d102      	bne.n	8001f20 <ETH_SetDMAConfig+0x44>
 8001f1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f1e:	e000      	b.n	8001f22 <ETH_SetDMAConfig+0x46>
 8001f20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	7b9b      	ldrb	r3, [r3, #14]
 8001f28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7f1b      	ldrb	r3, [r3, #28]
 8001f36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	7f9b      	ldrb	r3, [r3, #30]
 8001f3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f50:	4313      	orrs	r3, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff fcbe 	bl	80018f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	791b      	ldrb	r3, [r3, #4]
 8001f8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fa4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001fa6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fb4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fc2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff fc8f 	bl	80018f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	f8de3f23 	.word	0xf8de3f23

08001ff0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0a6      	sub	sp, #152	; 0x98
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002004:	2300      	movs	r3, #0
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800202c:	2300      	movs	r3, #0
 800202e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002036:	2300      	movs	r3, #0
 8002038:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002056:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800205c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe86 	bl	8001d7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002070:	2301      	movs	r3, #1
 8002072:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002074:	2301      	movs	r3, #1
 8002076:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800207e:	2301      	movs	r3, #1
 8002080:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002096:	2301      	movs	r3, #1
 8002098:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800209c:	2301      	movs	r3, #1
 800209e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ff08 	bl	8001edc <ETH_SetDMAConfig>
}
 80020cc:	bf00      	nop
 80020ce:	3798      	adds	r7, #152	; 0x98
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3305      	adds	r3, #5
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	3204      	adds	r2, #4
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <ETH_MACAddressConfig+0x68>)
 80020f6:	4413      	add	r3, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3303      	adds	r3, #3
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	061a      	lsls	r2, r3, #24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3302      	adds	r3, #2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3301      	adds	r3, #1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	4313      	orrs	r3, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <ETH_MACAddressConfig+0x6c>)
 8002126:	4413      	add	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	6013      	str	r3, [r2, #0]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40028040 	.word	0x40028040
 8002140:	40028044 	.word	0x40028044

08002144 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e03e      	b.n	80021d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	3206      	adds	r2, #6
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d80c      	bhi.n	80021b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	e004      	b.n	80021be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d9bd      	bls.n	8002152 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e8:	611a      	str	r2, [r3, #16]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e046      	b.n	8002292 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6919      	ldr	r1, [r3, #16]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002240:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002248:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	3212      	adds	r2, #18
 800225e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d80c      	bhi.n	8002282 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6919      	ldr	r1, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	e004      	b.n	800228c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3301      	adds	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d9b5      	bls.n	8002204 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c2:	60da      	str	r2, [r3, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e175      	b.n	80025dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	f040 8164 	bne.w	80025d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d005      	beq.n	8002326 <HAL_GPIO_Init+0x56>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d130      	bne.n	8002388 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0201 	and.w	r2, r3, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b03      	cmp	r3, #3
 8002392:	d017      	beq.n	80023c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d123      	bne.n	8002418 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	08da      	lsrs	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3208      	adds	r2, #8
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80be 	beq.w	80025d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_GPIO_Init+0x324>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a65      	ldr	r2, [pc, #404]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002472:	4a61      	ldr	r2, [pc, #388]	; (80025f8 <HAL_GPIO_Init+0x328>)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_GPIO_Init+0x32c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d037      	beq.n	800250e <HAL_GPIO_Init+0x23e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a57      	ldr	r2, [pc, #348]	; (8002600 <HAL_GPIO_Init+0x330>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d031      	beq.n	800250a <HAL_GPIO_Init+0x23a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a56      	ldr	r2, [pc, #344]	; (8002604 <HAL_GPIO_Init+0x334>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02b      	beq.n	8002506 <HAL_GPIO_Init+0x236>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a55      	ldr	r2, [pc, #340]	; (8002608 <HAL_GPIO_Init+0x338>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d025      	beq.n	8002502 <HAL_GPIO_Init+0x232>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a54      	ldr	r2, [pc, #336]	; (800260c <HAL_GPIO_Init+0x33c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <HAL_GPIO_Init+0x22e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a53      	ldr	r2, [pc, #332]	; (8002610 <HAL_GPIO_Init+0x340>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x22a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_GPIO_Init+0x344>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x226>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a51      	ldr	r2, [pc, #324]	; (8002618 <HAL_GPIO_Init+0x348>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x222>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a50      	ldr	r2, [pc, #320]	; (800261c <HAL_GPIO_Init+0x34c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x21e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	; (8002620 <HAL_GPIO_Init+0x350>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x21a>
 80024e6:	2309      	movs	r3, #9
 80024e8:	e012      	b.n	8002510 <HAL_GPIO_Init+0x240>
 80024ea:	230a      	movs	r3, #10
 80024ec:	e010      	b.n	8002510 <HAL_GPIO_Init+0x240>
 80024ee:	2308      	movs	r3, #8
 80024f0:	e00e      	b.n	8002510 <HAL_GPIO_Init+0x240>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e00c      	b.n	8002510 <HAL_GPIO_Init+0x240>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00a      	b.n	8002510 <HAL_GPIO_Init+0x240>
 80024fa:	2305      	movs	r3, #5
 80024fc:	e008      	b.n	8002510 <HAL_GPIO_Init+0x240>
 80024fe:	2304      	movs	r3, #4
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x240>
 8002502:	2303      	movs	r3, #3
 8002504:	e004      	b.n	8002510 <HAL_GPIO_Init+0x240>
 8002506:	2302      	movs	r3, #2
 8002508:	e002      	b.n	8002510 <HAL_GPIO_Init+0x240>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_GPIO_Init+0x240>
 800250e:	2300      	movs	r3, #0
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	f002 0203 	and.w	r2, r2, #3
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	4093      	lsls	r3, r2
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002520:	4935      	ldr	r1, [pc, #212]	; (80025f8 <HAL_GPIO_Init+0x328>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	3302      	adds	r3, #2
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252e:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <HAL_GPIO_Init+0x354>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002552:	4a34      	ldr	r2, [pc, #208]	; (8002624 <HAL_GPIO_Init+0x354>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_GPIO_Init+0x354>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <HAL_GPIO_Init+0x354>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002582:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_GPIO_Init+0x354>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a6:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_GPIO_Init+0x354>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_GPIO_Init+0x354>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <HAL_GPIO_Init+0x354>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3301      	adds	r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	f67f ae86 	bls.w	80022f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40021000 	.word	0x40021000
 8002610:	40021400 	.word	0x40021400
 8002614:	40021800 	.word	0x40021800
 8002618:	40021c00 	.word	0x40021c00
 800261c:	40022000 	.word	0x40022000
 8002620:	40022400 	.word	0x40022400
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800265a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265c:	b08f      	sub	sp, #60	; 0x3c
 800265e:	af0a      	add	r7, sp, #40	; 0x28
 8002660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e116      	b.n	800289a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe ff2e 	bl	80014e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2203      	movs	r2, #3
 8002690:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 faac 	bl	8004c08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	687e      	ldr	r6, [r7, #4]
 80026b8:	466d      	mov	r5, sp
 80026ba:	f106 0410 	add.w	r4, r6, #16
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ce:	1d33      	adds	r3, r6, #4
 80026d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	f002 fa40 	bl	8004b58 <USB_CoreInit>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0d7      	b.n	800289a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fa9a 	bl	8004c2a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e04a      	b.n	8002792 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	333d      	adds	r3, #61	; 0x3d
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	333c      	adds	r3, #60	; 0x3c
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	b298      	uxth	r0, r3
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3344      	adds	r3, #68	; 0x44
 8002738:	4602      	mov	r2, r0
 800273a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3340      	adds	r3, #64	; 0x40
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3348      	adds	r3, #72	; 0x48
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	334c      	adds	r3, #76	; 0x4c
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3354      	adds	r3, #84	; 0x54
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	3301      	adds	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	d3af      	bcc.n	80026fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e044      	b.n	800282c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3301      	adds	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3b5      	bcc.n	80027a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	687e      	ldr	r6, [r7, #4]
 800283e:	466d      	mov	r5, sp
 8002840:	f106 0410 	add.w	r4, r6, #16
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002850:	e885 0003 	stmia.w	r5, {r0, r1}
 8002854:	1d33      	adds	r3, r6, #4
 8002856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002858:	6838      	ldr	r0, [r7, #0]
 800285a:	f002 fa33 	bl	8004cc4 <USB_DevInit>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e014      	b.n	800289a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f80b 	bl	80028a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fbf1 	bl	800507a <USB_DevDisconnect>

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	10000003 	.word	0x10000003

080028ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40007000 	.word	0x40007000

0800290c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e291      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8087 	beq.w	8002a3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002930:	4b96      	ldr	r3, [pc, #600]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b04      	cmp	r3, #4
 800293a:	d00c      	beq.n	8002956 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293c:	4b93      	ldr	r3, [pc, #588]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0x62>
 8002948:	4b90      	ldr	r3, [pc, #576]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	4b8d      	ldr	r3, [pc, #564]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d06c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x130>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d168      	bne.n	8002a3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e26b      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x7a>
 8002978:	4b84      	ldr	r3, [pc, #528]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a83      	ldr	r2, [pc, #524]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e02e      	b.n	80029e4 <HAL_RCC_OscConfig+0xd8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x9c>
 800298e:	4b7f      	ldr	r3, [pc, #508]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7e      	ldr	r2, [pc, #504]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b7c      	ldr	r3, [pc, #496]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7b      	ldr	r2, [pc, #492]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xd8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0xc0>
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a75      	ldr	r2, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a72      	ldr	r2, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xd8>
 80029cc:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6e      	ldr	r2, [pc, #440]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b6c      	ldr	r3, [pc, #432]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6b      	ldr	r2, [pc, #428]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe ff76 	bl	80018dc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe ff72 	bl	80018dc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e21f      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe8>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff62 	bl	80018dc <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe ff5e 	bl	80018dc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e20b      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x110>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d069      	beq.n	8002b1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4a:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x190>
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1df      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	493d      	ldr	r1, [pc, #244]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e040      	b.n	8002b1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d023      	beq.n	8002aec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe ff14 	bl	80018dc <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe ff10 	bl	80018dc <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1bd      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4929      	ldr	r1, [pc, #164]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
 8002aea:	e018      	b.n	8002b1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fef0 	bl	80018dc <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe feec 	bl	80018dc <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e199      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d038      	beq.n	8002b9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d019      	beq.n	8002b66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fecd 	bl	80018dc <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe fec9 	bl	80018dc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e176      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x23a>
 8002b64:	e01a      	b.n	8002b9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_RCC_OscConfig+0x280>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe feb3 	bl	80018dc <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7fe feaf 	bl	80018dc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d903      	bls.n	8002b90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e15c      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
 8002b8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b91      	ldr	r3, [pc, #580]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ee      	bne.n	8002b7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a4 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002baa:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a87      	ldr	r2, [pc, #540]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd2:	4b82      	ldr	r3, [pc, #520]	; (8002ddc <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bde:	4b7f      	ldr	r3, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x4d0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7e      	ldr	r2, [pc, #504]	; (8002ddc <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe fe77 	bl	80018dc <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf2:	f7fe fe73 	bl	80018dc <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b64      	cmp	r3, #100	; 0x64
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e120      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x31a>
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	e02d      	b.n	8002c82 <HAL_RCC_OscConfig+0x376>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x33c>
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a69      	ldr	r2, [pc, #420]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a66      	ldr	r2, [pc, #408]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
 8002c46:	e01c      	b.n	8002c82 <HAL_RCC_OscConfig+0x376>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x35e>
 8002c50:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a5d      	ldr	r2, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x376>
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	4b58      	ldr	r3, [pc, #352]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fe27 	bl	80018dc <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fe23 	bl	80018dc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0ce      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ee      	beq.n	8002c92 <HAL_RCC_OscConfig+0x386>
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fe11 	bl	80018dc <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fe0d 	bl	80018dc <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ee      	bne.n	8002cbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a3b      	ldr	r2, [pc, #236]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80a4 	beq.w	8002e44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d06b      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d149      	bne.n	8002da4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fdde 	bl	80018dc <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fdda 	bl	80018dc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e087      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	4313      	orrs	r3, r2
 8002d68:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d6e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fdae 	bl	80018dc <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fdaa 	bl	80018dc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e057      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x478>
 8002da2:	e04f      	b.n	8002e44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fd94 	bl	80018dc <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe fd90 	bl	80018dc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e03d      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4ac>
 8002dd6:	e035      	b.n	8002e44 <HAL_RCC_OscConfig+0x538>
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002de0:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x544>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d028      	beq.n	8002e40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d121      	bne.n	8002e40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d11a      	bne.n	8002e40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0d0      	b.n	800300e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d910      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	4965      	ldr	r1, [pc, #404]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0b8      	b.n	800300e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ecc:	4b53      	ldr	r3, [pc, #332]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	494d      	ldr	r1, [pc, #308]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d040      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d115      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e073      	b.n	800300e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b3d      	ldr	r3, [pc, #244]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06b      	b.n	800300e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4936      	ldr	r1, [pc, #216]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fe fcc8 	bl	80018dc <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe fcc4 	bl	80018dc <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e053      	b.n	800300e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d210      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4922      	ldr	r1, [pc, #136]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e032      	b.n	800300e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4916      	ldr	r1, [pc, #88]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fe6:	f000 f821 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	490a      	ldr	r1, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1d0>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1d4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fc24 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023c00 	.word	0x40023c00
 800301c:	40023800 	.word	0x40023800
 8003020:	080099ac 	.word	0x080099ac
 8003024:	20000034 	.word	0x20000034
 8003028:	20000038 	.word	0x20000038

0800302c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003030:	b094      	sub	sp, #80	; 0x50
 8003032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	647b      	str	r3, [r7, #68]	; 0x44
 8003038:	2300      	movs	r3, #0
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800303c:	2300      	movs	r3, #0
 800303e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003044:	4b79      	ldr	r3, [pc, #484]	; (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b08      	cmp	r3, #8
 800304e:	d00d      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x40>
 8003050:	2b08      	cmp	r3, #8
 8003052:	f200 80e1 	bhi.w	8003218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x34>
 800305a:	2b04      	cmp	r3, #4
 800305c:	d003      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x3a>
 800305e:	e0db      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b73      	ldr	r3, [pc, #460]	; (8003230 <HAL_RCC_GetSysClockFreq+0x204>)
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003064:	e0db      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003066:	4b73      	ldr	r3, [pc, #460]	; (8003234 <HAL_RCC_GetSysClockFreq+0x208>)
 8003068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800306a:	e0d8      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306c:	4b6f      	ldr	r3, [pc, #444]	; (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003076:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d063      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	2200      	movs	r2, #0
 800308a:	63bb      	str	r3, [r7, #56]	; 0x38
 800308c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003094:	633b      	str	r3, [r7, #48]	; 0x30
 8003096:	2300      	movs	r3, #0
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
 800309a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800309e:	4622      	mov	r2, r4
 80030a0:	462b      	mov	r3, r5
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	0159      	lsls	r1, r3, #5
 80030ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b0:	0150      	lsls	r0, r2, #5
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4621      	mov	r1, r4
 80030b8:	1a51      	subs	r1, r2, r1
 80030ba:	6139      	str	r1, [r7, #16]
 80030bc:	4629      	mov	r1, r5
 80030be:	eb63 0301 	sbc.w	r3, r3, r1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d0:	4659      	mov	r1, fp
 80030d2:	018b      	lsls	r3, r1, #6
 80030d4:	4651      	mov	r1, sl
 80030d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030da:	4651      	mov	r1, sl
 80030dc:	018a      	lsls	r2, r1, #6
 80030de:	4651      	mov	r1, sl
 80030e0:	ebb2 0801 	subs.w	r8, r2, r1
 80030e4:	4659      	mov	r1, fp
 80030e6:	eb63 0901 	sbc.w	r9, r3, r1
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fe:	4690      	mov	r8, r2
 8003100:	4699      	mov	r9, r3
 8003102:	4623      	mov	r3, r4
 8003104:	eb18 0303 	adds.w	r3, r8, r3
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	462b      	mov	r3, r5
 800310c:	eb49 0303 	adc.w	r3, r9, r3
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800311e:	4629      	mov	r1, r5
 8003120:	024b      	lsls	r3, r1, #9
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003128:	4621      	mov	r1, r4
 800312a:	024a      	lsls	r2, r1, #9
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003132:	2200      	movs	r2, #0
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
 8003136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800313c:	f7fd f8b8 	bl	80002b0 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003148:	e058      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b38      	ldr	r3, [pc, #224]	; (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	2200      	movs	r2, #0
 8003152:	4618      	mov	r0, r3
 8003154:	4611      	mov	r1, r2
 8003156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800315a:	623b      	str	r3, [r7, #32]
 800315c:	2300      	movs	r3, #0
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
 8003160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003164:	4642      	mov	r2, r8
 8003166:	464b      	mov	r3, r9
 8003168:	f04f 0000 	mov.w	r0, #0
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	0159      	lsls	r1, r3, #5
 8003172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003176:	0150      	lsls	r0, r2, #5
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4641      	mov	r1, r8
 800317e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003182:	4649      	mov	r1, r9
 8003184:	eb63 0b01 	sbc.w	fp, r3, r1
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800319c:	ebb2 040a 	subs.w	r4, r2, sl
 80031a0:	eb63 050b 	sbc.w	r5, r3, fp
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	00eb      	lsls	r3, r5, #3
 80031ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b2:	00e2      	lsls	r2, r4, #3
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	18e3      	adds	r3, r4, r3
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	464b      	mov	r3, r9
 80031c0:	eb45 0303 	adc.w	r3, r5, r3
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d2:	4629      	mov	r1, r5
 80031d4:	028b      	lsls	r3, r1, #10
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031dc:	4621      	mov	r1, r4
 80031de:	028a      	lsls	r2, r1, #10
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e6:	2200      	movs	r2, #0
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	61fa      	str	r2, [r7, #28]
 80031ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f0:	f7fd f85e 	bl	80002b0 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	3301      	adds	r3, #1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800320c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800320e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003216:	e002      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetSysClockFreq+0x204>)
 800321a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800321e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003220:	4618      	mov	r0, r3
 8003222:	3750      	adds	r7, #80	; 0x50
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	00f42400 	.word	0x00f42400
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_RCC_GetHCLKFreq+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000034 	.word	0x20000034

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003254:	f7ff fff0 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0a9b      	lsrs	r3, r3, #10
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4903      	ldr	r1, [pc, #12]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023800 	.word	0x40023800
 8003274:	080099bc 	.word	0x080099bc

08003278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800327c:	f7ff ffdc 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0b5b      	lsrs	r3, r3, #13
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK2Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	080099bc 	.word	0x080099bc

080032a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d012      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032c8:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a68      	ldr	r2, [pc, #416]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032d2:	6093      	str	r3, [r2, #8]
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032dc:	4964      	ldr	r1, [pc, #400]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d017      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032fa:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	4959      	ldr	r1, [pc, #356]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003318:	d101      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d017      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	494a      	ldr	r1, [pc, #296]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003354:	d101      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003372:	2301      	movs	r3, #1
 8003374:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 808b 	beq.w	800349a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	4a39      	ldr	r2, [pc, #228]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
 8003390:	4b37      	ldr	r3, [pc, #220]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800339c:	4b35      	ldr	r3, [pc, #212]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a34      	ldr	r2, [pc, #208]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a8:	f7fe fa98 	bl	80018dc <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b0:	f7fe fa94 	bl	80018dc <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e357      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d035      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d02e      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800340e:	4a18      	ldr	r2, [pc, #96]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003414:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d114      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fa5c 	bl	80018dc <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	e00a      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe fa58 	bl	80018dc <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e319      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ee      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003456:	d111      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003466:	400b      	ands	r3, r1
 8003468:	4901      	ldr	r1, [pc, #4]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
 800346e:	e00b      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003470:	40023800 	.word	0x40023800
 8003474:	40007000 	.word	0x40007000
 8003478:	0ffffcff 	.word	0x0ffffcff
 800347c:	4baa      	ldr	r3, [pc, #680]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4aa9      	ldr	r2, [pc, #676]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003486:	6093      	str	r3, [r2, #8]
 8003488:	4ba7      	ldr	r3, [pc, #668]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	49a4      	ldr	r1, [pc, #656]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003496:	4313      	orrs	r3, r2
 8003498:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034a6:	4ba0      	ldr	r3, [pc, #640]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ac:	4a9e      	ldr	r2, [pc, #632]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034b6:	4b9c      	ldr	r3, [pc, #624]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	4999      	ldr	r1, [pc, #612]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034d4:	4b94      	ldr	r3, [pc, #592]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e2:	4991      	ldr	r1, [pc, #580]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034f6:	4b8c      	ldr	r3, [pc, #560]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003504:	4988      	ldr	r1, [pc, #544]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003518:	4b83      	ldr	r3, [pc, #524]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003526:	4980      	ldr	r1, [pc, #512]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800353a:	4b7b      	ldr	r3, [pc, #492]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4977      	ldr	r1, [pc, #476]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355c:	4b72      	ldr	r3, [pc, #456]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f023 0203 	bic.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	496f      	ldr	r1, [pc, #444]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f023 020c 	bic.w	r2, r3, #12
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	4966      	ldr	r1, [pc, #408]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a0:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	495e      	ldr	r1, [pc, #376]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c2:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	4955      	ldr	r1, [pc, #340]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	494d      	ldr	r1, [pc, #308]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003606:	4b48      	ldr	r3, [pc, #288]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	4944      	ldr	r1, [pc, #272]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003628:	4b3f      	ldr	r3, [pc, #252]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	493c      	ldr	r1, [pc, #240]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	4933      	ldr	r1, [pc, #204]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800366c:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367a:	492b      	ldr	r1, [pc, #172]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d011      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800369c:	4922      	ldr	r1, [pc, #136]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036be:	2301      	movs	r3, #1
 80036c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	4912      	ldr	r1, [pc, #72]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003700:	4909      	ldr	r1, [pc, #36]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d006      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80d9 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a01      	ldr	r2, [pc, #4]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003726:	e001      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003728:	40023800 	.word	0x40023800
 800372c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372e:	f7fe f8d5 	bl	80018dc <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003736:	f7fe f8d1 	bl	80018dc <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b64      	cmp	r3, #100	; 0x64
 8003742:	d901      	bls.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e194      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003748:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d021      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	2b00      	cmp	r3, #0
 8003766:	d11d      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003768:	4b64      	ldr	r3, [pc, #400]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003776:	4b61      	ldr	r3, [pc, #388]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377c:	0e1b      	lsrs	r3, r3, #24
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	019a      	lsls	r2, r3, #6
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	071b      	lsls	r3, r3, #28
 800379c:	4957      	ldr	r1, [pc, #348]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02e      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ce:	d129      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037d0:	4b4a      	ldr	r3, [pc, #296]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e4:	0f1b      	lsrs	r3, r3, #28
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	019a      	lsls	r2, r3, #6
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	431a      	orrs	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	071b      	lsls	r3, r3, #28
 8003804:	493d      	ldr	r1, [pc, #244]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800380c:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003812:	f023 021f 	bic.w	r2, r3, #31
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	3b01      	subs	r3, #1
 800381c:	4937      	ldr	r1, [pc, #220]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01d      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003830:	4b32      	ldr	r3, [pc, #200]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003836:	0e1b      	lsrs	r3, r3, #24
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800383e:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003844:	0f1b      	lsrs	r3, r3, #28
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	019a      	lsls	r2, r3, #6
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	431a      	orrs	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	431a      	orrs	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	071b      	lsls	r3, r3, #28
 8003864:	4925      	ldr	r1, [pc, #148]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	019a      	lsls	r2, r3, #6
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	061b      	lsls	r3, r3, #24
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	071b      	lsls	r3, r3, #28
 8003894:	4919      	ldr	r1, [pc, #100]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fe f818 	bl	80018dc <HAL_GetTick>
 80038ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b0:	f7fe f814 	bl	80018dc <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e0d7      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	f040 80cd 	bne.w	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e2:	f7fd fffb 	bl	80018dc <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038e8:	e00a      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038ea:	f7fd fff7 	bl	80018dc <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	; 0x64
 80038f6:	d903      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e0ba      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003900:	4b5e      	ldr	r3, [pc, #376]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390c:	d0ed      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02e      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d12a      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003936:	4b51      	ldr	r3, [pc, #324]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003944:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	0f1b      	lsrs	r3, r3, #28
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	019a      	lsls	r2, r3, #6
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	431a      	orrs	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	4944      	ldr	r1, [pc, #272]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003972:	4b42      	ldr	r3, [pc, #264]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003978:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	493d      	ldr	r1, [pc, #244]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d022      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a0:	d11d      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	0e1b      	lsrs	r3, r3, #24
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	0f1b      	lsrs	r3, r3, #28
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	019a      	lsls	r2, r3, #6
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	061b      	lsls	r3, r3, #24
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	071b      	lsls	r3, r3, #28
 80039d6:	4929      	ldr	r1, [pc, #164]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d028      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	0e1b      	lsrs	r3, r3, #24
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	019a      	lsls	r2, r3, #6
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	431a      	orrs	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	071b      	lsls	r3, r3, #28
 8003a1e:	4917      	ldr	r1, [pc, #92]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4911      	ldr	r1, [pc, #68]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a48:	f7fd ff48 	bl	80018dc <HAL_GetTick>
 8003a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a50:	f7fd ff44 	bl	80018dc <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e007      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6e:	d1ef      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800

08003a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e040      	b.n	8003b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fcb8 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fba2 	bl	8004208 <UART_SetConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e022      	b.n	8003b14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fdfa 	bl	80046d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fe81 	bl	8004814 <UART_CheckIdleState>
 8003b12:	4603      	mov	r3, r0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d171      	bne.n	8003c18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UART_Transmit+0x24>
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e06a      	b.n	8003c1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2221      	movs	r2, #33	; 0x21
 8003b50:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b52:	f7fd fec3 	bl	80018dc <HAL_GetTick>
 8003b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d108      	bne.n	8003b84 <HAL_UART_Transmit+0x68>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e003      	b.n	8003b8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b8c:	e02c      	b.n	8003be8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fe72 	bl	8004882 <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e038      	b.n	8003c1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10b      	bne.n	8003bc6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e007      	b.n	8003bd6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1cc      	bne.n	8003b8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2140      	movs	r1, #64	; 0x40
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fe3f 	bl	8004882 <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e005      	b.n	8003c1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b0ba      	sub	sp, #232	; 0xe8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c52:	4013      	ands	r3, r2
 8003c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d115      	bne.n	8003c8c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00f      	beq.n	8003c8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d009      	beq.n	8003c8c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8297 	beq.w	80041b0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
      }
      return;
 8003c8a:	e291      	b.n	80041b0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8117 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ca2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ca6:	4b85      	ldr	r3, [pc, #532]	; (8003ebc <HAL_UART_IRQHandler+0x298>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 810a 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d011      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xbc>
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <HAL_UART_IRQHandler+0xec>
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	f043 0204 	orr.w	r2, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d011      	beq.n	8003d40 <HAL_UART_IRQHandler+0x11c>
 8003d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d36:	f043 0202 	orr.w	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d017      	beq.n	8003d7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d72:	f043 0208 	orr.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <HAL_UART_IRQHandler+0x18a>
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00c      	beq.n	8003dae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 81fd 	beq.w	80041b4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04f      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fe01 	bl	8004a0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d141      	bne.n	8003e9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3308      	adds	r3, #8
 8003e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1d9      	bne.n	8003e1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d013      	beq.n	8003e96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <HAL_UART_IRQHandler+0x29c>)
 8003e74:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd fedf 	bl	8001c3e <HAL_DMA_Abort_IT>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d017      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e90:	4610      	mov	r0, r2
 8003e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e00f      	b.n	8003eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9a0 	bl	80041dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e00b      	b.n	8003eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f99c 	bl	80041dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	e007      	b.n	8003eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f998 	bl	80041dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003eb4:	e17e      	b.n	80041b4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb6:	bf00      	nop
    return;
 8003eb8:	e17c      	b.n	80041b4 <HAL_UART_IRQHandler+0x590>
 8003eba:	bf00      	nop
 8003ebc:	04000120 	.word	0x04000120
 8003ec0:	08004ad7 	.word	0x08004ad7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	f040 814c 	bne.w	8004166 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8145 	beq.w	8004166 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 813e 	beq.w	8004166 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	f040 80b6 	bne.w	800406e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8150 	beq.w	80041b8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f22:	429a      	cmp	r2, r3
 8003f24:	f080 8148 	bcs.w	80041b8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3c:	f000 8086 	beq.w	800404c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1da      	bne.n	8003f40 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3308      	adds	r3, #8
 8003faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e1      	bne.n	8003f8a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ff0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e3      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800401a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401c:	f023 0310 	bic.w	r3, r3, #16
 8004020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800402e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004030:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800403c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e4      	bne.n	800400c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd fd89 	bl	8001b5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800405e:	b29b      	uxth	r3, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	b29b      	uxth	r3, r3
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8c2 	bl	80041f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800406c:	e0a4      	b.n	80041b8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800407a:	b29b      	uxth	r3, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8096 	beq.w	80041bc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8091 	beq.w	80041bc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
 80040be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e4      	bne.n	800409a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3308      	adds	r3, #8
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	623b      	str	r3, [r7, #32]
   return(result);
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040f4:	633a      	str	r2, [r7, #48]	; 0x30
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	60fb      	str	r3, [r7, #12]
   return(result);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f023 0310 	bic.w	r3, r3, #16
 8004130:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	69b9      	ldr	r1, [r7, #24]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	617b      	str	r3, [r7, #20]
   return(result);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e4      	bne.n	800411c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f846 	bl	80041f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004164:	e02a      	b.n	80041bc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00e      	beq.n	8004190 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01c      	beq.n	80041c0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
    }
    return;
 800418e:	e017      	b.n	80041c0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d012      	beq.n	80041c2 <HAL_UART_IRQHandler+0x59e>
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fcaa 	bl	8004b02 <UART_EndTransmit_IT>
    return;
 80041ae:	e008      	b.n	80041c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80041b0:	bf00      	nop
 80041b2:	e006      	b.n	80041c2 <HAL_UART_IRQHandler+0x59e>
    return;
 80041b4:	bf00      	nop
 80041b6:	e004      	b.n	80041c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80041b8:	bf00      	nop
 80041ba:	e002      	b.n	80041c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80041bc:	bf00      	nop
 80041be:	e000      	b.n	80041c2 <HAL_UART_IRQHandler+0x59e>
    return;
 80041c0:	bf00      	nop
  }

}
 80041c2:	37e8      	adds	r7, #232	; 0xe8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4ba6      	ldr	r3, [pc, #664]	; (80044cc <UART_SetConfig+0x2c4>)
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	430b      	orrs	r3, r1
 800423e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a94      	ldr	r2, [pc, #592]	; (80044d0 <UART_SetConfig+0x2c8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d120      	bne.n	80042c6 <UART_SetConfig+0xbe>
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d816      	bhi.n	80042c0 <UART_SetConfig+0xb8>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x90>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042b5 	.word	0x080042b5
 80042a0:	080042af 	.word	0x080042af
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e150      	b.n	8004550 <UART_SetConfig+0x348>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e14d      	b.n	8004550 <UART_SetConfig+0x348>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e14a      	b.n	8004550 <UART_SetConfig+0x348>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e147      	b.n	8004550 <UART_SetConfig+0x348>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e144      	b.n	8004550 <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a83      	ldr	r2, [pc, #524]	; (80044d8 <UART_SetConfig+0x2d0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d132      	bne.n	8004336 <UART_SetConfig+0x12e>
 80042d0:	4b80      	ldr	r3, [pc, #512]	; (80044d4 <UART_SetConfig+0x2cc>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d828      	bhi.n	8004330 <UART_SetConfig+0x128>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0xdc>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004319 	.word	0x08004319
 80042e8:	08004331 	.word	0x08004331
 80042ec:	08004331 	.word	0x08004331
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004325 	.word	0x08004325
 80042f8:	08004331 	.word	0x08004331
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004331 	.word	0x08004331
 8004304:	0800431f 	.word	0x0800431f
 8004308:	08004331 	.word	0x08004331
 800430c:	08004331 	.word	0x08004331
 8004310:	08004331 	.word	0x08004331
 8004314:	0800432b 	.word	0x0800432b
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e118      	b.n	8004550 <UART_SetConfig+0x348>
 800431e:	2302      	movs	r3, #2
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e115      	b.n	8004550 <UART_SetConfig+0x348>
 8004324:	2304      	movs	r3, #4
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e112      	b.n	8004550 <UART_SetConfig+0x348>
 800432a:	2308      	movs	r3, #8
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e10f      	b.n	8004550 <UART_SetConfig+0x348>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e10c      	b.n	8004550 <UART_SetConfig+0x348>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a68      	ldr	r2, [pc, #416]	; (80044dc <UART_SetConfig+0x2d4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d120      	bne.n	8004382 <UART_SetConfig+0x17a>
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800434a:	2b30      	cmp	r3, #48	; 0x30
 800434c:	d013      	beq.n	8004376 <UART_SetConfig+0x16e>
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	d814      	bhi.n	800437c <UART_SetConfig+0x174>
 8004352:	2b20      	cmp	r3, #32
 8004354:	d009      	beq.n	800436a <UART_SetConfig+0x162>
 8004356:	2b20      	cmp	r3, #32
 8004358:	d810      	bhi.n	800437c <UART_SetConfig+0x174>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <UART_SetConfig+0x15c>
 800435e:	2b10      	cmp	r3, #16
 8004360:	d006      	beq.n	8004370 <UART_SetConfig+0x168>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x174>
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e0f2      	b.n	8004550 <UART_SetConfig+0x348>
 800436a:	2302      	movs	r3, #2
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e0ef      	b.n	8004550 <UART_SetConfig+0x348>
 8004370:	2304      	movs	r3, #4
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e0ec      	b.n	8004550 <UART_SetConfig+0x348>
 8004376:	2308      	movs	r3, #8
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0e9      	b.n	8004550 <UART_SetConfig+0x348>
 800437c:	2310      	movs	r3, #16
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0e6      	b.n	8004550 <UART_SetConfig+0x348>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <UART_SetConfig+0x2d8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d120      	bne.n	80043ce <UART_SetConfig+0x1c6>
 800438c:	4b51      	ldr	r3, [pc, #324]	; (80044d4 <UART_SetConfig+0x2cc>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004396:	2bc0      	cmp	r3, #192	; 0xc0
 8004398:	d013      	beq.n	80043c2 <UART_SetConfig+0x1ba>
 800439a:	2bc0      	cmp	r3, #192	; 0xc0
 800439c:	d814      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	d009      	beq.n	80043b6 <UART_SetConfig+0x1ae>
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d810      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <UART_SetConfig+0x1a8>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d006      	beq.n	80043bc <UART_SetConfig+0x1b4>
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x1c0>
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e0cc      	b.n	8004550 <UART_SetConfig+0x348>
 80043b6:	2302      	movs	r3, #2
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e0c9      	b.n	8004550 <UART_SetConfig+0x348>
 80043bc:	2304      	movs	r3, #4
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e0c6      	b.n	8004550 <UART_SetConfig+0x348>
 80043c2:	2308      	movs	r3, #8
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e0c3      	b.n	8004550 <UART_SetConfig+0x348>
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0c0      	b.n	8004550 <UART_SetConfig+0x348>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a44      	ldr	r2, [pc, #272]	; (80044e4 <UART_SetConfig+0x2dc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d125      	bne.n	8004424 <UART_SetConfig+0x21c>
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <UART_SetConfig+0x2cc>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d017      	beq.n	8004418 <UART_SetConfig+0x210>
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ec:	d817      	bhi.n	800441e <UART_SetConfig+0x216>
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d00b      	beq.n	800440c <UART_SetConfig+0x204>
 80043f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f8:	d811      	bhi.n	800441e <UART_SetConfig+0x216>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <UART_SetConfig+0x1fe>
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d006      	beq.n	8004412 <UART_SetConfig+0x20a>
 8004404:	e00b      	b.n	800441e <UART_SetConfig+0x216>
 8004406:	2300      	movs	r3, #0
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e0a1      	b.n	8004550 <UART_SetConfig+0x348>
 800440c:	2302      	movs	r3, #2
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e09e      	b.n	8004550 <UART_SetConfig+0x348>
 8004412:	2304      	movs	r3, #4
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e09b      	b.n	8004550 <UART_SetConfig+0x348>
 8004418:	2308      	movs	r3, #8
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e098      	b.n	8004550 <UART_SetConfig+0x348>
 800441e:	2310      	movs	r3, #16
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e095      	b.n	8004550 <UART_SetConfig+0x348>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <UART_SetConfig+0x2e0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d125      	bne.n	800447a <UART_SetConfig+0x272>
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443c:	d017      	beq.n	800446e <UART_SetConfig+0x266>
 800443e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004442:	d817      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d00b      	beq.n	8004462 <UART_SetConfig+0x25a>
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d811      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x254>
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004458:	d006      	beq.n	8004468 <UART_SetConfig+0x260>
 800445a:	e00b      	b.n	8004474 <UART_SetConfig+0x26c>
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e076      	b.n	8004550 <UART_SetConfig+0x348>
 8004462:	2302      	movs	r3, #2
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e073      	b.n	8004550 <UART_SetConfig+0x348>
 8004468:	2304      	movs	r3, #4
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e070      	b.n	8004550 <UART_SetConfig+0x348>
 800446e:	2308      	movs	r3, #8
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e06d      	b.n	8004550 <UART_SetConfig+0x348>
 8004474:	2310      	movs	r3, #16
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e06a      	b.n	8004550 <UART_SetConfig+0x348>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <UART_SetConfig+0x2e4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d138      	bne.n	80044f6 <UART_SetConfig+0x2ee>
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800448e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004492:	d017      	beq.n	80044c4 <UART_SetConfig+0x2bc>
 8004494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004498:	d82a      	bhi.n	80044f0 <UART_SetConfig+0x2e8>
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449e:	d00b      	beq.n	80044b8 <UART_SetConfig+0x2b0>
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d824      	bhi.n	80044f0 <UART_SetConfig+0x2e8>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <UART_SetConfig+0x2aa>
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d006      	beq.n	80044be <UART_SetConfig+0x2b6>
 80044b0:	e01e      	b.n	80044f0 <UART_SetConfig+0x2e8>
 80044b2:	2300      	movs	r3, #0
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e04b      	b.n	8004550 <UART_SetConfig+0x348>
 80044b8:	2302      	movs	r3, #2
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e048      	b.n	8004550 <UART_SetConfig+0x348>
 80044be:	2304      	movs	r3, #4
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e045      	b.n	8004550 <UART_SetConfig+0x348>
 80044c4:	2308      	movs	r3, #8
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e042      	b.n	8004550 <UART_SetConfig+0x348>
 80044ca:	bf00      	nop
 80044cc:	efff69f3 	.word	0xefff69f3
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40004400 	.word	0x40004400
 80044dc:	40004800 	.word	0x40004800
 80044e0:	40004c00 	.word	0x40004c00
 80044e4:	40005000 	.word	0x40005000
 80044e8:	40011400 	.word	0x40011400
 80044ec:	40007800 	.word	0x40007800
 80044f0:	2310      	movs	r3, #16
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e02c      	b.n	8004550 <UART_SetConfig+0x348>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a72      	ldr	r2, [pc, #456]	; (80046c4 <UART_SetConfig+0x4bc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d125      	bne.n	800454c <UART_SetConfig+0x344>
 8004500:	4b71      	ldr	r3, [pc, #452]	; (80046c8 <UART_SetConfig+0x4c0>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800450a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800450e:	d017      	beq.n	8004540 <UART_SetConfig+0x338>
 8004510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004514:	d817      	bhi.n	8004546 <UART_SetConfig+0x33e>
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d00b      	beq.n	8004534 <UART_SetConfig+0x32c>
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d811      	bhi.n	8004546 <UART_SetConfig+0x33e>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <UART_SetConfig+0x326>
 8004526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452a:	d006      	beq.n	800453a <UART_SetConfig+0x332>
 800452c:	e00b      	b.n	8004546 <UART_SetConfig+0x33e>
 800452e:	2300      	movs	r3, #0
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e00d      	b.n	8004550 <UART_SetConfig+0x348>
 8004534:	2302      	movs	r3, #2
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e00a      	b.n	8004550 <UART_SetConfig+0x348>
 800453a:	2304      	movs	r3, #4
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e007      	b.n	8004550 <UART_SetConfig+0x348>
 8004540:	2308      	movs	r3, #8
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e004      	b.n	8004550 <UART_SetConfig+0x348>
 8004546:	2310      	movs	r3, #16
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e001      	b.n	8004550 <UART_SetConfig+0x348>
 800454c:	2310      	movs	r3, #16
 800454e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	d15b      	bne.n	8004612 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800455a:	7ffb      	ldrb	r3, [r7, #31]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d828      	bhi.n	80045b2 <UART_SetConfig+0x3aa>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x360>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe fe60 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004590:	61b8      	str	r0, [r7, #24]
        break;
 8004592:	e013      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe fe70 	bl	8003278 <HAL_RCC_GetPCLK2Freq>
 8004598:	61b8      	str	r0, [r7, #24]
        break;
 800459a:	e00f      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <UART_SetConfig+0x4c4>)
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e00c      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fd43 	bl	800302c <HAL_RCC_GetSysClockFreq>
 80045a6:	61b8      	str	r0, [r7, #24]
        break;
 80045a8:	e008      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	61bb      	str	r3, [r7, #24]
        break;
 80045b0:	e004      	b.n	80045bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d074      	beq.n	80046ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	005a      	lsls	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d916      	bls.n	800460c <UART_SetConfig+0x404>
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d212      	bcs.n	800460c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f023 030f 	bic.w	r3, r3, #15
 80045ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	4313      	orrs	r3, r2
 8004600:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	89fa      	ldrh	r2, [r7, #14]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	e04f      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77bb      	strb	r3, [r7, #30]
 8004610:	e04c      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d828      	bhi.n	800466a <UART_SetConfig+0x462>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x418>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466b 	.word	0x0800466b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800466b 	.word	0x0800466b
 8004638:	0800466b 	.word	0x0800466b
 800463c:	0800466b 	.word	0x0800466b
 8004640:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe fe04 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8004648:	61b8      	str	r0, [r7, #24]
        break;
 800464a:	e013      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7fe fe14 	bl	8003278 <HAL_RCC_GetPCLK2Freq>
 8004650:	61b8      	str	r0, [r7, #24]
        break;
 8004652:	e00f      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <UART_SetConfig+0x4c4>)
 8004656:	61bb      	str	r3, [r7, #24]
        break;
 8004658:	e00c      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe fce7 	bl	800302c <HAL_RCC_GetSysClockFreq>
 800465e:	61b8      	str	r0, [r7, #24]
        break;
 8004660:	e008      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e004      	b.n	8004674 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	77bb      	strb	r3, [r7, #30]
        break;
 8004672:	bf00      	nop
    }

    if (pclk != 0U)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	085a      	lsrs	r2, r3, #1
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	441a      	add	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b0f      	cmp	r3, #15
 8004692:	d909      	bls.n	80046a8 <UART_SetConfig+0x4a0>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d205      	bcs.n	80046a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	e001      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40007c00 	.word	0x40007c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400

080046d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ce:	d10a      	bne.n	80047e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af02      	add	r7, sp, #8
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004824:	f7fd f85a 	bl	80018dc <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10e      	bne.n	8004856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f81b 	bl	8004882 <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e011      	b.n	800487a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b09c      	sub	sp, #112	; 0x70
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004892:	e0a7      	b.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	f000 80a3 	beq.w	80049e4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fd f81d 	bl	80018dc <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d13f      	bne.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c8:	667b      	str	r3, [r7, #100]	; 0x64
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e6      	bne.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3308      	adds	r3, #8
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	663b      	str	r3, [r7, #96]	; 0x60
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004906:	64ba      	str	r2, [r7, #72]	; 0x48
 8004908:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800490c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e068      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d050      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004950:	d148      	bne.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800495a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
 800497c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	613b      	str	r3, [r7, #16]
   return(result);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3308      	adds	r3, #8
 80049ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049ae:	623a      	str	r2, [r7, #32]
 80049b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	69f9      	ldr	r1, [r7, #28]
 80049b4:	6a3a      	ldr	r2, [r7, #32]
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e010      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	f43f af48 	beq.w	8004894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3770      	adds	r7, #112	; 0x70
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b095      	sub	sp, #84	; 0x54
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40
 8004a36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e6      	bne.n	8004a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d118      	bne.n	8004ab6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 0310 	bic.w	r3, r3, #16
 8004a98:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6979      	ldr	r1, [r7, #20]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e6      	bne.n	8004a84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aca:	bf00      	nop
 8004acc:	3754      	adds	r7, #84	; 0x54
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff fb71 	bl	80041dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b088      	sub	sp, #32
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6979      	ldr	r1, [r7, #20]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	613b      	str	r3, [r7, #16]
   return(result);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e6      	bne.n	8004b0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fb3d 	bl	80041c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4e:	bf00      	nop
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b58:	b084      	sub	sp, #16
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	f107 001c 	add.w	r0, r7, #28
 8004b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d120      	bne.n	8004bb2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <USB_CoreInit+0xac>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d105      	bne.n	8004ba6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa96 	bl	80050d8 <USB_CoreReset>
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]
 8004bb0:	e010      	b.n	8004bd4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa8a 	bl	80050d8 <USB_CoreReset>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10b      	bne.n	8004bf2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f043 0206 	orr.w	r2, r3, #6
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f043 0220 	orr.w	r2, r3, #32
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bfe:	b004      	add	sp, #16
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	ffbdffbf 	.word	0xffbdffbf

08004c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 0201 	bic.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d115      	bne.n	8004c78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f7fc fe4b 	bl	80018f4 <HAL_Delay>
      ms++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa29 	bl	80050bc <USB_GetMode>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d01e      	beq.n	8004cae <USB_SetCurrentMode+0x84>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b31      	cmp	r3, #49	; 0x31
 8004c74:	d9f0      	bls.n	8004c58 <USB_SetCurrentMode+0x2e>
 8004c76:	e01a      	b.n	8004cae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d115      	bne.n	8004caa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f7fc fe32 	bl	80018f4 <HAL_Delay>
      ms++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa10 	bl	80050bc <USB_GetMode>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <USB_SetCurrentMode+0x84>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b31      	cmp	r3, #49	; 0x31
 8004ca6:	d9f0      	bls.n	8004c8a <USB_SetCurrentMode+0x60>
 8004ca8:	e001      	b.n	8004cae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e005      	b.n	8004cba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b32      	cmp	r3, #50	; 0x32
 8004cb2:	d101      	bne.n	8004cb8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e009      	b.n	8004cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3340      	adds	r3, #64	; 0x40
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b0e      	cmp	r3, #14
 8004cfc:	d9f2      	bls.n	8004ce4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11c      	bne.n	8004d3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e005      	b.n	8004d4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d50:	461a      	mov	r2, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	461a      	mov	r2, r3
 8004d66:	680b      	ldr	r3, [r1, #0]
 8004d68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d10c      	bne.n	8004d8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d104      	bne.n	8004d80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d76:	2100      	movs	r1, #0
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f965 	bl	8005048 <USB_SetDevSpeed>
 8004d7e:	e008      	b.n	8004d92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d80:	2101      	movs	r1, #1
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f960 	bl	8005048 <USB_SetDevSpeed>
 8004d88:	e003      	b.n	8004d92 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d8a:	2103      	movs	r1, #3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f95b 	bl	8005048 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d92:	2110      	movs	r1, #16
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f8f3 	bl	8004f80 <USB_FlushTxFifo>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f91f 	bl	8004fe8 <USB_FlushRxFifo>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e043      	b.n	8004e66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df4:	d118      	bne.n	8004e28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e013      	b.n	8004e3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e008      	b.n	8004e3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	461a      	mov	r2, r3
 8004e36:	2300      	movs	r3, #0
 8004e38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	461a      	mov	r2, r3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	3301      	adds	r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d3b7      	bcc.n	8004dde <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	e043      	b.n	8004efc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e8a:	d118      	bne.n	8004ebe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e013      	b.n	8004ed0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e008      	b.n	8004ed0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	461a      	mov	r2, r3
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ef4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d3b7      	bcc.n	8004e74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f043 0210 	orr.w	r2, r3, #16
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <USB_DevInit+0x2b4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f043 0208 	orr.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <USB_DevInit+0x2b8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f74:	b004      	add	sp, #16
 8004f76:	4770      	bx	lr
 8004f78:	803c3800 	.word	0x803c3800
 8004f7c:	40000004 	.word	0x40000004

08004f80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <USB_FlushTxFifo+0x64>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d901      	bls.n	8004fa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e01b      	b.n	8004fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	daf2      	bge.n	8004f8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	019b      	lsls	r3, r3, #6
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <USB_FlushTxFifo+0x64>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e006      	b.n	8004fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d0f0      	beq.n	8004fb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	00030d40 	.word	0x00030d40

08004fe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a11      	ldr	r2, [pc, #68]	; (8005044 <USB_FlushRxFifo+0x5c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e018      	b.n	8005038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	daf2      	bge.n	8004ff4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2210      	movs	r2, #16
 8005016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <USB_FlushRxFifo+0x5c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e006      	b.n	8005038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b10      	cmp	r3, #16
 8005034:	d0f0      	beq.n	8005018 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	00030d40 	.word	0x00030d40

08005048 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005094:	f023 0303 	bic.w	r3, r3, #3
 8005098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a8:	f043 0302 	orr.w	r3, r3, #2
 80050ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0301 	and.w	r3, r3, #1
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <USB_CoreReset+0x64>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e01b      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	daf2      	bge.n	80050e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <USB_CoreReset+0x64>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e006      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d0f0      	beq.n	800510e <USB_CoreReset+0x36>

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	00030d40 	.word	0x00030d40

08005140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <vApplicationGetIdleTaskMemory+0x2c>)
 8005150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a06      	ldr	r2, [pc, #24]	; (8005170 <vApplicationGetIdleTaskMemory+0x30>)
 8005156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2232      	movs	r2, #50	; 0x32
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	200008f0 	.word	0x200008f0
 8005170:	2000095c 	.word	0x2000095c

08005174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4a06      	ldr	r2, [pc, #24]	; (80051a4 <vApplicationGetTimerTaskMemory+0x30>)
 800518a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000a24 	.word	0x20000a24
 80051a4:	20000a90 	.word	0x20000a90

080051a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f103 0208 	add.w	r2, r3, #8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 0208 	add.w	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f103 0208 	add.w	r2, r3, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d103      	bne.n	800526a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e00c      	b.n	8005284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3308      	adds	r3, #8
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e002      	b.n	8005278 <vListInsert+0x2e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d2f6      	bcs.n	8005272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6892      	ldr	r2, [r2, #8]
 80052d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6852      	ldr	r2, [r2, #4]
 80052dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d103      	bne.n	80052f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	1e5a      	subs	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10c      	bne.n	800533e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	b672      	cpsid	i
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	b662      	cpsie	i
 8005338:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800533e:	f002 fc6d 	bl	8007c1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	441a      	add	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	3b01      	subs	r3, #1
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	441a      	add	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	22ff      	movs	r2, #255	; 0xff
 800538a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d114      	bne.n	80053be <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01a      	beq.n	80053d2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3310      	adds	r3, #16
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 fc29 	bl	8006bf8 <xTaskRemoveFromEventList>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <xQueueGenericReset+0xd0>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	e009      	b.n	80053d2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3310      	adds	r3, #16
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fef0 	bl	80051a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3324      	adds	r3, #36	; 0x24
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff feeb 	bl	80051a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053d2:	f002 fc57 	bl	8007c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053d6:	2301      	movs	r3, #1
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10c      	bne.n	8005412 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	b672      	cpsid	i
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	b662      	cpsie	i
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10c      	bne.n	8005432 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	b672      	cpsid	i
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	b662      	cpsie	i
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <xQueueGenericCreateStatic+0x5a>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <xQueueGenericCreateStatic+0x5e>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <xQueueGenericCreateStatic+0x60>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10c      	bne.n	8005462 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	b672      	cpsid	i
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	b662      	cpsie	i
 800545c:	623b      	str	r3, [r7, #32]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <xQueueGenericCreateStatic+0x8a>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <xQueueGenericCreateStatic+0x8e>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <xQueueGenericCreateStatic+0x90>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10c      	bne.n	8005492 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	b672      	cpsid	i
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	b662      	cpsie	i
 800548c:	61fb      	str	r3, [r7, #28]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005492:	2350      	movs	r3, #80	; 0x50
 8005494:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b50      	cmp	r3, #80	; 0x50
 800549a:	d00c      	beq.n	80054b6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	b672      	cpsid	i
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	b662      	cpsie	i
 80054b0:	61bb      	str	r3, [r7, #24]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00d      	beq.n	80054de <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f847 	bl	800556c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3730      	adds	r7, #48	; 0x30
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10c      	bne.n	8005516 <xQueueGenericCreate+0x2e>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	b672      	cpsid	i
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	b662      	cpsie	i
 8005510:	613b      	str	r3, [r7, #16]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e004      	b.n	800552c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3350      	adds	r3, #80	; 0x50
 8005530:	4618      	mov	r0, r3
 8005532:	f002 fc9f 	bl	8007e74 <pvPortMalloc>
 8005536:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	3350      	adds	r3, #80	; 0x50
 8005546:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005550:	79fa      	ldrb	r2, [r7, #7]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f805 	bl	800556c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005562:	69bb      	ldr	r3, [r7, #24]
	}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e002      	b.n	800558e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800559a:	2101      	movs	r1, #1
 800559c:	69b8      	ldr	r0, [r7, #24]
 800559e:	f7ff feb7 	bl	8005310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10c      	bne.n	80055dc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	b672      	cpsid	i
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	b662      	cpsie	i
 80055d6:	613b      	str	r3, [r7, #16]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d90c      	bls.n	80055fe <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	b672      	cpsid	i
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	b662      	cpsie	i
 80055f8:	60fb      	str	r3, [r7, #12]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055fe:	2202      	movs	r2, #2
 8005600:	2100      	movs	r1, #0
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ff70 	bl	80054e8 <xQueueGenericCreate>
 8005608:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005616:	697b      	ldr	r3, [r7, #20]
	}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08e      	sub	sp, #56	; 0x38
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800562e:	2300      	movs	r3, #0
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10c      	bne.n	8005656 <xQueueGenericSend+0x36>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <xQueueGenericSend+0x44>
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <xQueueGenericSend+0x48>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <xQueueGenericSend+0x4a>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <xQueueGenericSend+0x68>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	b672      	cpsid	i
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	b662      	cpsie	i
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d103      	bne.n	8005696 <xQueueGenericSend+0x76>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <xQueueGenericSend+0x7a>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericSend+0x7c>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10c      	bne.n	80056ba <xQueueGenericSend+0x9a>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	b672      	cpsid	i
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	b662      	cpsie	i
 80056b4:	623b      	str	r3, [r7, #32]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ba:	f001 fc63 	bl	8006f84 <xTaskGetSchedulerState>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <xQueueGenericSend+0xaa>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <xQueueGenericSend+0xae>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericSend+0xb0>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10c      	bne.n	80056ee <xQueueGenericSend+0xce>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	b672      	cpsid	i
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	b662      	cpsie	i
 80056e8:	61fb      	str	r3, [r7, #28]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ee:	f002 fa95 	bl	8007c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <xQueueGenericSend+0xe4>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d129      	bne.n	8005758 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570a:	f000 fb61 	bl	8005dd0 <prvCopyDataToQueue>
 800570e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d010      	beq.n	800573a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	3324      	adds	r3, #36	; 0x24
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fa6b 	bl	8006bf8 <xTaskRemoveFromEventList>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005728:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <xQueueGenericSend+0x208>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	e00a      	b.n	8005750 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005740:	4b39      	ldr	r3, [pc, #228]	; (8005828 <xQueueGenericSend+0x208>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005750:	f002 fa98 	bl	8007c84 <vPortExitCritical>
				return pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	e063      	b.n	8005820 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800575e:	f002 fa91 	bl	8007c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005762:	2300      	movs	r3, #0
 8005764:	e05c      	b.n	8005820 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800576c:	f107 0314 	add.w	r3, r7, #20
 8005770:	4618      	mov	r0, r3
 8005772:	f001 faa7 	bl	8006cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800577a:	f002 fa83 	bl	8007c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800577e:	f001 f80d 	bl	800679c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005782:	f002 fa4b 	bl	8007c1c <vPortEnterCritical>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d103      	bne.n	800579c <xQueueGenericSend+0x17c>
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d103      	bne.n	80057b2 <xQueueGenericSend+0x192>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b2:	f002 fa67 	bl	8007c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b6:	1d3a      	adds	r2, r7, #4
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 fa96 	bl	8006cf0 <xTaskCheckForTimeOut>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d124      	bne.n	8005814 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057cc:	f000 fbf8 	bl	8005fc0 <prvIsQueueFull>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d018      	beq.n	8005808 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	3310      	adds	r3, #16
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 f9b6 	bl	8006b50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e6:	f000 fb83 	bl	8005ef0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057ea:	f000 ffe5 	bl	80067b8 <xTaskResumeAll>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f47f af7c 	bne.w	80056ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <xQueueGenericSend+0x208>)
 80057f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	e772      	b.n	80056ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580a:	f000 fb71 	bl	8005ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800580e:	f000 ffd3 	bl	80067b8 <xTaskResumeAll>
 8005812:	e76c      	b.n	80056ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005816:	f000 fb6b 	bl	8005ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800581a:	f000 ffcd 	bl	80067b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800581e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005820:	4618      	mov	r0, r3
 8005822:	3738      	adds	r7, #56	; 0x38
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08e      	sub	sp, #56	; 0x38
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10c      	bne.n	800585e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	b672      	cpsid	i
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	b662      	cpsie	i
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d103      	bne.n	800586c <xQueueGenericSendFromISR+0x40>
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <xQueueGenericSendFromISR+0x44>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <xQueueGenericSendFromISR+0x46>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10c      	bne.n	8005890 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	b672      	cpsid	i
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	b662      	cpsie	i
 800588a:	623b      	str	r3, [r7, #32]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d103      	bne.n	800589e <xQueueGenericSendFromISR+0x72>
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <xQueueGenericSendFromISR+0x76>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <xQueueGenericSendFromISR+0x78>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10c      	bne.n	80058c2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	b672      	cpsid	i
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	b662      	cpsie	i
 80058bc:	61fb      	str	r3, [r7, #28]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c2:	f002 fa93 	bl	8007dec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058c6:	f3ef 8211 	mrs	r2, BASEPRI
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	b672      	cpsid	i
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	b662      	cpsie	i
 80058de:	61ba      	str	r2, [r7, #24]
 80058e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <xQueueGenericSendFromISR+0xcc>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d12c      	bne.n	8005952 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005908:	f000 fa62 	bl	8005dd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800590c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d112      	bne.n	800593c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	3324      	adds	r3, #36	; 0x24
 8005922:	4618      	mov	r0, r3
 8005924:	f001 f968 	bl	8006bf8 <xTaskRemoveFromEventList>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00e      	beq.n	800594c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e007      	b.n	800594c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800593c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005940:	3301      	adds	r3, #1
 8005942:	b2db      	uxtb	r3, r3
 8005944:	b25a      	sxtb	r2, r3
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800594c:	2301      	movs	r3, #1
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005950:	e001      	b.n	8005956 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005952:	2300      	movs	r3, #0
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005960:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005964:	4618      	mov	r0, r3
 8005966:	3738      	adds	r7, #56	; 0x38
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08c      	sub	sp, #48	; 0x30
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005978:	2300      	movs	r3, #0
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <xQueueReceive+0x34>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	b672      	cpsid	i
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	b662      	cpsie	i
 800599a:	623b      	str	r3, [r7, #32]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <xQueueReceive+0x42>
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueReceive+0x46>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueReceive+0x48>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10c      	bne.n	80059d2 <xQueueReceive+0x66>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	b672      	cpsid	i
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	b662      	cpsie	i
 80059cc:	61fb      	str	r3, [r7, #28]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d2:	f001 fad7 	bl	8006f84 <xTaskGetSchedulerState>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <xQueueReceive+0x76>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <xQueueReceive+0x7a>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <xQueueReceive+0x7c>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10c      	bne.n	8005a06 <xQueueReceive+0x9a>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	b672      	cpsid	i
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	b662      	cpsie	i
 8005a00:	61bb      	str	r3, [r7, #24]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a06:	f002 f909 	bl	8007c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01f      	beq.n	8005a56 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1a:	f000 fa43 	bl	8005ea4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00f      	beq.n	8005a4e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	3310      	adds	r3, #16
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 f8e0 	bl	8006bf8 <xTaskRemoveFromEventList>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	; (8005b34 <xQueueReceive+0x1c8>)
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a4e:	f002 f919 	bl	8007c84 <vPortExitCritical>
				return pdPASS;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e069      	b.n	8005b2a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a5c:	f002 f912 	bl	8007c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e062      	b.n	8005b2a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a6a:	f107 0310 	add.w	r3, r7, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f928 	bl	8006cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a78:	f002 f904 	bl	8007c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a7c:	f000 fe8e 	bl	800679c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a80:	f002 f8cc 	bl	8007c1c <vPortEnterCritical>
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d103      	bne.n	8005a9a <xQueueReceive+0x12e>
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa0:	b25b      	sxtb	r3, r3
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d103      	bne.n	8005ab0 <xQueueReceive+0x144>
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab0:	f002 f8e8 	bl	8007c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ab4:	1d3a      	adds	r2, r7, #4
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 f917 	bl	8006cf0 <xTaskCheckForTimeOut>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d123      	bne.n	8005b10 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aca:	f000 fa63 	bl	8005f94 <prvIsQueueEmpty>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d017      	beq.n	8005b04 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	3324      	adds	r3, #36	; 0x24
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 f837 	bl	8006b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae4:	f000 fa04 	bl	8005ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ae8:	f000 fe66 	bl	80067b8 <xTaskResumeAll>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d189      	bne.n	8005a06 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <xQueueReceive+0x1c8>)
 8005af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	e780      	b.n	8005a06 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b06:	f000 f9f3 	bl	8005ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b0a:	f000 fe55 	bl	80067b8 <xTaskResumeAll>
 8005b0e:	e77a      	b.n	8005a06 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b12:	f000 f9ed 	bl	8005ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b16:	f000 fe4f 	bl	80067b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1c:	f000 fa3a 	bl	8005f94 <prvIsQueueEmpty>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f43f af6f 	beq.w	8005a06 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3730      	adds	r7, #48	; 0x30
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10c      	bne.n	8005b6e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	b672      	cpsid	i
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	b662      	cpsie	i
 8005b68:	623b      	str	r3, [r7, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	b672      	cpsid	i
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	b662      	cpsie	i
 8005b8a:	61fb      	str	r3, [r7, #28]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b90:	f001 f9f8 	bl	8006f84 <xTaskGetSchedulerState>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <xQueueSemaphoreTake+0x68>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <xQueueSemaphoreTake+0x6c>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <xQueueSemaphoreTake+0x6e>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10c      	bne.n	8005bc4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	b672      	cpsid	i
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	b662      	cpsie	i
 8005bbe:	61bb      	str	r3, [r7, #24]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bc4:	f002 f82a 	bl	8007c1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d024      	beq.n	8005c1e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	1e5a      	subs	r2, r3, #1
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005be4:	f001 fb4c 	bl	8007280 <pvTaskIncrementMutexHeldCount>
 8005be8:	4602      	mov	r2, r0
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00f      	beq.n	8005c16 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	3310      	adds	r3, #16
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fffc 	bl	8006bf8 <xTaskRemoveFromEventList>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c06:	4b55      	ldr	r3, [pc, #340]	; (8005d5c <xQueueSemaphoreTake+0x224>)
 8005c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c16:	f002 f835 	bl	8007c84 <vPortExitCritical>
				return pdPASS;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e099      	b.n	8005d52 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d113      	bne.n	8005c4c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	b672      	cpsid	i
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	b662      	cpsie	i
 8005c3e:	617b      	str	r3, [r7, #20]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c44:	f002 f81e 	bl	8007c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e082      	b.n	8005d52 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c52:	f107 030c 	add.w	r3, r7, #12
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f834 	bl	8006cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c60:	f002 f810 	bl	8007c84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c64:	f000 fd9a 	bl	800679c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c68:	f001 ffd8 	bl	8007c1c <vPortEnterCritical>
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c72:	b25b      	sxtb	r3, r3
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d103      	bne.n	8005c82 <xQueueSemaphoreTake+0x14a>
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c88:	b25b      	sxtb	r3, r3
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d103      	bne.n	8005c98 <xQueueSemaphoreTake+0x160>
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c98:	f001 fff4 	bl	8007c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c9c:	463a      	mov	r2, r7
 8005c9e:	f107 030c 	add.w	r3, r7, #12
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f823 	bl	8006cf0 <xTaskCheckForTimeOut>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d132      	bne.n	8005d16 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cb2:	f000 f96f 	bl	8005f94 <prvIsQueueEmpty>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d026      	beq.n	8005d0a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005cc4:	f001 ffaa 	bl	8007c1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 f977 	bl	8006fc0 <xTaskPriorityInherit>
 8005cd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005cd4:	f001 ffd6 	bl	8007c84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	3324      	adds	r3, #36	; 0x24
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 ff35 	bl	8006b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce8:	f000 f902 	bl	8005ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cec:	f000 fd64 	bl	80067b8 <xTaskResumeAll>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f47f af66 	bne.w	8005bc4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005cf8:	4b18      	ldr	r3, [pc, #96]	; (8005d5c <xQueueSemaphoreTake+0x224>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	e75c      	b.n	8005bc4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d0c:	f000 f8f0 	bl	8005ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d10:	f000 fd52 	bl	80067b8 <xTaskResumeAll>
 8005d14:	e756      	b.n	8005bc4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d18:	f000 f8ea 	bl	8005ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d1c:	f000 fd4c 	bl	80067b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d22:	f000 f937 	bl	8005f94 <prvIsQueueEmpty>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f43f af4b 	beq.w	8005bc4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00d      	beq.n	8005d50 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005d34:	f001 ff72 	bl	8007c1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3a:	f000 f831 	bl	8005da0 <prvGetDisinheritPriorityAfterTimeout>
 8005d3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fa14 	bl	8007174 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d4c:	f001 ff9a 	bl	8007c84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3738      	adds	r7, #56	; 0x38
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10c      	bne.n	8005d88 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	b672      	cpsid	i
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	b662      	cpsie	i
 8005d82:	60bb      	str	r3, [r7, #8]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005d88:	f001 ff48 	bl	8007c1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005d92:	f001 ff77 	bl	8007c84 <vPortExitCritical>

	return uxReturn;
 8005d96:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1c3 031e 	rsb	r3, r3, #30
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e001      	b.n	8005dc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
	}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d14d      	bne.n	8005e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 f948 	bl	8007090 <xTaskPriorityDisinherit>
 8005e00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	e043      	b.n	8005e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d119      	bne.n	8005e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6858      	ldr	r0, [r3, #4]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	f002 fccf 	bl	80087be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	441a      	add	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d32b      	bcc.n	8005e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	e026      	b.n	8005e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68d8      	ldr	r0, [r3, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	f002 fcb5 	bl	80087be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d207      	bcs.n	8005e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	425b      	negs	r3, r3
 8005e7a:	441a      	add	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d105      	bne.n	8005e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e9a:	697b      	ldr	r3, [r7, #20]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d018      	beq.n	8005ee8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	441a      	add	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d303      	bcc.n	8005ed8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68d9      	ldr	r1, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6838      	ldr	r0, [r7, #0]
 8005ee4:	f002 fc6b 	bl	80087be <memcpy>
	}
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ef8:	f001 fe90 	bl	8007c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f04:	e011      	b.n	8005f2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d012      	beq.n	8005f34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3324      	adds	r3, #36	; 0x24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fe70 	bl	8006bf8 <xTaskRemoveFromEventList>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f1e:	f000 ff4d 	bl	8006dbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dce9      	bgt.n	8005f06 <prvUnlockQueue+0x16>
 8005f32:	e000      	b.n	8005f36 <prvUnlockQueue+0x46>
					break;
 8005f34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	22ff      	movs	r2, #255	; 0xff
 8005f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f3e:	f001 fea1 	bl	8007c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f42:	f001 fe6b 	bl	8007c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f4e:	e011      	b.n	8005f74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d012      	beq.n	8005f7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3310      	adds	r3, #16
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fe4b 	bl	8006bf8 <xTaskRemoveFromEventList>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f68:	f000 ff28 	bl	8006dbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	dce9      	bgt.n	8005f50 <prvUnlockQueue+0x60>
 8005f7c:	e000      	b.n	8005f80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	22ff      	movs	r2, #255	; 0xff
 8005f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f88:	f001 fe7c 	bl	8007c84 <vPortExitCritical>
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f9c:	f001 fe3e 	bl	8007c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e001      	b.n	8005fb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fb2:	f001 fe67 	bl	8007c84 <vPortExitCritical>

	return xReturn;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fc8:	f001 fe28 	bl	8007c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d102      	bne.n	8005fde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	e001      	b.n	8005fe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fe2:	f001 fe4f 	bl	8007c84 <vPortExitCritical>

	return xReturn;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e014      	b.n	800602a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006000:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <vQueueAddToRegistry+0x50>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10b      	bne.n	8006024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800600c:	490c      	ldr	r1, [pc, #48]	; (8006040 <vQueueAddToRegistry+0x50>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006016:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <vQueueAddToRegistry+0x50>)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006022:	e006      	b.n	8006032 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b09      	cmp	r3, #9
 800602e:	d9e7      	bls.n	8006000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000e90 	.word	0x20000e90

08006044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006054:	f001 fde2 	bl	8007c1c <vPortEnterCritical>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605e:	b25b      	sxtb	r3, r3
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d103      	bne.n	800606e <vQueueWaitForMessageRestricted+0x2a>
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006074:	b25b      	sxtb	r3, r3
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d103      	bne.n	8006084 <vQueueWaitForMessageRestricted+0x40>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006084:	f001 fdfe 	bl	8007c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3324      	adds	r3, #36	; 0x24
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fd7f 	bl	8006b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800609e:	6978      	ldr	r0, [r7, #20]
 80060a0:	f7ff ff26 	bl	8005ef0 <prvUnlockQueue>
	}
 80060a4:	bf00      	nop
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	; 0x38
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10c      	bne.n	80060da <xTaskCreateStatic+0x2e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	623b      	str	r3, [r7, #32]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10c      	bne.n	80060fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	b672      	cpsid	i
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	b662      	cpsie	i
 80060f4:	61fb      	str	r3, [r7, #28]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060fa:	236c      	movs	r3, #108	; 0x6c
 80060fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b6c      	cmp	r3, #108	; 0x6c
 8006102:	d00c      	beq.n	800611e <xTaskCreateStatic+0x72>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	b672      	cpsid	i
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	b662      	cpsie	i
 8006118:	61bb      	str	r3, [r7, #24]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800611e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01e      	beq.n	8006164 <xTaskCreateStatic+0xb8>
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	2202      	movs	r2, #2
 800613a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800613e:	2300      	movs	r3, #0
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 f850 	bl	80061fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800615c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800615e:	f000 f8df 	bl	8006320 <prvAddNewTaskToReadyList>
 8006162:	e001      	b.n	8006168 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006168:	697b      	ldr	r3, [r7, #20]
	}
 800616a:	4618      	mov	r0, r3
 800616c:	3728      	adds	r7, #40	; 0x28
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006172:	b580      	push	{r7, lr}
 8006174:	b08c      	sub	sp, #48	; 0x30
 8006176:	af04      	add	r7, sp, #16
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4618      	mov	r0, r3
 8006188:	f001 fe74 	bl	8007e74 <pvPortMalloc>
 800618c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00e      	beq.n	80061b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006194:	206c      	movs	r0, #108	; 0x6c
 8006196:	f001 fe6d 	bl	8007e74 <pvPortMalloc>
 800619a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
 80061a8:	e005      	b.n	80061b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061aa:	6978      	ldr	r0, [r7, #20]
 80061ac:	f001 ff2c 	bl	8008008 <vPortFree>
 80061b0:	e001      	b.n	80061b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	2300      	movs	r3, #0
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	9302      	str	r3, [sp, #8]
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f80e 	bl	80061fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e0:	69f8      	ldr	r0, [r7, #28]
 80061e2:	f000 f89d 	bl	8006320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e002      	b.n	80061f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295
 80061f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061f2:	69bb      	ldr	r3, [r7, #24]
	}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	461a      	mov	r2, r3
 8006214:	21a5      	movs	r1, #165	; 0xa5
 8006216:	f002 fa57 	bl	80086c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006224:	440b      	add	r3, r1
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f023 0307 	bic.w	r3, r3, #7
 8006232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	b672      	cpsid	i
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	b662      	cpsie	i
 8006252:	617b      	str	r3, [r7, #20]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01f      	beq.n	800629e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	e012      	b.n	800628a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	7819      	ldrb	r1, [r3, #0]
 800626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	3334      	adds	r3, #52	; 0x34
 8006274:	460a      	mov	r2, r1
 8006276:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3301      	adds	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b1d      	cmp	r3, #29
 800628e:	d9e9      	bls.n	8006264 <prvInitialiseNewTask+0x68>
 8006290:	e000      	b.n	8006294 <prvInitialiseNewTask+0x98>
			{
				break;
 8006292:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800629c:	e003      	b.n	80062a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	2b1d      	cmp	r3, #29
 80062aa:	d901      	bls.n	80062b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062ac:	231d      	movs	r3, #29
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ba:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	2200      	movs	r2, #0
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe ff8e 	bl	80051e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	3318      	adds	r3, #24
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe ff89 	bl	80051e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	f1c3 021e 	rsb	r2, r3, #30
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2200      	movs	r2, #0
 80062f0:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	68f9      	ldr	r1, [r7, #12]
 80062fe:	69b8      	ldr	r0, [r7, #24]
 8006300:	f001 fb82 	bl	8007a08 <pxPortInitialiseStack>
 8006304:	4602      	mov	r2, r0
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006316:	bf00      	nop
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006328:	f001 fc78 	bl	8007c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800632c:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <prvAddNewTaskToReadyList+0xc4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	4a2c      	ldr	r2, [pc, #176]	; (80063e4 <prvAddNewTaskToReadyList+0xc4>)
 8006334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006336:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800633e:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006344:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <prvAddNewTaskToReadyList+0xc4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d110      	bne.n	800636e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800634c:	f000 fd5a 	bl	8006e04 <prvInitialiseTaskLists>
 8006350:	e00d      	b.n	800636e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <prvAddNewTaskToReadyList+0xcc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	429a      	cmp	r2, r3
 8006366:	d802      	bhi.n	800636e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006368:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800636e:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <prvAddNewTaskToReadyList+0xd0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a1e      	ldr	r2, [pc, #120]	; (80063f0 <prvAddNewTaskToReadyList+0xd0>)
 8006376:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <prvAddNewTaskToReadyList+0xd0>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <prvAddNewTaskToReadyList+0xd4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d903      	bls.n	8006394 <prvAddNewTaskToReadyList+0x74>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <prvAddNewTaskToReadyList+0xd4>)
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <prvAddNewTaskToReadyList+0xd8>)
 80063a2:	441a      	add	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe ff29 	bl	8005202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063b0:	f001 fc68 	bl	8007c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063b4:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <prvAddNewTaskToReadyList+0xcc>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d207      	bcs.n	80063da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <prvAddNewTaskToReadyList+0xdc>)
 80063cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	200011ac 	.word	0x200011ac
 80063e8:	20000ee0 	.word	0x20000ee0
 80063ec:	200011b8 	.word	0x200011b8
 80063f0:	200011c8 	.word	0x200011c8
 80063f4:	200011b4 	.word	0x200011b4
 80063f8:	20000ee4 	.word	0x20000ee4
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006408:	f001 fc08 	bl	8007c1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d102      	bne.n	8006418 <vTaskDelete+0x18>
 8006412:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <vTaskDelete+0xc8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	e000      	b.n	800641a <vTaskDelete+0x1a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe ff4b 	bl	80052bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3318      	adds	r3, #24
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe ff42 	bl	80052bc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006438:	4b24      	ldr	r3, [pc, #144]	; (80064cc <vTaskDelete+0xcc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	4a23      	ldr	r2, [pc, #140]	; (80064cc <vTaskDelete+0xcc>)
 8006440:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006442:	4b21      	ldr	r3, [pc, #132]	; (80064c8 <vTaskDelete+0xc8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	429a      	cmp	r2, r3
 800644a:	d10b      	bne.n	8006464 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	481f      	ldr	r0, [pc, #124]	; (80064d0 <vTaskDelete+0xd0>)
 8006454:	f7fe fed5 	bl	8005202 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <vTaskDelete+0xd4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <vTaskDelete+0xd4>)
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e009      	b.n	8006478 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006464:	4b1c      	ldr	r3, [pc, #112]	; (80064d8 <vTaskDelete+0xd8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3b01      	subs	r3, #1
 800646a:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <vTaskDelete+0xd8>)
 800646c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fd36 	bl	8006ee0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006474:	f000 fd66 	bl	8006f44 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006478:	f001 fc04 	bl	8007c84 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800647c:	4b17      	ldr	r3, [pc, #92]	; (80064dc <vTaskDelete+0xdc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01d      	beq.n	80064c0 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <vTaskDelete+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	429a      	cmp	r2, r3
 800648c:	d118      	bne.n	80064c0 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800648e:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <vTaskDelete+0xe0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00c      	beq.n	80064b0 <vTaskDelete+0xb0>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	b672      	cpsid	i
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	b662      	cpsie	i
 80064aa:	60bb      	str	r3, [r7, #8]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <vTaskDelete+0xe4>)
 80064b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000ee0 	.word	0x20000ee0
 80064cc:	200011c8 	.word	0x200011c8
 80064d0:	20001180 	.word	0x20001180
 80064d4:	20001194 	.word	0x20001194
 80064d8:	200011ac 	.word	0x200011ac
 80064dc:	200011b8 	.word	0x200011b8
 80064e0:	200011d4 	.word	0x200011d4
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d019      	beq.n	800652e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <vTaskDelay+0x64>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00c      	beq.n	800651c <vTaskDelay+0x34>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	b672      	cpsid	i
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	b662      	cpsie	i
 8006516:	60bb      	str	r3, [r7, #8]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800651c:	f000 f93e 	bl	800679c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006520:	2100      	movs	r1, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fec0 	bl	80072a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006528:	f000 f946 	bl	80067b8 <xTaskResumeAll>
 800652c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d107      	bne.n	8006544 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <vTaskDelay+0x68>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	200011d4 	.word	0x200011d4
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 800655c:	f001 fb5e 	bl	8007c1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <uxTaskPriorityGet+0x18>
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <uxTaskPriorityGet+0x30>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	e000      	b.n	800656e <uxTaskPriorityGet+0x1a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8006576:	f001 fb85 	bl	8007c84 <vPortExitCritical>

		return uxReturn;
 800657a:	68bb      	ldr	r3, [r7, #8]
	}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000ee0 	.word	0x20000ee0

08006588 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b1d      	cmp	r3, #29
 800659a:	d90c      	bls.n	80065b6 <vTaskPrioritySet+0x2e>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	b672      	cpsid	i
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	b662      	cpsie	i
 80065b0:	60fb      	str	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b1d      	cmp	r3, #29
 80065ba:	d901      	bls.n	80065c0 <vTaskPrioritySet+0x38>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065bc:	231d      	movs	r3, #29
 80065be:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80065c0:	f001 fb2c 	bl	8007c1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <vTaskPrioritySet+0x48>
 80065ca:	4b3b      	ldr	r3, [pc, #236]	; (80066b8 <vTaskPrioritySet+0x130>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	e000      	b.n	80065d2 <vTaskPrioritySet+0x4a>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d8:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d063      	beq.n	80066aa <vTaskPrioritySet+0x122>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d90d      	bls.n	8006606 <vTaskPrioritySet+0x7e>
				{
					if( pxTCB != pxCurrentTCB )
 80065ea:	4b33      	ldr	r3, [pc, #204]	; (80066b8 <vTaskPrioritySet+0x130>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d00f      	beq.n	8006614 <vTaskPrioritySet+0x8c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80065f4:	4b30      	ldr	r3, [pc, #192]	; (80066b8 <vTaskPrioritySet+0x130>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d309      	bcc.n	8006614 <vTaskPrioritySet+0x8c>
						{
							xYieldRequired = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e006      	b.n	8006614 <vTaskPrioritySet+0x8c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006606:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <vTaskPrioritySet+0x130>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	429a      	cmp	r2, r3
 800660e:	d101      	bne.n	8006614 <vTaskPrioritySet+0x8c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	429a      	cmp	r2, r3
 8006624:	d102      	bne.n	800662c <vTaskPrioritySet+0xa4>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	db04      	blt.n	8006644 <vTaskPrioritySet+0xbc>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	f1c3 021e 	rsb	r2, r3, #30
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	6959      	ldr	r1, [r3, #20]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a1a      	ldr	r2, [pc, #104]	; (80066bc <vTaskPrioritySet+0x134>)
 8006654:	4413      	add	r3, r2
 8006656:	4299      	cmp	r1, r3
 8006658:	d11c      	bne.n	8006694 <vTaskPrioritySet+0x10c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3304      	adds	r3, #4
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fe2c 	bl	80052bc <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <vTaskPrioritySet+0x138>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d903      	bls.n	8006678 <vTaskPrioritySet+0xf0>
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	4a12      	ldr	r2, [pc, #72]	; (80066c0 <vTaskPrioritySet+0x138>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <vTaskPrioritySet+0x134>)
 8006686:	441a      	add	r2, r3
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fe fdb7 	bl	8005202 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <vTaskPrioritySet+0x122>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <vTaskPrioritySet+0x13c>)
 800669c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80066aa:	f001 faeb 	bl	8007c84 <vPortExitCritical>
	}
 80066ae:	bf00      	nop
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000ee0 	.word	0x20000ee0
 80066bc:	20000ee4 	.word	0x20000ee4
 80066c0:	200011b4 	.word	0x200011b4
 80066c4:	e000ed04 	.word	0xe000ed04

080066c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066d6:	463a      	mov	r2, r7
 80066d8:	1d39      	adds	r1, r7, #4
 80066da:	f107 0308 	add.w	r3, r7, #8
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fd2e 	bl	8005140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	9202      	str	r2, [sp, #8]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	460a      	mov	r2, r1
 80066f6:	4923      	ldr	r1, [pc, #140]	; (8006784 <vTaskStartScheduler+0xbc>)
 80066f8:	4823      	ldr	r0, [pc, #140]	; (8006788 <vTaskStartScheduler+0xc0>)
 80066fa:	f7ff fcd7 	bl	80060ac <xTaskCreateStatic>
 80066fe:	4603      	mov	r3, r0
 8006700:	4a22      	ldr	r2, [pc, #136]	; (800678c <vTaskStartScheduler+0xc4>)
 8006702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006704:	4b21      	ldr	r3, [pc, #132]	; (800678c <vTaskStartScheduler+0xc4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e001      	b.n	8006716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d102      	bne.n	8006722 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800671c:	f000 fe18 	bl	8007350 <xTimerCreateTimerTask>
 8006720:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d118      	bne.n	800675a <vTaskStartScheduler+0x92>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	b672      	cpsid	i
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	b662      	cpsie	i
 800673c:	613b      	str	r3, [r7, #16]
}
 800673e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <vTaskStartScheduler+0xc8>)
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006748:	4b12      	ldr	r3, [pc, #72]	; (8006794 <vTaskStartScheduler+0xcc>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800674e:	4b12      	ldr	r3, [pc, #72]	; (8006798 <vTaskStartScheduler+0xd0>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006754:	f001 f9e4 	bl	8007b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006758:	e010      	b.n	800677c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d10c      	bne.n	800677c <vTaskStartScheduler+0xb4>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	b672      	cpsid	i
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	b662      	cpsie	i
 8006776:	60fb      	str	r3, [r7, #12]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <vTaskStartScheduler+0xb2>
}
 800677c:	bf00      	nop
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	08009994 	.word	0x08009994
 8006788:	08006dd5 	.word	0x08006dd5
 800678c:	200011d0 	.word	0x200011d0
 8006790:	200011cc 	.word	0x200011cc
 8006794:	200011b8 	.word	0x200011b8
 8006798:	200011b0 	.word	0x200011b0

0800679c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <vTaskSuspendAll+0x18>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	4a03      	ldr	r2, [pc, #12]	; (80067b4 <vTaskSuspendAll+0x18>)
 80067a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80067aa:	bf00      	nop
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	200011d4 	.word	0x200011d4

080067b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067c6:	4b43      	ldr	r3, [pc, #268]	; (80068d4 <xTaskResumeAll+0x11c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10c      	bne.n	80067e8 <xTaskResumeAll+0x30>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	b672      	cpsid	i
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	b662      	cpsie	i
 80067e2:	603b      	str	r3, [r7, #0]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067e8:	f001 fa18 	bl	8007c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067ec:	4b39      	ldr	r3, [pc, #228]	; (80068d4 <xTaskResumeAll+0x11c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	4a38      	ldr	r2, [pc, #224]	; (80068d4 <xTaskResumeAll+0x11c>)
 80067f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f6:	4b37      	ldr	r3, [pc, #220]	; (80068d4 <xTaskResumeAll+0x11c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d162      	bne.n	80068c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <xTaskResumeAll+0x120>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d05e      	beq.n	80068c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006806:	e02f      	b.n	8006868 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006808:	4b34      	ldr	r3, [pc, #208]	; (80068dc <xTaskResumeAll+0x124>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3318      	adds	r3, #24
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe fd51 	bl	80052bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fd4c 	bl	80052bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4b2d      	ldr	r3, [pc, #180]	; (80068e0 <xTaskResumeAll+0x128>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d903      	bls.n	8006838 <xTaskResumeAll+0x80>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	4a2a      	ldr	r2, [pc, #168]	; (80068e0 <xTaskResumeAll+0x128>)
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <xTaskResumeAll+0x12c>)
 8006846:	441a      	add	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3304      	adds	r3, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7fe fcd7 	bl	8005202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	4b23      	ldr	r3, [pc, #140]	; (80068e8 <xTaskResumeAll+0x130>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <xTaskResumeAll+0x134>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006868:	4b1c      	ldr	r3, [pc, #112]	; (80068dc <xTaskResumeAll+0x124>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1cb      	bne.n	8006808 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006876:	f000 fb65 	bl	8006f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800687a:	4b1d      	ldr	r3, [pc, #116]	; (80068f0 <xTaskResumeAll+0x138>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d010      	beq.n	80068a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006886:	f000 f847 	bl	8006918 <xTaskIncrementTick>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006890:	4b16      	ldr	r3, [pc, #88]	; (80068ec <xTaskResumeAll+0x134>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3b01      	subs	r3, #1
 800689a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f1      	bne.n	8006886 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80068a2:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <xTaskResumeAll+0x138>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068a8:	4b10      	ldr	r3, [pc, #64]	; (80068ec <xTaskResumeAll+0x134>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <xTaskResumeAll+0x13c>)
 80068b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068c4:	f001 f9de 	bl	8007c84 <vPortExitCritical>

	return xAlreadyYielded;
 80068c8:	68bb      	ldr	r3, [r7, #8]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200011d4 	.word	0x200011d4
 80068d8:	200011ac 	.word	0x200011ac
 80068dc:	2000116c 	.word	0x2000116c
 80068e0:	200011b4 	.word	0x200011b4
 80068e4:	20000ee4 	.word	0x20000ee4
 80068e8:	20000ee0 	.word	0x20000ee0
 80068ec:	200011c0 	.word	0x200011c0
 80068f0:	200011bc 	.word	0x200011bc
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068fe:	4b05      	ldr	r3, [pc, #20]	; (8006914 <xTaskGetTickCount+0x1c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006904:	687b      	ldr	r3, [r7, #4]
}
 8006906:	4618      	mov	r0, r3
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	200011b0 	.word	0x200011b0

08006918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006922:	4b50      	ldr	r3, [pc, #320]	; (8006a64 <xTaskIncrementTick+0x14c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f040 808b 	bne.w	8006a42 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800692c:	4b4e      	ldr	r3, [pc, #312]	; (8006a68 <xTaskIncrementTick+0x150>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006934:	4a4c      	ldr	r2, [pc, #304]	; (8006a68 <xTaskIncrementTick+0x150>)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d122      	bne.n	8006986 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006940:	4b4a      	ldr	r3, [pc, #296]	; (8006a6c <xTaskIncrementTick+0x154>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <xTaskIncrementTick+0x4c>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	b672      	cpsid	i
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	b662      	cpsie	i
 800695e:	603b      	str	r3, [r7, #0]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <xTaskIncrementTick+0x4a>
 8006964:	4b41      	ldr	r3, [pc, #260]	; (8006a6c <xTaskIncrementTick+0x154>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <xTaskIncrementTick+0x158>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3f      	ldr	r2, [pc, #252]	; (8006a6c <xTaskIncrementTick+0x154>)
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	4a3f      	ldr	r2, [pc, #252]	; (8006a70 <xTaskIncrementTick+0x158>)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4b3e      	ldr	r3, [pc, #248]	; (8006a74 <xTaskIncrementTick+0x15c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	4a3d      	ldr	r2, [pc, #244]	; (8006a74 <xTaskIncrementTick+0x15c>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	f000 fadf 	bl	8006f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006986:	4b3c      	ldr	r3, [pc, #240]	; (8006a78 <xTaskIncrementTick+0x160>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d349      	bcc.n	8006a24 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006990:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <xTaskIncrementTick+0x154>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699a:	4b37      	ldr	r3, [pc, #220]	; (8006a78 <xTaskIncrementTick+0x160>)
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	601a      	str	r2, [r3, #0]
					break;
 80069a2:	e03f      	b.n	8006a24 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a4:	4b31      	ldr	r3, [pc, #196]	; (8006a6c <xTaskIncrementTick+0x154>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d203      	bcs.n	80069c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069bc:	4a2e      	ldr	r2, [pc, #184]	; (8006a78 <xTaskIncrementTick+0x160>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069c2:	e02f      	b.n	8006a24 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe fc77 	bl	80052bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3318      	adds	r3, #24
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fc6e 	bl	80052bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e4:	4b25      	ldr	r3, [pc, #148]	; (8006a7c <xTaskIncrementTick+0x164>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d903      	bls.n	80069f4 <xTaskIncrementTick+0xdc>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	4a22      	ldr	r2, [pc, #136]	; (8006a7c <xTaskIncrementTick+0x164>)
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <xTaskIncrementTick+0x168>)
 8006a02:	441a      	add	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f7fe fbf9 	bl	8005202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a14:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <xTaskIncrementTick+0x16c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d3b8      	bcc.n	8006990 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a22:	e7b5      	b.n	8006990 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a24:	4b17      	ldr	r3, [pc, #92]	; (8006a84 <xTaskIncrementTick+0x16c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	4915      	ldr	r1, [pc, #84]	; (8006a80 <xTaskIncrementTick+0x168>)
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d907      	bls.n	8006a4c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e004      	b.n	8006a4c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <xTaskIncrementTick+0x170>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	4a0f      	ldr	r2, [pc, #60]	; (8006a88 <xTaskIncrementTick+0x170>)
 8006a4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a4c:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <xTaskIncrementTick+0x174>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a58:	697b      	ldr	r3, [r7, #20]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200011d4 	.word	0x200011d4
 8006a68:	200011b0 	.word	0x200011b0
 8006a6c:	20001164 	.word	0x20001164
 8006a70:	20001168 	.word	0x20001168
 8006a74:	200011c4 	.word	0x200011c4
 8006a78:	200011cc 	.word	0x200011cc
 8006a7c:	200011b4 	.word	0x200011b4
 8006a80:	20000ee4 	.word	0x20000ee4
 8006a84:	20000ee0 	.word	0x20000ee0
 8006a88:	200011bc 	.word	0x200011bc
 8006a8c:	200011c0 	.word	0x200011c0

08006a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a96:	4b29      	ldr	r3, [pc, #164]	; (8006b3c <vTaskSwitchContext+0xac>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a9e:	4b28      	ldr	r3, [pc, #160]	; (8006b40 <vTaskSwitchContext+0xb0>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006aa4:	e043      	b.n	8006b2e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8006aa6:	4b26      	ldr	r3, [pc, #152]	; (8006b40 <vTaskSwitchContext+0xb0>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aac:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <vTaskSwitchContext+0xb4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e012      	b.n	8006ada <vTaskSwitchContext+0x4a>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10c      	bne.n	8006ad4 <vTaskSwitchContext+0x44>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	b672      	cpsid	i
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	b662      	cpsie	i
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <vTaskSwitchContext+0x42>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	491b      	ldr	r1, [pc, #108]	; (8006b48 <vTaskSwitchContext+0xb8>)
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0e2      	beq.n	8006ab4 <vTaskSwitchContext+0x24>
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <vTaskSwitchContext+0xb8>)
 8006afa:	4413      	add	r3, r2
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d104      	bne.n	8006b1e <vTaskSwitchContext+0x8e>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	605a      	str	r2, [r3, #4]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <vTaskSwitchContext+0xbc>)
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4a06      	ldr	r2, [pc, #24]	; (8006b44 <vTaskSwitchContext+0xb4>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6013      	str	r3, [r2, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	200011d4 	.word	0x200011d4
 8006b40:	200011c0 	.word	0x200011c0
 8006b44:	200011b4 	.word	0x200011b4
 8006b48:	20000ee4 	.word	0x20000ee4
 8006b4c:	20000ee0 	.word	0x20000ee0

08006b50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10c      	bne.n	8006b7a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	b672      	cpsid	i
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	b662      	cpsie	i
 8006b74:	60fb      	str	r3, [r7, #12]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <vTaskPlaceOnEventList+0x48>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3318      	adds	r3, #24
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fe fb61 	bl	800524a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b88:	2101      	movs	r1, #1
 8006b8a:	6838      	ldr	r0, [r7, #0]
 8006b8c:	f000 fb8c 	bl	80072a8 <prvAddCurrentTaskToDelayedList>
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20000ee0 	.word	0x20000ee0

08006b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10c      	bne.n	8006bc8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	b672      	cpsid	i
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	b662      	cpsie	i
 8006bc2:	617b      	str	r3, [r7, #20]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <vTaskPlaceOnEventListRestricted+0x58>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3318      	adds	r3, #24
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7fe fb16 	bl	8005202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006be0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	68b8      	ldr	r0, [r7, #8]
 8006be6:	f000 fb5f 	bl	80072a8 <prvAddCurrentTaskToDelayedList>
	}
 8006bea:	bf00      	nop
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000ee0 	.word	0x20000ee0

08006bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10c      	bne.n	8006c28 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	b672      	cpsid	i
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	b662      	cpsie	i
 8006c22:	60fb      	str	r3, [r7, #12]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3318      	adds	r3, #24
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe fb45 	bl	80052bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c32:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <xTaskRemoveFromEventList+0xb4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d11d      	bne.n	8006c76 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fb3c 	bl	80052bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4b19      	ldr	r3, [pc, #100]	; (8006cb0 <xTaskRemoveFromEventList+0xb8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d903      	bls.n	8006c58 <xTaskRemoveFromEventList+0x60>
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a16      	ldr	r2, [pc, #88]	; (8006cb0 <xTaskRemoveFromEventList+0xb8>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <xTaskRemoveFromEventList+0xbc>)
 8006c66:	441a      	add	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7fe fac7 	bl	8005202 <vListInsertEnd>
 8006c74:	e005      	b.n	8006c82 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	3318      	adds	r3, #24
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	480e      	ldr	r0, [pc, #56]	; (8006cb8 <xTaskRemoveFromEventList+0xc0>)
 8006c7e:	f7fe fac0 	bl	8005202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <xTaskRemoveFromEventList+0xc4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d905      	bls.n	8006c9c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <xTaskRemoveFromEventList+0xc8>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	e001      	b.n	8006ca0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ca0:	697b      	ldr	r3, [r7, #20]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200011d4 	.word	0x200011d4
 8006cb0:	200011b4 	.word	0x200011b4
 8006cb4:	20000ee4 	.word	0x20000ee4
 8006cb8:	2000116c 	.word	0x2000116c
 8006cbc:	20000ee0 	.word	0x20000ee0
 8006cc0:	200011c0 	.word	0x200011c0

08006cc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <vTaskInternalSetTimeOutState+0x24>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <vTaskInternalSetTimeOutState+0x28>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	605a      	str	r2, [r3, #4]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	200011c4 	.word	0x200011c4
 8006cec:	200011b0 	.word	0x200011b0

08006cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10c      	bne.n	8006d1a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	b672      	cpsid	i
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	b662      	cpsie	i
 8006d14:	613b      	str	r3, [r7, #16]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10c      	bne.n	8006d3a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	b672      	cpsid	i
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	b662      	cpsie	i
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006d3a:	f000 ff6f 	bl	8007c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d3e:	4b1d      	ldr	r3, [pc, #116]	; (8006db4 <xTaskCheckForTimeOut+0xc4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d102      	bne.n	8006d5e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	e023      	b.n	8006da6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <xTaskCheckForTimeOut+0xc8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d007      	beq.n	8006d7a <xTaskCheckForTimeOut+0x8a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d302      	bcc.n	8006d7a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e015      	b.n	8006da6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d20b      	bcs.n	8006d9c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff ff97 	bl	8006cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	e004      	b.n	8006da6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006da2:	2301      	movs	r3, #1
 8006da4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006da6:	f000 ff6d 	bl	8007c84 <vPortExitCritical>

	return xReturn;
 8006daa:	69fb      	ldr	r3, [r7, #28]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	200011b0 	.word	0x200011b0
 8006db8:	200011c4 	.word	0x200011c4

08006dbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006dc0:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <vTaskMissedYield+0x14>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	200011c0 	.word	0x200011c0

08006dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ddc:	f000 f852 	bl	8006e84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <prvIdleTask+0x28>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d9f9      	bls.n	8006ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <prvIdleTask+0x2c>)
 8006dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006df8:	e7f0      	b.n	8006ddc <prvIdleTask+0x8>
 8006dfa:	bf00      	nop
 8006dfc:	20000ee4 	.word	0x20000ee4
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	607b      	str	r3, [r7, #4]
 8006e0e:	e00c      	b.n	8006e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <prvInitialiseTaskLists+0x60>)
 8006e1c:	4413      	add	r3, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe f9c2 	bl	80051a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3301      	adds	r3, #1
 8006e28:	607b      	str	r3, [r7, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b1d      	cmp	r3, #29
 8006e2e:	d9ef      	bls.n	8006e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e30:	480d      	ldr	r0, [pc, #52]	; (8006e68 <prvInitialiseTaskLists+0x64>)
 8006e32:	f7fe f9b9 	bl	80051a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e36:	480d      	ldr	r0, [pc, #52]	; (8006e6c <prvInitialiseTaskLists+0x68>)
 8006e38:	f7fe f9b6 	bl	80051a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e3c:	480c      	ldr	r0, [pc, #48]	; (8006e70 <prvInitialiseTaskLists+0x6c>)
 8006e3e:	f7fe f9b3 	bl	80051a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e42:	480c      	ldr	r0, [pc, #48]	; (8006e74 <prvInitialiseTaskLists+0x70>)
 8006e44:	f7fe f9b0 	bl	80051a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e48:	480b      	ldr	r0, [pc, #44]	; (8006e78 <prvInitialiseTaskLists+0x74>)
 8006e4a:	f7fe f9ad 	bl	80051a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <prvInitialiseTaskLists+0x78>)
 8006e50:	4a05      	ldr	r2, [pc, #20]	; (8006e68 <prvInitialiseTaskLists+0x64>)
 8006e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e54:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <prvInitialiseTaskLists+0x7c>)
 8006e56:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <prvInitialiseTaskLists+0x68>)
 8006e58:	601a      	str	r2, [r3, #0]
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000ee4 	.word	0x20000ee4
 8006e68:	2000113c 	.word	0x2000113c
 8006e6c:	20001150 	.word	0x20001150
 8006e70:	2000116c 	.word	0x2000116c
 8006e74:	20001180 	.word	0x20001180
 8006e78:	20001198 	.word	0x20001198
 8006e7c:	20001164 	.word	0x20001164
 8006e80:	20001168 	.word	0x20001168

08006e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e8a:	e019      	b.n	8006ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e8c:	f000 fec6 	bl	8007c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <prvCheckTasksWaitingTermination+0x50>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fa0d 	bl	80052bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <prvCheckTasksWaitingTermination+0x54>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <prvCheckTasksWaitingTermination+0x54>)
 8006eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <prvCheckTasksWaitingTermination+0x58>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <prvCheckTasksWaitingTermination+0x58>)
 8006eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eb6:	f000 fee5 	bl	8007c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f810 	bl	8006ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <prvCheckTasksWaitingTermination+0x58>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e1      	bne.n	8006e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20001180 	.word	0x20001180
 8006ed8:	200011ac 	.word	0x200011ac
 8006edc:	20001194 	.word	0x20001194

08006ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d108      	bne.n	8006f04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 f886 	bl	8008008 <vPortFree>
				vPortFree( pxTCB );
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f883 	bl	8008008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f02:	e01a      	b.n	8006f3a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d103      	bne.n	8006f16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 f87a 	bl	8008008 <vPortFree>
	}
 8006f14:	e011      	b.n	8006f3a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d00c      	beq.n	8006f3a <prvDeleteTCB+0x5a>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	b672      	cpsid	i
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	b662      	cpsie	i
 8006f34:	60fb      	str	r3, [r7, #12]
}
 8006f36:	bf00      	nop
 8006f38:	e7fe      	b.n	8006f38 <prvDeleteTCB+0x58>
	}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <prvResetNextTaskUnblockTime+0x38>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <prvResetNextTaskUnblockTime+0x3c>)
 8006f56:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f5c:	e008      	b.n	8006f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <prvResetNextTaskUnblockTime+0x38>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4a04      	ldr	r2, [pc, #16]	; (8006f80 <prvResetNextTaskUnblockTime+0x3c>)
 8006f6e:	6013      	str	r3, [r2, #0]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20001164 	.word	0x20001164
 8006f80:	200011cc 	.word	0x200011cc

08006f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <xTaskGetSchedulerState+0x34>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f92:	2301      	movs	r3, #1
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	e008      	b.n	8006faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f98:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <xTaskGetSchedulerState+0x38>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	e001      	b.n	8006faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006faa:	687b      	ldr	r3, [r7, #4]
	}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	200011b8 	.word	0x200011b8
 8006fbc:	200011d4 	.word	0x200011d4

08006fc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d051      	beq.n	800707a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <xTaskPriorityInherit+0xc4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d241      	bcs.n	8007068 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	db06      	blt.n	8006ffa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <xTaskPriorityInherit+0xc4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	f1c3 021e 	rsb	r2, r3, #30
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6959      	ldr	r1, [r3, #20]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4a1f      	ldr	r2, [pc, #124]	; (8007088 <xTaskPriorityInherit+0xc8>)
 800700c:	4413      	add	r3, r2
 800700e:	4299      	cmp	r1, r3
 8007010:	d122      	bne.n	8007058 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe f950 	bl	80052bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <xTaskPriorityInherit+0xc4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4b18      	ldr	r3, [pc, #96]	; (800708c <xTaskPriorityInherit+0xcc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d903      	bls.n	800703a <xTaskPriorityInherit+0x7a>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	4a15      	ldr	r2, [pc, #84]	; (800708c <xTaskPriorityInherit+0xcc>)
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4a10      	ldr	r2, [pc, #64]	; (8007088 <xTaskPriorityInherit+0xc8>)
 8007048:	441a      	add	r2, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	3304      	adds	r3, #4
 800704e:	4619      	mov	r1, r3
 8007050:	4610      	mov	r0, r2
 8007052:	f7fe f8d6 	bl	8005202 <vListInsertEnd>
 8007056:	e004      	b.n	8007062 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007058:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <xTaskPriorityInherit+0xc4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007062:	2301      	movs	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	e008      	b.n	800707a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <xTaskPriorityInherit+0xc4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	429a      	cmp	r2, r3
 8007074:	d201      	bcs.n	800707a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007076:	2301      	movs	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800707a:	68fb      	ldr	r3, [r7, #12]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000ee0 	.word	0x20000ee0
 8007088:	20000ee4 	.word	0x20000ee4
 800708c:	200011b4 	.word	0x200011b4

08007090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d05a      	beq.n	800715c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070a6:	4b30      	ldr	r3, [pc, #192]	; (8007168 <xTaskPriorityDisinherit+0xd8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d00c      	beq.n	80070ca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	b672      	cpsid	i
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	b662      	cpsie	i
 80070c4:	60fb      	str	r3, [r7, #12]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10c      	bne.n	80070ec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	b672      	cpsid	i
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	b662      	cpsie	i
 80070e6:	60bb      	str	r3, [r7, #8]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f0:	1e5a      	subs	r2, r3, #1
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d02c      	beq.n	800715c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	2b00      	cmp	r3, #0
 8007108:	d128      	bne.n	800715c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe f8d4 	bl	80052bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	f1c3 021e 	rsb	r2, r3, #30
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4b0f      	ldr	r3, [pc, #60]	; (800716c <xTaskPriorityDisinherit+0xdc>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d903      	bls.n	800713c <xTaskPriorityDisinherit+0xac>
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a0c      	ldr	r2, [pc, #48]	; (800716c <xTaskPriorityDisinherit+0xdc>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a09      	ldr	r2, [pc, #36]	; (8007170 <xTaskPriorityDisinherit+0xe0>)
 800714a:	441a      	add	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe f855 	bl	8005202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007158:	2301      	movs	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800715c:	697b      	ldr	r3, [r7, #20]
	}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000ee0 	.word	0x20000ee0
 800716c:	200011b4 	.word	0x200011b4
 8007170:	20000ee4 	.word	0x20000ee4

08007174 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007182:	2301      	movs	r3, #1
 8007184:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d06e      	beq.n	800726a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10c      	bne.n	80071ae <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	b672      	cpsid	i
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	b662      	cpsie	i
 80071a8:	60fb      	str	r3, [r7, #12]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d902      	bls.n	80071be <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	e002      	b.n	80071c4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d04d      	beq.n	800726a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d148      	bne.n	800726a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80071d8:	4b26      	ldr	r3, [pc, #152]	; (8007274 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d10c      	bne.n	80071fc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	b672      	cpsid	i
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	b662      	cpsie	i
 80071f6:	60bb      	str	r3, [r7, #8]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	db04      	blt.n	800721a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f1c3 021e 	rsb	r2, r3, #30
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	6959      	ldr	r1, [r3, #20]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4a13      	ldr	r2, [pc, #76]	; (8007278 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800722a:	4413      	add	r3, r2
 800722c:	4299      	cmp	r1, r3
 800722e:	d11c      	bne.n	800726a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	3304      	adds	r3, #4
 8007234:	4618      	mov	r0, r3
 8007236:	f7fe f841 	bl	80052bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	4b0f      	ldr	r3, [pc, #60]	; (800727c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d903      	bls.n	800724e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a0c      	ldr	r2, [pc, #48]	; (800727c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800725c:	441a      	add	r2, r3
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fd ffcc 	bl	8005202 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800726a:	bf00      	nop
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000ee0 	.word	0x20000ee0
 8007278:	20000ee4 	.word	0x20000ee4
 800727c:	200011b4 	.word	0x200011b4

08007280 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007284:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007292:	3201      	adds	r2, #1
 8007294:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8007296:	4b03      	ldr	r3, [pc, #12]	; (80072a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007298:	681b      	ldr	r3, [r3, #0]
	}
 800729a:	4618      	mov	r0, r3
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20000ee0 	.word	0x20000ee0

080072a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072b2:	4b21      	ldr	r3, [pc, #132]	; (8007338 <prvAddCurrentTaskToDelayedList+0x90>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072b8:	4b20      	ldr	r3, [pc, #128]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3304      	adds	r3, #4
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fd fffc 	bl	80052bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d10a      	bne.n	80072e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072d2:	4b1a      	ldr	r3, [pc, #104]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4819      	ldr	r0, [pc, #100]	; (8007340 <prvAddCurrentTaskToDelayedList+0x98>)
 80072dc:	f7fd ff91 	bl	8005202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072e0:	e026      	b.n	8007330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4413      	add	r3, r2
 80072e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d209      	bcs.n	800730e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072fa:	4b12      	ldr	r3, [pc, #72]	; (8007344 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f7fd ff9f 	bl	800524a <vListInsert>
}
 800730c:	e010      	b.n	8007330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800730e:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvAddCurrentTaskToDelayedList+0x94>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3304      	adds	r3, #4
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f7fd ff95 	bl	800524a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	d202      	bcs.n	8007330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800732a:	4a08      	ldr	r2, [pc, #32]	; (800734c <prvAddCurrentTaskToDelayedList+0xa4>)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6013      	str	r3, [r2, #0]
}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	200011b0 	.word	0x200011b0
 800733c:	20000ee0 	.word	0x20000ee0
 8007340:	20001198 	.word	0x20001198
 8007344:	20001168 	.word	0x20001168
 8007348:	20001164 	.word	0x20001164
 800734c:	200011cc 	.word	0x200011cc

08007350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	; 0x28
 8007354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800735a:	f000 fb15 	bl	8007988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800735e:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <xTimerCreateTimerTask+0x84>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d021      	beq.n	80073aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800736e:	1d3a      	adds	r2, r7, #4
 8007370:	f107 0108 	add.w	r1, r7, #8
 8007374:	f107 030c 	add.w	r3, r7, #12
 8007378:	4618      	mov	r0, r3
 800737a:	f7fd fefb 	bl	8005174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	9202      	str	r2, [sp, #8]
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	2302      	movs	r3, #2
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	2300      	movs	r3, #0
 800738e:	460a      	mov	r2, r1
 8007390:	4911      	ldr	r1, [pc, #68]	; (80073d8 <xTimerCreateTimerTask+0x88>)
 8007392:	4812      	ldr	r0, [pc, #72]	; (80073dc <xTimerCreateTimerTask+0x8c>)
 8007394:	f7fe fe8a 	bl	80060ac <xTaskCreateStatic>
 8007398:	4603      	mov	r3, r0
 800739a:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <xTimerCreateTimerTask+0x90>)
 800739c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800739e:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xTimerCreateTimerTask+0x90>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073a6:	2301      	movs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10c      	bne.n	80073ca <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	613b      	str	r3, [r7, #16]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20001208 	.word	0x20001208
 80073d8:	0800999c 	.word	0x0800999c
 80073dc:	08007521 	.word	0x08007521
 80073e0:	2000120c 	.word	0x2000120c

080073e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08a      	sub	sp, #40	; 0x28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <xTimerGenericCommand+0x32>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	623b      	str	r3, [r7, #32]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <xTimerGenericCommand+0x9c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d02a      	beq.n	8007474 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b05      	cmp	r3, #5
 800742e:	dc18      	bgt.n	8007462 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007430:	f7ff fda8 	bl	8006f84 <xTaskGetSchedulerState>
 8007434:	4603      	mov	r3, r0
 8007436:	2b02      	cmp	r3, #2
 8007438:	d109      	bne.n	800744e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800743a:	4b11      	ldr	r3, [pc, #68]	; (8007480 <xTimerGenericCommand+0x9c>)
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	f107 0110 	add.w	r1, r7, #16
 8007442:	2300      	movs	r3, #0
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	f7fe f8eb 	bl	8005620 <xQueueGenericSend>
 800744a:	6278      	str	r0, [r7, #36]	; 0x24
 800744c:	e012      	b.n	8007474 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800744e:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <xTimerGenericCommand+0x9c>)
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	f107 0110 	add.w	r1, r7, #16
 8007456:	2300      	movs	r3, #0
 8007458:	2200      	movs	r2, #0
 800745a:	f7fe f8e1 	bl	8005620 <xQueueGenericSend>
 800745e:	6278      	str	r0, [r7, #36]	; 0x24
 8007460:	e008      	b.n	8007474 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <xTimerGenericCommand+0x9c>)
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f107 0110 	add.w	r1, r7, #16
 800746a:	2300      	movs	r3, #0
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	f7fe f9dd 	bl	800582c <xQueueGenericSendFromISR>
 8007472:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007476:	4618      	mov	r0, r3
 8007478:	3728      	adds	r7, #40	; 0x28
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001208 	.word	0x20001208

08007484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af02      	add	r7, sp, #8
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800748e:	4b23      	ldr	r3, [pc, #140]	; (800751c <prvProcessExpiredTimer+0x98>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	3304      	adds	r3, #4
 800749c:	4618      	mov	r0, r3
 800749e:	f7fd ff0d 	bl	80052bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d024      	beq.n	80074fa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	18d1      	adds	r1, r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	6978      	ldr	r0, [r7, #20]
 80074be:	f000 f8d3 	bl	8007668 <prvInsertTimerInActiveList>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d021      	beq.n	800750c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074c8:	2300      	movs	r3, #0
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	2300      	movs	r3, #0
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	2100      	movs	r1, #0
 80074d2:	6978      	ldr	r0, [r7, #20]
 80074d4:	f7ff ff86 	bl	80073e4 <xTimerGenericCommand>
 80074d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d115      	bne.n	800750c <prvProcessExpiredTimer+0x88>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	b672      	cpsid	i
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	b662      	cpsie	i
 80074f4:	60fb      	str	r3, [r7, #12]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	6978      	ldr	r0, [r7, #20]
 8007512:	4798      	blx	r3
}
 8007514:	bf00      	nop
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001200 	.word	0x20001200

08007520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007528:	f107 0308 	add.w	r3, r7, #8
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f857 	bl	80075e0 <prvGetNextExpireTime>
 8007532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4619      	mov	r1, r3
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f803 	bl	8007544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800753e:	f000 f8d5 	bl	80076ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007542:	e7f1      	b.n	8007528 <prvTimerTask+0x8>

08007544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800754e:	f7ff f925 	bl	800679c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007552:	f107 0308 	add.w	r3, r7, #8
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f866 	bl	8007628 <prvSampleTimeNow>
 800755c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d130      	bne.n	80075c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <prvProcessTimerOrBlockTask+0x3c>
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	429a      	cmp	r2, r3
 8007570:	d806      	bhi.n	8007580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007572:	f7ff f921 	bl	80067b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff ff83 	bl	8007484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800757e:	e024      	b.n	80075ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d008      	beq.n	8007598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007586:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <prvProcessTimerOrBlockTask+0x90>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <prvProcessTimerOrBlockTask+0x50>
 8007590:	2301      	movs	r3, #1
 8007592:	e000      	b.n	8007596 <prvProcessTimerOrBlockTask+0x52>
 8007594:	2300      	movs	r3, #0
 8007596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <prvProcessTimerOrBlockTask+0x94>)
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	4619      	mov	r1, r3
 80075a6:	f7fe fd4d 	bl	8006044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075aa:	f7ff f905 	bl	80067b8 <xTaskResumeAll>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075b4:	4b09      	ldr	r3, [pc, #36]	; (80075dc <prvProcessTimerOrBlockTask+0x98>)
 80075b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	f3bf 8f6f 	isb	sy
}
 80075c4:	e001      	b.n	80075ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075c6:	f7ff f8f7 	bl	80067b8 <xTaskResumeAll>
}
 80075ca:	bf00      	nop
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20001204 	.word	0x20001204
 80075d8:	20001208 	.word	0x20001208
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <prvGetNextExpireTime+0x44>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <prvGetNextExpireTime+0x16>
 80075f2:	2201      	movs	r2, #1
 80075f4:	e000      	b.n	80075f8 <prvGetNextExpireTime+0x18>
 80075f6:	2200      	movs	r2, #0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d105      	bne.n	8007610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <prvGetNextExpireTime+0x44>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e001      	b.n	8007614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007614:	68fb      	ldr	r3, [r7, #12]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20001200 	.word	0x20001200

08007628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007630:	f7ff f962 	bl	80068f8 <xTaskGetTickCount>
 8007634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <prvSampleTimeNow+0x3c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	429a      	cmp	r2, r3
 800763e:	d205      	bcs.n	800764c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007640:	f000 f93c 	bl	80078bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	e002      	b.n	8007652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007652:	4a04      	ldr	r2, [pc, #16]	; (8007664 <prvSampleTimeNow+0x3c>)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007658:	68fb      	ldr	r3, [r7, #12]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20001210 	.word	0x20001210

08007668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	429a      	cmp	r2, r3
 800768c:	d812      	bhi.n	80076b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	1ad2      	subs	r2, r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	429a      	cmp	r2, r3
 800769a:	d302      	bcc.n	80076a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800769c:	2301      	movs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e01b      	b.n	80076da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <prvInsertTimerInActiveList+0x7c>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fd fdcc 	bl	800524a <vListInsert>
 80076b2:	e012      	b.n	80076da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d206      	bcs.n	80076ca <prvInsertTimerInActiveList+0x62>
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d302      	bcc.n	80076ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e007      	b.n	80076da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ca:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <prvInsertTimerInActiveList+0x80>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f7fd fdb8 	bl	800524a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076da:	697b      	ldr	r3, [r7, #20]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20001204 	.word	0x20001204
 80076e8:	20001200 	.word	0x20001200

080076ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08e      	sub	sp, #56	; 0x38
 80076f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076f2:	e0d0      	b.n	8007896 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	da1a      	bge.n	8007730 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	3304      	adds	r3, #4
 80076fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10c      	bne.n	8007720 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	b672      	cpsid	i
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	b662      	cpsie	i
 800771a:	61fb      	str	r3, [r7, #28]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007726:	6850      	ldr	r0, [r2, #4]
 8007728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800772a:	6892      	ldr	r2, [r2, #8]
 800772c:	4611      	mov	r1, r2
 800772e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	f2c0 80af 	blt.w	8007896 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	3304      	adds	r3, #4
 8007748:	4618      	mov	r0, r3
 800774a:	f7fd fdb7 	bl	80052bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800774e:	463b      	mov	r3, r7
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff ff69 	bl	8007628 <prvSampleTimeNow>
 8007756:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b09      	cmp	r3, #9
 800775c:	f200 809a 	bhi.w	8007894 <prvProcessReceivedCommands+0x1a8>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <prvProcessReceivedCommands+0x7c>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	08007791 	.word	0x08007791
 800776c:	08007791 	.word	0x08007791
 8007770:	08007791 	.word	0x08007791
 8007774:	08007809 	.word	0x08007809
 8007778:	0800781d 	.word	0x0800781d
 800777c:	0800786b 	.word	0x0800786b
 8007780:	08007791 	.word	0x08007791
 8007784:	08007791 	.word	0x08007791
 8007788:	08007809 	.word	0x08007809
 800778c:	0800781d 	.word	0x0800781d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	b2da      	uxtb	r2, r3
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	18d1      	adds	r1, r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b0:	f7ff ff5a 	bl	8007668 <prvInsertTimerInActiveList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d06d      	beq.n	8007896 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d062      	beq.n	8007896 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	441a      	add	r2, r3
 80077d8:	2300      	movs	r3, #0
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	2300      	movs	r3, #0
 80077de:	2100      	movs	r1, #0
 80077e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e2:	f7ff fdff 	bl	80073e4 <xTimerGenericCommand>
 80077e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d153      	bne.n	8007896 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	b672      	cpsid	i
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	b662      	cpsie	i
 8007802:	61bb      	str	r3, [r7, #24]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	b2da      	uxtb	r2, r3
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800781a:	e03c      	b.n	8007896 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007822:	f043 0301 	orr.w	r3, r3, #1
 8007826:	b2da      	uxtb	r2, r3
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10c      	bne.n	8007856 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	b672      	cpsid	i
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	b662      	cpsie	i
 8007850:	617b      	str	r3, [r7, #20]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	18d1      	adds	r1, r2, r3
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007864:	f7ff ff00 	bl	8007668 <prvInsertTimerInActiveList>
					break;
 8007868:	e015      	b.n	8007896 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787a:	f000 fbc5 	bl	8008008 <vPortFree>
 800787e:	e00a      	b.n	8007896 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007886:	f023 0301 	bic.w	r3, r3, #1
 800788a:	b2da      	uxtb	r2, r3
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007892:	e000      	b.n	8007896 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007894:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <prvProcessReceivedCommands+0x1cc>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	1d39      	adds	r1, r7, #4
 800789c:	2200      	movs	r2, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe f864 	bl	800596c <xQueueReceive>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f af24 	bne.w	80076f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	3730      	adds	r7, #48	; 0x30
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20001208 	.word	0x20001208

080078bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078c2:	e04a      	b.n	800795a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078c4:	4b2e      	ldr	r3, [pc, #184]	; (8007980 <prvSwitchTimerLists+0xc4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ce:	4b2c      	ldr	r3, [pc, #176]	; (8007980 <prvSwitchTimerLists+0xc4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3304      	adds	r3, #4
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fd fced 	bl	80052bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d030      	beq.n	800795a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4413      	add	r3, r2
 8007900:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	429a      	cmp	r2, r3
 8007908:	d90e      	bls.n	8007928 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <prvSwitchTimerLists+0xc4>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7fd fc92 	bl	800524a <vListInsert>
 8007926:	e018      	b.n	800795a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007928:	2300      	movs	r3, #0
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2300      	movs	r3, #0
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	2100      	movs	r1, #0
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f7ff fd56 	bl	80073e4 <xTimerGenericCommand>
 8007938:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10c      	bne.n	800795a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	b672      	cpsid	i
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	b662      	cpsie	i
 8007954:	603b      	str	r3, [r7, #0]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <prvSwitchTimerLists+0xc4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1af      	bne.n	80078c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <prvSwitchTimerLists+0xc4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <prvSwitchTimerLists+0xc8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a04      	ldr	r2, [pc, #16]	; (8007980 <prvSwitchTimerLists+0xc4>)
 8007970:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007972:	4a04      	ldr	r2, [pc, #16]	; (8007984 <prvSwitchTimerLists+0xc8>)
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	6013      	str	r3, [r2, #0]
}
 8007978:	bf00      	nop
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20001200 	.word	0x20001200
 8007984:	20001204 	.word	0x20001204

08007988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800798e:	f000 f945 	bl	8007c1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d120      	bne.n	80079dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800799a:	4814      	ldr	r0, [pc, #80]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 800799c:	f7fd fc04 	bl	80051a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079a0:	4813      	ldr	r0, [pc, #76]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079a2:	f7fd fc01 	bl	80051a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <prvCheckForValidListAndQueue+0x6c>)
 80079a8:	4a10      	ldr	r2, [pc, #64]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 80079aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079ac:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <prvCheckForValidListAndQueue+0x70>)
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079b2:	2300      	movs	r3, #0
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	4b11      	ldr	r3, [pc, #68]	; (80079fc <prvCheckForValidListAndQueue+0x74>)
 80079b8:	4a11      	ldr	r2, [pc, #68]	; (8007a00 <prvCheckForValidListAndQueue+0x78>)
 80079ba:	2110      	movs	r1, #16
 80079bc:	200a      	movs	r0, #10
 80079be:	f7fd fd11 	bl	80053e4 <xQueueGenericCreateStatic>
 80079c2:	4603      	mov	r3, r0
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	490b      	ldr	r1, [pc, #44]	; (8007a04 <prvCheckForValidListAndQueue+0x7c>)
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fb0a 	bl	8005ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079dc:	f000 f952 	bl	8007c84 <vPortExitCritical>
}
 80079e0:	bf00      	nop
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20001208 	.word	0x20001208
 80079ec:	200011d8 	.word	0x200011d8
 80079f0:	200011ec 	.word	0x200011ec
 80079f4:	20001200 	.word	0x20001200
 80079f8:	20001204 	.word	0x20001204
 80079fc:	200012b4 	.word	0x200012b4
 8007a00:	20001214 	.word	0x20001214
 8007a04:	080099a4 	.word	0x080099a4

08007a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3b04      	subs	r3, #4
 8007a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b04      	subs	r3, #4
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f023 0201 	bic.w	r2, r3, #1
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a38:	4a0c      	ldr	r2, [pc, #48]	; (8007a6c <pxPortInitialiseStack+0x64>)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3b14      	subs	r3, #20
 8007a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f06f 0202 	mvn.w	r2, #2
 8007a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3b20      	subs	r3, #32
 8007a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	08007a71 	.word	0x08007a71

08007a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <prvTaskExitError+0x5c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d00c      	beq.n	8007a9e <prvTaskExitError+0x2e>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	b672      	cpsid	i
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	b662      	cpsie	i
 8007a98:	60fb      	str	r3, [r7, #12]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <prvTaskExitError+0x2c>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	b672      	cpsid	i
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	b662      	cpsie	i
 8007ab2:	60bb      	str	r3, [r7, #8]
}
 8007ab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ab6:	bf00      	nop
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0fc      	beq.n	8007ab8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	20000040 	.word	0x20000040

08007ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <pxCurrentTCBConst2>)
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	6808      	ldr	r0, [r1, #0]
 8007ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ada:	f380 8809 	msr	PSP, r0
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8811 	msr	BASEPRI, r0
 8007aea:	4770      	bx	lr
 8007aec:	f3af 8000 	nop.w

08007af0 <pxCurrentTCBConst2>:
 8007af0:	20000ee0 	.word	0x20000ee0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007af8:	4808      	ldr	r0, [pc, #32]	; (8007b1c <prvPortStartFirstTask+0x24>)
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	6800      	ldr	r0, [r0, #0]
 8007afe:	f380 8808 	msr	MSP, r0
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8814 	msr	CONTROL, r0
 8007b0a:	b662      	cpsie	i
 8007b0c:	b661      	cpsie	f
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	df00      	svc	0
 8007b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b1a:	bf00      	nop
 8007b1c:	e000ed08 	.word	0xe000ed08

08007b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b26:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <xPortStartScheduler+0xe4>)
 8007b28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	22ff      	movs	r2, #255	; 0xff
 8007b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	; (8007c08 <xPortStartScheduler+0xe8>)
 8007b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <xPortStartScheduler+0xec>)
 8007b50:	2207      	movs	r2, #7
 8007b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b54:	e009      	b.n	8007b6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b56:	4b2d      	ldr	r3, [pc, #180]	; (8007c0c <xPortStartScheduler+0xec>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	4a2b      	ldr	r2, [pc, #172]	; (8007c0c <xPortStartScheduler+0xec>)
 8007b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d0ef      	beq.n	8007b56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b76:	4b25      	ldr	r3, [pc, #148]	; (8007c0c <xPortStartScheduler+0xec>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f1c3 0307 	rsb	r3, r3, #7
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d00c      	beq.n	8007b9c <xPortStartScheduler+0x7c>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	b672      	cpsid	i
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	b662      	cpsie	i
 8007b96:	60bb      	str	r3, [r7, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b9c:	4b1b      	ldr	r3, [pc, #108]	; (8007c0c <xPortStartScheduler+0xec>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	4a1a      	ldr	r2, [pc, #104]	; (8007c0c <xPortStartScheduler+0xec>)
 8007ba4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ba6:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <xPortStartScheduler+0xec>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bae:	4a17      	ldr	r2, [pc, #92]	; (8007c0c <xPortStartScheduler+0xec>)
 8007bb0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bba:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <xPortStartScheduler+0xf0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <xPortStartScheduler+0xf0>)
 8007bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bc6:	4b12      	ldr	r3, [pc, #72]	; (8007c10 <xPortStartScheduler+0xf0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a11      	ldr	r2, [pc, #68]	; (8007c10 <xPortStartScheduler+0xf0>)
 8007bcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bd0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bd2:	f000 f8dd 	bl	8007d90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <xPortStartScheduler+0xf4>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bdc:	f000 f8fc 	bl	8007dd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <xPortStartScheduler+0xf8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <xPortStartScheduler+0xf8>)
 8007be6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007bea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bec:	f7ff ff84 	bl	8007af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bf0:	f7fe ff4e 	bl	8006a90 <vTaskSwitchContext>
	prvTaskExitError();
 8007bf4:	f7ff ff3c 	bl	8007a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	e000e400 	.word	0xe000e400
 8007c08:	20001304 	.word	0x20001304
 8007c0c:	20001308 	.word	0x20001308
 8007c10:	e000ed20 	.word	0xe000ed20
 8007c14:	20000040 	.word	0x20000040
 8007c18:	e000ef34 	.word	0xe000ef34

08007c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	b672      	cpsid	i
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	b662      	cpsie	i
 8007c36:	607b      	str	r3, [r7, #4]
}
 8007c38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c3a:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <vPortEnterCritical+0x60>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	4a0e      	ldr	r2, [pc, #56]	; (8007c7c <vPortEnterCritical+0x60>)
 8007c42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c44:	4b0d      	ldr	r3, [pc, #52]	; (8007c7c <vPortEnterCritical+0x60>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d111      	bne.n	8007c70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c4c:	4b0c      	ldr	r3, [pc, #48]	; (8007c80 <vPortEnterCritical+0x64>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00c      	beq.n	8007c70 <vPortEnterCritical+0x54>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	b672      	cpsid	i
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	b662      	cpsie	i
 8007c6a:	603b      	str	r3, [r7, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <vPortEnterCritical+0x52>
	}
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	20000040 	.word	0x20000040
 8007c80:	e000ed04 	.word	0xe000ed04

08007c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <vPortExitCritical+0x54>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <vPortExitCritical+0x28>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	b672      	cpsid	i
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	b662      	cpsie	i
 8007ca6:	607b      	str	r3, [r7, #4]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <vPortExitCritical+0x54>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <vPortExitCritical+0x54>)
 8007cb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cb6:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <vPortExitCritical+0x54>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <vPortExitCritical+0x46>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	f383 8811 	msr	BASEPRI, r3
}
 8007cc8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cca:	bf00      	nop
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000040 	.word	0x20000040
 8007cdc:	00000000 	.word	0x00000000

08007ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ce0:	f3ef 8009 	mrs	r0, PSP
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <pxCurrentTCBConst>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f01e 0f10 	tst.w	lr, #16
 8007cf0:	bf08      	it	eq
 8007cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	6010      	str	r0, [r2, #0]
 8007cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d04:	b672      	cpsid	i
 8007d06:	f380 8811 	msr	BASEPRI, r0
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	b662      	cpsie	i
 8007d14:	f7fe febc 	bl	8006a90 <vTaskSwitchContext>
 8007d18:	f04f 0000 	mov.w	r0, #0
 8007d1c:	f380 8811 	msr	BASEPRI, r0
 8007d20:	bc09      	pop	{r0, r3}
 8007d22:	6819      	ldr	r1, [r3, #0]
 8007d24:	6808      	ldr	r0, [r1, #0]
 8007d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	f01e 0f10 	tst.w	lr, #16
 8007d2e:	bf08      	it	eq
 8007d30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d34:	f380 8809 	msr	PSP, r0
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop

08007d40 <pxCurrentTCBConst>:
 8007d40:	20000ee0 	.word	0x20000ee0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop

08007d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	b672      	cpsid	i
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	b662      	cpsie	i
 8007d62:	607b      	str	r3, [r7, #4]
}
 8007d64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d66:	f7fe fdd7 	bl	8006918 <xTaskIncrementTick>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <xPortSysTickHandler+0x44>)
 8007d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f383 8811 	msr	BASEPRI, r3
}
 8007d82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <vPortSetupTimerInterrupt+0x34>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d9a:	4b0b      	ldr	r3, [pc, #44]	; (8007dc8 <vPortSetupTimerInterrupt+0x38>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <vPortSetupTimerInterrupt+0x3c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a0a      	ldr	r2, [pc, #40]	; (8007dd0 <vPortSetupTimerInterrupt+0x40>)
 8007da6:	fba2 2303 	umull	r2, r3, r2, r3
 8007daa:	099b      	lsrs	r3, r3, #6
 8007dac:	4a09      	ldr	r2, [pc, #36]	; (8007dd4 <vPortSetupTimerInterrupt+0x44>)
 8007dae:	3b01      	subs	r3, #1
 8007db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007db2:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <vPortSetupTimerInterrupt+0x34>)
 8007db4:	2207      	movs	r2, #7
 8007db6:	601a      	str	r2, [r3, #0]
}
 8007db8:	bf00      	nop
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	e000e010 	.word	0xe000e010
 8007dc8:	e000e018 	.word	0xe000e018
 8007dcc:	20000034 	.word	0x20000034
 8007dd0:	10624dd3 	.word	0x10624dd3
 8007dd4:	e000e014 	.word	0xe000e014

08007dd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007dd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007de8 <vPortEnableVFP+0x10>
 8007ddc:	6801      	ldr	r1, [r0, #0]
 8007dde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007de2:	6001      	str	r1, [r0, #0]
 8007de4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007de6:	bf00      	nop
 8007de8:	e000ed88 	.word	0xe000ed88

08007dec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007df2:	f3ef 8305 	mrs	r3, IPSR
 8007df6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b0f      	cmp	r3, #15
 8007dfc:	d916      	bls.n	8007e2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dfe:	4a19      	ldr	r2, [pc, #100]	; (8007e64 <vPortValidateInterruptPriority+0x78>)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e08:	4b17      	ldr	r3, [pc, #92]	; (8007e68 <vPortValidateInterruptPriority+0x7c>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	7afa      	ldrb	r2, [r7, #11]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d20c      	bcs.n	8007e2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	b672      	cpsid	i
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	b662      	cpsie	i
 8007e26:	607b      	str	r3, [r7, #4]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e2c:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <vPortValidateInterruptPriority+0x80>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e34:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <vPortValidateInterruptPriority+0x84>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d90c      	bls.n	8007e56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	b672      	cpsid	i
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	b662      	cpsie	i
 8007e50:	603b      	str	r3, [r7, #0]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <vPortValidateInterruptPriority+0x68>
	}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	e000e3f0 	.word	0xe000e3f0
 8007e68:	20001304 	.word	0x20001304
 8007e6c:	e000ed0c 	.word	0xe000ed0c
 8007e70:	20001308 	.word	0x20001308

08007e74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08a      	sub	sp, #40	; 0x28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e80:	f7fe fc8c 	bl	800679c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e84:	4b5b      	ldr	r3, [pc, #364]	; (8007ff4 <pvPortMalloc+0x180>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e8c:	f000 f91a 	bl	80080c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e90:	4b59      	ldr	r3, [pc, #356]	; (8007ff8 <pvPortMalloc+0x184>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4013      	ands	r3, r2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 8092 	bne.w	8007fc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01f      	beq.n	8007ee4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f003 0307 	and.w	r3, r3, #7
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d016      	beq.n	8007ee4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f023 0307 	bic.w	r3, r3, #7
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <pvPortMalloc+0x70>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	b672      	cpsid	i
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	b662      	cpsie	i
 8007ede:	617b      	str	r3, [r7, #20]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d06b      	beq.n	8007fc2 <pvPortMalloc+0x14e>
 8007eea:	4b44      	ldr	r3, [pc, #272]	; (8007ffc <pvPortMalloc+0x188>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d866      	bhi.n	8007fc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ef4:	4b42      	ldr	r3, [pc, #264]	; (8008000 <pvPortMalloc+0x18c>)
 8007ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ef8:	4b41      	ldr	r3, [pc, #260]	; (8008000 <pvPortMalloc+0x18c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007efe:	e004      	b.n	8007f0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d903      	bls.n	8007f1c <pvPortMalloc+0xa8>
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f1      	bne.n	8007f00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f1c:	4b35      	ldr	r3, [pc, #212]	; (8007ff4 <pvPortMalloc+0x180>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d04d      	beq.n	8007fc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	2308      	movs	r3, #8
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d921      	bls.n	8007f8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <pvPortMalloc+0x100>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	b672      	cpsid	i
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	b662      	cpsie	i
 8007f6e:	613b      	str	r3, [r7, #16]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f86:	69b8      	ldr	r0, [r7, #24]
 8007f88:	f000 f8fe 	bl	8008188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f8c:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <pvPortMalloc+0x188>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	4a19      	ldr	r2, [pc, #100]	; (8007ffc <pvPortMalloc+0x188>)
 8007f98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f9a:	4b18      	ldr	r3, [pc, #96]	; (8007ffc <pvPortMalloc+0x188>)
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b19      	ldr	r3, [pc, #100]	; (8008004 <pvPortMalloc+0x190>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d203      	bcs.n	8007fae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fa6:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <pvPortMalloc+0x188>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a16      	ldr	r2, [pc, #88]	; (8008004 <pvPortMalloc+0x190>)
 8007fac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <pvPortMalloc+0x184>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fc2:	f7fe fbf9 	bl	80067b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00c      	beq.n	8007fea <pvPortMalloc+0x176>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	b672      	cpsid	i
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	b662      	cpsie	i
 8007fe4:	60fb      	str	r3, [r7, #12]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <pvPortMalloc+0x174>
	return pvReturn;
 8007fea:	69fb      	ldr	r3, [r7, #28]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3728      	adds	r7, #40	; 0x28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20006314 	.word	0x20006314
 8007ff8:	20006320 	.word	0x20006320
 8007ffc:	20006318 	.word	0x20006318
 8008000:	2000630c 	.word	0x2000630c
 8008004:	2000631c 	.word	0x2000631c

08008008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d04c      	beq.n	80080b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800801a:	2308      	movs	r3, #8
 800801c:	425b      	negs	r3, r3
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4413      	add	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	4b23      	ldr	r3, [pc, #140]	; (80080bc <vPortFree+0xb4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10c      	bne.n	8008050 <vPortFree+0x48>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	b672      	cpsid	i
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	b662      	cpsie	i
 800804a:	60fb      	str	r3, [r7, #12]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00c      	beq.n	8008072 <vPortFree+0x6a>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	b672      	cpsid	i
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	b662      	cpsie	i
 800806c:	60bb      	str	r3, [r7, #8]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	4b11      	ldr	r3, [pc, #68]	; (80080bc <vPortFree+0xb4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4013      	ands	r3, r2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d019      	beq.n	80080b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d115      	bne.n	80080b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <vPortFree+0xb4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	43db      	mvns	r3, r3
 8008092:	401a      	ands	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008098:	f7fe fb80 	bl	800679c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <vPortFree+0xb8>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4413      	add	r3, r2
 80080a6:	4a06      	ldr	r2, [pc, #24]	; (80080c0 <vPortFree+0xb8>)
 80080a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080aa:	6938      	ldr	r0, [r7, #16]
 80080ac:	f000 f86c 	bl	8008188 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080b0:	f7fe fb82 	bl	80067b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080b4:	bf00      	nop
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20006320 	.word	0x20006320
 80080c0:	20006318 	.word	0x20006318

080080c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80080ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <prvHeapInit+0xac>)
 80080d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00c      	beq.n	80080f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3307      	adds	r3, #7
 80080e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <prvHeapInit+0xac>)
 80080f4:	4413      	add	r3, r2
 80080f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <prvHeapInit+0xb0>)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008102:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <prvHeapInit+0xb0>)
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008110:	2208      	movs	r2, #8
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a15      	ldr	r2, [pc, #84]	; (8008178 <prvHeapInit+0xb4>)
 8008124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008126:	4b14      	ldr	r3, [pc, #80]	; (8008178 <prvHeapInit+0xb4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800812e:	4b12      	ldr	r3, [pc, #72]	; (8008178 <prvHeapInit+0xb4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <prvHeapInit+0xb4>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	4a0a      	ldr	r2, [pc, #40]	; (800817c <prvHeapInit+0xb8>)
 8008152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	4a09      	ldr	r2, [pc, #36]	; (8008180 <prvHeapInit+0xbc>)
 800815a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800815c:	4b09      	ldr	r3, [pc, #36]	; (8008184 <prvHeapInit+0xc0>)
 800815e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008162:	601a      	str	r2, [r3, #0]
}
 8008164:	bf00      	nop
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	2000130c 	.word	0x2000130c
 8008174:	2000630c 	.word	0x2000630c
 8008178:	20006314 	.word	0x20006314
 800817c:	2000631c 	.word	0x2000631c
 8008180:	20006318 	.word	0x20006318
 8008184:	20006320 	.word	0x20006320

08008188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <prvInsertBlockIntoFreeList+0xac>)
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	e002      	b.n	800819c <prvInsertBlockIntoFreeList+0x14>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d8f7      	bhi.n	8008196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d108      	bne.n	80081ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	441a      	add	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d118      	bne.n	8008210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <prvInsertBlockIntoFreeList+0xb0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d00d      	beq.n	8008206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	441a      	add	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e008      	b.n	8008218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008206:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <prvInsertBlockIntoFreeList+0xb0>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e003      	b.n	8008218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d002      	beq.n	8008226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	2000630c 	.word	0x2000630c
 8008238:	20006314 	.word	0x20006314

0800823c <rand>:
 800823c:	4b16      	ldr	r3, [pc, #88]	; (8008298 <rand+0x5c>)
 800823e:	b510      	push	{r4, lr}
 8008240:	681c      	ldr	r4, [r3, #0]
 8008242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008244:	b9b3      	cbnz	r3, 8008274 <rand+0x38>
 8008246:	2018      	movs	r0, #24
 8008248:	f000 fb32 	bl	80088b0 <malloc>
 800824c:	4602      	mov	r2, r0
 800824e:	6320      	str	r0, [r4, #48]	; 0x30
 8008250:	b920      	cbnz	r0, 800825c <rand+0x20>
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <rand+0x60>)
 8008254:	4812      	ldr	r0, [pc, #72]	; (80082a0 <rand+0x64>)
 8008256:	2152      	movs	r1, #82	; 0x52
 8008258:	f000 fac0 	bl	80087dc <__assert_func>
 800825c:	4911      	ldr	r1, [pc, #68]	; (80082a4 <rand+0x68>)
 800825e:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <rand+0x6c>)
 8008260:	e9c0 1300 	strd	r1, r3, [r0]
 8008264:	4b11      	ldr	r3, [pc, #68]	; (80082ac <rand+0x70>)
 8008266:	6083      	str	r3, [r0, #8]
 8008268:	230b      	movs	r3, #11
 800826a:	8183      	strh	r3, [r0, #12]
 800826c:	2100      	movs	r1, #0
 800826e:	2001      	movs	r0, #1
 8008270:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008274:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008276:	480e      	ldr	r0, [pc, #56]	; (80082b0 <rand+0x74>)
 8008278:	690b      	ldr	r3, [r1, #16]
 800827a:	694c      	ldr	r4, [r1, #20]
 800827c:	4a0d      	ldr	r2, [pc, #52]	; (80082b4 <rand+0x78>)
 800827e:	4358      	muls	r0, r3
 8008280:	fb02 0004 	mla	r0, r2, r4, r0
 8008284:	fba3 3202 	umull	r3, r2, r3, r2
 8008288:	3301      	adds	r3, #1
 800828a:	eb40 0002 	adc.w	r0, r0, r2
 800828e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008292:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008296:	bd10      	pop	{r4, pc}
 8008298:	2000009c 	.word	0x2000009c
 800829c:	080099c4 	.word	0x080099c4
 80082a0:	080099db 	.word	0x080099db
 80082a4:	abcd330e 	.word	0xabcd330e
 80082a8:	e66d1234 	.word	0xe66d1234
 80082ac:	0005deec 	.word	0x0005deec
 80082b0:	5851f42d 	.word	0x5851f42d
 80082b4:	4c957f2d 	.word	0x4c957f2d

080082b8 <std>:
 80082b8:	2300      	movs	r3, #0
 80082ba:	b510      	push	{r4, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	e9c0 3300 	strd	r3, r3, [r0]
 80082c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082c6:	6083      	str	r3, [r0, #8]
 80082c8:	8181      	strh	r1, [r0, #12]
 80082ca:	6643      	str	r3, [r0, #100]	; 0x64
 80082cc:	81c2      	strh	r2, [r0, #14]
 80082ce:	6183      	str	r3, [r0, #24]
 80082d0:	4619      	mov	r1, r3
 80082d2:	2208      	movs	r2, #8
 80082d4:	305c      	adds	r0, #92	; 0x5c
 80082d6:	f000 f9f7 	bl	80086c8 <memset>
 80082da:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <std+0x58>)
 80082dc:	6263      	str	r3, [r4, #36]	; 0x24
 80082de:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <std+0x5c>)
 80082e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80082e2:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <std+0x60>)
 80082e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082e6:	4b0d      	ldr	r3, [pc, #52]	; (800831c <std+0x64>)
 80082e8:	6323      	str	r3, [r4, #48]	; 0x30
 80082ea:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <std+0x68>)
 80082ec:	6224      	str	r4, [r4, #32]
 80082ee:	429c      	cmp	r4, r3
 80082f0:	d006      	beq.n	8008300 <std+0x48>
 80082f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80082f6:	4294      	cmp	r4, r2
 80082f8:	d002      	beq.n	8008300 <std+0x48>
 80082fa:	33d0      	adds	r3, #208	; 0xd0
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d105      	bne.n	800830c <std+0x54>
 8008300:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008308:	f000 ba56 	b.w	80087b8 <__retarget_lock_init_recursive>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	08008519 	.word	0x08008519
 8008314:	0800853b 	.word	0x0800853b
 8008318:	08008573 	.word	0x08008573
 800831c:	08008597 	.word	0x08008597
 8008320:	20006324 	.word	0x20006324

08008324 <stdio_exit_handler>:
 8008324:	4a02      	ldr	r2, [pc, #8]	; (8008330 <stdio_exit_handler+0xc>)
 8008326:	4903      	ldr	r1, [pc, #12]	; (8008334 <stdio_exit_handler+0x10>)
 8008328:	4803      	ldr	r0, [pc, #12]	; (8008338 <stdio_exit_handler+0x14>)
 800832a:	f000 b869 	b.w	8008400 <_fwalk_sglue>
 800832e:	bf00      	nop
 8008330:	20000044 	.word	0x20000044
 8008334:	080090cd 	.word	0x080090cd
 8008338:	20000050 	.word	0x20000050

0800833c <cleanup_stdio>:
 800833c:	6841      	ldr	r1, [r0, #4]
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <cleanup_stdio+0x34>)
 8008340:	4299      	cmp	r1, r3
 8008342:	b510      	push	{r4, lr}
 8008344:	4604      	mov	r4, r0
 8008346:	d001      	beq.n	800834c <cleanup_stdio+0x10>
 8008348:	f000 fec0 	bl	80090cc <_fflush_r>
 800834c:	68a1      	ldr	r1, [r4, #8]
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <cleanup_stdio+0x38>)
 8008350:	4299      	cmp	r1, r3
 8008352:	d002      	beq.n	800835a <cleanup_stdio+0x1e>
 8008354:	4620      	mov	r0, r4
 8008356:	f000 feb9 	bl	80090cc <_fflush_r>
 800835a:	68e1      	ldr	r1, [r4, #12]
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <cleanup_stdio+0x3c>)
 800835e:	4299      	cmp	r1, r3
 8008360:	d004      	beq.n	800836c <cleanup_stdio+0x30>
 8008362:	4620      	mov	r0, r4
 8008364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008368:	f000 beb0 	b.w	80090cc <_fflush_r>
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	20006324 	.word	0x20006324
 8008374:	2000638c 	.word	0x2000638c
 8008378:	200063f4 	.word	0x200063f4

0800837c <global_stdio_init.part.0>:
 800837c:	b510      	push	{r4, lr}
 800837e:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <global_stdio_init.part.0+0x30>)
 8008380:	4c0b      	ldr	r4, [pc, #44]	; (80083b0 <global_stdio_init.part.0+0x34>)
 8008382:	4a0c      	ldr	r2, [pc, #48]	; (80083b4 <global_stdio_init.part.0+0x38>)
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	4620      	mov	r0, r4
 8008388:	2200      	movs	r2, #0
 800838a:	2104      	movs	r1, #4
 800838c:	f7ff ff94 	bl	80082b8 <std>
 8008390:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008394:	2201      	movs	r2, #1
 8008396:	2109      	movs	r1, #9
 8008398:	f7ff ff8e 	bl	80082b8 <std>
 800839c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80083a0:	2202      	movs	r2, #2
 80083a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a6:	2112      	movs	r1, #18
 80083a8:	f7ff bf86 	b.w	80082b8 <std>
 80083ac:	2000645c 	.word	0x2000645c
 80083b0:	20006324 	.word	0x20006324
 80083b4:	08008325 	.word	0x08008325

080083b8 <__sfp_lock_acquire>:
 80083b8:	4801      	ldr	r0, [pc, #4]	; (80083c0 <__sfp_lock_acquire+0x8>)
 80083ba:	f000 b9fe 	b.w	80087ba <__retarget_lock_acquire_recursive>
 80083be:	bf00      	nop
 80083c0:	20006465 	.word	0x20006465

080083c4 <__sfp_lock_release>:
 80083c4:	4801      	ldr	r0, [pc, #4]	; (80083cc <__sfp_lock_release+0x8>)
 80083c6:	f000 b9f9 	b.w	80087bc <__retarget_lock_release_recursive>
 80083ca:	bf00      	nop
 80083cc:	20006465 	.word	0x20006465

080083d0 <__sinit>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	4604      	mov	r4, r0
 80083d4:	f7ff fff0 	bl	80083b8 <__sfp_lock_acquire>
 80083d8:	6a23      	ldr	r3, [r4, #32]
 80083da:	b11b      	cbz	r3, 80083e4 <__sinit+0x14>
 80083dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e0:	f7ff bff0 	b.w	80083c4 <__sfp_lock_release>
 80083e4:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <__sinit+0x28>)
 80083e6:	6223      	str	r3, [r4, #32]
 80083e8:	4b04      	ldr	r3, [pc, #16]	; (80083fc <__sinit+0x2c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1f5      	bne.n	80083dc <__sinit+0xc>
 80083f0:	f7ff ffc4 	bl	800837c <global_stdio_init.part.0>
 80083f4:	e7f2      	b.n	80083dc <__sinit+0xc>
 80083f6:	bf00      	nop
 80083f8:	0800833d 	.word	0x0800833d
 80083fc:	2000645c 	.word	0x2000645c

08008400 <_fwalk_sglue>:
 8008400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008404:	4607      	mov	r7, r0
 8008406:	4688      	mov	r8, r1
 8008408:	4614      	mov	r4, r2
 800840a:	2600      	movs	r6, #0
 800840c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008410:	f1b9 0901 	subs.w	r9, r9, #1
 8008414:	d505      	bpl.n	8008422 <_fwalk_sglue+0x22>
 8008416:	6824      	ldr	r4, [r4, #0]
 8008418:	2c00      	cmp	r4, #0
 800841a:	d1f7      	bne.n	800840c <_fwalk_sglue+0xc>
 800841c:	4630      	mov	r0, r6
 800841e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d907      	bls.n	8008438 <_fwalk_sglue+0x38>
 8008428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800842c:	3301      	adds	r3, #1
 800842e:	d003      	beq.n	8008438 <_fwalk_sglue+0x38>
 8008430:	4629      	mov	r1, r5
 8008432:	4638      	mov	r0, r7
 8008434:	47c0      	blx	r8
 8008436:	4306      	orrs	r6, r0
 8008438:	3568      	adds	r5, #104	; 0x68
 800843a:	e7e9      	b.n	8008410 <_fwalk_sglue+0x10>

0800843c <iprintf>:
 800843c:	b40f      	push	{r0, r1, r2, r3}
 800843e:	b507      	push	{r0, r1, r2, lr}
 8008440:	4906      	ldr	r1, [pc, #24]	; (800845c <iprintf+0x20>)
 8008442:	ab04      	add	r3, sp, #16
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	f853 2b04 	ldr.w	r2, [r3], #4
 800844a:	6881      	ldr	r1, [r0, #8]
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	f000 fb0d 	bl	8008a6c <_vfiprintf_r>
 8008452:	b003      	add	sp, #12
 8008454:	f85d eb04 	ldr.w	lr, [sp], #4
 8008458:	b004      	add	sp, #16
 800845a:	4770      	bx	lr
 800845c:	2000009c 	.word	0x2000009c

08008460 <_puts_r>:
 8008460:	6a03      	ldr	r3, [r0, #32]
 8008462:	b570      	push	{r4, r5, r6, lr}
 8008464:	6884      	ldr	r4, [r0, #8]
 8008466:	4605      	mov	r5, r0
 8008468:	460e      	mov	r6, r1
 800846a:	b90b      	cbnz	r3, 8008470 <_puts_r+0x10>
 800846c:	f7ff ffb0 	bl	80083d0 <__sinit>
 8008470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008472:	07db      	lsls	r3, r3, #31
 8008474:	d405      	bmi.n	8008482 <_puts_r+0x22>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	0598      	lsls	r0, r3, #22
 800847a:	d402      	bmi.n	8008482 <_puts_r+0x22>
 800847c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800847e:	f000 f99c 	bl	80087ba <__retarget_lock_acquire_recursive>
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	0719      	lsls	r1, r3, #28
 8008486:	d513      	bpl.n	80084b0 <_puts_r+0x50>
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	b18b      	cbz	r3, 80084b0 <_puts_r+0x50>
 800848c:	3e01      	subs	r6, #1
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008494:	3b01      	subs	r3, #1
 8008496:	60a3      	str	r3, [r4, #8]
 8008498:	b9e9      	cbnz	r1, 80084d6 <_puts_r+0x76>
 800849a:	2b00      	cmp	r3, #0
 800849c:	da2e      	bge.n	80084fc <_puts_r+0x9c>
 800849e:	4622      	mov	r2, r4
 80084a0:	210a      	movs	r1, #10
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 f87b 	bl	800859e <__swbuf_r>
 80084a8:	3001      	adds	r0, #1
 80084aa:	d007      	beq.n	80084bc <_puts_r+0x5c>
 80084ac:	250a      	movs	r5, #10
 80084ae:	e007      	b.n	80084c0 <_puts_r+0x60>
 80084b0:	4621      	mov	r1, r4
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 f8b0 	bl	8008618 <__swsetup_r>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d0e7      	beq.n	800848c <_puts_r+0x2c>
 80084bc:	f04f 35ff 	mov.w	r5, #4294967295
 80084c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084c2:	07da      	lsls	r2, r3, #31
 80084c4:	d405      	bmi.n	80084d2 <_puts_r+0x72>
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	059b      	lsls	r3, r3, #22
 80084ca:	d402      	bmi.n	80084d2 <_puts_r+0x72>
 80084cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ce:	f000 f975 	bl	80087bc <__retarget_lock_release_recursive>
 80084d2:	4628      	mov	r0, r5
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da04      	bge.n	80084e4 <_puts_r+0x84>
 80084da:	69a2      	ldr	r2, [r4, #24]
 80084dc:	429a      	cmp	r2, r3
 80084de:	dc06      	bgt.n	80084ee <_puts_r+0x8e>
 80084e0:	290a      	cmp	r1, #10
 80084e2:	d004      	beq.n	80084ee <_puts_r+0x8e>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	6022      	str	r2, [r4, #0]
 80084ea:	7019      	strb	r1, [r3, #0]
 80084ec:	e7cf      	b.n	800848e <_puts_r+0x2e>
 80084ee:	4622      	mov	r2, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 f854 	bl	800859e <__swbuf_r>
 80084f6:	3001      	adds	r0, #1
 80084f8:	d1c9      	bne.n	800848e <_puts_r+0x2e>
 80084fa:	e7df      	b.n	80084bc <_puts_r+0x5c>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	250a      	movs	r5, #10
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	701d      	strb	r5, [r3, #0]
 8008506:	e7db      	b.n	80084c0 <_puts_r+0x60>

08008508 <puts>:
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <puts+0xc>)
 800850a:	4601      	mov	r1, r0
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	f7ff bfa7 	b.w	8008460 <_puts_r>
 8008512:	bf00      	nop
 8008514:	2000009c 	.word	0x2000009c

08008518 <__sread>:
 8008518:	b510      	push	{r4, lr}
 800851a:	460c      	mov	r4, r1
 800851c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008520:	f000 f8fc 	bl	800871c <_read_r>
 8008524:	2800      	cmp	r0, #0
 8008526:	bfab      	itete	ge
 8008528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800852a:	89a3      	ldrhlt	r3, [r4, #12]
 800852c:	181b      	addge	r3, r3, r0
 800852e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008532:	bfac      	ite	ge
 8008534:	6563      	strge	r3, [r4, #84]	; 0x54
 8008536:	81a3      	strhlt	r3, [r4, #12]
 8008538:	bd10      	pop	{r4, pc}

0800853a <__swrite>:
 800853a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853e:	461f      	mov	r7, r3
 8008540:	898b      	ldrh	r3, [r1, #12]
 8008542:	05db      	lsls	r3, r3, #23
 8008544:	4605      	mov	r5, r0
 8008546:	460c      	mov	r4, r1
 8008548:	4616      	mov	r6, r2
 800854a:	d505      	bpl.n	8008558 <__swrite+0x1e>
 800854c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008550:	2302      	movs	r3, #2
 8008552:	2200      	movs	r2, #0
 8008554:	f000 f8d0 	bl	80086f8 <_lseek_r>
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800855e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	4632      	mov	r2, r6
 8008566:	463b      	mov	r3, r7
 8008568:	4628      	mov	r0, r5
 800856a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800856e:	f000 b8e7 	b.w	8008740 <_write_r>

08008572 <__sseek>:
 8008572:	b510      	push	{r4, lr}
 8008574:	460c      	mov	r4, r1
 8008576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857a:	f000 f8bd 	bl	80086f8 <_lseek_r>
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	bf15      	itete	ne
 8008584:	6560      	strne	r0, [r4, #84]	; 0x54
 8008586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800858a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800858e:	81a3      	strheq	r3, [r4, #12]
 8008590:	bf18      	it	ne
 8008592:	81a3      	strhne	r3, [r4, #12]
 8008594:	bd10      	pop	{r4, pc}

08008596 <__sclose>:
 8008596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859a:	f000 b89d 	b.w	80086d8 <_close_r>

0800859e <__swbuf_r>:
 800859e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a0:	460e      	mov	r6, r1
 80085a2:	4614      	mov	r4, r2
 80085a4:	4605      	mov	r5, r0
 80085a6:	b118      	cbz	r0, 80085b0 <__swbuf_r+0x12>
 80085a8:	6a03      	ldr	r3, [r0, #32]
 80085aa:	b90b      	cbnz	r3, 80085b0 <__swbuf_r+0x12>
 80085ac:	f7ff ff10 	bl	80083d0 <__sinit>
 80085b0:	69a3      	ldr	r3, [r4, #24]
 80085b2:	60a3      	str	r3, [r4, #8]
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	071a      	lsls	r2, r3, #28
 80085b8:	d525      	bpl.n	8008606 <__swbuf_r+0x68>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	b31b      	cbz	r3, 8008606 <__swbuf_r+0x68>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	6922      	ldr	r2, [r4, #16]
 80085c2:	1a98      	subs	r0, r3, r2
 80085c4:	6963      	ldr	r3, [r4, #20]
 80085c6:	b2f6      	uxtb	r6, r6
 80085c8:	4283      	cmp	r3, r0
 80085ca:	4637      	mov	r7, r6
 80085cc:	dc04      	bgt.n	80085d8 <__swbuf_r+0x3a>
 80085ce:	4621      	mov	r1, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 fd7b 	bl	80090cc <_fflush_r>
 80085d6:	b9e0      	cbnz	r0, 8008612 <__swbuf_r+0x74>
 80085d8:	68a3      	ldr	r3, [r4, #8]
 80085da:	3b01      	subs	r3, #1
 80085dc:	60a3      	str	r3, [r4, #8]
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	701e      	strb	r6, [r3, #0]
 80085e6:	6962      	ldr	r2, [r4, #20]
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d004      	beq.n	80085f8 <__swbuf_r+0x5a>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	07db      	lsls	r3, r3, #31
 80085f2:	d506      	bpl.n	8008602 <__swbuf_r+0x64>
 80085f4:	2e0a      	cmp	r6, #10
 80085f6:	d104      	bne.n	8008602 <__swbuf_r+0x64>
 80085f8:	4621      	mov	r1, r4
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 fd66 	bl	80090cc <_fflush_r>
 8008600:	b938      	cbnz	r0, 8008612 <__swbuf_r+0x74>
 8008602:	4638      	mov	r0, r7
 8008604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 f805 	bl	8008618 <__swsetup_r>
 800860e:	2800      	cmp	r0, #0
 8008610:	d0d5      	beq.n	80085be <__swbuf_r+0x20>
 8008612:	f04f 37ff 	mov.w	r7, #4294967295
 8008616:	e7f4      	b.n	8008602 <__swbuf_r+0x64>

08008618 <__swsetup_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4b2a      	ldr	r3, [pc, #168]	; (80086c4 <__swsetup_r+0xac>)
 800861c:	4605      	mov	r5, r0
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	460c      	mov	r4, r1
 8008622:	b118      	cbz	r0, 800862c <__swsetup_r+0x14>
 8008624:	6a03      	ldr	r3, [r0, #32]
 8008626:	b90b      	cbnz	r3, 800862c <__swsetup_r+0x14>
 8008628:	f7ff fed2 	bl	80083d0 <__sinit>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008632:	0718      	lsls	r0, r3, #28
 8008634:	d422      	bmi.n	800867c <__swsetup_r+0x64>
 8008636:	06d9      	lsls	r1, r3, #27
 8008638:	d407      	bmi.n	800864a <__swsetup_r+0x32>
 800863a:	2309      	movs	r3, #9
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	e034      	b.n	80086b4 <__swsetup_r+0x9c>
 800864a:	0758      	lsls	r0, r3, #29
 800864c:	d512      	bpl.n	8008674 <__swsetup_r+0x5c>
 800864e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008650:	b141      	cbz	r1, 8008664 <__swsetup_r+0x4c>
 8008652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008656:	4299      	cmp	r1, r3
 8008658:	d002      	beq.n	8008660 <__swsetup_r+0x48>
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f8dc 	bl	8008818 <_free_r>
 8008660:	2300      	movs	r3, #0
 8008662:	6363      	str	r3, [r4, #52]	; 0x34
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	2300      	movs	r3, #0
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	f043 0308 	orr.w	r3, r3, #8
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	b94b      	cbnz	r3, 8008694 <__swsetup_r+0x7c>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800868a:	d003      	beq.n	8008694 <__swsetup_r+0x7c>
 800868c:	4621      	mov	r1, r4
 800868e:	4628      	mov	r0, r5
 8008690:	f000 fd7c 	bl	800918c <__smakebuf_r>
 8008694:	89a0      	ldrh	r0, [r4, #12]
 8008696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800869a:	f010 0301 	ands.w	r3, r0, #1
 800869e:	d00a      	beq.n	80086b6 <__swsetup_r+0x9e>
 80086a0:	2300      	movs	r3, #0
 80086a2:	60a3      	str	r3, [r4, #8]
 80086a4:	6963      	ldr	r3, [r4, #20]
 80086a6:	425b      	negs	r3, r3
 80086a8:	61a3      	str	r3, [r4, #24]
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	b943      	cbnz	r3, 80086c0 <__swsetup_r+0xa8>
 80086ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086b2:	d1c4      	bne.n	800863e <__swsetup_r+0x26>
 80086b4:	bd38      	pop	{r3, r4, r5, pc}
 80086b6:	0781      	lsls	r1, r0, #30
 80086b8:	bf58      	it	pl
 80086ba:	6963      	ldrpl	r3, [r4, #20]
 80086bc:	60a3      	str	r3, [r4, #8]
 80086be:	e7f4      	b.n	80086aa <__swsetup_r+0x92>
 80086c0:	2000      	movs	r0, #0
 80086c2:	e7f7      	b.n	80086b4 <__swsetup_r+0x9c>
 80086c4:	2000009c 	.word	0x2000009c

080086c8 <memset>:
 80086c8:	4402      	add	r2, r0
 80086ca:	4603      	mov	r3, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d100      	bne.n	80086d2 <memset+0xa>
 80086d0:	4770      	bx	lr
 80086d2:	f803 1b01 	strb.w	r1, [r3], #1
 80086d6:	e7f9      	b.n	80086cc <memset+0x4>

080086d8 <_close_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	; (80086f4 <_close_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f9 f803 	bl	80016ee <_close>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_close_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_close_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20006460 	.word	0x20006460

080086f8 <_lseek_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d07      	ldr	r5, [pc, #28]	; (8008718 <_lseek_r+0x20>)
 80086fc:	4604      	mov	r4, r0
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	2200      	movs	r2, #0
 8008704:	602a      	str	r2, [r5, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	f7f9 f818 	bl	800173c <_lseek>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_lseek_r+0x1e>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_lseek_r+0x1e>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	20006460 	.word	0x20006460

0800871c <_read_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4d07      	ldr	r5, [pc, #28]	; (800873c <_read_r+0x20>)
 8008720:	4604      	mov	r4, r0
 8008722:	4608      	mov	r0, r1
 8008724:	4611      	mov	r1, r2
 8008726:	2200      	movs	r2, #0
 8008728:	602a      	str	r2, [r5, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	f7f8 ffa6 	bl	800167c <_read>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_read_r+0x1e>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_read_r+0x1e>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20006460 	.word	0x20006460

08008740 <_write_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	; (8008760 <_write_r+0x20>)
 8008744:	4604      	mov	r4, r0
 8008746:	4608      	mov	r0, r1
 8008748:	4611      	mov	r1, r2
 800874a:	2200      	movs	r2, #0
 800874c:	602a      	str	r2, [r5, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	f7f8 ffb1 	bl	80016b6 <_write>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_write_r+0x1e>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_write_r+0x1e>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	20006460 	.word	0x20006460

08008764 <__errno>:
 8008764:	4b01      	ldr	r3, [pc, #4]	; (800876c <__errno+0x8>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	2000009c 	.word	0x2000009c

08008770 <__libc_init_array>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4d0d      	ldr	r5, [pc, #52]	; (80087a8 <__libc_init_array+0x38>)
 8008774:	4c0d      	ldr	r4, [pc, #52]	; (80087ac <__libc_init_array+0x3c>)
 8008776:	1b64      	subs	r4, r4, r5
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	2600      	movs	r6, #0
 800877c:	42a6      	cmp	r6, r4
 800877e:	d109      	bne.n	8008794 <__libc_init_array+0x24>
 8008780:	4d0b      	ldr	r5, [pc, #44]	; (80087b0 <__libc_init_array+0x40>)
 8008782:	4c0c      	ldr	r4, [pc, #48]	; (80087b4 <__libc_init_array+0x44>)
 8008784:	f000 fdbc 	bl	8009300 <_init>
 8008788:	1b64      	subs	r4, r4, r5
 800878a:	10a4      	asrs	r4, r4, #2
 800878c:	2600      	movs	r6, #0
 800878e:	42a6      	cmp	r6, r4
 8008790:	d105      	bne.n	800879e <__libc_init_array+0x2e>
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	f855 3b04 	ldr.w	r3, [r5], #4
 8008798:	4798      	blx	r3
 800879a:	3601      	adds	r6, #1
 800879c:	e7ee      	b.n	800877c <__libc_init_array+0xc>
 800879e:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a2:	4798      	blx	r3
 80087a4:	3601      	adds	r6, #1
 80087a6:	e7f2      	b.n	800878e <__libc_init_array+0x1e>
 80087a8:	08009aac 	.word	0x08009aac
 80087ac:	08009aac 	.word	0x08009aac
 80087b0:	08009aac 	.word	0x08009aac
 80087b4:	08009ab0 	.word	0x08009ab0

080087b8 <__retarget_lock_init_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_acquire_recursive>:
 80087ba:	4770      	bx	lr

080087bc <__retarget_lock_release_recursive>:
 80087bc:	4770      	bx	lr

080087be <memcpy>:
 80087be:	440a      	add	r2, r1
 80087c0:	4291      	cmp	r1, r2
 80087c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c6:	d100      	bne.n	80087ca <memcpy+0xc>
 80087c8:	4770      	bx	lr
 80087ca:	b510      	push	{r4, lr}
 80087cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d4:	4291      	cmp	r1, r2
 80087d6:	d1f9      	bne.n	80087cc <memcpy+0xe>
 80087d8:	bd10      	pop	{r4, pc}
	...

080087dc <__assert_func>:
 80087dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087de:	4614      	mov	r4, r2
 80087e0:	461a      	mov	r2, r3
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <__assert_func+0x2c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4605      	mov	r5, r0
 80087e8:	68d8      	ldr	r0, [r3, #12]
 80087ea:	b14c      	cbz	r4, 8008800 <__assert_func+0x24>
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <__assert_func+0x30>)
 80087ee:	9100      	str	r1, [sp, #0]
 80087f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087f4:	4906      	ldr	r1, [pc, #24]	; (8008810 <__assert_func+0x34>)
 80087f6:	462b      	mov	r3, r5
 80087f8:	f000 fc90 	bl	800911c <fiprintf>
 80087fc:	f000 fd34 	bl	8009268 <abort>
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <__assert_func+0x38>)
 8008802:	461c      	mov	r4, r3
 8008804:	e7f3      	b.n	80087ee <__assert_func+0x12>
 8008806:	bf00      	nop
 8008808:	2000009c 	.word	0x2000009c
 800880c:	08009a33 	.word	0x08009a33
 8008810:	08009a40 	.word	0x08009a40
 8008814:	08009a6e 	.word	0x08009a6e

08008818 <_free_r>:
 8008818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800881a:	2900      	cmp	r1, #0
 800881c:	d044      	beq.n	80088a8 <_free_r+0x90>
 800881e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008822:	9001      	str	r0, [sp, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f1a1 0404 	sub.w	r4, r1, #4
 800882a:	bfb8      	it	lt
 800882c:	18e4      	addlt	r4, r4, r3
 800882e:	f000 f8e7 	bl	8008a00 <__malloc_lock>
 8008832:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <_free_r+0x94>)
 8008834:	9801      	ldr	r0, [sp, #4]
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	b933      	cbnz	r3, 8008848 <_free_r+0x30>
 800883a:	6063      	str	r3, [r4, #4]
 800883c:	6014      	str	r4, [r2, #0]
 800883e:	b003      	add	sp, #12
 8008840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008844:	f000 b8e2 	b.w	8008a0c <__malloc_unlock>
 8008848:	42a3      	cmp	r3, r4
 800884a:	d908      	bls.n	800885e <_free_r+0x46>
 800884c:	6825      	ldr	r5, [r4, #0]
 800884e:	1961      	adds	r1, r4, r5
 8008850:	428b      	cmp	r3, r1
 8008852:	bf01      	itttt	eq
 8008854:	6819      	ldreq	r1, [r3, #0]
 8008856:	685b      	ldreq	r3, [r3, #4]
 8008858:	1949      	addeq	r1, r1, r5
 800885a:	6021      	streq	r1, [r4, #0]
 800885c:	e7ed      	b.n	800883a <_free_r+0x22>
 800885e:	461a      	mov	r2, r3
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b10b      	cbz	r3, 8008868 <_free_r+0x50>
 8008864:	42a3      	cmp	r3, r4
 8008866:	d9fa      	bls.n	800885e <_free_r+0x46>
 8008868:	6811      	ldr	r1, [r2, #0]
 800886a:	1855      	adds	r5, r2, r1
 800886c:	42a5      	cmp	r5, r4
 800886e:	d10b      	bne.n	8008888 <_free_r+0x70>
 8008870:	6824      	ldr	r4, [r4, #0]
 8008872:	4421      	add	r1, r4
 8008874:	1854      	adds	r4, r2, r1
 8008876:	42a3      	cmp	r3, r4
 8008878:	6011      	str	r1, [r2, #0]
 800887a:	d1e0      	bne.n	800883e <_free_r+0x26>
 800887c:	681c      	ldr	r4, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	6053      	str	r3, [r2, #4]
 8008882:	440c      	add	r4, r1
 8008884:	6014      	str	r4, [r2, #0]
 8008886:	e7da      	b.n	800883e <_free_r+0x26>
 8008888:	d902      	bls.n	8008890 <_free_r+0x78>
 800888a:	230c      	movs	r3, #12
 800888c:	6003      	str	r3, [r0, #0]
 800888e:	e7d6      	b.n	800883e <_free_r+0x26>
 8008890:	6825      	ldr	r5, [r4, #0]
 8008892:	1961      	adds	r1, r4, r5
 8008894:	428b      	cmp	r3, r1
 8008896:	bf04      	itt	eq
 8008898:	6819      	ldreq	r1, [r3, #0]
 800889a:	685b      	ldreq	r3, [r3, #4]
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	bf04      	itt	eq
 80088a0:	1949      	addeq	r1, r1, r5
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	6054      	str	r4, [r2, #4]
 80088a6:	e7ca      	b.n	800883e <_free_r+0x26>
 80088a8:	b003      	add	sp, #12
 80088aa:	bd30      	pop	{r4, r5, pc}
 80088ac:	20006468 	.word	0x20006468

080088b0 <malloc>:
 80088b0:	4b02      	ldr	r3, [pc, #8]	; (80088bc <malloc+0xc>)
 80088b2:	4601      	mov	r1, r0
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f000 b823 	b.w	8008900 <_malloc_r>
 80088ba:	bf00      	nop
 80088bc:	2000009c 	.word	0x2000009c

080088c0 <sbrk_aligned>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	4e0e      	ldr	r6, [pc, #56]	; (80088fc <sbrk_aligned+0x3c>)
 80088c4:	460c      	mov	r4, r1
 80088c6:	6831      	ldr	r1, [r6, #0]
 80088c8:	4605      	mov	r5, r0
 80088ca:	b911      	cbnz	r1, 80088d2 <sbrk_aligned+0x12>
 80088cc:	f000 fcbc 	bl	8009248 <_sbrk_r>
 80088d0:	6030      	str	r0, [r6, #0]
 80088d2:	4621      	mov	r1, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	f000 fcb7 	bl	8009248 <_sbrk_r>
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	d00a      	beq.n	80088f4 <sbrk_aligned+0x34>
 80088de:	1cc4      	adds	r4, r0, #3
 80088e0:	f024 0403 	bic.w	r4, r4, #3
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d007      	beq.n	80088f8 <sbrk_aligned+0x38>
 80088e8:	1a21      	subs	r1, r4, r0
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 fcac 	bl	8009248 <_sbrk_r>
 80088f0:	3001      	adds	r0, #1
 80088f2:	d101      	bne.n	80088f8 <sbrk_aligned+0x38>
 80088f4:	f04f 34ff 	mov.w	r4, #4294967295
 80088f8:	4620      	mov	r0, r4
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	2000646c 	.word	0x2000646c

08008900 <_malloc_r>:
 8008900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008904:	1ccd      	adds	r5, r1, #3
 8008906:	f025 0503 	bic.w	r5, r5, #3
 800890a:	3508      	adds	r5, #8
 800890c:	2d0c      	cmp	r5, #12
 800890e:	bf38      	it	cc
 8008910:	250c      	movcc	r5, #12
 8008912:	2d00      	cmp	r5, #0
 8008914:	4607      	mov	r7, r0
 8008916:	db01      	blt.n	800891c <_malloc_r+0x1c>
 8008918:	42a9      	cmp	r1, r5
 800891a:	d905      	bls.n	8008928 <_malloc_r+0x28>
 800891c:	230c      	movs	r3, #12
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	2600      	movs	r6, #0
 8008922:	4630      	mov	r0, r6
 8008924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008928:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80089fc <_malloc_r+0xfc>
 800892c:	f000 f868 	bl	8008a00 <__malloc_lock>
 8008930:	f8d8 3000 	ldr.w	r3, [r8]
 8008934:	461c      	mov	r4, r3
 8008936:	bb5c      	cbnz	r4, 8008990 <_malloc_r+0x90>
 8008938:	4629      	mov	r1, r5
 800893a:	4638      	mov	r0, r7
 800893c:	f7ff ffc0 	bl	80088c0 <sbrk_aligned>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	4604      	mov	r4, r0
 8008944:	d155      	bne.n	80089f2 <_malloc_r+0xf2>
 8008946:	f8d8 4000 	ldr.w	r4, [r8]
 800894a:	4626      	mov	r6, r4
 800894c:	2e00      	cmp	r6, #0
 800894e:	d145      	bne.n	80089dc <_malloc_r+0xdc>
 8008950:	2c00      	cmp	r4, #0
 8008952:	d048      	beq.n	80089e6 <_malloc_r+0xe6>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	4631      	mov	r1, r6
 8008958:	4638      	mov	r0, r7
 800895a:	eb04 0903 	add.w	r9, r4, r3
 800895e:	f000 fc73 	bl	8009248 <_sbrk_r>
 8008962:	4581      	cmp	r9, r0
 8008964:	d13f      	bne.n	80089e6 <_malloc_r+0xe6>
 8008966:	6821      	ldr	r1, [r4, #0]
 8008968:	1a6d      	subs	r5, r5, r1
 800896a:	4629      	mov	r1, r5
 800896c:	4638      	mov	r0, r7
 800896e:	f7ff ffa7 	bl	80088c0 <sbrk_aligned>
 8008972:	3001      	adds	r0, #1
 8008974:	d037      	beq.n	80089e6 <_malloc_r+0xe6>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	442b      	add	r3, r5
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	f8d8 3000 	ldr.w	r3, [r8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d038      	beq.n	80089f6 <_malloc_r+0xf6>
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	42a2      	cmp	r2, r4
 8008988:	d12b      	bne.n	80089e2 <_malloc_r+0xe2>
 800898a:	2200      	movs	r2, #0
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	e00f      	b.n	80089b0 <_malloc_r+0xb0>
 8008990:	6822      	ldr	r2, [r4, #0]
 8008992:	1b52      	subs	r2, r2, r5
 8008994:	d41f      	bmi.n	80089d6 <_malloc_r+0xd6>
 8008996:	2a0b      	cmp	r2, #11
 8008998:	d917      	bls.n	80089ca <_malloc_r+0xca>
 800899a:	1961      	adds	r1, r4, r5
 800899c:	42a3      	cmp	r3, r4
 800899e:	6025      	str	r5, [r4, #0]
 80089a0:	bf18      	it	ne
 80089a2:	6059      	strne	r1, [r3, #4]
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	bf08      	it	eq
 80089a8:	f8c8 1000 	streq.w	r1, [r8]
 80089ac:	5162      	str	r2, [r4, r5]
 80089ae:	604b      	str	r3, [r1, #4]
 80089b0:	4638      	mov	r0, r7
 80089b2:	f104 060b 	add.w	r6, r4, #11
 80089b6:	f000 f829 	bl	8008a0c <__malloc_unlock>
 80089ba:	f026 0607 	bic.w	r6, r6, #7
 80089be:	1d23      	adds	r3, r4, #4
 80089c0:	1af2      	subs	r2, r6, r3
 80089c2:	d0ae      	beq.n	8008922 <_malloc_r+0x22>
 80089c4:	1b9b      	subs	r3, r3, r6
 80089c6:	50a3      	str	r3, [r4, r2]
 80089c8:	e7ab      	b.n	8008922 <_malloc_r+0x22>
 80089ca:	42a3      	cmp	r3, r4
 80089cc:	6862      	ldr	r2, [r4, #4]
 80089ce:	d1dd      	bne.n	800898c <_malloc_r+0x8c>
 80089d0:	f8c8 2000 	str.w	r2, [r8]
 80089d4:	e7ec      	b.n	80089b0 <_malloc_r+0xb0>
 80089d6:	4623      	mov	r3, r4
 80089d8:	6864      	ldr	r4, [r4, #4]
 80089da:	e7ac      	b.n	8008936 <_malloc_r+0x36>
 80089dc:	4634      	mov	r4, r6
 80089de:	6876      	ldr	r6, [r6, #4]
 80089e0:	e7b4      	b.n	800894c <_malloc_r+0x4c>
 80089e2:	4613      	mov	r3, r2
 80089e4:	e7cc      	b.n	8008980 <_malloc_r+0x80>
 80089e6:	230c      	movs	r3, #12
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	4638      	mov	r0, r7
 80089ec:	f000 f80e 	bl	8008a0c <__malloc_unlock>
 80089f0:	e797      	b.n	8008922 <_malloc_r+0x22>
 80089f2:	6025      	str	r5, [r4, #0]
 80089f4:	e7dc      	b.n	80089b0 <_malloc_r+0xb0>
 80089f6:	605b      	str	r3, [r3, #4]
 80089f8:	deff      	udf	#255	; 0xff
 80089fa:	bf00      	nop
 80089fc:	20006468 	.word	0x20006468

08008a00 <__malloc_lock>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__malloc_lock+0x8>)
 8008a02:	f7ff beda 	b.w	80087ba <__retarget_lock_acquire_recursive>
 8008a06:	bf00      	nop
 8008a08:	20006464 	.word	0x20006464

08008a0c <__malloc_unlock>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	; (8008a14 <__malloc_unlock+0x8>)
 8008a0e:	f7ff bed5 	b.w	80087bc <__retarget_lock_release_recursive>
 8008a12:	bf00      	nop
 8008a14:	20006464 	.word	0x20006464

08008a18 <__sfputc_r>:
 8008a18:	6893      	ldr	r3, [r2, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	b410      	push	{r4}
 8008a20:	6093      	str	r3, [r2, #8]
 8008a22:	da08      	bge.n	8008a36 <__sfputc_r+0x1e>
 8008a24:	6994      	ldr	r4, [r2, #24]
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	db01      	blt.n	8008a2e <__sfputc_r+0x16>
 8008a2a:	290a      	cmp	r1, #10
 8008a2c:	d103      	bne.n	8008a36 <__sfputc_r+0x1e>
 8008a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a32:	f7ff bdb4 	b.w	800859e <__swbuf_r>
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	1c58      	adds	r0, r3, #1
 8008a3a:	6010      	str	r0, [r2, #0]
 8008a3c:	7019      	strb	r1, [r3, #0]
 8008a3e:	4608      	mov	r0, r1
 8008a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <__sfputs_r>:
 8008a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a48:	4606      	mov	r6, r0
 8008a4a:	460f      	mov	r7, r1
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	18d5      	adds	r5, r2, r3
 8008a50:	42ac      	cmp	r4, r5
 8008a52:	d101      	bne.n	8008a58 <__sfputs_r+0x12>
 8008a54:	2000      	movs	r0, #0
 8008a56:	e007      	b.n	8008a68 <__sfputs_r+0x22>
 8008a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5c:	463a      	mov	r2, r7
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7ff ffda 	bl	8008a18 <__sfputc_r>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d1f3      	bne.n	8008a50 <__sfputs_r+0xa>
 8008a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a6c <_vfiprintf_r>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	460d      	mov	r5, r1
 8008a72:	b09d      	sub	sp, #116	; 0x74
 8008a74:	4614      	mov	r4, r2
 8008a76:	4698      	mov	r8, r3
 8008a78:	4606      	mov	r6, r0
 8008a7a:	b118      	cbz	r0, 8008a84 <_vfiprintf_r+0x18>
 8008a7c:	6a03      	ldr	r3, [r0, #32]
 8008a7e:	b90b      	cbnz	r3, 8008a84 <_vfiprintf_r+0x18>
 8008a80:	f7ff fca6 	bl	80083d0 <__sinit>
 8008a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a86:	07d9      	lsls	r1, r3, #31
 8008a88:	d405      	bmi.n	8008a96 <_vfiprintf_r+0x2a>
 8008a8a:	89ab      	ldrh	r3, [r5, #12]
 8008a8c:	059a      	lsls	r2, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_vfiprintf_r+0x2a>
 8008a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a92:	f7ff fe92 	bl	80087ba <__retarget_lock_acquire_recursive>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	071b      	lsls	r3, r3, #28
 8008a9a:	d501      	bpl.n	8008aa0 <_vfiprintf_r+0x34>
 8008a9c:	692b      	ldr	r3, [r5, #16]
 8008a9e:	b99b      	cbnz	r3, 8008ac8 <_vfiprintf_r+0x5c>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff fdb8 	bl	8008618 <__swsetup_r>
 8008aa8:	b170      	cbz	r0, 8008ac8 <_vfiprintf_r+0x5c>
 8008aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aac:	07dc      	lsls	r4, r3, #31
 8008aae:	d504      	bpl.n	8008aba <_vfiprintf_r+0x4e>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	b01d      	add	sp, #116	; 0x74
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	0598      	lsls	r0, r3, #22
 8008abe:	d4f7      	bmi.n	8008ab0 <_vfiprintf_r+0x44>
 8008ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac2:	f7ff fe7b 	bl	80087bc <__retarget_lock_release_recursive>
 8008ac6:	e7f3      	b.n	8008ab0 <_vfiprintf_r+0x44>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9309      	str	r3, [sp, #36]	; 0x24
 8008acc:	2320      	movs	r3, #32
 8008ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad6:	2330      	movs	r3, #48	; 0x30
 8008ad8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c8c <_vfiprintf_r+0x220>
 8008adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ae0:	f04f 0901 	mov.w	r9, #1
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	469a      	mov	sl, r3
 8008ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aec:	b10a      	cbz	r2, 8008af2 <_vfiprintf_r+0x86>
 8008aee:	2a25      	cmp	r2, #37	; 0x25
 8008af0:	d1f9      	bne.n	8008ae6 <_vfiprintf_r+0x7a>
 8008af2:	ebba 0b04 	subs.w	fp, sl, r4
 8008af6:	d00b      	beq.n	8008b10 <_vfiprintf_r+0xa4>
 8008af8:	465b      	mov	r3, fp
 8008afa:	4622      	mov	r2, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff ffa1 	bl	8008a46 <__sfputs_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	f000 80a9 	beq.w	8008c5c <_vfiprintf_r+0x1f0>
 8008b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b0c:	445a      	add	r2, fp
 8008b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b10:	f89a 3000 	ldrb.w	r3, [sl]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80a1 	beq.w	8008c5c <_vfiprintf_r+0x1f0>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b24:	f10a 0a01 	add.w	sl, sl, #1
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	9307      	str	r3, [sp, #28]
 8008b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b30:	931a      	str	r3, [sp, #104]	; 0x68
 8008b32:	4654      	mov	r4, sl
 8008b34:	2205      	movs	r2, #5
 8008b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3a:	4854      	ldr	r0, [pc, #336]	; (8008c8c <_vfiprintf_r+0x220>)
 8008b3c:	f7f7 fb68 	bl	8000210 <memchr>
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	b9d8      	cbnz	r0, 8008b7c <_vfiprintf_r+0x110>
 8008b44:	06d1      	lsls	r1, r2, #27
 8008b46:	bf44      	itt	mi
 8008b48:	2320      	movmi	r3, #32
 8008b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b4e:	0713      	lsls	r3, r2, #28
 8008b50:	bf44      	itt	mi
 8008b52:	232b      	movmi	r3, #43	; 0x2b
 8008b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b58:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b5e:	d015      	beq.n	8008b8c <_vfiprintf_r+0x120>
 8008b60:	9a07      	ldr	r2, [sp, #28]
 8008b62:	4654      	mov	r4, sl
 8008b64:	2000      	movs	r0, #0
 8008b66:	f04f 0c0a 	mov.w	ip, #10
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b70:	3b30      	subs	r3, #48	; 0x30
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d94d      	bls.n	8008c12 <_vfiprintf_r+0x1a6>
 8008b76:	b1b0      	cbz	r0, 8008ba6 <_vfiprintf_r+0x13a>
 8008b78:	9207      	str	r2, [sp, #28]
 8008b7a:	e014      	b.n	8008ba6 <_vfiprintf_r+0x13a>
 8008b7c:	eba0 0308 	sub.w	r3, r0, r8
 8008b80:	fa09 f303 	lsl.w	r3, r9, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	46a2      	mov	sl, r4
 8008b8a:	e7d2      	b.n	8008b32 <_vfiprintf_r+0xc6>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	1d19      	adds	r1, r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	9103      	str	r1, [sp, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfbb      	ittet	lt
 8008b98:	425b      	neglt	r3, r3
 8008b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b9e:	9307      	strge	r3, [sp, #28]
 8008ba0:	9307      	strlt	r3, [sp, #28]
 8008ba2:	bfb8      	it	lt
 8008ba4:	9204      	strlt	r2, [sp, #16]
 8008ba6:	7823      	ldrb	r3, [r4, #0]
 8008ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8008baa:	d10c      	bne.n	8008bc6 <_vfiprintf_r+0x15a>
 8008bac:	7863      	ldrb	r3, [r4, #1]
 8008bae:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb0:	d134      	bne.n	8008c1c <_vfiprintf_r+0x1b0>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	1d1a      	adds	r2, r3, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	9203      	str	r2, [sp, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfb8      	it	lt
 8008bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bc2:	3402      	adds	r4, #2
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c9c <_vfiprintf_r+0x230>
 8008bca:	7821      	ldrb	r1, [r4, #0]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7f7 fb1e 	bl	8000210 <memchr>
 8008bd4:	b138      	cbz	r0, 8008be6 <_vfiprintf_r+0x17a>
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	eba0 000a 	sub.w	r0, r0, sl
 8008bdc:	2240      	movs	r2, #64	; 0x40
 8008bde:	4082      	lsls	r2, r0
 8008be0:	4313      	orrs	r3, r2
 8008be2:	3401      	adds	r4, #1
 8008be4:	9304      	str	r3, [sp, #16]
 8008be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bea:	4829      	ldr	r0, [pc, #164]	; (8008c90 <_vfiprintf_r+0x224>)
 8008bec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bf0:	2206      	movs	r2, #6
 8008bf2:	f7f7 fb0d 	bl	8000210 <memchr>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d03f      	beq.n	8008c7a <_vfiprintf_r+0x20e>
 8008bfa:	4b26      	ldr	r3, [pc, #152]	; (8008c94 <_vfiprintf_r+0x228>)
 8008bfc:	bb1b      	cbnz	r3, 8008c46 <_vfiprintf_r+0x1da>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	3307      	adds	r3, #7
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	3308      	adds	r3, #8
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0c:	443b      	add	r3, r7
 8008c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c10:	e768      	b.n	8008ae4 <_vfiprintf_r+0x78>
 8008c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c16:	460c      	mov	r4, r1
 8008c18:	2001      	movs	r0, #1
 8008c1a:	e7a6      	b.n	8008b6a <_vfiprintf_r+0xfe>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	3401      	adds	r4, #1
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	4619      	mov	r1, r3
 8008c24:	f04f 0c0a 	mov.w	ip, #10
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c2e:	3a30      	subs	r2, #48	; 0x30
 8008c30:	2a09      	cmp	r2, #9
 8008c32:	d903      	bls.n	8008c3c <_vfiprintf_r+0x1d0>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0c6      	beq.n	8008bc6 <_vfiprintf_r+0x15a>
 8008c38:	9105      	str	r1, [sp, #20]
 8008c3a:	e7c4      	b.n	8008bc6 <_vfiprintf_r+0x15a>
 8008c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c40:	4604      	mov	r4, r0
 8008c42:	2301      	movs	r3, #1
 8008c44:	e7f0      	b.n	8008c28 <_vfiprintf_r+0x1bc>
 8008c46:	ab03      	add	r3, sp, #12
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	462a      	mov	r2, r5
 8008c4c:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <_vfiprintf_r+0x22c>)
 8008c4e:	a904      	add	r1, sp, #16
 8008c50:	4630      	mov	r0, r6
 8008c52:	f3af 8000 	nop.w
 8008c56:	4607      	mov	r7, r0
 8008c58:	1c78      	adds	r0, r7, #1
 8008c5a:	d1d6      	bne.n	8008c0a <_vfiprintf_r+0x19e>
 8008c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	d405      	bmi.n	8008c6e <_vfiprintf_r+0x202>
 8008c62:	89ab      	ldrh	r3, [r5, #12]
 8008c64:	059a      	lsls	r2, r3, #22
 8008c66:	d402      	bmi.n	8008c6e <_vfiprintf_r+0x202>
 8008c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c6a:	f7ff fda7 	bl	80087bc <__retarget_lock_release_recursive>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	065b      	lsls	r3, r3, #25
 8008c72:	f53f af1d 	bmi.w	8008ab0 <_vfiprintf_r+0x44>
 8008c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c78:	e71c      	b.n	8008ab4 <_vfiprintf_r+0x48>
 8008c7a:	ab03      	add	r3, sp, #12
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_vfiprintf_r+0x22c>)
 8008c82:	a904      	add	r1, sp, #16
 8008c84:	4630      	mov	r0, r6
 8008c86:	f000 f879 	bl	8008d7c <_printf_i>
 8008c8a:	e7e4      	b.n	8008c56 <_vfiprintf_r+0x1ea>
 8008c8c:	08009a6f 	.word	0x08009a6f
 8008c90:	08009a79 	.word	0x08009a79
 8008c94:	00000000 	.word	0x00000000
 8008c98:	08008a47 	.word	0x08008a47
 8008c9c:	08009a75 	.word	0x08009a75

08008ca0 <_printf_common>:
 8008ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	4699      	mov	r9, r3
 8008ca8:	688a      	ldr	r2, [r1, #8]
 8008caa:	690b      	ldr	r3, [r1, #16]
 8008cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	bfb8      	it	lt
 8008cb4:	4613      	movlt	r3, r2
 8008cb6:	6033      	str	r3, [r6, #0]
 8008cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b10a      	cbz	r2, 8008cc6 <_printf_common+0x26>
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	6033      	str	r3, [r6, #0]
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	0699      	lsls	r1, r3, #26
 8008cca:	bf42      	ittt	mi
 8008ccc:	6833      	ldrmi	r3, [r6, #0]
 8008cce:	3302      	addmi	r3, #2
 8008cd0:	6033      	strmi	r3, [r6, #0]
 8008cd2:	6825      	ldr	r5, [r4, #0]
 8008cd4:	f015 0506 	ands.w	r5, r5, #6
 8008cd8:	d106      	bne.n	8008ce8 <_printf_common+0x48>
 8008cda:	f104 0a19 	add.w	sl, r4, #25
 8008cde:	68e3      	ldr	r3, [r4, #12]
 8008ce0:	6832      	ldr	r2, [r6, #0]
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	dc26      	bgt.n	8008d36 <_printf_common+0x96>
 8008ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cec:	1e13      	subs	r3, r2, #0
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	bf18      	it	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	0692      	lsls	r2, r2, #26
 8008cf6:	d42b      	bmi.n	8008d50 <_printf_common+0xb0>
 8008cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4638      	mov	r0, r7
 8008d00:	47c0      	blx	r8
 8008d02:	3001      	adds	r0, #1
 8008d04:	d01e      	beq.n	8008d44 <_printf_common+0xa4>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	6922      	ldr	r2, [r4, #16]
 8008d0a:	f003 0306 	and.w	r3, r3, #6
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	bf02      	ittt	eq
 8008d12:	68e5      	ldreq	r5, [r4, #12]
 8008d14:	6833      	ldreq	r3, [r6, #0]
 8008d16:	1aed      	subeq	r5, r5, r3
 8008d18:	68a3      	ldr	r3, [r4, #8]
 8008d1a:	bf0c      	ite	eq
 8008d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d20:	2500      	movne	r5, #0
 8008d22:	4293      	cmp	r3, r2
 8008d24:	bfc4      	itt	gt
 8008d26:	1a9b      	subgt	r3, r3, r2
 8008d28:	18ed      	addgt	r5, r5, r3
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	341a      	adds	r4, #26
 8008d2e:	42b5      	cmp	r5, r6
 8008d30:	d11a      	bne.n	8008d68 <_printf_common+0xc8>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e008      	b.n	8008d48 <_printf_common+0xa8>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4652      	mov	r2, sl
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	47c0      	blx	r8
 8008d40:	3001      	adds	r0, #1
 8008d42:	d103      	bne.n	8008d4c <_printf_common+0xac>
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	e7c6      	b.n	8008cde <_printf_common+0x3e>
 8008d50:	18e1      	adds	r1, r4, r3
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	2030      	movs	r0, #48	; 0x30
 8008d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d5a:	4422      	add	r2, r4
 8008d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d64:	3302      	adds	r3, #2
 8008d66:	e7c7      	b.n	8008cf8 <_printf_common+0x58>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	4638      	mov	r0, r7
 8008d70:	47c0      	blx	r8
 8008d72:	3001      	adds	r0, #1
 8008d74:	d0e6      	beq.n	8008d44 <_printf_common+0xa4>
 8008d76:	3601      	adds	r6, #1
 8008d78:	e7d9      	b.n	8008d2e <_printf_common+0x8e>
	...

08008d7c <_printf_i>:
 8008d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	7e0f      	ldrb	r7, [r1, #24]
 8008d82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d84:	2f78      	cmp	r7, #120	; 0x78
 8008d86:	4691      	mov	r9, r2
 8008d88:	4680      	mov	r8, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	469a      	mov	sl, r3
 8008d8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d92:	d807      	bhi.n	8008da4 <_printf_i+0x28>
 8008d94:	2f62      	cmp	r7, #98	; 0x62
 8008d96:	d80a      	bhi.n	8008dae <_printf_i+0x32>
 8008d98:	2f00      	cmp	r7, #0
 8008d9a:	f000 80d4 	beq.w	8008f46 <_printf_i+0x1ca>
 8008d9e:	2f58      	cmp	r7, #88	; 0x58
 8008da0:	f000 80c0 	beq.w	8008f24 <_printf_i+0x1a8>
 8008da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dac:	e03a      	b.n	8008e24 <_printf_i+0xa8>
 8008dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008db2:	2b15      	cmp	r3, #21
 8008db4:	d8f6      	bhi.n	8008da4 <_printf_i+0x28>
 8008db6:	a101      	add	r1, pc, #4	; (adr r1, 8008dbc <_printf_i+0x40>)
 8008db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dbc:	08008e15 	.word	0x08008e15
 8008dc0:	08008e29 	.word	0x08008e29
 8008dc4:	08008da5 	.word	0x08008da5
 8008dc8:	08008da5 	.word	0x08008da5
 8008dcc:	08008da5 	.word	0x08008da5
 8008dd0:	08008da5 	.word	0x08008da5
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008da5 	.word	0x08008da5
 8008ddc:	08008da5 	.word	0x08008da5
 8008de0:	08008da5 	.word	0x08008da5
 8008de4:	08008da5 	.word	0x08008da5
 8008de8:	08008f2d 	.word	0x08008f2d
 8008dec:	08008e55 	.word	0x08008e55
 8008df0:	08008ee7 	.word	0x08008ee7
 8008df4:	08008da5 	.word	0x08008da5
 8008df8:	08008da5 	.word	0x08008da5
 8008dfc:	08008f4f 	.word	0x08008f4f
 8008e00:	08008da5 	.word	0x08008da5
 8008e04:	08008e55 	.word	0x08008e55
 8008e08:	08008da5 	.word	0x08008da5
 8008e0c:	08008da5 	.word	0x08008da5
 8008e10:	08008eef 	.word	0x08008eef
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	1d1a      	adds	r2, r3, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e24:	2301      	movs	r3, #1
 8008e26:	e09f      	b.n	8008f68 <_printf_i+0x1ec>
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	682b      	ldr	r3, [r5, #0]
 8008e2c:	0607      	lsls	r7, r0, #24
 8008e2e:	f103 0104 	add.w	r1, r3, #4
 8008e32:	6029      	str	r1, [r5, #0]
 8008e34:	d501      	bpl.n	8008e3a <_printf_i+0xbe>
 8008e36:	681e      	ldr	r6, [r3, #0]
 8008e38:	e003      	b.n	8008e42 <_printf_i+0xc6>
 8008e3a:	0646      	lsls	r6, r0, #25
 8008e3c:	d5fb      	bpl.n	8008e36 <_printf_i+0xba>
 8008e3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e42:	2e00      	cmp	r6, #0
 8008e44:	da03      	bge.n	8008e4e <_printf_i+0xd2>
 8008e46:	232d      	movs	r3, #45	; 0x2d
 8008e48:	4276      	negs	r6, r6
 8008e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e4e:	485a      	ldr	r0, [pc, #360]	; (8008fb8 <_printf_i+0x23c>)
 8008e50:	230a      	movs	r3, #10
 8008e52:	e012      	b.n	8008e7a <_printf_i+0xfe>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	6820      	ldr	r0, [r4, #0]
 8008e58:	1d19      	adds	r1, r3, #4
 8008e5a:	6029      	str	r1, [r5, #0]
 8008e5c:	0605      	lsls	r5, r0, #24
 8008e5e:	d501      	bpl.n	8008e64 <_printf_i+0xe8>
 8008e60:	681e      	ldr	r6, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <_printf_i+0xee>
 8008e64:	0641      	lsls	r1, r0, #25
 8008e66:	d5fb      	bpl.n	8008e60 <_printf_i+0xe4>
 8008e68:	881e      	ldrh	r6, [r3, #0]
 8008e6a:	4853      	ldr	r0, [pc, #332]	; (8008fb8 <_printf_i+0x23c>)
 8008e6c:	2f6f      	cmp	r7, #111	; 0x6f
 8008e6e:	bf0c      	ite	eq
 8008e70:	2308      	moveq	r3, #8
 8008e72:	230a      	movne	r3, #10
 8008e74:	2100      	movs	r1, #0
 8008e76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e7a:	6865      	ldr	r5, [r4, #4]
 8008e7c:	60a5      	str	r5, [r4, #8]
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	bfa2      	ittt	ge
 8008e82:	6821      	ldrge	r1, [r4, #0]
 8008e84:	f021 0104 	bicge.w	r1, r1, #4
 8008e88:	6021      	strge	r1, [r4, #0]
 8008e8a:	b90e      	cbnz	r6, 8008e90 <_printf_i+0x114>
 8008e8c:	2d00      	cmp	r5, #0
 8008e8e:	d04b      	beq.n	8008f28 <_printf_i+0x1ac>
 8008e90:	4615      	mov	r5, r2
 8008e92:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e96:	fb03 6711 	mls	r7, r3, r1, r6
 8008e9a:	5dc7      	ldrb	r7, [r0, r7]
 8008e9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ea0:	4637      	mov	r7, r6
 8008ea2:	42bb      	cmp	r3, r7
 8008ea4:	460e      	mov	r6, r1
 8008ea6:	d9f4      	bls.n	8008e92 <_printf_i+0x116>
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d10b      	bne.n	8008ec4 <_printf_i+0x148>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	07de      	lsls	r6, r3, #31
 8008eb0:	d508      	bpl.n	8008ec4 <_printf_i+0x148>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	6861      	ldr	r1, [r4, #4]
 8008eb6:	4299      	cmp	r1, r3
 8008eb8:	bfde      	ittt	le
 8008eba:	2330      	movle	r3, #48	; 0x30
 8008ebc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ec0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ec4:	1b52      	subs	r2, r2, r5
 8008ec6:	6122      	str	r2, [r4, #16]
 8008ec8:	f8cd a000 	str.w	sl, [sp]
 8008ecc:	464b      	mov	r3, r9
 8008ece:	aa03      	add	r2, sp, #12
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f7ff fee4 	bl	8008ca0 <_printf_common>
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d14a      	bne.n	8008f72 <_printf_i+0x1f6>
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	b004      	add	sp, #16
 8008ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	f043 0320 	orr.w	r3, r3, #32
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	4833      	ldr	r0, [pc, #204]	; (8008fbc <_printf_i+0x240>)
 8008ef0:	2778      	movs	r7, #120	; 0x78
 8008ef2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	6829      	ldr	r1, [r5, #0]
 8008efa:	061f      	lsls	r7, r3, #24
 8008efc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f00:	d402      	bmi.n	8008f08 <_printf_i+0x18c>
 8008f02:	065f      	lsls	r7, r3, #25
 8008f04:	bf48      	it	mi
 8008f06:	b2b6      	uxthmi	r6, r6
 8008f08:	07df      	lsls	r7, r3, #31
 8008f0a:	bf48      	it	mi
 8008f0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008f10:	6029      	str	r1, [r5, #0]
 8008f12:	bf48      	it	mi
 8008f14:	6023      	strmi	r3, [r4, #0]
 8008f16:	b91e      	cbnz	r6, 8008f20 <_printf_i+0x1a4>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	f023 0320 	bic.w	r3, r3, #32
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	2310      	movs	r3, #16
 8008f22:	e7a7      	b.n	8008e74 <_printf_i+0xf8>
 8008f24:	4824      	ldr	r0, [pc, #144]	; (8008fb8 <_printf_i+0x23c>)
 8008f26:	e7e4      	b.n	8008ef2 <_printf_i+0x176>
 8008f28:	4615      	mov	r5, r2
 8008f2a:	e7bd      	b.n	8008ea8 <_printf_i+0x12c>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	6826      	ldr	r6, [r4, #0]
 8008f30:	6961      	ldr	r1, [r4, #20]
 8008f32:	1d18      	adds	r0, r3, #4
 8008f34:	6028      	str	r0, [r5, #0]
 8008f36:	0635      	lsls	r5, r6, #24
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	d501      	bpl.n	8008f40 <_printf_i+0x1c4>
 8008f3c:	6019      	str	r1, [r3, #0]
 8008f3e:	e002      	b.n	8008f46 <_printf_i+0x1ca>
 8008f40:	0670      	lsls	r0, r6, #25
 8008f42:	d5fb      	bpl.n	8008f3c <_printf_i+0x1c0>
 8008f44:	8019      	strh	r1, [r3, #0]
 8008f46:	2300      	movs	r3, #0
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	4615      	mov	r5, r2
 8008f4c:	e7bc      	b.n	8008ec8 <_printf_i+0x14c>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	1d1a      	adds	r2, r3, #4
 8008f52:	602a      	str	r2, [r5, #0]
 8008f54:	681d      	ldr	r5, [r3, #0]
 8008f56:	6862      	ldr	r2, [r4, #4]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f7f7 f958 	bl	8000210 <memchr>
 8008f60:	b108      	cbz	r0, 8008f66 <_printf_i+0x1ea>
 8008f62:	1b40      	subs	r0, r0, r5
 8008f64:	6060      	str	r0, [r4, #4]
 8008f66:	6863      	ldr	r3, [r4, #4]
 8008f68:	6123      	str	r3, [r4, #16]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f70:	e7aa      	b.n	8008ec8 <_printf_i+0x14c>
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	462a      	mov	r2, r5
 8008f76:	4649      	mov	r1, r9
 8008f78:	4640      	mov	r0, r8
 8008f7a:	47d0      	blx	sl
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d0ad      	beq.n	8008edc <_printf_i+0x160>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	079b      	lsls	r3, r3, #30
 8008f84:	d413      	bmi.n	8008fae <_printf_i+0x232>
 8008f86:	68e0      	ldr	r0, [r4, #12]
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	4298      	cmp	r0, r3
 8008f8c:	bfb8      	it	lt
 8008f8e:	4618      	movlt	r0, r3
 8008f90:	e7a6      	b.n	8008ee0 <_printf_i+0x164>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4632      	mov	r2, r6
 8008f96:	4649      	mov	r1, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	47d0      	blx	sl
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d09d      	beq.n	8008edc <_printf_i+0x160>
 8008fa0:	3501      	adds	r5, #1
 8008fa2:	68e3      	ldr	r3, [r4, #12]
 8008fa4:	9903      	ldr	r1, [sp, #12]
 8008fa6:	1a5b      	subs	r3, r3, r1
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	dcf2      	bgt.n	8008f92 <_printf_i+0x216>
 8008fac:	e7eb      	b.n	8008f86 <_printf_i+0x20a>
 8008fae:	2500      	movs	r5, #0
 8008fb0:	f104 0619 	add.w	r6, r4, #25
 8008fb4:	e7f5      	b.n	8008fa2 <_printf_i+0x226>
 8008fb6:	bf00      	nop
 8008fb8:	08009a80 	.word	0x08009a80
 8008fbc:	08009a91 	.word	0x08009a91

08008fc0 <__sflush_r>:
 8008fc0:	898a      	ldrh	r2, [r1, #12]
 8008fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	0710      	lsls	r0, r2, #28
 8008fca:	460c      	mov	r4, r1
 8008fcc:	d458      	bmi.n	8009080 <__sflush_r+0xc0>
 8008fce:	684b      	ldr	r3, [r1, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	dc05      	bgt.n	8008fe0 <__sflush_r+0x20>
 8008fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dc02      	bgt.n	8008fe0 <__sflush_r+0x20>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	d0f9      	beq.n	8008fda <__sflush_r+0x1a>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fec:	682f      	ldr	r7, [r5, #0]
 8008fee:	6a21      	ldr	r1, [r4, #32]
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	d032      	beq.n	800905a <__sflush_r+0x9a>
 8008ff4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	075a      	lsls	r2, r3, #29
 8008ffa:	d505      	bpl.n	8009008 <__sflush_r+0x48>
 8008ffc:	6863      	ldr	r3, [r4, #4]
 8008ffe:	1ac0      	subs	r0, r0, r3
 8009000:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009002:	b10b      	cbz	r3, 8009008 <__sflush_r+0x48>
 8009004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009006:	1ac0      	subs	r0, r0, r3
 8009008:	2300      	movs	r3, #0
 800900a:	4602      	mov	r2, r0
 800900c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800900e:	6a21      	ldr	r1, [r4, #32]
 8009010:	4628      	mov	r0, r5
 8009012:	47b0      	blx	r6
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	d106      	bne.n	8009028 <__sflush_r+0x68>
 800901a:	6829      	ldr	r1, [r5, #0]
 800901c:	291d      	cmp	r1, #29
 800901e:	d82b      	bhi.n	8009078 <__sflush_r+0xb8>
 8009020:	4a29      	ldr	r2, [pc, #164]	; (80090c8 <__sflush_r+0x108>)
 8009022:	410a      	asrs	r2, r1
 8009024:	07d6      	lsls	r6, r2, #31
 8009026:	d427      	bmi.n	8009078 <__sflush_r+0xb8>
 8009028:	2200      	movs	r2, #0
 800902a:	6062      	str	r2, [r4, #4]
 800902c:	04d9      	lsls	r1, r3, #19
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	d504      	bpl.n	800903e <__sflush_r+0x7e>
 8009034:	1c42      	adds	r2, r0, #1
 8009036:	d101      	bne.n	800903c <__sflush_r+0x7c>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b903      	cbnz	r3, 800903e <__sflush_r+0x7e>
 800903c:	6560      	str	r0, [r4, #84]	; 0x54
 800903e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009040:	602f      	str	r7, [r5, #0]
 8009042:	2900      	cmp	r1, #0
 8009044:	d0c9      	beq.n	8008fda <__sflush_r+0x1a>
 8009046:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800904a:	4299      	cmp	r1, r3
 800904c:	d002      	beq.n	8009054 <__sflush_r+0x94>
 800904e:	4628      	mov	r0, r5
 8009050:	f7ff fbe2 	bl	8008818 <_free_r>
 8009054:	2000      	movs	r0, #0
 8009056:	6360      	str	r0, [r4, #52]	; 0x34
 8009058:	e7c0      	b.n	8008fdc <__sflush_r+0x1c>
 800905a:	2301      	movs	r3, #1
 800905c:	4628      	mov	r0, r5
 800905e:	47b0      	blx	r6
 8009060:	1c41      	adds	r1, r0, #1
 8009062:	d1c8      	bne.n	8008ff6 <__sflush_r+0x36>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0c5      	beq.n	8008ff6 <__sflush_r+0x36>
 800906a:	2b1d      	cmp	r3, #29
 800906c:	d001      	beq.n	8009072 <__sflush_r+0xb2>
 800906e:	2b16      	cmp	r3, #22
 8009070:	d101      	bne.n	8009076 <__sflush_r+0xb6>
 8009072:	602f      	str	r7, [r5, #0]
 8009074:	e7b1      	b.n	8008fda <__sflush_r+0x1a>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	e7ad      	b.n	8008fdc <__sflush_r+0x1c>
 8009080:	690f      	ldr	r7, [r1, #16]
 8009082:	2f00      	cmp	r7, #0
 8009084:	d0a9      	beq.n	8008fda <__sflush_r+0x1a>
 8009086:	0793      	lsls	r3, r2, #30
 8009088:	680e      	ldr	r6, [r1, #0]
 800908a:	bf08      	it	eq
 800908c:	694b      	ldreq	r3, [r1, #20]
 800908e:	600f      	str	r7, [r1, #0]
 8009090:	bf18      	it	ne
 8009092:	2300      	movne	r3, #0
 8009094:	eba6 0807 	sub.w	r8, r6, r7
 8009098:	608b      	str	r3, [r1, #8]
 800909a:	f1b8 0f00 	cmp.w	r8, #0
 800909e:	dd9c      	ble.n	8008fda <__sflush_r+0x1a>
 80090a0:	6a21      	ldr	r1, [r4, #32]
 80090a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090a4:	4643      	mov	r3, r8
 80090a6:	463a      	mov	r2, r7
 80090a8:	4628      	mov	r0, r5
 80090aa:	47b0      	blx	r6
 80090ac:	2800      	cmp	r0, #0
 80090ae:	dc06      	bgt.n	80090be <__sflush_r+0xfe>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e78e      	b.n	8008fdc <__sflush_r+0x1c>
 80090be:	4407      	add	r7, r0
 80090c0:	eba8 0800 	sub.w	r8, r8, r0
 80090c4:	e7e9      	b.n	800909a <__sflush_r+0xda>
 80090c6:	bf00      	nop
 80090c8:	dfbffffe 	.word	0xdfbffffe

080090cc <_fflush_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	690b      	ldr	r3, [r1, #16]
 80090d0:	4605      	mov	r5, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	b913      	cbnz	r3, 80090dc <_fflush_r+0x10>
 80090d6:	2500      	movs	r5, #0
 80090d8:	4628      	mov	r0, r5
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	b118      	cbz	r0, 80090e6 <_fflush_r+0x1a>
 80090de:	6a03      	ldr	r3, [r0, #32]
 80090e0:	b90b      	cbnz	r3, 80090e6 <_fflush_r+0x1a>
 80090e2:	f7ff f975 	bl	80083d0 <__sinit>
 80090e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0f3      	beq.n	80090d6 <_fflush_r+0xa>
 80090ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090f0:	07d0      	lsls	r0, r2, #31
 80090f2:	d404      	bmi.n	80090fe <_fflush_r+0x32>
 80090f4:	0599      	lsls	r1, r3, #22
 80090f6:	d402      	bmi.n	80090fe <_fflush_r+0x32>
 80090f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090fa:	f7ff fb5e 	bl	80087ba <__retarget_lock_acquire_recursive>
 80090fe:	4628      	mov	r0, r5
 8009100:	4621      	mov	r1, r4
 8009102:	f7ff ff5d 	bl	8008fc0 <__sflush_r>
 8009106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009108:	07da      	lsls	r2, r3, #31
 800910a:	4605      	mov	r5, r0
 800910c:	d4e4      	bmi.n	80090d8 <_fflush_r+0xc>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	059b      	lsls	r3, r3, #22
 8009112:	d4e1      	bmi.n	80090d8 <_fflush_r+0xc>
 8009114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009116:	f7ff fb51 	bl	80087bc <__retarget_lock_release_recursive>
 800911a:	e7dd      	b.n	80090d8 <_fflush_r+0xc>

0800911c <fiprintf>:
 800911c:	b40e      	push	{r1, r2, r3}
 800911e:	b503      	push	{r0, r1, lr}
 8009120:	4601      	mov	r1, r0
 8009122:	ab03      	add	r3, sp, #12
 8009124:	4805      	ldr	r0, [pc, #20]	; (800913c <fiprintf+0x20>)
 8009126:	f853 2b04 	ldr.w	r2, [r3], #4
 800912a:	6800      	ldr	r0, [r0, #0]
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	f7ff fc9d 	bl	8008a6c <_vfiprintf_r>
 8009132:	b002      	add	sp, #8
 8009134:	f85d eb04 	ldr.w	lr, [sp], #4
 8009138:	b003      	add	sp, #12
 800913a:	4770      	bx	lr
 800913c:	2000009c 	.word	0x2000009c

08009140 <__swhatbuf_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	2900      	cmp	r1, #0
 800914a:	b096      	sub	sp, #88	; 0x58
 800914c:	4615      	mov	r5, r2
 800914e:	461e      	mov	r6, r3
 8009150:	da0d      	bge.n	800916e <__swhatbuf_r+0x2e>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009158:	f04f 0100 	mov.w	r1, #0
 800915c:	bf0c      	ite	eq
 800915e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009162:	2340      	movne	r3, #64	; 0x40
 8009164:	2000      	movs	r0, #0
 8009166:	6031      	str	r1, [r6, #0]
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	b016      	add	sp, #88	; 0x58
 800916c:	bd70      	pop	{r4, r5, r6, pc}
 800916e:	466a      	mov	r2, sp
 8009170:	f000 f848 	bl	8009204 <_fstat_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	dbec      	blt.n	8009152 <__swhatbuf_r+0x12>
 8009178:	9901      	ldr	r1, [sp, #4]
 800917a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800917e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009182:	4259      	negs	r1, r3
 8009184:	4159      	adcs	r1, r3
 8009186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800918a:	e7eb      	b.n	8009164 <__swhatbuf_r+0x24>

0800918c <__smakebuf_r>:
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009190:	079d      	lsls	r5, r3, #30
 8009192:	4606      	mov	r6, r0
 8009194:	460c      	mov	r4, r1
 8009196:	d507      	bpl.n	80091a8 <__smakebuf_r+0x1c>
 8009198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	2301      	movs	r3, #1
 80091a2:	6163      	str	r3, [r4, #20]
 80091a4:	b002      	add	sp, #8
 80091a6:	bd70      	pop	{r4, r5, r6, pc}
 80091a8:	ab01      	add	r3, sp, #4
 80091aa:	466a      	mov	r2, sp
 80091ac:	f7ff ffc8 	bl	8009140 <__swhatbuf_r>
 80091b0:	9900      	ldr	r1, [sp, #0]
 80091b2:	4605      	mov	r5, r0
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7ff fba3 	bl	8008900 <_malloc_r>
 80091ba:	b948      	cbnz	r0, 80091d0 <__smakebuf_r+0x44>
 80091bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c0:	059a      	lsls	r2, r3, #22
 80091c2:	d4ef      	bmi.n	80091a4 <__smakebuf_r+0x18>
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	f043 0302 	orr.w	r3, r3, #2
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	e7e3      	b.n	8009198 <__smakebuf_r+0xc>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	6020      	str	r0, [r4, #0]
 80091d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	9b00      	ldr	r3, [sp, #0]
 80091dc:	6163      	str	r3, [r4, #20]
 80091de:	9b01      	ldr	r3, [sp, #4]
 80091e0:	6120      	str	r0, [r4, #16]
 80091e2:	b15b      	cbz	r3, 80091fc <__smakebuf_r+0x70>
 80091e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e8:	4630      	mov	r0, r6
 80091ea:	f000 f81d 	bl	8009228 <_isatty_r>
 80091ee:	b128      	cbz	r0, 80091fc <__smakebuf_r+0x70>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	431d      	orrs	r5, r3
 8009200:	81a5      	strh	r5, [r4, #12]
 8009202:	e7cf      	b.n	80091a4 <__smakebuf_r+0x18>

08009204 <_fstat_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	; (8009224 <_fstat_r+0x20>)
 8009208:	2300      	movs	r3, #0
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	4611      	mov	r1, r2
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	f7f8 fa78 	bl	8001706 <_fstat>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d102      	bne.n	8009220 <_fstat_r+0x1c>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	b103      	cbz	r3, 8009220 <_fstat_r+0x1c>
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	bd38      	pop	{r3, r4, r5, pc}
 8009222:	bf00      	nop
 8009224:	20006460 	.word	0x20006460

08009228 <_isatty_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d06      	ldr	r5, [pc, #24]	; (8009244 <_isatty_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7f8 fa77 	bl	8001726 <_isatty>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_isatty_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_isatty_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	20006460 	.word	0x20006460

08009248 <_sbrk_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d06      	ldr	r5, [pc, #24]	; (8009264 <_sbrk_r+0x1c>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	f7f8 fa80 	bl	8001758 <_sbrk>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_sbrk_r+0x1a>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_sbrk_r+0x1a>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20006460 	.word	0x20006460

08009268 <abort>:
 8009268:	b508      	push	{r3, lr}
 800926a:	2006      	movs	r0, #6
 800926c:	f000 f82c 	bl	80092c8 <raise>
 8009270:	2001      	movs	r0, #1
 8009272:	f7f8 f9f9 	bl	8001668 <_exit>

08009276 <_raise_r>:
 8009276:	291f      	cmp	r1, #31
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4604      	mov	r4, r0
 800927c:	460d      	mov	r5, r1
 800927e:	d904      	bls.n	800928a <_raise_r+0x14>
 8009280:	2316      	movs	r3, #22
 8009282:	6003      	str	r3, [r0, #0]
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	bd38      	pop	{r3, r4, r5, pc}
 800928a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800928c:	b112      	cbz	r2, 8009294 <_raise_r+0x1e>
 800928e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009292:	b94b      	cbnz	r3, 80092a8 <_raise_r+0x32>
 8009294:	4620      	mov	r0, r4
 8009296:	f000 f831 	bl	80092fc <_getpid_r>
 800929a:	462a      	mov	r2, r5
 800929c:	4601      	mov	r1, r0
 800929e:	4620      	mov	r0, r4
 80092a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092a4:	f000 b818 	b.w	80092d8 <_kill_r>
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d00a      	beq.n	80092c2 <_raise_r+0x4c>
 80092ac:	1c59      	adds	r1, r3, #1
 80092ae:	d103      	bne.n	80092b8 <_raise_r+0x42>
 80092b0:	2316      	movs	r3, #22
 80092b2:	6003      	str	r3, [r0, #0]
 80092b4:	2001      	movs	r0, #1
 80092b6:	e7e7      	b.n	8009288 <_raise_r+0x12>
 80092b8:	2400      	movs	r4, #0
 80092ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092be:	4628      	mov	r0, r5
 80092c0:	4798      	blx	r3
 80092c2:	2000      	movs	r0, #0
 80092c4:	e7e0      	b.n	8009288 <_raise_r+0x12>
	...

080092c8 <raise>:
 80092c8:	4b02      	ldr	r3, [pc, #8]	; (80092d4 <raise+0xc>)
 80092ca:	4601      	mov	r1, r0
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	f7ff bfd2 	b.w	8009276 <_raise_r>
 80092d2:	bf00      	nop
 80092d4:	2000009c 	.word	0x2000009c

080092d8 <_kill_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_kill_r+0x20>)
 80092dc:	2300      	movs	r3, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	602b      	str	r3, [r5, #0]
 80092e6:	f7f8 f9af 	bl	8001648 <_kill>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	d102      	bne.n	80092f4 <_kill_r+0x1c>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	b103      	cbz	r3, 80092f4 <_kill_r+0x1c>
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	bd38      	pop	{r3, r4, r5, pc}
 80092f6:	bf00      	nop
 80092f8:	20006460 	.word	0x20006460

080092fc <_getpid_r>:
 80092fc:	f7f8 b99c 	b.w	8001638 <_getpid>

08009300 <_init>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr

0800930c <_fini>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr
