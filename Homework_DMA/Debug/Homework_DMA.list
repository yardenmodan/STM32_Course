
Homework_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c20  08006c20  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c28  08006c28  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  20000068  08006c98  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  08006c98  0002099c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001501f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d33  00000000  00000000  000350fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00037e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d54  00000000  00000000  00038f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002773f  00000000  00000000  00039cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016711  00000000  00000000  000613fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed9c9  00000000  00000000  00077b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fd4  00000000  00000000  001654d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a64 	.word	0x08006a64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006a64 	.word	0x08006a64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ffd4 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f812 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f9ce 	bl	8000958 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 f96e 	bl	800089c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c0:	f000 f99c 	bl	80008fc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005c4:	f000 f872 	bl	80006ac <MX_I2C1_Init>
  MX_I2C2_Init();
 80005c8:	f000 f8b0 	bl	800072c <MX_I2C2_Init>
  MX_SPI1_Init();
 80005cc:	f000 f8ee 	bl	80007ac <MX_SPI1_Init>
  MX_SPI2_Init();
 80005d0:	f000 f92a 	bl	8000828 <MX_SPI2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hw_main();
 80005d4:	f000 ffbc 	bl	8001550 <hw_main>
 80005d8:	e7fc      	b.n	80005d4 <main+0x28>
	...

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fcb2 	bl	8005f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f001 fdb2 	bl	8002168 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <SystemClock_Config+0xc8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a26      	ldr	r2, [pc, #152]	; (80006a4 <SystemClock_Config+0xc8>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SystemClock_Config+0xc8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <SystemClock_Config+0xcc>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <SystemClock_Config+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800063c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000650:	2348      	movs	r3, #72	; 0x48
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000658:	2303      	movs	r3, #3
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fd91 	bl	8002188 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 fa76 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2102      	movs	r1, #2
 800068c:	4618      	mov	r0, r3
 800068e:	f002 f81f 	bl	80026d0 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000698:	f000 fa60 	bl	8000b5c <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_I2C1_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_I2C1_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C1_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <MX_I2C1_Init+0x74>)
 80006e8:	f001 fab4 	bl	8001c54 <HAL_I2C_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 fa33 	bl	8000b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_I2C1_Init+0x74>)
 80006fa:	f001 fb55 	bl	8001da8 <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 fa2a 	bl	8000b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_I2C1_Init+0x74>)
 800070c:	f001 fb97 	bl	8001e3e <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 fa21 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000084 	.word	0x20000084
 8000724:	40005400 	.word	0x40005400
 8000728:	00808cd2 	.word	0x00808cd2

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C2_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_I2C2_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000768:	f001 fa74 	bl	8001c54 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f9f3 	bl	8000b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C2_Init+0x74>)
 800077a:	f001 fb15 	bl	8001da8 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f9ea 	bl	8000b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_I2C2_Init+0x74>)
 800078c:	f001 fb57 	bl	8001e3e <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f9e1 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d8 	.word	0x200000d8
 80007a4:	40005800 	.word	0x40005800
 80007a8:	00808cd2 	.word	0x00808cd2

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_SPI1_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_SPI1_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_SPI1_Init+0x74>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI1_Init+0x74>)
 80007c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI1_Init+0x74>)
 80007da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI1_Init+0x74>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_SPI1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI1_Init+0x74>)
 8000806:	2208      	movs	r2, #8
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_SPI1_Init+0x74>)
 800080c:	f002 fd76 	bl	80032fc <HAL_SPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f9a1 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000012c 	.word	0x2000012c
 8000824:	40013000 	.word	0x40013000

08000828 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_SPI2_Init+0x6c>)
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <MX_SPI2_Init+0x70>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI2_Init+0x6c>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000840:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI2_Init+0x6c>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI2_Init+0x6c>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI2_Init+0x6c>)
 800086e:	2207      	movs	r2, #7
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI2_Init+0x6c>)
 800087a:	2200      	movs	r2, #0
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_SPI2_Init+0x6c>)
 8000880:	f002 fd3c 	bl	80032fc <HAL_SPI_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800088a:	f000 f967 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000190 	.word	0x20000190
 8000898:	40003800 	.word	0x40003800

0800089c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART3_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008e0:	f004 f8b4 	bl	8004a4c <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f937 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200001f4 	.word	0x200001f4
 80008f8:	40004800 	.word	0x40004800

080008fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000906:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2206      	movs	r2, #6
 800090c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2202      	movs	r2, #2
 8000912:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2202      	movs	r2, #2
 800091e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2201      	movs	r2, #1
 8000924:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2201      	movs	r2, #1
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	f001 fac9 	bl	8001ed6 <HAL_PCD_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f907 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000027c 	.word	0x2000027c

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b76      	ldr	r3, [pc, #472]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a75      	ldr	r2, [pc, #468]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b73      	ldr	r3, [pc, #460]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b70      	ldr	r3, [pc, #448]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a6f      	ldr	r2, [pc, #444]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b6d      	ldr	r3, [pc, #436]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b6a      	ldr	r3, [pc, #424]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a69      	ldr	r2, [pc, #420]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b67      	ldr	r3, [pc, #412]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a63      	ldr	r2, [pc, #396]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b5e      	ldr	r3, [pc, #376]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a5d      	ldr	r2, [pc, #372]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b5b      	ldr	r3, [pc, #364]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	4b58      	ldr	r3, [pc, #352]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a57      	ldr	r2, [pc, #348]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b55      	ldr	r3, [pc, #340]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fe:	4b52      	ldr	r3, [pc, #328]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a51      	ldr	r2, [pc, #324]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x1f0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a1c:	484b      	ldr	r0, [pc, #300]	; (8000b4c <MX_GPIO_Init+0x1f4>)
 8000a1e:	f001 f8ff 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	484a      	ldr	r0, [pc, #296]	; (8000b50 <MX_GPIO_Init+0x1f8>)
 8000a28:	f001 f8fa 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4844      	ldr	r0, [pc, #272]	; (8000b54 <MX_GPIO_Init+0x1fc>)
 8000a44:	f000 ff40 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a58:	230b      	movs	r3, #11
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	483c      	ldr	r0, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x1fc>)
 8000a64:	f000 ff30 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a78:	230b      	movs	r3, #11
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4835      	ldr	r0, [pc, #212]	; (8000b58 <MX_GPIO_Init+0x200>)
 8000a84:	f000 ff20 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a88:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	482a      	ldr	r0, [pc, #168]	; (8000b4c <MX_GPIO_Init+0x1f4>)
 8000aa2:	f000 ff11 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4822      	ldr	r0, [pc, #136]	; (8000b4c <MX_GPIO_Init+0x1f4>)
 8000ac2:	f000 ff01 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481a      	ldr	r0, [pc, #104]	; (8000b4c <MX_GPIO_Init+0x1f4>)
 8000ae4:	f000 fef0 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4814      	ldr	r0, [pc, #80]	; (8000b50 <MX_GPIO_Init+0x1f8>)
 8000b00:	f000 fee2 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <MX_GPIO_Init+0x1f8>)
 8000b18:	f000 fed6 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2e:	230b      	movs	r3, #11
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_GPIO_Init+0x1f8>)
 8000b3a:	f000 fec5 	bl	80018c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0ac      	sub	sp, #176	; 0xb0
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	2284      	movs	r2, #132	; 0x84
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 f9bf 	bl	8005f54 <memset>
  if(hi2c->Instance==I2C1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a4b      	ldr	r2, [pc, #300]	; (8000d08 <HAL_I2C_MspInit+0x158>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d145      	bne.n	8000c6c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000be0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000be4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 ff94 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff ffaf 	bl	8000b5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a42      	ldr	r2, [pc, #264]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c30:	2304      	movs	r3, #4
 8000c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4834      	ldr	r0, [pc, #208]	; (8000d10 <HAL_I2C_MspInit+0x160>)
 8000c3e:	f000 fe43 	bl	80018c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	201f      	movs	r0, #31
 8000c60:	f000 fdd9 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c64:	201f      	movs	r0, #31
 8000c66:	f000 fdf2 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c6a:	e049      	b.n	8000d00 <HAL_I2C_MspInit+0x150>
  else if(hi2c->Instance==I2C2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <HAL_I2C_MspInit+0x164>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d144      	bne.n	8000d00 <HAL_I2C_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 ff48 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_I2C_MspInit+0xe6>
      Error_Handler();
 8000c92:	f7ff ff63 	bl	8000b5c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb4:	2312      	movs	r3, #18
 8000cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4811      	ldr	r0, [pc, #68]	; (8000d18 <HAL_I2C_MspInit+0x168>)
 8000cd4:	f000 fdf8 	bl	80018c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000cde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_I2C_MspInit+0x15c>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2021      	movs	r0, #33	; 0x21
 8000cf6:	f000 fd8e 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000cfa:	2021      	movs	r0, #33	; 0x21
 8000cfc:	f000 fda7 	bl	800184e <HAL_NVIC_EnableIRQ>
}
 8000d00:	bf00      	nop
 8000d02:	37b0      	adds	r7, #176	; 0xb0
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40005800 	.word	0x40005800
 8000d18:	40021400 	.word	0x40021400

08000d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a5a      	ldr	r2, [pc, #360]	; (8000ea4 <HAL_SPI_MspInit+0x188>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d15c      	bne.n	8000df8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3e:	4b5a      	ldr	r3, [pc, #360]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a59      	ldr	r2, [pc, #356]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	623b      	str	r3, [r7, #32]
 8000d54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a53      	ldr	r2, [pc, #332]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d86:	2320      	movs	r3, #32
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d96:	2305      	movs	r3, #5
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4842      	ldr	r0, [pc, #264]	; (8000eac <HAL_SPI_MspInit+0x190>)
 8000da2:	f000 fd91 	bl	80018c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	483a      	ldr	r0, [pc, #232]	; (8000eac <HAL_SPI_MspInit+0x190>)
 8000dc2:	f000 fd81 	bl	80018c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4833      	ldr	r0, [pc, #204]	; (8000eb0 <HAL_SPI_MspInit+0x194>)
 8000de2:	f000 fd71 	bl	80018c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2023      	movs	r0, #35	; 0x23
 8000dec:	f000 fd13 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000df0:	2023      	movs	r0, #35	; 0x23
 8000df2:	f000 fd2c 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000df6:	e051      	b.n	8000e9c <HAL_SPI_MspInit+0x180>
  else if(hspi->Instance==SPI2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <HAL_SPI_MspInit+0x198>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d14c      	bne.n	8000e9c <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_SPI_MspInit+0x18c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <HAL_SPI_MspInit+0x19c>)
 8000e66:	f000 fd2f 	bl	80018c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <HAL_SPI_MspInit+0x194>)
 8000e88:	f000 fd1e 	bl	80018c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2024      	movs	r0, #36	; 0x24
 8000e92:	f000 fcc0 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e96:	2024      	movs	r0, #36	; 0x24
 8000e98:	f000 fcd9 	bl	800184e <HAL_NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40003800 	.word	0x40003800
 8000eb8:	40020800 	.word	0x40020800

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0aa      	sub	sp, #168	; 0xa8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2284      	movs	r2, #132	; 0x84
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 f839 	bl	8005f54 <memset>
  if(huart->Instance==USART3)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <HAL_UART_MspInit+0xb4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d13c      	bne.n	8000f66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fe0e 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f06:	f7ff fe29 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_UART_MspInit+0xb8>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_UART_MspInit+0xb8>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_UART_MspInit+0xb8>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_UART_MspInit+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_UART_MspInit+0xb8>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_UART_MspInit+0xb8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f54:	2307      	movs	r3, #7
 8000f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_UART_MspInit+0xbc>)
 8000f62:	f000 fcb1 	bl	80018c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	37a8      	adds	r7, #168	; 0xa8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40004800 	.word	0x40004800
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020c00 	.word	0x40020c00

08000f7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ac      	sub	sp, #176	; 0xb0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 0318 	add.w	r3, r7, #24
 8000f98:	2284      	movs	r2, #132	; 0x84
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 ffd9 	bl	8005f54 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000faa:	d159      	bne.n	8001060 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fdad 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fc8:	f7ff fdc8 	bl	8000b5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fe4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ffe:	230a      	movs	r3, #10
 8001000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001008:	4619      	mov	r1, r3
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <HAL_PCD_MspInit+0xf0>)
 800100c:	f000 fc5c 	bl	80018c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001028:	4619      	mov	r1, r3
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <HAL_PCD_MspInit+0xf0>)
 800102c:	f000 fc4c 	bl	80018c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8001032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8001036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103a:	6353      	str	r3, [r2, #52]	; 0x34
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_PCD_MspInit+0xec>)
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_PCD_MspInit+0xec>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_PCD_MspInit+0xec>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6453      	str	r3, [r2, #68]	; 0x44
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	37b0      	adds	r7, #176	; 0xb0
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 fa8c 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <I2C1_EV_IRQHandler+0x10>)
 80010ca:	f000 fe53 	bl	8001d74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000084 	.word	0x20000084

080010d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <I2C2_EV_IRQHandler+0x10>)
 80010de:	f000 fe49 	bl	8001d74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000d8 	.word	0x200000d8

080010ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <SPI1_IRQHandler+0x10>)
 80010f2:	f002 ffbf 	bl	8004074 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000012c 	.word	0x2000012c

08001100 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <SPI2_IRQHandler+0x10>)
 8001106:	f002 ffb5 	bl	8004074 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000190 	.word	0x20000190

08001114 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e00a      	b.n	800113c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001126:	f3af 8000 	nop.w
 800112a:	4601      	mov	r1, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbf0      	blt.n	8001126 <_read+0x12>
  }

  return len;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e009      	b.n	8001174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf1      	blt.n	8001160 <_write+0x12>
  }
  return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
  return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_isatty>:

int _isatty(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f004 fee6 	bl	8005ff0 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20050000 	.word	0x20050000
 8001250:	00000400 	.word	0x00000400
 8001254:	20000784 	.word	0x20000784
 8001258:	200009a0 	.word	0x200009a0

0800125c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001286:	490e      	ldr	r1, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800129c:	4c0b      	ldr	r4, [pc, #44]	; (80012cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012aa:	f7ff ffd7 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f004 fea5 	bl	8005ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff f97b 	bl	80005ac <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012c4:	08006c30 	.word	0x08006c30
  ldr r2, =_sbss
 80012c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012cc:	2000099c 	.word	0x2000099c

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>
	...

080012d4 <ex2>:
//			uart4_flag_callback	=0;
//		}
//	}
//}

void ex2(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	; 0x50
 80012d8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	unsigned int message_len = get_console_message(msg, BUFF_SIZE);
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	4840      	ldr	r0, [pc, #256]	; (80013e0 <ex2+0x10c>)
 80012de:	f000 f899 	bl	8001414 <get_console_message>
 80012e2:	64f8      	str	r0, [r7, #76]	; 0x4c
//	unsigned int message_len = 2;
//	msg[0] = 0xF0;
//	msg[1] = 0xF;

	int i = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
	flag_2 = 0;
 80012e8:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <ex2+0x110>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
	status = HAL_SPI_Receive_IT(SPI_2_SLAVE, buff2 + i, message_len);
 80012ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f0:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <ex2+0x114>)
 80012f2:	4413      	add	r3, r2
 80012f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012f6:	b292      	uxth	r2, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	483c      	ldr	r0, [pc, #240]	; (80013ec <ex2+0x118>)
 80012fc:	f002 fd5a 	bl	8003db4 <HAL_SPI_Receive_IT>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status != HAL_OK) {
 8001306:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <ex2+0x40>
		printf("Failed to setup receive S\n");
 800130e:	4838      	ldr	r0, [pc, #224]	; (80013f0 <ex2+0x11c>)
 8001310:	f004 fd40 	bl	8005d94 <puts>
	}
	status = HAL_SPI_Transmit(SPI_1_MASTER, msg + i, message_len, HAL_MAX_DELAY);
 8001314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <ex2+0x10c>)
 8001318:	1899      	adds	r1, r3, r2
 800131a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131c:	b29a      	uxth	r2, r3
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	4834      	ldr	r0, [pc, #208]	; (80013f4 <ex2+0x120>)
 8001324:	f002 f895 	bl	8003452 <HAL_SPI_Transmit>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status != HAL_OK) {
 800132e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <ex2+0x68>
		printf("Failed to transmit data M->S\n");
 8001336:	4830      	ldr	r0, [pc, #192]	; (80013f8 <ex2+0x124>)
 8001338:	f004 fd2c 	bl	8005d94 <puts>
	}
	while(!flag_2);
 800133c:	bf00      	nop
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <ex2+0x110>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0fb      	beq.n	800133e <ex2+0x6a>
	flag_2 = 0;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <ex2+0x110>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
	flag_1 = 0;
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <ex2+0x128>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
	printf("Slave got message %s\n", buff2);
 8001352:	4925      	ldr	r1, [pc, #148]	; (80013e8 <ex2+0x114>)
 8001354:	482a      	ldr	r0, [pc, #168]	; (8001400 <ex2+0x12c>)
 8001356:	f004 fcb7 	bl	8005cc8 <iprintf>
	uint8_t tmp[BUFF_SIZE] = { '\0' };
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	223c      	movs	r2, #60	; 0x3c
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f004 fdf4 	bl	8005f54 <memset>
	status = HAL_SPI_TransmitReceive_IT(SPI_2_SLAVE, buff2 + i, tmp + i, message_len);
 800136c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800136e:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <ex2+0x114>)
 8001370:	1899      	adds	r1, r3, r2
 8001372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001374:	1d3a      	adds	r2, r7, #4
 8001376:	441a      	add	r2, r3
 8001378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137a:	b29b      	uxth	r3, r3
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <ex2+0x118>)
 800137e:	f002 fdc9 	bl	8003f14 <HAL_SPI_TransmitReceive_IT>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status != HAL_OK) {
 8001388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <ex2+0xc2>
		printf("Failed to transmit data S->M\n");
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <ex2+0x130>)
 8001392:	f004 fcff 	bl	8005d94 <puts>
	}
	status = HAL_SPI_Receive(SPI_1_MASTER, buff1 + i, message_len, HAL_MAX_DELAY);
 8001396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <ex2+0x134>)
 800139a:	1899      	adds	r1, r3, r2
 800139c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	4813      	ldr	r0, [pc, #76]	; (80013f4 <ex2+0x120>)
 80013a6:	f002 f9c2 	bl	800372e <HAL_SPI_Receive>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status != HAL_OK) {
 80013b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <ex2+0xea>
		printf("Failed to setup receive M\n");
 80013b8:	4814      	ldr	r0, [pc, #80]	; (800140c <ex2+0x138>)
 80013ba:	f004 fceb 	bl	8005d94 <puts>
	}
	while(!flag_1);
 80013be:	bf00      	nop
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <ex2+0x128>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0fb      	beq.n	80013c0 <ex2+0xec>
	flag_1 = 0;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <ex2+0x128>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
	printf("Master got message %s\n", buff1);
 80013ce:	490e      	ldr	r1, [pc, #56]	; (8001408 <ex2+0x134>)
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <ex2+0x13c>)
 80013d2:	f004 fc79 	bl	8005cc8 <iprintf>
}
 80013d6:	bf00      	nop
 80013d8:	3750      	adds	r7, #80	; 0x50
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000080c 	.word	0x2000080c
 80013e4:	20000789 	.word	0x20000789
 80013e8:	200007cc 	.word	0x200007cc
 80013ec:	20000190 	.word	0x20000190
 80013f0:	08006a7c 	.word	0x08006a7c
 80013f4:	2000012c 	.word	0x2000012c
 80013f8:	08006a98 	.word	0x08006a98
 80013fc:	20000788 	.word	0x20000788
 8001400:	08006ab8 	.word	0x08006ab8
 8001404:	08006ad0 	.word	0x08006ad0
 8001408:	2000078c 	.word	0x2000078c
 800140c:	08006af0 	.word	0x08006af0
 8001410:	08006b0c 	.word	0x08006b0c

08001414 <get_console_message>:
		}

	}
}

unsigned int get_console_message(uint8_t* buff, uint32_t buff_size){
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	int i=0;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
	unsigned int message_len=0;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
	status= HAL_UART_Transmit(UART_DEBUG, (const uint8_t*)"Please enter a message (1024 character maximum):\r\nReceived message: ", strlen("Please enter a message (1024 character maximum):\r\nReceived message: "),HAL_MAX_DELAY);
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	2244      	movs	r2, #68	; 0x44
 800142c:	4932      	ldr	r1, [pc, #200]	; (80014f8 <get_console_message+0xe4>)
 800142e:	4833      	ldr	r0, [pc, #204]	; (80014fc <get_console_message+0xe8>)
 8001430:	f003 fb5a 	bl	8004ae8 <HAL_UART_Transmit>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <get_console_message+0x38>
	{
		printf("UART_Transmit failed with status: %d", status);
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	4619      	mov	r1, r3
 8001442:	482f      	ldr	r0, [pc, #188]	; (8001500 <get_console_message+0xec>)
 8001444:	f004 fc40 	bl	8005cc8 <iprintf>
		return 0;
 8001448:	2300      	movs	r3, #0
 800144a:	e051      	b.n	80014f0 <get_console_message+0xdc>
	}
	while(1){
		status=HAL_UART_Receive(UART_DEBUG, (uint8_t*) buff+i , PACKET_SIZE, HAL_MAX_DELAY);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d1      	adds	r1, r2, r3
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2201      	movs	r2, #1
 8001458:	4828      	ldr	r0, [pc, #160]	; (80014fc <get_console_message+0xe8>)
 800145a:	f003 fbc8 	bl	8004bee <HAL_UART_Receive>
 800145e:	4603      	mov	r3, r0
 8001460:	73fb      	strb	r3, [r7, #15]
		if(status != HAL_OK)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <get_console_message+0x62>
		{
			printf("UART_Receive failed with status: %d", status);
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	4619      	mov	r1, r3
 800146c:	4825      	ldr	r0, [pc, #148]	; (8001504 <get_console_message+0xf0>)
 800146e:	f004 fc2b 	bl	8005cc8 <iprintf>
			return 0;
 8001472:	2300      	movs	r3, #0
 8001474:	e03c      	b.n	80014f0 <get_console_message+0xdc>
		}
		if (buff[i]=='\r' || i>= BUFF_SIZE-1){
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b0d      	cmp	r3, #13
 8001480:	d002      	beq.n	8001488 <get_console_message+0x74>
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b3e      	cmp	r3, #62	; 0x3e
 8001486:	dd1a      	ble.n	80014be <get_console_message+0xaa>
			status= HAL_UART_Transmit(UART_DEBUG, (const uint8_t*)"\n\r", strlen("\n\r"),HAL_MAX_DELAY);
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	2202      	movs	r2, #2
 800148e:	491e      	ldr	r1, [pc, #120]	; (8001508 <get_console_message+0xf4>)
 8001490:	481a      	ldr	r0, [pc, #104]	; (80014fc <get_console_message+0xe8>)
 8001492:	f003 fb29 	bl	8004ae8 <HAL_UART_Transmit>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
			if(status != HAL_OK)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <get_console_message+0x9a>
			{
				printf("UART_Transmit failed with status: %d", status);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <get_console_message+0xec>)
 80014a6:	f004 fc0f 	bl	8005cc8 <iprintf>
				return 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e020      	b.n	80014f0 <get_console_message+0xdc>
			}
			message_len=i+1;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
			i=0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
			break;
 80014b8:	bf00      	nop
			return 0;
		}
		i++;

	}
	return message_len;
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	e018      	b.n	80014f0 <get_console_message+0xdc>
		status= HAL_UART_Transmit(UART_DEBUG, (uint8_t*)buff+i,PACKET_SIZE,HAL_MAX_DELAY);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	18d1      	adds	r1, r2, r3
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	2201      	movs	r2, #1
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <get_console_message+0xe8>)
 80014cc:	f003 fb0c 	bl	8004ae8 <HAL_UART_Transmit>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
		if(status != HAL_OK)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <get_console_message+0xd4>
			printf("UART_Transmit failed with status: %d", status);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4619      	mov	r1, r3
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <get_console_message+0xec>)
 80014e0:	f004 fbf2 	bl	8005cc8 <iprintf>
			return 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e003      	b.n	80014f0 <get_console_message+0xdc>
		i++;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3301      	adds	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
		status=HAL_UART_Receive(UART_DEBUG, (uint8_t*) buff+i , PACKET_SIZE, HAL_MAX_DELAY);
 80014ee:	e7ad      	b.n	800144c <get_console_message+0x38>


}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	08006b3c 	.word	0x08006b3c
 80014fc:	200001f4 	.word	0x200001f4
 8001500:	08006b84 	.word	0x08006b84
 8001504:	08006bac 	.word	0x08006bac
 8001508:	08006bd0 	.word	0x08006bd0

0800150c <HAL_SPI_RxCpltCallback>:
		flag_1=1;
	}
}


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_2_SLAVE){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_SPI_RxCpltCallback+0x34>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d103      	bne.n	8001524 <HAL_SPI_RxCpltCallback+0x18>
		flag_2=1;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_SPI_RxCpltCallback+0x38>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
	}
	else if (hspi == SPI_1_MASTER){
		flag_1=1;
	}
}
 8001522:	e006      	b.n	8001532 <HAL_SPI_RxCpltCallback+0x26>
	else if (hspi == SPI_1_MASTER){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_SPI_RxCpltCallback+0x3c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d102      	bne.n	8001532 <HAL_SPI_RxCpltCallback+0x26>
		flag_1=1;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_SPI_RxCpltCallback+0x40>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000190 	.word	0x20000190
 8001544:	20000789 	.word	0x20000789
 8001548:	2000012c 	.word	0x2000012c
 800154c:	20000788 	.word	0x20000788

08001550 <hw_main>:

void hw_main(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	ex2();
 8001554:	f7ff febe 	bl	80012d4 <ex2>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f94d 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 f806 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fafc 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f967 	bl	800186a <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f92f 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008
 80015fc:	2000084c 	.word	0x2000084c

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	2000084c 	.word	0x2000084c

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff8e 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff29 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff3e 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff8e 	bl	8001754 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5d 	bl	8001700 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff31 	bl	80016c4 <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffa2 	bl	80017bc <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d004      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e00c      	b.n	80018ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2205      	movs	r2, #5
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e175      	b.n	8001bd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	429a      	cmp	r2, r3
 8001902:	f040 8164 	bne.w	8001bce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d005      	beq.n	800191e <HAL_GPIO_Init+0x56>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d130      	bne.n	8001980 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 0201 	and.w	r2, r3, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b03      	cmp	r3, #3
 800198a:	d017      	beq.n	80019bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d123      	bne.n	8001a10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	08da      	lsrs	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3208      	adds	r2, #8
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0203 	and.w	r2, r3, #3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80be 	beq.w	8001bce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a65      	ldr	r2, [pc, #404]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a6a:	4a61      	ldr	r2, [pc, #388]	; (8001bf0 <HAL_GPIO_Init+0x328>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_GPIO_Init+0x32c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d037      	beq.n	8001b06 <HAL_GPIO_Init+0x23e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_GPIO_Init+0x330>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <HAL_GPIO_Init+0x23a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x334>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d02b      	beq.n	8001afe <HAL_GPIO_Init+0x236>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a55      	ldr	r2, [pc, #340]	; (8001c00 <HAL_GPIO_Init+0x338>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d025      	beq.n	8001afa <HAL_GPIO_Init+0x232>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <HAL_GPIO_Init+0x33c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01f      	beq.n	8001af6 <HAL_GPIO_Init+0x22e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a53      	ldr	r2, [pc, #332]	; (8001c08 <HAL_GPIO_Init+0x340>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0x22a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_GPIO_Init+0x344>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0x226>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a51      	ldr	r2, [pc, #324]	; (8001c10 <HAL_GPIO_Init+0x348>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00d      	beq.n	8001aea <HAL_GPIO_Init+0x222>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	; (8001c14 <HAL_GPIO_Init+0x34c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_GPIO_Init+0x21e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_GPIO_Init+0x350>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_GPIO_Init+0x21a>
 8001ade:	2309      	movs	r3, #9
 8001ae0:	e012      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	e010      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	e00e      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00c      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001aee:	2306      	movs	r3, #6
 8001af0:	e00a      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e008      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e004      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_GPIO_Init+0x240>
 8001b06:	2300      	movs	r3, #0
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f002 0203 	and.w	r2, r2, #3
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	4093      	lsls	r3, r2
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b18:	4935      	ldr	r1, [pc, #212]	; (8001bf0 <HAL_GPIO_Init+0x328>)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4a:	4a34      	ldr	r2, [pc, #208]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b50:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b74:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9e:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <HAL_GPIO_Init+0x354>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	f67f ae86 	bls.w	80018e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40021400 	.word	0x40021400
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40021c00 	.word	0x40021c00
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40022400 	.word	0x40022400
 8001c1c:	40013c00 	.word	0x40013c00

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e07f      	b.n	8001d66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe ff98 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	e006      	b.n	8001cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d104      	bne.n	8001cee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_I2C_Init+0x11c>)
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	02008000 	.word	0x02008000

08001d74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
  }
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d138      	bne.n	8001e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e032      	b.n	8001e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d139      	bne.n	8001ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e033      	b.n	8001eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2224      	movs	r2, #36	; 0x24
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed8:	b08f      	sub	sp, #60	; 0x3c
 8001eda:	af0a      	add	r7, sp, #40	; 0x28
 8001edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e116      	b.n	8002116 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff f83a 	bl	8000f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fb82 	bl	8005630 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	687e      	ldr	r6, [r7, #4]
 8001f34:	466d      	mov	r5, sp
 8001f36:	f106 0410 	add.w	r4, r6, #16
 8001f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f4a:	1d33      	adds	r3, r6, #4
 8001f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4e:	6838      	ldr	r0, [r7, #0]
 8001f50:	f003 fb16 	bl	8005580 <USB_CoreInit>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0d7      	b.n	8002116 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fb70 	bl	8005652 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e04a      	b.n	800200e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	333d      	adds	r3, #61	; 0x3d
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	333c      	adds	r3, #60	; 0x3c
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	b298      	uxth	r0, r3
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3344      	adds	r3, #68	; 0x44
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3340      	adds	r3, #64	; 0x40
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3348      	adds	r3, #72	; 0x48
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	334c      	adds	r3, #76	; 0x4c
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3354      	adds	r3, #84	; 0x54
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3af      	bcc.n	8001f78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e044      	b.n	80020a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	3301      	adds	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d3b5      	bcc.n	800201e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	687e      	ldr	r6, [r7, #4]
 80020ba:	466d      	mov	r5, sp
 80020bc:	f106 0410 	add.w	r4, r6, #16
 80020c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d0:	1d33      	adds	r3, r6, #4
 80020d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d4:	6838      	ldr	r0, [r7, #0]
 80020d6:	f003 fb09 	bl	80056ec <USB_DevInit>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e014      	b.n	8002116 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2b01      	cmp	r3, #1
 8002102:	d102      	bne.n	800210a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f80b 	bl	8002120 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fcc7 	bl	8005aa2 <USB_DevDisconnect>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_PCDEx_ActivateLPM+0x44>)
 8002150:	4313      	orrs	r3, r2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	10000003 	.word	0x10000003

08002168 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40007000 	.word	0x40007000

08002188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e291      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8087 	beq.w	80022ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	4b96      	ldr	r3, [pc, #600]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d00c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b8:	4b93      	ldr	r3, [pc, #588]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d112      	bne.n	80021ea <HAL_RCC_OscConfig+0x62>
 80021c4:	4b90      	ldr	r3, [pc, #576]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d0:	d10b      	bne.n	80021ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d06c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x130>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d168      	bne.n	80022b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e26b      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x7a>
 80021f4:	4b84      	ldr	r3, [pc, #528]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a83      	ldr	r2, [pc, #524]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e02e      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x9c>
 800220a:	4b7f      	ldr	r3, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7e      	ldr	r2, [pc, #504]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7b      	ldr	r2, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e01d      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0xc0>
 800222e:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a75      	ldr	r2, [pc, #468]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a72      	ldr	r2, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xd8>
 8002248:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6e      	ldr	r2, [pc, #440]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6b      	ldr	r2, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f9ca 	bl	8001600 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff f9c6 	bl	8001600 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e21f      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b61      	ldr	r3, [pc, #388]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0xe8>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f9b6 	bl	8001600 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff f9b2 	bl	8001600 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e20b      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x110>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d069      	beq.n	800239a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c6:	4b50      	ldr	r3, [pc, #320]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d2:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x190>
 80022de:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x17a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1df      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	493d      	ldr	r1, [pc, #244]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	e040      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a38      	ldr	r2, [pc, #224]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff f968 	bl	8001600 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002334:	f7ff f964 	bl	8001600 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1bd      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4929      	ldr	r1, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
 8002366:	e018      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a26      	ldr	r2, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f944 	bl	8001600 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff f940 	bl	8001600 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e199      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d038      	beq.n	8002418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d019      	beq.n	80023e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7ff f921 	bl	8001600 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff f91d 	bl	8001600 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e176      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x23a>
 80023e0:	e01a      	b.n	8002418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_RCC_OscConfig+0x280>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7ff f907 	bl	8001600 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f6:	f7ff f903 	bl	8001600 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d903      	bls.n	800240c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e15c      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
 8002408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	4b91      	ldr	r3, [pc, #580]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a4 	beq.w	800256e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a87      	ldr	r2, [pc, #540]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b85      	ldr	r3, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4b82      	ldr	r3, [pc, #520]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800245a:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7e      	ldr	r2, [pc, #504]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7ff f8cb 	bl	8001600 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7ff f8c7 	bl	8001600 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e120      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002480:	4b75      	ldr	r3, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x31a>
 8002494:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a6e      	ldr	r2, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x33c>
 80024aa:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a69      	ldr	r2, [pc, #420]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a66      	ldr	r2, [pc, #408]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x35e>
 80024cc:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a60      	ldr	r2, [pc, #384]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	4b5e      	ldr	r3, [pc, #376]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
 80024e6:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a5a      	ldr	r2, [pc, #360]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	4b58      	ldr	r3, [pc, #352]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a57      	ldr	r2, [pc, #348]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff f87b 	bl	8001600 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff f877 	bl	8001600 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0ce      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x386>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff f865 	bl	8001600 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff f861 	bl	8001600 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a3b      	ldr	r2, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80a4 	beq.w	80026c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d06b      	beq.n	800265c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d149      	bne.n	8002620 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a30      	ldr	r2, [pc, #192]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff f832 	bl	8001600 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7ff f82e 	bl	8001600 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e087      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	019b      	lsls	r3, r3, #6
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	4313      	orrs	r3, r2
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a18      	ldr	r2, [pc, #96]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff f802 	bl	8001600 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7fe fffe 	bl	8001600 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e057      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x478>
 800261e:	e04f      	b.n	80026c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe ffe8 	bl	8001600 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe ffe4 	bl	8001600 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e03d      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x4ac>
 8002652:	e035      	b.n	80026c0 <HAL_RCC_OscConfig+0x538>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x544>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d028      	beq.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d121      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11a      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002692:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002694:	4293      	cmp	r3, r2
 8002696:	d111      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 020f 	bic.w	r2, r3, #15
 80026fe:	4965      	ldr	r1, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d115      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e073      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c4:	f7fe ff1c 	bl	8001600 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe ff18 	bl	8001600 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e053      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 020f 	bic.w	r2, r3, #15
 800280a:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x1cc>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1d0>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fe78 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	08006bd4 	.word	0x08006bd4
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b094      	sub	sp, #80	; 0x50
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	647b      	str	r3, [r7, #68]	; 0x44
 80028b4:	2300      	movs	r3, #0
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80e1 	bhi.w	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e0db      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e0:	e0db      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e6:	e0d8      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
 8002908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 8002912:	2300      	movs	r3, #0
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
 8002916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292c:	0150      	lsls	r0, r2, #5
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4621      	mov	r1, r4
 8002934:	1a51      	subs	r1, r2, r1
 8002936:	6139      	str	r1, [r7, #16]
 8002938:	4629      	mov	r1, r5
 800293a:	eb63 0301 	sbc.w	r3, r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	018b      	lsls	r3, r1, #6
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002956:	4651      	mov	r1, sl
 8002958:	018a      	lsls	r2, r1, #6
 800295a:	4651      	mov	r1, sl
 800295c:	ebb2 0801 	subs.w	r8, r2, r1
 8002960:	4659      	mov	r1, fp
 8002962:	eb63 0901 	sbc.w	r9, r3, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
 800297e:	4623      	mov	r3, r4
 8002980:	eb18 0303 	adds.w	r3, r8, r3
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	462b      	mov	r3, r5
 8002988:	eb49 0303 	adc.w	r3, r9, r3
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299a:	4629      	mov	r1, r5
 800299c:	024b      	lsls	r3, r1, #9
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a4:	4621      	mov	r1, r4
 80029a6:	024a      	lsls	r2, r1, #9
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029b8:	f7fd fc7a 	bl	80002b0 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	2200      	movs	r2, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	4611      	mov	r1, r2
 80029d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	0159      	lsls	r1, r3, #5
 80029ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f2:	0150      	lsls	r0, r2, #5
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4641      	mov	r1, r8
 80029fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fe:	4649      	mov	r1, r9
 8002a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a18:	ebb2 040a 	subs.w	r4, r2, sl
 8002a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	00eb      	lsls	r3, r5, #3
 8002a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	4614      	mov	r4, r2
 8002a32:	461d      	mov	r5, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	18e3      	adds	r3, r4, r3
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	eb45 0303 	adc.w	r3, r5, r3
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	028b      	lsls	r3, r1, #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a58:	4621      	mov	r1, r4
 8002a5a:	028a      	lsls	r2, r1, #10
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	61fa      	str	r2, [r7, #28]
 8002a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a6c:	f7fd fc20 	bl	80002b0 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3750      	adds	r7, #80	; 0x50
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08006be4 	.word	0x08006be4

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af8:	f7ff ffdc 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08006be4 	.word	0x08006be4

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d012      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b44:	4b69      	ldr	r3, [pc, #420]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a68      	ldr	r2, [pc, #416]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	4b66      	ldr	r3, [pc, #408]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	4964      	ldr	r1, [pc, #400]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	4959      	ldr	r1, [pc, #356]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	494a      	ldr	r1, [pc, #296]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 808b 	beq.w	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a39      	ldr	r2, [pc, #228]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0c:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a34      	ldr	r2, [pc, #208]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe fcec 	bl	8001600 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2c:	f7fe fce8 	bl	8001600 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e357      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d035      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d02e      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c68:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a1a      	ldr	r2, [pc, #104]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d114      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fcb0 	bl	8001600 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fcac 	bl	8001600 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e319      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ee      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cd2:	d111      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	4901      	ldr	r1, [pc, #4]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	0ffffcff 	.word	0x0ffffcff
 8002cf8:	4baa      	ldr	r3, [pc, #680]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4aa9      	ldr	r2, [pc, #676]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d02:	6093      	str	r3, [r2, #8]
 8002d04:	4ba7      	ldr	r3, [pc, #668]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	49a4      	ldr	r1, [pc, #656]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d22:	4ba0      	ldr	r3, [pc, #640]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d28:	4a9e      	ldr	r2, [pc, #632]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d32:	4b9c      	ldr	r3, [pc, #624]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	4999      	ldr	r1, [pc, #612]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d50:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5e:	4991      	ldr	r1, [pc, #580]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d72:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d80:	4988      	ldr	r1, [pc, #544]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d94:	4b83      	ldr	r3, [pc, #524]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	4980      	ldr	r1, [pc, #512]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002db6:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	4977      	ldr	r1, [pc, #476]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd8:	4b72      	ldr	r3, [pc, #456]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	496f      	ldr	r1, [pc, #444]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f023 020c 	bic.w	r2, r3, #12
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	4966      	ldr	r1, [pc, #408]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	495e      	ldr	r1, [pc, #376]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3e:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	4955      	ldr	r1, [pc, #340]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e82:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4944      	ldr	r1, [pc, #272]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	493c      	ldr	r1, [pc, #240]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	4933      	ldr	r1, [pc, #204]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef6:	492b      	ldr	r1, [pc, #172]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f18:	4922      	ldr	r1, [pc, #136]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f28:	d101      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	4912      	ldr	r1, [pc, #72]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7c:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d006      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80d9 	beq.w	800314a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f98:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a01      	ldr	r2, [pc, #4]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fa2:	e001      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002faa:	f7fe fb29 	bl	8001600 <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fb2:	f7fe fb25 	bl	8001600 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e194      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d021      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11d      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fea:	0c1b      	lsrs	r3, r3, #16
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff8:	0e1b      	lsrs	r3, r3, #24
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	019a      	lsls	r2, r3, #6
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	071b      	lsls	r3, r3, #28
 8003018:	4957      	ldr	r1, [pc, #348]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02e      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304a:	d129      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800304c:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003060:	0f1b      	lsrs	r3, r3, #28
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	019a      	lsls	r2, r3, #6
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	431a      	orrs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	071b      	lsls	r3, r3, #28
 8003080:	493d      	ldr	r1, [pc, #244]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308e:	f023 021f 	bic.w	r2, r3, #31
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	3b01      	subs	r3, #1
 8003098:	4937      	ldr	r1, [pc, #220]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01d      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ac:	4b32      	ldr	r3, [pc, #200]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b2:	0e1b      	lsrs	r3, r3, #24
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030ba:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0f1b      	lsrs	r3, r3, #28
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	019a      	lsls	r2, r3, #6
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	071b      	lsls	r3, r3, #28
 80030e0:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d011      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	019a      	lsls	r2, r3, #6
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	071b      	lsls	r3, r3, #28
 8003110:	4919      	ldr	r1, [pc, #100]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fe fa6c 	bl	8001600 <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800312c:	f7fe fa68 	bl	8001600 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0d7      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800313e:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b01      	cmp	r3, #1
 800314e:	f040 80cd 	bne.w	80032ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315e:	f7fe fa4f 	bl	8001600 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003166:	f7fe fa4b 	bl	8001600 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	; 0x64
 8003172:	d903      	bls.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0ba      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003178:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800317c:	4b5e      	ldr	r3, [pc, #376]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003188:	d0ed      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02e      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d12a      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031b2:	4b51      	ldr	r3, [pc, #324]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031c0:	4b4d      	ldr	r3, [pc, #308]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	0f1b      	lsrs	r3, r3, #28
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	019a      	lsls	r2, r3, #6
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	061b      	lsls	r3, r3, #24
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	071b      	lsls	r3, r3, #28
 80031e6:	4944      	ldr	r1, [pc, #272]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031ee:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	493d      	ldr	r1, [pc, #244]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d022      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321c:	d11d      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	0e1b      	lsrs	r3, r3, #24
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800322c:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	0f1b      	lsrs	r3, r3, #28
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	019a      	lsls	r2, r3, #6
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	071b      	lsls	r3, r3, #28
 8003252:	4929      	ldr	r1, [pc, #164]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d028      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	0e1b      	lsrs	r3, r3, #24
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	019a      	lsls	r2, r3, #6
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	071b      	lsls	r3, r3, #28
 800329a:	4917      	ldr	r1, [pc, #92]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4911      	ldr	r1, [pc, #68]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fe f99c 	bl	8001600 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032cc:	f7fe f998 	bl	8001600 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e007      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ea:	d1ef      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e09d      	b.n	800344a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d009      	beq.n	8003334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
 8003326:	e005      	b.n	8003334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fce4 	bl	8000d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003374:	d902      	bls.n	800337c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e002      	b.n	8003382 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800337c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003380:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800338a:	d007      	beq.n	800339c <HAL_SPI_Init+0xa0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003394:	d002      	beq.n	800339c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	f003 0204 	and.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003418:	ea42 0103 	orr.w	r1, r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003438:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b088      	sub	sp, #32
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_SPI_Transmit+0x22>
 8003470:	2302      	movs	r3, #2
 8003472:	e158      	b.n	8003726 <HAL_SPI_Transmit+0x2d4>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800347c:	f7fe f8c0 	bl	8001600 <HAL_GetTick>
 8003480:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003496:	e13d      	b.n	8003714 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Transmit+0x52>
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034a8:	e134      	b.n	8003714 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2203      	movs	r2, #3
 80034ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f4:	d10f      	bne.n	8003516 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003504:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003514:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d007      	beq.n	8003534 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800353c:	d94b      	bls.n	80035d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_SPI_Transmit+0xfa>
 8003546:	8afb      	ldrh	r3, [r7, #22]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d13e      	bne.n	80035ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	881a      	ldrh	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	1c9a      	adds	r2, r3, #2
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003570:	e02b      	b.n	80035ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d112      	bne.n	80035a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	1c9a      	adds	r2, r3, #2
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a4:	e011      	b.n	80035ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a6:	f7fe f82b 	bl	8001600 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d803      	bhi.n	80035be <HAL_SPI_Transmit+0x16c>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d102      	bne.n	80035c4 <HAL_SPI_Transmit+0x172>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035c8:	e0a4      	b.n	8003714 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ce      	bne.n	8003572 <HAL_SPI_Transmit+0x120>
 80035d4:	e07c      	b.n	80036d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Transmit+0x192>
 80035de:	8afb      	ldrh	r3, [r7, #22]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d170      	bne.n	80036c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d912      	bls.n	8003614 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	881a      	ldrh	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	1c9a      	adds	r2, r3, #2
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b02      	subs	r3, #2
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003612:	e058      	b.n	80036c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800363a:	e044      	b.n	80036c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d12b      	bne.n	80036a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d912      	bls.n	800367a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	881a      	ldrh	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	1c9a      	adds	r2, r3, #2
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b02      	subs	r3, #2
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003678:	e025      	b.n	80036c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a0:	e011      	b.n	80036c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a2:	f7fd ffad 	bl	8001600 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d803      	bhi.n	80036ba <HAL_SPI_Transmit+0x268>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_Transmit+0x26e>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c4:	e026      	b.n	8003714 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1b5      	bne.n	800363c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f001 f8dd 	bl	8004894 <SPI_EndRxTxTransaction>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e000      	b.n	8003714 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003724:	7ffb      	ldrb	r3, [r7, #31]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b088      	sub	sp, #32
 8003732:	af02      	add	r7, sp, #8
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800374a:	d112      	bne.n	8003772 <HAL_SPI_Receive+0x44>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10e      	bne.n	8003772 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2204      	movs	r2, #4
 8003758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f910 	bl	800398e <HAL_SPI_TransmitReceive>
 800376e:	4603      	mov	r3, r0
 8003770:	e109      	b.n	8003986 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_Receive+0x52>
 800377c:	2302      	movs	r3, #2
 800377e:	e102      	b.n	8003986 <HAL_SPI_Receive+0x258>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003788:	f7fd ff3a 	bl	8001600 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d002      	beq.n	80037a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800379e:	e0e9      	b.n	8003974 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_SPI_Receive+0x7e>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037b0:	e0e0      	b.n	8003974 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2204      	movs	r2, #4
 80037b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037fc:	d908      	bls.n	8003810 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	e007      	b.n	8003820 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800381e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003828:	d10f      	bne.n	800384a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003838:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d007      	beq.n	8003868 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003870:	d867      	bhi.n	8003942 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003872:	e030      	b.n	80038d6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d117      	bne.n	80038b2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f103 020c 	add.w	r2, r3, #12
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	7812      	ldrb	r2, [r2, #0]
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80038b0:	e011      	b.n	80038d6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b2:	f7fd fea5 	bl	8001600 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d803      	bhi.n	80038ca <HAL_SPI_Receive+0x19c>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Receive+0x1a2>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038d4:	e04e      	b.n	8003974 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1c8      	bne.n	8003874 <HAL_SPI_Receive+0x146>
 80038e2:	e034      	b.n	800394e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d115      	bne.n	800391e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	b292      	uxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800391c:	e011      	b.n	8003942 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391e:	f7fd fe6f 	bl	8001600 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d803      	bhi.n	8003936 <HAL_SPI_Receive+0x208>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d102      	bne.n	800393c <HAL_SPI_Receive+0x20e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003940:	e018      	b.n	8003974 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ca      	bne.n	80038e4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 ff22 	bl	800479c <SPI_EndRxTransaction>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
 8003970:	e000      	b.n	8003974 <HAL_SPI_Receive+0x246>
  }

error :
 8003972:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b08a      	sub	sp, #40	; 0x28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800399c:	2301      	movs	r3, #1
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x26>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e1fb      	b.n	8003dac <HAL_SPI_TransmitReceive+0x41e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039bc:	f7fd fe20 	bl	8001600 <HAL_GetTick>
 80039c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039d8:	7efb      	ldrb	r3, [r7, #27]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d00e      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x6e>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e4:	d106      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x66>
 80039ee:	7efb      	ldrb	r3, [r7, #27]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d003      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039fa:	e1cd      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x80>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x80>
 8003a08:	887b      	ldrh	r3, [r7, #2]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a14:	e1c0      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d003      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2205      	movs	r2, #5
 8003a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	887a      	ldrh	r2, [r7, #2]
 8003a42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	887a      	ldrh	r2, [r7, #2]
 8003a56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a6c:	d802      	bhi.n	8003a74 <HAL_SPI_TransmitReceive+0xe6>
 8003a6e:	8a3b      	ldrh	r3, [r7, #16]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d908      	bls.n	8003a86 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a82:	605a      	str	r2, [r3, #4]
 8003a84:	e007      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d007      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003abc:	d97c      	bls.n	8003bb8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x13e>
 8003ac6:	8a7b      	ldrh	r3, [r7, #18]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d169      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	881a      	ldrh	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af0:	e056      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d11b      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x1aa>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x1aa>
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d113      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	1c9a      	adds	r2, r3, #2
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d11c      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x1f2>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	b292      	uxth	r2, r2
 8003b5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b80:	f7fd fd3e 	bl	8001600 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d807      	bhi.n	8003ba0 <HAL_SPI_TransmitReceive+0x212>
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d003      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b9e:	e0fb      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1a3      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x164>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d19d      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x164>
 8003bb6:	e0df      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_SPI_TransmitReceive+0x23a>
 8003bc0:	8a7b      	ldrh	r3, [r7, #18]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	f040 80cb 	bne.w	8003d5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d912      	bls.n	8003bf8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b02      	subs	r3, #2
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bf6:	e0b2      	b.n	8003d5e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1e:	e09e      	b.n	8003d5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d134      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x30a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02f      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x30a>
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d12c      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d912      	bls.n	8003c6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	881a      	ldrh	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b02      	subs	r3, #2
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c6c:	e012      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d148      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x3aa>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d042      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d923      	bls.n	8003d06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	1c9a      	adds	r2, r3, #2
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b02      	subs	r3, #2
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d81f      	bhi.n	8003d34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	e016      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f103 020c 	add.w	r2, r3, #12
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d38:	f7fd fc62 	bl	8001600 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d803      	bhi.n	8003d50 <HAL_SPI_TransmitReceive+0x3c2>
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d102      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x3c8>
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d5c:	e01c      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f47f af5b 	bne.w	8003c20 <HAL_SPI_TransmitReceive+0x292>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f47f af54 	bne.w	8003c20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fd89 	bl	8004894 <SPI_EndRxTxTransaction>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	661a      	str	r2, [r3, #96]	; 0x60
 8003d94:	e000      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d110      	bne.n	8003df0 <HAL_SPI_Receive_IT+0x3c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd6:	d10b      	bne.n	8003df0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f894 	bl	8003f14 <HAL_SPI_TransmitReceive_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	e089      	b.n	8003f04 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_SPI_Receive_IT+0x4a>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e082      	b.n	8003f04 <HAL_SPI_Receive_IT+0x150>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
 8003e14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e16:	e070      	b.n	8003efa <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_SPI_Receive_IT+0x70>
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e28:	e067      	b.n	8003efa <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e6e:	d90b      	bls.n	8003e88 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e7e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_SPI_Receive_IT+0x158>)
 8003e84:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e86:	e00a      	b.n	8003e9e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e96:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <HAL_SPI_Receive_IT+0x15c>)
 8003e9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ec6:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003ed6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d008      	beq.n	8003ef8 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e000      	b.n	8003efa <HAL_SPI_Receive_IT+0x146>
  }

error :
 8003ef8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	08004515 	.word	0x08004515
 8003f10:	080044c5 	.word	0x080044c5

08003f14 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_SPI_TransmitReceive_IT+0x20>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e091      	b.n	8004058 <HAL_SPI_TransmitReceive_IT+0x144>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f42:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f4a:	7dbb      	ldrb	r3, [r7, #22]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d00d      	beq.n	8003f6c <HAL_SPI_TransmitReceive_IT+0x58>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f56:	d106      	bne.n	8003f66 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_SPI_TransmitReceive_IT+0x52>
 8003f60:	7dbb      	ldrb	r3, [r7, #22]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f6a:	e070      	b.n	800404e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_SPI_TransmitReceive_IT+0x6a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_TransmitReceive_IT+0x6a>
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f82:	e064      	b.n	800404e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d003      	beq.n	8003f98 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2205      	movs	r2, #5
 8003f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	887a      	ldrh	r2, [r7, #2]
 8003fae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fce:	d906      	bls.n	8003fde <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a24      	ldr	r2, [pc, #144]	; (8004064 <HAL_SPI_TransmitReceive_IT+0x150>)
 8003fd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50
 8003fdc:	e005      	b.n	8003fea <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <HAL_SPI_TransmitReceive_IT+0x158>)
 8003fe2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a22      	ldr	r2, [pc, #136]	; (8004070 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8003fe8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ff2:	d802      	bhi.n	8003ffa <HAL_SPI_TransmitReceive_IT+0xe6>
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d908      	bls.n	800400c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e007      	b.n	800401c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800401a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800402a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d008      	beq.n	800404c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e000      	b.n	800404e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800404c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	080043ff 	.word	0x080043ff
 8004068:	08004465 	.word	0x08004465
 800406c:	080042af 	.word	0x080042af
 8004070:	0800436d 	.word	0x0800436d

08004074 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10e      	bne.n	80040b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
    return;
 80040b2:	e0ce      	b.n	8004252 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_SPI_IRQHandler+0x5e>
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
    return;
 80040d0:	e0bf      	b.n	8004252 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <HAL_SPI_IRQHandler+0x7e>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d105      	bne.n	80040f2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80b0 	beq.w	8004252 <HAL_SPI_IRQHandler+0x1de>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80aa 	beq.w	8004252 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d023      	beq.n	8004150 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b03      	cmp	r3, #3
 8004112:	d011      	beq.n	8004138 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	e00b      	b.n	8004150 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]
        return;
 800414e:	e080      	b.n	8004252 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d014      	beq.n	8004184 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004192:	f043 0208 	orr.w	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d04f      	beq.n	8004250 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_SPI_IRQHandler+0x168>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d034      	beq.n	8004246 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0203 	bic.w	r2, r2, #3
 80041ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	4a17      	ldr	r2, [pc, #92]	; (8004258 <HAL_SPI_IRQHandler+0x1e4>)
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fb3e 	bl	8001882 <HAL_DMA_Abort_IT>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	2b00      	cmp	r3, #0
 800421e:	d016      	beq.n	800424e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <HAL_SPI_IRQHandler+0x1e4>)
 8004226:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	4618      	mov	r0, r3
 800422e:	f7fd fb28 	bl	8001882 <HAL_DMA_Abort_IT>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004244:	e003      	b.n	800424e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f812 	bl	8004270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800424c:	e000      	b.n	8004250 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800424e:	bf00      	nop
    return;
 8004250:	bf00      	nop
  }
}
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	08004285 	.word	0x08004285

0800425c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff ffe5 	bl	8004270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d923      	bls.n	800430a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	b292      	uxth	r2, r2
 80042ce:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b02      	subs	r3, #2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d11f      	bne.n	8004338 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	e016      	b.n	8004338 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f103 020c 	add.w	r2, r3, #12
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10f      	bne.n	8004364 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004352:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fb02 	bl	8004968 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d912      	bls.n	80043a4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	881a      	ldrh	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b02      	subs	r3, #2
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043a2:	e012      	b.n	80043ca <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d110      	bne.n	80043f6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fab9 	bl	8004968 <SPI_CloseRxTx_ISR>
    }
  }
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	b292      	uxth	r2, r2
 8004412:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10f      	bne.n	800445c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fa86 	bl	8004968 <SPI_CloseRxTx_ISR>
    }
  }
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	881a      	ldrh	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d110      	bne.n	80044bc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa56 	bl	8004968 <SPI_CloseRxTx_ISR>
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f103 020c 	add.w	r2, r3, #12
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa70 	bl	80049ec <SPI_CloseRx_ISR>
  }
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	b292      	uxth	r2, r2
 8004528:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	1c9a      	adds	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa4a 	bl	80049ec <SPI_CloseRx_ISR>
  }
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004570:	f7fd f846 	bl	8001600 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	4413      	add	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004580:	f7fd f83e 	bl	8001600 <HAL_GetTick>
 8004584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004586:	4b39      	ldr	r3, [pc, #228]	; (800466c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	015b      	lsls	r3, r3, #5
 800458c:	0d1b      	lsrs	r3, r3, #20
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	fb02 f303 	mul.w	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004596:	e054      	b.n	8004642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d050      	beq.n	8004642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045a0:	f7fd f82e 	bl	8001600 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d902      	bls.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d13d      	bne.n	8004632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ce:	d111      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d8:	d004      	beq.n	80045e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e2:	d107      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fc:	d10f      	bne.n	800461e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800461c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e017      	b.n	8004662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	3b01      	subs	r3, #1
 8004640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	429a      	cmp	r2, r3
 800465e:	d19b      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000000 	.word	0x20000000

08004670 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004682:	f7fc ffbd 	bl	8001600 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	4413      	add	r3, r2
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004692:	f7fc ffb5 	bl	8001600 <HAL_GetTick>
 8004696:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046a0:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	00da      	lsls	r2, r3, #3
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	0d1b      	lsrs	r3, r3, #20
 80046b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046b8:	e060      	b.n	800477c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046c0:	d107      	bne.n	80046d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d050      	beq.n	800477c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046da:	f7fc ff91 	bl	8001600 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d902      	bls.n	80046f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d13d      	bne.n	800476c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004708:	d111      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004712:	d004      	beq.n	800471e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d107      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004736:	d10f      	bne.n	8004758 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004756:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e010      	b.n	800478e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	3b01      	subs	r3, #1
 800477a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	d196      	bne.n	80046ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3728      	adds	r7, #40	; 0x28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000000 	.word	0x20000000

0800479c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b0:	d111      	bne.n	80047d6 <SPI_EndRxTransaction+0x3a>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ba:	d004      	beq.n	80047c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c4:	d107      	bne.n	80047d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047de:	d112      	bne.n	8004806 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2200      	movs	r2, #0
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff feb8 	bl	8004560 <SPI_WaitFlagStateUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d021      	beq.n	800483a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e03d      	b.n	8004882 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004806:	4b21      	ldr	r3, [pc, #132]	; (800488c <SPI_EndRxTransaction+0xf0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	; (8004890 <SPI_EndRxTransaction+0xf4>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0d5b      	lsrs	r3, r3, #21
 8004812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3b01      	subs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d0f2      	beq.n	800481c <SPI_EndRxTransaction+0x80>
 8004836:	e000      	b.n	800483a <SPI_EndRxTransaction+0x9e>
        break;
 8004838:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004842:	d11d      	bne.n	8004880 <SPI_EndRxTransaction+0xe4>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484c:	d004      	beq.n	8004858 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004856:	d113      	bne.n	8004880 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff ff03 	bl	8004670 <SPI_WaitFifoStateUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e000      	b.n	8004882 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000
 8004890:	165e9f81 	.word	0x165e9f81

08004894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff fedf 	bl	8004670 <SPI_WaitFifoStateUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e046      	b.n	8004956 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <SPI_EndRxTxTransaction+0xcc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a25      	ldr	r2, [pc, #148]	; (8004964 <SPI_EndRxTxTransaction+0xd0>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	0d5b      	lsrs	r3, r3, #21
 80048d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e6:	d112      	bne.n	800490e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff fe34 	bl	8004560 <SPI_WaitFlagStateUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e023      	b.n	8004956 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3b01      	subs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d0f2      	beq.n	800490e <SPI_EndRxTxTransaction+0x7a>
 8004928:	e000      	b.n	800492c <SPI_EndRxTxTransaction+0x98>
        break;
 800492a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2200      	movs	r2, #0
 8004934:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff fe99 	bl	8004670 <SPI_WaitFifoStateUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e000      	b.n	8004956 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000000 	.word	0x20000000
 8004964:	165e9f81 	.word	0x165e9f81

08004968 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004970:	f7fc fe46 	bl	8001600 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0220 	bic.w	r2, r2, #32
 8004984:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	2164      	movs	r1, #100	; 0x64
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff ff82 	bl	8004894 <SPI_EndRxTxTransaction>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	f043 0220 	orr.w	r2, r3, #32
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d115      	bne.n	80049d6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d107      	bne.n	80049c6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc fda4 	bl	800150c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80049c4:	e00e      	b.n	80049e4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fc44 	bl	800425c <HAL_SPI_TxRxCpltCallback>
}
 80049d4:	e006      	b.n	80049e4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fc46 	bl	8004270 <HAL_SPI_ErrorCallback>
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a02:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004a04:	f7fc fdfc 	bl	8001600 <HAL_GetTick>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2164      	movs	r1, #100	; 0x64
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fec4 	bl	800479c <SPI_EndRxTransaction>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fd68 	bl	800150c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004a3c:	e002      	b.n	8004a44 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff fc16 	bl	8004270 <HAL_SPI_ErrorCallback>
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e040      	b.n	8004ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fa24 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f974 	bl	8004d78 <UART_SetConfig>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e022      	b.n	8004ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fbcc 	bl	8005240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fc53 	bl	8005384 <UART_CheckIdleState>
 8004ade:	4603      	mov	r3, r0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d171      	bne.n	8004be4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Transmit+0x24>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e06a      	b.n	8004be6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	; 0x21
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b1e:	f7fc fd6f 	bl	8001600 <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d108      	bne.n	8004b50 <HAL_UART_Transmit+0x68>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e003      	b.n	8004b58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b58:	e02c      	b.n	8004bb4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fc44 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e038      	b.n	8004be6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e007      	b.n	8004ba2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1cc      	bne.n	8004b5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fc11 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e005      	b.n	8004be6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b08a      	sub	sp, #40	; 0x28
 8004bf2:	af02      	add	r7, sp, #8
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	f040 80b1 	bne.w	8004d6c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_UART_Receive+0x28>
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0a9      	b.n	8004d6e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2222      	movs	r2, #34	; 0x22
 8004c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c30:	f7fc fce6 	bl	8001600 <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	88fa      	ldrh	r2, [r7, #6]
 8004c3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	88fa      	ldrh	r2, [r7, #6]
 8004c42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4e:	d10e      	bne.n	8004c6e <HAL_UART_Receive+0x80>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <HAL_UART_Receive+0x76>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c62:	e02d      	b.n	8004cc0 <HAL_UART_Receive+0xd2>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	22ff      	movs	r2, #255	; 0xff
 8004c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c6c:	e028      	b.n	8004cc0 <HAL_UART_Receive+0xd2>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10d      	bne.n	8004c92 <HAL_UART_Receive+0xa4>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d104      	bne.n	8004c88 <HAL_UART_Receive+0x9a>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c86:	e01b      	b.n	8004cc0 <HAL_UART_Receive+0xd2>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	227f      	movs	r2, #127	; 0x7f
 8004c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c90:	e016      	b.n	8004cc0 <HAL_UART_Receive+0xd2>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_UART_Receive+0xca>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d104      	bne.n	8004cae <HAL_UART_Receive+0xc0>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	227f      	movs	r2, #127	; 0x7f
 8004ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cac:	e008      	b.n	8004cc0 <HAL_UART_Receive+0xd2>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	223f      	movs	r2, #63	; 0x3f
 8004cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cb6:	e003      	b.n	8004cc0 <HAL_UART_Receive+0xd2>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cc6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d108      	bne.n	8004ce4 <HAL_UART_Receive+0xf6>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d104      	bne.n	8004ce4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e003      	b.n	8004cec <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cec:	e032      	b.n	8004d54 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2120      	movs	r1, #32
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fb7a 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e032      	b.n	8004d6e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10c      	bne.n	8004d28 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	8a7b      	ldrh	r3, [r7, #18]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	3302      	adds	r3, #2
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	e00c      	b.n	8004d42 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	8a7b      	ldrh	r3, [r7, #18]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	4013      	ands	r3, r2
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1c6      	bne.n	8004cee <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4ba6      	ldr	r3, [pc, #664]	; (800503c <UART_SetConfig+0x2c4>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	6979      	ldr	r1, [r7, #20]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a94      	ldr	r2, [pc, #592]	; (8005040 <UART_SetConfig+0x2c8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d120      	bne.n	8004e36 <UART_SetConfig+0xbe>
 8004df4:	4b93      	ldr	r3, [pc, #588]	; (8005044 <UART_SetConfig+0x2cc>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d816      	bhi.n	8004e30 <UART_SetConfig+0xb8>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x90>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e19 	.word	0x08004e19
 8004e0c:	08004e25 	.word	0x08004e25
 8004e10:	08004e1f 	.word	0x08004e1f
 8004e14:	08004e2b 	.word	0x08004e2b
 8004e18:	2301      	movs	r3, #1
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e150      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e14d      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e24:	2304      	movs	r3, #4
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e14a      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e147      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e30:	2310      	movs	r3, #16
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e144      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a83      	ldr	r2, [pc, #524]	; (8005048 <UART_SetConfig+0x2d0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d132      	bne.n	8004ea6 <UART_SetConfig+0x12e>
 8004e40:	4b80      	ldr	r3, [pc, #512]	; (8005044 <UART_SetConfig+0x2cc>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d828      	bhi.n	8004ea0 <UART_SetConfig+0x128>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0xdc>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08004ea1 	.word	0x08004ea1
 8004e5c:	08004ea1 	.word	0x08004ea1
 8004e60:	08004ea1 	.word	0x08004ea1
 8004e64:	08004e95 	.word	0x08004e95
 8004e68:	08004ea1 	.word	0x08004ea1
 8004e6c:	08004ea1 	.word	0x08004ea1
 8004e70:	08004ea1 	.word	0x08004ea1
 8004e74:	08004e8f 	.word	0x08004e8f
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ea1 	.word	0x08004ea1
 8004e84:	08004e9b 	.word	0x08004e9b
 8004e88:	2300      	movs	r3, #0
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e118      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e115      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e94:	2304      	movs	r3, #4
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e112      	b.n	80050c0 <UART_SetConfig+0x348>
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e10f      	b.n	80050c0 <UART_SetConfig+0x348>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e10c      	b.n	80050c0 <UART_SetConfig+0x348>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a68      	ldr	r2, [pc, #416]	; (800504c <UART_SetConfig+0x2d4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d120      	bne.n	8004ef2 <UART_SetConfig+0x17a>
 8004eb0:	4b64      	ldr	r3, [pc, #400]	; (8005044 <UART_SetConfig+0x2cc>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eba:	2b30      	cmp	r3, #48	; 0x30
 8004ebc:	d013      	beq.n	8004ee6 <UART_SetConfig+0x16e>
 8004ebe:	2b30      	cmp	r3, #48	; 0x30
 8004ec0:	d814      	bhi.n	8004eec <UART_SetConfig+0x174>
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d009      	beq.n	8004eda <UART_SetConfig+0x162>
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d810      	bhi.n	8004eec <UART_SetConfig+0x174>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <UART_SetConfig+0x15c>
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d006      	beq.n	8004ee0 <UART_SetConfig+0x168>
 8004ed2:	e00b      	b.n	8004eec <UART_SetConfig+0x174>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e0f2      	b.n	80050c0 <UART_SetConfig+0x348>
 8004eda:	2302      	movs	r3, #2
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e0ef      	b.n	80050c0 <UART_SetConfig+0x348>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e0ec      	b.n	80050c0 <UART_SetConfig+0x348>
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e0e9      	b.n	80050c0 <UART_SetConfig+0x348>
 8004eec:	2310      	movs	r3, #16
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e0e6      	b.n	80050c0 <UART_SetConfig+0x348>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a56      	ldr	r2, [pc, #344]	; (8005050 <UART_SetConfig+0x2d8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d120      	bne.n	8004f3e <UART_SetConfig+0x1c6>
 8004efc:	4b51      	ldr	r3, [pc, #324]	; (8005044 <UART_SetConfig+0x2cc>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f06:	2bc0      	cmp	r3, #192	; 0xc0
 8004f08:	d013      	beq.n	8004f32 <UART_SetConfig+0x1ba>
 8004f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f0c:	d814      	bhi.n	8004f38 <UART_SetConfig+0x1c0>
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d009      	beq.n	8004f26 <UART_SetConfig+0x1ae>
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d810      	bhi.n	8004f38 <UART_SetConfig+0x1c0>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <UART_SetConfig+0x1a8>
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d006      	beq.n	8004f2c <UART_SetConfig+0x1b4>
 8004f1e:	e00b      	b.n	8004f38 <UART_SetConfig+0x1c0>
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e0cc      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f26:	2302      	movs	r3, #2
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e0c9      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e0c6      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f32:	2308      	movs	r3, #8
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e0c3      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e0c0      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a44      	ldr	r2, [pc, #272]	; (8005054 <UART_SetConfig+0x2dc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d125      	bne.n	8004f94 <UART_SetConfig+0x21c>
 8004f48:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <UART_SetConfig+0x2cc>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f56:	d017      	beq.n	8004f88 <UART_SetConfig+0x210>
 8004f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5c:	d817      	bhi.n	8004f8e <UART_SetConfig+0x216>
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f62:	d00b      	beq.n	8004f7c <UART_SetConfig+0x204>
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f68:	d811      	bhi.n	8004f8e <UART_SetConfig+0x216>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <UART_SetConfig+0x1fe>
 8004f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f72:	d006      	beq.n	8004f82 <UART_SetConfig+0x20a>
 8004f74:	e00b      	b.n	8004f8e <UART_SetConfig+0x216>
 8004f76:	2300      	movs	r3, #0
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e0a1      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e09e      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f82:	2304      	movs	r3, #4
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e09b      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e098      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f8e:	2310      	movs	r3, #16
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e095      	b.n	80050c0 <UART_SetConfig+0x348>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2f      	ldr	r2, [pc, #188]	; (8005058 <UART_SetConfig+0x2e0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d125      	bne.n	8004fea <UART_SetConfig+0x272>
 8004f9e:	4b29      	ldr	r3, [pc, #164]	; (8005044 <UART_SetConfig+0x2cc>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fac:	d017      	beq.n	8004fde <UART_SetConfig+0x266>
 8004fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb2:	d817      	bhi.n	8004fe4 <UART_SetConfig+0x26c>
 8004fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb8:	d00b      	beq.n	8004fd2 <UART_SetConfig+0x25a>
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	d811      	bhi.n	8004fe4 <UART_SetConfig+0x26c>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <UART_SetConfig+0x254>
 8004fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc8:	d006      	beq.n	8004fd8 <UART_SetConfig+0x260>
 8004fca:	e00b      	b.n	8004fe4 <UART_SetConfig+0x26c>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e076      	b.n	80050c0 <UART_SetConfig+0x348>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e073      	b.n	80050c0 <UART_SetConfig+0x348>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e070      	b.n	80050c0 <UART_SetConfig+0x348>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e06d      	b.n	80050c0 <UART_SetConfig+0x348>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e06a      	b.n	80050c0 <UART_SetConfig+0x348>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <UART_SetConfig+0x2e4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d138      	bne.n	8005066 <UART_SetConfig+0x2ee>
 8004ff4:	4b13      	ldr	r3, [pc, #76]	; (8005044 <UART_SetConfig+0x2cc>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ffe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005002:	d017      	beq.n	8005034 <UART_SetConfig+0x2bc>
 8005004:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005008:	d82a      	bhi.n	8005060 <UART_SetConfig+0x2e8>
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	d00b      	beq.n	8005028 <UART_SetConfig+0x2b0>
 8005010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005014:	d824      	bhi.n	8005060 <UART_SetConfig+0x2e8>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <UART_SetConfig+0x2aa>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d006      	beq.n	800502e <UART_SetConfig+0x2b6>
 8005020:	e01e      	b.n	8005060 <UART_SetConfig+0x2e8>
 8005022:	2300      	movs	r3, #0
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e04b      	b.n	80050c0 <UART_SetConfig+0x348>
 8005028:	2302      	movs	r3, #2
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e048      	b.n	80050c0 <UART_SetConfig+0x348>
 800502e:	2304      	movs	r3, #4
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e045      	b.n	80050c0 <UART_SetConfig+0x348>
 8005034:	2308      	movs	r3, #8
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e042      	b.n	80050c0 <UART_SetConfig+0x348>
 800503a:	bf00      	nop
 800503c:	efff69f3 	.word	0xefff69f3
 8005040:	40011000 	.word	0x40011000
 8005044:	40023800 	.word	0x40023800
 8005048:	40004400 	.word	0x40004400
 800504c:	40004800 	.word	0x40004800
 8005050:	40004c00 	.word	0x40004c00
 8005054:	40005000 	.word	0x40005000
 8005058:	40011400 	.word	0x40011400
 800505c:	40007800 	.word	0x40007800
 8005060:	2310      	movs	r3, #16
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e02c      	b.n	80050c0 <UART_SetConfig+0x348>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a72      	ldr	r2, [pc, #456]	; (8005234 <UART_SetConfig+0x4bc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d125      	bne.n	80050bc <UART_SetConfig+0x344>
 8005070:	4b71      	ldr	r3, [pc, #452]	; (8005238 <UART_SetConfig+0x4c0>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800507a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800507e:	d017      	beq.n	80050b0 <UART_SetConfig+0x338>
 8005080:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005084:	d817      	bhi.n	80050b6 <UART_SetConfig+0x33e>
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508a:	d00b      	beq.n	80050a4 <UART_SetConfig+0x32c>
 800508c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005090:	d811      	bhi.n	80050b6 <UART_SetConfig+0x33e>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <UART_SetConfig+0x326>
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800509a:	d006      	beq.n	80050aa <UART_SetConfig+0x332>
 800509c:	e00b      	b.n	80050b6 <UART_SetConfig+0x33e>
 800509e:	2300      	movs	r3, #0
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e00d      	b.n	80050c0 <UART_SetConfig+0x348>
 80050a4:	2302      	movs	r3, #2
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e00a      	b.n	80050c0 <UART_SetConfig+0x348>
 80050aa:	2304      	movs	r3, #4
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e007      	b.n	80050c0 <UART_SetConfig+0x348>
 80050b0:	2308      	movs	r3, #8
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e004      	b.n	80050c0 <UART_SetConfig+0x348>
 80050b6:	2310      	movs	r3, #16
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e001      	b.n	80050c0 <UART_SetConfig+0x348>
 80050bc:	2310      	movs	r3, #16
 80050be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	d15b      	bne.n	8005182 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d828      	bhi.n	8005122 <UART_SetConfig+0x3aa>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x360>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050fd 	.word	0x080050fd
 80050dc:	08005105 	.word	0x08005105
 80050e0:	0800510d 	.word	0x0800510d
 80050e4:	08005123 	.word	0x08005123
 80050e8:	08005113 	.word	0x08005113
 80050ec:	08005123 	.word	0x08005123
 80050f0:	08005123 	.word	0x08005123
 80050f4:	08005123 	.word	0x08005123
 80050f8:	0800511b 	.word	0x0800511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fc:	f7fd fce6 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8005100:	61b8      	str	r0, [r7, #24]
        break;
 8005102:	e013      	b.n	800512c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7fd fcf6 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8005108:	61b8      	str	r0, [r7, #24]
        break;
 800510a:	e00f      	b.n	800512c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800510c:	4b4b      	ldr	r3, [pc, #300]	; (800523c <UART_SetConfig+0x4c4>)
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e00c      	b.n	800512c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005112:	f7fd fbc9 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8005116:	61b8      	str	r0, [r7, #24]
        break;
 8005118:	e008      	b.n	800512c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511e:	61bb      	str	r3, [r7, #24]
        break;
 8005120:	e004      	b.n	800512c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	77bb      	strb	r3, [r7, #30]
        break;
 800512a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d074      	beq.n	800521c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	005a      	lsls	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d916      	bls.n	800517c <UART_SetConfig+0x404>
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005154:	d212      	bcs.n	800517c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f023 030f 	bic.w	r3, r3, #15
 800515e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	b29a      	uxth	r2, r3
 800516c:	89fb      	ldrh	r3, [r7, #14]
 800516e:	4313      	orrs	r3, r2
 8005170:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	89fa      	ldrh	r2, [r7, #14]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	e04f      	b.n	800521c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	77bb      	strb	r3, [r7, #30]
 8005180:	e04c      	b.n	800521c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005182:	7ffb      	ldrb	r3, [r7, #31]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d828      	bhi.n	80051da <UART_SetConfig+0x462>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x418>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051db 	.word	0x080051db
 80051a0:	080051cb 	.word	0x080051cb
 80051a4:	080051db 	.word	0x080051db
 80051a8:	080051db 	.word	0x080051db
 80051ac:	080051db 	.word	0x080051db
 80051b0:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fd fc8a 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 80051b8:	61b8      	str	r0, [r7, #24]
        break;
 80051ba:	e013      	b.n	80051e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fd fc9a 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 80051c0:	61b8      	str	r0, [r7, #24]
        break;
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c4:	4b1d      	ldr	r3, [pc, #116]	; (800523c <UART_SetConfig+0x4c4>)
 80051c6:	61bb      	str	r3, [r7, #24]
        break;
 80051c8:	e00c      	b.n	80051e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fd fb6d 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 80051ce:	61b8      	str	r0, [r7, #24]
        break;
 80051d0:	e008      	b.n	80051e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d6:	61bb      	str	r3, [r7, #24]
        break;
 80051d8:	e004      	b.n	80051e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	77bb      	strb	r3, [r7, #30]
        break;
 80051e2:	bf00      	nop
    }

    if (pclk != 0U)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d018      	beq.n	800521c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	085a      	lsrs	r2, r3, #1
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	441a      	add	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b0f      	cmp	r3, #15
 8005202:	d909      	bls.n	8005218 <UART_SetConfig+0x4a0>
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520a:	d205      	bcs.n	8005218 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	e001      	b.n	800521c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005228:	7fbb      	ldrb	r3, [r7, #30]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40007c00 	.word	0x40007c00
 8005238:	40023800 	.word	0x40023800
 800523c:	00f42400 	.word	0x00f42400

08005240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01a      	beq.n	8005356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533e:	d10a      	bne.n	8005356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]
  }
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005394:	f7fc f934 	bl	8001600 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d10e      	bne.n	80053c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f81b 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e011      	b.n	80053ea <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b09c      	sub	sp, #112	; 0x70
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	4613      	mov	r3, r2
 8005400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005402:	e0a7      	b.n	8005554 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	f000 80a3 	beq.w	8005554 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fc f8f7 	bl	8001600 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <UART_WaitOnFlagUntilTimeout+0x32>
 800541e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005420:	2b00      	cmp	r3, #0
 8005422:	d13f      	bne.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005438:	667b      	str	r3, [r7, #100]	; 0x64
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005444:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e6      	bne.n	8005424 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	663b      	str	r3, [r7, #96]	; 0x60
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005476:	64ba      	str	r2, [r7, #72]	; 0x48
 8005478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800547c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e068      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d050      	beq.n	8005554 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c0:	d148      	bne.n	8005554 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
 80054ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e6      	bne.n	80054cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3308      	adds	r3, #8
 8005504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	613b      	str	r3, [r7, #16]
   return(result);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	66bb      	str	r3, [r7, #104]	; 0x68
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800551e:	623a      	str	r2, [r7, #32]
 8005520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	69f9      	ldr	r1, [r7, #28]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	61bb      	str	r3, [r7, #24]
   return(result);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e010      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69da      	ldr	r2, [r3, #28]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4013      	ands	r3, r2
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	429a      	cmp	r2, r3
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	429a      	cmp	r2, r3
 8005570:	f43f af48 	beq.w	8005404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3770      	adds	r7, #112	; 0x70
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005580:	b084      	sub	sp, #16
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	f107 001c 	add.w	r0, r7, #28
 800558e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	2b01      	cmp	r3, #1
 8005596:	d120      	bne.n	80055da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	4b20      	ldr	r3, [pc, #128]	; (800562c <USB_CoreInit+0xac>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d105      	bne.n	80055ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa96 	bl	8005b00 <USB_CoreReset>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
 80055d8:	e010      	b.n	80055fc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa8a 	bl	8005b00 <USB_CoreReset>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10b      	bne.n	800561a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f043 0206 	orr.w	r2, r3, #6
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005626:	b004      	add	sp, #16
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	ffbdffbf 	.word	0xffbdffbf

08005630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 0201 	bic.w	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d115      	bne.n	80056a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005680:	2001      	movs	r0, #1
 8005682:	f7fb ffc9 	bl	8001618 <HAL_Delay>
      ms++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fa29 	bl	8005ae4 <USB_GetMode>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d01e      	beq.n	80056d6 <USB_SetCurrentMode+0x84>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b31      	cmp	r3, #49	; 0x31
 800569c:	d9f0      	bls.n	8005680 <USB_SetCurrentMode+0x2e>
 800569e:	e01a      	b.n	80056d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d115      	bne.n	80056d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056b2:	2001      	movs	r0, #1
 80056b4:	f7fb ffb0 	bl	8001618 <HAL_Delay>
      ms++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa10 	bl	8005ae4 <USB_GetMode>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <USB_SetCurrentMode+0x84>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b31      	cmp	r3, #49	; 0x31
 80056ce:	d9f0      	bls.n	80056b2 <USB_SetCurrentMode+0x60>
 80056d0:	e001      	b.n	80056d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e005      	b.n	80056e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b32      	cmp	r3, #50	; 0x32
 80056da:	d101      	bne.n	80056e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056ec:	b084      	sub	sp, #16
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	e009      	b.n	8005720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3340      	adds	r3, #64	; 0x40
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	2200      	movs	r2, #0
 8005718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3301      	adds	r3, #1
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b0e      	cmp	r3, #14
 8005724:	d9f2      	bls.n	800570c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11c      	bne.n	8005766 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573a:	f043 0302 	orr.w	r3, r3, #2
 800573e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e005      	b.n	8005772 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	4619      	mov	r1, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	461a      	mov	r2, r3
 800578e:	680b      	ldr	r3, [r1, #0]
 8005790:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10c      	bne.n	80057b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d104      	bne.n	80057a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800579e:	2100      	movs	r1, #0
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f965 	bl	8005a70 <USB_SetDevSpeed>
 80057a6:	e008      	b.n	80057ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057a8:	2101      	movs	r1, #1
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f960 	bl	8005a70 <USB_SetDevSpeed>
 80057b0:	e003      	b.n	80057ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057b2:	2103      	movs	r1, #3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f95b 	bl	8005a70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057ba:	2110      	movs	r1, #16
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8f3 	bl	80059a8 <USB_FlushTxFifo>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f91f 	bl	8005a10 <USB_FlushRxFifo>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	e043      	b.n	800588e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800581c:	d118      	bne.n	8005850 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e013      	b.n	8005862 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	461a      	mov	r2, r3
 8005848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e008      	b.n	8005862 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	461a      	mov	r2, r3
 800585e:	2300      	movs	r3, #0
 8005860:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	461a      	mov	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	461a      	mov	r2, r3
 8005882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3301      	adds	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	429a      	cmp	r2, r3
 8005894:	d3b7      	bcc.n	8005806 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e043      	b.n	8005924 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b2:	d118      	bne.n	80058e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	461a      	mov	r2, r3
 80058c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e013      	b.n	80058f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	461a      	mov	r2, r3
 80058de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e008      	b.n	80058f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	461a      	mov	r2, r3
 80058f4:	2300      	movs	r3, #0
 80058f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	2300      	movs	r3, #0
 8005908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	461a      	mov	r2, r3
 8005918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800591c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3301      	adds	r3, #1
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d3b7      	bcc.n	800589c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800593a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800593e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800594c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f043 0210 	orr.w	r2, r3, #16
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <USB_DevInit+0x2b4>)
 8005966:	4313      	orrs	r3, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f043 0208 	orr.w	r2, r3, #8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800597e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d105      	bne.n	8005990 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <USB_DevInit+0x2b8>)
 800598a:	4313      	orrs	r3, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800599c:	b004      	add	sp, #16
 800599e:	4770      	bx	lr
 80059a0:	803c3800 	.word	0x803c3800
 80059a4:	40000004 	.word	0x40000004

080059a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <USB_FlushTxFifo+0x64>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e01b      	b.n	8005a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	daf2      	bge.n	80059b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	019b      	lsls	r3, r3, #6
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <USB_FlushTxFifo+0x64>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d901      	bls.n	80059f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e006      	b.n	8005a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d0f0      	beq.n	80059e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	00030d40 	.word	0x00030d40

08005a10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a11      	ldr	r2, [pc, #68]	; (8005a6c <USB_FlushRxFifo+0x5c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e018      	b.n	8005a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	daf2      	bge.n	8005a1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3301      	adds	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <USB_FlushRxFifo+0x5c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e006      	b.n	8005a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d0f0      	beq.n	8005a40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	00030d40 	.word	0x00030d40

08005a70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a90:	4313      	orrs	r3, r2
 8005a92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005abc:	f023 0303 	bic.w	r3, r3, #3
 8005ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0301 	and.w	r3, r3, #1
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <USB_CoreReset+0x64>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e01b      	b.n	8005b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	daf2      	bge.n	8005b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <USB_CoreReset+0x64>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e006      	b.n	8005b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d0f0      	beq.n	8005b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	00030d40 	.word	0x00030d40

08005b68 <std>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b76:	6083      	str	r3, [r0, #8]
 8005b78:	8181      	strh	r1, [r0, #12]
 8005b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b7c:	81c2      	strh	r2, [r0, #14]
 8005b7e:	6183      	str	r3, [r0, #24]
 8005b80:	4619      	mov	r1, r3
 8005b82:	2208      	movs	r2, #8
 8005b84:	305c      	adds	r0, #92	; 0x5c
 8005b86:	f000 f9e5 	bl	8005f54 <memset>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x38>)
 8005b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x3c>)
 8005b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x40>)
 8005b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x44>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005da5 	.word	0x08005da5
 8005ba4:	08005dc7 	.word	0x08005dc7
 8005ba8:	08005dff 	.word	0x08005dff
 8005bac:	08005e23 	.word	0x08005e23

08005bb0 <stdio_exit_handler>:
 8005bb0:	4a02      	ldr	r2, [pc, #8]	; (8005bbc <stdio_exit_handler+0xc>)
 8005bb2:	4903      	ldr	r1, [pc, #12]	; (8005bc0 <stdio_exit_handler+0x10>)
 8005bb4:	4803      	ldr	r0, [pc, #12]	; (8005bc4 <stdio_exit_handler+0x14>)
 8005bb6:	f000 b869 	b.w	8005c8c <_fwalk_sglue>
 8005bba:	bf00      	nop
 8005bbc:	2000000c 	.word	0x2000000c
 8005bc0:	080068ed 	.word	0x080068ed
 8005bc4:	20000018 	.word	0x20000018

08005bc8 <cleanup_stdio>:
 8005bc8:	6841      	ldr	r1, [r0, #4]
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <cleanup_stdio+0x34>)
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	d001      	beq.n	8005bd8 <cleanup_stdio+0x10>
 8005bd4:	f000 fe8a 	bl	80068ec <_fflush_r>
 8005bd8:	68a1      	ldr	r1, [r4, #8]
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <cleanup_stdio+0x38>)
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	d002      	beq.n	8005be6 <cleanup_stdio+0x1e>
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fe83 	bl	80068ec <_fflush_r>
 8005be6:	68e1      	ldr	r1, [r4, #12]
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <cleanup_stdio+0x3c>)
 8005bea:	4299      	cmp	r1, r3
 8005bec:	d004      	beq.n	8005bf8 <cleanup_stdio+0x30>
 8005bee:	4620      	mov	r0, r4
 8005bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf4:	f000 be7a 	b.w	80068ec <_fflush_r>
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000850 	.word	0x20000850
 8005c00:	200008b8 	.word	0x200008b8
 8005c04:	20000920 	.word	0x20000920

08005c08 <global_stdio_init.part.0>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <global_stdio_init.part.0+0x30>)
 8005c0c:	4c0b      	ldr	r4, [pc, #44]	; (8005c3c <global_stdio_init.part.0+0x34>)
 8005c0e:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <global_stdio_init.part.0+0x38>)
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	4620      	mov	r0, r4
 8005c14:	2200      	movs	r2, #0
 8005c16:	2104      	movs	r1, #4
 8005c18:	f7ff ffa6 	bl	8005b68 <std>
 8005c1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c20:	2201      	movs	r2, #1
 8005c22:	2109      	movs	r1, #9
 8005c24:	f7ff ffa0 	bl	8005b68 <std>
 8005c28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c32:	2112      	movs	r1, #18
 8005c34:	f7ff bf98 	b.w	8005b68 <std>
 8005c38:	20000988 	.word	0x20000988
 8005c3c:	20000850 	.word	0x20000850
 8005c40:	08005bb1 	.word	0x08005bb1

08005c44 <__sfp_lock_acquire>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__sfp_lock_acquire+0x8>)
 8005c46:	f000 b9fd 	b.w	8006044 <__retarget_lock_acquire_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000991 	.word	0x20000991

08005c50 <__sfp_lock_release>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__sfp_lock_release+0x8>)
 8005c52:	f000 b9f8 	b.w	8006046 <__retarget_lock_release_recursive>
 8005c56:	bf00      	nop
 8005c58:	20000991 	.word	0x20000991

08005c5c <__sinit>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4604      	mov	r4, r0
 8005c60:	f7ff fff0 	bl	8005c44 <__sfp_lock_acquire>
 8005c64:	6a23      	ldr	r3, [r4, #32]
 8005c66:	b11b      	cbz	r3, 8005c70 <__sinit+0x14>
 8005c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6c:	f7ff bff0 	b.w	8005c50 <__sfp_lock_release>
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <__sinit+0x28>)
 8005c72:	6223      	str	r3, [r4, #32]
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <__sinit+0x2c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1f5      	bne.n	8005c68 <__sinit+0xc>
 8005c7c:	f7ff ffc4 	bl	8005c08 <global_stdio_init.part.0>
 8005c80:	e7f2      	b.n	8005c68 <__sinit+0xc>
 8005c82:	bf00      	nop
 8005c84:	08005bc9 	.word	0x08005bc9
 8005c88:	20000988 	.word	0x20000988

08005c8c <_fwalk_sglue>:
 8005c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c90:	4607      	mov	r7, r0
 8005c92:	4688      	mov	r8, r1
 8005c94:	4614      	mov	r4, r2
 8005c96:	2600      	movs	r6, #0
 8005c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8005ca0:	d505      	bpl.n	8005cae <_fwalk_sglue+0x22>
 8005ca2:	6824      	ldr	r4, [r4, #0]
 8005ca4:	2c00      	cmp	r4, #0
 8005ca6:	d1f7      	bne.n	8005c98 <_fwalk_sglue+0xc>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cae:	89ab      	ldrh	r3, [r5, #12]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d907      	bls.n	8005cc4 <_fwalk_sglue+0x38>
 8005cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	d003      	beq.n	8005cc4 <_fwalk_sglue+0x38>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c0      	blx	r8
 8005cc2:	4306      	orrs	r6, r0
 8005cc4:	3568      	adds	r5, #104	; 0x68
 8005cc6:	e7e9      	b.n	8005c9c <_fwalk_sglue+0x10>

08005cc8 <iprintf>:
 8005cc8:	b40f      	push	{r0, r1, r2, r3}
 8005cca:	b507      	push	{r0, r1, r2, lr}
 8005ccc:	4906      	ldr	r1, [pc, #24]	; (8005ce8 <iprintf+0x20>)
 8005cce:	ab04      	add	r3, sp, #16
 8005cd0:	6808      	ldr	r0, [r1, #0]
 8005cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd6:	6881      	ldr	r1, [r0, #8]
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	f000 fad7 	bl	800628c <_vfiprintf_r>
 8005cde:	b003      	add	sp, #12
 8005ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce4:	b004      	add	sp, #16
 8005ce6:	4770      	bx	lr
 8005ce8:	20000064 	.word	0x20000064

08005cec <_puts_r>:
 8005cec:	6a03      	ldr	r3, [r0, #32]
 8005cee:	b570      	push	{r4, r5, r6, lr}
 8005cf0:	6884      	ldr	r4, [r0, #8]
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	460e      	mov	r6, r1
 8005cf6:	b90b      	cbnz	r3, 8005cfc <_puts_r+0x10>
 8005cf8:	f7ff ffb0 	bl	8005c5c <__sinit>
 8005cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfe:	07db      	lsls	r3, r3, #31
 8005d00:	d405      	bmi.n	8005d0e <_puts_r+0x22>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	0598      	lsls	r0, r3, #22
 8005d06:	d402      	bmi.n	8005d0e <_puts_r+0x22>
 8005d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d0a:	f000 f99b 	bl	8006044 <__retarget_lock_acquire_recursive>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	0719      	lsls	r1, r3, #28
 8005d12:	d513      	bpl.n	8005d3c <_puts_r+0x50>
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	b18b      	cbz	r3, 8005d3c <_puts_r+0x50>
 8005d18:	3e01      	subs	r6, #1
 8005d1a:	68a3      	ldr	r3, [r4, #8]
 8005d1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d20:	3b01      	subs	r3, #1
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	b9e9      	cbnz	r1, 8005d62 <_puts_r+0x76>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	da2e      	bge.n	8005d88 <_puts_r+0x9c>
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	210a      	movs	r1, #10
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f87b 	bl	8005e2a <__swbuf_r>
 8005d34:	3001      	adds	r0, #1
 8005d36:	d007      	beq.n	8005d48 <_puts_r+0x5c>
 8005d38:	250a      	movs	r5, #10
 8005d3a:	e007      	b.n	8005d4c <_puts_r+0x60>
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 f8b0 	bl	8005ea4 <__swsetup_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d0e7      	beq.n	8005d18 <_puts_r+0x2c>
 8005d48:	f04f 35ff 	mov.w	r5, #4294967295
 8005d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d405      	bmi.n	8005d5e <_puts_r+0x72>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	059b      	lsls	r3, r3, #22
 8005d56:	d402      	bmi.n	8005d5e <_puts_r+0x72>
 8005d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5a:	f000 f974 	bl	8006046 <__retarget_lock_release_recursive>
 8005d5e:	4628      	mov	r0, r5
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da04      	bge.n	8005d70 <_puts_r+0x84>
 8005d66:	69a2      	ldr	r2, [r4, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	dc06      	bgt.n	8005d7a <_puts_r+0x8e>
 8005d6c:	290a      	cmp	r1, #10
 8005d6e:	d004      	beq.n	8005d7a <_puts_r+0x8e>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	6022      	str	r2, [r4, #0]
 8005d76:	7019      	strb	r1, [r3, #0]
 8005d78:	e7cf      	b.n	8005d1a <_puts_r+0x2e>
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 f854 	bl	8005e2a <__swbuf_r>
 8005d82:	3001      	adds	r0, #1
 8005d84:	d1c9      	bne.n	8005d1a <_puts_r+0x2e>
 8005d86:	e7df      	b.n	8005d48 <_puts_r+0x5c>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	250a      	movs	r5, #10
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	6022      	str	r2, [r4, #0]
 8005d90:	701d      	strb	r5, [r3, #0]
 8005d92:	e7db      	b.n	8005d4c <_puts_r+0x60>

08005d94 <puts>:
 8005d94:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <puts+0xc>)
 8005d96:	4601      	mov	r1, r0
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	f7ff bfa7 	b.w	8005cec <_puts_r>
 8005d9e:	bf00      	nop
 8005da0:	20000064 	.word	0x20000064

08005da4 <__sread>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	460c      	mov	r4, r1
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	f000 f8fc 	bl	8005fa8 <_read_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	bfab      	itete	ge
 8005db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005db6:	89a3      	ldrhlt	r3, [r4, #12]
 8005db8:	181b      	addge	r3, r3, r0
 8005dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dbe:	bfac      	ite	ge
 8005dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dc2:	81a3      	strhlt	r3, [r4, #12]
 8005dc4:	bd10      	pop	{r4, pc}

08005dc6 <__swrite>:
 8005dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	461f      	mov	r7, r3
 8005dcc:	898b      	ldrh	r3, [r1, #12]
 8005dce:	05db      	lsls	r3, r3, #23
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	d505      	bpl.n	8005de4 <__swrite+0x1e>
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	2302      	movs	r3, #2
 8005dde:	2200      	movs	r2, #0
 8005de0:	f000 f8d0 	bl	8005f84 <_lseek_r>
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	4632      	mov	r2, r6
 8005df2:	463b      	mov	r3, r7
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	f000 b8e7 	b.w	8005fcc <_write_r>

08005dfe <__sseek>:
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 f8bd 	bl	8005f84 <_lseek_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	bf15      	itete	ne
 8005e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e1a:	81a3      	strheq	r3, [r4, #12]
 8005e1c:	bf18      	it	ne
 8005e1e:	81a3      	strhne	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__sclose>:
 8005e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e26:	f000 b89d 	b.w	8005f64 <_close_r>

08005e2a <__swbuf_r>:
 8005e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	4614      	mov	r4, r2
 8005e30:	4605      	mov	r5, r0
 8005e32:	b118      	cbz	r0, 8005e3c <__swbuf_r+0x12>
 8005e34:	6a03      	ldr	r3, [r0, #32]
 8005e36:	b90b      	cbnz	r3, 8005e3c <__swbuf_r+0x12>
 8005e38:	f7ff ff10 	bl	8005c5c <__sinit>
 8005e3c:	69a3      	ldr	r3, [r4, #24]
 8005e3e:	60a3      	str	r3, [r4, #8]
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	071a      	lsls	r2, r3, #28
 8005e44:	d525      	bpl.n	8005e92 <__swbuf_r+0x68>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	b31b      	cbz	r3, 8005e92 <__swbuf_r+0x68>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	6922      	ldr	r2, [r4, #16]
 8005e4e:	1a98      	subs	r0, r3, r2
 8005e50:	6963      	ldr	r3, [r4, #20]
 8005e52:	b2f6      	uxtb	r6, r6
 8005e54:	4283      	cmp	r3, r0
 8005e56:	4637      	mov	r7, r6
 8005e58:	dc04      	bgt.n	8005e64 <__swbuf_r+0x3a>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 fd45 	bl	80068ec <_fflush_r>
 8005e62:	b9e0      	cbnz	r0, 8005e9e <__swbuf_r+0x74>
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	6022      	str	r2, [r4, #0]
 8005e70:	701e      	strb	r6, [r3, #0]
 8005e72:	6962      	ldr	r2, [r4, #20]
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d004      	beq.n	8005e84 <__swbuf_r+0x5a>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	07db      	lsls	r3, r3, #31
 8005e7e:	d506      	bpl.n	8005e8e <__swbuf_r+0x64>
 8005e80:	2e0a      	cmp	r6, #10
 8005e82:	d104      	bne.n	8005e8e <__swbuf_r+0x64>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 fd30 	bl	80068ec <_fflush_r>
 8005e8c:	b938      	cbnz	r0, 8005e9e <__swbuf_r+0x74>
 8005e8e:	4638      	mov	r0, r7
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e92:	4621      	mov	r1, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f805 	bl	8005ea4 <__swsetup_r>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d0d5      	beq.n	8005e4a <__swbuf_r+0x20>
 8005e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8005ea2:	e7f4      	b.n	8005e8e <__swbuf_r+0x64>

08005ea4 <__swsetup_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <__swsetup_r+0xac>)
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	460c      	mov	r4, r1
 8005eae:	b118      	cbz	r0, 8005eb8 <__swsetup_r+0x14>
 8005eb0:	6a03      	ldr	r3, [r0, #32]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <__swsetup_r+0x14>
 8005eb4:	f7ff fed2 	bl	8005c5c <__sinit>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ebe:	0718      	lsls	r0, r3, #28
 8005ec0:	d422      	bmi.n	8005f08 <__swsetup_r+0x64>
 8005ec2:	06d9      	lsls	r1, r3, #27
 8005ec4:	d407      	bmi.n	8005ed6 <__swsetup_r+0x32>
 8005ec6:	2309      	movs	r3, #9
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e034      	b.n	8005f40 <__swsetup_r+0x9c>
 8005ed6:	0758      	lsls	r0, r3, #29
 8005ed8:	d512      	bpl.n	8005f00 <__swsetup_r+0x5c>
 8005eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005edc:	b141      	cbz	r1, 8005ef0 <__swsetup_r+0x4c>
 8005ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d002      	beq.n	8005eec <__swsetup_r+0x48>
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f8ae 	bl	8006048 <_free_r>
 8005eec:	2300      	movs	r3, #0
 8005eee:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6063      	str	r3, [r4, #4]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f043 0308 	orr.w	r3, r3, #8
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	b94b      	cbnz	r3, 8005f20 <__swsetup_r+0x7c>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f16:	d003      	beq.n	8005f20 <__swsetup_r+0x7c>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 fd34 	bl	8006988 <__smakebuf_r>
 8005f20:	89a0      	ldrh	r0, [r4, #12]
 8005f22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f26:	f010 0301 	ands.w	r3, r0, #1
 8005f2a:	d00a      	beq.n	8005f42 <__swsetup_r+0x9e>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60a3      	str	r3, [r4, #8]
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	425b      	negs	r3, r3
 8005f34:	61a3      	str	r3, [r4, #24]
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	b943      	cbnz	r3, 8005f4c <__swsetup_r+0xa8>
 8005f3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f3e:	d1c4      	bne.n	8005eca <__swsetup_r+0x26>
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	0781      	lsls	r1, r0, #30
 8005f44:	bf58      	it	pl
 8005f46:	6963      	ldrpl	r3, [r4, #20]
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	e7f4      	b.n	8005f36 <__swsetup_r+0x92>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7f7      	b.n	8005f40 <__swsetup_r+0x9c>
 8005f50:	20000064 	.word	0x20000064

08005f54 <memset>:
 8005f54:	4402      	add	r2, r0
 8005f56:	4603      	mov	r3, r0
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <memset+0xa>
 8005f5c:	4770      	bx	lr
 8005f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f62:	e7f9      	b.n	8005f58 <memset+0x4>

08005f64 <_close_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	; (8005f80 <_close_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fb f909 	bl	8001186 <_close>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_close_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_close_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	2000098c 	.word	0x2000098c

08005f84 <_lseek_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	; (8005fa4 <_lseek_r+0x20>)
 8005f88:	4604      	mov	r4, r0
 8005f8a:	4608      	mov	r0, r1
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f7fb f91e 	bl	80011d4 <_lseek>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_lseek_r+0x1e>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_lseek_r+0x1e>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	2000098c 	.word	0x2000098c

08005fa8 <_read_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_read_r+0x20>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f7fb f8ac 	bl	8001114 <_read>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_read_r+0x1e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_read_r+0x1e>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	2000098c 	.word	0x2000098c

08005fcc <_write_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_write_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fb f8b7 	bl	800114e <_write>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_write_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_write_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	2000098c 	.word	0x2000098c

08005ff0 <__errno>:
 8005ff0:	4b01      	ldr	r3, [pc, #4]	; (8005ff8 <__errno+0x8>)
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000064 	.word	0x20000064

08005ffc <__libc_init_array>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4d0d      	ldr	r5, [pc, #52]	; (8006034 <__libc_init_array+0x38>)
 8006000:	4c0d      	ldr	r4, [pc, #52]	; (8006038 <__libc_init_array+0x3c>)
 8006002:	1b64      	subs	r4, r4, r5
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	2600      	movs	r6, #0
 8006008:	42a6      	cmp	r6, r4
 800600a:	d109      	bne.n	8006020 <__libc_init_array+0x24>
 800600c:	4d0b      	ldr	r5, [pc, #44]	; (800603c <__libc_init_array+0x40>)
 800600e:	4c0c      	ldr	r4, [pc, #48]	; (8006040 <__libc_init_array+0x44>)
 8006010:	f000 fd28 	bl	8006a64 <_init>
 8006014:	1b64      	subs	r4, r4, r5
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	2600      	movs	r6, #0
 800601a:	42a6      	cmp	r6, r4
 800601c:	d105      	bne.n	800602a <__libc_init_array+0x2e>
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	f855 3b04 	ldr.w	r3, [r5], #4
 8006024:	4798      	blx	r3
 8006026:	3601      	adds	r6, #1
 8006028:	e7ee      	b.n	8006008 <__libc_init_array+0xc>
 800602a:	f855 3b04 	ldr.w	r3, [r5], #4
 800602e:	4798      	blx	r3
 8006030:	3601      	adds	r6, #1
 8006032:	e7f2      	b.n	800601a <__libc_init_array+0x1e>
 8006034:	08006c28 	.word	0x08006c28
 8006038:	08006c28 	.word	0x08006c28
 800603c:	08006c28 	.word	0x08006c28
 8006040:	08006c2c 	.word	0x08006c2c

08006044 <__retarget_lock_acquire_recursive>:
 8006044:	4770      	bx	lr

08006046 <__retarget_lock_release_recursive>:
 8006046:	4770      	bx	lr

08006048 <_free_r>:
 8006048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800604a:	2900      	cmp	r1, #0
 800604c:	d044      	beq.n	80060d8 <_free_r+0x90>
 800604e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006052:	9001      	str	r0, [sp, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f1a1 0404 	sub.w	r4, r1, #4
 800605a:	bfb8      	it	lt
 800605c:	18e4      	addlt	r4, r4, r3
 800605e:	f000 f8df 	bl	8006220 <__malloc_lock>
 8006062:	4a1e      	ldr	r2, [pc, #120]	; (80060dc <_free_r+0x94>)
 8006064:	9801      	ldr	r0, [sp, #4]
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	b933      	cbnz	r3, 8006078 <_free_r+0x30>
 800606a:	6063      	str	r3, [r4, #4]
 800606c:	6014      	str	r4, [r2, #0]
 800606e:	b003      	add	sp, #12
 8006070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006074:	f000 b8da 	b.w	800622c <__malloc_unlock>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d908      	bls.n	800608e <_free_r+0x46>
 800607c:	6825      	ldr	r5, [r4, #0]
 800607e:	1961      	adds	r1, r4, r5
 8006080:	428b      	cmp	r3, r1
 8006082:	bf01      	itttt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	1949      	addeq	r1, r1, r5
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	e7ed      	b.n	800606a <_free_r+0x22>
 800608e:	461a      	mov	r2, r3
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b10b      	cbz	r3, 8006098 <_free_r+0x50>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d9fa      	bls.n	800608e <_free_r+0x46>
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	1855      	adds	r5, r2, r1
 800609c:	42a5      	cmp	r5, r4
 800609e:	d10b      	bne.n	80060b8 <_free_r+0x70>
 80060a0:	6824      	ldr	r4, [r4, #0]
 80060a2:	4421      	add	r1, r4
 80060a4:	1854      	adds	r4, r2, r1
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	d1e0      	bne.n	800606e <_free_r+0x26>
 80060ac:	681c      	ldr	r4, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	440c      	add	r4, r1
 80060b4:	6014      	str	r4, [r2, #0]
 80060b6:	e7da      	b.n	800606e <_free_r+0x26>
 80060b8:	d902      	bls.n	80060c0 <_free_r+0x78>
 80060ba:	230c      	movs	r3, #12
 80060bc:	6003      	str	r3, [r0, #0]
 80060be:	e7d6      	b.n	800606e <_free_r+0x26>
 80060c0:	6825      	ldr	r5, [r4, #0]
 80060c2:	1961      	adds	r1, r4, r5
 80060c4:	428b      	cmp	r3, r1
 80060c6:	bf04      	itt	eq
 80060c8:	6819      	ldreq	r1, [r3, #0]
 80060ca:	685b      	ldreq	r3, [r3, #4]
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	bf04      	itt	eq
 80060d0:	1949      	addeq	r1, r1, r5
 80060d2:	6021      	streq	r1, [r4, #0]
 80060d4:	6054      	str	r4, [r2, #4]
 80060d6:	e7ca      	b.n	800606e <_free_r+0x26>
 80060d8:	b003      	add	sp, #12
 80060da:	bd30      	pop	{r4, r5, pc}
 80060dc:	20000994 	.word	0x20000994

080060e0 <sbrk_aligned>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	4e0e      	ldr	r6, [pc, #56]	; (800611c <sbrk_aligned+0x3c>)
 80060e4:	460c      	mov	r4, r1
 80060e6:	6831      	ldr	r1, [r6, #0]
 80060e8:	4605      	mov	r5, r0
 80060ea:	b911      	cbnz	r1, 80060f2 <sbrk_aligned+0x12>
 80060ec:	f000 fcaa 	bl	8006a44 <_sbrk_r>
 80060f0:	6030      	str	r0, [r6, #0]
 80060f2:	4621      	mov	r1, r4
 80060f4:	4628      	mov	r0, r5
 80060f6:	f000 fca5 	bl	8006a44 <_sbrk_r>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d00a      	beq.n	8006114 <sbrk_aligned+0x34>
 80060fe:	1cc4      	adds	r4, r0, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	42a0      	cmp	r0, r4
 8006106:	d007      	beq.n	8006118 <sbrk_aligned+0x38>
 8006108:	1a21      	subs	r1, r4, r0
 800610a:	4628      	mov	r0, r5
 800610c:	f000 fc9a 	bl	8006a44 <_sbrk_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d101      	bne.n	8006118 <sbrk_aligned+0x38>
 8006114:	f04f 34ff 	mov.w	r4, #4294967295
 8006118:	4620      	mov	r0, r4
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	20000998 	.word	0x20000998

08006120 <_malloc_r>:
 8006120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006124:	1ccd      	adds	r5, r1, #3
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	2d00      	cmp	r5, #0
 8006134:	4607      	mov	r7, r0
 8006136:	db01      	blt.n	800613c <_malloc_r+0x1c>
 8006138:	42a9      	cmp	r1, r5
 800613a:	d905      	bls.n	8006148 <_malloc_r+0x28>
 800613c:	230c      	movs	r3, #12
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	2600      	movs	r6, #0
 8006142:	4630      	mov	r0, r6
 8006144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006148:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800621c <_malloc_r+0xfc>
 800614c:	f000 f868 	bl	8006220 <__malloc_lock>
 8006150:	f8d8 3000 	ldr.w	r3, [r8]
 8006154:	461c      	mov	r4, r3
 8006156:	bb5c      	cbnz	r4, 80061b0 <_malloc_r+0x90>
 8006158:	4629      	mov	r1, r5
 800615a:	4638      	mov	r0, r7
 800615c:	f7ff ffc0 	bl	80060e0 <sbrk_aligned>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	4604      	mov	r4, r0
 8006164:	d155      	bne.n	8006212 <_malloc_r+0xf2>
 8006166:	f8d8 4000 	ldr.w	r4, [r8]
 800616a:	4626      	mov	r6, r4
 800616c:	2e00      	cmp	r6, #0
 800616e:	d145      	bne.n	80061fc <_malloc_r+0xdc>
 8006170:	2c00      	cmp	r4, #0
 8006172:	d048      	beq.n	8006206 <_malloc_r+0xe6>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	4631      	mov	r1, r6
 8006178:	4638      	mov	r0, r7
 800617a:	eb04 0903 	add.w	r9, r4, r3
 800617e:	f000 fc61 	bl	8006a44 <_sbrk_r>
 8006182:	4581      	cmp	r9, r0
 8006184:	d13f      	bne.n	8006206 <_malloc_r+0xe6>
 8006186:	6821      	ldr	r1, [r4, #0]
 8006188:	1a6d      	subs	r5, r5, r1
 800618a:	4629      	mov	r1, r5
 800618c:	4638      	mov	r0, r7
 800618e:	f7ff ffa7 	bl	80060e0 <sbrk_aligned>
 8006192:	3001      	adds	r0, #1
 8006194:	d037      	beq.n	8006206 <_malloc_r+0xe6>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	442b      	add	r3, r5
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	f8d8 3000 	ldr.w	r3, [r8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d038      	beq.n	8006216 <_malloc_r+0xf6>
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	42a2      	cmp	r2, r4
 80061a8:	d12b      	bne.n	8006202 <_malloc_r+0xe2>
 80061aa:	2200      	movs	r2, #0
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	e00f      	b.n	80061d0 <_malloc_r+0xb0>
 80061b0:	6822      	ldr	r2, [r4, #0]
 80061b2:	1b52      	subs	r2, r2, r5
 80061b4:	d41f      	bmi.n	80061f6 <_malloc_r+0xd6>
 80061b6:	2a0b      	cmp	r2, #11
 80061b8:	d917      	bls.n	80061ea <_malloc_r+0xca>
 80061ba:	1961      	adds	r1, r4, r5
 80061bc:	42a3      	cmp	r3, r4
 80061be:	6025      	str	r5, [r4, #0]
 80061c0:	bf18      	it	ne
 80061c2:	6059      	strne	r1, [r3, #4]
 80061c4:	6863      	ldr	r3, [r4, #4]
 80061c6:	bf08      	it	eq
 80061c8:	f8c8 1000 	streq.w	r1, [r8]
 80061cc:	5162      	str	r2, [r4, r5]
 80061ce:	604b      	str	r3, [r1, #4]
 80061d0:	4638      	mov	r0, r7
 80061d2:	f104 060b 	add.w	r6, r4, #11
 80061d6:	f000 f829 	bl	800622c <__malloc_unlock>
 80061da:	f026 0607 	bic.w	r6, r6, #7
 80061de:	1d23      	adds	r3, r4, #4
 80061e0:	1af2      	subs	r2, r6, r3
 80061e2:	d0ae      	beq.n	8006142 <_malloc_r+0x22>
 80061e4:	1b9b      	subs	r3, r3, r6
 80061e6:	50a3      	str	r3, [r4, r2]
 80061e8:	e7ab      	b.n	8006142 <_malloc_r+0x22>
 80061ea:	42a3      	cmp	r3, r4
 80061ec:	6862      	ldr	r2, [r4, #4]
 80061ee:	d1dd      	bne.n	80061ac <_malloc_r+0x8c>
 80061f0:	f8c8 2000 	str.w	r2, [r8]
 80061f4:	e7ec      	b.n	80061d0 <_malloc_r+0xb0>
 80061f6:	4623      	mov	r3, r4
 80061f8:	6864      	ldr	r4, [r4, #4]
 80061fa:	e7ac      	b.n	8006156 <_malloc_r+0x36>
 80061fc:	4634      	mov	r4, r6
 80061fe:	6876      	ldr	r6, [r6, #4]
 8006200:	e7b4      	b.n	800616c <_malloc_r+0x4c>
 8006202:	4613      	mov	r3, r2
 8006204:	e7cc      	b.n	80061a0 <_malloc_r+0x80>
 8006206:	230c      	movs	r3, #12
 8006208:	603b      	str	r3, [r7, #0]
 800620a:	4638      	mov	r0, r7
 800620c:	f000 f80e 	bl	800622c <__malloc_unlock>
 8006210:	e797      	b.n	8006142 <_malloc_r+0x22>
 8006212:	6025      	str	r5, [r4, #0]
 8006214:	e7dc      	b.n	80061d0 <_malloc_r+0xb0>
 8006216:	605b      	str	r3, [r3, #4]
 8006218:	deff      	udf	#255	; 0xff
 800621a:	bf00      	nop
 800621c:	20000994 	.word	0x20000994

08006220 <__malloc_lock>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__malloc_lock+0x8>)
 8006222:	f7ff bf0f 	b.w	8006044 <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20000990 	.word	0x20000990

0800622c <__malloc_unlock>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__malloc_unlock+0x8>)
 800622e:	f7ff bf0a 	b.w	8006046 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20000990 	.word	0x20000990

08006238 <__sfputc_r>:
 8006238:	6893      	ldr	r3, [r2, #8]
 800623a:	3b01      	subs	r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	b410      	push	{r4}
 8006240:	6093      	str	r3, [r2, #8]
 8006242:	da08      	bge.n	8006256 <__sfputc_r+0x1e>
 8006244:	6994      	ldr	r4, [r2, #24]
 8006246:	42a3      	cmp	r3, r4
 8006248:	db01      	blt.n	800624e <__sfputc_r+0x16>
 800624a:	290a      	cmp	r1, #10
 800624c:	d103      	bne.n	8006256 <__sfputc_r+0x1e>
 800624e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006252:	f7ff bdea 	b.w	8005e2a <__swbuf_r>
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	1c58      	adds	r0, r3, #1
 800625a:	6010      	str	r0, [r2, #0]
 800625c:	7019      	strb	r1, [r3, #0]
 800625e:	4608      	mov	r0, r1
 8006260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006264:	4770      	bx	lr

08006266 <__sfputs_r>:
 8006266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006268:	4606      	mov	r6, r0
 800626a:	460f      	mov	r7, r1
 800626c:	4614      	mov	r4, r2
 800626e:	18d5      	adds	r5, r2, r3
 8006270:	42ac      	cmp	r4, r5
 8006272:	d101      	bne.n	8006278 <__sfputs_r+0x12>
 8006274:	2000      	movs	r0, #0
 8006276:	e007      	b.n	8006288 <__sfputs_r+0x22>
 8006278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627c:	463a      	mov	r2, r7
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ffda 	bl	8006238 <__sfputc_r>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d1f3      	bne.n	8006270 <__sfputs_r+0xa>
 8006288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800628c <_vfiprintf_r>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	460d      	mov	r5, r1
 8006292:	b09d      	sub	sp, #116	; 0x74
 8006294:	4614      	mov	r4, r2
 8006296:	4698      	mov	r8, r3
 8006298:	4606      	mov	r6, r0
 800629a:	b118      	cbz	r0, 80062a4 <_vfiprintf_r+0x18>
 800629c:	6a03      	ldr	r3, [r0, #32]
 800629e:	b90b      	cbnz	r3, 80062a4 <_vfiprintf_r+0x18>
 80062a0:	f7ff fcdc 	bl	8005c5c <__sinit>
 80062a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062a6:	07d9      	lsls	r1, r3, #31
 80062a8:	d405      	bmi.n	80062b6 <_vfiprintf_r+0x2a>
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	059a      	lsls	r2, r3, #22
 80062ae:	d402      	bmi.n	80062b6 <_vfiprintf_r+0x2a>
 80062b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062b2:	f7ff fec7 	bl	8006044 <__retarget_lock_acquire_recursive>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	071b      	lsls	r3, r3, #28
 80062ba:	d501      	bpl.n	80062c0 <_vfiprintf_r+0x34>
 80062bc:	692b      	ldr	r3, [r5, #16]
 80062be:	b99b      	cbnz	r3, 80062e8 <_vfiprintf_r+0x5c>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff fdee 	bl	8005ea4 <__swsetup_r>
 80062c8:	b170      	cbz	r0, 80062e8 <_vfiprintf_r+0x5c>
 80062ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062cc:	07dc      	lsls	r4, r3, #31
 80062ce:	d504      	bpl.n	80062da <_vfiprintf_r+0x4e>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b01d      	add	sp, #116	; 0x74
 80062d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062da:	89ab      	ldrh	r3, [r5, #12]
 80062dc:	0598      	lsls	r0, r3, #22
 80062de:	d4f7      	bmi.n	80062d0 <_vfiprintf_r+0x44>
 80062e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062e2:	f7ff feb0 	bl	8006046 <__retarget_lock_release_recursive>
 80062e6:	e7f3      	b.n	80062d0 <_vfiprintf_r+0x44>
 80062e8:	2300      	movs	r3, #0
 80062ea:	9309      	str	r3, [sp, #36]	; 0x24
 80062ec:	2320      	movs	r3, #32
 80062ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062f6:	2330      	movs	r3, #48	; 0x30
 80062f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80064ac <_vfiprintf_r+0x220>
 80062fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006300:	f04f 0901 	mov.w	r9, #1
 8006304:	4623      	mov	r3, r4
 8006306:	469a      	mov	sl, r3
 8006308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800630c:	b10a      	cbz	r2, 8006312 <_vfiprintf_r+0x86>
 800630e:	2a25      	cmp	r2, #37	; 0x25
 8006310:	d1f9      	bne.n	8006306 <_vfiprintf_r+0x7a>
 8006312:	ebba 0b04 	subs.w	fp, sl, r4
 8006316:	d00b      	beq.n	8006330 <_vfiprintf_r+0xa4>
 8006318:	465b      	mov	r3, fp
 800631a:	4622      	mov	r2, r4
 800631c:	4629      	mov	r1, r5
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff ffa1 	bl	8006266 <__sfputs_r>
 8006324:	3001      	adds	r0, #1
 8006326:	f000 80a9 	beq.w	800647c <_vfiprintf_r+0x1f0>
 800632a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800632c:	445a      	add	r2, fp
 800632e:	9209      	str	r2, [sp, #36]	; 0x24
 8006330:	f89a 3000 	ldrb.w	r3, [sl]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80a1 	beq.w	800647c <_vfiprintf_r+0x1f0>
 800633a:	2300      	movs	r3, #0
 800633c:	f04f 32ff 	mov.w	r2, #4294967295
 8006340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006344:	f10a 0a01 	add.w	sl, sl, #1
 8006348:	9304      	str	r3, [sp, #16]
 800634a:	9307      	str	r3, [sp, #28]
 800634c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006350:	931a      	str	r3, [sp, #104]	; 0x68
 8006352:	4654      	mov	r4, sl
 8006354:	2205      	movs	r2, #5
 8006356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635a:	4854      	ldr	r0, [pc, #336]	; (80064ac <_vfiprintf_r+0x220>)
 800635c:	f7f9 ff58 	bl	8000210 <memchr>
 8006360:	9a04      	ldr	r2, [sp, #16]
 8006362:	b9d8      	cbnz	r0, 800639c <_vfiprintf_r+0x110>
 8006364:	06d1      	lsls	r1, r2, #27
 8006366:	bf44      	itt	mi
 8006368:	2320      	movmi	r3, #32
 800636a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800636e:	0713      	lsls	r3, r2, #28
 8006370:	bf44      	itt	mi
 8006372:	232b      	movmi	r3, #43	; 0x2b
 8006374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006378:	f89a 3000 	ldrb.w	r3, [sl]
 800637c:	2b2a      	cmp	r3, #42	; 0x2a
 800637e:	d015      	beq.n	80063ac <_vfiprintf_r+0x120>
 8006380:	9a07      	ldr	r2, [sp, #28]
 8006382:	4654      	mov	r4, sl
 8006384:	2000      	movs	r0, #0
 8006386:	f04f 0c0a 	mov.w	ip, #10
 800638a:	4621      	mov	r1, r4
 800638c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006390:	3b30      	subs	r3, #48	; 0x30
 8006392:	2b09      	cmp	r3, #9
 8006394:	d94d      	bls.n	8006432 <_vfiprintf_r+0x1a6>
 8006396:	b1b0      	cbz	r0, 80063c6 <_vfiprintf_r+0x13a>
 8006398:	9207      	str	r2, [sp, #28]
 800639a:	e014      	b.n	80063c6 <_vfiprintf_r+0x13a>
 800639c:	eba0 0308 	sub.w	r3, r0, r8
 80063a0:	fa09 f303 	lsl.w	r3, r9, r3
 80063a4:	4313      	orrs	r3, r2
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	46a2      	mov	sl, r4
 80063aa:	e7d2      	b.n	8006352 <_vfiprintf_r+0xc6>
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	1d19      	adds	r1, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	9103      	str	r1, [sp, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bfbb      	ittet	lt
 80063b8:	425b      	neglt	r3, r3
 80063ba:	f042 0202 	orrlt.w	r2, r2, #2
 80063be:	9307      	strge	r3, [sp, #28]
 80063c0:	9307      	strlt	r3, [sp, #28]
 80063c2:	bfb8      	it	lt
 80063c4:	9204      	strlt	r2, [sp, #16]
 80063c6:	7823      	ldrb	r3, [r4, #0]
 80063c8:	2b2e      	cmp	r3, #46	; 0x2e
 80063ca:	d10c      	bne.n	80063e6 <_vfiprintf_r+0x15a>
 80063cc:	7863      	ldrb	r3, [r4, #1]
 80063ce:	2b2a      	cmp	r3, #42	; 0x2a
 80063d0:	d134      	bne.n	800643c <_vfiprintf_r+0x1b0>
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	9203      	str	r2, [sp, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfb8      	it	lt
 80063de:	f04f 33ff 	movlt.w	r3, #4294967295
 80063e2:	3402      	adds	r4, #2
 80063e4:	9305      	str	r3, [sp, #20]
 80063e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80064bc <_vfiprintf_r+0x230>
 80063ea:	7821      	ldrb	r1, [r4, #0]
 80063ec:	2203      	movs	r2, #3
 80063ee:	4650      	mov	r0, sl
 80063f0:	f7f9 ff0e 	bl	8000210 <memchr>
 80063f4:	b138      	cbz	r0, 8006406 <_vfiprintf_r+0x17a>
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	eba0 000a 	sub.w	r0, r0, sl
 80063fc:	2240      	movs	r2, #64	; 0x40
 80063fe:	4082      	lsls	r2, r0
 8006400:	4313      	orrs	r3, r2
 8006402:	3401      	adds	r4, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640a:	4829      	ldr	r0, [pc, #164]	; (80064b0 <_vfiprintf_r+0x224>)
 800640c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006410:	2206      	movs	r2, #6
 8006412:	f7f9 fefd 	bl	8000210 <memchr>
 8006416:	2800      	cmp	r0, #0
 8006418:	d03f      	beq.n	800649a <_vfiprintf_r+0x20e>
 800641a:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <_vfiprintf_r+0x228>)
 800641c:	bb1b      	cbnz	r3, 8006466 <_vfiprintf_r+0x1da>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	3307      	adds	r3, #7
 8006422:	f023 0307 	bic.w	r3, r3, #7
 8006426:	3308      	adds	r3, #8
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	443b      	add	r3, r7
 800642e:	9309      	str	r3, [sp, #36]	; 0x24
 8006430:	e768      	b.n	8006304 <_vfiprintf_r+0x78>
 8006432:	fb0c 3202 	mla	r2, ip, r2, r3
 8006436:	460c      	mov	r4, r1
 8006438:	2001      	movs	r0, #1
 800643a:	e7a6      	b.n	800638a <_vfiprintf_r+0xfe>
 800643c:	2300      	movs	r3, #0
 800643e:	3401      	adds	r4, #1
 8006440:	9305      	str	r3, [sp, #20]
 8006442:	4619      	mov	r1, r3
 8006444:	f04f 0c0a 	mov.w	ip, #10
 8006448:	4620      	mov	r0, r4
 800644a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800644e:	3a30      	subs	r2, #48	; 0x30
 8006450:	2a09      	cmp	r2, #9
 8006452:	d903      	bls.n	800645c <_vfiprintf_r+0x1d0>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0c6      	beq.n	80063e6 <_vfiprintf_r+0x15a>
 8006458:	9105      	str	r1, [sp, #20]
 800645a:	e7c4      	b.n	80063e6 <_vfiprintf_r+0x15a>
 800645c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006460:	4604      	mov	r4, r0
 8006462:	2301      	movs	r3, #1
 8006464:	e7f0      	b.n	8006448 <_vfiprintf_r+0x1bc>
 8006466:	ab03      	add	r3, sp, #12
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	462a      	mov	r2, r5
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <_vfiprintf_r+0x22c>)
 800646e:	a904      	add	r1, sp, #16
 8006470:	4630      	mov	r0, r6
 8006472:	f3af 8000 	nop.w
 8006476:	4607      	mov	r7, r0
 8006478:	1c78      	adds	r0, r7, #1
 800647a:	d1d6      	bne.n	800642a <_vfiprintf_r+0x19e>
 800647c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800647e:	07d9      	lsls	r1, r3, #31
 8006480:	d405      	bmi.n	800648e <_vfiprintf_r+0x202>
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	059a      	lsls	r2, r3, #22
 8006486:	d402      	bmi.n	800648e <_vfiprintf_r+0x202>
 8006488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800648a:	f7ff fddc 	bl	8006046 <__retarget_lock_release_recursive>
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	065b      	lsls	r3, r3, #25
 8006492:	f53f af1d 	bmi.w	80062d0 <_vfiprintf_r+0x44>
 8006496:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006498:	e71c      	b.n	80062d4 <_vfiprintf_r+0x48>
 800649a:	ab03      	add	r3, sp, #12
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	462a      	mov	r2, r5
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <_vfiprintf_r+0x22c>)
 80064a2:	a904      	add	r1, sp, #16
 80064a4:	4630      	mov	r0, r6
 80064a6:	f000 f879 	bl	800659c <_printf_i>
 80064aa:	e7e4      	b.n	8006476 <_vfiprintf_r+0x1ea>
 80064ac:	08006bec 	.word	0x08006bec
 80064b0:	08006bf6 	.word	0x08006bf6
 80064b4:	00000000 	.word	0x00000000
 80064b8:	08006267 	.word	0x08006267
 80064bc:	08006bf2 	.word	0x08006bf2

080064c0 <_printf_common>:
 80064c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c4:	4616      	mov	r6, r2
 80064c6:	4699      	mov	r9, r3
 80064c8:	688a      	ldr	r2, [r1, #8]
 80064ca:	690b      	ldr	r3, [r1, #16]
 80064cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064d0:	4293      	cmp	r3, r2
 80064d2:	bfb8      	it	lt
 80064d4:	4613      	movlt	r3, r2
 80064d6:	6033      	str	r3, [r6, #0]
 80064d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064dc:	4607      	mov	r7, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	b10a      	cbz	r2, 80064e6 <_printf_common+0x26>
 80064e2:	3301      	adds	r3, #1
 80064e4:	6033      	str	r3, [r6, #0]
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	0699      	lsls	r1, r3, #26
 80064ea:	bf42      	ittt	mi
 80064ec:	6833      	ldrmi	r3, [r6, #0]
 80064ee:	3302      	addmi	r3, #2
 80064f0:	6033      	strmi	r3, [r6, #0]
 80064f2:	6825      	ldr	r5, [r4, #0]
 80064f4:	f015 0506 	ands.w	r5, r5, #6
 80064f8:	d106      	bne.n	8006508 <_printf_common+0x48>
 80064fa:	f104 0a19 	add.w	sl, r4, #25
 80064fe:	68e3      	ldr	r3, [r4, #12]
 8006500:	6832      	ldr	r2, [r6, #0]
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	42ab      	cmp	r3, r5
 8006506:	dc26      	bgt.n	8006556 <_printf_common+0x96>
 8006508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800650c:	1e13      	subs	r3, r2, #0
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	bf18      	it	ne
 8006512:	2301      	movne	r3, #1
 8006514:	0692      	lsls	r2, r2, #26
 8006516:	d42b      	bmi.n	8006570 <_printf_common+0xb0>
 8006518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800651c:	4649      	mov	r1, r9
 800651e:	4638      	mov	r0, r7
 8006520:	47c0      	blx	r8
 8006522:	3001      	adds	r0, #1
 8006524:	d01e      	beq.n	8006564 <_printf_common+0xa4>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	6922      	ldr	r2, [r4, #16]
 800652a:	f003 0306 	and.w	r3, r3, #6
 800652e:	2b04      	cmp	r3, #4
 8006530:	bf02      	ittt	eq
 8006532:	68e5      	ldreq	r5, [r4, #12]
 8006534:	6833      	ldreq	r3, [r6, #0]
 8006536:	1aed      	subeq	r5, r5, r3
 8006538:	68a3      	ldr	r3, [r4, #8]
 800653a:	bf0c      	ite	eq
 800653c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006540:	2500      	movne	r5, #0
 8006542:	4293      	cmp	r3, r2
 8006544:	bfc4      	itt	gt
 8006546:	1a9b      	subgt	r3, r3, r2
 8006548:	18ed      	addgt	r5, r5, r3
 800654a:	2600      	movs	r6, #0
 800654c:	341a      	adds	r4, #26
 800654e:	42b5      	cmp	r5, r6
 8006550:	d11a      	bne.n	8006588 <_printf_common+0xc8>
 8006552:	2000      	movs	r0, #0
 8006554:	e008      	b.n	8006568 <_printf_common+0xa8>
 8006556:	2301      	movs	r3, #1
 8006558:	4652      	mov	r2, sl
 800655a:	4649      	mov	r1, r9
 800655c:	4638      	mov	r0, r7
 800655e:	47c0      	blx	r8
 8006560:	3001      	adds	r0, #1
 8006562:	d103      	bne.n	800656c <_printf_common+0xac>
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656c:	3501      	adds	r5, #1
 800656e:	e7c6      	b.n	80064fe <_printf_common+0x3e>
 8006570:	18e1      	adds	r1, r4, r3
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	2030      	movs	r0, #48	; 0x30
 8006576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800657a:	4422      	add	r2, r4
 800657c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006584:	3302      	adds	r3, #2
 8006586:	e7c7      	b.n	8006518 <_printf_common+0x58>
 8006588:	2301      	movs	r3, #1
 800658a:	4622      	mov	r2, r4
 800658c:	4649      	mov	r1, r9
 800658e:	4638      	mov	r0, r7
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d0e6      	beq.n	8006564 <_printf_common+0xa4>
 8006596:	3601      	adds	r6, #1
 8006598:	e7d9      	b.n	800654e <_printf_common+0x8e>
	...

0800659c <_printf_i>:
 800659c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	7e0f      	ldrb	r7, [r1, #24]
 80065a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065a4:	2f78      	cmp	r7, #120	; 0x78
 80065a6:	4691      	mov	r9, r2
 80065a8:	4680      	mov	r8, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	469a      	mov	sl, r3
 80065ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065b2:	d807      	bhi.n	80065c4 <_printf_i+0x28>
 80065b4:	2f62      	cmp	r7, #98	; 0x62
 80065b6:	d80a      	bhi.n	80065ce <_printf_i+0x32>
 80065b8:	2f00      	cmp	r7, #0
 80065ba:	f000 80d4 	beq.w	8006766 <_printf_i+0x1ca>
 80065be:	2f58      	cmp	r7, #88	; 0x58
 80065c0:	f000 80c0 	beq.w	8006744 <_printf_i+0x1a8>
 80065c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065cc:	e03a      	b.n	8006644 <_printf_i+0xa8>
 80065ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065d2:	2b15      	cmp	r3, #21
 80065d4:	d8f6      	bhi.n	80065c4 <_printf_i+0x28>
 80065d6:	a101      	add	r1, pc, #4	; (adr r1, 80065dc <_printf_i+0x40>)
 80065d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065dc:	08006635 	.word	0x08006635
 80065e0:	08006649 	.word	0x08006649
 80065e4:	080065c5 	.word	0x080065c5
 80065e8:	080065c5 	.word	0x080065c5
 80065ec:	080065c5 	.word	0x080065c5
 80065f0:	080065c5 	.word	0x080065c5
 80065f4:	08006649 	.word	0x08006649
 80065f8:	080065c5 	.word	0x080065c5
 80065fc:	080065c5 	.word	0x080065c5
 8006600:	080065c5 	.word	0x080065c5
 8006604:	080065c5 	.word	0x080065c5
 8006608:	0800674d 	.word	0x0800674d
 800660c:	08006675 	.word	0x08006675
 8006610:	08006707 	.word	0x08006707
 8006614:	080065c5 	.word	0x080065c5
 8006618:	080065c5 	.word	0x080065c5
 800661c:	0800676f 	.word	0x0800676f
 8006620:	080065c5 	.word	0x080065c5
 8006624:	08006675 	.word	0x08006675
 8006628:	080065c5 	.word	0x080065c5
 800662c:	080065c5 	.word	0x080065c5
 8006630:	0800670f 	.word	0x0800670f
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	602a      	str	r2, [r5, #0]
 800663c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006644:	2301      	movs	r3, #1
 8006646:	e09f      	b.n	8006788 <_printf_i+0x1ec>
 8006648:	6820      	ldr	r0, [r4, #0]
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	0607      	lsls	r7, r0, #24
 800664e:	f103 0104 	add.w	r1, r3, #4
 8006652:	6029      	str	r1, [r5, #0]
 8006654:	d501      	bpl.n	800665a <_printf_i+0xbe>
 8006656:	681e      	ldr	r6, [r3, #0]
 8006658:	e003      	b.n	8006662 <_printf_i+0xc6>
 800665a:	0646      	lsls	r6, r0, #25
 800665c:	d5fb      	bpl.n	8006656 <_printf_i+0xba>
 800665e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006662:	2e00      	cmp	r6, #0
 8006664:	da03      	bge.n	800666e <_printf_i+0xd2>
 8006666:	232d      	movs	r3, #45	; 0x2d
 8006668:	4276      	negs	r6, r6
 800666a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666e:	485a      	ldr	r0, [pc, #360]	; (80067d8 <_printf_i+0x23c>)
 8006670:	230a      	movs	r3, #10
 8006672:	e012      	b.n	800669a <_printf_i+0xfe>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	1d19      	adds	r1, r3, #4
 800667a:	6029      	str	r1, [r5, #0]
 800667c:	0605      	lsls	r5, r0, #24
 800667e:	d501      	bpl.n	8006684 <_printf_i+0xe8>
 8006680:	681e      	ldr	r6, [r3, #0]
 8006682:	e002      	b.n	800668a <_printf_i+0xee>
 8006684:	0641      	lsls	r1, r0, #25
 8006686:	d5fb      	bpl.n	8006680 <_printf_i+0xe4>
 8006688:	881e      	ldrh	r6, [r3, #0]
 800668a:	4853      	ldr	r0, [pc, #332]	; (80067d8 <_printf_i+0x23c>)
 800668c:	2f6f      	cmp	r7, #111	; 0x6f
 800668e:	bf0c      	ite	eq
 8006690:	2308      	moveq	r3, #8
 8006692:	230a      	movne	r3, #10
 8006694:	2100      	movs	r1, #0
 8006696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800669a:	6865      	ldr	r5, [r4, #4]
 800669c:	60a5      	str	r5, [r4, #8]
 800669e:	2d00      	cmp	r5, #0
 80066a0:	bfa2      	ittt	ge
 80066a2:	6821      	ldrge	r1, [r4, #0]
 80066a4:	f021 0104 	bicge.w	r1, r1, #4
 80066a8:	6021      	strge	r1, [r4, #0]
 80066aa:	b90e      	cbnz	r6, 80066b0 <_printf_i+0x114>
 80066ac:	2d00      	cmp	r5, #0
 80066ae:	d04b      	beq.n	8006748 <_printf_i+0x1ac>
 80066b0:	4615      	mov	r5, r2
 80066b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80066b6:	fb03 6711 	mls	r7, r3, r1, r6
 80066ba:	5dc7      	ldrb	r7, [r0, r7]
 80066bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066c0:	4637      	mov	r7, r6
 80066c2:	42bb      	cmp	r3, r7
 80066c4:	460e      	mov	r6, r1
 80066c6:	d9f4      	bls.n	80066b2 <_printf_i+0x116>
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d10b      	bne.n	80066e4 <_printf_i+0x148>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	07de      	lsls	r6, r3, #31
 80066d0:	d508      	bpl.n	80066e4 <_printf_i+0x148>
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	6861      	ldr	r1, [r4, #4]
 80066d6:	4299      	cmp	r1, r3
 80066d8:	bfde      	ittt	le
 80066da:	2330      	movle	r3, #48	; 0x30
 80066dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066e4:	1b52      	subs	r2, r2, r5
 80066e6:	6122      	str	r2, [r4, #16]
 80066e8:	f8cd a000 	str.w	sl, [sp]
 80066ec:	464b      	mov	r3, r9
 80066ee:	aa03      	add	r2, sp, #12
 80066f0:	4621      	mov	r1, r4
 80066f2:	4640      	mov	r0, r8
 80066f4:	f7ff fee4 	bl	80064c0 <_printf_common>
 80066f8:	3001      	adds	r0, #1
 80066fa:	d14a      	bne.n	8006792 <_printf_i+0x1f6>
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	b004      	add	sp, #16
 8006702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f043 0320 	orr.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	4833      	ldr	r0, [pc, #204]	; (80067dc <_printf_i+0x240>)
 8006710:	2778      	movs	r7, #120	; 0x78
 8006712:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	6829      	ldr	r1, [r5, #0]
 800671a:	061f      	lsls	r7, r3, #24
 800671c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006720:	d402      	bmi.n	8006728 <_printf_i+0x18c>
 8006722:	065f      	lsls	r7, r3, #25
 8006724:	bf48      	it	mi
 8006726:	b2b6      	uxthmi	r6, r6
 8006728:	07df      	lsls	r7, r3, #31
 800672a:	bf48      	it	mi
 800672c:	f043 0320 	orrmi.w	r3, r3, #32
 8006730:	6029      	str	r1, [r5, #0]
 8006732:	bf48      	it	mi
 8006734:	6023      	strmi	r3, [r4, #0]
 8006736:	b91e      	cbnz	r6, 8006740 <_printf_i+0x1a4>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f023 0320 	bic.w	r3, r3, #32
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	2310      	movs	r3, #16
 8006742:	e7a7      	b.n	8006694 <_printf_i+0xf8>
 8006744:	4824      	ldr	r0, [pc, #144]	; (80067d8 <_printf_i+0x23c>)
 8006746:	e7e4      	b.n	8006712 <_printf_i+0x176>
 8006748:	4615      	mov	r5, r2
 800674a:	e7bd      	b.n	80066c8 <_printf_i+0x12c>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	6826      	ldr	r6, [r4, #0]
 8006750:	6961      	ldr	r1, [r4, #20]
 8006752:	1d18      	adds	r0, r3, #4
 8006754:	6028      	str	r0, [r5, #0]
 8006756:	0635      	lsls	r5, r6, #24
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	d501      	bpl.n	8006760 <_printf_i+0x1c4>
 800675c:	6019      	str	r1, [r3, #0]
 800675e:	e002      	b.n	8006766 <_printf_i+0x1ca>
 8006760:	0670      	lsls	r0, r6, #25
 8006762:	d5fb      	bpl.n	800675c <_printf_i+0x1c0>
 8006764:	8019      	strh	r1, [r3, #0]
 8006766:	2300      	movs	r3, #0
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	4615      	mov	r5, r2
 800676c:	e7bc      	b.n	80066e8 <_printf_i+0x14c>
 800676e:	682b      	ldr	r3, [r5, #0]
 8006770:	1d1a      	adds	r2, r3, #4
 8006772:	602a      	str	r2, [r5, #0]
 8006774:	681d      	ldr	r5, [r3, #0]
 8006776:	6862      	ldr	r2, [r4, #4]
 8006778:	2100      	movs	r1, #0
 800677a:	4628      	mov	r0, r5
 800677c:	f7f9 fd48 	bl	8000210 <memchr>
 8006780:	b108      	cbz	r0, 8006786 <_printf_i+0x1ea>
 8006782:	1b40      	subs	r0, r0, r5
 8006784:	6060      	str	r0, [r4, #4]
 8006786:	6863      	ldr	r3, [r4, #4]
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	2300      	movs	r3, #0
 800678c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006790:	e7aa      	b.n	80066e8 <_printf_i+0x14c>
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	462a      	mov	r2, r5
 8006796:	4649      	mov	r1, r9
 8006798:	4640      	mov	r0, r8
 800679a:	47d0      	blx	sl
 800679c:	3001      	adds	r0, #1
 800679e:	d0ad      	beq.n	80066fc <_printf_i+0x160>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	079b      	lsls	r3, r3, #30
 80067a4:	d413      	bmi.n	80067ce <_printf_i+0x232>
 80067a6:	68e0      	ldr	r0, [r4, #12]
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	4298      	cmp	r0, r3
 80067ac:	bfb8      	it	lt
 80067ae:	4618      	movlt	r0, r3
 80067b0:	e7a6      	b.n	8006700 <_printf_i+0x164>
 80067b2:	2301      	movs	r3, #1
 80067b4:	4632      	mov	r2, r6
 80067b6:	4649      	mov	r1, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	47d0      	blx	sl
 80067bc:	3001      	adds	r0, #1
 80067be:	d09d      	beq.n	80066fc <_printf_i+0x160>
 80067c0:	3501      	adds	r5, #1
 80067c2:	68e3      	ldr	r3, [r4, #12]
 80067c4:	9903      	ldr	r1, [sp, #12]
 80067c6:	1a5b      	subs	r3, r3, r1
 80067c8:	42ab      	cmp	r3, r5
 80067ca:	dcf2      	bgt.n	80067b2 <_printf_i+0x216>
 80067cc:	e7eb      	b.n	80067a6 <_printf_i+0x20a>
 80067ce:	2500      	movs	r5, #0
 80067d0:	f104 0619 	add.w	r6, r4, #25
 80067d4:	e7f5      	b.n	80067c2 <_printf_i+0x226>
 80067d6:	bf00      	nop
 80067d8:	08006bfd 	.word	0x08006bfd
 80067dc:	08006c0e 	.word	0x08006c0e

080067e0 <__sflush_r>:
 80067e0:	898a      	ldrh	r2, [r1, #12]
 80067e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e6:	4605      	mov	r5, r0
 80067e8:	0710      	lsls	r0, r2, #28
 80067ea:	460c      	mov	r4, r1
 80067ec:	d458      	bmi.n	80068a0 <__sflush_r+0xc0>
 80067ee:	684b      	ldr	r3, [r1, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc05      	bgt.n	8006800 <__sflush_r+0x20>
 80067f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dc02      	bgt.n	8006800 <__sflush_r+0x20>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006802:	2e00      	cmp	r6, #0
 8006804:	d0f9      	beq.n	80067fa <__sflush_r+0x1a>
 8006806:	2300      	movs	r3, #0
 8006808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800680c:	682f      	ldr	r7, [r5, #0]
 800680e:	6a21      	ldr	r1, [r4, #32]
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	d032      	beq.n	800687a <__sflush_r+0x9a>
 8006814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	075a      	lsls	r2, r3, #29
 800681a:	d505      	bpl.n	8006828 <__sflush_r+0x48>
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	1ac0      	subs	r0, r0, r3
 8006820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006822:	b10b      	cbz	r3, 8006828 <__sflush_r+0x48>
 8006824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006826:	1ac0      	subs	r0, r0, r3
 8006828:	2300      	movs	r3, #0
 800682a:	4602      	mov	r2, r0
 800682c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800682e:	6a21      	ldr	r1, [r4, #32]
 8006830:	4628      	mov	r0, r5
 8006832:	47b0      	blx	r6
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	d106      	bne.n	8006848 <__sflush_r+0x68>
 800683a:	6829      	ldr	r1, [r5, #0]
 800683c:	291d      	cmp	r1, #29
 800683e:	d82b      	bhi.n	8006898 <__sflush_r+0xb8>
 8006840:	4a29      	ldr	r2, [pc, #164]	; (80068e8 <__sflush_r+0x108>)
 8006842:	410a      	asrs	r2, r1
 8006844:	07d6      	lsls	r6, r2, #31
 8006846:	d427      	bmi.n	8006898 <__sflush_r+0xb8>
 8006848:	2200      	movs	r2, #0
 800684a:	6062      	str	r2, [r4, #4]
 800684c:	04d9      	lsls	r1, r3, #19
 800684e:	6922      	ldr	r2, [r4, #16]
 8006850:	6022      	str	r2, [r4, #0]
 8006852:	d504      	bpl.n	800685e <__sflush_r+0x7e>
 8006854:	1c42      	adds	r2, r0, #1
 8006856:	d101      	bne.n	800685c <__sflush_r+0x7c>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b903      	cbnz	r3, 800685e <__sflush_r+0x7e>
 800685c:	6560      	str	r0, [r4, #84]	; 0x54
 800685e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006860:	602f      	str	r7, [r5, #0]
 8006862:	2900      	cmp	r1, #0
 8006864:	d0c9      	beq.n	80067fa <__sflush_r+0x1a>
 8006866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800686a:	4299      	cmp	r1, r3
 800686c:	d002      	beq.n	8006874 <__sflush_r+0x94>
 800686e:	4628      	mov	r0, r5
 8006870:	f7ff fbea 	bl	8006048 <_free_r>
 8006874:	2000      	movs	r0, #0
 8006876:	6360      	str	r0, [r4, #52]	; 0x34
 8006878:	e7c0      	b.n	80067fc <__sflush_r+0x1c>
 800687a:	2301      	movs	r3, #1
 800687c:	4628      	mov	r0, r5
 800687e:	47b0      	blx	r6
 8006880:	1c41      	adds	r1, r0, #1
 8006882:	d1c8      	bne.n	8006816 <__sflush_r+0x36>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0c5      	beq.n	8006816 <__sflush_r+0x36>
 800688a:	2b1d      	cmp	r3, #29
 800688c:	d001      	beq.n	8006892 <__sflush_r+0xb2>
 800688e:	2b16      	cmp	r3, #22
 8006890:	d101      	bne.n	8006896 <__sflush_r+0xb6>
 8006892:	602f      	str	r7, [r5, #0]
 8006894:	e7b1      	b.n	80067fa <__sflush_r+0x1a>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	e7ad      	b.n	80067fc <__sflush_r+0x1c>
 80068a0:	690f      	ldr	r7, [r1, #16]
 80068a2:	2f00      	cmp	r7, #0
 80068a4:	d0a9      	beq.n	80067fa <__sflush_r+0x1a>
 80068a6:	0793      	lsls	r3, r2, #30
 80068a8:	680e      	ldr	r6, [r1, #0]
 80068aa:	bf08      	it	eq
 80068ac:	694b      	ldreq	r3, [r1, #20]
 80068ae:	600f      	str	r7, [r1, #0]
 80068b0:	bf18      	it	ne
 80068b2:	2300      	movne	r3, #0
 80068b4:	eba6 0807 	sub.w	r8, r6, r7
 80068b8:	608b      	str	r3, [r1, #8]
 80068ba:	f1b8 0f00 	cmp.w	r8, #0
 80068be:	dd9c      	ble.n	80067fa <__sflush_r+0x1a>
 80068c0:	6a21      	ldr	r1, [r4, #32]
 80068c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068c4:	4643      	mov	r3, r8
 80068c6:	463a      	mov	r2, r7
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b0      	blx	r6
 80068cc:	2800      	cmp	r0, #0
 80068ce:	dc06      	bgt.n	80068de <__sflush_r+0xfe>
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	e78e      	b.n	80067fc <__sflush_r+0x1c>
 80068de:	4407      	add	r7, r0
 80068e0:	eba8 0800 	sub.w	r8, r8, r0
 80068e4:	e7e9      	b.n	80068ba <__sflush_r+0xda>
 80068e6:	bf00      	nop
 80068e8:	dfbffffe 	.word	0xdfbffffe

080068ec <_fflush_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	690b      	ldr	r3, [r1, #16]
 80068f0:	4605      	mov	r5, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	b913      	cbnz	r3, 80068fc <_fflush_r+0x10>
 80068f6:	2500      	movs	r5, #0
 80068f8:	4628      	mov	r0, r5
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	b118      	cbz	r0, 8006906 <_fflush_r+0x1a>
 80068fe:	6a03      	ldr	r3, [r0, #32]
 8006900:	b90b      	cbnz	r3, 8006906 <_fflush_r+0x1a>
 8006902:	f7ff f9ab 	bl	8005c5c <__sinit>
 8006906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f3      	beq.n	80068f6 <_fflush_r+0xa>
 800690e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006910:	07d0      	lsls	r0, r2, #31
 8006912:	d404      	bmi.n	800691e <_fflush_r+0x32>
 8006914:	0599      	lsls	r1, r3, #22
 8006916:	d402      	bmi.n	800691e <_fflush_r+0x32>
 8006918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800691a:	f7ff fb93 	bl	8006044 <__retarget_lock_acquire_recursive>
 800691e:	4628      	mov	r0, r5
 8006920:	4621      	mov	r1, r4
 8006922:	f7ff ff5d 	bl	80067e0 <__sflush_r>
 8006926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006928:	07da      	lsls	r2, r3, #31
 800692a:	4605      	mov	r5, r0
 800692c:	d4e4      	bmi.n	80068f8 <_fflush_r+0xc>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	059b      	lsls	r3, r3, #22
 8006932:	d4e1      	bmi.n	80068f8 <_fflush_r+0xc>
 8006934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006936:	f7ff fb86 	bl	8006046 <__retarget_lock_release_recursive>
 800693a:	e7dd      	b.n	80068f8 <_fflush_r+0xc>

0800693c <__swhatbuf_r>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	460c      	mov	r4, r1
 8006940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006944:	2900      	cmp	r1, #0
 8006946:	b096      	sub	sp, #88	; 0x58
 8006948:	4615      	mov	r5, r2
 800694a:	461e      	mov	r6, r3
 800694c:	da0d      	bge.n	800696a <__swhatbuf_r+0x2e>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006954:	f04f 0100 	mov.w	r1, #0
 8006958:	bf0c      	ite	eq
 800695a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800695e:	2340      	movne	r3, #64	; 0x40
 8006960:	2000      	movs	r0, #0
 8006962:	6031      	str	r1, [r6, #0]
 8006964:	602b      	str	r3, [r5, #0]
 8006966:	b016      	add	sp, #88	; 0x58
 8006968:	bd70      	pop	{r4, r5, r6, pc}
 800696a:	466a      	mov	r2, sp
 800696c:	f000 f848 	bl	8006a00 <_fstat_r>
 8006970:	2800      	cmp	r0, #0
 8006972:	dbec      	blt.n	800694e <__swhatbuf_r+0x12>
 8006974:	9901      	ldr	r1, [sp, #4]
 8006976:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800697a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800697e:	4259      	negs	r1, r3
 8006980:	4159      	adcs	r1, r3
 8006982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006986:	e7eb      	b.n	8006960 <__swhatbuf_r+0x24>

08006988 <__smakebuf_r>:
 8006988:	898b      	ldrh	r3, [r1, #12]
 800698a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800698c:	079d      	lsls	r5, r3, #30
 800698e:	4606      	mov	r6, r0
 8006990:	460c      	mov	r4, r1
 8006992:	d507      	bpl.n	80069a4 <__smakebuf_r+0x1c>
 8006994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	2301      	movs	r3, #1
 800699e:	6163      	str	r3, [r4, #20]
 80069a0:	b002      	add	sp, #8
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	ab01      	add	r3, sp, #4
 80069a6:	466a      	mov	r2, sp
 80069a8:	f7ff ffc8 	bl	800693c <__swhatbuf_r>
 80069ac:	9900      	ldr	r1, [sp, #0]
 80069ae:	4605      	mov	r5, r0
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff fbb5 	bl	8006120 <_malloc_r>
 80069b6:	b948      	cbnz	r0, 80069cc <__smakebuf_r+0x44>
 80069b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069bc:	059a      	lsls	r2, r3, #22
 80069be:	d4ef      	bmi.n	80069a0 <__smakebuf_r+0x18>
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	e7e3      	b.n	8006994 <__smakebuf_r+0xc>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	6020      	str	r0, [r4, #0]
 80069d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	9b00      	ldr	r3, [sp, #0]
 80069d8:	6163      	str	r3, [r4, #20]
 80069da:	9b01      	ldr	r3, [sp, #4]
 80069dc:	6120      	str	r0, [r4, #16]
 80069de:	b15b      	cbz	r3, 80069f8 <__smakebuf_r+0x70>
 80069e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f81d 	bl	8006a24 <_isatty_r>
 80069ea:	b128      	cbz	r0, 80069f8 <__smakebuf_r+0x70>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	f023 0303 	bic.w	r3, r3, #3
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	431d      	orrs	r5, r3
 80069fc:	81a5      	strh	r5, [r4, #12]
 80069fe:	e7cf      	b.n	80069a0 <__smakebuf_r+0x18>

08006a00 <_fstat_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4d07      	ldr	r5, [pc, #28]	; (8006a20 <_fstat_r+0x20>)
 8006a04:	2300      	movs	r3, #0
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	f7fa fbc6 	bl	800119e <_fstat>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d102      	bne.n	8006a1c <_fstat_r+0x1c>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	b103      	cbz	r3, 8006a1c <_fstat_r+0x1c>
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	2000098c 	.word	0x2000098c

08006a24 <_isatty_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d06      	ldr	r5, [pc, #24]	; (8006a40 <_isatty_r+0x1c>)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fa fbc5 	bl	80011be <_isatty>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_isatty_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_isatty_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	2000098c 	.word	0x2000098c

08006a44 <_sbrk_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d06      	ldr	r5, [pc, #24]	; (8006a60 <_sbrk_r+0x1c>)
 8006a48:	2300      	movs	r3, #0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fa fbce 	bl	80011f0 <_sbrk>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_sbrk_r+0x1a>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_sbrk_r+0x1a>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	2000098c 	.word	0x2000098c

08006a64 <_init>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	bf00      	nop
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr

08006a70 <_fini>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr
