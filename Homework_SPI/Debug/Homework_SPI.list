
Homework_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005340  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e4  080055e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055ec  080055ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  2000000c  08005600  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000870  08005600  00020870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a6f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d13  00000000  00000000  00031aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00034808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab2  00000000  00000000  00035610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263b3  00000000  00000000  000360c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e9c  00000000  00000000  0005c475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea9de  00000000  00000000  00070311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003860  00000000  00000000  0015acf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080054f0 	.word	0x080054f0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080054f0 	.word	0x080054f0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_DMA_Init+0x80>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <MX_DMA_Init+0x80>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_DMA_Init+0x80>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_DMA_Init+0x80>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <MX_DMA_Init+0x80>)
 8000528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_DMA_Init+0x80>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	200e      	movs	r0, #14
 8000540:	f000 ffc5 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000544:	200e      	movs	r0, #14
 8000546:	f000 ffde 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	200f      	movs	r0, #15
 8000550:	f000 ffbd 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000554:	200f      	movs	r0, #15
 8000556:	f000 ffd6 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	2038      	movs	r0, #56	; 0x38
 8000560:	f000 ffb5 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000564:	2038      	movs	r0, #56	; 0x38
 8000566:	f000 ffce 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	203b      	movs	r0, #59	; 0x3b
 8000570:	f000 ffad 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000574:	203b      	movs	r0, #59	; 0x3b
 8000576:	f000 ffc6 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b68      	ldr	r3, [pc, #416]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a67      	ldr	r2, [pc, #412]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b65      	ldr	r3, [pc, #404]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	4b62      	ldr	r3, [pc, #392]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a61      	ldr	r2, [pc, #388]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b5f      	ldr	r3, [pc, #380]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b5c      	ldr	r3, [pc, #368]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a5b      	ldr	r2, [pc, #364]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b59      	ldr	r3, [pc, #356]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b56      	ldr	r3, [pc, #344]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a55      	ldr	r2, [pc, #340]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b53      	ldr	r3, [pc, #332]	; (8000740 <MX_GPIO_Init+0x1b8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	4b50      	ldr	r3, [pc, #320]	; (8000740 <MX_GPIO_Init+0x1b8>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a4f      	ldr	r2, [pc, #316]	; (8000740 <MX_GPIO_Init+0x1b8>)
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b4d      	ldr	r3, [pc, #308]	; (8000740 <MX_GPIO_Init+0x1b8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0308 	and.w	r3, r3, #8
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000616:	4b4a      	ldr	r3, [pc, #296]	; (8000740 <MX_GPIO_Init+0x1b8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a49      	ldr	r2, [pc, #292]	; (8000740 <MX_GPIO_Init+0x1b8>)
 800061c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b47      	ldr	r3, [pc, #284]	; (8000740 <MX_GPIO_Init+0x1b8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f244 0181 	movw	r1, #16513	; 0x4081
 8000634:	4843      	ldr	r0, [pc, #268]	; (8000744 <MX_GPIO_Init+0x1bc>)
 8000636:	f001 fc39 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	4842      	ldr	r0, [pc, #264]	; (8000748 <MX_GPIO_Init+0x1c0>)
 8000640:	f001 fc34 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	483c      	ldr	r0, [pc, #240]	; (800074c <MX_GPIO_Init+0x1c4>)
 800065c:	f001 fa7a 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000660:	2332      	movs	r3, #50	; 0x32
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000670:	230b      	movs	r3, #11
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4834      	ldr	r0, [pc, #208]	; (800074c <MX_GPIO_Init+0x1c4>)
 800067c:	f001 fa6a 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000680:	2386      	movs	r3, #134	; 0x86
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	482d      	ldr	r0, [pc, #180]	; (8000750 <MX_GPIO_Init+0x1c8>)
 800069c:	f001 fa5a 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4822      	ldr	r0, [pc, #136]	; (8000744 <MX_GPIO_Init+0x1bc>)
 80006ba:	f001 fa4b 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d0:	230b      	movs	r3, #11
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <MX_GPIO_Init+0x1bc>)
 80006dc:	f001 fa3a 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4814      	ldr	r0, [pc, #80]	; (8000748 <MX_GPIO_Init+0x1c0>)
 80006f8:	f001 fa2c 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_GPIO_Init+0x1c0>)
 8000710:	f001 fa20 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000714:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000726:	230b      	movs	r3, #11
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_GPIO_Init+0x1c0>)
 8000732:	f001 fa0f 	bl	8001b54 <HAL_GPIO_Init>

}
 8000736:	bf00      	nop
 8000738:	3730      	adds	r7, #48	; 0x30
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40020400 	.word	0x40020400
 8000748:	40021800 	.word	0x40021800
 800074c:	40020800 	.word	0x40020800
 8000750:	40020000 	.word	0x40020000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fd5d 	bl	8001216 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f812 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f7ff ff12 	bl	8000588 <MX_GPIO_Init>
  MX_DMA_Init();
 8000764:	f7ff fece 	bl	8000504 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000768:	f000 fbf4 	bl	8000f54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800076c:	f000 fc82 	bl	8001074 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000770:	f000 f876 	bl	8000860 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000774:	f000 f8b2 	bl	80008dc <MX_SPI2_Init>
  MX_SPI3_Init();
 8000778:	f000 f8ea 	bl	8000950 <MX_SPI3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hw_main();
 800077c:	f004 fe86 	bl	800548c <hw_main>
 8000780:	e7fc      	b.n	800077c <main+0x28>
	...

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fe80 	bl	8005498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a8:	f001 fce2 	bl	8002170 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <SystemClock_Config+0xc8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a26      	ldr	r2, [pc, #152]	; (800084c <SystemClock_Config+0xc8>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <SystemClock_Config+0xc8>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SystemClock_Config+0xcc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a20      	ldr	r2, [pc, #128]	; (8000850 <SystemClock_Config+0xcc>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <SystemClock_Config+0xcc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007f8:	2348      	movs	r3, #72	; 0x48
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000800:	2303      	movs	r3, #3
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fcc1 	bl	8002190 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000814:	f000 f81e 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2102      	movs	r1, #2
 8000834:	4618      	mov	r0, r3
 8000836:	f001 ff4f 	bl	80026d8 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000840:	f000 f808 	bl	8000854 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3750      	adds	r7, #80	; 0x50
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI1_Init+0x74>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000878:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x74>)
 800087c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000890:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000898:	2220      	movs	r2, #32
 800089a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008bc:	2208      	movs	r2, #8
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008c2:	f002 fd1f 	bl	8003304 <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80008cc:	f7ff ffc2 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000028 	.word	0x20000028
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_SPI2_Init+0x6c>)
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <MX_SPI2_Init+0x70>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_SPI2_Init+0x6c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI2_Init+0x6c>)
 80008ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI2_Init+0x6c>)
 80008f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_SPI2_Init+0x6c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI2_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI2_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI2_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI2_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_SPI2_Init+0x6c>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI2_Init+0x6c>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_SPI2_Init+0x6c>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI2_Init+0x6c>)
 800092e:	2200      	movs	r2, #0
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_SPI2_Init+0x6c>)
 8000934:	f002 fce6 	bl	8003304 <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800093e:	f7ff ff89 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000008c 	.word	0x2000008c
 800094c:	40003800 	.word	0x40003800

08000950 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000956:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <MX_SPI3_Init+0x70>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_SPI3_Init+0x6c>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000968:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800096c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_SPI3_Init+0x6c>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI3_Init+0x6c>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI3_Init+0x6c>)
 8000996:	2207      	movs	r2, #7
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_SPI3_Init+0x6c>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI3_Init+0x6c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_SPI3_Init+0x6c>)
 80009a8:	f002 fcac 	bl	8003304 <HAL_SPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 80009b2:	f7ff ff4f 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000f0 	.word	0x200000f0
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b092      	sub	sp, #72	; 0x48
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a56      	ldr	r2, [pc, #344]	; (8000b3c <HAL_SPI_MspInit+0x178>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	f040 80ba 	bne.w	8000b5c <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e8:	4b55      	ldr	r3, [pc, #340]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 80009ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ec:	4a54      	ldr	r2, [pc, #336]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 80009ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f2:	6453      	str	r3, [r2, #68]	; 0x44
 80009f4:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 80009f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
 80009fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a4e      	ldr	r2, [pc, #312]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b49      	ldr	r3, [pc, #292]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <HAL_SPI_MspInit+0x17c>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a30:	2310      	movs	r3, #16
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a40:	2305      	movs	r3, #5
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a48:	4619      	mov	r1, r3
 8000a4a:	483e      	ldr	r0, [pc, #248]	; (8000b44 <HAL_SPI_MspInit+0x180>)
 8000a4c:	f001 f882 	bl	8001b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a50:	2338      	movs	r3, #56	; 0x38
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a60:	2305      	movs	r3, #5
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4837      	ldr	r0, [pc, #220]	; (8000b48 <HAL_SPI_MspInit+0x184>)
 8000a6c:	f001 f872 	bl	8001b54 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a70:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000a72:	4a37      	ldr	r2, [pc, #220]	; (8000b50 <HAL_SPI_MspInit+0x18c>)
 8000a74:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000a78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a7c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a7e:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a8a:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a90:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ab0:	4826      	ldr	r0, [pc, #152]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000ab2:	f000 fd43 	bl	800153c <HAL_DMA_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8000abc:	f7ff feca 	bl	8000854 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000ac4:	659a      	str	r2, [r3, #88]	; 0x58
 8000ac6:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <HAL_SPI_MspInit+0x188>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_SPI_MspInit+0x194>)
 8000ad0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000ad4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ad8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000adc:	2240      	movs	r2, #64	; 0x40
 8000ade:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000b0e:	f000 fd15 	bl	800153c <HAL_DMA_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000b18:	f7ff fe9c 	bl	8000854 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000b20:	655a      	str	r2, [r3, #84]	; 0x54
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_SPI_MspInit+0x190>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2023      	movs	r0, #35	; 0x23
 8000b2e:	f000 fcce 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b32:	2023      	movs	r0, #35	; 0x23
 8000b34:	f000 fce7 	bl	8001506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b38:	e14e      	b.n	8000dd8 <HAL_SPI_MspInit+0x414>
 8000b3a:	bf00      	nop
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	20000154 	.word	0x20000154
 8000b50:	40026410 	.word	0x40026410
 8000b54:	200001b4 	.word	0x200001b4
 8000b58:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a9f      	ldr	r2, [pc, #636]	; (8000de0 <HAL_SPI_MspInit+0x41c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	f040 80d5 	bne.w	8000d12 <HAL_SPI_MspInit+0x34e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b68:	4b9e      	ldr	r3, [pc, #632]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a9d      	ldr	r2, [pc, #628]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b9b      	ldr	r3, [pc, #620]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a97      	ldr	r2, [pc, #604]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b95      	ldr	r3, [pc, #596]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
 8000b96:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	4b92      	ldr	r3, [pc, #584]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a91      	ldr	r2, [pc, #580]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b8f      	ldr	r3, [pc, #572]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb0:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a8b      	ldr	r2, [pc, #556]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000be0:	4619      	mov	r1, r3
 8000be2:	4881      	ldr	r0, [pc, #516]	; (8000de8 <HAL_SPI_MspInit+0x424>)
 8000be4:	f000 ffb6 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c02:	4619      	mov	r1, r3
 8000c04:	4879      	ldr	r0, [pc, #484]	; (8000dec <HAL_SPI_MspInit+0x428>)
 8000c06:	f000 ffa5 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c22:	4619      	mov	r1, r3
 8000c24:	4872      	ldr	r0, [pc, #456]	; (8000df0 <HAL_SPI_MspInit+0x42c>)
 8000c26:	f000 ff95 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c44:	4619      	mov	r1, r3
 8000c46:	4869      	ldr	r0, [pc, #420]	; (8000dec <HAL_SPI_MspInit+0x428>)
 8000c48:	f000 ff84 	bl	8001b54 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000c4c:	4b69      	ldr	r3, [pc, #420]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c4e:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <HAL_SPI_MspInit+0x434>)
 8000c50:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000c52:	4b68      	ldr	r3, [pc, #416]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c58:	4b66      	ldr	r3, [pc, #408]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5e:	4b65      	ldr	r3, [pc, #404]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c64:	4b63      	ldr	r3, [pc, #396]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c6a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c6c:	4b61      	ldr	r3, [pc, #388]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c72:	4b60      	ldr	r3, [pc, #384]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000c78:	4b5e      	ldr	r3, [pc, #376]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c84:	4b5b      	ldr	r3, [pc, #364]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c8a:	485a      	ldr	r0, [pc, #360]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c8c:	f000 fc56 	bl	800153c <HAL_DMA_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_SPI_MspInit+0x2d6>
      Error_Handler();
 8000c96:	f7ff fddd 	bl	8000854 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a55      	ldr	r2, [pc, #340]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8000ca0:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <HAL_SPI_MspInit+0x430>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ca6:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000ca8:	4a55      	ldr	r2, [pc, #340]	; (8000e00 <HAL_SPI_MspInit+0x43c>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000cac:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb2:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cb4:	2240      	movs	r2, #64	; 0x40
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb8:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ccc:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd8:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ce4:	4845      	ldr	r0, [pc, #276]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000ce6:	f000 fc29 	bl	800153c <HAL_DMA_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_SPI_MspInit+0x330>
      Error_Handler();
 8000cf0:	f7ff fdb0 	bl	8000854 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a41      	ldr	r2, [pc, #260]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cf8:	655a      	str	r2, [r3, #84]	; 0x54
 8000cfa:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <HAL_SPI_MspInit+0x438>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2024      	movs	r0, #36	; 0x24
 8000d06:	f000 fbe2 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d0a:	2024      	movs	r0, #36	; 0x24
 8000d0c:	f000 fbfb 	bl	8001506 <HAL_NVIC_EnableIRQ>
}
 8000d10:	e062      	b.n	8000dd8 <HAL_SPI_MspInit+0x414>
  else if(spiHandle->Instance==SPI3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a3b      	ldr	r2, [pc, #236]	; (8000e04 <HAL_SPI_MspInit+0x440>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d15d      	bne.n	8000dd8 <HAL_SPI_MspInit+0x414>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a30      	ldr	r2, [pc, #192]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a2a      	ldr	r2, [pc, #168]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a24      	ldr	r2, [pc, #144]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_SPI_MspInit+0x420>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d64:	2304      	movs	r3, #4
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d74:	2307      	movs	r3, #7
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481b      	ldr	r0, [pc, #108]	; (8000dec <HAL_SPI_MspInit+0x428>)
 8000d80:	f000 fee8 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d96:	2306      	movs	r3, #6
 8000d98:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4811      	ldr	r0, [pc, #68]	; (8000de8 <HAL_SPI_MspInit+0x424>)
 8000da2:	f000 fed7 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db8:	2306      	movs	r3, #6
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_SPI_MspInit+0x424>)
 8000dc4:	f000 fec6 	bl	8001b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2033      	movs	r0, #51	; 0x33
 8000dce:	f000 fb7e 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000dd2:	2033      	movs	r0, #51	; 0x33
 8000dd4:	f000 fb97 	bl	8001506 <HAL_NVIC_EnableIRQ>
}
 8000dd8:	bf00      	nop
 8000dda:	3748      	adds	r7, #72	; 0x48
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40003800 	.word	0x40003800
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	20000214 	.word	0x20000214
 8000df8:	40026058 	.word	0x40026058
 8000dfc:	20000274 	.word	0x20000274
 8000e00:	40026070 	.word	0x40026070
 8000e04:	40003c00 	.word	0x40003c00

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f9f8 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA1_Stream3_IRQHandler+0x10>)
 8000eaa:	f000 fc17 	bl	80016dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000214 	.word	0x20000214

08000eb8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA1_Stream4_IRQHandler+0x10>)
 8000ebe:	f000 fc0d 	bl	80016dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000274 	.word	0x20000274

08000ecc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <SPI1_IRQHandler+0x10>)
 8000ed2:	f002 fd91 	bl	80039f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000028 	.word	0x20000028

08000ee0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <SPI2_IRQHandler+0x10>)
 8000ee6:	f002 fd87 	bl	80039f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000008c 	.word	0x2000008c

08000ef4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <SPI3_IRQHandler+0x10>)
 8000efa:	f002 fd7d 	bl	80039f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000f0 	.word	0x200000f0

08000f08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <DMA2_Stream0_IRQHandler+0x10>)
 8000f0e:	f000 fbe5 	bl	80016dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000154 	.word	0x20000154

08000f1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <DMA2_Stream3_IRQHandler+0x10>)
 8000f22:	f000 fbdb 	bl	80016dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001b4 	.word	0x200001b4

08000f30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <MX_USART3_UART_Init+0x5c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USART3_UART_Init+0x58>)
 8000f98:	f003 fa1a 	bl	80043d0 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f7ff fc57 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200002d4 	.word	0x200002d4
 8000fb0:	40004800 	.word	0x40004800

08000fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0aa      	sub	sp, #168	; 0xa8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2284      	movs	r2, #132	; 0x84
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fa5f 	bl	8005498 <memset>
  if(uartHandle->Instance==USART3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a22      	ldr	r2, [pc, #136]	; (8001068 <HAL_UART_MspInit+0xb4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d13c      	bne.n	800105e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fd96 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffe:	f7ff fc29 	bl	8000854 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_UART_MspInit+0xb8>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_UART_MspInit+0xb8>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_UART_MspInit+0xb8>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_UART_MspInit+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_UART_MspInit+0xb8>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_UART_MspInit+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001032:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104c:	2307      	movs	r3, #7
 800104e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001052:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_UART_MspInit+0xbc>)
 800105a:	f000 fd7b 	bl	8001b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	37a8      	adds	r7, #168	; 0xa8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40004800 	.word	0x40004800
 800106c:	40023800 	.word	0x40023800
 8001070:	40020c00 	.word	0x40020c00

08001074 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800107e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001082:	2206      	movs	r2, #6
 8001084:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001088:	2202      	movs	r2, #2
 800108a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001094:	2202      	movs	r2, #2
 8001096:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109a:	2201      	movs	r2, #1
 800109c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b8:	f000 ff11 	bl	8001ede <HAL_PCD_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010c2:	f7ff fbc7 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000035c 	.word	0x2000035c

080010d0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ac      	sub	sp, #176	; 0xb0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	2284      	movs	r2, #132	; 0x84
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 f9d1 	bl	8005498 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d159      	bne.n	80011b4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001100:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001104:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fd07 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800111c:	f7ff fb9a 	bl	8000854 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_PCD_MspInit+0xec>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_PCD_MspInit+0xec>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_PCD_MspInit+0xec>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001138:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800113c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001152:	230a      	movs	r3, #10
 8001154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800115c:	4619      	mov	r1, r3
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <HAL_PCD_MspInit+0xf0>)
 8001160:	f000 fcf8 	bl	8001b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800117c:	4619      	mov	r1, r3
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <HAL_PCD_MspInit+0xf0>)
 8001180:	f000 fce8 	bl	8001b54 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_PCD_MspInit+0xec>)
 8001186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_PCD_MspInit+0xec>)
 800118a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118e:	6353      	str	r3, [r2, #52]	; 0x34
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_PCD_MspInit+0xec>)
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_PCD_MspInit+0xec>)
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_PCD_MspInit+0xec>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6453      	str	r3, [r2, #68]	; 0x44
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_PCD_MspInit+0xec>)
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	37b0      	adds	r7, #176	; 0xb0
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e0:	4c0b      	ldr	r4, [pc, #44]	; (8001210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ee:	f7ff fe9f 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f004 f959 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff faad 	bl	8000754 <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001208:	080055f4 	.word	0x080055f4
  ldr r2, =_sbss
 800120c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001210:	20000870 	.word	0x20000870

08001214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>

08001216 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121a:	2003      	movs	r0, #3
 800121c:	f000 f94c 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001220:	2000      	movs	r0, #0
 8001222:	f000 f805 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001226:	f7ff fdef 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f967 	bl	8001522 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f92f 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000864 	.word	0x20000864

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000864 	.word	0x20000864

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	4313      	orrs	r3, r2
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	05fa0000 	.word	0x05fa0000

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff29 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff3e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff31 	bl	800137c <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff feb6 	bl	80012b8 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e099      	b.n	800168c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001578:	e00f      	b.n	800159a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157a:	f7ff fe9d 	bl	80012b8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b05      	cmp	r3, #5
 8001586:	d908      	bls.n	800159a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e078      	b.n	800168c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e8      	bne.n	800157a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_DMA_Init+0x158>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4313      	orrs	r3, r2
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f023 0307 	bic.w	r3, r3, #7
 800161a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	2b04      	cmp	r3, #4
 800162c:	d117      	bne.n	800165e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fa0b 	bl	8001a5c <DMA_CheckFifoParam>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800165a:	2301      	movs	r3, #1
 800165c:	e016      	b.n	800168c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f9c2 	bl	80019f0 <DMA_CalcBaseAndBitshift>
 800166c:	4603      	mov	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	223f      	movs	r2, #63	; 0x3f
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f010803f 	.word	0xf010803f

08001698 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d004      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00c      	b.n	80016d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2205      	movs	r2, #5
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80016e8:	4b8e      	ldr	r3, [pc, #568]	; (8001924 <HAL_DMA_IRQHandler+0x248>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a8e      	ldr	r2, [pc, #568]	; (8001928 <HAL_DMA_IRQHandler+0x24c>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0a9b      	lsrs	r3, r3, #10
 80016f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2208      	movs	r2, #8
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01a      	beq.n	8001748 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2208      	movs	r2, #8
 8001736:	409a      	lsls	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2201      	movs	r2, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d012      	beq.n	800177e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2201      	movs	r2, #1
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f043 0202 	orr.w	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	2204      	movs	r2, #4
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d012      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00b      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2204      	movs	r2, #4
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f043 0204 	orr.w	r2, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2210      	movs	r2, #16
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d043      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03c      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2210      	movs	r2, #16
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d018      	beq.n	800181e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d108      	bne.n	800180c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d024      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
 800180a:	e01f      	b.n	800184c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01b      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
 800181c:	e016      	b.n	800184c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0208 	bic.w	r2, r2, #8
 800183a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	2220      	movs	r2, #32
 8001852:	409a      	lsls	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 808f 	beq.w	800197c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8087 	beq.w	800197c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	2220      	movs	r2, #32
 8001874:	409a      	lsls	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b05      	cmp	r3, #5
 8001884:	d136      	bne.n	80018f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0216 	bic.w	r2, r2, #22
 8001894:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x1da>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0208 	bic.w	r2, r2, #8
 80018c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	223f      	movs	r2, #63	; 0x3f
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d07e      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
        }
        return;
 80018f2:	e079      	b.n	80019e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01d      	beq.n	800193e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10d      	bne.n	800192c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	2b00      	cmp	r3, #0
 8001916:	d031      	beq.n	800197c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
 8001920:	e02c      	b.n	800197c <HAL_DMA_IRQHandler+0x2a0>
 8001922:	bf00      	nop
 8001924:	20000000 	.word	0x20000000
 8001928:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001930:	2b00      	cmp	r3, #0
 8001932:	d023      	beq.n	800197c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4798      	blx	r3
 800193c:	e01e      	b.n	800197c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0210 	bic.w	r2, r2, #16
 800195a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	2b00      	cmp	r3, #0
 8001982:	d032      	beq.n	80019ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d022      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2205      	movs	r2, #5
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d307      	bcc.n	80019c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f2      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x2cc>
 80019c2:	e000      	b.n	80019c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	4798      	blx	r3
 80019e6:	e000      	b.n	80019ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80019e8:	bf00      	nop
    }
  }
}
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3b10      	subs	r3, #16
 8001a00:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <DMA_CalcBaseAndBitshift+0x60>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <DMA_CalcBaseAndBitshift+0x64>)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d908      	bls.n	8001a30 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <DMA_CalcBaseAndBitshift+0x68>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	1d1a      	adds	r2, r3, #4
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a2e:	e006      	b.n	8001a3e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <DMA_CalcBaseAndBitshift+0x68>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	aaaaaaab 	.word	0xaaaaaaab
 8001a54:	080055dc 	.word	0x080055dc
 8001a58:	fffffc00 	.word	0xfffffc00

08001a5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d11f      	bne.n	8001ab6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d856      	bhi.n	8001b2a <DMA_CheckFifoParam+0xce>
 8001a7c:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <DMA_CheckFifoParam+0x28>)
 8001a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a82:	bf00      	nop
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001aa7 	.word	0x08001aa7
 8001a8c:	08001a95 	.word	0x08001a95
 8001a90:	08001b2b 	.word	0x08001b2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d046      	beq.n	8001b2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa4:	e043      	b.n	8001b2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aae:	d140      	bne.n	8001b32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab4:	e03d      	b.n	8001b32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abe:	d121      	bne.n	8001b04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d837      	bhi.n	8001b36 <DMA_CheckFifoParam+0xda>
 8001ac6:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <DMA_CheckFifoParam+0x70>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001ae3 	.word	0x08001ae3
 8001ad4:	08001add 	.word	0x08001add
 8001ad8:	08001af5 	.word	0x08001af5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae0:	e030      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d025      	beq.n	8001b3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af2:	e022      	b.n	8001b3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001afc:	d11f      	bne.n	8001b3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b02:	e01c      	b.n	8001b3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d903      	bls.n	8001b12 <DMA_CheckFifoParam+0xb6>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d003      	beq.n	8001b18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b10:	e018      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
      break;
 8001b16:	e015      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      break;
 8001b28:	e00b      	b.n	8001b42 <DMA_CheckFifoParam+0xe6>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e00a      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e008      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e006      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b36:	bf00      	nop
 8001b38:	e004      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e002      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b42:	bf00      	nop
    }
  } 
  
  return status; 
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e175      	b.n	8001e60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 8164 	bne.w	8001e5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d005      	beq.n	8001baa <HAL_GPIO_Init+0x56>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d130      	bne.n	8001c0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 0201 	and.w	r2, r3, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d017      	beq.n	8001c48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d123      	bne.n	8001c9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	69b9      	ldr	r1, [r7, #24]
 8001c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80be 	beq.w	8001e5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a65      	ldr	r2, [pc, #404]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cf6:	4a61      	ldr	r2, [pc, #388]	; (8001e7c <HAL_GPIO_Init+0x328>)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_GPIO_Init+0x32c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d037      	beq.n	8001d92 <HAL_GPIO_Init+0x23e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <HAL_GPIO_Init+0x330>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d031      	beq.n	8001d8e <HAL_GPIO_Init+0x23a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_GPIO_Init+0x334>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02b      	beq.n	8001d8a <HAL_GPIO_Init+0x236>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_GPIO_Init+0x338>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x232>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a54      	ldr	r2, [pc, #336]	; (8001e90 <HAL_GPIO_Init+0x33c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x22e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a53      	ldr	r2, [pc, #332]	; (8001e94 <HAL_GPIO_Init+0x340>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x22a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	; (8001e98 <HAL_GPIO_Init+0x344>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x226>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a51      	ldr	r2, [pc, #324]	; (8001e9c <HAL_GPIO_Init+0x348>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x222>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a50      	ldr	r2, [pc, #320]	; (8001ea0 <HAL_GPIO_Init+0x34c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x21e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x21a>
 8001d6a:	2309      	movs	r3, #9
 8001d6c:	e012      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d6e:	230a      	movs	r3, #10
 8001d70:	e010      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d72:	2308      	movs	r3, #8
 8001d74:	e00e      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d76:	2307      	movs	r3, #7
 8001d78:	e00c      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d7a:	2306      	movs	r3, #6
 8001d7c:	e00a      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d7e:	2305      	movs	r3, #5
 8001d80:	e008      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d86:	2303      	movs	r3, #3
 8001d88:	e004      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x240>
 8001d92:	2300      	movs	r3, #0
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	f002 0203 	and.w	r2, r2, #3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001da4:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_GPIO_Init+0x328>)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd6:	4a34      	ldr	r2, [pc, #208]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e00:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <HAL_GPIO_Init+0x354>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	f67f ae86 	bls.w	8001b74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40021400 	.word	0x40021400
 8001e98:	40021800 	.word	0x40021800
 8001e9c:	40021c00 	.word	0x40021c00
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40022400 	.word	0x40022400
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee0:	b08f      	sub	sp, #60	; 0x3c
 8001ee2:	af0a      	add	r7, sp, #40	; 0x28
 8001ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e116      	b.n	800211e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff f8e0 	bl	80010d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2203      	movs	r2, #3
 8001f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 ff7c 	bl	8004e2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	687e      	ldr	r6, [r7, #4]
 8001f3c:	466d      	mov	r5, sp
 8001f3e:	f106 0410 	add.w	r4, r6, #16
 8001f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f52:	1d33      	adds	r3, r6, #4
 8001f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	f002 ff10 	bl	8004d7c <USB_CoreInit>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0d7      	b.n	800211e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 ff6a 	bl	8004e4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	e04a      	b.n	8002016 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	333d      	adds	r3, #61	; 0x3d
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	333c      	adds	r3, #60	; 0x3c
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	b298      	uxth	r0, r3
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3344      	adds	r3, #68	; 0x44
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3340      	adds	r3, #64	; 0x40
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3348      	adds	r3, #72	; 0x48
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	334c      	adds	r3, #76	; 0x4c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3354      	adds	r3, #84	; 0x54
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3301      	adds	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3af      	bcc.n	8001f80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e044      	b.n	80020b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3301      	adds	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3b5      	bcc.n	8002026 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	687e      	ldr	r6, [r7, #4]
 80020c2:	466d      	mov	r5, sp
 80020c4:	f106 0410 	add.w	r4, r6, #16
 80020c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d8:	1d33      	adds	r3, r6, #4
 80020da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020dc:	6838      	ldr	r0, [r7, #0]
 80020de:	f002 ff03 	bl	8004ee8 <USB_DevInit>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e014      	b.n	800211e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f80b 	bl	8002128 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 f8c1 	bl	800529e <USB_DevDisconnect>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002128 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_PCDEx_ActivateLPM+0x44>)
 8002158:	4313      	orrs	r3, r2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	10000003 	.word	0x10000003

08002170 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e291      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8087 	beq.w	80022c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b4:	4b96      	ldr	r3, [pc, #600]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00c      	beq.n	80021da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c0:	4b93      	ldr	r3, [pc, #588]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d112      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62>
 80021cc:	4b90      	ldr	r3, [pc, #576]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d8:	d10b      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021da:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d06c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x130>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d168      	bne.n	80022c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e26b      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x7a>
 80021fc:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a83      	ldr	r2, [pc, #524]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	e02e      	b.n	8002268 <HAL_RCC_OscConfig+0xd8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x9c>
 8002212:	4b7f      	ldr	r3, [pc, #508]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7e      	ldr	r2, [pc, #504]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7b      	ldr	r2, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e01d      	b.n	8002268 <HAL_RCC_OscConfig+0xd8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0xc0>
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a75      	ldr	r2, [pc, #468]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b73      	ldr	r3, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a72      	ldr	r2, [pc, #456]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0xd8>
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6b      	ldr	r2, [pc, #428]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f822 	bl	80012b8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff f81e 	bl	80012b8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e21f      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b61      	ldr	r3, [pc, #388]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0xe8>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff f80e 	bl	80012b8 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f80a 	bl	80012b8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e20b      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	4b57      	ldr	r3, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x110>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d069      	beq.n	80023a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ce:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022da:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d11c      	bne.n	8002320 <HAL_RCC_OscConfig+0x190>
 80022e6:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x17a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1df      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	493d      	ldr	r1, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	e040      	b.n	80023a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d023      	beq.n	8002370 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a38      	ldr	r2, [pc, #224]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe ffc0 	bl	80012b8 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7fe ffbc 	bl	80012b8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1bd      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4929      	ldr	r1, [pc, #164]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
 800236e:	e018      	b.n	80023a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe ff9c 	bl	80012b8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7fe ff98 	bl	80012b8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e199      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d038      	beq.n	8002420 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d019      	beq.n	80023ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe ff79 	bl	80012b8 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe ff75 	bl	80012b8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e176      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x23a>
 80023e8:	e01a      	b.n	8002420 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe ff5f 	bl	80012b8 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fe:	f7fe ff5b 	bl	80012b8 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d903      	bls.n	8002414 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e15c      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
 8002410:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b91      	ldr	r3, [pc, #580]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ee      	bne.n	80023fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a4 	beq.w	8002576 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a87      	ldr	r2, [pc, #540]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002462:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7e      	ldr	r2, [pc, #504]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7fe ff23 	bl	80012b8 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7fe ff1f 	bl	80012b8 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b64      	cmp	r3, #100	; 0x64
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e120      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002488:	4b75      	ldr	r3, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x31a>
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
 80024a8:	e02d      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x33c>
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ca:	e01c      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x35e>
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a60      	ldr	r2, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
 80024e0:	4b5e      	ldr	r3, [pc, #376]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	4a5d      	ldr	r2, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	; 0x70
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fe fed3 	bl	80012b8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fecf 	bl	80012b8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0ce      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCC_OscConfig+0x386>
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe febd 	bl	80012b8 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe feb9 	bl	80012b8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0b8      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a3b      	ldr	r2, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80a4 	beq.w	80026c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d06b      	beq.n	8002664 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d149      	bne.n	8002628 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800259a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800259e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe fe8a 	bl	80012b8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fe86 	bl	80012b8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e087      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	4313      	orrs	r3, r2
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fe5a 	bl	80012b8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fe56 	bl	80012b8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e057      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x478>
 8002626:	e04f      	b.n	80026c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0b      	ldr	r2, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800262e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fe40 	bl	80012b8 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fe3c 	bl	80012b8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e03d      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x4ac>
 800265a:	e035      	b.n	80026c8 <HAL_RCC_OscConfig+0x538>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x544>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d028      	beq.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d11a      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800269c:	4293      	cmp	r3, r2
 800269e:	d111      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d0      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	4965      	ldr	r1, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002742:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800275a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e073      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4936      	ldr	r1, [pc, #216]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027cc:	f7fe fd74 	bl	80012b8 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe fd70 	bl	80012b8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e053      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	4922      	ldr	r1, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1cc>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1d4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fcd0 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	080055c4 	.word	0x080055c4
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b094      	sub	sp, #80	; 0x50
 80028b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
 80028bc:	2300      	movs	r3, #0
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c0:	2300      	movs	r3, #0
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d00d      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	f200 80e1 	bhi.w	8002a9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x3a>
 80028e2:	e0db      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e8:	e0db      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ea:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x208>)
 80028ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ee:	e0d8      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f0:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028fa:	4b6d      	ldr	r3, [pc, #436]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	2200      	movs	r2, #0
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002910:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
 800291a:	2300      	movs	r3, #0
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
 800291e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002922:	4622      	mov	r2, r4
 8002924:	462b      	mov	r3, r5
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	0159      	lsls	r1, r3, #5
 8002930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002934:	0150      	lsls	r0, r2, #5
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4621      	mov	r1, r4
 800293c:	1a51      	subs	r1, r2, r1
 800293e:	6139      	str	r1, [r7, #16]
 8002940:	4629      	mov	r1, r5
 8002942:	eb63 0301 	sbc.w	r3, r3, r1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002954:	4659      	mov	r1, fp
 8002956:	018b      	lsls	r3, r1, #6
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295e:	4651      	mov	r1, sl
 8002960:	018a      	lsls	r2, r1, #6
 8002962:	4651      	mov	r1, sl
 8002964:	ebb2 0801 	subs.w	r8, r2, r1
 8002968:	4659      	mov	r1, fp
 800296a:	eb63 0901 	sbc.w	r9, r3, r1
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800297a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002982:	4690      	mov	r8, r2
 8002984:	4699      	mov	r9, r3
 8002986:	4623      	mov	r3, r4
 8002988:	eb18 0303 	adds.w	r3, r8, r3
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	462b      	mov	r3, r5
 8002990:	eb49 0303 	adc.w	r3, r9, r3
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029a2:	4629      	mov	r1, r5
 80029a4:	024b      	lsls	r3, r1, #9
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ac:	4621      	mov	r1, r4
 80029ae:	024a      	lsls	r2, r1, #9
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	2200      	movs	r2, #0
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029c0:	f7fd fc22 	bl	8000208 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029cc:	e058      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	2200      	movs	r2, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	4611      	mov	r1, r2
 80029da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e8:	4642      	mov	r2, r8
 80029ea:	464b      	mov	r3, r9
 80029ec:	f04f 0000 	mov.w	r0, #0
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	0159      	lsls	r1, r3, #5
 80029f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029fa:	0150      	lsls	r0, r2, #5
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4641      	mov	r1, r8
 8002a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a06:	4649      	mov	r1, r9
 8002a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a20:	ebb2 040a 	subs.w	r4, r2, sl
 8002a24:	eb63 050b 	sbc.w	r5, r3, fp
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	00eb      	lsls	r3, r5, #3
 8002a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a36:	00e2      	lsls	r2, r4, #3
 8002a38:	4614      	mov	r4, r2
 8002a3a:	461d      	mov	r5, r3
 8002a3c:	4643      	mov	r3, r8
 8002a3e:	18e3      	adds	r3, r4, r3
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	464b      	mov	r3, r9
 8002a44:	eb45 0303 	adc.w	r3, r5, r3
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a56:	4629      	mov	r1, r5
 8002a58:	028b      	lsls	r3, r1, #10
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a60:	4621      	mov	r1, r4
 8002a62:	028a      	lsls	r2, r1, #10
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	61fa      	str	r2, [r7, #28]
 8002a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a74:	f7fd fbc8 	bl	8000208 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3750      	adds	r7, #80	; 0x50
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	080055d4 	.word	0x080055d4

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b00:	f7ff ffdc 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0b5b      	lsrs	r3, r3, #13
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	080055d4 	.word	0x080055d4

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d012      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b4c:	4b69      	ldr	r3, [pc, #420]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a68      	ldr	r2, [pc, #416]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b56:	6093      	str	r3, [r2, #8]
 8002b58:	4b66      	ldr	r3, [pc, #408]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	4964      	ldr	r1, [pc, #400]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d017      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b7e:	4b5d      	ldr	r3, [pc, #372]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	4959      	ldr	r1, [pc, #356]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d017      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bba:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	494a      	ldr	r1, [pc, #296]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd8:	d101      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 808b 	beq.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	4b3a      	ldr	r3, [pc, #232]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	4a39      	ldr	r2, [pc, #228]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6413      	str	r3, [r2, #64]	; 0x40
 8002c14:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fb44 	bl	80012b8 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c34:	f7fe fb40 	bl	80012b8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e357      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d035      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d02e      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d114      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fb08 	bl	80012b8 <HAL_GetTick>
 8002ca8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe fb04 	bl	80012b8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e319      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ee      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cda:	d111      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cea:	400b      	ands	r3, r1
 8002cec:	4901      	ldr	r1, [pc, #4]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	0ffffcff 	.word	0x0ffffcff
 8002d00:	4baa      	ldr	r3, [pc, #680]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4aa9      	ldr	r2, [pc, #676]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d0a:	6093      	str	r3, [r2, #8]
 8002d0c:	4ba7      	ldr	r3, [pc, #668]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	49a4      	ldr	r1, [pc, #656]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d2a:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d30:	4a9e      	ldr	r2, [pc, #632]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d3a:	4b9c      	ldr	r3, [pc, #624]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	4999      	ldr	r1, [pc, #612]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d58:	4b94      	ldr	r3, [pc, #592]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d66:	4991      	ldr	r1, [pc, #580]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d7a:	4b8c      	ldr	r3, [pc, #560]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d88:	4988      	ldr	r1, [pc, #544]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d9c:	4b83      	ldr	r3, [pc, #524]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002daa:	4980      	ldr	r1, [pc, #512]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	4977      	ldr	r1, [pc, #476]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002de0:	4b72      	ldr	r3, [pc, #456]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	496f      	ldr	r1, [pc, #444]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f023 020c 	bic.w	r2, r3, #12
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	4966      	ldr	r1, [pc, #408]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	495e      	ldr	r1, [pc, #376]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e46:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e54:	4955      	ldr	r1, [pc, #340]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	494d      	ldr	r1, [pc, #308]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e8a:	4b48      	ldr	r3, [pc, #288]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4944      	ldr	r1, [pc, #272]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	493c      	ldr	r1, [pc, #240]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002edc:	4933      	ldr	r1, [pc, #204]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002efe:	492b      	ldr	r1, [pc, #172]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d011      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f12:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f20:	4922      	ldr	r1, [pc, #136]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f30:	d101      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	4912      	ldr	r1, [pc, #72]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f84:	4909      	ldr	r1, [pc, #36]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d006      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80d9 	beq.w	8003152 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a01      	ldr	r2, [pc, #4]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002faa:	e001      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb2:	f7fe f981 	bl	80012b8 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fba:	f7fe f97d 	bl	80012b8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e194      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fcc:	4b6c      	ldr	r3, [pc, #432]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d021      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11d      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ffa:	4b61      	ldr	r3, [pc, #388]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003000:	0e1b      	lsrs	r3, r3, #24
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	019a      	lsls	r2, r3, #6
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	061b      	lsls	r3, r3, #24
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	071b      	lsls	r3, r3, #28
 8003020:	4957      	ldr	r1, [pc, #348]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003046:	2b00      	cmp	r3, #0
 8003048:	d02e      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003052:	d129      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003054:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	0f1b      	lsrs	r3, r3, #28
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	019a      	lsls	r2, r3, #6
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	071b      	lsls	r3, r3, #28
 8003088:	493d      	ldr	r1, [pc, #244]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003096:	f023 021f 	bic.w	r2, r3, #31
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	3b01      	subs	r3, #1
 80030a0:	4937      	ldr	r1, [pc, #220]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01d      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c8:	0f1b      	lsrs	r3, r3, #28
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	019a      	lsls	r2, r3, #6
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	431a      	orrs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	071b      	lsls	r3, r3, #28
 80030e8:	4925      	ldr	r1, [pc, #148]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d011      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	019a      	lsls	r2, r3, #6
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	071b      	lsls	r3, r3, #28
 8003118:	4919      	ldr	r1, [pc, #100]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a16      	ldr	r2, [pc, #88]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800312a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312c:	f7fe f8c4 	bl	80012b8 <HAL_GetTick>
 8003130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003134:	f7fe f8c0 	bl	80012b8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	; 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0d7      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b01      	cmp	r3, #1
 8003156:	f040 80cd 	bne.w	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003166:	f7fe f8a7 	bl	80012b8 <HAL_GetTick>
 800316a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800316e:	f7fe f8a3 	bl	80012b8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b64      	cmp	r3, #100	; 0x64
 800317a:	d903      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0ba      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003180:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003184:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003190:	d0ed      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02e      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d12a      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ba:	4b51      	ldr	r3, [pc, #324]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031c8:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	0f1b      	lsrs	r3, r3, #28
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	019a      	lsls	r2, r3, #6
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	071b      	lsls	r3, r3, #28
 80031ee:	4944      	ldr	r1, [pc, #272]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031f6:	4b42      	ldr	r3, [pc, #264]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	493d      	ldr	r1, [pc, #244]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d022      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003224:	d11d      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	0e1b      	lsrs	r3, r3, #24
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003234:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	0f1b      	lsrs	r3, r3, #28
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	4929      	ldr	r1, [pc, #164]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d028      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	019a      	lsls	r2, r3, #6
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	4917      	ldr	r1, [pc, #92]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	4911      	ldr	r1, [pc, #68]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fd fff4 	bl	80012b8 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032d4:	f7fd fff0 	bl	80012b8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e007      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f2:	d1ef      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e09d      	b.n	8003452 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d009      	beq.n	800333c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
 800332e:	e005      	b.n	800333c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fb34 	bl	80009c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800337c:	d902      	bls.n	8003384 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e002      	b.n	800338a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003388:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003392:	d007      	beq.n	80033a4 <HAL_SPI_Init+0xa0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	ea42 0103 	orr.w	r1, r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	f003 0204 	and.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003420:	ea42 0103 	orr.w	r1, r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003440:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b088      	sub	sp, #32
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_SPI_Transmit+0x22>
 8003478:	2302      	movs	r3, #2
 800347a:	e158      	b.n	800372e <HAL_SPI_Transmit+0x2d4>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003484:	f7fd ff18 	bl	80012b8 <HAL_GetTick>
 8003488:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d002      	beq.n	80034a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800349a:	2302      	movs	r3, #2
 800349c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800349e:	e13d      	b.n	800371c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Transmit+0x52>
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034b0:	e134      	b.n	800371c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003544:	d94b      	bls.n	80035de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0xfa>
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d13e      	bne.n	80035d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003578:	e02b      	b.n	80035d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d112      	bne.n	80035ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ac:	e011      	b.n	80035d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fd fe83 	bl	80012b8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x16c>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x172>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035d0:	e0a4      	b.n	800371c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ce      	bne.n	800357a <HAL_SPI_Transmit+0x120>
 80035dc:	e07c      	b.n	80036d8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x192>
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d170      	bne.n	80036ce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d912      	bls.n	800361c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b02      	subs	r3, #2
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	87da      	strh	r2, [r3, #62]	; 0x3e
 800361a:	e058      	b.n	80036ce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003642:	e044      	b.n	80036ce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d12b      	bne.n	80036aa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d912      	bls.n	8003682 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b02      	subs	r3, #2
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003680:	e025      	b.n	80036ce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a8:	e011      	b.n	80036ce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036aa:	f7fd fe05 	bl	80012b8 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d803      	bhi.n	80036c2 <HAL_SPI_Transmit+0x268>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d102      	bne.n	80036c8 <HAL_SPI_Transmit+0x26e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036cc:	e026      	b.n	800371c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1b5      	bne.n	8003644 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	6839      	ldr	r1, [r7, #0]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fd9b 	bl	8004218 <SPI_EndRxTxTransaction>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e000      	b.n	800371c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800371a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800372c:	7ffb      	ldrb	r3, [r7, #31]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d110      	bne.n	8003774 <HAL_SPI_Receive_IT+0x3c>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375a:	d10b      	bne.n	8003774 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2204      	movs	r2, #4
 8003760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f894 	bl	8003898 <HAL_SPI_TransmitReceive_IT>
 8003770:	4603      	mov	r3, r0
 8003772:	e089      	b.n	8003888 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_SPI_Receive_IT+0x4a>
 800377e:	2302      	movs	r3, #2
 8003780:	e082      	b.n	8003888 <HAL_SPI_Receive_IT+0x150>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d002      	beq.n	800379c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	75fb      	strb	r3, [r7, #23]
    goto error;
 800379a:	e070      	b.n	800387e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_Receive_IT+0x70>
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037ac:	e067      	b.n	800387e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2204      	movs	r2, #4
 80037b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	88fa      	ldrh	r2, [r7, #6]
 80037ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037f2:	d90b      	bls.n	800380c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003802:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a22      	ldr	r2, [pc, #136]	; (8003890 <HAL_SPI_Receive_IT+0x158>)
 8003808:	64da      	str	r2, [r3, #76]	; 0x4c
 800380a:	e00a      	b.n	8003822 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800381a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_SPI_Receive_IT+0x15c>)
 8003820:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382a:	d10f      	bne.n	800384c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800384a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800385a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d008      	beq.n	800387c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e000      	b.n	800387e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800387c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	08003e99 	.word	0x08003e99
 8003894:	08003e49 	.word	0x08003e49

08003898 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_SPI_TransmitReceive_IT+0x20>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e091      	b.n	80039dc <HAL_SPI_TransmitReceive_IT+0x144>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038ce:	7dbb      	ldrb	r3, [r7, #22]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d00d      	beq.n	80038f0 <HAL_SPI_TransmitReceive_IT+0x58>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038da:	d106      	bne.n	80038ea <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <HAL_SPI_TransmitReceive_IT+0x52>
 80038e4:	7dbb      	ldrb	r3, [r7, #22]
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038ee:	e070      	b.n	80039d2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_SPI_TransmitReceive_IT+0x6a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_TransmitReceive_IT+0x6a>
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003906:	e064      	b.n	80039d2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b04      	cmp	r3, #4
 8003912:	d003      	beq.n	800391c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2205      	movs	r2, #5
 8003918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	887a      	ldrh	r2, [r7, #2]
 8003932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	887a      	ldrh	r2, [r7, #2]
 800393e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003952:	d906      	bls.n	8003962 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8003958:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <HAL_SPI_TransmitReceive_IT+0x154>)
 800395e:	651a      	str	r2, [r3, #80]	; 0x50
 8003960:	e005      	b.n	800396e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003966:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800396c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003976:	d802      	bhi.n	800397e <HAL_SPI_TransmitReceive_IT+0xe6>
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d908      	bls.n	8003990 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e007      	b.n	80039a0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80039ae:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d008      	beq.n	80039d0 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e000      	b.n	80039d2 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80039d0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039da:	7dfb      	ldrb	r3, [r7, #23]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	08003d83 	.word	0x08003d83
 80039ec:	08003de9 	.word	0x08003de9
 80039f0:	08003c33 	.word	0x08003c33
 80039f4:	08003cf1 	.word	0x08003cf1

080039f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
    return;
 8003a36:	e0ce      	b.n	8003bd6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_SPI_IRQHandler+0x5e>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
    return;
 8003a54:	e0bf      	b.n	8003bd6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <HAL_SPI_IRQHandler+0x7e>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80b0 	beq.w	8003bd6 <HAL_SPI_IRQHandler+0x1de>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80aa 	beq.w	8003bd6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d011      	beq.n	8003abc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	f043 0204 	orr.w	r2, r3, #4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	e00b      	b.n	8003ad4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
        return;
 8003ad2:	e080      	b.n	8003bd6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d014      	beq.n	8003b08 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	f043 0208 	orr.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d04f      	beq.n	8003bd4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b42:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_SPI_IRQHandler+0x168>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d034      	beq.n	8003bca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0203 	bic.w	r2, r2, #3
 8003b6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d011      	beq.n	8003b9c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <HAL_SPI_IRQHandler+0x1e4>)
 8003b7e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd fd87 	bl	8001698 <HAL_DMA_Abort_IT>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <HAL_SPI_IRQHandler+0x1e4>)
 8003baa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fd fd71 	bl	8001698 <HAL_DMA_Abort_IT>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003bc8:	e003      	b.n	8003bd2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f812 	bl	8003bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003bd0:	e000      	b.n	8003bd4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003bd2:	bf00      	nop
    return;
 8003bd4:	bf00      	nop
  }
}
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	08003c09 	.word	0x08003c09

08003be0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ffe5 	bl	8003bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d923      	bls.n	8003c8e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	b292      	uxth	r2, r2
 8003c52:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b02      	subs	r3, #2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d11f      	bne.n	8003cbc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	e016      	b.n	8003cbc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f103 020c 	add.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10f      	bne.n	8003ce8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cd6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fb02 	bl	80042ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d912      	bls.n	8003d28 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	881a      	ldrh	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b02      	subs	r3, #2
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d26:	e012      	b.n	8003d4e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d110      	bne.n	8003d7a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d66:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fab9 	bl	80042ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	b292      	uxth	r2, r2
 8003d96:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10f      	bne.n	8003de0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa86 	bl	80042ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d110      	bne.n	8003e40 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e2c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa56 	bl	80042ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f103 020c 	add.w	r2, r3, #12
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	7812      	ldrb	r2, [r2, #0]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa70 	bl	8004370 <SPI_CloseRx_ISR>
  }
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa4a 	bl	8004370 <SPI_CloseRx_ISR>
  }
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ef4:	f7fd f9e0 	bl	80012b8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f04:	f7fd f9d8 	bl	80012b8 <HAL_GetTick>
 8003f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	015b      	lsls	r3, r3, #5
 8003f10:	0d1b      	lsrs	r3, r3, #20
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1a:	e054      	b.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d050      	beq.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f24:	f7fd f9c8 	bl	80012b8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d902      	bls.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d13d      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f52:	d111      	bne.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	d004      	beq.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d107      	bne.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f80:	d10f      	bne.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e017      	b.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d19b      	bne.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	; 0x28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004006:	f7fd f957 	bl	80012b8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	4413      	add	r3, r2
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004016:	f7fd f94f 	bl	80012b8 <HAL_GetTick>
 800401a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004024:	4b3d      	ldr	r3, [pc, #244]	; (800411c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	00da      	lsls	r2, r3, #3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	0d1b      	lsrs	r3, r3, #20
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800403c:	e060      	b.n	8004100 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004044:	d107      	bne.n	8004056 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004054:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d050      	beq.n	8004100 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800405e:	f7fd f92b 	bl	80012b8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	429a      	cmp	r2, r3
 800406c:	d902      	bls.n	8004074 <SPI_WaitFifoStateUntilTimeout+0x80>
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d13d      	bne.n	80040f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004082:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408c:	d111      	bne.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004096:	d004      	beq.n	80040a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d107      	bne.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ba:	d10f      	bne.n	80040dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e010      	b.n	8004112 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d196      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3728      	adds	r7, #40	; 0x28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000000 	.word	0x20000000

08004120 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004134:	d111      	bne.n	800415a <SPI_EndRxTransaction+0x3a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800413e:	d004      	beq.n	800414a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d107      	bne.n	800415a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004158:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004162:	d112      	bne.n	800418a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff feb8 	bl	8003ee4 <SPI_WaitFlagStateUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d021      	beq.n	80041be <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e03d      	b.n	8004206 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800418a:	4b21      	ldr	r3, [pc, #132]	; (8004210 <SPI_EndRxTransaction+0xf0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a21      	ldr	r2, [pc, #132]	; (8004214 <SPI_EndRxTransaction+0xf4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0d5b      	lsrs	r3, r3, #21
 8004196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d0f2      	beq.n	80041a0 <SPI_EndRxTransaction+0x80>
 80041ba:	e000      	b.n	80041be <SPI_EndRxTransaction+0x9e>
        break;
 80041bc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d11d      	bne.n	8004204 <SPI_EndRxTransaction+0xe4>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d004      	beq.n	80041dc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d113      	bne.n	8004204 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff ff03 	bl	8003ff4 <SPI_WaitFifoStateUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e000      	b.n	8004206 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000000 	.word	0x20000000
 8004214:	165e9f81 	.word	0x165e9f81

08004218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fedf 	bl	8003ff4 <SPI_WaitFifoStateUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e046      	b.n	80042da <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <SPI_EndRxTxTransaction+0xcc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <SPI_EndRxTxTransaction+0xd0>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0d5b      	lsrs	r3, r3, #21
 8004258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426a:	d112      	bne.n	8004292 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff fe34 	bl	8003ee4 <SPI_WaitFlagStateUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	f043 0220 	orr.w	r2, r3, #32
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e023      	b.n	80042da <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	3b01      	subs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d0f2      	beq.n	8004292 <SPI_EndRxTxTransaction+0x7a>
 80042ac:	e000      	b.n	80042b0 <SPI_EndRxTxTransaction+0x98>
        break;
 80042ae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff fe99 	bl	8003ff4 <SPI_WaitFifoStateUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e000      	b.n	80042da <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000000 	.word	0x20000000
 80042e8:	165e9f81 	.word	0x165e9f81

080042ec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f4:	f7fc ffe0 	bl	80012b8 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0220 	bic.w	r2, r2, #32
 8004308:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	2164      	movs	r1, #100	; 0x64
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ff82 	bl	8004218 <SPI_EndRxTxTransaction>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	2b00      	cmp	r3, #0
 800432c:	d115      	bne.n	800435a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b04      	cmp	r3, #4
 8004338:	d107      	bne.n	800434a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 f882 	bl	800544c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004348:	e00e      	b.n	8004368 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fc44 	bl	8003be0 <HAL_SPI_TxRxCpltCallback>
}
 8004358:	e006      	b.n	8004368 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fc46 	bl	8003bf4 <HAL_SPI_ErrorCallback>
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004386:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004388:	f7fc ff96 	bl	80012b8 <HAL_GetTick>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	2164      	movs	r1, #100	; 0x64
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fec4 	bl	8004120 <SPI_EndRxTransaction>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f001 f846 	bl	800544c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80043c0:	e002      	b.n	80043c8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fc16 	bl	8003bf4 <HAL_SPI_ErrorCallback>
}
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e040      	b.n	8004464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc fdde 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f8b0 	bl	8004574 <UART_SetConfig>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e022      	b.n	8004464 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fb08 	bl	8004a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fb8f 	bl	8004b80 <UART_CheckIdleState>
 8004462:	4603      	mov	r3, r0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004480:	2b20      	cmp	r3, #32
 8004482:	d171      	bne.n	8004568 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_UART_Transmit+0x24>
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e06a      	b.n	800456a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2221      	movs	r2, #33	; 0x21
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044a2:	f7fc ff09 	bl	80012b8 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c0:	d108      	bne.n	80044d4 <HAL_UART_Transmit+0x68>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d104      	bne.n	80044d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	e003      	b.n	80044dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044dc:	e02c      	b.n	8004538 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fb80 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e038      	b.n	800456a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800450c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	3302      	adds	r3, #2
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	e007      	b.n	8004526 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	3301      	adds	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1cc      	bne.n	80044de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2200      	movs	r2, #0
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fb4d 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e005      	b.n	800456a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e000      	b.n	800456a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004568:	2302      	movs	r3, #2
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4ba6      	ldr	r3, [pc, #664]	; (8004838 <UART_SetConfig+0x2c4>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	6979      	ldr	r1, [r7, #20]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a94      	ldr	r2, [pc, #592]	; (800483c <UART_SetConfig+0x2c8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d120      	bne.n	8004632 <UART_SetConfig+0xbe>
 80045f0:	4b93      	ldr	r3, [pc, #588]	; (8004840 <UART_SetConfig+0x2cc>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d816      	bhi.n	800462c <UART_SetConfig+0xb8>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x90>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004615 	.word	0x08004615
 8004608:	08004621 	.word	0x08004621
 800460c:	0800461b 	.word	0x0800461b
 8004610:	08004627 	.word	0x08004627
 8004614:	2301      	movs	r3, #1
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e150      	b.n	80048bc <UART_SetConfig+0x348>
 800461a:	2302      	movs	r3, #2
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e14d      	b.n	80048bc <UART_SetConfig+0x348>
 8004620:	2304      	movs	r3, #4
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e14a      	b.n	80048bc <UART_SetConfig+0x348>
 8004626:	2308      	movs	r3, #8
 8004628:	77fb      	strb	r3, [r7, #31]
 800462a:	e147      	b.n	80048bc <UART_SetConfig+0x348>
 800462c:	2310      	movs	r3, #16
 800462e:	77fb      	strb	r3, [r7, #31]
 8004630:	e144      	b.n	80048bc <UART_SetConfig+0x348>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a83      	ldr	r2, [pc, #524]	; (8004844 <UART_SetConfig+0x2d0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d132      	bne.n	80046a2 <UART_SetConfig+0x12e>
 800463c:	4b80      	ldr	r3, [pc, #512]	; (8004840 <UART_SetConfig+0x2cc>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b0c      	cmp	r3, #12
 8004648:	d828      	bhi.n	800469c <UART_SetConfig+0x128>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <UART_SetConfig+0xdc>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004685 	.word	0x08004685
 8004654:	0800469d 	.word	0x0800469d
 8004658:	0800469d 	.word	0x0800469d
 800465c:	0800469d 	.word	0x0800469d
 8004660:	08004691 	.word	0x08004691
 8004664:	0800469d 	.word	0x0800469d
 8004668:	0800469d 	.word	0x0800469d
 800466c:	0800469d 	.word	0x0800469d
 8004670:	0800468b 	.word	0x0800468b
 8004674:	0800469d 	.word	0x0800469d
 8004678:	0800469d 	.word	0x0800469d
 800467c:	0800469d 	.word	0x0800469d
 8004680:	08004697 	.word	0x08004697
 8004684:	2300      	movs	r3, #0
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e118      	b.n	80048bc <UART_SetConfig+0x348>
 800468a:	2302      	movs	r3, #2
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e115      	b.n	80048bc <UART_SetConfig+0x348>
 8004690:	2304      	movs	r3, #4
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e112      	b.n	80048bc <UART_SetConfig+0x348>
 8004696:	2308      	movs	r3, #8
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e10f      	b.n	80048bc <UART_SetConfig+0x348>
 800469c:	2310      	movs	r3, #16
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e10c      	b.n	80048bc <UART_SetConfig+0x348>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a68      	ldr	r2, [pc, #416]	; (8004848 <UART_SetConfig+0x2d4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d120      	bne.n	80046ee <UART_SetConfig+0x17a>
 80046ac:	4b64      	ldr	r3, [pc, #400]	; (8004840 <UART_SetConfig+0x2cc>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046b6:	2b30      	cmp	r3, #48	; 0x30
 80046b8:	d013      	beq.n	80046e2 <UART_SetConfig+0x16e>
 80046ba:	2b30      	cmp	r3, #48	; 0x30
 80046bc:	d814      	bhi.n	80046e8 <UART_SetConfig+0x174>
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d009      	beq.n	80046d6 <UART_SetConfig+0x162>
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d810      	bhi.n	80046e8 <UART_SetConfig+0x174>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <UART_SetConfig+0x15c>
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d006      	beq.n	80046dc <UART_SetConfig+0x168>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x174>
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e0f2      	b.n	80048bc <UART_SetConfig+0x348>
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e0ef      	b.n	80048bc <UART_SetConfig+0x348>
 80046dc:	2304      	movs	r3, #4
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e0ec      	b.n	80048bc <UART_SetConfig+0x348>
 80046e2:	2308      	movs	r3, #8
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e0e9      	b.n	80048bc <UART_SetConfig+0x348>
 80046e8:	2310      	movs	r3, #16
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e0e6      	b.n	80048bc <UART_SetConfig+0x348>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a56      	ldr	r2, [pc, #344]	; (800484c <UART_SetConfig+0x2d8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d120      	bne.n	800473a <UART_SetConfig+0x1c6>
 80046f8:	4b51      	ldr	r3, [pc, #324]	; (8004840 <UART_SetConfig+0x2cc>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004702:	2bc0      	cmp	r3, #192	; 0xc0
 8004704:	d013      	beq.n	800472e <UART_SetConfig+0x1ba>
 8004706:	2bc0      	cmp	r3, #192	; 0xc0
 8004708:	d814      	bhi.n	8004734 <UART_SetConfig+0x1c0>
 800470a:	2b80      	cmp	r3, #128	; 0x80
 800470c:	d009      	beq.n	8004722 <UART_SetConfig+0x1ae>
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d810      	bhi.n	8004734 <UART_SetConfig+0x1c0>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <UART_SetConfig+0x1a8>
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d006      	beq.n	8004728 <UART_SetConfig+0x1b4>
 800471a:	e00b      	b.n	8004734 <UART_SetConfig+0x1c0>
 800471c:	2300      	movs	r3, #0
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e0cc      	b.n	80048bc <UART_SetConfig+0x348>
 8004722:	2302      	movs	r3, #2
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e0c9      	b.n	80048bc <UART_SetConfig+0x348>
 8004728:	2304      	movs	r3, #4
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e0c6      	b.n	80048bc <UART_SetConfig+0x348>
 800472e:	2308      	movs	r3, #8
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e0c3      	b.n	80048bc <UART_SetConfig+0x348>
 8004734:	2310      	movs	r3, #16
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e0c0      	b.n	80048bc <UART_SetConfig+0x348>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a44      	ldr	r2, [pc, #272]	; (8004850 <UART_SetConfig+0x2dc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d125      	bne.n	8004790 <UART_SetConfig+0x21c>
 8004744:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <UART_SetConfig+0x2cc>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004752:	d017      	beq.n	8004784 <UART_SetConfig+0x210>
 8004754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004758:	d817      	bhi.n	800478a <UART_SetConfig+0x216>
 800475a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475e:	d00b      	beq.n	8004778 <UART_SetConfig+0x204>
 8004760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004764:	d811      	bhi.n	800478a <UART_SetConfig+0x216>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <UART_SetConfig+0x1fe>
 800476a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476e:	d006      	beq.n	800477e <UART_SetConfig+0x20a>
 8004770:	e00b      	b.n	800478a <UART_SetConfig+0x216>
 8004772:	2300      	movs	r3, #0
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e0a1      	b.n	80048bc <UART_SetConfig+0x348>
 8004778:	2302      	movs	r3, #2
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e09e      	b.n	80048bc <UART_SetConfig+0x348>
 800477e:	2304      	movs	r3, #4
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e09b      	b.n	80048bc <UART_SetConfig+0x348>
 8004784:	2308      	movs	r3, #8
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e098      	b.n	80048bc <UART_SetConfig+0x348>
 800478a:	2310      	movs	r3, #16
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e095      	b.n	80048bc <UART_SetConfig+0x348>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <UART_SetConfig+0x2e0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d125      	bne.n	80047e6 <UART_SetConfig+0x272>
 800479a:	4b29      	ldr	r3, [pc, #164]	; (8004840 <UART_SetConfig+0x2cc>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a8:	d017      	beq.n	80047da <UART_SetConfig+0x266>
 80047aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ae:	d817      	bhi.n	80047e0 <UART_SetConfig+0x26c>
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b4:	d00b      	beq.n	80047ce <UART_SetConfig+0x25a>
 80047b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ba:	d811      	bhi.n	80047e0 <UART_SetConfig+0x26c>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <UART_SetConfig+0x254>
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c4:	d006      	beq.n	80047d4 <UART_SetConfig+0x260>
 80047c6:	e00b      	b.n	80047e0 <UART_SetConfig+0x26c>
 80047c8:	2301      	movs	r3, #1
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e076      	b.n	80048bc <UART_SetConfig+0x348>
 80047ce:	2302      	movs	r3, #2
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e073      	b.n	80048bc <UART_SetConfig+0x348>
 80047d4:	2304      	movs	r3, #4
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e070      	b.n	80048bc <UART_SetConfig+0x348>
 80047da:	2308      	movs	r3, #8
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e06d      	b.n	80048bc <UART_SetConfig+0x348>
 80047e0:	2310      	movs	r3, #16
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e06a      	b.n	80048bc <UART_SetConfig+0x348>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <UART_SetConfig+0x2e4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d138      	bne.n	8004862 <UART_SetConfig+0x2ee>
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <UART_SetConfig+0x2cc>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047fe:	d017      	beq.n	8004830 <UART_SetConfig+0x2bc>
 8004800:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004804:	d82a      	bhi.n	800485c <UART_SetConfig+0x2e8>
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	d00b      	beq.n	8004824 <UART_SetConfig+0x2b0>
 800480c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004810:	d824      	bhi.n	800485c <UART_SetConfig+0x2e8>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <UART_SetConfig+0x2aa>
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	d006      	beq.n	800482a <UART_SetConfig+0x2b6>
 800481c:	e01e      	b.n	800485c <UART_SetConfig+0x2e8>
 800481e:	2300      	movs	r3, #0
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e04b      	b.n	80048bc <UART_SetConfig+0x348>
 8004824:	2302      	movs	r3, #2
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e048      	b.n	80048bc <UART_SetConfig+0x348>
 800482a:	2304      	movs	r3, #4
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e045      	b.n	80048bc <UART_SetConfig+0x348>
 8004830:	2308      	movs	r3, #8
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e042      	b.n	80048bc <UART_SetConfig+0x348>
 8004836:	bf00      	nop
 8004838:	efff69f3 	.word	0xefff69f3
 800483c:	40011000 	.word	0x40011000
 8004840:	40023800 	.word	0x40023800
 8004844:	40004400 	.word	0x40004400
 8004848:	40004800 	.word	0x40004800
 800484c:	40004c00 	.word	0x40004c00
 8004850:	40005000 	.word	0x40005000
 8004854:	40011400 	.word	0x40011400
 8004858:	40007800 	.word	0x40007800
 800485c:	2310      	movs	r3, #16
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e02c      	b.n	80048bc <UART_SetConfig+0x348>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a72      	ldr	r2, [pc, #456]	; (8004a30 <UART_SetConfig+0x4bc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d125      	bne.n	80048b8 <UART_SetConfig+0x344>
 800486c:	4b71      	ldr	r3, [pc, #452]	; (8004a34 <UART_SetConfig+0x4c0>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004876:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800487a:	d017      	beq.n	80048ac <UART_SetConfig+0x338>
 800487c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004880:	d817      	bhi.n	80048b2 <UART_SetConfig+0x33e>
 8004882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004886:	d00b      	beq.n	80048a0 <UART_SetConfig+0x32c>
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488c:	d811      	bhi.n	80048b2 <UART_SetConfig+0x33e>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <UART_SetConfig+0x326>
 8004892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004896:	d006      	beq.n	80048a6 <UART_SetConfig+0x332>
 8004898:	e00b      	b.n	80048b2 <UART_SetConfig+0x33e>
 800489a:	2300      	movs	r3, #0
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e00d      	b.n	80048bc <UART_SetConfig+0x348>
 80048a0:	2302      	movs	r3, #2
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e00a      	b.n	80048bc <UART_SetConfig+0x348>
 80048a6:	2304      	movs	r3, #4
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e007      	b.n	80048bc <UART_SetConfig+0x348>
 80048ac:	2308      	movs	r3, #8
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e004      	b.n	80048bc <UART_SetConfig+0x348>
 80048b2:	2310      	movs	r3, #16
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e001      	b.n	80048bc <UART_SetConfig+0x348>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c4:	d15b      	bne.n	800497e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d828      	bhi.n	800491e <UART_SetConfig+0x3aa>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x360>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	08004901 	.word	0x08004901
 80048dc:	08004909 	.word	0x08004909
 80048e0:	0800491f 	.word	0x0800491f
 80048e4:	0800490f 	.word	0x0800490f
 80048e8:	0800491f 	.word	0x0800491f
 80048ec:	0800491f 	.word	0x0800491f
 80048f0:	0800491f 	.word	0x0800491f
 80048f4:	08004917 	.word	0x08004917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7fe f8ec 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80048fc:	61b8      	str	r0, [r7, #24]
        break;
 80048fe:	e013      	b.n	8004928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004900:	f7fe f8fc 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e00f      	b.n	8004928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004908:	4b4b      	ldr	r3, [pc, #300]	; (8004a38 <UART_SetConfig+0x4c4>)
 800490a:	61bb      	str	r3, [r7, #24]
        break;
 800490c:	e00c      	b.n	8004928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490e:	f7fd ffcf 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8004912:	61b8      	str	r0, [r7, #24]
        break;
 8004914:	e008      	b.n	8004928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491a:	61bb      	str	r3, [r7, #24]
        break;
 800491c:	e004      	b.n	8004928 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	77bb      	strb	r3, [r7, #30]
        break;
 8004926:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d074      	beq.n	8004a18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	005a      	lsls	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	441a      	add	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b0f      	cmp	r3, #15
 8004948:	d916      	bls.n	8004978 <UART_SetConfig+0x404>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004950:	d212      	bcs.n	8004978 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f023 030f 	bic.w	r3, r3, #15
 800495a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	b29a      	uxth	r2, r3
 8004968:	89fb      	ldrh	r3, [r7, #14]
 800496a:	4313      	orrs	r3, r2
 800496c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	89fa      	ldrh	r2, [r7, #14]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	e04f      	b.n	8004a18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	77bb      	strb	r3, [r7, #30]
 800497c:	e04c      	b.n	8004a18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800497e:	7ffb      	ldrb	r3, [r7, #31]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d828      	bhi.n	80049d6 <UART_SetConfig+0x462>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <UART_SetConfig+0x418>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	080049d7 	.word	0x080049d7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049d7 	.word	0x080049d7
 80049a8:	080049d7 	.word	0x080049d7
 80049ac:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7fe f890 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80049b4:	61b8      	str	r0, [r7, #24]
        break;
 80049b6:	e013      	b.n	80049e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7fe f8a0 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 80049bc:	61b8      	str	r0, [r7, #24]
        break;
 80049be:	e00f      	b.n	80049e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <UART_SetConfig+0x4c4>)
 80049c2:	61bb      	str	r3, [r7, #24]
        break;
 80049c4:	e00c      	b.n	80049e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7fd ff73 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 80049ca:	61b8      	str	r0, [r7, #24]
        break;
 80049cc:	e008      	b.n	80049e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	61bb      	str	r3, [r7, #24]
        break;
 80049d4:	e004      	b.n	80049e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	77bb      	strb	r3, [r7, #30]
        break;
 80049de:	bf00      	nop
    }

    if (pclk != 0U)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	085a      	lsrs	r2, r3, #1
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	441a      	add	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b0f      	cmp	r3, #15
 80049fe:	d909      	bls.n	8004a14 <UART_SetConfig+0x4a0>
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d205      	bcs.n	8004a14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	e001      	b.n	8004a18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a24:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40007c00 	.word	0x40007c00
 8004a34:	40023800 	.word	0x40023800
 8004a38:	00f42400 	.word	0x00f42400

08004a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b3a:	d10a      	bne.n	8004b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b90:	f7fc fb92 	bl	80012b8 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d10e      	bne.n	8004bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f81b 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e011      	b.n	8004be6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b09c      	sub	sp, #112	; 0x70
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfe:	e0a7      	b.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	f000 80a3 	beq.w	8004d50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fc fb55 	bl	80012b8 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d13f      	bne.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c34:	667b      	str	r3, [r7, #100]	; 0x64
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	663b      	str	r3, [r7, #96]	; 0x60
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e068      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d050      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbc:	d148      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e6      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d1a:	623a      	str	r2, [r7, #32]
 8004d1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	69f9      	ldr	r1, [r7, #28]
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e5      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e010      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	f43f af48 	beq.w	8004c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3770      	adds	r7, #112	; 0x70
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	f107 001c 	add.w	r0, r7, #28
 8004d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d120      	bne.n	8004dd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <USB_CoreInit+0xac>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa96 	bl	80052fc <USB_CoreReset>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
 8004dd4:	e010      	b.n	8004df8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa8a 	bl	80052fc <USB_CoreReset>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10b      	bne.n	8004e16 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f043 0206 	orr.w	r2, r3, #6
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e22:	b004      	add	sp, #16
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	ffbdffbf 	.word	0xffbdffbf

08004e2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 0201 	bic.w	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d115      	bne.n	8004e9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f7fc fa27 	bl	80012d0 <HAL_Delay>
      ms++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fa29 	bl	80052e0 <USB_GetMode>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d01e      	beq.n	8004ed2 <USB_SetCurrentMode+0x84>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b31      	cmp	r3, #49	; 0x31
 8004e98:	d9f0      	bls.n	8004e7c <USB_SetCurrentMode+0x2e>
 8004e9a:	e01a      	b.n	8004ed2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d115      	bne.n	8004ece <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eae:	2001      	movs	r0, #1
 8004eb0:	f7fc fa0e 	bl	80012d0 <HAL_Delay>
      ms++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa10 	bl	80052e0 <USB_GetMode>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <USB_SetCurrentMode+0x84>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b31      	cmp	r3, #49	; 0x31
 8004eca:	d9f0      	bls.n	8004eae <USB_SetCurrentMode+0x60>
 8004ecc:	e001      	b.n	8004ed2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e005      	b.n	8004ede <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b32      	cmp	r3, #50	; 0x32
 8004ed6:	d101      	bne.n	8004edc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ee8:	b084      	sub	sp, #16
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	e009      	b.n	8004f1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3340      	adds	r3, #64	; 0x40
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b0e      	cmp	r3, #14
 8004f20:	d9f2      	bls.n	8004f08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d11c      	bne.n	8004f62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f36:	f043 0302 	orr.w	r3, r3, #2
 8004f3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e005      	b.n	8004f6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f74:	461a      	mov	r2, r3
 8004f76:	2300      	movs	r3, #0
 8004f78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	4619      	mov	r1, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	461a      	mov	r2, r3
 8004f8a:	680b      	ldr	r3, [r1, #0]
 8004f8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10c      	bne.n	8004fae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f965 	bl	800526c <USB_SetDevSpeed>
 8004fa2:	e008      	b.n	8004fb6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f960 	bl	800526c <USB_SetDevSpeed>
 8004fac:	e003      	b.n	8004fb6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fae:	2103      	movs	r1, #3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f95b 	bl	800526c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f8f3 	bl	80051a4 <USB_FlushTxFifo>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f91f 	bl	800520c <USB_FlushRxFifo>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	461a      	mov	r2, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e043      	b.n	800508a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005018:	d118      	bne.n	800504c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	e013      	b.n	800505e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	461a      	mov	r2, r3
 8005044:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e008      	b.n	800505e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	461a      	mov	r2, r3
 800505a:	2300      	movs	r3, #0
 800505c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	461a      	mov	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	461a      	mov	r2, r3
 800507e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005082:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3301      	adds	r3, #1
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	429a      	cmp	r2, r3
 8005090:	d3b7      	bcc.n	8005002 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	e043      	b.n	8005120 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ae:	d118      	bne.n	80050e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	461a      	mov	r2, r3
 80050c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	e013      	b.n	80050f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	461a      	mov	r2, r3
 80050da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	e008      	b.n	80050f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ee:	461a      	mov	r2, r3
 80050f0:	2300      	movs	r3, #0
 80050f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	461a      	mov	r2, r3
 8005102:	2300      	movs	r3, #0
 8005104:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	461a      	mov	r2, r3
 8005114:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005118:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3301      	adds	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	429a      	cmp	r2, r3
 8005126:	d3b7      	bcc.n	8005098 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005148:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f043 0210 	orr.w	r2, r3, #16
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	4b0e      	ldr	r3, [pc, #56]	; (800519c <USB_DevInit+0x2b4>)
 8005162:	4313      	orrs	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f043 0208 	orr.w	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800517a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <USB_DevInit+0x2b8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005198:	b004      	add	sp, #16
 800519a:	4770      	bx	lr
 800519c:	803c3800 	.word	0x803c3800
 80051a0:	40000004 	.word	0x40000004

080051a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a13      	ldr	r2, [pc, #76]	; (8005208 <USB_FlushTxFifo+0x64>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e01b      	b.n	80051fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	daf2      	bge.n	80051b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	019b      	lsls	r3, r3, #6
 80051d4:	f043 0220 	orr.w	r2, r3, #32
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a08      	ldr	r2, [pc, #32]	; (8005208 <USB_FlushTxFifo+0x64>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e006      	b.n	80051fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d0f0      	beq.n	80051dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	00030d40 	.word	0x00030d40

0800520c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a11      	ldr	r2, [pc, #68]	; (8005268 <USB_FlushRxFifo+0x5c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e018      	b.n	800525c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	daf2      	bge.n	8005218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2210      	movs	r2, #16
 800523a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a08      	ldr	r2, [pc, #32]	; (8005268 <USB_FlushRxFifo+0x5c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e006      	b.n	800525c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b10      	cmp	r3, #16
 8005258:	d0f0      	beq.n	800523c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	00030d40 	.word	0x00030d40

0800526c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052b8:	f023 0303 	bic.w	r3, r3, #3
 80052bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052cc:	f043 0302 	orr.w	r3, r3, #2
 80052d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0301 	and.w	r3, r3, #1
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <USB_CoreReset+0x64>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e01b      	b.n	8005352 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	daf2      	bge.n	8005308 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f043 0201 	orr.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3301      	adds	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4a09      	ldr	r2, [pc, #36]	; (8005360 <USB_CoreReset+0x64>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e006      	b.n	8005352 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d0f0      	beq.n	8005332 <USB_CoreReset+0x36>

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	00030d40 	.word	0x00030d40

08005364 <ex1>:

int flag_1=0;
int flag_2=0;


void ex1(){
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	f6ad 4d04 	subw	sp, sp, #3076	; 0xc04
 800536a:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t msg[BUFF_SIZE]="AbraKadabra";
 800536c:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005370:	f5a3 6480 	sub.w	r4, r3, #1024	; 0x400
 8005374:	4a2f      	ldr	r2, [pc, #188]	; (8005434 <ex1+0xd0>)
 8005376:	4623      	mov	r3, r4
 8005378:	6810      	ldr	r0, [r2, #0]
 800537a:	6851      	ldr	r1, [r2, #4]
 800537c:	6892      	ldr	r2, [r2, #8]
 800537e:	c307      	stmia	r3!, {r0, r1, r2}
 8005380:	f104 030c 	add.w	r3, r4, #12
 8005384:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f884 	bl	8005498 <memset>
	uint8_t spi1_buff[BUFF_SIZE]={0};
 8005390:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005394:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	3304      	adds	r3, #4
 800539e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80053a2:	2100      	movs	r1, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f877 	bl	8005498 <memset>

	uint8_t spi2_buff[BUFF_SIZE]={0};
 80053aa:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80053ae:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	3304      	adds	r3, #4
 80053b8:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f86a 	bl	8005498 <memset>
	HAL_SPI_Receive_IT(SPI_2_SLAVE, spi2_buff, BUFF_SIZE);
 80053c4:	463b      	mov	r3, r7
 80053c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ca:	4619      	mov	r1, r3
 80053cc:	481a      	ldr	r0, [pc, #104]	; (8005438 <ex1+0xd4>)
 80053ce:	f7fe f9b3 	bl	8003738 <HAL_SPI_Receive_IT>


	HAL_SPI_Transmit(SPI_1_MASTER, msg, BUFF_SIZE,HAL_MAX_DELAY);
 80053d2:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053de:	4817      	ldr	r0, [pc, #92]	; (800543c <ex1+0xd8>)
 80053e0:	f7fe f83b 	bl	800345a <HAL_SPI_Transmit>


	while(1){
		if (flag_2){
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <ex1+0xdc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d012      	beq.n	8005412 <ex1+0xae>
			HAL_SPI_Receive_IT(SPI_1_MASTER, spi1_buff, BUFF_SIZE);
 80053ec:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80053f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053f4:	4619      	mov	r1, r3
 80053f6:	4811      	ldr	r0, [pc, #68]	; (800543c <ex1+0xd8>)
 80053f8:	f7fe f99e 	bl	8003738 <HAL_SPI_Receive_IT>
			HAL_SPI_Transmit(SPI_2_SLAVE, spi2_buff, BUFF_SIZE,HAL_MAX_DELAY);
 80053fc:	4639      	mov	r1, r7
 80053fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005406:	480c      	ldr	r0, [pc, #48]	; (8005438 <ex1+0xd4>)
 8005408:	f7fe f827 	bl	800345a <HAL_SPI_Transmit>

		//	HAL_SPI_TransmitReceive(SPI_1_MASTER,spi2_buff , spi1_buff,BUFF_SIZE, HAL_MAX_DELAY);



			flag_2=0;
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <ex1+0xdc>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
		}
		if (flag_1){
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <ex1+0xe0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0e4      	beq.n	80053e4 <ex1+0x80>
			HAL_UART_Transmit(UART_DEBUG, spi1_buff, BUFF_SIZE, HAL_MAX_DELAY);
 800541a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005426:	4808      	ldr	r0, [pc, #32]	; (8005448 <ex1+0xe4>)
 8005428:	f7ff f820 	bl	800446c <HAL_UART_Transmit>
			flag_1=0;
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <ex1+0xe0>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
		if (flag_2){
 8005432:	e7d7      	b.n	80053e4 <ex1+0x80>
 8005434:	08005508 	.word	0x08005508
 8005438:	2000008c 	.word	0x2000008c
 800543c:	20000028 	.word	0x20000028
 8005440:	2000086c 	.word	0x2000086c
 8005444:	20000868 	.word	0x20000868
 8005448:	200002d4 	.word	0x200002d4

0800544c <HAL_SPI_RxCpltCallback>:
		}

	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	if (hspi== SPI_2_SLAVE){
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <HAL_SPI_RxCpltCallback+0x30>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d102      	bne.n	8005462 <HAL_SPI_RxCpltCallback+0x16>
		flag_2=1;
 800545c:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_SPI_RxCpltCallback+0x34>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
	}
	if (hspi== SPI_1_MASTER){
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a07      	ldr	r2, [pc, #28]	; (8005484 <HAL_SPI_RxCpltCallback+0x38>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d102      	bne.n	8005470 <HAL_SPI_RxCpltCallback+0x24>
		flag_1=1;
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <HAL_SPI_RxCpltCallback+0x3c>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
	}
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	2000008c 	.word	0x2000008c
 8005480:	2000086c 	.word	0x2000086c
 8005484:	20000028 	.word	0x20000028
 8005488:	20000868 	.word	0x20000868

0800548c <hw_main>:
//	if (hspi== SPI_1_MASTER){
//		flag_2=1;
//	}
//}

void hw_main(){
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
	ex1();
 8005490:	f7ff ff68 	bl	8005364 <ex1>
}
 8005494:	bf00      	nop
 8005496:	bd80      	pop	{r7, pc}

08005498 <memset>:
 8005498:	4402      	add	r2, r0
 800549a:	4603      	mov	r3, r0
 800549c:	4293      	cmp	r3, r2
 800549e:	d100      	bne.n	80054a2 <memset+0xa>
 80054a0:	4770      	bx	lr
 80054a2:	f803 1b01 	strb.w	r1, [r3], #1
 80054a6:	e7f9      	b.n	800549c <memset+0x4>

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4d0d      	ldr	r5, [pc, #52]	; (80054e0 <__libc_init_array+0x38>)
 80054ac:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054ae:	1b64      	subs	r4, r4, r5
 80054b0:	10a4      	asrs	r4, r4, #2
 80054b2:	2600      	movs	r6, #0
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	4d0b      	ldr	r5, [pc, #44]	; (80054e8 <__libc_init_array+0x40>)
 80054ba:	4c0c      	ldr	r4, [pc, #48]	; (80054ec <__libc_init_array+0x44>)
 80054bc:	f000 f818 	bl	80054f0 <_init>
 80054c0:	1b64      	subs	r4, r4, r5
 80054c2:	10a4      	asrs	r4, r4, #2
 80054c4:	2600      	movs	r6, #0
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	080055ec 	.word	0x080055ec
 80054e4:	080055ec 	.word	0x080055ec
 80054e8:	080055ec 	.word	0x080055ec
 80054ec:	080055f0 	.word	0x080055f0

080054f0 <_init>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr

080054fc <_fini>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	bf00      	nop
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr
