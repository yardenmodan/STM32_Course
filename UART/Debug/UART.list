
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea8  08006ea8  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb0  08006eb0  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08006f20  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08006fc0  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001744  200001a8  08007060  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200018ec  08007060  000218ec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001452c  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002e62  00000000  00000000  00034747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f00  00000000  00000000  000375b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b77  00000000  00000000  000384b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028304  00000000  00000000  00039027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001360e  00000000  00000000  0006132b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f106e  00000000  00000000  00074939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000044bc  00000000  00000000  001659a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  00169e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006be0 	.word	0x08006be0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ac 	.word	0x200001ac
 800020c:	08006be0 	.word	0x08006be0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 ff53 	bl	800146a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f812 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9ca 	bl	8000960 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f982 	bl	80008d4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 f922 	bl	8000818 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d4:	f000 f950 	bl	8000878 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80005d8:	f000 f8be 	bl	8000758 <MX_UART4_Init>
  MX_ETH_Init();
 80005dc:	f000 f86e 	bl	80006bc <MX_ETH_Init>
  MX_UART5_Init();
 80005e0:	f000 f8ea 	bl	80007b8 <MX_UART5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hw_main();
 80005e4:	f005 fbd2 	bl	8005d8c <hw_main>
 80005e8:	e7fc      	b.n	80005e4 <main+0x28>
	...

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fcd1 	bl	8005fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000610:	f002 fa6e 	bl	8002af0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <SystemClock_Config+0xc8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000634:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <SystemClock_Config+0xcc>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000660:	2348      	movs	r3, #72	; 0x48
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000668:	2303      	movs	r3, #3
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fa4d 	bl	8002b10 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 fa12 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fcdb 	bl	8003058 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a8:	f000 f9fc 	bl	8000aa4 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_ETH_Init+0x84>)
 80006c2:	4a20      	ldr	r2, [pc, #128]	; (8000744 <MX_ETH_Init+0x88>)
 80006c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ETH_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_ETH_Init+0x8c>)
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ETH_Init+0x8c>)
 80006d4:	22e1      	movs	r2, #225	; 0xe1
 80006d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ETH_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_ETH_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ETH_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_ETH_Init+0x84>)
 80006ec:	4a16      	ldr	r2, [pc, #88]	; (8000748 <MX_ETH_Init+0x8c>)
 80006ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_ETH_Init+0x84>)
 80006f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_ETH_Init+0x84>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <MX_ETH_Init+0x90>)
 80006fc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_ETH_Init+0x84>)
 8000700:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_ETH_Init+0x94>)
 8000702:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_ETH_Init+0x84>)
 8000706:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800070a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ETH_Init+0x84>)
 800070e:	f001 fbbb 	bl	8001e88 <HAL_ETH_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f9c4 	bl	8000aa4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800071c:	2238      	movs	r2, #56	; 0x38
 800071e:	2100      	movs	r1, #0
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_ETH_Init+0x98>)
 8000722:	f005 fc3e 	bl	8005fa2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_ETH_Init+0x98>)
 8000728:	2221      	movs	r2, #33	; 0x21
 800072a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_ETH_Init+0x98>)
 800072e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000732:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_ETH_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001fc 	.word	0x200001fc
 8000744:	40028000 	.word	0x40028000
 8000748:	20000b8c 	.word	0x20000b8c
 800074c:	20000108 	.word	0x20000108
 8000750:	20000068 	.word	0x20000068
 8000754:	200001c4 	.word	0x200001c4

08000758 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_UART4_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_UART4_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_UART4_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_UART4_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_UART4_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_UART4_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_UART4_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_UART4_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_UART4_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_UART4_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_UART4_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_UART4_Init+0x58>)
 800079c:	f003 fa72 	bl	8003c84 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f97d 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200002ac 	.word	0x200002ac
 80007b4:	40004c00 	.word	0x40004c00

080007b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_UART5_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_UART5_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_UART5_Init+0x58>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_UART5_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_UART5_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_UART5_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_UART5_Init+0x58>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_UART5_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_UART5_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_UART5_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_UART5_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_UART5_Init+0x58>)
 80007fc:	f003 fa42 	bl	8003c84 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f94d 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000334 	.word	0x20000334
 8000814:	40005000 	.word	0x40005000

08000818 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART3_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800085c:	f003 fa12 	bl	8003c84 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f91d 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200003bc 	.word	0x200003bc
 8000874:	40004800 	.word	0x40004800

08000878 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000882:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2206      	movs	r2, #6
 8000888:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2202      	movs	r2, #2
 800088e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2202      	movs	r2, #2
 800089a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2201      	movs	r2, #1
 80008a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	f001 ffcf 	bl	800285e <HAL_PCD_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f8ed 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000684 	.word	0x20000684

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_DMA_Init+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <MX_DMA_Init+0x88>)
 80008e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_DMA_Init+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	200b      	movs	r0, #11
 80008f8:	f000 ff13 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008fc:	200b      	movs	r0, #11
 80008fe:	f000 ff2c 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200c      	movs	r0, #12
 8000908:	f000 ff0b 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800090c:	200c      	movs	r0, #12
 800090e:	f000 ff24 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200d      	movs	r0, #13
 8000918:	f000 ff03 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800091c:	200d      	movs	r0, #13
 800091e:	f000 ff1c 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200e      	movs	r0, #14
 8000928:	f000 fefb 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800092c:	200e      	movs	r0, #14
 800092e:	f000 ff14 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	200f      	movs	r0, #15
 8000938:	f000 fef3 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800093c:	200f      	movs	r0, #15
 800093e:	f000 ff0c 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	202f      	movs	r0, #47	; 0x2f
 8000948:	f000 feeb 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800094c:	202f      	movs	r0, #47	; 0x2f
 800094e:	f000 ff04 	bl	800175a <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <MX_GPIO_Init+0x134>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a46      	ldr	r2, [pc, #280]	; (8000a94 <MX_GPIO_Init+0x134>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <MX_GPIO_Init+0x134>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <MX_GPIO_Init+0x134>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <MX_GPIO_Init+0x134>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <MX_GPIO_Init+0x134>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3a      	ldr	r2, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a2e      	ldr	r2, [pc, #184]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a0c:	4822      	ldr	r0, [pc, #136]	; (8000a98 <MX_GPIO_Init+0x138>)
 8000a0e:	f001 ff0d 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4821      	ldr	r0, [pc, #132]	; (8000a9c <MX_GPIO_Init+0x13c>)
 8000a18:	f001 ff08 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <MX_GPIO_Init+0x140>)
 8000a34:	f001 fd4e 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a38:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4811      	ldr	r0, [pc, #68]	; (8000a98 <MX_GPIO_Init+0x138>)
 8000a52:	f001 fd3f 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480b      	ldr	r0, [pc, #44]	; (8000a9c <MX_GPIO_Init+0x13c>)
 8000a6e:	f001 fd31 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_GPIO_Init+0x13c>)
 8000a86:	f001 fd25 	bl	80024d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	; 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a4e      	ldr	r2, [pc, #312]	; (8000c50 <HAL_ETH_MspInit+0x158>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f040 8096 	bne.w	8000c48 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b4a      	ldr	r3, [pc, #296]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a46      	ldr	r2, [pc, #280]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b94:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bac:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a28      	ldr	r2, [pc, #160]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bc4:	2332      	movs	r3, #50	; 0x32
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd4:	230b      	movs	r3, #11
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481e      	ldr	r0, [pc, #120]	; (8000c58 <HAL_ETH_MspInit+0x160>)
 8000be0:	f001 fc78 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000be4:	2386      	movs	r3, #134	; 0x86
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4817      	ldr	r0, [pc, #92]	; (8000c5c <HAL_ETH_MspInit+0x164>)
 8000c00:	f001 fc68 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c16:	230b      	movs	r3, #11
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480f      	ldr	r0, [pc, #60]	; (8000c60 <HAL_ETH_MspInit+0x168>)
 8000c22:	f001 fc57 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c38:	230b      	movs	r3, #11
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4808      	ldr	r0, [pc, #32]	; (8000c64 <HAL_ETH_MspInit+0x16c>)
 8000c44:	f001 fc46 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40028000 	.word	0x40028000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020400 	.word	0x40020400
 8000c64:	40021800 	.word	0x40021800

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0b0      	sub	sp, #192	; 0xc0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c84:	2284      	movs	r2, #132	; 0x84
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f98a 	bl	8005fa2 <memset>
  if(huart->Instance==UART4)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a53      	ldr	r2, [pc, #332]	; (8000de0 <HAL_UART_MspInit+0x178>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	f040 80b1 	bne.w	8000dfc <HAL_UART_MspInit+0x194>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fbfb 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000cb4:	f7ff fef6 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_UART_MspInit+0x17c>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <HAL_UART_MspInit+0x17c>)
 8000cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc4:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <HAL_UART_MspInit+0x17c>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <HAL_UART_MspInit+0x17c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a43      	ldr	r2, [pc, #268]	; (8000de4 <HAL_UART_MspInit+0x17c>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <HAL_UART_MspInit+0x17c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	623b      	str	r3, [r7, #32]
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ce8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d02:	2308      	movs	r3, #8
 8000d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4836      	ldr	r0, [pc, #216]	; (8000de8 <HAL_UART_MspInit+0x180>)
 8000d10:	f001 fbe0 	bl	80024d4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000d14:	4b35      	ldr	r3, [pc, #212]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d16:	4a36      	ldr	r2, [pc, #216]	; (8000df0 <HAL_UART_MspInit+0x188>)
 8000d18:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d20:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d22:	4b32      	ldr	r3, [pc, #200]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d34:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4e:	4b27      	ldr	r3, [pc, #156]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000d54:	4825      	ldr	r0, [pc, #148]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d56:	f000 fd1b 	bl	8001790 <HAL_DMA_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000d60:	f7ff fea0 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a21      	ldr	r2, [pc, #132]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d68:	675a      	str	r2, [r3, #116]	; 0x74
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <HAL_UART_MspInit+0x184>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <HAL_UART_MspInit+0x190>)
 8000d74:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000d78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d7c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000d80:	2240      	movs	r2, #64	; 0x40
 8000d82:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d90:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000db2:	f000 fced 	bl	8001790 <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8000dbc:	f7ff fe72 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000dc4:	671a      	str	r2, [r3, #112]	; 0x70
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_UART_MspInit+0x18c>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2034      	movs	r0, #52	; 0x34
 8000dd2:	f000 fca6 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000dd6:	2034      	movs	r0, #52	; 0x34
 8000dd8:	f000 fcbf 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ddc:	e18f      	b.n	80010fe <HAL_UART_MspInit+0x496>
 8000dde:	bf00      	nop
 8000de0:	40004c00 	.word	0x40004c00
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020800 	.word	0x40020800
 8000dec:	20000444 	.word	0x20000444
 8000df0:	40026040 	.word	0x40026040
 8000df4:	200004a4 	.word	0x200004a4
 8000df8:	40026070 	.word	0x40026070
  else if(huart->Instance==UART5)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a63      	ldr	r2, [pc, #396]	; (8000f90 <HAL_UART_MspInit+0x328>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	f040 80d4 	bne.w	8000fb0 <HAL_UART_MspInit+0x348>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fb44 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8000e22:	f7ff fe3f 	bl	8000aa4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e26:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a5a      	ldr	r2, [pc, #360]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a54      	ldr	r2, [pc, #336]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b52      	ldr	r3, [pc, #328]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	4b4f      	ldr	r3, [pc, #316]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <HAL_UART_MspInit+0x32c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e92:	4619      	mov	r1, r3
 8000e94:	4840      	ldr	r0, [pc, #256]	; (8000f98 <HAL_UART_MspInit+0x330>)
 8000e96:	f001 fb1d 	bl	80024d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4837      	ldr	r0, [pc, #220]	; (8000f9c <HAL_UART_MspInit+0x334>)
 8000ec0:	f001 fb08 	bl	80024d4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000ec6:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <HAL_UART_MspInit+0x33c>)
 8000ec8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000ecc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000f04:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000f06:	f000 fc43 	bl	8001790 <HAL_DMA_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8000f10:	f7ff fdc8 	bl	8000aa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000f18:	675a      	str	r2, [r3, #116]	; 0x74
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_UART_MspInit+0x338>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_UART_MspInit+0x344>)
 8000f24:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2c:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f30:	2240      	movs	r2, #64	; 0x40
 8000f32:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f40:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f62:	f000 fc15 	bl	8001790 <HAL_DMA_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_UART_MspInit+0x308>
      Error_Handler();
 8000f6c:	f7ff fd9a 	bl	8000aa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f74:	671a      	str	r2, [r3, #112]	; 0x70
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_UART_MspInit+0x340>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2035      	movs	r0, #53	; 0x35
 8000f82:	f000 fbce 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f86:	2035      	movs	r0, #53	; 0x35
 8000f88:	f000 fbe7 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 8000f8c:	e0b7      	b.n	80010fe <HAL_UART_MspInit+0x496>
 8000f8e:	bf00      	nop
 8000f90:	40005000 	.word	0x40005000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	20000504 	.word	0x20000504
 8000fa4:	40026010 	.word	0x40026010
 8000fa8:	20000564 	.word	0x20000564
 8000fac:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a54      	ldr	r2, [pc, #336]	; (8001108 <HAL_UART_MspInit+0x4a0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	f040 80a1 	bne.w	80010fe <HAL_UART_MspInit+0x496>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fa6a 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_UART_MspInit+0x372>
      Error_Handler();
 8000fd6:	f7ff fd65 	bl	8000aa4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <HAL_UART_MspInit+0x4a4>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_UART_MspInit+0x4a4>)
 8000fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <HAL_UART_MspInit+0x4a4>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <HAL_UART_MspInit+0x4a4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a45      	ldr	r2, [pc, #276]	; (800110c <HAL_UART_MspInit+0x4a4>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_UART_MspInit+0x4a4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800100a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800100e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001024:	2307      	movs	r3, #7
 8001026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800102e:	4619      	mov	r1, r3
 8001030:	4837      	ldr	r0, [pc, #220]	; (8001110 <HAL_UART_MspInit+0x4a8>)
 8001032:	f001 fa4f 	bl	80024d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 8001038:	4a37      	ldr	r2, [pc, #220]	; (8001118 <HAL_UART_MspInit+0x4b0>)
 800103a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 800103e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001042:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001044:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 8001052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001056:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001076:	4827      	ldr	r0, [pc, #156]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 8001078:	f000 fb8a 	bl	8001790 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_UART_MspInit+0x41e>
      Error_Handler();
 8001082:	f7ff fd0f 	bl	8000aa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a22      	ldr	r2, [pc, #136]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 800108a:	675a      	str	r2, [r3, #116]	; 0x74
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <HAL_UART_MspInit+0x4ac>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <HAL_UART_MspInit+0x4b4>)
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_UART_MspInit+0x4b8>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_UART_MspInit+0x4b4>)
 800109a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800109e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010a2:	2240      	movs	r2, #64	; 0x40
 80010a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010d4:	f000 fb5c 	bl	8001790 <HAL_DMA_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_UART_MspInit+0x47a>
      Error_Handler();
 80010de:	f7ff fce1 	bl	8000aa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010e6:	671a      	str	r2, [r3, #112]	; 0x70
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <HAL_UART_MspInit+0x4b4>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2027      	movs	r0, #39	; 0x27
 80010f4:	f000 fb15 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010f8:	2027      	movs	r0, #39	; 0x27
 80010fa:	f000 fb2e 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	37c0      	adds	r7, #192	; 0xc0
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40004800 	.word	0x40004800
 800110c:	40023800 	.word	0x40023800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	200005c4 	.word	0x200005c4
 8001118:	40026028 	.word	0x40026028
 800111c:	20000624 	.word	0x20000624
 8001120:	40026058 	.word	0x40026058

08001124 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ac      	sub	sp, #176	; 0xb0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	2284      	movs	r2, #132	; 0x84
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f004 ff2c 	bl	8005fa2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001152:	d159      	bne.n	8001208 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001154:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001158:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	4618      	mov	r0, r3
 8001166:	f002 f99d 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f7ff fc98 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_PCD_MspInit+0xec>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a25      	ldr	r2, [pc, #148]	; (8001210 <HAL_PCD_MspInit+0xec>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_PCD_MspInit+0xec>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800118c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a6:	230a      	movs	r3, #10
 80011a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4818      	ldr	r0, [pc, #96]	; (8001214 <HAL_PCD_MspInit+0xf0>)
 80011b4:	f001 f98e 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <HAL_PCD_MspInit+0xf0>)
 80011d4:	f001 f97e 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_PCD_MspInit+0xec>)
 80011da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_PCD_MspInit+0xec>)
 80011de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e2:	6353      	str	r3, [r2, #52]	; 0x34
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_PCD_MspInit+0xec>)
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_PCD_MspInit+0xec>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_PCD_MspInit+0xec>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	6453      	str	r3, [r2, #68]	; 0x44
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_PCD_MspInit+0xec>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	37b0      	adds	r7, #176	; 0xb0
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 f93e 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DMA1_Stream0_IRQHandler+0x10>)
 8001272:	f000 fbcd 	bl	8001a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000504 	.word	0x20000504

08001280 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <DMA1_Stream1_IRQHandler+0x10>)
 8001286:	f000 fbc3 	bl	8001a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200005c4 	.word	0x200005c4

08001294 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA1_Stream2_IRQHandler+0x10>)
 800129a:	f000 fbb9 	bl	8001a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000444 	.word	0x20000444

080012a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <DMA1_Stream3_IRQHandler+0x10>)
 80012ae:	f000 fbaf 	bl	8001a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000624 	.word	0x20000624

080012bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <DMA1_Stream4_IRQHandler+0x10>)
 80012c2:	f000 fba5 	bl	8001a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200004a4 	.word	0x200004a4

080012d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <USART3_IRQHandler+0x10>)
 80012d6:	f002 fe6b 	bl	8003fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200003bc 	.word	0x200003bc

080012e4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <DMA1_Stream7_IRQHandler+0x10>)
 80012ea:	f000 fb91 	bl	8001a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000564 	.word	0x20000564

080012f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <UART4_IRQHandler+0x10>)
 80012fe:	f002 fe57 	bl	8003fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200002ac 	.word	0x200002ac

0800130c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <UART5_IRQHandler+0x10>)
 8001312:	f002 fe4d 	bl	8003fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000334 	.word	0x20000334

08001320 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001348:	605a      	str	r2, [r3, #4]
  return 0;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_isatty>:

int _isatty(int file)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001390:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <_sbrk+0x5c>)
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <_sbrk+0x60>)
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <_sbrk+0x64>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <_sbrk+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d207      	bcs.n	80013c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b8:	f004 fe42 	bl	8006040 <__errno>
 80013bc:	4603      	mov	r3, r0
 80013be:	220c      	movs	r2, #12
 80013c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e009      	b.n	80013dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <_sbrk+0x64>)
 80013d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20050000 	.word	0x20050000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	20000b94 	.word	0x20000b94
 80013f0:	200018f0 	.word	0x200018f0

080013f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141e:	490e      	ldr	r1, [pc, #56]	; (8001458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001434:	4c0b      	ldr	r4, [pc, #44]	; (8001464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001442:	f7ff ffd7 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f004 fe01 	bl	800604c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff f8b7 	bl	80005bc <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800145c:	08006eb8 	.word	0x08006eb8
  ldr r2, =_sbss
 8001460:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001464:	200018ec 	.word	0x200018ec

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>

0800146a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f94c 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f805 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff fb19 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f967 	bl	8001776 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f92f 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008
 8001508:	20000b98 	.word	0x20000b98

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000b98 	.word	0x20000b98

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	4313      	orrs	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	05fa0000 	.word	0x05fa0000

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff3e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff31 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff feb6 	bl	800150c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e099      	b.n	80018e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017cc:	e00f      	b.n	80017ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ce:	f7ff fe9d 	bl	800150c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d908      	bls.n	80017ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2220      	movs	r2, #32
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2203      	movs	r2, #3
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e078      	b.n	80018e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e8      	bne.n	80017ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_DMA_Init+0x158>)
 8001808:	4013      	ands	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2b04      	cmp	r3, #4
 8001846:	d107      	bne.n	8001858 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4313      	orrs	r3, r2
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f023 0307 	bic.w	r3, r3, #7
 800186e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4313      	orrs	r3, r2
 8001878:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	2b04      	cmp	r3, #4
 8001880:	d117      	bne.n	80018b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fa7b 	bl	8001d90 <DMA_CheckFifoParam>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018ae:	2301      	movs	r3, #1
 80018b0:	e016      	b.n	80018e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fa32 	bl	8001d24 <DMA_CalcBaseAndBitshift>
 80018c0:	4603      	mov	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	223f      	movs	r2, #63	; 0x3f
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	f010803f 	.word	0xf010803f

080018ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018fa:	f7ff fe07 	bl	800150c <HAL_GetTick>
 80018fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d008      	beq.n	800191e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e052      	b.n	80019c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0216 	bic.w	r2, r2, #22
 800192c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <HAL_DMA_Abort+0x62>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0208 	bic.w	r2, r2, #8
 800195c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196e:	e013      	b.n	8001998 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001970:	f7ff fdcc 	bl	800150c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b05      	cmp	r3, #5
 800197c:	d90c      	bls.n	8001998 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2220      	movs	r2, #32
 8001982:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2203      	movs	r2, #3
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e015      	b.n	80019c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1e4      	bne.n	8001970 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	223f      	movs	r2, #63	; 0x3f
 80019ac:	409a      	lsls	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d004      	beq.n	80019ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00c      	b.n	8001a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2205      	movs	r2, #5
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a1c:	4b8e      	ldr	r3, [pc, #568]	; (8001c58 <HAL_DMA_IRQHandler+0x248>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <HAL_DMA_IRQHandler+0x24c>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0a9b      	lsrs	r3, r3, #10
 8001a28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d01a      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0204 	bic.w	r2, r2, #4
 8001a62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	2208      	movs	r2, #8
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2201      	movs	r2, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d012      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f043 0202 	orr.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d012      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2210      	movs	r2, #16
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d043      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03c      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d018      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d108      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d024      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
 8001b3e:	e01f      	b.n	8001b80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01b      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
 8001b50:	e016      	b.n	8001b80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d107      	bne.n	8001b70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0208 	bic.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	2220      	movs	r2, #32
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 808f 	beq.w	8001cb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8087 	beq.w	8001cb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d136      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0216 	bic.w	r2, r2, #22
 8001bc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <HAL_DMA_IRQHandler+0x1da>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0208 	bic.w	r2, r2, #8
 8001bf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	223f      	movs	r2, #63	; 0x3f
 8001c00:	409a      	lsls	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d07e      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
        }
        return;
 8001c26:	e079      	b.n	8001d1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01d      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d031      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
 8001c54:	e02c      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x2a0>
 8001c56:	bf00      	nop
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
 8001c70:	e01e      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0210 	bic.w	r2, r2, #16
 8001c8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d032      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d022      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d307      	bcc.n	8001cf8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f2      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x2cc>
 8001cf6:	e000      	b.n	8001cfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cf8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
 8001d1a:	e000      	b.n	8001d1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d1c:	bf00      	nop
    }
  }
}
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3b10      	subs	r3, #16
 8001d34:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <DMA_CalcBaseAndBitshift+0x60>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <DMA_CalcBaseAndBitshift+0x64>)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d908      	bls.n	8001d64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <DMA_CalcBaseAndBitshift+0x68>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	1d1a      	adds	r2, r3, #4
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	659a      	str	r2, [r3, #88]	; 0x58
 8001d62:	e006      	b.n	8001d72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <DMA_CalcBaseAndBitshift+0x68>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	aaaaaaab 	.word	0xaaaaaaab
 8001d88:	08006e6c 	.word	0x08006e6c
 8001d8c:	fffffc00 	.word	0xfffffc00

08001d90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d11f      	bne.n	8001dea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d856      	bhi.n	8001e5e <DMA_CheckFifoParam+0xce>
 8001db0:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <DMA_CheckFifoParam+0x28>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001dc9 	.word	0x08001dc9
 8001dbc:	08001ddb 	.word	0x08001ddb
 8001dc0:	08001dc9 	.word	0x08001dc9
 8001dc4:	08001e5f 	.word	0x08001e5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d046      	beq.n	8001e62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd8:	e043      	b.n	8001e62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001de2:	d140      	bne.n	8001e66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de8:	e03d      	b.n	8001e66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df2:	d121      	bne.n	8001e38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d837      	bhi.n	8001e6a <DMA_CheckFifoParam+0xda>
 8001dfa:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <DMA_CheckFifoParam+0x70>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e17 	.word	0x08001e17
 8001e08:	08001e11 	.word	0x08001e11
 8001e0c:	08001e29 	.word	0x08001e29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
      break;
 8001e14:	e030      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d025      	beq.n	8001e6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e26:	e022      	b.n	8001e6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e30:	d11f      	bne.n	8001e72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e36:	e01c      	b.n	8001e72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d903      	bls.n	8001e46 <DMA_CheckFifoParam+0xb6>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d003      	beq.n	8001e4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e44:	e018      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4a:	e015      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5c:	e00b      	b.n	8001e76 <DMA_CheckFifoParam+0xe6>
      break;
 8001e5e:	bf00      	nop
 8001e60:	e00a      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
 8001e64:	e008      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      break;
 8001e66:	bf00      	nop
 8001e68:	e006      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e004      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e002      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e72:	bf00      	nop
 8001e74:	e000      	b.n	8001e78 <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
    }
  } 
  
  return status; 
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06a      	b.n	8001f70 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2223      	movs	r2, #35	; 0x23
 8001ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe fe23 	bl	8000af8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_ETH_Init+0xf0>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <HAL_ETH_Init+0xf0>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <HAL_ETH_Init+0xf0>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_ETH_Init+0xf4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_ETH_Init+0xf4>)
 8001ed0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ed4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_ETH_Init+0xf4>)
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_ETH_Init+0xf4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ee4:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <HAL_ETH_Init+0xf4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f00:	f7ff fb04 	bl	800150c <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f06:	e011      	b.n	8001f2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f08:	f7ff fb00 	bl	800150c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f16:	d909      	bls.n	8001f2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	22e0      	movs	r2, #224	; 0xe0
 8001f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e021      	b.n	8001f70 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1e4      	bne.n	8001f08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f958 	bl	80021f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f9ff 	bl	8002348 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fa55 	bl	80023fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f9bd 	bl	80022d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800

08001f80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <ETH_SetMACConfig+0x15c>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	7c1b      	ldrb	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <ETH_SetMACConfig+0x28>
 8001fa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fa6:	e000      	b.n	8001faa <ETH_SetMACConfig+0x2a>
 8001fa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	7c5b      	ldrb	r3, [r3, #17]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <ETH_SetMACConfig+0x38>
 8001fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fb6:	e000      	b.n	8001fba <ETH_SetMACConfig+0x3a>
 8001fb8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7fdb      	ldrb	r3, [r3, #31]
 8001fc6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001fc8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	7f92      	ldrb	r2, [r2, #30]
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d102      	bne.n	8001fde <ETH_SetMACConfig+0x5e>
 8001fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fdc:	e000      	b.n	8001fe0 <ETH_SetMACConfig+0x60>
 8001fde:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fe0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7f1b      	ldrb	r3, [r3, #28]
 8001fe6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fe8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	791b      	ldrb	r3, [r3, #4]
 8001ff4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d102      	bne.n	8002008 <ETH_SetMACConfig+0x88>
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	e000      	b.n	800200a <ETH_SetMACConfig+0x8a>
 8002008:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800200a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7bdb      	ldrb	r3, [r3, #15]
 8002010:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002012:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002018:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002020:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002022:	4313      	orrs	r3, r2
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff fa72 	bl	8001524 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002066:	2a00      	cmp	r2, #0
 8002068:	d101      	bne.n	800206e <ETH_SetMACConfig+0xee>
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	e000      	b.n	8002070 <ETH_SetMACConfig+0xf0>
 800206e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002070:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002076:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800207e:	2a01      	cmp	r2, #1
 8002080:	d101      	bne.n	8002086 <ETH_SetMACConfig+0x106>
 8002082:	2208      	movs	r2, #8
 8002084:	e000      	b.n	8002088 <ETH_SetMACConfig+0x108>
 8002086:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002088:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002090:	2a01      	cmp	r2, #1
 8002092:	d101      	bne.n	8002098 <ETH_SetMACConfig+0x118>
 8002094:	2204      	movs	r2, #4
 8002096:	e000      	b.n	800209a <ETH_SetMACConfig+0x11a>
 8002098:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800209a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80020a2:	2a01      	cmp	r2, #1
 80020a4:	d101      	bne.n	80020aa <ETH_SetMACConfig+0x12a>
 80020a6:	2202      	movs	r2, #2
 80020a8:	e000      	b.n	80020ac <ETH_SetMACConfig+0x12c>
 80020aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020ac:	4313      	orrs	r3, r2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7ff fa2d 	bl	8001524 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	ff20810f 	.word	0xff20810f

080020e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <ETH_SetDMAConfig+0x110>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	7b1b      	ldrb	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <ETH_SetDMAConfig+0x2c>
 8002106:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800210a:	e000      	b.n	800210e <ETH_SetDMAConfig+0x2e>
 800210c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	7b5b      	ldrb	r3, [r3, #13]
 8002112:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002114:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	7f52      	ldrb	r2, [r2, #29]
 800211a:	2a00      	cmp	r2, #0
 800211c:	d102      	bne.n	8002124 <ETH_SetDMAConfig+0x44>
 800211e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002122:	e000      	b.n	8002126 <ETH_SetDMAConfig+0x46>
 8002124:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002126:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	7b9b      	ldrb	r3, [r3, #14]
 800212c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800212e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002134:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7f1b      	ldrb	r3, [r3, #28]
 800213a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800213c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7f9b      	ldrb	r3, [r3, #30]
 8002142:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002144:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800214a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002152:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002154:	4313      	orrs	r3, r2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002164:	461a      	mov	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff f9d4 	bl	8001524 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002184:	461a      	mov	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	791b      	ldrb	r3, [r3, #4]
 800218e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002194:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800219a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff f9a5 	bl	8001524 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	f8de3f23 	.word	0xf8de3f23

080021f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0a6      	sub	sp, #152	; 0x98
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002230:	2300      	movs	r3, #0
 8002232:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800223a:	2300      	movs	r3, #0
 800223c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800225a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800225c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002268:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fe86 	bl	8001f80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002274:	2301      	movs	r3, #1
 8002276:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002278:	2301      	movs	r3, #1
 800227a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002282:	2301      	movs	r3, #1
 8002284:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff08 	bl	80020e0 <ETH_SetDMAConfig>
}
 80022d0:	bf00      	nop
 80022d2:	3798      	adds	r7, #152	; 0x98
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3305      	adds	r3, #5
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	3204      	adds	r2, #4
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <ETH_MACAddressConfig+0x68>)
 80022fa:	4413      	add	r3, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3303      	adds	r3, #3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3302      	adds	r3, #2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3301      	adds	r3, #1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4313      	orrs	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <ETH_MACAddressConfig+0x6c>)
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40028040 	.word	0x40028040
 8002344:	40028044 	.word	0x40028044

08002348 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e03e      	b.n	80023d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	3206      	adds	r2, #6
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d80c      	bhi.n	80023b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e004      	b.n	80023c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d9bd      	bls.n	8002356 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ec:	611a      	str	r2, [r3, #16]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e046      	b.n	8002496 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6919      	ldr	r1, [r3, #16]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002444:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800244c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	3212      	adds	r2, #18
 8002462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d80c      	bhi.n	8002486 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6919      	ldr	r1, [r3, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	e004      	b.n	8002490 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d9b5      	bls.n	8002408 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	60da      	str	r2, [r3, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	e175      	b.n	80027e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	f040 8164 	bne.w	80027da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d005      	beq.n	800252a <HAL_GPIO_Init+0x56>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d130      	bne.n	800258c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 0201 	and.w	r2, r3, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b03      	cmp	r3, #3
 8002596:	d017      	beq.n	80025c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d123      	bne.n	800261c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	08da      	lsrs	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3208      	adds	r2, #8
 80025dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	08da      	lsrs	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3208      	adds	r2, #8
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0203 	and.w	r2, r3, #3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80be 	beq.w	80027da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_GPIO_Init+0x324>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_GPIO_Init+0x324>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_GPIO_Init+0x324>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002676:	4a61      	ldr	r2, [pc, #388]	; (80027fc <HAL_GPIO_Init+0x328>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_GPIO_Init+0x32c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d037      	beq.n	8002712 <HAL_GPIO_Init+0x23e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a57      	ldr	r2, [pc, #348]	; (8002804 <HAL_GPIO_Init+0x330>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d031      	beq.n	800270e <HAL_GPIO_Init+0x23a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_GPIO_Init+0x334>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02b      	beq.n	800270a <HAL_GPIO_Init+0x236>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a55      	ldr	r2, [pc, #340]	; (800280c <HAL_GPIO_Init+0x338>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d025      	beq.n	8002706 <HAL_GPIO_Init+0x232>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a54      	ldr	r2, [pc, #336]	; (8002810 <HAL_GPIO_Init+0x33c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <HAL_GPIO_Init+0x22e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a53      	ldr	r2, [pc, #332]	; (8002814 <HAL_GPIO_Init+0x340>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d019      	beq.n	80026fe <HAL_GPIO_Init+0x22a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_GPIO_Init+0x344>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0x226>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a51      	ldr	r2, [pc, #324]	; (800281c <HAL_GPIO_Init+0x348>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_GPIO_Init+0x222>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_GPIO_Init+0x34c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x21e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <HAL_GPIO_Init+0x350>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_GPIO_Init+0x21a>
 80026ea:	2309      	movs	r3, #9
 80026ec:	e012      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026ee:	230a      	movs	r3, #10
 80026f0:	e010      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00e      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026f6:	2307      	movs	r3, #7
 80026f8:	e00c      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e00a      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026fe:	2305      	movs	r3, #5
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002702:	2304      	movs	r3, #4
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x240>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x240>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x328>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_GPIO_Init+0x354>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a29      	ldr	r2, [pc, #164]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <HAL_GPIO_Init+0x354>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_GPIO_Init+0x354>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <HAL_GPIO_Init+0x354>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f ae86 	bls.w	80024f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40021400 	.word	0x40021400
 8002818:	40021800 	.word	0x40021800
 800281c:	40021c00 	.word	0x40021c00
 8002820:	40022000 	.word	0x40022000
 8002824:	40022400 	.word	0x40022400
 8002828:	40013c00 	.word	0x40013c00

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002848:	e003      	b.n	8002852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800285e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002860:	b08f      	sub	sp, #60	; 0x3c
 8002862:	af0a      	add	r7, sp, #40	; 0x28
 8002864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e116      	b.n	8002a9e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fc4a 	bl	8001124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fde4 	bl	800547c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	687e      	ldr	r6, [r7, #4]
 80028bc:	466d      	mov	r5, sp
 80028be:	f106 0410 	add.w	r4, r6, #16
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80028d2:	1d33      	adds	r3, r6, #4
 80028d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d6:	6838      	ldr	r0, [r7, #0]
 80028d8:	f002 fd78 	bl	80053cc <USB_CoreInit>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0d7      	b.n	8002a9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 fdd2 	bl	800549e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e04a      	b.n	8002996 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333d      	adds	r3, #61	; 0x3d
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	333c      	adds	r3, #60	; 0x3c
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	b298      	uxth	r0, r3
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	4602      	mov	r2, r0
 800293e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3340      	adds	r3, #64	; 0x40
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334c      	adds	r3, #76	; 0x4c
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3354      	adds	r3, #84	; 0x54
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	3301      	adds	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3af      	bcc.n	8002900 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e044      	b.n	8002a30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3b5      	bcc.n	80029a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	687e      	ldr	r6, [r7, #4]
 8002a42:	466d      	mov	r5, sp
 8002a44:	f106 0410 	add.w	r4, r6, #16
 8002a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a58:	1d33      	adds	r3, r6, #4
 8002a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5c:	6838      	ldr	r0, [r7, #0]
 8002a5e:	f002 fd6b 	bl	8005538 <USB_DevInit>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e014      	b.n	8002a9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f80b 	bl	8002aa8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 ff29 	bl	80058ee <USB_DevDisconnect>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002aa8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_PCDEx_ActivateLPM+0x44>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	10000003 	.word	0x10000003

08002af0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40007000 	.word	0x40007000

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e291      	b.n	800304a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8087 	beq.w	8002c42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b34:	4b96      	ldr	r3, [pc, #600]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d00c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b40:	4b93      	ldr	r3, [pc, #588]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d112      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62>
 8002b4c:	4b90      	ldr	r3, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d10b      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d06c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x130>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d168      	bne.n	8002c40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e26b      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7a>
 8002b7c:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e02e      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x9c>
 8002b92:	4b7f      	ldr	r3, [pc, #508]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7e      	ldr	r2, [pc, #504]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b7c      	ldr	r3, [pc, #496]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7b      	ldr	r2, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a75      	ldr	r2, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a72      	ldr	r2, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002bd0:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6b      	ldr	r2, [pc, #428]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fc8c 	bl	800150c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fc88 	bl	800150c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e21f      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xe8>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fc78 	bl	800150c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe fc74 	bl	800150c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e20b      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x110>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d069      	beq.n	8002d22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4e:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x190>
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e1df      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	493d      	ldr	r1, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e040      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d023      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a38      	ldr	r2, [pc, #224]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fc2a 	bl	800150c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fc26 	bl	800150c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1bd      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4929      	ldr	r1, [pc, #164]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
 8002cee:	e018      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fc06 	bl	800150c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe fc02 	bl	800150c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e199      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d038      	beq.n	8002da0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe fbe3 	bl	800150c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fbdf 	bl	800150c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e176      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x23a>
 8002d68:	e01a      	b.n	8002da0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7fe fbc9 	bl	800150c <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7fe fbc5 	bl	800150c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d903      	bls.n	8002d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e15c      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
 8002d90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b91      	ldr	r3, [pc, #580]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a4 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b8b      	ldr	r3, [pc, #556]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a87      	ldr	r2, [pc, #540]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd6:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002de2:	4b7f      	ldr	r3, [pc, #508]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7e      	ldr	r2, [pc, #504]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fe fb8d 	bl	800150c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe fb89 	bl	800150c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e120      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e08:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x31a>
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	e02d      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x33c>
 8002e32:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a66      	ldr	r2, [pc, #408]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	e01c      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x35e>
 8002e54:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	4b5e      	ldr	r3, [pc, #376]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a5d      	ldr	r2, [pc, #372]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e6e:	4b5b      	ldr	r3, [pc, #364]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a5a      	ldr	r2, [pc, #360]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a57      	ldr	r2, [pc, #348]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fb3d 	bl	800150c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fb39 	bl	800150c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0ce      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	4b4b      	ldr	r3, [pc, #300]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <HAL_RCC_OscConfig+0x386>
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe fb27 	bl	800150c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fb23 	bl	800150c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0b8      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	4b40      	ldr	r3, [pc, #256]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a4 	beq.w	8003048 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f00:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d06b      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d149      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe faf4 	bl	800150c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fe faf0 	bl	800150c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e087      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fac4 	bl	800150c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fac0 	bl	800150c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e057      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x478>
 8002fa6:	e04f      	b.n	8003048 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe faaa 	bl	800150c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe faa6 	bl	800150c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e03d      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4ac>
 8002fda:	e035      	b.n	8003048 <HAL_RCC_OscConfig+0x538>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x544>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d028      	beq.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d121      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d11a      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800301c:	4293      	cmp	r3, r2
 800301e:	d111      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0d0      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d910      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 020f 	bic.w	r2, r3, #15
 8003086:	4965      	ldr	r1, [pc, #404]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b8      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	494d      	ldr	r1, [pc, #308]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d040      	beq.n	800317c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07f      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e073      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06b      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4936      	ldr	r1, [pc, #216]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7fe f9de 	bl	800150c <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe f9da 	bl	800150c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e053      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d210      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 020f 	bic.w	r2, r3, #15
 8003192:	4922      	ldr	r1, [pc, #136]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e032      	b.n	8003212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	490e      	ldr	r1, [pc, #56]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ea:	f000 f821 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	490a      	ldr	r1, [pc, #40]	; (8003224 <HAL_RCC_ClockConfig+0x1cc>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1d0>)
 8003204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1d4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe f93a 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023c00 	.word	0x40023c00
 8003220:	40023800 	.word	0x40023800
 8003224:	08006e54 	.word	0x08006e54
 8003228:	20000000 	.word	0x20000000
 800322c:	20000004 	.word	0x20000004

08003230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003234:	b094      	sub	sp, #80	; 0x50
 8003236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	647b      	str	r3, [r7, #68]	; 0x44
 800323c:	2300      	movs	r3, #0
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	2300      	movs	r3, #0
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003248:	4b79      	ldr	r3, [pc, #484]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d00d      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x40>
 8003254:	2b08      	cmp	r3, #8
 8003256:	f200 80e1 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x1ec>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x34>
 800325e:	2b04      	cmp	r3, #4
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x3a>
 8003262:	e0db      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_GetSysClockFreq+0x204>)
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003268:	e0db      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b73      	ldr	r3, [pc, #460]	; (8003438 <HAL_RCC_GetSysClockFreq+0x208>)
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800326e:	e0d8      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800327a:	4b6d      	ldr	r3, [pc, #436]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d063      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	2200      	movs	r2, #0
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
 800329a:	2300      	movs	r3, #0
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
 800329e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032a2:	4622      	mov	r2, r4
 80032a4:	462b      	mov	r3, r5
 80032a6:	f04f 0000 	mov.w	r0, #0
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b4:	0150      	lsls	r0, r2, #5
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4621      	mov	r1, r4
 80032bc:	1a51      	subs	r1, r2, r1
 80032be:	6139      	str	r1, [r7, #16]
 80032c0:	4629      	mov	r1, r5
 80032c2:	eb63 0301 	sbc.w	r3, r3, r1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032d4:	4659      	mov	r1, fp
 80032d6:	018b      	lsls	r3, r1, #6
 80032d8:	4651      	mov	r1, sl
 80032da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032de:	4651      	mov	r1, sl
 80032e0:	018a      	lsls	r2, r1, #6
 80032e2:	4651      	mov	r1, sl
 80032e4:	ebb2 0801 	subs.w	r8, r2, r1
 80032e8:	4659      	mov	r1, fp
 80032ea:	eb63 0901 	sbc.w	r9, r3, r1
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003302:	4690      	mov	r8, r2
 8003304:	4699      	mov	r9, r3
 8003306:	4623      	mov	r3, r4
 8003308:	eb18 0303 	adds.w	r3, r8, r3
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	462b      	mov	r3, r5
 8003310:	eb49 0303 	adc.w	r3, r9, r3
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003322:	4629      	mov	r1, r5
 8003324:	024b      	lsls	r3, r1, #9
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800332c:	4621      	mov	r1, r4
 800332e:	024a      	lsls	r2, r1, #9
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
 800333a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800333c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003340:	f7fc ffbe 	bl	80002c0 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	e058      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b38      	ldr	r3, [pc, #224]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	2200      	movs	r2, #0
 8003356:	4618      	mov	r0, r3
 8003358:	4611      	mov	r1, r2
 800335a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003368:	4642      	mov	r2, r8
 800336a:	464b      	mov	r3, r9
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	0159      	lsls	r1, r3, #5
 8003376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800337a:	0150      	lsls	r0, r2, #5
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4641      	mov	r1, r8
 8003382:	ebb2 0a01 	subs.w	sl, r2, r1
 8003386:	4649      	mov	r1, r9
 8003388:	eb63 0b01 	sbc.w	fp, r3, r1
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800339c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033a0:	ebb2 040a 	subs.w	r4, r2, sl
 80033a4:	eb63 050b 	sbc.w	r5, r3, fp
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	00eb      	lsls	r3, r5, #3
 80033b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b6:	00e2      	lsls	r2, r4, #3
 80033b8:	4614      	mov	r4, r2
 80033ba:	461d      	mov	r5, r3
 80033bc:	4643      	mov	r3, r8
 80033be:	18e3      	adds	r3, r4, r3
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	464b      	mov	r3, r9
 80033c4:	eb45 0303 	adc.w	r3, r5, r3
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033d6:	4629      	mov	r1, r5
 80033d8:	028b      	lsls	r3, r1, #10
 80033da:	4621      	mov	r1, r4
 80033dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e0:	4621      	mov	r1, r4
 80033e2:	028a      	lsls	r2, r1, #10
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	61fa      	str	r2, [r7, #28]
 80033f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f4:	f7fc ff64 	bl	80002c0 <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4613      	mov	r3, r2
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	3301      	adds	r3, #1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetSysClockFreq+0x204>)
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003424:	4618      	mov	r0, r3
 8003426:	3750      	adds	r7, #80	; 0x50
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400
 8003438:	007a1200 	.word	0x007a1200

0800343c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_GetHCLKFreq+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000000 	.word	0x20000000

08003454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003458:	f7ff fff0 	bl	800343c <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0a9b      	lsrs	r3, r3, #10
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	08006e64 	.word	0x08006e64

0800347c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003480:	f7ff ffdc 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0b5b      	lsrs	r3, r3, #13
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4903      	ldr	r1, [pc, #12]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	08006e64 	.word	0x08006e64

080034a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034cc:	4b69      	ldr	r3, [pc, #420]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a68      	ldr	r2, [pc, #416]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	4964      	ldr	r1, [pc, #400]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fe:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	4959      	ldr	r1, [pc, #356]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800353a:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003540:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	494a      	ldr	r1, [pc, #296]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 808b 	beq.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003592:	6413      	str	r3, [r2, #64]	; 0x40
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fd ffae 	bl	800150c <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b4:	f7fd ffaa 	bl	800150c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e357      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d035      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d02e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003610:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d114      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd ff72 	bl	800150c <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fd ff6e 	bl	800150c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e319      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365a:	d111      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800366a:	400b      	ands	r3, r1
 800366c:	4901      	ldr	r1, [pc, #4]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
 8003672:	e00b      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	0ffffcff 	.word	0x0ffffcff
 8003680:	4baa      	ldr	r3, [pc, #680]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4aa9      	ldr	r2, [pc, #676]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003686:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800368a:	6093      	str	r3, [r2, #8]
 800368c:	4ba7      	ldr	r3, [pc, #668]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	49a4      	ldr	r1, [pc, #656]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	4313      	orrs	r3, r2
 800369c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036aa:	4ba0      	ldr	r3, [pc, #640]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	4a9e      	ldr	r2, [pc, #632]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ba:	4b9c      	ldr	r3, [pc, #624]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	4999      	ldr	r1, [pc, #612]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d8:	4b94      	ldr	r3, [pc, #592]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e6:	4991      	ldr	r1, [pc, #580]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036fa:	4b8c      	ldr	r3, [pc, #560]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003708:	4988      	ldr	r1, [pc, #544]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800371c:	4b83      	ldr	r3, [pc, #524]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372a:	4980      	ldr	r1, [pc, #512]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800373e:	4b7b      	ldr	r3, [pc, #492]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4977      	ldr	r1, [pc, #476]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003760:	4b72      	ldr	r3, [pc, #456]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	496f      	ldr	r1, [pc, #444]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003782:	4b6a      	ldr	r3, [pc, #424]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f023 020c 	bic.w	r2, r3, #12
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	4966      	ldr	r1, [pc, #408]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a4:	4b61      	ldr	r3, [pc, #388]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	495e      	ldr	r1, [pc, #376]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c6:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	4955      	ldr	r1, [pc, #340]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	494d      	ldr	r1, [pc, #308]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800380a:	4b48      	ldr	r3, [pc, #288]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	4944      	ldr	r1, [pc, #272]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800382c:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	493c      	ldr	r1, [pc, #240]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	4933      	ldr	r1, [pc, #204]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003870:	4b2e      	ldr	r3, [pc, #184]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387e:	492b      	ldr	r1, [pc, #172]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a0:	4922      	ldr	r1, [pc, #136]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	4912      	ldr	r1, [pc, #72]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003904:	4909      	ldr	r1, [pc, #36]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d006      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80d9 	beq.w	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a01      	ldr	r2, [pc, #4]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800392a:	e001      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800392c:	40023800 	.word	0x40023800
 8003930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003932:	f7fd fdeb 	bl	800150c <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003938:	e008      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800393a:	f7fd fde7 	bl	800150c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b64      	cmp	r3, #100	; 0x64
 8003946:	d901      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e194      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800394c:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d021      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800396c:	4b64      	ldr	r3, [pc, #400]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003980:	0e1b      	lsrs	r3, r3, #24
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	019a      	lsls	r2, r3, #6
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	071b      	lsls	r3, r3, #28
 80039a0:	4957      	ldr	r1, [pc, #348]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02e      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d2:	d129      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039d4:	4b4a      	ldr	r3, [pc, #296]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	0f1b      	lsrs	r3, r3, #28
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	019a      	lsls	r2, r3, #6
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	071b      	lsls	r3, r3, #28
 8003a08:	493d      	ldr	r1, [pc, #244]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a10:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a16:	f023 021f 	bic.w	r2, r3, #31
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4937      	ldr	r1, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01d      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3a:	0e1b      	lsrs	r3, r3, #24
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a48:	0f1b      	lsrs	r3, r3, #28
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	019a      	lsls	r2, r3, #6
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	071b      	lsls	r3, r3, #28
 8003a68:	4925      	ldr	r1, [pc, #148]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d011      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	019a      	lsls	r2, r3, #6
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	071b      	lsls	r3, r3, #28
 8003a98:	4919      	ldr	r1, [pc, #100]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aac:	f7fd fd2e 	bl	800150c <HAL_GetTick>
 8003ab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ab4:	f7fd fd2a 	bl	800150c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0d7      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f040 80cd 	bne.w	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae6:	f7fd fd11 	bl	800150c <HAL_GetTick>
 8003aea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aee:	f7fd fd0d 	bl	800150c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d903      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0ba      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b04:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b10:	d0ed      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d12a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b3a:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b48:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	0f1b      	lsrs	r3, r3, #28
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	019a      	lsls	r2, r3, #6
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	4944      	ldr	r1, [pc, #272]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	3b01      	subs	r3, #1
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	493d      	ldr	r1, [pc, #244]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d022      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba4:	d11d      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	0e1b      	lsrs	r3, r3, #24
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	0f1b      	lsrs	r3, r3, #28
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	019a      	lsls	r2, r3, #6
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	071b      	lsls	r3, r3, #28
 8003bda:	4929      	ldr	r1, [pc, #164]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bee:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	0e1b      	lsrs	r3, r3, #24
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	019a      	lsls	r2, r3, #6
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	431a      	orrs	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	071b      	lsls	r3, r3, #28
 8003c22:	4917      	ldr	r1, [pc, #92]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4911      	ldr	r1, [pc, #68]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c40:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fc5e 	bl	800150c <HAL_GetTick>
 8003c50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c54:	f7fd fc5a 	bl	800150c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e007      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c72:	d1ef      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e040      	b.n	8003d18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fc ffde 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	; 0x24
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fc5a 	bl	800457c <UART_SetConfig>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e022      	b.n	8003d18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 feb2 	bl	8004a44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 ff39 	bl	8004b88 <UART_CheckIdleState>
 8003d16:	4603      	mov	r3, r0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d171      	bne.n	8003e1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_UART_Transmit+0x24>
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e06a      	b.n	8003e1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2221      	movs	r2, #33	; 0x21
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d56:	f7fd fbd9 	bl	800150c <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	88fa      	ldrh	r2, [r7, #6]
 8003d68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d74:	d108      	bne.n	8003d88 <HAL_UART_Transmit+0x68>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d104      	bne.n	8003d88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	e003      	b.n	8003d90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d90:	e02c      	b.n	8003dec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 ff2a 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e038      	b.n	8003e1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	e007      	b.n	8003dda <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1cc      	bne.n	8003d92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2140      	movs	r1, #64	; 0x40
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fef7 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e005      	b.n	8003e1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b08a      	sub	sp, #40	; 0x28
 8003e2a:	af02      	add	r7, sp, #8
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 80b1 	bne.w	8003fa4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_UART_Receive+0x28>
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0a9      	b.n	8003fa6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2222      	movs	r2, #34	; 0x22
 8003e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e68:	f7fd fb50 	bl	800150c <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	d10e      	bne.n	8003ea6 <HAL_UART_Receive+0x80>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <HAL_UART_Receive+0x76>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e9a:	e02d      	b.n	8003ef8 <HAL_UART_Receive+0xd2>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	22ff      	movs	r2, #255	; 0xff
 8003ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ea4:	e028      	b.n	8003ef8 <HAL_UART_Receive+0xd2>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10d      	bne.n	8003eca <HAL_UART_Receive+0xa4>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Receive+0x9a>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ebe:	e01b      	b.n	8003ef8 <HAL_UART_Receive+0xd2>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	227f      	movs	r2, #127	; 0x7f
 8003ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec8:	e016      	b.n	8003ef8 <HAL_UART_Receive+0xd2>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_UART_Receive+0xca>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <HAL_UART_Receive+0xc0>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	227f      	movs	r2, #127	; 0x7f
 8003ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee4:	e008      	b.n	8003ef8 <HAL_UART_Receive+0xd2>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	223f      	movs	r2, #63	; 0x3f
 8003eea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eee:	e003      	b.n	8003ef8 <HAL_UART_Receive+0xd2>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003efe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d108      	bne.n	8003f1c <HAL_UART_Receive+0xf6>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e003      	b.n	8003f24 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f24:	e032      	b.n	8003f8c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2120      	movs	r1, #32
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fe60 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e032      	b.n	8003fa6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10c      	bne.n	8003f60 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	8a7b      	ldrh	r3, [r7, #18]
 8003f50:	4013      	ands	r3, r2
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e00c      	b.n	8003f7a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	8a7b      	ldrh	r3, [r7, #18]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3301      	adds	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1c6      	bne.n	8003f26 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b0ba      	sub	sp, #232	; 0xe8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003fda:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fde:	4013      	ands	r3, r2
 8003fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d115      	bne.n	8004018 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00f      	beq.n	8004018 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8297 	beq.w	800453c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
      }
      return;
 8004016:	e291      	b.n	800453c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8117 	beq.w	8004250 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800402e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004032:	4b85      	ldr	r3, [pc, #532]	; (8004248 <HAL_UART_IRQHandler+0x298>)
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 810a 	beq.w	8004250 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <HAL_UART_IRQHandler+0xbc>
 8004048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d011      	beq.n	800409c <HAL_UART_IRQHandler+0xec>
 8004078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2202      	movs	r2, #2
 800408a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	f043 0204 	orr.w	r2, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d011      	beq.n	80040cc <HAL_UART_IRQHandler+0x11c>
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2204      	movs	r2, #4
 80040ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c2:	f043 0202 	orr.w	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2208      	movs	r2, #8
 80040f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fe:	f043 0208 	orr.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004110:	2b00      	cmp	r3, #0
 8004112:	d012      	beq.n	800413a <HAL_UART_IRQHandler+0x18a>
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00c      	beq.n	800413a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 81fd 	beq.w	8004540 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d005      	beq.n	8004192 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800418a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800418e:	2b00      	cmp	r3, #0
 8004190:	d04f      	beq.n	8004232 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 febc 	bl	8004f10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d141      	bne.n	800422a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3308      	adds	r3, #8
 80041ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1d9      	bne.n	80041a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d013      	beq.n	8004222 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fe:	4a13      	ldr	r2, [pc, #76]	; (800424c <HAL_UART_IRQHandler+0x29c>)
 8004200:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd fbe0 	bl	80019cc <HAL_DMA_Abort_IT>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800421c:	4610      	mov	r0, r2
 800421e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	e00f      	b.n	8004242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9a0 	bl	8004568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	e00b      	b.n	8004242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f99c 	bl	8004568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	e007      	b.n	8004242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f998 	bl	8004568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004240:	e17e      	b.n	8004540 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004242:	bf00      	nop
    return;
 8004244:	e17c      	b.n	8004540 <HAL_UART_IRQHandler+0x590>
 8004246:	bf00      	nop
 8004248:	04000120 	.word	0x04000120
 800424c:	08004fd9 	.word	0x08004fd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	2b01      	cmp	r3, #1
 8004256:	f040 814c 	bne.w	80044f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8145 	beq.w	80044f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 813e 	beq.w	80044f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	f040 80b6 	bne.w	80043fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800429a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8150 	beq.w	8004544 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ae:	429a      	cmp	r2, r3
 80042b0:	f080 8148 	bcs.w	8004544 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c8:	f000 8086 	beq.w	80043d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800430e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1da      	bne.n	80042cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800433a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800433e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800434c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e1      	bne.n	8004316 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004376:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800437c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a8:	f023 0310 	bic.w	r3, r3, #16
 80043ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80043bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e4      	bne.n	8004398 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fa8a 	bl	80018ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f001 fc2a 	bl	8005c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043f8:	e0a4      	b.n	8004544 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004406:	b29b      	uxth	r3, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8096 	beq.w	8004548 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800441c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8091 	beq.w	8004548 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800443a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004448:	647b      	str	r3, [r7, #68]	; 0x44
 800444a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800444e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e4      	bne.n	8004426 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	623b      	str	r3, [r7, #32]
   return(result);
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004480:	633a      	str	r2, [r7, #48]	; 0x30
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e3      	bne.n	800445c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 0310 	bic.w	r3, r3, #16
 80044bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	69b9      	ldr	r1, [r7, #24]
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	617b      	str	r3, [r7, #20]
   return(result);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e4      	bne.n	80044a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 fbae 	bl	8005c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044f0:	e02a      	b.n	8004548 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00e      	beq.n	800451c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01c      	beq.n	800454c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
    }
    return;
 800451a:	e017      	b.n	800454c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800451c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d012      	beq.n	800454e <HAL_UART_IRQHandler+0x59e>
 8004528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fd65 	bl	8005004 <UART_EndTransmit_IT>
    return;
 800453a:	e008      	b.n	800454e <HAL_UART_IRQHandler+0x59e>
      return;
 800453c:	bf00      	nop
 800453e:	e006      	b.n	800454e <HAL_UART_IRQHandler+0x59e>
    return;
 8004540:	bf00      	nop
 8004542:	e004      	b.n	800454e <HAL_UART_IRQHandler+0x59e>
      return;
 8004544:	bf00      	nop
 8004546:	e002      	b.n	800454e <HAL_UART_IRQHandler+0x59e>
      return;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <HAL_UART_IRQHandler+0x59e>
    return;
 800454c:	bf00      	nop
  }

}
 800454e:	37e8      	adds	r7, #232	; 0xe8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4ba6      	ldr	r3, [pc, #664]	; (8004840 <UART_SetConfig+0x2c4>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a94      	ldr	r2, [pc, #592]	; (8004844 <UART_SetConfig+0x2c8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d120      	bne.n	800463a <UART_SetConfig+0xbe>
 80045f8:	4b93      	ldr	r3, [pc, #588]	; (8004848 <UART_SetConfig+0x2cc>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d816      	bhi.n	8004634 <UART_SetConfig+0xb8>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <UART_SetConfig+0x90>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	0800461d 	.word	0x0800461d
 8004610:	08004629 	.word	0x08004629
 8004614:	08004623 	.word	0x08004623
 8004618:	0800462f 	.word	0x0800462f
 800461c:	2301      	movs	r3, #1
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e150      	b.n	80048c4 <UART_SetConfig+0x348>
 8004622:	2302      	movs	r3, #2
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e14d      	b.n	80048c4 <UART_SetConfig+0x348>
 8004628:	2304      	movs	r3, #4
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e14a      	b.n	80048c4 <UART_SetConfig+0x348>
 800462e:	2308      	movs	r3, #8
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e147      	b.n	80048c4 <UART_SetConfig+0x348>
 8004634:	2310      	movs	r3, #16
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e144      	b.n	80048c4 <UART_SetConfig+0x348>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a83      	ldr	r2, [pc, #524]	; (800484c <UART_SetConfig+0x2d0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d132      	bne.n	80046aa <UART_SetConfig+0x12e>
 8004644:	4b80      	ldr	r3, [pc, #512]	; (8004848 <UART_SetConfig+0x2cc>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d828      	bhi.n	80046a4 <UART_SetConfig+0x128>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xdc>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800468d 	.word	0x0800468d
 800465c:	080046a5 	.word	0x080046a5
 8004660:	080046a5 	.word	0x080046a5
 8004664:	080046a5 	.word	0x080046a5
 8004668:	08004699 	.word	0x08004699
 800466c:	080046a5 	.word	0x080046a5
 8004670:	080046a5 	.word	0x080046a5
 8004674:	080046a5 	.word	0x080046a5
 8004678:	08004693 	.word	0x08004693
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046a5 	.word	0x080046a5
 8004688:	0800469f 	.word	0x0800469f
 800468c:	2300      	movs	r3, #0
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e118      	b.n	80048c4 <UART_SetConfig+0x348>
 8004692:	2302      	movs	r3, #2
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e115      	b.n	80048c4 <UART_SetConfig+0x348>
 8004698:	2304      	movs	r3, #4
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e112      	b.n	80048c4 <UART_SetConfig+0x348>
 800469e:	2308      	movs	r3, #8
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e10f      	b.n	80048c4 <UART_SetConfig+0x348>
 80046a4:	2310      	movs	r3, #16
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e10c      	b.n	80048c4 <UART_SetConfig+0x348>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a68      	ldr	r2, [pc, #416]	; (8004850 <UART_SetConfig+0x2d4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d120      	bne.n	80046f6 <UART_SetConfig+0x17a>
 80046b4:	4b64      	ldr	r3, [pc, #400]	; (8004848 <UART_SetConfig+0x2cc>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046be:	2b30      	cmp	r3, #48	; 0x30
 80046c0:	d013      	beq.n	80046ea <UART_SetConfig+0x16e>
 80046c2:	2b30      	cmp	r3, #48	; 0x30
 80046c4:	d814      	bhi.n	80046f0 <UART_SetConfig+0x174>
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d009      	beq.n	80046de <UART_SetConfig+0x162>
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d810      	bhi.n	80046f0 <UART_SetConfig+0x174>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <UART_SetConfig+0x15c>
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d006      	beq.n	80046e4 <UART_SetConfig+0x168>
 80046d6:	e00b      	b.n	80046f0 <UART_SetConfig+0x174>
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e0f2      	b.n	80048c4 <UART_SetConfig+0x348>
 80046de:	2302      	movs	r3, #2
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e0ef      	b.n	80048c4 <UART_SetConfig+0x348>
 80046e4:	2304      	movs	r3, #4
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e0ec      	b.n	80048c4 <UART_SetConfig+0x348>
 80046ea:	2308      	movs	r3, #8
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e0e9      	b.n	80048c4 <UART_SetConfig+0x348>
 80046f0:	2310      	movs	r3, #16
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e0e6      	b.n	80048c4 <UART_SetConfig+0x348>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a56      	ldr	r2, [pc, #344]	; (8004854 <UART_SetConfig+0x2d8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d120      	bne.n	8004742 <UART_SetConfig+0x1c6>
 8004700:	4b51      	ldr	r3, [pc, #324]	; (8004848 <UART_SetConfig+0x2cc>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800470a:	2bc0      	cmp	r3, #192	; 0xc0
 800470c:	d013      	beq.n	8004736 <UART_SetConfig+0x1ba>
 800470e:	2bc0      	cmp	r3, #192	; 0xc0
 8004710:	d814      	bhi.n	800473c <UART_SetConfig+0x1c0>
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d009      	beq.n	800472a <UART_SetConfig+0x1ae>
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d810      	bhi.n	800473c <UART_SetConfig+0x1c0>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <UART_SetConfig+0x1a8>
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d006      	beq.n	8004730 <UART_SetConfig+0x1b4>
 8004722:	e00b      	b.n	800473c <UART_SetConfig+0x1c0>
 8004724:	2300      	movs	r3, #0
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e0cc      	b.n	80048c4 <UART_SetConfig+0x348>
 800472a:	2302      	movs	r3, #2
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e0c9      	b.n	80048c4 <UART_SetConfig+0x348>
 8004730:	2304      	movs	r3, #4
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e0c6      	b.n	80048c4 <UART_SetConfig+0x348>
 8004736:	2308      	movs	r3, #8
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e0c3      	b.n	80048c4 <UART_SetConfig+0x348>
 800473c:	2310      	movs	r3, #16
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e0c0      	b.n	80048c4 <UART_SetConfig+0x348>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a44      	ldr	r2, [pc, #272]	; (8004858 <UART_SetConfig+0x2dc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d125      	bne.n	8004798 <UART_SetConfig+0x21c>
 800474c:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <UART_SetConfig+0x2cc>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475a:	d017      	beq.n	800478c <UART_SetConfig+0x210>
 800475c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004760:	d817      	bhi.n	8004792 <UART_SetConfig+0x216>
 8004762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004766:	d00b      	beq.n	8004780 <UART_SetConfig+0x204>
 8004768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476c:	d811      	bhi.n	8004792 <UART_SetConfig+0x216>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <UART_SetConfig+0x1fe>
 8004772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004776:	d006      	beq.n	8004786 <UART_SetConfig+0x20a>
 8004778:	e00b      	b.n	8004792 <UART_SetConfig+0x216>
 800477a:	2300      	movs	r3, #0
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e0a1      	b.n	80048c4 <UART_SetConfig+0x348>
 8004780:	2302      	movs	r3, #2
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e09e      	b.n	80048c4 <UART_SetConfig+0x348>
 8004786:	2304      	movs	r3, #4
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e09b      	b.n	80048c4 <UART_SetConfig+0x348>
 800478c:	2308      	movs	r3, #8
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e098      	b.n	80048c4 <UART_SetConfig+0x348>
 8004792:	2310      	movs	r3, #16
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e095      	b.n	80048c4 <UART_SetConfig+0x348>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2f      	ldr	r2, [pc, #188]	; (800485c <UART_SetConfig+0x2e0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d125      	bne.n	80047ee <UART_SetConfig+0x272>
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <UART_SetConfig+0x2cc>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047b0:	d017      	beq.n	80047e2 <UART_SetConfig+0x266>
 80047b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047b6:	d817      	bhi.n	80047e8 <UART_SetConfig+0x26c>
 80047b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047bc:	d00b      	beq.n	80047d6 <UART_SetConfig+0x25a>
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c2:	d811      	bhi.n	80047e8 <UART_SetConfig+0x26c>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <UART_SetConfig+0x254>
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047cc:	d006      	beq.n	80047dc <UART_SetConfig+0x260>
 80047ce:	e00b      	b.n	80047e8 <UART_SetConfig+0x26c>
 80047d0:	2301      	movs	r3, #1
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e076      	b.n	80048c4 <UART_SetConfig+0x348>
 80047d6:	2302      	movs	r3, #2
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e073      	b.n	80048c4 <UART_SetConfig+0x348>
 80047dc:	2304      	movs	r3, #4
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e070      	b.n	80048c4 <UART_SetConfig+0x348>
 80047e2:	2308      	movs	r3, #8
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e06d      	b.n	80048c4 <UART_SetConfig+0x348>
 80047e8:	2310      	movs	r3, #16
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e06a      	b.n	80048c4 <UART_SetConfig+0x348>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <UART_SetConfig+0x2e4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d138      	bne.n	800486a <UART_SetConfig+0x2ee>
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <UART_SetConfig+0x2cc>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004802:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004806:	d017      	beq.n	8004838 <UART_SetConfig+0x2bc>
 8004808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800480c:	d82a      	bhi.n	8004864 <UART_SetConfig+0x2e8>
 800480e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004812:	d00b      	beq.n	800482c <UART_SetConfig+0x2b0>
 8004814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004818:	d824      	bhi.n	8004864 <UART_SetConfig+0x2e8>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <UART_SetConfig+0x2aa>
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004822:	d006      	beq.n	8004832 <UART_SetConfig+0x2b6>
 8004824:	e01e      	b.n	8004864 <UART_SetConfig+0x2e8>
 8004826:	2300      	movs	r3, #0
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e04b      	b.n	80048c4 <UART_SetConfig+0x348>
 800482c:	2302      	movs	r3, #2
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e048      	b.n	80048c4 <UART_SetConfig+0x348>
 8004832:	2304      	movs	r3, #4
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e045      	b.n	80048c4 <UART_SetConfig+0x348>
 8004838:	2308      	movs	r3, #8
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e042      	b.n	80048c4 <UART_SetConfig+0x348>
 800483e:	bf00      	nop
 8004840:	efff69f3 	.word	0xefff69f3
 8004844:	40011000 	.word	0x40011000
 8004848:	40023800 	.word	0x40023800
 800484c:	40004400 	.word	0x40004400
 8004850:	40004800 	.word	0x40004800
 8004854:	40004c00 	.word	0x40004c00
 8004858:	40005000 	.word	0x40005000
 800485c:	40011400 	.word	0x40011400
 8004860:	40007800 	.word	0x40007800
 8004864:	2310      	movs	r3, #16
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e02c      	b.n	80048c4 <UART_SetConfig+0x348>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a72      	ldr	r2, [pc, #456]	; (8004a38 <UART_SetConfig+0x4bc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d125      	bne.n	80048c0 <UART_SetConfig+0x344>
 8004874:	4b71      	ldr	r3, [pc, #452]	; (8004a3c <UART_SetConfig+0x4c0>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800487e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004882:	d017      	beq.n	80048b4 <UART_SetConfig+0x338>
 8004884:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004888:	d817      	bhi.n	80048ba <UART_SetConfig+0x33e>
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d00b      	beq.n	80048a8 <UART_SetConfig+0x32c>
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	d811      	bhi.n	80048ba <UART_SetConfig+0x33e>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <UART_SetConfig+0x326>
 800489a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800489e:	d006      	beq.n	80048ae <UART_SetConfig+0x332>
 80048a0:	e00b      	b.n	80048ba <UART_SetConfig+0x33e>
 80048a2:	2300      	movs	r3, #0
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e00d      	b.n	80048c4 <UART_SetConfig+0x348>
 80048a8:	2302      	movs	r3, #2
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e00a      	b.n	80048c4 <UART_SetConfig+0x348>
 80048ae:	2304      	movs	r3, #4
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e007      	b.n	80048c4 <UART_SetConfig+0x348>
 80048b4:	2308      	movs	r3, #8
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e004      	b.n	80048c4 <UART_SetConfig+0x348>
 80048ba:	2310      	movs	r3, #16
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e001      	b.n	80048c4 <UART_SetConfig+0x348>
 80048c0:	2310      	movs	r3, #16
 80048c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048cc:	d15b      	bne.n	8004986 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80048ce:	7ffb      	ldrb	r3, [r7, #31]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d828      	bhi.n	8004926 <UART_SetConfig+0x3aa>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x360>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fda8 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e013      	b.n	8004930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fdb8 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 800490c:	61b8      	str	r0, [r7, #24]
        break;
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b4b      	ldr	r3, [pc, #300]	; (8004a40 <UART_SetConfig+0x4c4>)
 8004912:	61bb      	str	r3, [r7, #24]
        break;
 8004914:	e00c      	b.n	8004930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fc8b 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 800491a:	61b8      	str	r0, [r7, #24]
        break;
 800491c:	e008      	b.n	8004930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e004      	b.n	8004930 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	77bb      	strb	r3, [r7, #30]
        break;
 800492e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d074      	beq.n	8004a20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	005a      	lsls	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	441a      	add	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d916      	bls.n	8004980 <UART_SetConfig+0x404>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d212      	bcs.n	8004980 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f023 030f 	bic.w	r3, r3, #15
 8004962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	b29b      	uxth	r3, r3
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	b29a      	uxth	r2, r3
 8004970:	89fb      	ldrh	r3, [r7, #14]
 8004972:	4313      	orrs	r3, r2
 8004974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	89fa      	ldrh	r2, [r7, #14]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	e04f      	b.n	8004a20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	77bb      	strb	r3, [r7, #30]
 8004984:	e04c      	b.n	8004a20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d828      	bhi.n	80049de <UART_SetConfig+0x462>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <UART_SetConfig+0x418>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049c1 	.word	0x080049c1
 800499c:	080049c9 	.word	0x080049c9
 80049a0:	080049df 	.word	0x080049df
 80049a4:	080049cf 	.word	0x080049cf
 80049a8:	080049df 	.word	0x080049df
 80049ac:	080049df 	.word	0x080049df
 80049b0:	080049df 	.word	0x080049df
 80049b4:	080049d7 	.word	0x080049d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7fe fd4c 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 80049bc:	61b8      	str	r0, [r7, #24]
        break;
 80049be:	e013      	b.n	80049e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7fe fd5c 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 80049c4:	61b8      	str	r0, [r7, #24]
        break;
 80049c6:	e00f      	b.n	80049e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <UART_SetConfig+0x4c4>)
 80049ca:	61bb      	str	r3, [r7, #24]
        break;
 80049cc:	e00c      	b.n	80049e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ce:	f7fe fc2f 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80049d2:	61b8      	str	r0, [r7, #24]
        break;
 80049d4:	e008      	b.n	80049e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049da:	61bb      	str	r3, [r7, #24]
        break;
 80049dc:	e004      	b.n	80049e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	77bb      	strb	r3, [r7, #30]
        break;
 80049e6:	bf00      	nop
    }

    if (pclk != 0U)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	085a      	lsrs	r2, r3, #1
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b0f      	cmp	r3, #15
 8004a06:	d909      	bls.n	8004a1c <UART_SetConfig+0x4a0>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0e:	d205      	bcs.n	8004a1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e001      	b.n	8004a20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40007c00 	.word	0x40007c00
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	00f42400 	.word	0x00f42400

08004a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01a      	beq.n	8004b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b42:	d10a      	bne.n	8004b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b98:	f7fc fcb8 	bl	800150c <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d10e      	bne.n	8004bca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f81b 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e011      	b.n	8004bee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b09c      	sub	sp, #112	; 0x70
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	e0a7      	b.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	f000 80a3 	beq.w	8004d58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fc fc7b 	bl	800150c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d13f      	bne.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	663b      	str	r3, [r7, #96]	; 0x60
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e068      	b.n	8004d7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d050      	beq.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc4:	d148      	bne.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e6      	bne.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3308      	adds	r3, #8
 8004d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	613b      	str	r3, [r7, #16]
   return(result);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d22:	623a      	str	r2, [r7, #32]
 8004d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	69f9      	ldr	r1, [r7, #28]
 8004d28:	6a3a      	ldr	r2, [r7, #32]
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e010      	b.n	8004d7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4013      	ands	r3, r2
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	f43f af48 	beq.w	8004c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3770      	adds	r7, #112	; 0x70
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b097      	sub	sp, #92	; 0x5c
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db6:	d10e      	bne.n	8004dd6 <UART_Start_Receive_IT+0x52>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <UART_Start_Receive_IT+0x48>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dca:	e02d      	b.n	8004e28 <UART_Start_Receive_IT+0xa4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	22ff      	movs	r2, #255	; 0xff
 8004dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd4:	e028      	b.n	8004e28 <UART_Start_Receive_IT+0xa4>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <UART_Start_Receive_IT+0x76>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <UART_Start_Receive_IT+0x6c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dee:	e01b      	b.n	8004e28 <UART_Start_Receive_IT+0xa4>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	227f      	movs	r2, #127	; 0x7f
 8004df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004df8:	e016      	b.n	8004e28 <UART_Start_Receive_IT+0xa4>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e02:	d10d      	bne.n	8004e20 <UART_Start_Receive_IT+0x9c>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <UART_Start_Receive_IT+0x92>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	227f      	movs	r2, #127	; 0x7f
 8004e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e14:	e008      	b.n	8004e28 <UART_Start_Receive_IT+0xa4>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	223f      	movs	r2, #63	; 0x3f
 8004e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e1e:	e003      	b.n	8004e28 <UART_Start_Receive_IT+0xa4>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2222      	movs	r2, #34	; 0x22
 8004e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e58:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e74:	d107      	bne.n	8004e86 <UART_Start_Receive_IT+0x102>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <UART_Start_Receive_IT+0x184>)
 8004e82:	669a      	str	r2, [r3, #104]	; 0x68
 8004e84:	e002      	b.n	8004e8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <UART_Start_Receive_IT+0x188>)
 8004e8a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d019      	beq.n	8004ec8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e6      	bne.n	8004e94 <UART_Start_Receive_IT+0x110>
 8004ec6:	e018      	b.n	8004efa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f043 0320 	orr.w	r3, r3, #32
 8004edc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee6:	623b      	str	r3, [r7, #32]
 8004ee8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	69f9      	ldr	r1, [r7, #28]
 8004eec:	6a3a      	ldr	r2, [r7, #32]
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e6      	bne.n	8004ec8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	375c      	adds	r7, #92	; 0x5c
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	080051bf 	.word	0x080051bf
 8004f0c:	08005059 	.word	0x08005059

08004f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b095      	sub	sp, #84	; 0x54
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f36:	643b      	str	r3, [r7, #64]	; 0x40
 8004f38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e6      	bne.n	8004f18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e5      	bne.n	8004f4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d118      	bne.n	8004fb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 0310 	bic.w	r3, r3, #16
 8004f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6979      	ldr	r1, [r7, #20]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e6      	bne.n	8004f86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fcc:	bf00      	nop
 8004fce:	3754      	adds	r7, #84	; 0x54
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff fab6 	bl	8004568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	60bb      	str	r3, [r7, #8]
   return(result);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	613b      	str	r3, [r7, #16]
   return(result);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e6      	bne.n	800500c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fa82 	bl	8004554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005050:	bf00      	nop
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b096      	sub	sp, #88	; 0x58
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005066:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005070:	2b22      	cmp	r3, #34	; 0x22
 8005072:	f040 8098 	bne.w	80051a6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005080:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005084:	b2d9      	uxtb	r1, r3
 8005086:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800508a:	b2da      	uxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005090:	400a      	ands	r2, r1
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d17b      	bne.n	80051b6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050d2:	653b      	str	r3, [r7, #80]	; 0x50
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
 80050de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e6      	bne.n	80050be <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005110:	633a      	str	r2, [r7, #48]	; 0x30
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e5      	bne.n	80050f0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513c:	2b01      	cmp	r3, #1
 800513e:	d12e      	bne.n	800519e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	60fb      	str	r3, [r7, #12]
   return(result);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0310 	bic.w	r3, r3, #16
 800515a:	64bb      	str	r3, [r7, #72]	; 0x48
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	617b      	str	r3, [r7, #20]
   return(result);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b10      	cmp	r3, #16
 8005184:	d103      	bne.n	800518e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2210      	movs	r2, #16
 800518c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fd58 	bl	8005c4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800519c:	e00b      	b.n	80051b6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fd28 	bl	8005bf4 <HAL_UART_RxCpltCallback>
}
 80051a4:	e007      	b.n	80051b6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0208 	orr.w	r2, r2, #8
 80051b4:	619a      	str	r2, [r3, #24]
}
 80051b6:	bf00      	nop
 80051b8:	3758      	adds	r7, #88	; 0x58
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b096      	sub	sp, #88	; 0x58
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d6:	2b22      	cmp	r3, #34	; 0x22
 80051d8:	f040 8098 	bne.w	800530c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80051ec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80051f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d17b      	bne.n	800531c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005242:	643b      	str	r3, [r7, #64]	; 0x40
 8005244:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e6      	bne.n	8005224 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	61fb      	str	r3, [r7, #28]
   return(result);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	64bb      	str	r3, [r7, #72]	; 0x48
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e5      	bne.n	8005256 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d12e      	bne.n	8005304 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f023 0310 	bic.w	r3, r3, #16
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6979      	ldr	r1, [r7, #20]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	613b      	str	r3, [r7, #16]
   return(result);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e6      	bne.n	80052ac <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d103      	bne.n	80052f4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2210      	movs	r2, #16
 80052f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fca5 	bl	8005c4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005302:	e00b      	b.n	800531c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fc75 	bl	8005bf4 <HAL_UART_RxCpltCallback>
}
 800530a:	e007      	b.n	800531c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0208 	orr.w	r2, r2, #8
 800531a:	619a      	str	r2, [r3, #24]
}
 800531c:	bf00      	nop
 800531e:	3758      	adds	r7, #88	; 0x58
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005338:	2b20      	cmp	r3, #32
 800533a:	d142      	bne.n	80053c2 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e03b      	b.n	80053c4 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	461a      	mov	r2, r3
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fd10 	bl	8004d84 <UART_Start_Receive_IT>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800536a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800536e:	2b00      	cmp	r3, #0
 8005370:	d124      	bne.n	80053bc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	2b01      	cmp	r3, #1
 8005378:	d11d      	bne.n	80053b6 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2210      	movs	r2, #16
 8005380:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	617b      	str	r3, [r7, #20]
   return(result);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f043 0310 	orr.w	r3, r3, #16
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
 80053a2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6a39      	ldr	r1, [r7, #32]
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 80053b4:	e002      	b.n	80053bc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80053bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053c0:	e000      	b.n	80053c4 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3730      	adds	r7, #48	; 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053cc:	b084      	sub	sp, #16
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	f107 001c 	add.w	r0, r7, #28
 80053da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d120      	bne.n	8005426 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <USB_CoreInit+0xac>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d105      	bne.n	800541a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa96 	bl	800594c <USB_CoreReset>
 8005420:	4603      	mov	r3, r0
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e010      	b.n	8005448 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa8a 	bl	800594c <USB_CoreReset>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10b      	bne.n	8005466 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f043 0206 	orr.w	r2, r3, #6
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f043 0220 	orr.w	r2, r3, #32
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005472:	b004      	add	sp, #16
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	ffbdffbf 	.word	0xffbdffbf

0800547c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 0201 	bic.w	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d115      	bne.n	80054ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054cc:	2001      	movs	r0, #1
 80054ce:	f7fc f829 	bl	8001524 <HAL_Delay>
      ms++;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa29 	bl	8005930 <USB_GetMode>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d01e      	beq.n	8005522 <USB_SetCurrentMode+0x84>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b31      	cmp	r3, #49	; 0x31
 80054e8:	d9f0      	bls.n	80054cc <USB_SetCurrentMode+0x2e>
 80054ea:	e01a      	b.n	8005522 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d115      	bne.n	800551e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054fe:	2001      	movs	r0, #1
 8005500:	f7fc f810 	bl	8001524 <HAL_Delay>
      ms++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa10 	bl	8005930 <USB_GetMode>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <USB_SetCurrentMode+0x84>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b31      	cmp	r3, #49	; 0x31
 800551a:	d9f0      	bls.n	80054fe <USB_SetCurrentMode+0x60>
 800551c:	e001      	b.n	8005522 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e005      	b.n	800552e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b32      	cmp	r3, #50	; 0x32
 8005526:	d101      	bne.n	800552c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005538:	b084      	sub	sp, #16
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e009      	b.n	800556c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3340      	adds	r3, #64	; 0x40
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	2200      	movs	r2, #0
 8005564:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	3301      	adds	r3, #1
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0e      	cmp	r3, #14
 8005570:	d9f2      	bls.n	8005558 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11c      	bne.n	80055b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005586:	f043 0302 	orr.w	r3, r3, #2
 800558a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e005      	b.n	80055be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055c4:	461a      	mov	r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d0:	4619      	mov	r1, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	461a      	mov	r2, r3
 80055da:	680b      	ldr	r3, [r1, #0]
 80055dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10c      	bne.n	80055fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ea:	2100      	movs	r1, #0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f965 	bl	80058bc <USB_SetDevSpeed>
 80055f2:	e008      	b.n	8005606 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055f4:	2101      	movs	r1, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f960 	bl	80058bc <USB_SetDevSpeed>
 80055fc:	e003      	b.n	8005606 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055fe:	2103      	movs	r1, #3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f95b 	bl	80058bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005606:	2110      	movs	r1, #16
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8f3 	bl	80057f4 <USB_FlushTxFifo>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f91f 	bl	800585c <USB_FlushRxFifo>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	461a      	mov	r2, r3
 800563c:	2300      	movs	r3, #0
 800563e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	461a      	mov	r2, r3
 8005648:	2300      	movs	r3, #0
 800564a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	e043      	b.n	80056da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005668:	d118      	bne.n	800569c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e013      	b.n	80056ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	461a      	mov	r2, r3
 8005694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	e008      	b.n	80056ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	461a      	mov	r2, r3
 80056ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3301      	adds	r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d3b7      	bcc.n	8005652 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e043      	b.n	8005770 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056fe:	d118      	bne.n	8005732 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e013      	b.n	8005744 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e008      	b.n	8005744 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	461a      	mov	r2, r3
 8005740:	2300      	movs	r3, #0
 8005742:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	461a      	mov	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005768:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3301      	adds	r3, #1
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d3b7      	bcc.n	80056e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800578a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f043 0210 	orr.w	r2, r3, #16
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <USB_DevInit+0x2b4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f043 0208 	orr.w	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d105      	bne.n	80057dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <USB_DevInit+0x2b8>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057e8:	b004      	add	sp, #16
 80057ea:	4770      	bx	lr
 80057ec:	803c3800 	.word	0x803c3800
 80057f0:	40000004 	.word	0x40000004

080057f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <USB_FlushTxFifo+0x64>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e01b      	b.n	800584c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	daf2      	bge.n	8005802 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	019b      	lsls	r3, r3, #6
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a08      	ldr	r2, [pc, #32]	; (8005858 <USB_FlushTxFifo+0x64>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e006      	b.n	800584c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b20      	cmp	r3, #32
 8005848:	d0f0      	beq.n	800582c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	00030d40 	.word	0x00030d40

0800585c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <USB_FlushRxFifo+0x5c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e018      	b.n	80058ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	daf2      	bge.n	8005868 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2210      	movs	r2, #16
 800588a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a08      	ldr	r2, [pc, #32]	; (80058b8 <USB_FlushRxFifo+0x5c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d901      	bls.n	800589e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e006      	b.n	80058ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d0f0      	beq.n	800588c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	00030d40 	.word	0x00030d40

080058bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058dc:	4313      	orrs	r3, r2
 80058de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005908:	f023 0303 	bic.w	r3, r3, #3
 800590c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591c:	f043 0302 	orr.w	r3, r3, #2
 8005920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0301 	and.w	r3, r3, #1
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <USB_CoreReset+0x64>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e01b      	b.n	80059a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	daf2      	bge.n	8005958 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <USB_CoreReset+0x64>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e006      	b.n	80059a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d0f0      	beq.n	8005982 <USB_CoreReset+0x36>

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	00030d40 	.word	0x00030d40

080059b4 <_write>:
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4804      	ldr	r0, [pc, #16]	; (80059dc <_write+0x28>)
 80059cc:	f7fe f9a8 	bl	8003d20 <HAL_UART_Transmit>
	return len;
 80059d0:	687b      	ldr	r3, [r7, #4]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	200003bc 	.word	0x200003bc

080059e0 <_read>:

// scanf
int _read(int file, char *ptr, int len)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
	int ch=0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80059f0:	f107 0114 	add.w	r1, r7, #20
 80059f4:	f04f 33ff 	mov.w	r3, #4294967295
 80059f8:	2201      	movs	r2, #1
 80059fa:	4817      	ldr	r0, [pc, #92]	; (8005a58 <_read+0x78>)
 80059fc:	f7fe fa13 	bl	8003e26 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8005a00:	f107 0114 	add.w	r1, r7, #20
 8005a04:	f04f 33ff 	mov.w	r3, #4294967295
 8005a08:	2201      	movs	r2, #1
 8005a0a:	4813      	ldr	r0, [pc, #76]	; (8005a58 <_read+0x78>)
 8005a0c:	f7fe f988 	bl	8003d20 <HAL_UART_Transmit>
	if(ch==13)
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b0d      	cmp	r3, #13
 8005a14:	d10a      	bne.n	8005a2c <_read+0x4c>
	{
		ch=10;
 8005a16:	230a      	movs	r3, #10
 8005a18:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8005a1a:	f107 0114 	add.w	r1, r7, #20
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	2201      	movs	r2, #1
 8005a24:	480c      	ldr	r0, [pc, #48]	; (8005a58 <_read+0x78>)
 8005a26:	f7fe f97b 	bl	8003d20 <HAL_UART_Transmit>
 8005a2a:	e00c      	b.n	8005a46 <_read+0x66>
	}
	else if(ch==8)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d109      	bne.n	8005a46 <_read+0x66>
	{
		ch=0x30;
 8005a32:	2330      	movs	r3, #48	; 0x30
 8005a34:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8005a36:	f107 0114 	add.w	r1, r7, #20
 8005a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3e:	2201      	movs	r2, #1
 8005a40:	4805      	ldr	r0, [pc, #20]	; (8005a58 <_read+0x78>)
 8005a42:	f7fe f96d 	bl	8003d20 <HAL_UART_Transmit>
	}

	*ptr=ch;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	701a      	strb	r2, [r3, #0]

	return 1;
 8005a4e:	2301      	movs	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	200003bc 	.word	0x200003bc

08005a5c <ex4>:

}

void ex4()

{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit(UART_DEBUG, (const uint8_t*)"\r\n", 2,HAL_MAX_DELAY);
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295
 8005a66:	2202      	movs	r2, #2
 8005a68:	4953      	ldr	r1, [pc, #332]	; (8005bb8 <ex4+0x15c>)
 8005a6a:	4854      	ldr	r0, [pc, #336]	; (8005bbc <ex4+0x160>)
 8005a6c:	f7fe f958 	bl	8003d20 <HAL_UART_Transmit>
 8005a70:	4603      	mov	r3, r0
 8005a72:	71fb      	strb	r3, [r7, #7]
	if(status != HAL_OK)
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <ex4+0x28>
	{
		printf("UART_DEBUG Transmit failed with status: %d", status);
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4850      	ldr	r0, [pc, #320]	; (8005bc0 <ex4+0x164>)
 8005a80:	f000 fa3a 	bl	8005ef8 <iprintf>
	}
	unsigned int message_length = get_console_message(ex4_buff3, (uint32_t)BUFF_SIZE);
 8005a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a88:	484e      	ldr	r0, [pc, #312]	; (8005bc4 <ex4+0x168>)
 8005a8a:	f000 f901 	bl	8005c90 <get_console_message>
 8005a8e:	6038      	str	r0, [r7, #0]
	status= HAL_UARTEx_ReceiveToIdle_IT(UART_5, ex2_buff5, (uint16_t)BUFF_SIZE);
 8005a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a94:	494c      	ldr	r1, [pc, #304]	; (8005bc8 <ex4+0x16c>)
 8005a96:	484d      	ldr	r0, [pc, #308]	; (8005bcc <ex4+0x170>)
 8005a98:	f7ff fc44 	bl	8005324 <HAL_UARTEx_ReceiveToIdle_IT>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	71fb      	strb	r3, [r7, #7]
	if(status != HAL_OK)
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d004      	beq.n	8005ab0 <ex4+0x54>
	{
		printf("UART_DEBUG Receive failed with status: %d", status);
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4849      	ldr	r0, [pc, #292]	; (8005bd0 <ex4+0x174>)
 8005aac:	f000 fa24 	bl	8005ef8 <iprintf>
	}
	status= HAL_UART_Transmit(UART_4,ex4_buff3, message_length, HAL_MAX_DELAY);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab8:	4942      	ldr	r1, [pc, #264]	; (8005bc4 <ex4+0x168>)
 8005aba:	4846      	ldr	r0, [pc, #280]	; (8005bd4 <ex4+0x178>)
 8005abc:	f7fe f930 	bl	8003d20 <HAL_UART_Transmit>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	71fb      	strb	r3, [r7, #7]
	if(status != HAL_OK)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <ex4+0x78>
	{
		printf("UART_4 Transmit failed with status: %d", status);
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4842      	ldr	r0, [pc, #264]	; (8005bd8 <ex4+0x17c>)
 8005ad0:	f000 fa12 	bl	8005ef8 <iprintf>
	}

	while(1){

		if(uart4_flag_callback)
 8005ad4:	4b41      	ldr	r3, [pc, #260]	; (8005bdc <ex4+0x180>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d035      	beq.n	8005b48 <ex4+0xec>
		{
			memset(ex2_buff5 ,0,BUFF_SIZE);
 8005adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4839      	ldr	r0, [pc, #228]	; (8005bc8 <ex4+0x16c>)
 8005ae4:	f000 fa5d 	bl	8005fa2 <memset>


			uart4_flag_callback = 0;
 8005ae8:	4b3c      	ldr	r3, [pc, #240]	; (8005bdc <ex4+0x180>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
			status = HAL_UART_Transmit(UART_DEBUG, (const uint8_t*)"Returned message: ", strlen("Returned message: "),HAL_MAX_DELAY);
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295
 8005af2:	2212      	movs	r2, #18
 8005af4:	493a      	ldr	r1, [pc, #232]	; (8005be0 <ex4+0x184>)
 8005af6:	4831      	ldr	r0, [pc, #196]	; (8005bbc <ex4+0x160>)
 8005af8:	f7fe f912 	bl	8003d20 <HAL_UART_Transmit>
 8005afc:	4603      	mov	r3, r0
 8005afe:	71fb      	strb	r3, [r7, #7]
			if(status != HAL_OK)
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d004      	beq.n	8005b10 <ex4+0xb4>
			{
				printf("UART_DEBUG Transmit failed with status: %d", status);
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	482d      	ldr	r0, [pc, #180]	; (8005bc0 <ex4+0x164>)
 8005b0c:	f000 f9f4 	bl	8005ef8 <iprintf>
			}
			status = HAL_UART_Transmit(UART_DEBUG, ex2_buff4, strlen(ex2_buff4),HAL_MAX_DELAY);
 8005b10:	4834      	ldr	r0, [pc, #208]	; (8005be4 <ex4+0x188>)
 8005b12:	f7fa fb7d 	bl	8000210 <strlen>
 8005b16:	4603      	mov	r3, r0
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1e:	4931      	ldr	r1, [pc, #196]	; (8005be4 <ex4+0x188>)
 8005b20:	4826      	ldr	r0, [pc, #152]	; (8005bbc <ex4+0x160>)
 8005b22:	f7fe f8fd 	bl	8003d20 <HAL_UART_Transmit>
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
			if(status != HAL_OK)
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <ex4+0xde>
			{
				printf("UART_DEBUG Transmit failed with status: %d", status);
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	4619      	mov	r1, r3
 8005b34:	4822      	ldr	r0, [pc, #136]	; (8005bc0 <ex4+0x164>)
 8005b36:	f000 f9df 	bl	8005ef8 <iprintf>
			}

			memset(ex2_buff4 ,0,BUFF_SIZE);
 8005b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4828      	ldr	r0, [pc, #160]	; (8005be4 <ex4+0x188>)
 8005b42:	f000 fa2e 	bl	8005fa2 <memset>
//
			break;
 8005b46:	e032      	b.n	8005bae <ex4+0x152>

		}
		if(uart5_flag_callback)
 8005b48:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <ex4+0x18c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0c1      	beq.n	8005ad4 <ex4+0x78>
		{
			memset(ex4_buff3,0,BUFF_SIZE);
 8005b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b54:	2100      	movs	r1, #0
 8005b56:	481b      	ldr	r0, [pc, #108]	; (8005bc4 <ex4+0x168>)
 8005b58:	f000 fa23 	bl	8005fa2 <memset>

			uart5_flag_callback = 0;
 8005b5c:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <ex4+0x18c>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
			status = HAL_UARTEx_ReceiveToIdle_IT(UART_4, ex2_buff4, BUFF_SIZE);
 8005b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b66:	491f      	ldr	r1, [pc, #124]	; (8005be4 <ex4+0x188>)
 8005b68:	481a      	ldr	r0, [pc, #104]	; (8005bd4 <ex4+0x178>)
 8005b6a:	f7ff fbdb 	bl	8005324 <HAL_UARTEx_ReceiveToIdle_IT>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	71fb      	strb	r3, [r7, #7]
			if(status != HAL_OK)
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <ex4+0x126>
			{
				printf("UART_4 Receive failed with status: %d", status);
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	481b      	ldr	r0, [pc, #108]	; (8005bec <ex4+0x190>)
 8005b7e:	f000 f9bb 	bl	8005ef8 <iprintf>
			}

			status = HAL_UART_Transmit(UART_5, ex2_buff5, strlen(ex2_buff5), HAL_MAX_DELAY);
 8005b82:	4811      	ldr	r0, [pc, #68]	; (8005bc8 <ex4+0x16c>)
 8005b84:	f7fa fb44 	bl	8000210 <strlen>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	490d      	ldr	r1, [pc, #52]	; (8005bc8 <ex4+0x16c>)
 8005b92:	480e      	ldr	r0, [pc, #56]	; (8005bcc <ex4+0x170>)
 8005b94:	f7fe f8c4 	bl	8003d20 <HAL_UART_Transmit>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	71fb      	strb	r3, [r7, #7]
			if(status != HAL_OK)
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d098      	beq.n	8005ad4 <ex4+0x78>
			{
				printf("UART_5 TRANSMIT failed with status: %d", status);
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4812      	ldr	r0, [pc, #72]	; (8005bf0 <ex4+0x194>)
 8005ba8:	f000 f9a6 	bl	8005ef8 <iprintf>
		if(uart4_flag_callback)
 8005bac:	e792      	b.n	8005ad4 <ex4+0x78>
			}


		}
	}
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08006c34 	.word	0x08006c34
 8005bbc:	200003bc 	.word	0x200003bc
 8005bc0:	08006db0 	.word	0x08006db0
 8005bc4:	200013a0 	.word	0x200013a0
 8005bc8:	20000fa0 	.word	0x20000fa0
 8005bcc:	20000334 	.word	0x20000334
 8005bd0:	08006ddc 	.word	0x08006ddc
 8005bd4:	200002ac 	.word	0x200002ac
 8005bd8:	08006d38 	.word	0x08006d38
 8005bdc:	20000b9d 	.word	0x20000b9d
 8005be0:	08006c5c 	.word	0x08006c5c
 8005be4:	20000ba0 	.word	0x20000ba0
 8005be8:	20000b9e 	.word	0x20000b9e
 8005bec:	08006d60 	.word	0x08006d60
 8005bf0:	08006d88 	.word	0x08006d88

08005bf4 <HAL_UART_RxCpltCallback>:
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	if (huart==UART_DEBUG){
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0d      	ldr	r2, [pc, #52]	; (8005c34 <HAL_UART_RxCpltCallback+0x40>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d102      	bne.n	8005c0a <HAL_UART_RxCpltCallback+0x16>
		uart3_flag_callback=1;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_UART_RxCpltCallback+0x44>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
	}

	if (huart==UART_5){
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a0b      	ldr	r2, [pc, #44]	; (8005c3c <HAL_UART_RxCpltCallback+0x48>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d102      	bne.n	8005c18 <HAL_UART_RxCpltCallback+0x24>
		uart5_flag_callback=1;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_UART_RxCpltCallback+0x4c>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
	}

	if (huart==UART_4){
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <HAL_UART_RxCpltCallback+0x50>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d102      	bne.n	8005c26 <HAL_UART_RxCpltCallback+0x32>
		uart4_flag_callback=1;
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_UART_RxCpltCallback+0x54>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]

	}
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	200003bc 	.word	0x200003bc
 8005c38:	20000b9c 	.word	0x20000b9c
 8005c3c:	20000334 	.word	0x20000334
 8005c40:	20000b9e 	.word	0x20000b9e
 8005c44:	200002ac 	.word	0x200002ac
 8005c48:	20000b9d 	.word	0x20000b9d

08005c4c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	807b      	strh	r3, [r7, #2]



	if (huart==UART_5){
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <HAL_UARTEx_RxEventCallback+0x34>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d102      	bne.n	8005c66 <HAL_UARTEx_RxEventCallback+0x1a>
		uart5_flag_callback=1;
 8005c60:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <HAL_UARTEx_RxEventCallback+0x38>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
	}

	if (huart==UART_4){
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <HAL_UARTEx_RxEventCallback+0x3c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d102      	bne.n	8005c74 <HAL_UARTEx_RxEventCallback+0x28>
		uart4_flag_callback=1;
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <HAL_UARTEx_RxEventCallback+0x40>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]

	}
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20000334 	.word	0x20000334
 8005c84:	20000b9e 	.word	0x20000b9e
 8005c88:	200002ac 	.word	0x200002ac
 8005c8c:	20000b9d 	.word	0x20000b9d

08005c90 <get_console_message>:


unsigned int get_console_message(uint8_t* buff, uint32_t buff_size){
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	int i=0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]
	unsigned int message_len=0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
	status= HAL_UART_Transmit(UART_DEBUG, (const uint8_t*)"Please enter a message (1024 character maximum):\r\nReceived message: ", strlen("Please enter a message (1024 character maximum):\r\nReceived message: "),HAL_MAX_DELAY);
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	2244      	movs	r2, #68	; 0x44
 8005ca8:	4933      	ldr	r1, [pc, #204]	; (8005d78 <get_console_message+0xe8>)
 8005caa:	4834      	ldr	r0, [pc, #208]	; (8005d7c <get_console_message+0xec>)
 8005cac:	f7fe f838 	bl	8003d20 <HAL_UART_Transmit>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d006      	beq.n	8005cc8 <get_console_message+0x38>
	{
		printf("UART_Transmit failed with status: %d", status);
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4830      	ldr	r0, [pc, #192]	; (8005d80 <get_console_message+0xf0>)
 8005cc0:	f000 f91a 	bl	8005ef8 <iprintf>
		return 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e053      	b.n	8005d70 <get_console_message+0xe0>
	}
	while(1){
		status=HAL_UART_Receive(UART_DEBUG, (uint8_t*) buff+i , PACKET_SIZE, HAL_MAX_DELAY);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	18d1      	adds	r1, r2, r3
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4829      	ldr	r0, [pc, #164]	; (8005d7c <get_console_message+0xec>)
 8005cd6:	f7fe f8a6 	bl	8003e26 <HAL_UART_Receive>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]
		if(status != HAL_OK)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d006      	beq.n	8005cf2 <get_console_message+0x62>
		{
			printf("UART_Receive failed with status: %d", status);
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4826      	ldr	r0, [pc, #152]	; (8005d84 <get_console_message+0xf4>)
 8005cea:	f000 f905 	bl	8005ef8 <iprintf>
			return 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e03e      	b.n	8005d70 <get_console_message+0xe0>
		}
		if (buff[i]=='\r' || i>= BUFF_SIZE-1){
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b0d      	cmp	r3, #13
 8005cfc:	d004      	beq.n	8005d08 <get_console_message+0x78>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005d04:	4293      	cmp	r3, r2
 8005d06:	dd1a      	ble.n	8005d3e <get_console_message+0xae>
			status= HAL_UART_Transmit(UART_DEBUG, (const uint8_t*)"\n\r", strlen("\n\r"),HAL_MAX_DELAY);
 8005d08:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	491e      	ldr	r1, [pc, #120]	; (8005d88 <get_console_message+0xf8>)
 8005d10:	481a      	ldr	r0, [pc, #104]	; (8005d7c <get_console_message+0xec>)
 8005d12:	f7fe f805 	bl	8003d20 <HAL_UART_Transmit>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
			if(status != HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <get_console_message+0x9e>
			{
				printf("UART_Transmit failed with status: %d", status);
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	4619      	mov	r1, r3
 8005d24:	4816      	ldr	r0, [pc, #88]	; (8005d80 <get_console_message+0xf0>)
 8005d26:	f000 f8e7 	bl	8005ef8 <iprintf>
				return 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e020      	b.n	8005d70 <get_console_message+0xe0>
			}
			message_len=i+1;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	3301      	adds	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
			i=0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
			break;
 8005d38:	bf00      	nop
			return 0;
		}
		i++;

	}
	return message_len;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	e018      	b.n	8005d70 <get_console_message+0xe0>
		status= HAL_UART_Transmit(UART_DEBUG, (uint8_t*)buff+i,PACKET_SIZE,HAL_MAX_DELAY);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	18d1      	adds	r1, r2, r3
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	2201      	movs	r2, #1
 8005d4a:	480c      	ldr	r0, [pc, #48]	; (8005d7c <get_console_message+0xec>)
 8005d4c:	f7fd ffe8 	bl	8003d20 <HAL_UART_Transmit>
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]
		if(status != HAL_OK)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d006      	beq.n	8005d68 <get_console_message+0xd8>
			printf("UART_Transmit failed with status: %d", status);
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4808      	ldr	r0, [pc, #32]	; (8005d80 <get_console_message+0xf0>)
 8005d60:	f000 f8ca 	bl	8005ef8 <iprintf>
			return 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e003      	b.n	8005d70 <get_console_message+0xe0>
		i++;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
		status=HAL_UART_Receive(UART_DEBUG, (uint8_t*) buff+i , PACKET_SIZE, HAL_MAX_DELAY);
 8005d6e:	e7ab      	b.n	8005cc8 <get_console_message+0x38>


}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08006e08 	.word	0x08006e08
 8005d7c:	200003bc 	.word	0x200003bc
 8005d80:	08006c0c 	.word	0x08006c0c
 8005d84:	08006c38 	.word	0x08006c38
 8005d88:	08006e50 	.word	0x08006e50

08005d8c <hw_main>:
void hw_main() {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
	ex4();
 8005d90:	f7ff fe64 	bl	8005a5c <ex4>
	// ex2();
}
 8005d94:	bf00      	nop
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <std>:
 8005d98:	2300      	movs	r3, #0
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005da6:	6083      	str	r3, [r0, #8]
 8005da8:	8181      	strh	r1, [r0, #12]
 8005daa:	6643      	str	r3, [r0, #100]	; 0x64
 8005dac:	81c2      	strh	r2, [r0, #14]
 8005dae:	6183      	str	r3, [r0, #24]
 8005db0:	4619      	mov	r1, r3
 8005db2:	2208      	movs	r2, #8
 8005db4:	305c      	adds	r0, #92	; 0x5c
 8005db6:	f000 f8f4 	bl	8005fa2 <memset>
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <std+0x38>)
 8005dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <std+0x3c>)
 8005dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <std+0x40>)
 8005dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <std+0x44>)
 8005dc8:	6224      	str	r4, [r4, #32]
 8005dca:	6323      	str	r3, [r4, #48]	; 0x30
 8005dcc:	bd10      	pop	{r4, pc}
 8005dce:	bf00      	nop
 8005dd0:	08005f1d 	.word	0x08005f1d
 8005dd4:	08005f3f 	.word	0x08005f3f
 8005dd8:	08005f77 	.word	0x08005f77
 8005ddc:	08005f9b 	.word	0x08005f9b

08005de0 <stdio_exit_handler>:
 8005de0:	4a02      	ldr	r2, [pc, #8]	; (8005dec <stdio_exit_handler+0xc>)
 8005de2:	4903      	ldr	r1, [pc, #12]	; (8005df0 <stdio_exit_handler+0x10>)
 8005de4:	4803      	ldr	r0, [pc, #12]	; (8005df4 <stdio_exit_handler+0x14>)
 8005de6:	f000 b869 	b.w	8005ebc <_fwalk_sglue>
 8005dea:	bf00      	nop
 8005dec:	2000000c 	.word	0x2000000c
 8005df0:	0800693d 	.word	0x0800693d
 8005df4:	20000018 	.word	0x20000018

08005df8 <cleanup_stdio>:
 8005df8:	6841      	ldr	r1, [r0, #4]
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <cleanup_stdio+0x34>)
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	d001      	beq.n	8005e08 <cleanup_stdio+0x10>
 8005e04:	f000 fd9a 	bl	800693c <_fflush_r>
 8005e08:	68a1      	ldr	r1, [r4, #8]
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <cleanup_stdio+0x38>)
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d002      	beq.n	8005e16 <cleanup_stdio+0x1e>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fd93 	bl	800693c <_fflush_r>
 8005e16:	68e1      	ldr	r1, [r4, #12]
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <cleanup_stdio+0x3c>)
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	d004      	beq.n	8005e28 <cleanup_stdio+0x30>
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e24:	f000 bd8a 	b.w	800693c <_fflush_r>
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200017a0 	.word	0x200017a0
 8005e30:	20001808 	.word	0x20001808
 8005e34:	20001870 	.word	0x20001870

08005e38 <global_stdio_init.part.0>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <global_stdio_init.part.0+0x30>)
 8005e3c:	4c0b      	ldr	r4, [pc, #44]	; (8005e6c <global_stdio_init.part.0+0x34>)
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <global_stdio_init.part.0+0x38>)
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	4620      	mov	r0, r4
 8005e44:	2200      	movs	r2, #0
 8005e46:	2104      	movs	r1, #4
 8005e48:	f7ff ffa6 	bl	8005d98 <std>
 8005e4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e50:	2201      	movs	r2, #1
 8005e52:	2109      	movs	r1, #9
 8005e54:	f7ff ffa0 	bl	8005d98 <std>
 8005e58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e62:	2112      	movs	r1, #18
 8005e64:	f7ff bf98 	b.w	8005d98 <std>
 8005e68:	200018d8 	.word	0x200018d8
 8005e6c:	200017a0 	.word	0x200017a0
 8005e70:	08005de1 	.word	0x08005de1

08005e74 <__sfp_lock_acquire>:
 8005e74:	4801      	ldr	r0, [pc, #4]	; (8005e7c <__sfp_lock_acquire+0x8>)
 8005e76:	f000 b90d 	b.w	8006094 <__retarget_lock_acquire_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	200018e1 	.word	0x200018e1

08005e80 <__sfp_lock_release>:
 8005e80:	4801      	ldr	r0, [pc, #4]	; (8005e88 <__sfp_lock_release+0x8>)
 8005e82:	f000 b908 	b.w	8006096 <__retarget_lock_release_recursive>
 8005e86:	bf00      	nop
 8005e88:	200018e1 	.word	0x200018e1

08005e8c <__sinit>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	f7ff fff0 	bl	8005e74 <__sfp_lock_acquire>
 8005e94:	6a23      	ldr	r3, [r4, #32]
 8005e96:	b11b      	cbz	r3, 8005ea0 <__sinit+0x14>
 8005e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9c:	f7ff bff0 	b.w	8005e80 <__sfp_lock_release>
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <__sinit+0x28>)
 8005ea2:	6223      	str	r3, [r4, #32]
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <__sinit+0x2c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f5      	bne.n	8005e98 <__sinit+0xc>
 8005eac:	f7ff ffc4 	bl	8005e38 <global_stdio_init.part.0>
 8005eb0:	e7f2      	b.n	8005e98 <__sinit+0xc>
 8005eb2:	bf00      	nop
 8005eb4:	08005df9 	.word	0x08005df9
 8005eb8:	200018d8 	.word	0x200018d8

08005ebc <_fwalk_sglue>:
 8005ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	4688      	mov	r8, r1
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed0:	d505      	bpl.n	8005ede <_fwalk_sglue+0x22>
 8005ed2:	6824      	ldr	r4, [r4, #0]
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d1f7      	bne.n	8005ec8 <_fwalk_sglue+0xc>
 8005ed8:	4630      	mov	r0, r6
 8005eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d907      	bls.n	8005ef4 <_fwalk_sglue+0x38>
 8005ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	d003      	beq.n	8005ef4 <_fwalk_sglue+0x38>
 8005eec:	4629      	mov	r1, r5
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	4306      	orrs	r6, r0
 8005ef4:	3568      	adds	r5, #104	; 0x68
 8005ef6:	e7e9      	b.n	8005ecc <_fwalk_sglue+0x10>

08005ef8 <iprintf>:
 8005ef8:	b40f      	push	{r0, r1, r2, r3}
 8005efa:	b507      	push	{r0, r1, r2, lr}
 8005efc:	4906      	ldr	r1, [pc, #24]	; (8005f18 <iprintf+0x20>)
 8005efe:	ab04      	add	r3, sp, #16
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f06:	6881      	ldr	r1, [r0, #8]
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	f000 f9e7 	bl	80062dc <_vfiprintf_r>
 8005f0e:	b003      	add	sp, #12
 8005f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f14:	b004      	add	sp, #16
 8005f16:	4770      	bx	lr
 8005f18:	20000064 	.word	0x20000064

08005f1c <__sread>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	460c      	mov	r4, r1
 8005f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f24:	f000 f868 	bl	8005ff8 <_read_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	bfab      	itete	ge
 8005f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f30:	181b      	addge	r3, r3, r0
 8005f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f36:	bfac      	ite	ge
 8005f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f3a:	81a3      	strhlt	r3, [r4, #12]
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <__swrite>:
 8005f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f42:	461f      	mov	r7, r3
 8005f44:	898b      	ldrh	r3, [r1, #12]
 8005f46:	05db      	lsls	r3, r3, #23
 8005f48:	4605      	mov	r5, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	d505      	bpl.n	8005f5c <__swrite+0x1e>
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	2302      	movs	r3, #2
 8005f56:	2200      	movs	r2, #0
 8005f58:	f000 f83c 	bl	8005fd4 <_lseek_r>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	4632      	mov	r2, r6
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	f000 b853 	b.w	800601c <_write_r>

08005f76 <__sseek>:
 8005f76:	b510      	push	{r4, lr}
 8005f78:	460c      	mov	r4, r1
 8005f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7e:	f000 f829 	bl	8005fd4 <_lseek_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	bf15      	itete	ne
 8005f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f92:	81a3      	strheq	r3, [r4, #12]
 8005f94:	bf18      	it	ne
 8005f96:	81a3      	strhne	r3, [r4, #12]
 8005f98:	bd10      	pop	{r4, pc}

08005f9a <__sclose>:
 8005f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9e:	f000 b809 	b.w	8005fb4 <_close_r>

08005fa2 <memset>:
 8005fa2:	4402      	add	r2, r0
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d100      	bne.n	8005fac <memset+0xa>
 8005faa:	4770      	bx	lr
 8005fac:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb0:	e7f9      	b.n	8005fa6 <memset+0x4>
	...

08005fb4 <_close_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d06      	ldr	r5, [pc, #24]	; (8005fd0 <_close_r+0x1c>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fb f9ae 	bl	8001320 <_close>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_close_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_close_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	200018dc 	.word	0x200018dc

08005fd4 <_lseek_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	; (8005ff4 <_lseek_r+0x20>)
 8005fd8:	4604      	mov	r4, r0
 8005fda:	4608      	mov	r0, r1
 8005fdc:	4611      	mov	r1, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fb f9c3 	bl	800136e <_lseek>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_lseek_r+0x1e>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_lseek_r+0x1e>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	200018dc 	.word	0x200018dc

08005ff8 <_read_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d07      	ldr	r5, [pc, #28]	; (8006018 <_read_r+0x20>)
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	4608      	mov	r0, r1
 8006000:	4611      	mov	r1, r2
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7ff fcea 	bl	80059e0 <_read>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_read_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_read_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200018dc 	.word	0x200018dc

0800601c <_write_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_write_r+0x20>)
 8006020:	4604      	mov	r4, r0
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	2200      	movs	r2, #0
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7ff fcc2 	bl	80059b4 <_write>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_write_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_write_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200018dc 	.word	0x200018dc

08006040 <__errno>:
 8006040:	4b01      	ldr	r3, [pc, #4]	; (8006048 <__errno+0x8>)
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000064 	.word	0x20000064

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4d0d      	ldr	r5, [pc, #52]	; (8006084 <__libc_init_array+0x38>)
 8006050:	4c0d      	ldr	r4, [pc, #52]	; (8006088 <__libc_init_array+0x3c>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	2600      	movs	r6, #0
 8006058:	42a6      	cmp	r6, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	4d0b      	ldr	r5, [pc, #44]	; (800608c <__libc_init_array+0x40>)
 800605e:	4c0c      	ldr	r4, [pc, #48]	; (8006090 <__libc_init_array+0x44>)
 8006060:	f000 fdbe 	bl	8006be0 <_init>
 8006064:	1b64      	subs	r4, r4, r5
 8006066:	10a4      	asrs	r4, r4, #2
 8006068:	2600      	movs	r6, #0
 800606a:	42a6      	cmp	r6, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f855 3b04 	ldr.w	r3, [r5], #4
 8006074:	4798      	blx	r3
 8006076:	3601      	adds	r6, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f855 3b04 	ldr.w	r3, [r5], #4
 800607e:	4798      	blx	r3
 8006080:	3601      	adds	r6, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	08006eb0 	.word	0x08006eb0
 8006088:	08006eb0 	.word	0x08006eb0
 800608c:	08006eb0 	.word	0x08006eb0
 8006090:	08006eb4 	.word	0x08006eb4

08006094 <__retarget_lock_acquire_recursive>:
 8006094:	4770      	bx	lr

08006096 <__retarget_lock_release_recursive>:
 8006096:	4770      	bx	lr

08006098 <_free_r>:
 8006098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800609a:	2900      	cmp	r1, #0
 800609c:	d044      	beq.n	8006128 <_free_r+0x90>
 800609e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a2:	9001      	str	r0, [sp, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f1a1 0404 	sub.w	r4, r1, #4
 80060aa:	bfb8      	it	lt
 80060ac:	18e4      	addlt	r4, r4, r3
 80060ae:	f000 f8df 	bl	8006270 <__malloc_lock>
 80060b2:	4a1e      	ldr	r2, [pc, #120]	; (800612c <_free_r+0x94>)
 80060b4:	9801      	ldr	r0, [sp, #4]
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	b933      	cbnz	r3, 80060c8 <_free_r+0x30>
 80060ba:	6063      	str	r3, [r4, #4]
 80060bc:	6014      	str	r4, [r2, #0]
 80060be:	b003      	add	sp, #12
 80060c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060c4:	f000 b8da 	b.w	800627c <__malloc_unlock>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d908      	bls.n	80060de <_free_r+0x46>
 80060cc:	6825      	ldr	r5, [r4, #0]
 80060ce:	1961      	adds	r1, r4, r5
 80060d0:	428b      	cmp	r3, r1
 80060d2:	bf01      	itttt	eq
 80060d4:	6819      	ldreq	r1, [r3, #0]
 80060d6:	685b      	ldreq	r3, [r3, #4]
 80060d8:	1949      	addeq	r1, r1, r5
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	e7ed      	b.n	80060ba <_free_r+0x22>
 80060de:	461a      	mov	r2, r3
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b10b      	cbz	r3, 80060e8 <_free_r+0x50>
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d9fa      	bls.n	80060de <_free_r+0x46>
 80060e8:	6811      	ldr	r1, [r2, #0]
 80060ea:	1855      	adds	r5, r2, r1
 80060ec:	42a5      	cmp	r5, r4
 80060ee:	d10b      	bne.n	8006108 <_free_r+0x70>
 80060f0:	6824      	ldr	r4, [r4, #0]
 80060f2:	4421      	add	r1, r4
 80060f4:	1854      	adds	r4, r2, r1
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	6011      	str	r1, [r2, #0]
 80060fa:	d1e0      	bne.n	80060be <_free_r+0x26>
 80060fc:	681c      	ldr	r4, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	6053      	str	r3, [r2, #4]
 8006102:	440c      	add	r4, r1
 8006104:	6014      	str	r4, [r2, #0]
 8006106:	e7da      	b.n	80060be <_free_r+0x26>
 8006108:	d902      	bls.n	8006110 <_free_r+0x78>
 800610a:	230c      	movs	r3, #12
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	e7d6      	b.n	80060be <_free_r+0x26>
 8006110:	6825      	ldr	r5, [r4, #0]
 8006112:	1961      	adds	r1, r4, r5
 8006114:	428b      	cmp	r3, r1
 8006116:	bf04      	itt	eq
 8006118:	6819      	ldreq	r1, [r3, #0]
 800611a:	685b      	ldreq	r3, [r3, #4]
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	bf04      	itt	eq
 8006120:	1949      	addeq	r1, r1, r5
 8006122:	6021      	streq	r1, [r4, #0]
 8006124:	6054      	str	r4, [r2, #4]
 8006126:	e7ca      	b.n	80060be <_free_r+0x26>
 8006128:	b003      	add	sp, #12
 800612a:	bd30      	pop	{r4, r5, pc}
 800612c:	200018e4 	.word	0x200018e4

08006130 <sbrk_aligned>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4e0e      	ldr	r6, [pc, #56]	; (800616c <sbrk_aligned+0x3c>)
 8006134:	460c      	mov	r4, r1
 8006136:	6831      	ldr	r1, [r6, #0]
 8006138:	4605      	mov	r5, r0
 800613a:	b911      	cbnz	r1, 8006142 <sbrk_aligned+0x12>
 800613c:	f000 fcbc 	bl	8006ab8 <_sbrk_r>
 8006140:	6030      	str	r0, [r6, #0]
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 fcb7 	bl	8006ab8 <_sbrk_r>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d00a      	beq.n	8006164 <sbrk_aligned+0x34>
 800614e:	1cc4      	adds	r4, r0, #3
 8006150:	f024 0403 	bic.w	r4, r4, #3
 8006154:	42a0      	cmp	r0, r4
 8006156:	d007      	beq.n	8006168 <sbrk_aligned+0x38>
 8006158:	1a21      	subs	r1, r4, r0
 800615a:	4628      	mov	r0, r5
 800615c:	f000 fcac 	bl	8006ab8 <_sbrk_r>
 8006160:	3001      	adds	r0, #1
 8006162:	d101      	bne.n	8006168 <sbrk_aligned+0x38>
 8006164:	f04f 34ff 	mov.w	r4, #4294967295
 8006168:	4620      	mov	r0, r4
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	200018e8 	.word	0x200018e8

08006170 <_malloc_r>:
 8006170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006174:	1ccd      	adds	r5, r1, #3
 8006176:	f025 0503 	bic.w	r5, r5, #3
 800617a:	3508      	adds	r5, #8
 800617c:	2d0c      	cmp	r5, #12
 800617e:	bf38      	it	cc
 8006180:	250c      	movcc	r5, #12
 8006182:	2d00      	cmp	r5, #0
 8006184:	4607      	mov	r7, r0
 8006186:	db01      	blt.n	800618c <_malloc_r+0x1c>
 8006188:	42a9      	cmp	r1, r5
 800618a:	d905      	bls.n	8006198 <_malloc_r+0x28>
 800618c:	230c      	movs	r3, #12
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	2600      	movs	r6, #0
 8006192:	4630      	mov	r0, r6
 8006194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800626c <_malloc_r+0xfc>
 800619c:	f000 f868 	bl	8006270 <__malloc_lock>
 80061a0:	f8d8 3000 	ldr.w	r3, [r8]
 80061a4:	461c      	mov	r4, r3
 80061a6:	bb5c      	cbnz	r4, 8006200 <_malloc_r+0x90>
 80061a8:	4629      	mov	r1, r5
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ffc0 	bl	8006130 <sbrk_aligned>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	4604      	mov	r4, r0
 80061b4:	d155      	bne.n	8006262 <_malloc_r+0xf2>
 80061b6:	f8d8 4000 	ldr.w	r4, [r8]
 80061ba:	4626      	mov	r6, r4
 80061bc:	2e00      	cmp	r6, #0
 80061be:	d145      	bne.n	800624c <_malloc_r+0xdc>
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	d048      	beq.n	8006256 <_malloc_r+0xe6>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	4631      	mov	r1, r6
 80061c8:	4638      	mov	r0, r7
 80061ca:	eb04 0903 	add.w	r9, r4, r3
 80061ce:	f000 fc73 	bl	8006ab8 <_sbrk_r>
 80061d2:	4581      	cmp	r9, r0
 80061d4:	d13f      	bne.n	8006256 <_malloc_r+0xe6>
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	1a6d      	subs	r5, r5, r1
 80061da:	4629      	mov	r1, r5
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ffa7 	bl	8006130 <sbrk_aligned>
 80061e2:	3001      	adds	r0, #1
 80061e4:	d037      	beq.n	8006256 <_malloc_r+0xe6>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	442b      	add	r3, r5
 80061ea:	6023      	str	r3, [r4, #0]
 80061ec:	f8d8 3000 	ldr.w	r3, [r8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d038      	beq.n	8006266 <_malloc_r+0xf6>
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	42a2      	cmp	r2, r4
 80061f8:	d12b      	bne.n	8006252 <_malloc_r+0xe2>
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	e00f      	b.n	8006220 <_malloc_r+0xb0>
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	1b52      	subs	r2, r2, r5
 8006204:	d41f      	bmi.n	8006246 <_malloc_r+0xd6>
 8006206:	2a0b      	cmp	r2, #11
 8006208:	d917      	bls.n	800623a <_malloc_r+0xca>
 800620a:	1961      	adds	r1, r4, r5
 800620c:	42a3      	cmp	r3, r4
 800620e:	6025      	str	r5, [r4, #0]
 8006210:	bf18      	it	ne
 8006212:	6059      	strne	r1, [r3, #4]
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	bf08      	it	eq
 8006218:	f8c8 1000 	streq.w	r1, [r8]
 800621c:	5162      	str	r2, [r4, r5]
 800621e:	604b      	str	r3, [r1, #4]
 8006220:	4638      	mov	r0, r7
 8006222:	f104 060b 	add.w	r6, r4, #11
 8006226:	f000 f829 	bl	800627c <__malloc_unlock>
 800622a:	f026 0607 	bic.w	r6, r6, #7
 800622e:	1d23      	adds	r3, r4, #4
 8006230:	1af2      	subs	r2, r6, r3
 8006232:	d0ae      	beq.n	8006192 <_malloc_r+0x22>
 8006234:	1b9b      	subs	r3, r3, r6
 8006236:	50a3      	str	r3, [r4, r2]
 8006238:	e7ab      	b.n	8006192 <_malloc_r+0x22>
 800623a:	42a3      	cmp	r3, r4
 800623c:	6862      	ldr	r2, [r4, #4]
 800623e:	d1dd      	bne.n	80061fc <_malloc_r+0x8c>
 8006240:	f8c8 2000 	str.w	r2, [r8]
 8006244:	e7ec      	b.n	8006220 <_malloc_r+0xb0>
 8006246:	4623      	mov	r3, r4
 8006248:	6864      	ldr	r4, [r4, #4]
 800624a:	e7ac      	b.n	80061a6 <_malloc_r+0x36>
 800624c:	4634      	mov	r4, r6
 800624e:	6876      	ldr	r6, [r6, #4]
 8006250:	e7b4      	b.n	80061bc <_malloc_r+0x4c>
 8006252:	4613      	mov	r3, r2
 8006254:	e7cc      	b.n	80061f0 <_malloc_r+0x80>
 8006256:	230c      	movs	r3, #12
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	4638      	mov	r0, r7
 800625c:	f000 f80e 	bl	800627c <__malloc_unlock>
 8006260:	e797      	b.n	8006192 <_malloc_r+0x22>
 8006262:	6025      	str	r5, [r4, #0]
 8006264:	e7dc      	b.n	8006220 <_malloc_r+0xb0>
 8006266:	605b      	str	r3, [r3, #4]
 8006268:	deff      	udf	#255	; 0xff
 800626a:	bf00      	nop
 800626c:	200018e4 	.word	0x200018e4

08006270 <__malloc_lock>:
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <__malloc_lock+0x8>)
 8006272:	f7ff bf0f 	b.w	8006094 <__retarget_lock_acquire_recursive>
 8006276:	bf00      	nop
 8006278:	200018e0 	.word	0x200018e0

0800627c <__malloc_unlock>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__malloc_unlock+0x8>)
 800627e:	f7ff bf0a 	b.w	8006096 <__retarget_lock_release_recursive>
 8006282:	bf00      	nop
 8006284:	200018e0 	.word	0x200018e0

08006288 <__sfputc_r>:
 8006288:	6893      	ldr	r3, [r2, #8]
 800628a:	3b01      	subs	r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	b410      	push	{r4}
 8006290:	6093      	str	r3, [r2, #8]
 8006292:	da08      	bge.n	80062a6 <__sfputc_r+0x1e>
 8006294:	6994      	ldr	r4, [r2, #24]
 8006296:	42a3      	cmp	r3, r4
 8006298:	db01      	blt.n	800629e <__sfputc_r+0x16>
 800629a:	290a      	cmp	r1, #10
 800629c:	d103      	bne.n	80062a6 <__sfputc_r+0x1e>
 800629e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a2:	f000 bb73 	b.w	800698c <__swbuf_r>
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	1c58      	adds	r0, r3, #1
 80062aa:	6010      	str	r0, [r2, #0]
 80062ac:	7019      	strb	r1, [r3, #0]
 80062ae:	4608      	mov	r0, r1
 80062b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <__sfputs_r>:
 80062b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b8:	4606      	mov	r6, r0
 80062ba:	460f      	mov	r7, r1
 80062bc:	4614      	mov	r4, r2
 80062be:	18d5      	adds	r5, r2, r3
 80062c0:	42ac      	cmp	r4, r5
 80062c2:	d101      	bne.n	80062c8 <__sfputs_r+0x12>
 80062c4:	2000      	movs	r0, #0
 80062c6:	e007      	b.n	80062d8 <__sfputs_r+0x22>
 80062c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062cc:	463a      	mov	r2, r7
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff ffda 	bl	8006288 <__sfputc_r>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d1f3      	bne.n	80062c0 <__sfputs_r+0xa>
 80062d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062dc <_vfiprintf_r>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	460d      	mov	r5, r1
 80062e2:	b09d      	sub	sp, #116	; 0x74
 80062e4:	4614      	mov	r4, r2
 80062e6:	4698      	mov	r8, r3
 80062e8:	4606      	mov	r6, r0
 80062ea:	b118      	cbz	r0, 80062f4 <_vfiprintf_r+0x18>
 80062ec:	6a03      	ldr	r3, [r0, #32]
 80062ee:	b90b      	cbnz	r3, 80062f4 <_vfiprintf_r+0x18>
 80062f0:	f7ff fdcc 	bl	8005e8c <__sinit>
 80062f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f6:	07d9      	lsls	r1, r3, #31
 80062f8:	d405      	bmi.n	8006306 <_vfiprintf_r+0x2a>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	059a      	lsls	r2, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_vfiprintf_r+0x2a>
 8006300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006302:	f7ff fec7 	bl	8006094 <__retarget_lock_acquire_recursive>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	071b      	lsls	r3, r3, #28
 800630a:	d501      	bpl.n	8006310 <_vfiprintf_r+0x34>
 800630c:	692b      	ldr	r3, [r5, #16]
 800630e:	b99b      	cbnz	r3, 8006338 <_vfiprintf_r+0x5c>
 8006310:	4629      	mov	r1, r5
 8006312:	4630      	mov	r0, r6
 8006314:	f000 fb78 	bl	8006a08 <__swsetup_r>
 8006318:	b170      	cbz	r0, 8006338 <_vfiprintf_r+0x5c>
 800631a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631c:	07dc      	lsls	r4, r3, #31
 800631e:	d504      	bpl.n	800632a <_vfiprintf_r+0x4e>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	b01d      	add	sp, #116	; 0x74
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	0598      	lsls	r0, r3, #22
 800632e:	d4f7      	bmi.n	8006320 <_vfiprintf_r+0x44>
 8006330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006332:	f7ff feb0 	bl	8006096 <__retarget_lock_release_recursive>
 8006336:	e7f3      	b.n	8006320 <_vfiprintf_r+0x44>
 8006338:	2300      	movs	r3, #0
 800633a:	9309      	str	r3, [sp, #36]	; 0x24
 800633c:	2320      	movs	r3, #32
 800633e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006342:	f8cd 800c 	str.w	r8, [sp, #12]
 8006346:	2330      	movs	r3, #48	; 0x30
 8006348:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80064fc <_vfiprintf_r+0x220>
 800634c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006350:	f04f 0901 	mov.w	r9, #1
 8006354:	4623      	mov	r3, r4
 8006356:	469a      	mov	sl, r3
 8006358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800635c:	b10a      	cbz	r2, 8006362 <_vfiprintf_r+0x86>
 800635e:	2a25      	cmp	r2, #37	; 0x25
 8006360:	d1f9      	bne.n	8006356 <_vfiprintf_r+0x7a>
 8006362:	ebba 0b04 	subs.w	fp, sl, r4
 8006366:	d00b      	beq.n	8006380 <_vfiprintf_r+0xa4>
 8006368:	465b      	mov	r3, fp
 800636a:	4622      	mov	r2, r4
 800636c:	4629      	mov	r1, r5
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ffa1 	bl	80062b6 <__sfputs_r>
 8006374:	3001      	adds	r0, #1
 8006376:	f000 80a9 	beq.w	80064cc <_vfiprintf_r+0x1f0>
 800637a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800637c:	445a      	add	r2, fp
 800637e:	9209      	str	r2, [sp, #36]	; 0x24
 8006380:	f89a 3000 	ldrb.w	r3, [sl]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80a1 	beq.w	80064cc <_vfiprintf_r+0x1f0>
 800638a:	2300      	movs	r3, #0
 800638c:	f04f 32ff 	mov.w	r2, #4294967295
 8006390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006394:	f10a 0a01 	add.w	sl, sl, #1
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	9307      	str	r3, [sp, #28]
 800639c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a0:	931a      	str	r3, [sp, #104]	; 0x68
 80063a2:	4654      	mov	r4, sl
 80063a4:	2205      	movs	r2, #5
 80063a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063aa:	4854      	ldr	r0, [pc, #336]	; (80064fc <_vfiprintf_r+0x220>)
 80063ac:	f7f9 ff38 	bl	8000220 <memchr>
 80063b0:	9a04      	ldr	r2, [sp, #16]
 80063b2:	b9d8      	cbnz	r0, 80063ec <_vfiprintf_r+0x110>
 80063b4:	06d1      	lsls	r1, r2, #27
 80063b6:	bf44      	itt	mi
 80063b8:	2320      	movmi	r3, #32
 80063ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063be:	0713      	lsls	r3, r2, #28
 80063c0:	bf44      	itt	mi
 80063c2:	232b      	movmi	r3, #43	; 0x2b
 80063c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c8:	f89a 3000 	ldrb.w	r3, [sl]
 80063cc:	2b2a      	cmp	r3, #42	; 0x2a
 80063ce:	d015      	beq.n	80063fc <_vfiprintf_r+0x120>
 80063d0:	9a07      	ldr	r2, [sp, #28]
 80063d2:	4654      	mov	r4, sl
 80063d4:	2000      	movs	r0, #0
 80063d6:	f04f 0c0a 	mov.w	ip, #10
 80063da:	4621      	mov	r1, r4
 80063dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e0:	3b30      	subs	r3, #48	; 0x30
 80063e2:	2b09      	cmp	r3, #9
 80063e4:	d94d      	bls.n	8006482 <_vfiprintf_r+0x1a6>
 80063e6:	b1b0      	cbz	r0, 8006416 <_vfiprintf_r+0x13a>
 80063e8:	9207      	str	r2, [sp, #28]
 80063ea:	e014      	b.n	8006416 <_vfiprintf_r+0x13a>
 80063ec:	eba0 0308 	sub.w	r3, r0, r8
 80063f0:	fa09 f303 	lsl.w	r3, r9, r3
 80063f4:	4313      	orrs	r3, r2
 80063f6:	9304      	str	r3, [sp, #16]
 80063f8:	46a2      	mov	sl, r4
 80063fa:	e7d2      	b.n	80063a2 <_vfiprintf_r+0xc6>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	1d19      	adds	r1, r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	9103      	str	r1, [sp, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	bfbb      	ittet	lt
 8006408:	425b      	neglt	r3, r3
 800640a:	f042 0202 	orrlt.w	r2, r2, #2
 800640e:	9307      	strge	r3, [sp, #28]
 8006410:	9307      	strlt	r3, [sp, #28]
 8006412:	bfb8      	it	lt
 8006414:	9204      	strlt	r2, [sp, #16]
 8006416:	7823      	ldrb	r3, [r4, #0]
 8006418:	2b2e      	cmp	r3, #46	; 0x2e
 800641a:	d10c      	bne.n	8006436 <_vfiprintf_r+0x15a>
 800641c:	7863      	ldrb	r3, [r4, #1]
 800641e:	2b2a      	cmp	r3, #42	; 0x2a
 8006420:	d134      	bne.n	800648c <_vfiprintf_r+0x1b0>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9203      	str	r2, [sp, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfb8      	it	lt
 800642e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006432:	3402      	adds	r4, #2
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800650c <_vfiprintf_r+0x230>
 800643a:	7821      	ldrb	r1, [r4, #0]
 800643c:	2203      	movs	r2, #3
 800643e:	4650      	mov	r0, sl
 8006440:	f7f9 feee 	bl	8000220 <memchr>
 8006444:	b138      	cbz	r0, 8006456 <_vfiprintf_r+0x17a>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	eba0 000a 	sub.w	r0, r0, sl
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	4082      	lsls	r2, r0
 8006450:	4313      	orrs	r3, r2
 8006452:	3401      	adds	r4, #1
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800645a:	4829      	ldr	r0, [pc, #164]	; (8006500 <_vfiprintf_r+0x224>)
 800645c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006460:	2206      	movs	r2, #6
 8006462:	f7f9 fedd 	bl	8000220 <memchr>
 8006466:	2800      	cmp	r0, #0
 8006468:	d03f      	beq.n	80064ea <_vfiprintf_r+0x20e>
 800646a:	4b26      	ldr	r3, [pc, #152]	; (8006504 <_vfiprintf_r+0x228>)
 800646c:	bb1b      	cbnz	r3, 80064b6 <_vfiprintf_r+0x1da>
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	3307      	adds	r3, #7
 8006472:	f023 0307 	bic.w	r3, r3, #7
 8006476:	3308      	adds	r3, #8
 8006478:	9303      	str	r3, [sp, #12]
 800647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647c:	443b      	add	r3, r7
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	e768      	b.n	8006354 <_vfiprintf_r+0x78>
 8006482:	fb0c 3202 	mla	r2, ip, r2, r3
 8006486:	460c      	mov	r4, r1
 8006488:	2001      	movs	r0, #1
 800648a:	e7a6      	b.n	80063da <_vfiprintf_r+0xfe>
 800648c:	2300      	movs	r3, #0
 800648e:	3401      	adds	r4, #1
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	4619      	mov	r1, r3
 8006494:	f04f 0c0a 	mov.w	ip, #10
 8006498:	4620      	mov	r0, r4
 800649a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800649e:	3a30      	subs	r2, #48	; 0x30
 80064a0:	2a09      	cmp	r2, #9
 80064a2:	d903      	bls.n	80064ac <_vfiprintf_r+0x1d0>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0c6      	beq.n	8006436 <_vfiprintf_r+0x15a>
 80064a8:	9105      	str	r1, [sp, #20]
 80064aa:	e7c4      	b.n	8006436 <_vfiprintf_r+0x15a>
 80064ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b0:	4604      	mov	r4, r0
 80064b2:	2301      	movs	r3, #1
 80064b4:	e7f0      	b.n	8006498 <_vfiprintf_r+0x1bc>
 80064b6:	ab03      	add	r3, sp, #12
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	462a      	mov	r2, r5
 80064bc:	4b12      	ldr	r3, [pc, #72]	; (8006508 <_vfiprintf_r+0x22c>)
 80064be:	a904      	add	r1, sp, #16
 80064c0:	4630      	mov	r0, r6
 80064c2:	f3af 8000 	nop.w
 80064c6:	4607      	mov	r7, r0
 80064c8:	1c78      	adds	r0, r7, #1
 80064ca:	d1d6      	bne.n	800647a <_vfiprintf_r+0x19e>
 80064cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ce:	07d9      	lsls	r1, r3, #31
 80064d0:	d405      	bmi.n	80064de <_vfiprintf_r+0x202>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	059a      	lsls	r2, r3, #22
 80064d6:	d402      	bmi.n	80064de <_vfiprintf_r+0x202>
 80064d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064da:	f7ff fddc 	bl	8006096 <__retarget_lock_release_recursive>
 80064de:	89ab      	ldrh	r3, [r5, #12]
 80064e0:	065b      	lsls	r3, r3, #25
 80064e2:	f53f af1d 	bmi.w	8006320 <_vfiprintf_r+0x44>
 80064e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064e8:	e71c      	b.n	8006324 <_vfiprintf_r+0x48>
 80064ea:	ab03      	add	r3, sp, #12
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	462a      	mov	r2, r5
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <_vfiprintf_r+0x22c>)
 80064f2:	a904      	add	r1, sp, #16
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f879 	bl	80065ec <_printf_i>
 80064fa:	e7e4      	b.n	80064c6 <_vfiprintf_r+0x1ea>
 80064fc:	08006e74 	.word	0x08006e74
 8006500:	08006e7e 	.word	0x08006e7e
 8006504:	00000000 	.word	0x00000000
 8006508:	080062b7 	.word	0x080062b7
 800650c:	08006e7a 	.word	0x08006e7a

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4699      	mov	r9, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800655c:	1e13      	subs	r3, r2, #0
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656c:	4649      	mov	r1, r9
 800656e:	4638      	mov	r0, r7
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	f003 0306 	and.w	r3, r3, #6
 800657e:	2b04      	cmp	r3, #4
 8006580:	bf02      	ittt	eq
 8006582:	68e5      	ldreq	r5, [r4, #12]
 8006584:	6833      	ldreq	r3, [r6, #0]
 8006586:	1aed      	subeq	r5, r5, r3
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4649      	mov	r1, r9
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c0      	blx	r8
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	; 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	7e0f      	ldrb	r7, [r1, #24]
 80065f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f4:	2f78      	cmp	r7, #120	; 0x78
 80065f6:	4691      	mov	r9, r2
 80065f8:	4680      	mov	r8, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	469a      	mov	sl, r3
 80065fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	; 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d4 	beq.w	80067b6 <_printf_i+0x1ca>
 800660e:	2f58      	cmp	r7, #88	; 0x58
 8006610:	f000 80c0 	beq.w	8006794 <_printf_i+0x1a8>
 8006614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a101      	add	r1, pc, #4	; (adr r1, 800662c <_printf_i+0x40>)
 8006628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	0800679d 	.word	0x0800679d
 800665c:	080066c5 	.word	0x080066c5
 8006660:	08006757 	.word	0x08006757
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067bf 	.word	0x080067bf
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c5 	.word	0x080066c5
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800675f 	.word	0x0800675f
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	602a      	str	r2, [r5, #0]
 800668c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e09f      	b.n	80067d8 <_printf_i+0x1ec>
 8006698:	6820      	ldr	r0, [r4, #0]
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	0607      	lsls	r7, r0, #24
 800669e:	f103 0104 	add.w	r1, r3, #4
 80066a2:	6029      	str	r1, [r5, #0]
 80066a4:	d501      	bpl.n	80066aa <_printf_i+0xbe>
 80066a6:	681e      	ldr	r6, [r3, #0]
 80066a8:	e003      	b.n	80066b2 <_printf_i+0xc6>
 80066aa:	0646      	lsls	r6, r0, #25
 80066ac:	d5fb      	bpl.n	80066a6 <_printf_i+0xba>
 80066ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	da03      	bge.n	80066be <_printf_i+0xd2>
 80066b6:	232d      	movs	r3, #45	; 0x2d
 80066b8:	4276      	negs	r6, r6
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	485a      	ldr	r0, [pc, #360]	; (8006828 <_printf_i+0x23c>)
 80066c0:	230a      	movs	r3, #10
 80066c2:	e012      	b.n	80066ea <_printf_i+0xfe>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	1d19      	adds	r1, r3, #4
 80066ca:	6029      	str	r1, [r5, #0]
 80066cc:	0605      	lsls	r5, r0, #24
 80066ce:	d501      	bpl.n	80066d4 <_printf_i+0xe8>
 80066d0:	681e      	ldr	r6, [r3, #0]
 80066d2:	e002      	b.n	80066da <_printf_i+0xee>
 80066d4:	0641      	lsls	r1, r0, #25
 80066d6:	d5fb      	bpl.n	80066d0 <_printf_i+0xe4>
 80066d8:	881e      	ldrh	r6, [r3, #0]
 80066da:	4853      	ldr	r0, [pc, #332]	; (8006828 <_printf_i+0x23c>)
 80066dc:	2f6f      	cmp	r7, #111	; 0x6f
 80066de:	bf0c      	ite	eq
 80066e0:	2308      	moveq	r3, #8
 80066e2:	230a      	movne	r3, #10
 80066e4:	2100      	movs	r1, #0
 80066e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ea:	6865      	ldr	r5, [r4, #4]
 80066ec:	60a5      	str	r5, [r4, #8]
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	bfa2      	ittt	ge
 80066f2:	6821      	ldrge	r1, [r4, #0]
 80066f4:	f021 0104 	bicge.w	r1, r1, #4
 80066f8:	6021      	strge	r1, [r4, #0]
 80066fa:	b90e      	cbnz	r6, 8006700 <_printf_i+0x114>
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	d04b      	beq.n	8006798 <_printf_i+0x1ac>
 8006700:	4615      	mov	r5, r2
 8006702:	fbb6 f1f3 	udiv	r1, r6, r3
 8006706:	fb03 6711 	mls	r7, r3, r1, r6
 800670a:	5dc7      	ldrb	r7, [r0, r7]
 800670c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006710:	4637      	mov	r7, r6
 8006712:	42bb      	cmp	r3, r7
 8006714:	460e      	mov	r6, r1
 8006716:	d9f4      	bls.n	8006702 <_printf_i+0x116>
 8006718:	2b08      	cmp	r3, #8
 800671a:	d10b      	bne.n	8006734 <_printf_i+0x148>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07de      	lsls	r6, r3, #31
 8006720:	d508      	bpl.n	8006734 <_printf_i+0x148>
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	6861      	ldr	r1, [r4, #4]
 8006726:	4299      	cmp	r1, r3
 8006728:	bfde      	ittt	le
 800672a:	2330      	movle	r3, #48	; 0x30
 800672c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006730:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006734:	1b52      	subs	r2, r2, r5
 8006736:	6122      	str	r2, [r4, #16]
 8006738:	f8cd a000 	str.w	sl, [sp]
 800673c:	464b      	mov	r3, r9
 800673e:	aa03      	add	r2, sp, #12
 8006740:	4621      	mov	r1, r4
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fee4 	bl	8006510 <_printf_common>
 8006748:	3001      	adds	r0, #1
 800674a:	d14a      	bne.n	80067e2 <_printf_i+0x1f6>
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	b004      	add	sp, #16
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	f043 0320 	orr.w	r3, r3, #32
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	4833      	ldr	r0, [pc, #204]	; (800682c <_printf_i+0x240>)
 8006760:	2778      	movs	r7, #120	; 0x78
 8006762:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	6829      	ldr	r1, [r5, #0]
 800676a:	061f      	lsls	r7, r3, #24
 800676c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006770:	d402      	bmi.n	8006778 <_printf_i+0x18c>
 8006772:	065f      	lsls	r7, r3, #25
 8006774:	bf48      	it	mi
 8006776:	b2b6      	uxthmi	r6, r6
 8006778:	07df      	lsls	r7, r3, #31
 800677a:	bf48      	it	mi
 800677c:	f043 0320 	orrmi.w	r3, r3, #32
 8006780:	6029      	str	r1, [r5, #0]
 8006782:	bf48      	it	mi
 8006784:	6023      	strmi	r3, [r4, #0]
 8006786:	b91e      	cbnz	r6, 8006790 <_printf_i+0x1a4>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	f023 0320 	bic.w	r3, r3, #32
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	2310      	movs	r3, #16
 8006792:	e7a7      	b.n	80066e4 <_printf_i+0xf8>
 8006794:	4824      	ldr	r0, [pc, #144]	; (8006828 <_printf_i+0x23c>)
 8006796:	e7e4      	b.n	8006762 <_printf_i+0x176>
 8006798:	4615      	mov	r5, r2
 800679a:	e7bd      	b.n	8006718 <_printf_i+0x12c>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	6826      	ldr	r6, [r4, #0]
 80067a0:	6961      	ldr	r1, [r4, #20]
 80067a2:	1d18      	adds	r0, r3, #4
 80067a4:	6028      	str	r0, [r5, #0]
 80067a6:	0635      	lsls	r5, r6, #24
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	d501      	bpl.n	80067b0 <_printf_i+0x1c4>
 80067ac:	6019      	str	r1, [r3, #0]
 80067ae:	e002      	b.n	80067b6 <_printf_i+0x1ca>
 80067b0:	0670      	lsls	r0, r6, #25
 80067b2:	d5fb      	bpl.n	80067ac <_printf_i+0x1c0>
 80067b4:	8019      	strh	r1, [r3, #0]
 80067b6:	2300      	movs	r3, #0
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	4615      	mov	r5, r2
 80067bc:	e7bc      	b.n	8006738 <_printf_i+0x14c>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	602a      	str	r2, [r5, #0]
 80067c4:	681d      	ldr	r5, [r3, #0]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	2100      	movs	r1, #0
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7f9 fd28 	bl	8000220 <memchr>
 80067d0:	b108      	cbz	r0, 80067d6 <_printf_i+0x1ea>
 80067d2:	1b40      	subs	r0, r0, r5
 80067d4:	6060      	str	r0, [r4, #4]
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	2300      	movs	r3, #0
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e0:	e7aa      	b.n	8006738 <_printf_i+0x14c>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	462a      	mov	r2, r5
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	47d0      	blx	sl
 80067ec:	3001      	adds	r0, #1
 80067ee:	d0ad      	beq.n	800674c <_printf_i+0x160>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	d413      	bmi.n	800681e <_printf_i+0x232>
 80067f6:	68e0      	ldr	r0, [r4, #12]
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	4298      	cmp	r0, r3
 80067fc:	bfb8      	it	lt
 80067fe:	4618      	movlt	r0, r3
 8006800:	e7a6      	b.n	8006750 <_printf_i+0x164>
 8006802:	2301      	movs	r3, #1
 8006804:	4632      	mov	r2, r6
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d09d      	beq.n	800674c <_printf_i+0x160>
 8006810:	3501      	adds	r5, #1
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	9903      	ldr	r1, [sp, #12]
 8006816:	1a5b      	subs	r3, r3, r1
 8006818:	42ab      	cmp	r3, r5
 800681a:	dcf2      	bgt.n	8006802 <_printf_i+0x216>
 800681c:	e7eb      	b.n	80067f6 <_printf_i+0x20a>
 800681e:	2500      	movs	r5, #0
 8006820:	f104 0619 	add.w	r6, r4, #25
 8006824:	e7f5      	b.n	8006812 <_printf_i+0x226>
 8006826:	bf00      	nop
 8006828:	08006e85 	.word	0x08006e85
 800682c:	08006e96 	.word	0x08006e96

08006830 <__sflush_r>:
 8006830:	898a      	ldrh	r2, [r1, #12]
 8006832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006836:	4605      	mov	r5, r0
 8006838:	0710      	lsls	r0, r2, #28
 800683a:	460c      	mov	r4, r1
 800683c:	d458      	bmi.n	80068f0 <__sflush_r+0xc0>
 800683e:	684b      	ldr	r3, [r1, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc05      	bgt.n	8006850 <__sflush_r+0x20>
 8006844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	dc02      	bgt.n	8006850 <__sflush_r+0x20>
 800684a:	2000      	movs	r0, #0
 800684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006852:	2e00      	cmp	r6, #0
 8006854:	d0f9      	beq.n	800684a <__sflush_r+0x1a>
 8006856:	2300      	movs	r3, #0
 8006858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800685c:	682f      	ldr	r7, [r5, #0]
 800685e:	6a21      	ldr	r1, [r4, #32]
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	d032      	beq.n	80068ca <__sflush_r+0x9a>
 8006864:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	075a      	lsls	r2, r3, #29
 800686a:	d505      	bpl.n	8006878 <__sflush_r+0x48>
 800686c:	6863      	ldr	r3, [r4, #4]
 800686e:	1ac0      	subs	r0, r0, r3
 8006870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006872:	b10b      	cbz	r3, 8006878 <__sflush_r+0x48>
 8006874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006876:	1ac0      	subs	r0, r0, r3
 8006878:	2300      	movs	r3, #0
 800687a:	4602      	mov	r2, r0
 800687c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800687e:	6a21      	ldr	r1, [r4, #32]
 8006880:	4628      	mov	r0, r5
 8006882:	47b0      	blx	r6
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	d106      	bne.n	8006898 <__sflush_r+0x68>
 800688a:	6829      	ldr	r1, [r5, #0]
 800688c:	291d      	cmp	r1, #29
 800688e:	d82b      	bhi.n	80068e8 <__sflush_r+0xb8>
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <__sflush_r+0x108>)
 8006892:	410a      	asrs	r2, r1
 8006894:	07d6      	lsls	r6, r2, #31
 8006896:	d427      	bmi.n	80068e8 <__sflush_r+0xb8>
 8006898:	2200      	movs	r2, #0
 800689a:	6062      	str	r2, [r4, #4]
 800689c:	04d9      	lsls	r1, r3, #19
 800689e:	6922      	ldr	r2, [r4, #16]
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	d504      	bpl.n	80068ae <__sflush_r+0x7e>
 80068a4:	1c42      	adds	r2, r0, #1
 80068a6:	d101      	bne.n	80068ac <__sflush_r+0x7c>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b903      	cbnz	r3, 80068ae <__sflush_r+0x7e>
 80068ac:	6560      	str	r0, [r4, #84]	; 0x54
 80068ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068b0:	602f      	str	r7, [r5, #0]
 80068b2:	2900      	cmp	r1, #0
 80068b4:	d0c9      	beq.n	800684a <__sflush_r+0x1a>
 80068b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ba:	4299      	cmp	r1, r3
 80068bc:	d002      	beq.n	80068c4 <__sflush_r+0x94>
 80068be:	4628      	mov	r0, r5
 80068c0:	f7ff fbea 	bl	8006098 <_free_r>
 80068c4:	2000      	movs	r0, #0
 80068c6:	6360      	str	r0, [r4, #52]	; 0x34
 80068c8:	e7c0      	b.n	800684c <__sflush_r+0x1c>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b0      	blx	r6
 80068d0:	1c41      	adds	r1, r0, #1
 80068d2:	d1c8      	bne.n	8006866 <__sflush_r+0x36>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0c5      	beq.n	8006866 <__sflush_r+0x36>
 80068da:	2b1d      	cmp	r3, #29
 80068dc:	d001      	beq.n	80068e2 <__sflush_r+0xb2>
 80068de:	2b16      	cmp	r3, #22
 80068e0:	d101      	bne.n	80068e6 <__sflush_r+0xb6>
 80068e2:	602f      	str	r7, [r5, #0]
 80068e4:	e7b1      	b.n	800684a <__sflush_r+0x1a>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	e7ad      	b.n	800684c <__sflush_r+0x1c>
 80068f0:	690f      	ldr	r7, [r1, #16]
 80068f2:	2f00      	cmp	r7, #0
 80068f4:	d0a9      	beq.n	800684a <__sflush_r+0x1a>
 80068f6:	0793      	lsls	r3, r2, #30
 80068f8:	680e      	ldr	r6, [r1, #0]
 80068fa:	bf08      	it	eq
 80068fc:	694b      	ldreq	r3, [r1, #20]
 80068fe:	600f      	str	r7, [r1, #0]
 8006900:	bf18      	it	ne
 8006902:	2300      	movne	r3, #0
 8006904:	eba6 0807 	sub.w	r8, r6, r7
 8006908:	608b      	str	r3, [r1, #8]
 800690a:	f1b8 0f00 	cmp.w	r8, #0
 800690e:	dd9c      	ble.n	800684a <__sflush_r+0x1a>
 8006910:	6a21      	ldr	r1, [r4, #32]
 8006912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006914:	4643      	mov	r3, r8
 8006916:	463a      	mov	r2, r7
 8006918:	4628      	mov	r0, r5
 800691a:	47b0      	blx	r6
 800691c:	2800      	cmp	r0, #0
 800691e:	dc06      	bgt.n	800692e <__sflush_r+0xfe>
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	e78e      	b.n	800684c <__sflush_r+0x1c>
 800692e:	4407      	add	r7, r0
 8006930:	eba8 0800 	sub.w	r8, r8, r0
 8006934:	e7e9      	b.n	800690a <__sflush_r+0xda>
 8006936:	bf00      	nop
 8006938:	dfbffffe 	.word	0xdfbffffe

0800693c <_fflush_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	690b      	ldr	r3, [r1, #16]
 8006940:	4605      	mov	r5, r0
 8006942:	460c      	mov	r4, r1
 8006944:	b913      	cbnz	r3, 800694c <_fflush_r+0x10>
 8006946:	2500      	movs	r5, #0
 8006948:	4628      	mov	r0, r5
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	b118      	cbz	r0, 8006956 <_fflush_r+0x1a>
 800694e:	6a03      	ldr	r3, [r0, #32]
 8006950:	b90b      	cbnz	r3, 8006956 <_fflush_r+0x1a>
 8006952:	f7ff fa9b 	bl	8005e8c <__sinit>
 8006956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f3      	beq.n	8006946 <_fflush_r+0xa>
 800695e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006960:	07d0      	lsls	r0, r2, #31
 8006962:	d404      	bmi.n	800696e <_fflush_r+0x32>
 8006964:	0599      	lsls	r1, r3, #22
 8006966:	d402      	bmi.n	800696e <_fflush_r+0x32>
 8006968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800696a:	f7ff fb93 	bl	8006094 <__retarget_lock_acquire_recursive>
 800696e:	4628      	mov	r0, r5
 8006970:	4621      	mov	r1, r4
 8006972:	f7ff ff5d 	bl	8006830 <__sflush_r>
 8006976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006978:	07da      	lsls	r2, r3, #31
 800697a:	4605      	mov	r5, r0
 800697c:	d4e4      	bmi.n	8006948 <_fflush_r+0xc>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	059b      	lsls	r3, r3, #22
 8006982:	d4e1      	bmi.n	8006948 <_fflush_r+0xc>
 8006984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006986:	f7ff fb86 	bl	8006096 <__retarget_lock_release_recursive>
 800698a:	e7dd      	b.n	8006948 <_fflush_r+0xc>

0800698c <__swbuf_r>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	460e      	mov	r6, r1
 8006990:	4614      	mov	r4, r2
 8006992:	4605      	mov	r5, r0
 8006994:	b118      	cbz	r0, 800699e <__swbuf_r+0x12>
 8006996:	6a03      	ldr	r3, [r0, #32]
 8006998:	b90b      	cbnz	r3, 800699e <__swbuf_r+0x12>
 800699a:	f7ff fa77 	bl	8005e8c <__sinit>
 800699e:	69a3      	ldr	r3, [r4, #24]
 80069a0:	60a3      	str	r3, [r4, #8]
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	071a      	lsls	r2, r3, #28
 80069a6:	d525      	bpl.n	80069f4 <__swbuf_r+0x68>
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	b31b      	cbz	r3, 80069f4 <__swbuf_r+0x68>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	6922      	ldr	r2, [r4, #16]
 80069b0:	1a98      	subs	r0, r3, r2
 80069b2:	6963      	ldr	r3, [r4, #20]
 80069b4:	b2f6      	uxtb	r6, r6
 80069b6:	4283      	cmp	r3, r0
 80069b8:	4637      	mov	r7, r6
 80069ba:	dc04      	bgt.n	80069c6 <__swbuf_r+0x3a>
 80069bc:	4621      	mov	r1, r4
 80069be:	4628      	mov	r0, r5
 80069c0:	f7ff ffbc 	bl	800693c <_fflush_r>
 80069c4:	b9e0      	cbnz	r0, 8006a00 <__swbuf_r+0x74>
 80069c6:	68a3      	ldr	r3, [r4, #8]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	60a3      	str	r3, [r4, #8]
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	6022      	str	r2, [r4, #0]
 80069d2:	701e      	strb	r6, [r3, #0]
 80069d4:	6962      	ldr	r2, [r4, #20]
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	429a      	cmp	r2, r3
 80069da:	d004      	beq.n	80069e6 <__swbuf_r+0x5a>
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	07db      	lsls	r3, r3, #31
 80069e0:	d506      	bpl.n	80069f0 <__swbuf_r+0x64>
 80069e2:	2e0a      	cmp	r6, #10
 80069e4:	d104      	bne.n	80069f0 <__swbuf_r+0x64>
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f7ff ffa7 	bl	800693c <_fflush_r>
 80069ee:	b938      	cbnz	r0, 8006a00 <__swbuf_r+0x74>
 80069f0:	4638      	mov	r0, r7
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f4:	4621      	mov	r1, r4
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 f806 	bl	8006a08 <__swsetup_r>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d0d5      	beq.n	80069ac <__swbuf_r+0x20>
 8006a00:	f04f 37ff 	mov.w	r7, #4294967295
 8006a04:	e7f4      	b.n	80069f0 <__swbuf_r+0x64>
	...

08006a08 <__swsetup_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <__swsetup_r+0xac>)
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	460c      	mov	r4, r1
 8006a12:	b118      	cbz	r0, 8006a1c <__swsetup_r+0x14>
 8006a14:	6a03      	ldr	r3, [r0, #32]
 8006a16:	b90b      	cbnz	r3, 8006a1c <__swsetup_r+0x14>
 8006a18:	f7ff fa38 	bl	8005e8c <__sinit>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a22:	0718      	lsls	r0, r3, #28
 8006a24:	d422      	bmi.n	8006a6c <__swsetup_r+0x64>
 8006a26:	06d9      	lsls	r1, r3, #27
 8006a28:	d407      	bmi.n	8006a3a <__swsetup_r+0x32>
 8006a2a:	2309      	movs	r3, #9
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	e034      	b.n	8006aa4 <__swsetup_r+0x9c>
 8006a3a:	0758      	lsls	r0, r3, #29
 8006a3c:	d512      	bpl.n	8006a64 <__swsetup_r+0x5c>
 8006a3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a40:	b141      	cbz	r1, 8006a54 <__swsetup_r+0x4c>
 8006a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a46:	4299      	cmp	r1, r3
 8006a48:	d002      	beq.n	8006a50 <__swsetup_r+0x48>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f7ff fb24 	bl	8006098 <_free_r>
 8006a50:	2300      	movs	r3, #0
 8006a52:	6363      	str	r3, [r4, #52]	; 0x34
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f043 0308 	orr.w	r3, r3, #8
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	b94b      	cbnz	r3, 8006a84 <__swsetup_r+0x7c>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7a:	d003      	beq.n	8006a84 <__swsetup_r+0x7c>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 f850 	bl	8006b24 <__smakebuf_r>
 8006a84:	89a0      	ldrh	r0, [r4, #12]
 8006a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a8a:	f010 0301 	ands.w	r3, r0, #1
 8006a8e:	d00a      	beq.n	8006aa6 <__swsetup_r+0x9e>
 8006a90:	2300      	movs	r3, #0
 8006a92:	60a3      	str	r3, [r4, #8]
 8006a94:	6963      	ldr	r3, [r4, #20]
 8006a96:	425b      	negs	r3, r3
 8006a98:	61a3      	str	r3, [r4, #24]
 8006a9a:	6923      	ldr	r3, [r4, #16]
 8006a9c:	b943      	cbnz	r3, 8006ab0 <__swsetup_r+0xa8>
 8006a9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aa2:	d1c4      	bne.n	8006a2e <__swsetup_r+0x26>
 8006aa4:	bd38      	pop	{r3, r4, r5, pc}
 8006aa6:	0781      	lsls	r1, r0, #30
 8006aa8:	bf58      	it	pl
 8006aaa:	6963      	ldrpl	r3, [r4, #20]
 8006aac:	60a3      	str	r3, [r4, #8]
 8006aae:	e7f4      	b.n	8006a9a <__swsetup_r+0x92>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e7f7      	b.n	8006aa4 <__swsetup_r+0x9c>
 8006ab4:	20000064 	.word	0x20000064

08006ab8 <_sbrk_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d06      	ldr	r5, [pc, #24]	; (8006ad4 <_sbrk_r+0x1c>)
 8006abc:	2300      	movs	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fa fc60 	bl	8001388 <_sbrk>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_sbrk_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_sbrk_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	200018dc 	.word	0x200018dc

08006ad8 <__swhatbuf_r>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	460c      	mov	r4, r1
 8006adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	b096      	sub	sp, #88	; 0x58
 8006ae4:	4615      	mov	r5, r2
 8006ae6:	461e      	mov	r6, r3
 8006ae8:	da0d      	bge.n	8006b06 <__swhatbuf_r+0x2e>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	bf0c      	ite	eq
 8006af6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006afa:	2340      	movne	r3, #64	; 0x40
 8006afc:	2000      	movs	r0, #0
 8006afe:	6031      	str	r1, [r6, #0]
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	b016      	add	sp, #88	; 0x58
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
 8006b06:	466a      	mov	r2, sp
 8006b08:	f000 f848 	bl	8006b9c <_fstat_r>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	dbec      	blt.n	8006aea <__swhatbuf_r+0x12>
 8006b10:	9901      	ldr	r1, [sp, #4]
 8006b12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b1a:	4259      	negs	r1, r3
 8006b1c:	4159      	adcs	r1, r3
 8006b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b22:	e7eb      	b.n	8006afc <__swhatbuf_r+0x24>

08006b24 <__smakebuf_r>:
 8006b24:	898b      	ldrh	r3, [r1, #12]
 8006b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b28:	079d      	lsls	r5, r3, #30
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	d507      	bpl.n	8006b40 <__smakebuf_r+0x1c>
 8006b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	6163      	str	r3, [r4, #20]
 8006b3c:	b002      	add	sp, #8
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	ab01      	add	r3, sp, #4
 8006b42:	466a      	mov	r2, sp
 8006b44:	f7ff ffc8 	bl	8006ad8 <__swhatbuf_r>
 8006b48:	9900      	ldr	r1, [sp, #0]
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff fb0f 	bl	8006170 <_malloc_r>
 8006b52:	b948      	cbnz	r0, 8006b68 <__smakebuf_r+0x44>
 8006b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b58:	059a      	lsls	r2, r3, #22
 8006b5a:	d4ef      	bmi.n	8006b3c <__smakebuf_r+0x18>
 8006b5c:	f023 0303 	bic.w	r3, r3, #3
 8006b60:	f043 0302 	orr.w	r3, r3, #2
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	e7e3      	b.n	8006b30 <__smakebuf_r+0xc>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	6020      	str	r0, [r4, #0]
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	81a3      	strh	r3, [r4, #12]
 8006b72:	9b00      	ldr	r3, [sp, #0]
 8006b74:	6163      	str	r3, [r4, #20]
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	6120      	str	r0, [r4, #16]
 8006b7a:	b15b      	cbz	r3, 8006b94 <__smakebuf_r+0x70>
 8006b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b80:	4630      	mov	r0, r6
 8006b82:	f000 f81d 	bl	8006bc0 <_isatty_r>
 8006b86:	b128      	cbz	r0, 8006b94 <__smakebuf_r+0x70>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	f043 0301 	orr.w	r3, r3, #1
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	431d      	orrs	r5, r3
 8006b98:	81a5      	strh	r5, [r4, #12]
 8006b9a:	e7cf      	b.n	8006b3c <__smakebuf_r+0x18>

08006b9c <_fstat_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d07      	ldr	r5, [pc, #28]	; (8006bbc <_fstat_r+0x20>)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	f7fa fbc5 	bl	8001338 <_fstat>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d102      	bne.n	8006bb8 <_fstat_r+0x1c>
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	b103      	cbz	r3, 8006bb8 <_fstat_r+0x1c>
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	bd38      	pop	{r3, r4, r5, pc}
 8006bba:	bf00      	nop
 8006bbc:	200018dc 	.word	0x200018dc

08006bc0 <_isatty_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d06      	ldr	r5, [pc, #24]	; (8006bdc <_isatty_r+0x1c>)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	f7fa fbc4 	bl	8001358 <_isatty>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_isatty_r+0x1a>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_isatty_r+0x1a>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	200018dc 	.word	0x200018dc

08006be0 <_init>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr

08006bec <_fini>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr
