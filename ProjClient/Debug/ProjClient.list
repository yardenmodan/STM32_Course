
ProjClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f80  08013d80  08013d80  00023d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d00  08016d00  000301b4  2**0
                  CONTENTS
  4 .ARM          00000008  08016d00  08016d00  00026d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d08  08016d08  000301b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d08  08016d08  00026d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d0c  08016d0c  00026d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08016d10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08016d84  00030074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08016e24  00030114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088f4  200001b4  08016ec4  000301b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008aa8  08016ec4  00038aa8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002f978  00000000  00000000  00030227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006fb1  00000000  00000000  0005fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025d0  00000000  00000000  00066b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e30  00000000  00000000  00069120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000365f3  00000000  00000000  0006af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003c71a  00000000  00000000  000a1543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00119c60  00000000  00000000  000ddc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a830  00000000  00000000  001f78c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  002020f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b4 	.word	0x200001b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013d68 	.word	0x08013d68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b8 	.word	0x200001b8
 800020c:	08013d68 	.word	0x08013d68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 fa75 	bl	8001a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f81e 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fb3c 	bl	8000c34 <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 faf0 	bl	8000ba0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005c0:	f000 fabe 	bl	8000b40 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fa8c 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005c8:	f000 f9aa 	bl	8000920 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005cc:	f000 f9e6 	bl	800099c <MX_SPI2_Init>
  MX_I2C2_Init();
 80005d0:	f000 f8f6 	bl	80007c0 <MX_I2C2_Init>
  MX_ADC1_Init();
 80005d4:	f000 f878 	bl	80006c8 <MX_ADC1_Init>
  MX_DAC_Init();
 80005d8:	f000 f8c8 	bl	800076c <MX_DAC_Init>
  MX_I2C4_Init();
 80005dc:	f000 f930 	bl	8000840 <MX_I2C4_Init>
  MX_RTC_Init();
 80005e0:	f000 f96e 	bl	80008c0 <MX_RTC_Init>
  MX_TIM6_Init();
 80005e4:	f000 fa14 	bl	8000a10 <MX_TIM6_Init>
  MX_UART5_Init();
 80005e8:	f000 fa4a 	bl	8000a80 <MX_UART5_Init>
  MX_LWIP_Init();
 80005ec:	f006 fc88 	bl	8006f00 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x44>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f012 fd05 	bl	8013012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f003 fcee 	bl	8003ff8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000650:	2309      	movs	r3, #9
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800066c:	2348      	movs	r3, #72	; 0x48
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fccb 	bl	8004018 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000688:	f000 fb7a 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 ff59 	bl	8004560 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b4:	f000 fb64 	bl	8000d80 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC1_Init+0x98>)
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ADC1_Init+0x98>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_ADC1_Init+0x98>)
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_ADC1_Init+0xa0>)
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_ADC1_Init+0x98>)
 8000714:	2201      	movs	r2, #1
 8000716:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_ADC1_Init+0x98>)
 8000722:	2201      	movs	r2, #1
 8000724:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <MX_ADC1_Init+0x98>)
 8000728:	f001 fa3a 	bl	8001ba0 <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 fb25 	bl	8000d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2301      	movs	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC1_Init+0x98>)
 8000748:	f001 fb9c 	bl	8001e84 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000752:	f000 fb15 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200001d0 	.word	0x200001d0
 8000764:	40012000 	.word	0x40012000
 8000768:	0f000001 	.word	0x0f000001

0800076c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_DAC_Init+0x4c>)
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <MX_DAC_Init+0x50>)
 800077e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_DAC_Init+0x4c>)
 8000782:	f001 feea 	bl	800255a <HAL_DAC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800078c:	f000 faf8 	bl	8000d80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000790:	233c      	movs	r3, #60	; 0x3c
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_DAC_Init+0x4c>)
 80007a0:	f001 ff61 	bl	8002666 <HAL_DAC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007aa:	f000 fae9 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000218 	.word	0x20000218
 80007bc:	40007400 	.word	0x40007400

080007c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_I2C2_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_I2C2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_I2C2_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_I2C2_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_I2C2_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	; (8000834 <MX_I2C2_Init+0x74>)
 80007fc:	f003 faba 	bl	8003d74 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 fabb 	bl	8000d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_I2C2_Init+0x74>)
 800080e:	f003 fb5b 	bl	8003ec8 <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fab2 	bl	8000d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_I2C2_Init+0x74>)
 8000820:	f003 fb9d 	bl	8003f5e <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 faa9 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000022c 	.word	0x2000022c
 8000838:	40005800 	.word	0x40005800
 800083c:	00808cd2 	.word	0x00808cd2

08000840 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_I2C4_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_I2C4_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <MX_I2C4_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_I2C4_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C4_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C4_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_I2C4_Init+0x74>)
 800087c:	f003 fa7a 	bl	8003d74 <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 fa7b 	bl	8000d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_I2C4_Init+0x74>)
 800088e:	f003 fb1b 	bl	8003ec8 <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 fa72 	bl	8000d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2C4_Init+0x74>)
 80008a0:	f003 fb5d 	bl	8003f5e <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fa69 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000280 	.word	0x20000280
 80008b8:	40006000 	.word	0x40006000
 80008bc:	00808cd2 	.word	0x00808cd2

080008c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_RTC_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_RTC_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_RTC_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_RTC_Init+0x58>)
 80008d2:	227f      	movs	r2, #127	; 0x7f
 80008d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_RTC_Init+0x58>)
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_RTC_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_RTC_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_RTC_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ee:	480a      	ldr	r0, [pc, #40]	; (8000918 <MX_RTC_Init+0x58>)
 80008f0:	f004 fc4c 	bl	800518c <HAL_RTC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008fa:	f000 fa41 	bl	8000d80 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_RTC_Init+0x58>)
 8000904:	f004 fd4a 	bl	800539c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 fa37 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000334 	.word	0x20000334
 800091c:	40002800 	.word	0x40002800

08000920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_SPI1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_SPI1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_SPI1_Init+0x74>)
 800092c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_SPI1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_SPI1_Init+0x74>)
 800093a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800093e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SPI1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SPI1_Init+0x74>)
 800094e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_SPI1_Init+0x74>)
 8000956:	2218      	movs	r2, #24
 8000958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_SPI1_Init+0x74>)
 8000968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_SPI1_Init+0x74>)
 8000970:	2207      	movs	r2, #7
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_SPI1_Init+0x74>)
 8000982:	f004 fdf9 	bl	8005578 <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800098c:	f000 f9f8 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000354 	.word	0x20000354
 8000998:	40013000 	.word	0x40013000

0800099c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009a2:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <MX_SPI2_Init+0x70>)
 80009a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_SPI2_Init+0x6c>)
 80009f4:	f004 fdc0 	bl	8005578 <HAL_SPI_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80009fe:	f000 f9bf 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200003b8 	.word	0x200003b8
 8000a0c:	40003800 	.word	0x40003800

08000a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a22:	4a16      	ldr	r2, [pc, #88]	; (8000a7c <MX_TIM6_Init+0x6c>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a28:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 35999;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a36:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000a3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a44:	f004 ff7f 	bl	8005946 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a4e:	f000 f997 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_TIM6_Init+0x68>)
 8000a60:	f005 f9ba 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000a6a:	f000 f989 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200004dc 	.word	0x200004dc
 8000a7c:	40001000 	.word	0x40001000

08000a80 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_UART5_Init+0x5c>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_UART5_Init+0x58>)
 8000ac4:	f005 fa34 	bl	8005f30 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 f957 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000528 	.word	0x20000528
 8000adc:	40005000 	.word	0x40005000

08000ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_USART2_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b24:	f005 fa04 	bl	8005f30 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 f927 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200005b0 	.word	0x200005b0
 8000b3c:	40004400 	.word	0x40004400

08000b40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_USART3_UART_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART3_UART_Init+0x58>)
 8000b84:	f005 f9d4 	bl	8005f30 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 f8f7 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000638 	.word	0x20000638
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_DMA_Init+0x90>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <MX_DMA_Init+0x90>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_DMA_Init+0x90>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_DMA_Init+0x90>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <MX_DMA_Init+0x90>)
 8000bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_DMA_Init+0x90>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	200b      	movs	r0, #11
 8000bdc:	f001 fc87 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000be0:	200b      	movs	r0, #11
 8000be2:	f001 fca0 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	200d      	movs	r0, #13
 8000bec:	f001 fc7f 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bf0:	200d      	movs	r0, #13
 8000bf2:	f001 fc98 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	200e      	movs	r0, #14
 8000bfc:	f001 fc77 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c00:	200e      	movs	r0, #14
 8000c02:	f001 fc90 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2010      	movs	r0, #16
 8000c0c:	f001 fc6f 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c10:	2010      	movs	r0, #16
 8000c12:	f001 fc88 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2038      	movs	r0, #56	; 0x38
 8000c1c:	f001 fc67 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c20:	2038      	movs	r0, #56	; 0x38
 8000c22:	f001 fc80 	bl	8002526 <HAL_NVIC_EnableIRQ>

}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a49      	ldr	r2, [pc, #292]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c62:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a43      	ldr	r2, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c68:	f043 0320 	orr.w	r3, r3, #32
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0320 	and.w	r3, r3, #32
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a3d      	ldr	r2, [pc, #244]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a37      	ldr	r2, [pc, #220]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <MX_GPIO_Init+0x140>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	4820      	ldr	r0, [pc, #128]	; (8000d78 <MX_GPIO_Init+0x144>)
 8000cf8:	f003 f822 	bl	8003d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4819      	ldr	r0, [pc, #100]	; (8000d78 <MX_GPIO_Init+0x144>)
 8000d14:	f002 fe68 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_GPIO_Init+0x144>)
 8000d2c:	f002 fe5c 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d30:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d42:	230a      	movs	r3, #10
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000d4e:	f002 fe4b 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000d68:	f002 fe3e 	bl	80039e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40021800 	.word	0x40021800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x44>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x44>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_ADC_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12b      	bne.n	8000e4e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_ADC_MspInit+0x88>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <HAL_ADC_MspInit+0x88>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_ADC_MspInit+0x88>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_ADC_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <HAL_ADC_MspInit+0x88>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_ADC_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <HAL_ADC_MspInit+0x8c>)
 8000e3a:	f002 fdd5 	bl	80039e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2012      	movs	r0, #18
 8000e44:	f001 fb53 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e48:	2012      	movs	r0, #18
 8000e4a:	f001 fb6c 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_DAC_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_DAC_MspInit+0x88>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_DAC_MspInit+0x88>)
 8000e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_DAC_MspInit+0x88>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_DAC_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <HAL_DAC_MspInit+0x88>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_DAC_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <HAL_DAC_MspInit+0x8c>)
 8000eca:	f002 fd8d 	bl	80039e8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2036      	movs	r0, #54	; 0x36
 8000ed4:	f001 fb0b 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ed8:	2036      	movs	r0, #54	; 0x36
 8000eda:	f001 fb24 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40007400 	.word	0x40007400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ac      	sub	sp, #176	; 0xb0
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	2284      	movs	r2, #132	; 0x84
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f012 f87c 	bl	8013012 <memset>
  if(hi2c->Instance==I2C2)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a63      	ldr	r2, [pc, #396]	; (80010ac <HAL_I2C_MspInit+0x1b8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d173      	bne.n	800100c <HAL_I2C_MspInit+0x118>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fd39 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f40:	f7ff ff1e 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f44:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	4a59      	ldr	r2, [pc, #356]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f50:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	f003 0320 	and.w	r3, r3, #32
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f62:	2312      	movs	r3, #18
 8000f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f74:	2304      	movs	r3, #4
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	484c      	ldr	r0, [pc, #304]	; (80010b4 <HAL_I2C_MspInit+0x1c0>)
 8000f82:	f002 fd31 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8000f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fa0:	4a46      	ldr	r2, [pc, #280]	; (80010bc <HAL_I2C_MspInit+0x1c8>)
 8000fa2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000fa4:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fa6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fbe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd8:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fde:	4836      	ldr	r0, [pc, #216]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000fe0:	f001 fb9a 	bl	8002718 <HAL_DMA_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8000fea:	f7ff fec9 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ff4:	4a30      	ldr	r2, [pc, #192]	; (80010b8 <HAL_I2C_MspInit+0x1c4>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2021      	movs	r0, #33	; 0x21
 8001000:	f001 fa75 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001004:	2021      	movs	r0, #33	; 0x21
 8001006:	f001 fa8e 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800100a:	e04a      	b.n	80010a2 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C4)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <HAL_I2C_MspInit+0x1cc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d145      	bne.n	80010a2 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fcc0 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_MspInit+0x142>
      Error_Handler();
 8001032:	f7ff fea5 	bl	8000d80 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800104e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	2312      	movs	r3, #18
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105c:	2301      	movs	r3, #1
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001068:	2304      	movs	r3, #4
 800106a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800106e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001072:	4619      	mov	r1, r3
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <HAL_I2C_MspInit+0x1c0>)
 8001076:	f002 fcb7 	bl	80039e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8001080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_I2C_MspInit+0x1bc>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	205f      	movs	r0, #95	; 0x5f
 8001098:	f001 fa29 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800109c:	205f      	movs	r0, #95	; 0x5f
 800109e:	f001 fa42 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	37b0      	adds	r7, #176	; 0xb0
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40005800 	.word	0x40005800
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40021400 	.word	0x40021400
 80010b8:	200002d4 	.word	0x200002d4
 80010bc:	40026040 	.word	0x40026040
 80010c0:	40006000 	.word	0x40006000

080010c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a4      	sub	sp, #144	; 0x90
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2284      	movs	r2, #132	; 0x84
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f011 ff9c 	bl	8013012 <memset>
  if(hrtc->Instance==RTC)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_RTC_MspInit+0x64>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d11c      	bne.n	800111e <HAL_RTC_MspInit+0x5a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010e4:	2320      	movs	r3, #32
 80010e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fc5a 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80010fe:	f7ff fe3f 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_RTC_MspInit+0x68>)
 8001104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_RTC_MspInit+0x68>)
 8001108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110c:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2003      	movs	r0, #3
 8001114:	f001 f9eb 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001118:	2003      	movs	r0, #3
 800111a:	f001 fa04 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3790      	adds	r7, #144	; 0x90
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40002800 	.word	0x40002800
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a92      	ldr	r2, [pc, #584]	; (8001398 <HAL_SPI_MspInit+0x268>)
 800114e:	4293      	cmp	r3, r2
 8001150:	f040 808c 	bne.w	800126c <HAL_SPI_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001154:	4b91      	ldr	r3, [pc, #580]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	4a90      	ldr	r2, [pc, #576]	; (800139c <HAL_SPI_MspInit+0x26c>)
 800115a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800115e:	6453      	str	r3, [r2, #68]	; 0x44
 8001160:	4b8e      	ldr	r3, [pc, #568]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001168:	623b      	str	r3, [r7, #32]
 800116a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b8b      	ldr	r3, [pc, #556]	; (800139c <HAL_SPI_MspInit+0x26c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4a8a      	ldr	r2, [pc, #552]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6313      	str	r3, [r2, #48]	; 0x30
 8001178:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_SPI_MspInit+0x26c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b85      	ldr	r3, [pc, #532]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a84      	ldr	r2, [pc, #528]	; (800139c <HAL_SPI_MspInit+0x26c>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b82      	ldr	r3, [pc, #520]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA15     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800119c:	2320      	movs	r3, #32
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ac:	2305      	movs	r3, #5
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	487a      	ldr	r0, [pc, #488]	; (80013a0 <HAL_SPI_MspInit+0x270>)
 80011b8:	f002 fc16 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 80011bc:	f248 0340 	movw	r3, #32832	; 0x8040
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ce:	2305      	movs	r3, #5
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4871      	ldr	r0, [pc, #452]	; (80013a0 <HAL_SPI_MspInit+0x270>)
 80011da:	f002 fc05 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011de:	2320      	movs	r3, #32
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ee:	2305      	movs	r3, #5
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	486a      	ldr	r0, [pc, #424]	; (80013a4 <HAL_SPI_MspInit+0x274>)
 80011fa:	f002 fbf5 	bl	80039e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80011fe:	4b6a      	ldr	r3, [pc, #424]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001200:	4a6a      	ldr	r2, [pc, #424]	; (80013ac <HAL_SPI_MspInit+0x27c>)
 8001202:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001204:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001206:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800120a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120c:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001220:	4b61      	ldr	r3, [pc, #388]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001226:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800122c:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001232:	4b5d      	ldr	r3, [pc, #372]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001238:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800123e:	485a      	ldr	r0, [pc, #360]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001240:	f001 fa6a 	bl	8002718 <HAL_DMA_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 800124a:	f7ff fd99 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a55      	ldr	r2, [pc, #340]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001252:	659a      	str	r2, [r3, #88]	; 0x58
 8001254:	4a54      	ldr	r2, [pc, #336]	; (80013a8 <HAL_SPI_MspInit+0x278>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2023      	movs	r0, #35	; 0x23
 8001260:	f001 f945 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001264:	2023      	movs	r0, #35	; 0x23
 8001266:	f001 f95e 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800126a:	e090      	b.n	800138e <HAL_SPI_MspInit+0x25e>
  else if(hspi->Instance==SPI2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a4f      	ldr	r2, [pc, #316]	; (80013b0 <HAL_SPI_MspInit+0x280>)
 8001272:	4293      	cmp	r3, r2
 8001274:	f040 808b 	bne.w	800138e <HAL_SPI_MspInit+0x25e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <HAL_SPI_MspInit+0x26c>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_SPI_MspInit+0x26c>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b45      	ldr	r3, [pc, #276]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a41      	ldr	r2, [pc, #260]	; (800139c <HAL_SPI_MspInit+0x26c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <HAL_SPI_MspInit+0x26c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b3c      	ldr	r3, [pc, #240]	; (800139c <HAL_SPI_MspInit+0x26c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a3b      	ldr	r2, [pc, #236]	; (800139c <HAL_SPI_MspInit+0x26c>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <HAL_SPI_MspInit+0x26c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c0:	230c      	movs	r3, #12
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d0:	2305      	movs	r3, #5
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	4836      	ldr	r0, [pc, #216]	; (80013b4 <HAL_SPI_MspInit+0x284>)
 80012dc:	f002 fb84 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012f2:	2305      	movs	r3, #5
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4829      	ldr	r0, [pc, #164]	; (80013a4 <HAL_SPI_MspInit+0x274>)
 80012fe:	f002 fb73 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001314:	2305      	movs	r3, #5
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <HAL_SPI_MspInit+0x274>)
 8001320:	f002 fb62 	bl	80039e8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_SPI_MspInit+0x28c>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 800133e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001342:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001364:	f001 f9d8 	bl	8002718 <HAL_DMA_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_SPI_MspInit+0x242>
      Error_Handler();
 800136e:	f7ff fd07 	bl	8000d80 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 8001376:	659a      	str	r2, [r3, #88]	; 0x58
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_SPI_MspInit+0x288>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2024      	movs	r0, #36	; 0x24
 8001384:	f001 f8b3 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001388:	2024      	movs	r0, #36	; 0x24
 800138a:	f001 f8cc 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40013000 	.word	0x40013000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	2000041c 	.word	0x2000041c
 80013ac:	40026410 	.word	0x40026410
 80013b0:	40003800 	.word	0x40003800
 80013b4:	40020800 	.word	0x40020800
 80013b8:	2000047c 	.word	0x2000047c
 80013bc:	40026058 	.word	0x40026058

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d113      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_TIM_Base_MspInit+0x48>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_TIM_Base_MspInit+0x48>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_TIM_Base_MspInit+0x48>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2036      	movs	r0, #54	; 0x36
 80013f0:	f001 f87d 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f4:	2036      	movs	r0, #54	; 0x36
 80013f6:	f001 f896 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40001000 	.word	0x40001000
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0b0      	sub	sp, #192	; 0xc0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001428:	2284      	movs	r2, #132	; 0x84
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f011 fdf0 	bl	8013012 <memset>
  if(huart->Instance==UART5)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4aab      	ldr	r2, [pc, #684]	; (80016e4 <HAL_UART_MspInit+0x2d8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	f040 8095 	bne.w	8001568 <HAL_UART_MspInit+0x15c>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001444:	2300      	movs	r3, #0
 8001446:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f003 faad 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001458:	f7ff fc92 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800145c:	4ba2      	ldr	r3, [pc, #648]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4aa1      	ldr	r2, [pc, #644]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b9f      	ldr	r3, [pc, #636]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	4b9c      	ldr	r3, [pc, #624]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	4a9b      	ldr	r2, [pc, #620]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	6313      	str	r3, [r2, #48]	; 0x30
 8001480:	4b99      	ldr	r3, [pc, #612]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	623b      	str	r3, [r7, #32]
 800148a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148c:	4b96      	ldr	r3, [pc, #600]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a95      	ldr	r2, [pc, #596]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b93      	ldr	r3, [pc, #588]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014be:	2308      	movs	r3, #8
 80014c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014c8:	4619      	mov	r1, r3
 80014ca:	4888      	ldr	r0, [pc, #544]	; (80016ec <HAL_UART_MspInit+0x2e0>)
 80014cc:	f002 fa8c 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d0:	2304      	movs	r3, #4
 80014d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014dc:	2301      	movs	r3, #1
 80014de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014e8:	2308      	movs	r3, #8
 80014ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014f2:	4619      	mov	r1, r3
 80014f4:	487e      	ldr	r0, [pc, #504]	; (80016f0 <HAL_UART_MspInit+0x2e4>)
 80014f6:	f002 fa77 	bl	80039e8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80014fa:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 80014fc:	4a7e      	ldr	r2, [pc, #504]	; (80016f8 <HAL_UART_MspInit+0x2ec>)
 80014fe:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001500:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 8001502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001506:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001508:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	4b77      	ldr	r3, [pc, #476]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 8001516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151c:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001528:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800152e:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001534:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800153a:	486e      	ldr	r0, [pc, #440]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 800153c:	f001 f8ec 	bl	8002718 <HAL_DMA_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001546:	f7ff fc1b 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a69      	ldr	r2, [pc, #420]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 800154e:	675a      	str	r2, [r3, #116]	; 0x74
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_UART_MspInit+0x2e8>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2035      	movs	r0, #53	; 0x35
 800155c:	f000 ffc7 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001560:	2035      	movs	r0, #53	; 0x35
 8001562:	f000 ffe0 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001566:	e0b8      	b.n	80016da <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==USART2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a63      	ldr	r2, [pc, #396]	; (80016fc <HAL_UART_MspInit+0x2f0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d171      	bne.n	8001656 <HAL_UART_MspInit+0x24a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001576:	2300      	movs	r3, #0
 8001578:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fa14 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_UART_MspInit+0x182>
      Error_Handler();
 800158a:	f7ff fbf9 	bl	8000d80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a55      	ldr	r2, [pc, #340]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a4f      	ldr	r2, [pc, #316]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015be:	2360      	movs	r3, #96	; 0x60
 80015c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d6:	2307      	movs	r3, #7
 80015d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015e0:	4619      	mov	r1, r3
 80015e2:	4843      	ldr	r0, [pc, #268]	; (80016f0 <HAL_UART_MspInit+0x2e4>)
 80015e4:	f002 fa00 	bl	80039e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 80015ea:	4a46      	ldr	r2, [pc, #280]	; (8001704 <HAL_UART_MspInit+0x2f8>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015ee:	4b44      	ldr	r3, [pc, #272]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 80015f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f6:	4b42      	ldr	r3, [pc, #264]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 8001604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001608:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001616:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001628:	4835      	ldr	r0, [pc, #212]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 800162a:	f001 f875 	bl	8002718 <HAL_DMA_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001634:	f7ff fba4 	bl	8000d80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 800163c:	675a      	str	r2, [r3, #116]	; 0x74
 800163e:	4a30      	ldr	r2, [pc, #192]	; (8001700 <HAL_UART_MspInit+0x2f4>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2026      	movs	r0, #38	; 0x26
 800164a:	f000 ff50 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800164e:	2026      	movs	r0, #38	; 0x26
 8001650:	f000 ff69 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 8001654:	e041      	b.n	80016da <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==USART3)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2b      	ldr	r2, [pc, #172]	; (8001708 <HAL_UART_MspInit+0x2fc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d13c      	bne.n	80016da <HAL_UART_MspInit+0x2ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001666:	2300      	movs	r3, #0
 8001668:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f99c 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_UART_MspInit+0x272>
      Error_Handler();
 800167a:	f7ff fb81 	bl	8000d80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_UART_MspInit+0x2dc>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c8:	2307      	movs	r3, #7
 80016ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016d2:	4619      	mov	r1, r3
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <HAL_UART_MspInit+0x2e4>)
 80016d6:	f002 f987 	bl	80039e8 <HAL_GPIO_Init>
}
 80016da:	bf00      	nop
 80016dc:	37c0      	adds	r7, #192	; 0xc0
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40005000 	.word	0x40005000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	200006c0 	.word	0x200006c0
 80016f8:	40026010 	.word	0x40026010
 80016fc:	40004400 	.word	0x40004400
 8001700:	20000720 	.word	0x20000720
 8001704:	40026088 	.word	0x40026088
 8001708:	40004800 	.word	0x40004800

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f9de 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <RTC_WKUP_IRQHandler+0x10>)
 8001766:	f003 fed9 	bl	800551c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000334 	.word	0x20000334

08001774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Stream0_IRQHandler+0x10>)
 800177a:	f001 f90d 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200006c0 	.word	0x200006c0

08001788 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Stream2_IRQHandler+0x10>)
 800178e:	f001 f903 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002d4 	.word	0x200002d4

0800179c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Stream3_IRQHandler+0x10>)
 80017a2:	f001 f8f9 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000047c 	.word	0x2000047c

080017b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Stream5_IRQHandler+0x10>)
 80017b6:	f001 f8ef 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000720 	.word	0x20000720

080017c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <ADC_IRQHandler+0x10>)
 80017ca:	f000 fa2d 	bl	8001c28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001d0 	.word	0x200001d0

080017d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <I2C2_EV_IRQHandler+0x10>)
 80017de:	f002 fb59 	bl	8003e94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000022c 	.word	0x2000022c

080017ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <SPI1_IRQHandler+0x10>)
 80017f2:	f003 ff95 	bl	8005720 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000354 	.word	0x20000354

08001800 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <SPI2_IRQHandler+0x10>)
 8001806:	f003 ff8b 	bl	8005720 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200003b8 	.word	0x200003b8

08001814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USART2_IRQHandler+0x10>)
 800181a:	f004 fbd7 	bl	8005fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200005b0 	.word	0x200005b0

08001828 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <UART5_IRQHandler+0x10>)
 800182e:	f004 fbcd 	bl	8005fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000528 	.word	0x20000528

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <TIM6_DAC_IRQHandler+0x14>)
 8001842:	f000 feac 	bl	800259e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001846:	4803      	ldr	r0, [pc, #12]	; (8001854 <TIM6_DAC_IRQHandler+0x18>)
 8001848:	f004 f8d4 	bl	80059f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000218 	.word	0x20000218
 8001854:	200004dc 	.word	0x200004dc

08001858 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <DMA2_Stream0_IRQHandler+0x10>)
 800185e:	f001 f89b 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000041c 	.word	0x2000041c

0800186c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <ETH_IRQHandler+0x10>)
 8001872:	f001 fbe7 	bl	8003044 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20005154 	.word	0x20005154

08001880 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <I2C4_EV_IRQHandler+0x10>)
 8001886:	f002 fb05 	bl	8003e94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000280 	.word	0x20000280

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_kill>:

int _kill(int pid, int sig)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <_kill+0x20>)
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	20008a98 	.word	0x20008a98

080018c8 <_exit>:

void _exit (int status)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffe5 	bl	80018a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018da:	e7fe      	b.n	80018da <_exit+0x12>

080018dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e00a      	b.n	8001904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ee:	f3af 8000 	nop.w
 80018f2:	4601      	mov	r1, r0
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	b2ca      	uxtb	r2, r1
 80018fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf0      	blt.n	80018ee <_read+0x12>
  }

  return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e009      	b.n	800193c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbf1      	blt.n	8001928 <_write+0x12>
  }
  return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_close>:

int _close(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001976:	605a      	str	r2, [r3, #4]
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_isatty>:

int _isatty(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d205      	bcs.n	80019f4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <_sbrk+0x6c>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	20050000 	.word	0x20050000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	20000780 	.word	0x20000780
 8001a20:	20008aa8 	.word	0x20008aa8
 8001a24:	20008a98 	.word	0x20008a98

08001a28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a68:	4c0b      	ldr	r4, [pc, #44]	; (8001a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a76:	f7ff ffd7 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f011 fb19 	bl	80130b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7e:	f7fe fd95 	bl	80005ac <main>
  bx  lr    
 8001a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a90:	08016d10 	.word	0x08016d10
  ldr r2, =_sbss
 8001a94:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001a98:	20008aa8 	.word	0x20008aa8

08001a9c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <CAN1_RX0_IRQHandler>

08001a9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f000 fd18 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f000 f805 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aae:	f7ff f96d 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd33 	bl	8002542 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 fcfb 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000784 	.word	0x20000784

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000784 	.word	0x20000784

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e031      	b.n	8001c1a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff f908 	bl	8000dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_ADC_Init+0x84>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	f043 0202 	orr.w	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fa9e 	bl	8002130 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
 8001c0a:	e001      	b.n	8001c10 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	ffffeefd 	.word	0xffffeefd

08001c28 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d049      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0xca>
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d046      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d12b      	bne.n	8001ce2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d127      	bne.n	8001ce2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d119      	bne.n	8001ce2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0220 	bic.w	r2, r2, #32
 8001cbc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8b0 	bl	8001e48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0212 	mvn.w	r2, #18
 8001cf0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d057      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x190>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d054      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d139      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d124      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11d      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d119      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fabb 	bl	8002324 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 020c 	mvn.w	r2, #12
 8001db6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d017      	beq.n	8001dfe <HAL_ADC_IRQHandler+0x1d6>
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d014      	beq.n	8001dfe <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10d      	bne.n	8001dfe <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f834 	bl	8001e5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0201 	mvn.w	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d015      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x218>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d012      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f06f 0220 	mvn.w	r2, #32
 8001e2e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f81d 	bl	8001e70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f06f 0220 	mvn.w	r2, #32
 8001e3e:	601a      	str	r2, [r3, #0]
  }
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1c>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e136      	b.n	800210e <HAL_ADC_ConfigChannel+0x28a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	d93a      	bls.n	8001f26 <HAL_ADC_ConfigChannel+0xa2>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eb8:	d035      	beq.n	8001f26 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68d9      	ldr	r1, [r3, #12]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b1e      	subs	r3, #30
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	400a      	ands	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a8d      	ldr	r2, [pc, #564]	; (800211c <HAL_ADC_ConfigChannel+0x298>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10a      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68d9      	ldr	r1, [r3, #12]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	061a      	lsls	r2, r3, #24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001efe:	e035      	b.n	8001f6c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68d9      	ldr	r1, [r3, #12]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4403      	add	r3, r0
 8001f18:	3b1e      	subs	r3, #30
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f24:	e022      	b.n	8001f6c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6919      	ldr	r1, [r3, #16]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43da      	mvns	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	400a      	ands	r2, r1
 8001f48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6919      	ldr	r1, [r3, #16]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4403      	add	r3, r0
 8001f62:	409a      	lsls	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b06      	cmp	r3, #6
 8001f72:	d824      	bhi.n	8001fbe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b05      	subs	r3, #5
 8001f86:	221f      	movs	r2, #31
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	3b05      	subs	r3, #5
 8001fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34
 8001fbc:	e04c      	b.n	8002058 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d824      	bhi.n	8002010 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b23      	subs	r3, #35	; 0x23
 8001fd8:	221f      	movs	r2, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	3b23      	subs	r3, #35	; 0x23
 8002002:	fa00 f203 	lsl.w	r2, r0, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
 800200e:	e023      	b.n	8002058 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b41      	subs	r3, #65	; 0x41
 8002022:	221f      	movs	r2, #31
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43da      	mvns	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	400a      	ands	r2, r1
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b41      	subs	r3, #65	; 0x41
 800204c:	fa00 f203 	lsl.w	r2, r0, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a30      	ldr	r2, [pc, #192]	; (8002120 <HAL_ADC_ConfigChannel+0x29c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1f4>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800206a:	d105      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 8002072:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002076:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_ADC_ConfigChannel+0x29c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10f      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x21e>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b12      	cmp	r3, #18
 8002088:	d10b      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 8002090:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002094:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4a22      	ldr	r2, [pc, #136]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 800209c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_ADC_ConfigChannel+0x29c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d12b      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x280>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_ADC_ConfigChannel+0x298>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <HAL_ADC_ConfigChannel+0x23a>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b11      	cmp	r3, #17
 80020bc:	d122      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 80020c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020c8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4a15      	ldr	r2, [pc, #84]	; (8002124 <HAL_ADC_ConfigChannel+0x2a0>)
 80020d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_ADC_ConfigChannel+0x298>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d111      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_ADC_ConfigChannel+0x2a4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_ADC_ConfigChannel+0x2a8>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9a      	lsrs	r2, r3, #18
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020f6:	e002      	b.n	80020fe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f9      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	10000012 	.word	0x10000012
 8002120:	40012000 	.word	0x40012000
 8002124:	40012300 	.word	0x40012300
 8002128:	20000000 	.word	0x20000000
 800212c:	431bde83 	.word	0x431bde83

08002130 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002138:	4b78      	ldr	r3, [pc, #480]	; (800231c <ADC_Init+0x1ec>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a77      	ldr	r2, [pc, #476]	; (800231c <ADC_Init+0x1ec>)
 800213e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002142:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002144:	4b75      	ldr	r3, [pc, #468]	; (800231c <ADC_Init+0x1ec>)
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4973      	ldr	r1, [pc, #460]	; (800231c <ADC_Init+0x1ec>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <ADC_Init+0x1f0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e00f      	b.n	800222a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002228:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0202 	bic.w	r2, r2, #2
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	005a      	lsls	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002266:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	3b01      	subs	r3, #1
 8002284:	035a      	lsls	r2, r3, #13
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e007      	b.n	80022a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	051a      	lsls	r2, r3, #20
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e2:	025a      	lsls	r2, r3, #9
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	029a      	lsls	r2, r3, #10
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40012300 	.word	0x40012300
 8002320:	0f000001 	.word	0x0f000001

08002324 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <__NVIC_SetPriorityGrouping+0x40>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	4313      	orrs	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <__NVIC_SetPriorityGrouping+0x40>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00
 800237c:	05fa0000 	.word	0x05fa0000

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e014      	b.n	8002596 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe fc71 	bl	8000e64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b4:	d120      	bne.n	80025f8 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c4:	d118      	bne.n	80025f8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2204      	movs	r2, #4
 80025ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f82d 	bl	8002652 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002606:	d120      	bne.n	800264a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002616:	d118      	bne.n	800264a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2204      	movs	r2, #4
 800261c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002642:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f85d 	bl	8002704 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002666:	b480      	push	{r7}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	795b      	ldrb	r3, [r3, #5]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_DAC_ConfigChannel+0x18>
 800267a:	2302      	movs	r3, #2
 800267c:	e03c      	b.n	80026f8 <HAL_DAC_ConfigChannel+0x92>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2202      	movs	r2, #2
 8002688:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	f640 72fe 	movw	r2, #4094	; 0xffe
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	22c0      	movs	r2, #192	; 0xc0
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff fa0c 	bl	8001b40 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e099      	b.n	8002868 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002754:	e00f      	b.n	8002776 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002756:	f7ff f9f3 	bl	8001b40 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b05      	cmp	r3, #5
 8002762:	d908      	bls.n	8002776 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2203      	movs	r2, #3
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e078      	b.n	8002868 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e8      	bne.n	8002756 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_DMA_Init+0x158>)
 8002790:	4013      	ands	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d107      	bne.n	80027e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	4313      	orrs	r3, r2
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0307 	bic.w	r3, r3, #7
 80027f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	2b04      	cmp	r3, #4
 8002808:	d117      	bne.n	800283a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fa7b 	bl	8002d18 <DMA_CheckFifoParam>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002836:	2301      	movs	r3, #1
 8002838:	e016      	b.n	8002868 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa32 	bl	8002cac <DMA_CalcBaseAndBitshift>
 8002848:	4603      	mov	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	223f      	movs	r2, #63	; 0x3f
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	f010803f 	.word	0xf010803f

08002874 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002882:	f7ff f95d 	bl	8001b40 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d008      	beq.n	80028a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e052      	b.n	800294c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0216 	bic.w	r2, r2, #22
 80028b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <HAL_DMA_Abort+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0208 	bic.w	r2, r2, #8
 80028e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f6:	e013      	b.n	8002920 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f8:	f7ff f922 	bl	8001b40 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b05      	cmp	r3, #5
 8002904:	d90c      	bls.n	8002920 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2203      	movs	r2, #3
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e015      	b.n	800294c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e4      	bne.n	80028f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	223f      	movs	r2, #63	; 0x3f
 8002934:	409a      	lsls	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e00c      	b.n	800298c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2205      	movs	r2, #5
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029a4:	4b8e      	ldr	r3, [pc, #568]	; (8002be0 <HAL_DMA_IRQHandler+0x248>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a8e      	ldr	r2, [pc, #568]	; (8002be4 <HAL_DMA_IRQHandler+0x24c>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2208      	movs	r2, #8
 80029c4:	409a      	lsls	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01a      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	2208      	movs	r2, #8
 80029f2:	409a      	lsls	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2201      	movs	r2, #1
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2201      	movs	r2, #1
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0202 	orr.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2204      	movs	r2, #4
 8002a40:	409a      	lsls	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f043 0204 	orr.w	r2, r3, #4
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2210      	movs	r2, #16
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d043      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d03c      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	2210      	movs	r2, #16
 8002a94:	409a      	lsls	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d018      	beq.n	8002ada <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d108      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d024      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
 8002ac6:	e01f      	b.n	8002b08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01b      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
 8002ad8:	e016      	b.n	8002b08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0208 	bic.w	r2, r2, #8
 8002af6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 808f 	beq.w	8002c38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8087 	beq.w	8002c38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	2220      	movs	r2, #32
 8002b30:	409a      	lsls	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d136      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0216 	bic.w	r2, r2, #22
 8002b50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <HAL_DMA_IRQHandler+0x1da>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0208 	bic.w	r2, r2, #8
 8002b80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	223f      	movs	r2, #63	; 0x3f
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d07e      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
        }
        return;
 8002bae:	e079      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01d      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d031      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	e02c      	b.n	8002c38 <HAL_DMA_IRQHandler+0x2a0>
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000
 8002be4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d023      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
 8002bf8:	e01e      	b.n	8002c38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10f      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0210 	bic.w	r2, r2, #16
 8002c16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d032      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2205      	movs	r2, #5
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	3301      	adds	r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d307      	bcc.n	8002c80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f2      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x2cc>
 8002c7e:	e000      	b.n	8002c82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
 8002ca2:	e000      	b.n	8002ca6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ca4:	bf00      	nop
    }
  }
}
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	3b10      	subs	r3, #16
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <DMA_CalcBaseAndBitshift+0x60>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <DMA_CalcBaseAndBitshift+0x64>)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d908      	bls.n	8002cec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <DMA_CalcBaseAndBitshift+0x68>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	1d1a      	adds	r2, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
 8002cea:	e006      	b.n	8002cfa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <DMA_CalcBaseAndBitshift+0x68>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	aaaaaaab 	.word	0xaaaaaaab
 8002d10:	08016b18 	.word	0x08016b18
 8002d14:	fffffc00 	.word	0xfffffc00

08002d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11f      	bne.n	8002d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d856      	bhi.n	8002de6 <DMA_CheckFifoParam+0xce>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <DMA_CheckFifoParam+0x28>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d63 	.word	0x08002d63
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	08002de7 	.word	0x08002de7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d046      	beq.n	8002dea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d60:	e043      	b.n	8002dea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d6a:	d140      	bne.n	8002dee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d70:	e03d      	b.n	8002dee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d121      	bne.n	8002dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d837      	bhi.n	8002df2 <DMA_CheckFifoParam+0xda>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <DMA_CheckFifoParam+0x70>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002d9f 	.word	0x08002d9f
 8002d90:	08002d99 	.word	0x08002d99
 8002d94:	08002db1 	.word	0x08002db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e030      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d025      	beq.n	8002df6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dae:	e022      	b.n	8002df6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002db8:	d11f      	bne.n	8002dfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dbe:	e01c      	b.n	8002dfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d903      	bls.n	8002dce <DMA_CheckFifoParam+0xb6>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d003      	beq.n	8002dd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dcc:	e018      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd2:	e015      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e00b      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;
 8002de6:	bf00      	nop
 8002de8:	e00a      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002dea:	bf00      	nop
 8002dec:	e008      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002dee:	bf00      	nop
 8002df0:	e006      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002df2:	bf00      	nop
 8002df4:	e004      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06a      	b.n	8002ef8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2223      	movs	r2, #35	; 0x23
 8002e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f867 	bl	8002f08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <HAL_ETH_Init+0xf0>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <HAL_ETH_Init+0xf0>)
 8002e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e44:	6453      	str	r3, [r2, #68]	; 0x44
 8002e46:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_ETH_Init+0xf0>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e5c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e5e:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4927      	ldr	r1, [pc, #156]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_ETH_Init+0xf4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7fe fe5a 	bl	8001b40 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e8e:	e011      	b.n	8002eb4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e90:	f7fe fe56 	bl	8001b40 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e9e:	d909      	bls.n	8002eb4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	22e0      	movs	r2, #224	; 0xe0
 8002eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e021      	b.n	8002ef8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e4      	bne.n	8002e90 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 faea 	bl	80034a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fb91 	bl	80035f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fbe7 	bl	80036a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	461a      	mov	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb4f 	bl	8003584 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40013800 	.word	0x40013800

08002f08 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07c      	b.n	800303c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f48:	2b23      	cmp	r3, #35	; 0x23
 8002f4a:	d176      	bne.n	800303a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fc15 	bl	8003780 <ETH_Prepare_Tx_Descriptors>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f043 0202 	orr.w	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e065      	b.n	800303c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f70:	f3bf 8f4f 	dsb	sy
}
 8002f74:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3206      	adds	r2, #6
 8002f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f82:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d904      	bls.n	8002fa0 <HAL_ETH_Transmit+0x84>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	1f1a      	subs	r2, r3, #4
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3106      	adds	r1, #6
 8002fac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fb4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002fb6:	f7fe fdc3 	bl	8001b40 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002fbc:	e037      	b.n	800302e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d011      	beq.n	8002ff4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f043 0208 	orr.w	r2, r3, #8
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e023      	b.n	800303c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d018      	beq.n	800302e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ffc:	f7fe fda0 	bl	8001b40 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d302      	bcc.n	8003012 <HAL_ETH_Transmit+0xf6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003028:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e006      	b.n	800303c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	dbc3      	blt.n	8002fbe <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
  }
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d112      	bne.n	8003084 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d109      	bne.n	8003084 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003078:	461a      	mov	r2, r3
 800307a:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_ETH_IRQHandler+0x178>)
 800307c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8ac 	bl	80031dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d113      	bne.n	80030be <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10a      	bne.n	80030be <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b0:	461a      	mov	r2, r3
 80030b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80030b6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f885 	bl	80031c8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	d14c      	bne.n	800316c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e4:	d142      	bne.n	800316c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f043 0208 	orr.w	r2, r3, #8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d11a      	bne.n	8003140 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_ETH_IRQHandler+0x17c>)
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003130:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003134:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	22e0      	movs	r2, #224	; 0xe0
 800313a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800313e:	e012      	b.n	8003166 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	f248 6380 	movw	r3, #34432	; 0x8680
 800314e:	4013      	ands	r3, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315e:	461a      	mov	r2, r3
 8003160:	f248 6380 	movw	r3, #34432	; 0x8680
 8003164:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f842 	bl	80031f0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b08      	cmp	r3, #8
 8003178:	d10e      	bne.n	8003198 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f83a 	bl	8003204 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_ETH_IRQHandler+0x180>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d006      	beq.n	80031b2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <HAL_ETH_IRQHandler+0x180>)
 80031a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031aa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f833 	bl	8003218 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	00010040 	.word	0x00010040
 80031c0:	007e2000 	.word	0x007e2000
 80031c4:	40013c00 	.word	0x40013c00

080031c8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4b51      	ldr	r3, [pc, #324]	; (8003388 <ETH_SetMACConfig+0x15c>)
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	7c1b      	ldrb	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <ETH_SetMACConfig+0x28>
 800324e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003252:	e000      	b.n	8003256 <ETH_SetMACConfig+0x2a>
 8003254:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7c5b      	ldrb	r3, [r3, #17]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <ETH_SetMACConfig+0x38>
 800325e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003262:	e000      	b.n	8003266 <ETH_SetMACConfig+0x3a>
 8003264:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003266:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800326c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	7fdb      	ldrb	r3, [r3, #31]
 8003272:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003274:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800327a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	7f92      	ldrb	r2, [r2, #30]
 8003280:	2a00      	cmp	r2, #0
 8003282:	d102      	bne.n	800328a <ETH_SetMACConfig+0x5e>
 8003284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003288:	e000      	b.n	800328c <ETH_SetMACConfig+0x60>
 800328a:	2200      	movs	r2, #0
                        macconf->Speed |
 800328c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	7f1b      	ldrb	r3, [r3, #28]
 8003292:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003294:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800329a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	791b      	ldrb	r3, [r3, #4]
 80032a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80032a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	d102      	bne.n	80032b4 <ETH_SetMACConfig+0x88>
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	e000      	b.n	80032b6 <ETH_SetMACConfig+0x8a>
 80032b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	7bdb      	ldrb	r3, [r3, #15]
 80032bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032ce:	4313      	orrs	r3, r2
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7fe fc36 	bl	8001b58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003302:	4013      	ands	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003312:	2a00      	cmp	r2, #0
 8003314:	d101      	bne.n	800331a <ETH_SetMACConfig+0xee>
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	e000      	b.n	800331c <ETH_SetMACConfig+0xf0>
 800331a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800331c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800332a:	2a01      	cmp	r2, #1
 800332c:	d101      	bne.n	8003332 <ETH_SetMACConfig+0x106>
 800332e:	2208      	movs	r2, #8
 8003330:	e000      	b.n	8003334 <ETH_SetMACConfig+0x108>
 8003332:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003334:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800333c:	2a01      	cmp	r2, #1
 800333e:	d101      	bne.n	8003344 <ETH_SetMACConfig+0x118>
 8003340:	2204      	movs	r2, #4
 8003342:	e000      	b.n	8003346 <ETH_SetMACConfig+0x11a>
 8003344:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003346:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800334e:	2a01      	cmp	r2, #1
 8003350:	d101      	bne.n	8003356 <ETH_SetMACConfig+0x12a>
 8003352:	2202      	movs	r2, #2
 8003354:	e000      	b.n	8003358 <ETH_SetMACConfig+0x12c>
 8003356:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003358:	4313      	orrs	r3, r2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003370:	2001      	movs	r0, #1
 8003372:	f7fe fbf1 	bl	8001b58 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	ff20810f 	.word	0xff20810f

0800338c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4b3d      	ldr	r3, [pc, #244]	; (800349c <ETH_SetDMAConfig+0x110>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	7b1b      	ldrb	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <ETH_SetDMAConfig+0x2c>
 80033b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033b6:	e000      	b.n	80033ba <ETH_SetDMAConfig+0x2e>
 80033b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	7b5b      	ldrb	r3, [r3, #13]
 80033be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	7f52      	ldrb	r2, [r2, #29]
 80033c6:	2a00      	cmp	r2, #0
 80033c8:	d102      	bne.n	80033d0 <ETH_SetDMAConfig+0x44>
 80033ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ce:	e000      	b.n	80033d2 <ETH_SetDMAConfig+0x46>
 80033d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	7b9b      	ldrb	r3, [r3, #14]
 80033d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	7f1b      	ldrb	r3, [r3, #28]
 80033e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80033e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	7f9b      	ldrb	r3, [r3, #30]
 80033ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003400:	4313      	orrs	r3, r2
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003410:	461a      	mov	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003422:	2001      	movs	r0, #1
 8003424:	f7fe fb98 	bl	8001b58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003430:	461a      	mov	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	791b      	ldrb	r3, [r3, #4]
 800343a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003440:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003446:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800344c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003454:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003456:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800345e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003464:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800346e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003472:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003480:	2001      	movs	r0, #1
 8003482:	f7fe fb69 	bl	8001b58 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	f8de3f23 	.word	0xf8de3f23

080034a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b0a6      	sub	sp, #152	; 0x98
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80034b4:	2300      	movs	r3, #0
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034dc:	2300      	movs	r3, #0
 80034de:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003506:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800350c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003514:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fe86 	bl	800322c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003520:	2301      	movs	r3, #1
 8003522:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003524:	2301      	movs	r3, #1
 8003526:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800352e:	2301      	movs	r3, #1
 8003530:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800354c:	2301      	movs	r3, #1
 800354e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003554:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800355a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800355c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003560:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003568:	2300      	movs	r3, #0
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff08 	bl	800338c <ETH_SetDMAConfig>
}
 800357c:	bf00      	nop
 800357e:	3798      	adds	r7, #152	; 0x98
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3305      	adds	r3, #5
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	3204      	adds	r2, #4
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <ETH_MACAddressConfig+0x68>)
 80035a6:	4413      	add	r3, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3303      	adds	r3, #3
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	061a      	lsls	r2, r3, #24
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3302      	adds	r3, #2
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3301      	adds	r3, #1
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	4313      	orrs	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	7812      	ldrb	r2, [r2, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <ETH_MACAddressConfig+0x6c>)
 80035d6:	4413      	add	r3, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40028040 	.word	0x40028040
 80035f0:	40028044 	.word	0x40028044

080035f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e03e      	b.n	8003680 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68d9      	ldr	r1, [r3, #12]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2200      	movs	r2, #0
 800361e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	3206      	adds	r2, #6
 8003634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d80c      	bhi.n	8003664 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68d9      	ldr	r1, [r3, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	461a      	mov	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	e004      	b.n	800366e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3301      	adds	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d9bd      	bls.n	8003602 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003698:	611a      	str	r2, [r3, #16]
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	e046      	b.n	8003742 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6919      	ldr	r1, [r3, #16]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2200      	movs	r2, #0
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80036f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	3212      	adds	r2, #18
 800370e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d80c      	bhi.n	8003732 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6919      	ldr	r1, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	461a      	mov	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	e004      	b.n	800373c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	461a      	mov	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d9b5      	bls.n	80036b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003772:	60da      	str	r2, [r3, #12]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003780:	b480      	push	{r7}
 8003782:	b08d      	sub	sp, #52	; 0x34
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3318      	adds	r3, #24
 8003790:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037aa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c2:	d007      	beq.n	80037d4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	3304      	adds	r3, #4
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	e0ff      	b.n	80039d8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	3301      	adds	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4b7d      	ldr	r3, [pc, #500]	; (80039e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	6852      	ldr	r2, [r2, #4]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	431a      	orrs	r2, r3
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	431a      	orrs	r2, r3
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	601a      	str	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800385a:	f3bf 8f5f 	dmb	sy
}
 800385e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800386c:	e082      	b.n	8003974 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d006      	beq.n	800388e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e005      	b.n	800389a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	3301      	adds	r3, #1
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d902      	bls.n	80038ac <ETH_Prepare_Tx_Descriptors+0x12c>
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	3b04      	subs	r3, #4
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ce:	d007      	beq.n	80038e0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	3304      	adds	r3, #4
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d029      	beq.n	8003934 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ec:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f2:	e019      	b.n	8003928 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80038f4:	f3bf 8f5f 	dmb	sy
}
 80038f8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	3301      	adds	r3, #1
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	2b03      	cmp	r3, #3
 8003910:	d902      	bls.n	8003918 <ETH_Prepare_Tx_Descriptors+0x198>
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	3b04      	subs	r3, #4
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800391c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003920:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	3301      	adds	r3, #1
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
 8003928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	429a      	cmp	r2, r3
 800392e:	d3e1      	bcc.n	80038f4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003930:	2302      	movs	r3, #2
 8003932:	e051      	b.n	80039d8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	3301      	adds	r3, #1
 8003938:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003950:	4013      	ands	r3, r2
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	6852      	ldr	r2, [r2, #4]
 8003956:	431a      	orrs	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	3301      	adds	r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003962:	f3bf 8f5f 	dmb	sy
}
 8003966:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f af78 	bne.w	800386e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e005      	b.n	800399e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	3304      	adds	r3, #4
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039be:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c0:	b672      	cpsid	i
}
 80039c2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	4413      	add	r3, r2
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80039d2:	b662      	cpsie	i
}
 80039d4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3734      	adds	r7, #52	; 0x34
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	ffffe000 	.word	0xffffe000

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e175      	b.n	8003cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f040 8164 	bne.w	8003cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d005      	beq.n	8003a3e <HAL_GPIO_Init+0x56>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d130      	bne.n	8003aa0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 0201 	and.w	r2, r3, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d017      	beq.n	8003adc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d123      	bne.n	8003b30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	08da      	lsrs	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3208      	adds	r2, #8
 8003af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	220f      	movs	r2, #15
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80be 	beq.w	8003cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b72:	4b66      	ldr	r3, [pc, #408]	; (8003d0c <HAL_GPIO_Init+0x324>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	4a65      	ldr	r2, [pc, #404]	; (8003d0c <HAL_GPIO_Init+0x324>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_GPIO_Init+0x324>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b8a:	4a61      	ldr	r2, [pc, #388]	; (8003d10 <HAL_GPIO_Init+0x328>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <HAL_GPIO_Init+0x32c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d037      	beq.n	8003c26 <HAL_GPIO_Init+0x23e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a57      	ldr	r2, [pc, #348]	; (8003d18 <HAL_GPIO_Init+0x330>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_GPIO_Init+0x23a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a56      	ldr	r2, [pc, #344]	; (8003d1c <HAL_GPIO_Init+0x334>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x236>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a55      	ldr	r2, [pc, #340]	; (8003d20 <HAL_GPIO_Init+0x338>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x232>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	; (8003d24 <HAL_GPIO_Init+0x33c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x22e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a53      	ldr	r2, [pc, #332]	; (8003d28 <HAL_GPIO_Init+0x340>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x22a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a52      	ldr	r2, [pc, #328]	; (8003d2c <HAL_GPIO_Init+0x344>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x226>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <HAL_GPIO_Init+0x348>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x222>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <HAL_GPIO_Init+0x34c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x21e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	; (8003d38 <HAL_GPIO_Init+0x350>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x21a>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	e012      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c02:	230a      	movs	r3, #10
 8003c04:	e010      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c06:	2308      	movs	r3, #8
 8003c08:	e00e      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c26:	2300      	movs	r3, #0
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c38:	4935      	ldr	r1, [pc, #212]	; (8003d10 <HAL_GPIO_Init+0x328>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c46:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6a:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c94:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9a:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f ae86 	bls.w	8003a08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020c00 	.word	0x40020c00
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40021400 	.word	0x40021400
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021c00 	.word	0x40021c00
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40022400 	.word	0x40022400
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d50:	787b      	ldrb	r3, [r7, #1]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d5c:	e003      	b.n	8003d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	041a      	lsls	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e07f      	b.n	8003e86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd f8aa 	bl	8000ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2224      	movs	r2, #36	; 0x24
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	e006      	b.n	8003dfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d104      	bne.n	8003e0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_I2C_Init+0x11c>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	02008000 	.word	0x02008000

08003e94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d138      	bne.n	8003f50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e032      	b.n	8003f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6819      	ldr	r1, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d139      	bne.n	8003fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e033      	b.n	8003fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2224      	movs	r2, #36	; 0x24
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40007000 	.word	0x40007000

08004018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e291      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8087 	beq.w	800414a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800403c:	4b96      	ldr	r3, [pc, #600]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b04      	cmp	r3, #4
 8004046:	d00c      	beq.n	8004062 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004048:	4b93      	ldr	r3, [pc, #588]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d112      	bne.n	800407a <HAL_RCC_OscConfig+0x62>
 8004054:	4b90      	ldr	r3, [pc, #576]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004060:	d10b      	bne.n	800407a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004062:	4b8d      	ldr	r3, [pc, #564]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06c      	beq.n	8004148 <HAL_RCC_OscConfig+0x130>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d168      	bne.n	8004148 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e26b      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x7a>
 8004084:	4b84      	ldr	r3, [pc, #528]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a83      	ldr	r2, [pc, #524]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e02e      	b.n	80040f0 <HAL_RCC_OscConfig+0xd8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x9c>
 800409a:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7e      	ldr	r2, [pc, #504]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b7c      	ldr	r3, [pc, #496]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7b      	ldr	r2, [pc, #492]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e01d      	b.n	80040f0 <HAL_RCC_OscConfig+0xd8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0xc0>
 80040be:	4b76      	ldr	r3, [pc, #472]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a75      	ldr	r2, [pc, #468]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b73      	ldr	r3, [pc, #460]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a72      	ldr	r2, [pc, #456]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0xd8>
 80040d8:	4b6f      	ldr	r3, [pc, #444]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6e      	ldr	r2, [pc, #440]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b6c      	ldr	r3, [pc, #432]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6b      	ldr	r2, [pc, #428]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd fd22 	bl	8001b40 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fd fd1e 	bl	8001b40 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e21f      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b61      	ldr	r3, [pc, #388]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0xe8>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd fd0e 	bl	8001b40 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fd fd0a 	bl	8001b40 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e20b      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413a:	4b57      	ldr	r3, [pc, #348]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x110>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d069      	beq.n	800422a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004156:	4b50      	ldr	r3, [pc, #320]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b08      	cmp	r3, #8
 800416c:	d11c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x190>
 800416e:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x17a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d001      	beq.n	8004192 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e1df      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	493d      	ldr	r1, [pc, #244]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	e040      	b.n	800422a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d023      	beq.n	80041f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a38      	ldr	r2, [pc, #224]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd fcc0 	bl	8001b40 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fd fcbc 	bl	8001b40 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1bd      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d6:	4b30      	ldr	r3, [pc, #192]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4929      	ldr	r1, [pc, #164]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
 80041f6:	e018      	b.n	800422a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a26      	ldr	r2, [pc, #152]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fc9c 	bl	8001b40 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fd fc98 	bl	8001b40 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e199      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d038      	beq.n	80042a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d019      	beq.n	8004272 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423e:	4b16      	ldr	r3, [pc, #88]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	4a15      	ldr	r2, [pc, #84]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fd fc79 	bl	8001b40 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004252:	f7fd fc75 	bl	8001b40 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e176      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x23a>
 8004270:	e01a      	b.n	80042a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004276:	4a08      	ldr	r2, [pc, #32]	; (8004298 <HAL_RCC_OscConfig+0x280>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427e:	f7fd fc5f 	bl	8001b40 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004286:	f7fd fc5b 	bl	8001b40 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d903      	bls.n	800429c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e15c      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
 8004298:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	4b91      	ldr	r3, [pc, #580]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800429e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ee      	bne.n	8004286 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80a4 	beq.w	80043fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b6:	4b8b      	ldr	r3, [pc, #556]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10d      	bne.n	80042de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a87      	ldr	r2, [pc, #540]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
 80042ce:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042de:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <HAL_RCC_OscConfig+0x4d0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d118      	bne.n	800431c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042ea:	4b7f      	ldr	r3, [pc, #508]	; (80044e8 <HAL_RCC_OscConfig+0x4d0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7e      	ldr	r2, [pc, #504]	; (80044e8 <HAL_RCC_OscConfig+0x4d0>)
 80042f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fc23 	bl	8001b40 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fe:	f7fd fc1f 	bl	8001b40 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b64      	cmp	r3, #100	; 0x64
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e120      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004310:	4b75      	ldr	r3, [pc, #468]	; (80044e8 <HAL_RCC_OscConfig+0x4d0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x31a>
 8004324:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a6e      	ldr	r2, [pc, #440]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	e02d      	b.n	800438e <HAL_RCC_OscConfig+0x376>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x33c>
 800433a:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a69      	ldr	r2, [pc, #420]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
 8004346:	4b67      	ldr	r3, [pc, #412]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a66      	ldr	r2, [pc, #408]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800434c:	f023 0304 	bic.w	r3, r3, #4
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	e01c      	b.n	800438e <HAL_RCC_OscConfig+0x376>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b05      	cmp	r3, #5
 800435a:	d10c      	bne.n	8004376 <HAL_RCC_OscConfig+0x35e>
 800435c:	4b61      	ldr	r3, [pc, #388]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a60      	ldr	r2, [pc, #384]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004362:	f043 0304 	orr.w	r3, r3, #4
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
 8004368:	4b5e      	ldr	r3, [pc, #376]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4a5d      	ldr	r2, [pc, #372]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6713      	str	r3, [r2, #112]	; 0x70
 8004374:	e00b      	b.n	800438e <HAL_RCC_OscConfig+0x376>
 8004376:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a5a      	ldr	r2, [pc, #360]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
 8004382:	4b58      	ldr	r3, [pc, #352]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a57      	ldr	r2, [pc, #348]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004388:	f023 0304 	bic.w	r3, r3, #4
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d015      	beq.n	80043c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fd fbd3 	bl	8001b40 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fd fbcf 	bl	8001b40 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0ce      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ee      	beq.n	800439e <HAL_RCC_OscConfig+0x386>
 80043c0:	e014      	b.n	80043ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c2:	f7fd fbbd 	bl	8001b40 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd fbb9 	bl	8001b40 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0b8      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ee      	bne.n	80043ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f2:	4b3c      	ldr	r3, [pc, #240]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a3b      	ldr	r2, [pc, #236]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80043f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80a4 	beq.w	8004550 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d06b      	beq.n	80044ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d149      	bne.n	80044b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441c:	4b31      	ldr	r3, [pc, #196]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a30      	ldr	r2, [pc, #192]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd fb8a 	bl	8001b40 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7fd fb86 	bl	8001b40 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e087      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	3b01      	subs	r3, #1
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	4313      	orrs	r3, r2
 8004474:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800447a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 8004482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fb5a 	bl	8001b40 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fb56 	bl	8001b40 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e057      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a2:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x478>
 80044ae:	e04f      	b.n	8004550 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80044b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fd fb40 	bl	8001b40 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fd fb3c 	bl	8001b40 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e03d      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <HAL_RCC_OscConfig+0x4cc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4ac>
 80044e2:	e035      	b.n	8004550 <HAL_RCC_OscConfig+0x538>
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <HAL_RCC_OscConfig+0x544>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d028      	beq.n	800454c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d121      	bne.n	800454c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d11a      	bne.n	800454c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004522:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004524:	4293      	cmp	r3, r2
 8004526:	d111      	bne.n	800454c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	3b01      	subs	r3, #1
 8004536:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0d0      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004578:	4b6a      	ldr	r3, [pc, #424]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d910      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b67      	ldr	r3, [pc, #412]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 020f 	bic.w	r2, r3, #15
 800458e:	4965      	ldr	r1, [pc, #404]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b63      	ldr	r3, [pc, #396]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b8      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c0:	4b59      	ldr	r3, [pc, #356]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a58      	ldr	r2, [pc, #352]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d8:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a52      	ldr	r2, [pc, #328]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b50      	ldr	r3, [pc, #320]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	494d      	ldr	r1, [pc, #308]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d040      	beq.n	8004684 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d115      	bne.n	8004642 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e07f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d107      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004622:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e073      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e06b      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004642:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 0203 	bic.w	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4936      	ldr	r1, [pc, #216]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fd fa74 	bl	8001b40 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	e00a      	b.n	8004672 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fd fa70 	bl	8001b40 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e053      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 020c 	and.w	r2, r3, #12
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	429a      	cmp	r2, r3
 8004682:	d1eb      	bne.n	800465c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d210      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 020f 	bic.w	r2, r3, #15
 800469a:	4922      	ldr	r1, [pc, #136]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e032      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4916      	ldr	r1, [pc, #88]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490e      	ldr	r1, [pc, #56]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046f2:	f000 f821 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	490a      	ldr	r1, [pc, #40]	; (800472c <HAL_RCC_ClockConfig+0x1cc>)
 8004704:	5ccb      	ldrb	r3, [r1, r3]
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	4a09      	ldr	r2, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1d0>)
 800470c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1d4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fd f9d0 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023c00 	.word	0x40023c00
 8004728:	40023800 	.word	0x40023800
 800472c:	08016b00 	.word	0x08016b00
 8004730:	20000000 	.word	0x20000000
 8004734:	20000004 	.word	0x20000004

08004738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800473c:	b094      	sub	sp, #80	; 0x50
 800473e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	647b      	str	r3, [r7, #68]	; 0x44
 8004744:	2300      	movs	r3, #0
 8004746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004748:	2300      	movs	r3, #0
 800474a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004750:	4b79      	ldr	r3, [pc, #484]	; (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d00d      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x40>
 800475c:	2b08      	cmp	r3, #8
 800475e:	f200 80e1 	bhi.w	8004924 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x34>
 8004766:	2b04      	cmp	r3, #4
 8004768:	d003      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x3a>
 800476a:	e0db      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b73      	ldr	r3, [pc, #460]	; (800493c <HAL_RCC_GetSysClockFreq+0x204>)
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004770:	e0db      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004772:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_RCC_GetSysClockFreq+0x208>)
 8004774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004776:	e0d8      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4b6f      	ldr	r3, [pc, #444]	; (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004780:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004782:	4b6d      	ldr	r3, [pc, #436]	; (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478e:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	2200      	movs	r2, #0
 8004796:	63bb      	str	r3, [r7, #56]	; 0x38
 8004798:	63fa      	str	r2, [r7, #60]	; 0x3c
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
 80047a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	0159      	lsls	r1, r3, #5
 80047b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047bc:	0150      	lsls	r0, r2, #5
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4621      	mov	r1, r4
 80047c4:	1a51      	subs	r1, r2, r1
 80047c6:	6139      	str	r1, [r7, #16]
 80047c8:	4629      	mov	r1, r5
 80047ca:	eb63 0301 	sbc.w	r3, r3, r1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047dc:	4659      	mov	r1, fp
 80047de:	018b      	lsls	r3, r1, #6
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e6:	4651      	mov	r1, sl
 80047e8:	018a      	lsls	r2, r1, #6
 80047ea:	4651      	mov	r1, sl
 80047ec:	ebb2 0801 	subs.w	r8, r2, r1
 80047f0:	4659      	mov	r1, fp
 80047f2:	eb63 0901 	sbc.w	r9, r3, r1
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480a:	4690      	mov	r8, r2
 800480c:	4699      	mov	r9, r3
 800480e:	4623      	mov	r3, r4
 8004810:	eb18 0303 	adds.w	r3, r8, r3
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	462b      	mov	r3, r5
 8004818:	eb49 0303 	adc.w	r3, r9, r3
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800482a:	4629      	mov	r1, r5
 800482c:	024b      	lsls	r3, r1, #9
 800482e:	4621      	mov	r1, r4
 8004830:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004834:	4621      	mov	r1, r4
 8004836:	024a      	lsls	r2, r1, #9
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483e:	2200      	movs	r2, #0
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
 8004842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004848:	f7fb fd32 	bl	80002b0 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4613      	mov	r3, r2
 8004852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004854:	e058      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004856:	4b38      	ldr	r3, [pc, #224]	; (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	099b      	lsrs	r3, r3, #6
 800485c:	2200      	movs	r2, #0
 800485e:	4618      	mov	r0, r3
 8004860:	4611      	mov	r1, r2
 8004862:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
 800486c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004870:	4642      	mov	r2, r8
 8004872:	464b      	mov	r3, r9
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f04f 0100 	mov.w	r1, #0
 800487c:	0159      	lsls	r1, r3, #5
 800487e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004882:	0150      	lsls	r0, r2, #5
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4641      	mov	r1, r8
 800488a:	ebb2 0a01 	subs.w	sl, r2, r1
 800488e:	4649      	mov	r1, r9
 8004890:	eb63 0b01 	sbc.w	fp, r3, r1
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048a8:	ebb2 040a 	subs.w	r4, r2, sl
 80048ac:	eb63 050b 	sbc.w	r5, r3, fp
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	00eb      	lsls	r3, r5, #3
 80048ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048be:	00e2      	lsls	r2, r4, #3
 80048c0:	4614      	mov	r4, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	4643      	mov	r3, r8
 80048c6:	18e3      	adds	r3, r4, r3
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	464b      	mov	r3, r9
 80048cc:	eb45 0303 	adc.w	r3, r5, r3
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048de:	4629      	mov	r1, r5
 80048e0:	028b      	lsls	r3, r1, #10
 80048e2:	4621      	mov	r1, r4
 80048e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e8:	4621      	mov	r1, r4
 80048ea:	028a      	lsls	r2, r1, #10
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f2:	2200      	movs	r2, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	61fa      	str	r2, [r7, #28]
 80048f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fc:	f7fb fcd8 	bl	80002b0 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800491a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004922:	e002      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCC_GetSysClockFreq+0x204>)
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800492c:	4618      	mov	r0, r3
 800492e:	3750      	adds	r7, #80	; 0x50
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	00f42400 	.word	0x00f42400
 8004940:	007a1200 	.word	0x007a1200

08004944 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <HAL_RCC_GetHCLKFreq+0x14>)
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000

0800495c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004960:	f7ff fff0 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	0a9b      	lsrs	r3, r3, #10
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4903      	ldr	r1, [pc, #12]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40023800 	.word	0x40023800
 8004980:	08016b10 	.word	0x08016b10

08004984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004988:	f7ff ffdc 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	08016b10 	.word	0x08016b10

080049ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049d4:	4b69      	ldr	r3, [pc, #420]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a68      	ldr	r2, [pc, #416]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049de:	6093      	str	r3, [r2, #8]
 80049e0:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	4964      	ldr	r1, [pc, #400]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d017      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a06:	4b5d      	ldr	r3, [pc, #372]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	4959      	ldr	r1, [pc, #356]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a24:	d101      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d017      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a42:	4b4e      	ldr	r3, [pc, #312]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	494a      	ldr	r1, [pc, #296]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a60:	d101      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 808b 	beq.w	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b3a      	ldr	r3, [pc, #232]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	4a39      	ldr	r2, [pc, #228]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9c:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aa8:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a34      	ldr	r2, [pc, #208]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab4:	f7fd f844 	bl	8001b40 <HAL_GetTick>
 8004ab8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abc:	f7fd f840 	bl	8001b40 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e357      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ace:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ada:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d035      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d02e      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af8:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b02:	4b1e      	ldr	r3, [pc, #120]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b1a:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b20:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d114      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd f808 	bl	8001b40 <HAL_GetTick>
 8004b30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fd f804 	bl	8001b40 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e319      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ee      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b62:	d111      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b70:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	4901      	ldr	r1, [pc, #4]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40007000 	.word	0x40007000
 8004b84:	0ffffcff 	.word	0x0ffffcff
 8004b88:	4baa      	ldr	r3, [pc, #680]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4aa9      	ldr	r2, [pc, #676]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b92:	6093      	str	r3, [r2, #8]
 8004b94:	4ba7      	ldr	r3, [pc, #668]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	49a4      	ldr	r1, [pc, #656]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bb2:	4ba0      	ldr	r3, [pc, #640]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb8:	4a9e      	ldr	r2, [pc, #632]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bc2:	4b9c      	ldr	r3, [pc, #624]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	4999      	ldr	r1, [pc, #612]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be0:	4b94      	ldr	r3, [pc, #592]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bee:	4991      	ldr	r1, [pc, #580]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c02:	4b8c      	ldr	r3, [pc, #560]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c10:	4988      	ldr	r1, [pc, #544]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c24:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c32:	4980      	ldr	r1, [pc, #512]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c46:	4b7b      	ldr	r3, [pc, #492]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4977      	ldr	r1, [pc, #476]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c68:	4b72      	ldr	r3, [pc, #456]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	496f      	ldr	r1, [pc, #444]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c8a:	4b6a      	ldr	r3, [pc, #424]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	f023 020c 	bic.w	r2, r3, #12
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c98:	4966      	ldr	r1, [pc, #408]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cac:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	495e      	ldr	r1, [pc, #376]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cce:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cdc:	4955      	ldr	r1, [pc, #340]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	494d      	ldr	r1, [pc, #308]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d12:	4b48      	ldr	r3, [pc, #288]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	4944      	ldr	r1, [pc, #272]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d34:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d42:	493c      	ldr	r1, [pc, #240]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d56:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	4933      	ldr	r1, [pc, #204]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d78:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d86:	492b      	ldr	r1, [pc, #172]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d9a:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da8:	4922      	ldr	r1, [pc, #136]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dda:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de8:	4912      	ldr	r1, [pc, #72]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e0c:	4909      	ldr	r1, [pc, #36]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d006      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80d9 	beq.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a01      	ldr	r2, [pc, #4]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e32:	e001      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004e34:	40023800 	.word	0x40023800
 8004e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3a:	f7fc fe81 	bl	8001b40 <HAL_GetTick>
 8004e3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e42:	f7fc fe7d 	bl	8001b40 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b64      	cmp	r3, #100	; 0x64
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e194      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e54:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d021      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11d      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e74:	4b64      	ldr	r3, [pc, #400]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7a:	0c1b      	lsrs	r3, r3, #16
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e82:	4b61      	ldr	r3, [pc, #388]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e88:	0e1b      	lsrs	r3, r3, #24
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	019a      	lsls	r2, r3, #6
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	061b      	lsls	r3, r3, #24
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	071b      	lsls	r3, r3, #28
 8004ea8:	4957      	ldr	r1, [pc, #348]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec4:	d00a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d02e      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eda:	d129      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004edc:	4b4a      	ldr	r3, [pc, #296]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	0c1b      	lsrs	r3, r3, #16
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eea:	4b47      	ldr	r3, [pc, #284]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef0:	0f1b      	lsrs	r3, r3, #28
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	019a      	lsls	r2, r3, #6
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	071b      	lsls	r3, r3, #28
 8004f10:	493d      	ldr	r1, [pc, #244]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f18:	4b3b      	ldr	r3, [pc, #236]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1e:	f023 021f 	bic.w	r2, r3, #31
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	3b01      	subs	r3, #1
 8004f28:	4937      	ldr	r1, [pc, #220]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01d      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f3c:	4b32      	ldr	r3, [pc, #200]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f42:	0e1b      	lsrs	r3, r3, #24
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f50:	0f1b      	lsrs	r3, r3, #28
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	019a      	lsls	r2, r3, #6
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	431a      	orrs	r2, r3
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	061b      	lsls	r3, r3, #24
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	071b      	lsls	r3, r3, #28
 8004f70:	4925      	ldr	r1, [pc, #148]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	019a      	lsls	r2, r3, #6
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	061b      	lsls	r3, r3, #24
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	071b      	lsls	r3, r3, #28
 8004fa0:	4919      	ldr	r1, [pc, #100]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fc fdc4 	bl	8001b40 <HAL_GetTick>
 8004fb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fbc:	f7fc fdc0 	bl	8001b40 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	; 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e0d7      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fce:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	f040 80cd 	bne.w	800517c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fee:	f7fc fda7 	bl	8001b40 <HAL_GetTick>
 8004ff2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ff4:	e00a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ff6:	f7fc fda3 	bl	8001b40 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b64      	cmp	r3, #100	; 0x64
 8005002:	d903      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0ba      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005008:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800500c:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005018:	d0ed      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02e      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d12a      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005042:	4b51      	ldr	r3, [pc, #324]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005050:	4b4d      	ldr	r3, [pc, #308]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	0f1b      	lsrs	r3, r3, #28
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	019a      	lsls	r2, r3, #6
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	061b      	lsls	r3, r3, #24
 8005070:	431a      	orrs	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	071b      	lsls	r3, r3, #28
 8005076:	4944      	ldr	r1, [pc, #272]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800507e:	4b42      	ldr	r3, [pc, #264]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005084:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	3b01      	subs	r3, #1
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	493d      	ldr	r1, [pc, #244]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d022      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ac:	d11d      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ae:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	0e1b      	lsrs	r3, r3, #24
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050bc:	4b32      	ldr	r3, [pc, #200]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	0f1b      	lsrs	r3, r3, #28
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	019a      	lsls	r2, r3, #6
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	431a      	orrs	r2, r3
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	061b      	lsls	r3, r3, #24
 80050dc:	431a      	orrs	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	4929      	ldr	r1, [pc, #164]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d028      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	0e1b      	lsrs	r3, r3, #24
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	0c1b      	lsrs	r3, r3, #16
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	019a      	lsls	r2, r3, #6
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	041b      	lsls	r3, r3, #16
 800511c:	431a      	orrs	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	061b      	lsls	r3, r3, #24
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	071b      	lsls	r3, r3, #28
 800512a:	4917      	ldr	r1, [pc, #92]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4911      	ldr	r1, [pc, #68]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005154:	f7fc fcf4 	bl	8001b40 <HAL_GetTick>
 8005158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800515c:	f7fc fcf0 	bl	8001b40 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e007      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800517a:	d1ef      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800

0800518c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e071      	b.n	8005286 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	7f5b      	ldrb	r3, [r3, #29]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d105      	bne.n	80051b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fb ff86 	bl	80010c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d053      	beq.n	8005274 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	22ca      	movs	r2, #202	; 0xca
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2253      	movs	r2, #83	; 0x53
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f881 	bl	80052e4 <RTC_EnterInitMode>
 80051e2:	4603      	mov	r3, r0
 80051e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d12a      	bne.n	8005242 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6899      	ldr	r1, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <HAL_RTC_Init+0x104>)
 80051f8:	400b      	ands	r3, r1
 80051fa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6899      	ldr	r1, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68d2      	ldr	r2, [r2, #12]
 8005222:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6919      	ldr	r1, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	041a      	lsls	r2, r3, #16
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f88a 	bl	8005352 <RTC_ExitInitMode>
 800523e:	4603      	mov	r3, r0
 8005240:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d110      	bne.n	800526a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0208 	bic.w	r2, r2, #8
 8005256:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	22ff      	movs	r2, #255	; 0xff
 8005270:	625a      	str	r2, [r3, #36]	; 0x24
 8005272:	e001      	b.n	8005278 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	ff8fffbf 	.word	0xff8fffbf

08005294 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052b0:	f7fc fc46 	bl	8001b40 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052b6:	e009      	b.n	80052cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052b8:	f7fc fc42 	bl	8001b40 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c6:	d901      	bls.n	80052cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e007      	b.n	80052dc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0ee      	beq.n	80052b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d122      	bne.n	8005348 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005310:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005312:	f7fc fc15 	bl	8001b40 <HAL_GetTick>
 8005316:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005318:	e00c      	b.n	8005334 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800531a:	f7fc fc11 	bl	8001b40 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005328:	d904      	bls.n	8005334 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2204      	movs	r2, #4
 800532e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <RTC_EnterInitMode+0x64>
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d1e8      	bne.n	800531a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800536c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ff89 	bl	8005294 <HAL_RTC_WaitForSynchro>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d004      	beq.n	8005392 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2204      	movs	r2, #4
 800538c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80053a8:	4b59      	ldr	r3, [pc, #356]	; (8005510 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a59      	ldr	r2, [pc, #356]	; (8005514 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	0adb      	lsrs	r3, r3, #11
 80053b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	7f1b      	ldrb	r3, [r3, #28]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e09b      	b.n	8005502 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2202      	movs	r2, #2
 80053d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	22ca      	movs	r2, #202	; 0xca
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2253      	movs	r2, #83	; 0x53
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d017      	beq.n	8005424 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1e5a      	subs	r2, r3, #1
 80053f8:	617a      	str	r2, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	22ff      	movs	r2, #255	; 0xff
 8005404:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2203      	movs	r2, #3
 800540a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e075      	b.n	8005502 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e7      	bne.n	80053f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005432:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005444:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005446:	4b32      	ldr	r3, [pc, #200]	; (8005510 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a32      	ldr	r2, [pc, #200]	; (8005514 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800544c:	fba2 2303 	umull	r2, r3, r2, r3
 8005450:	0adb      	lsrs	r3, r3, #11
 8005452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005456:	fb02 f303 	mul.w	r3, r2, r3
 800545a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	617a      	str	r2, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2203      	movs	r2, #3
 8005472:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e041      	b.n	8005502 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0e7      	beq.n	800545c <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0207 	bic.w	r2, r2, #7
 800549a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6899      	ldr	r1, [r3, #8]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80054b4:	4b18      	ldr	r3, [pc, #96]	; (8005518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a17      	ldr	r2, [pc, #92]	; (8005518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80054ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054be:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80054c0:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a14      	ldr	r2, [pc, #80]	; (8005518 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80054c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054ca:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054da:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000000 	.word	0x20000000
 8005514:	10624dd3 	.word	0x10624dd3
 8005518:	40013c00 	.word	0x40013c00

0800551c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005524:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8005526:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800552a:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800554a:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f809 	bl	8005564 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	775a      	strb	r2, [r3, #29]
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40013c00 	.word	0x40013c00

08005564 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0c6      	b.n	8005718 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559a:	d009      	beq.n	80055b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
 80055a2:	e005      	b.n	80055b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fb fdb3 	bl	8001130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ea:	d902      	bls.n	80055f2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e002      	b.n	80055f8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005600:	d007      	beq.n	8005612 <HAL_SPI_Init+0x9a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800560a:	d002      	beq.n	8005612 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005654:	ea42 0103 	orr.w	r1, r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005670:	d11b      	bne.n	80056aa <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005682:	d903      	bls.n	800568c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
 800568a:	e002      	b.n	8005692 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	2b02      	cmp	r3, #2
 8005698:	d107      	bne.n	80056aa <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	0c1b      	lsrs	r3, r3, #16
 80056b0:	f003 0204 	and.w	r2, r3, #4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056d0:	ea42 0103 	orr.w	r1, r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ea:	d105      	bne.n	80056f8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	b292      	uxth	r2, r2
 80056f6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10e      	bne.n	8005760 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005748:	2b00      	cmp	r3, #0
 800574a:	d009      	beq.n	8005760 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
    return;
 800575e:	e0ce      	b.n	80058fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_SPI_IRQHandler+0x5e>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
    return;
 800577c:	e0bf      	b.n	80058fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <HAL_SPI_IRQHandler+0x7e>
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d105      	bne.n	800579e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80b0 	beq.w	80058fe <HAL_SPI_IRQHandler+0x1de>
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80aa 	beq.w	80058fe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d023      	beq.n	80057fc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d011      	beq.n	80057e4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c4:	f043 0204 	orr.w	r2, r3, #4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	e00b      	b.n	80057fc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	693b      	ldr	r3, [r7, #16]
        return;
 80057fa:	e080      	b.n	80058fe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d014      	beq.n	8005830 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580a:	f043 0201 	orr.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583e:	f043 0208 	orr.w	r2, r3, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005858:	2b00      	cmp	r3, #0
 800585a:	d04f      	beq.n	80058fc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800586a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <HAL_SPI_IRQHandler+0x168>
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d034      	beq.n	80058f2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0203 	bic.w	r2, r2, #3
 8005896:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	2b00      	cmp	r3, #0
 800589e:	d011      	beq.n	80058c4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	4a17      	ldr	r2, [pc, #92]	; (8005904 <HAL_SPI_IRQHandler+0x1e4>)
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fd f851 	bl	8002954 <HAL_DMA_Abort_IT>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	4a0c      	ldr	r2, [pc, #48]	; (8005904 <HAL_SPI_IRQHandler+0x1e4>)
 80058d2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fd f83b 	bl	8002954 <HAL_DMA_Abort_IT>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80058f0:	e003      	b.n	80058fa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f808 	bl	8005908 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80058f8:	e000      	b.n	80058fc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80058fa:	bf00      	nop
    return;
 80058fc:	bf00      	nop
  }
}
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	0800591d 	.word	0x0800591d

08005908 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff ffe5 	bl	8005908 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e049      	b.n	80059ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fb fd27 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f000 f987 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d122      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d11b      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0202 	mvn.w	r2, #2
 8005a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f90f 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f901 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f912 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d122      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0204 	mvn.w	r2, #4
 8005a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8e5 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005a90:	e005      	b.n	8005a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8d7 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f8e8 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d122      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d11b      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0208 	mvn.w	r2, #8
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2204      	movs	r2, #4
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8bb 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8ad 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8be 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b10      	cmp	r3, #16
 8005b04:	d122      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d11b      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0210 	mvn.w	r2, #16
 8005b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2208      	movs	r2, #8
 8005b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f891 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f883 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f894 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d10e      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d107      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0201 	mvn.w	r2, #1
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f85d 	bl	8005c32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b90:	2b80      	cmp	r3, #128	; 0x80
 8005b92:	d107      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f9b2 	bl	8005f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f9a5 	bl	8005f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d10e      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f842 	bl	8005c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d10e      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d107      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0220 	mvn.w	r2, #32
 8005c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f965 	bl	8005ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a40      	ldr	r2, [pc, #256]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb6:	d00f      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3d      	ldr	r2, [pc, #244]	; (8005db0 <TIM_Base_SetConfig+0x118>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00b      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3c      	ldr	r2, [pc, #240]	; (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3b      	ldr	r2, [pc, #236]	; (8005db8 <TIM_Base_SetConfig+0x120>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d02b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf8:	d027      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2c      	ldr	r2, [pc, #176]	; (8005db0 <TIM_Base_SetConfig+0x118>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d023      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2b      	ldr	r2, [pc, #172]	; (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	; (8005db8 <TIM_Base_SetConfig+0x120>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a29      	ldr	r2, [pc, #164]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d017      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a28      	ldr	r2, [pc, #160]	; (8005dc0 <TIM_Base_SetConfig+0x128>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <TIM_Base_SetConfig+0x130>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <TIM_Base_SetConfig+0x134>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <TIM_Base_SetConfig+0x138>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <TIM_Base_SetConfig+0x13c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0xf8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0c      	ldr	r2, [pc, #48]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d103      	bne.n	8005d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	615a      	str	r2, [r3, #20]
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40010400 	.word	0x40010400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800
 8005dcc:	40001800 	.word	0x40001800
 8005dd0:	40001c00 	.word	0x40001c00
 8005dd4:	40002000 	.word	0x40002000

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e06d      	b.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d108      	bne.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d01d      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10c      	bne.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40001800 	.word	0x40001800

08005ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e040      	b.n	8005fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fb fa5a 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2224      	movs	r2, #36	; 0x24
 8005f5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fb1e 	bl	80065b0 <UART_SetConfig>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e022      	b.n	8005fc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fd76 	bl	8006a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fdfd 	bl	8006bbc <UART_CheckIdleState>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b0ba      	sub	sp, #232	; 0xe8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ff2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ff6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d115      	bne.n	8006034 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00f      	beq.n	8006034 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8297 	beq.w	8006558 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
      }
      return;
 8006032:	e291      	b.n	8006558 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8117 	beq.w	800626c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800604a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800604e:	4b85      	ldr	r3, [pc, #532]	; (8006264 <HAL_UART_IRQHandler+0x298>)
 8006050:	4013      	ands	r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 810a 	beq.w	800626c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d011      	beq.n	8006088 <HAL_UART_IRQHandler+0xbc>
 8006064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00b      	beq.n	8006088 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2201      	movs	r2, #1
 8006076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607e:	f043 0201 	orr.w	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d011      	beq.n	80060b8 <HAL_UART_IRQHandler+0xec>
 8006094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2202      	movs	r2, #2
 80060a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ae:	f043 0204 	orr.w	r2, r3, #4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d011      	beq.n	80060e8 <HAL_UART_IRQHandler+0x11c>
 80060c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00b      	beq.n	80060e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2204      	movs	r2, #4
 80060d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060de:	f043 0202 	orr.w	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d017      	beq.n	8006124 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d105      	bne.n	800610c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006104:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2208      	movs	r2, #8
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611a:	f043 0208 	orr.w	r2, r3, #8
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612c:	2b00      	cmp	r3, #0
 800612e:	d012      	beq.n	8006156 <HAL_UART_IRQHandler+0x18a>
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00c      	beq.n	8006156 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614c:	f043 0220 	orr.w	r2, r3, #32
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 81fd 	beq.w	800655c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800616e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d005      	beq.n	80061ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d04f      	beq.n	800624e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fe01 	bl	8006db6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d141      	bne.n	8006246 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1d9      	bne.n	80061c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006212:	2b00      	cmp	r3, #0
 8006214:	d013      	beq.n	800623e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	4a13      	ldr	r2, [pc, #76]	; (8006268 <HAL_UART_IRQHandler+0x29c>)
 800621c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006222:	4618      	mov	r0, r3
 8006224:	f7fc fb96 	bl	8002954 <HAL_DMA_Abort_IT>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d017      	beq.n	800625e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e00f      	b.n	800625e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9a0 	bl	8006584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006244:	e00b      	b.n	800625e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f99c 	bl	8006584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	e007      	b.n	800625e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f998 	bl	8006584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800625c:	e17e      	b.n	800655c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625e:	bf00      	nop
    return;
 8006260:	e17c      	b.n	800655c <HAL_UART_IRQHandler+0x590>
 8006262:	bf00      	nop
 8006264:	04000120 	.word	0x04000120
 8006268:	08006e7f 	.word	0x08006e7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006270:	2b01      	cmp	r3, #1
 8006272:	f040 814c 	bne.w	800650e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 8145 	beq.w	800650e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 813e 	beq.w	800650e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2210      	movs	r2, #16
 8006298:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	f040 80b6 	bne.w	8006416 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8150 	beq.w	8006560 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ca:	429a      	cmp	r2, r3
 80062cc:	f080 8148 	bcs.w	8006560 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e4:	f000 8086 	beq.w	80063f4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006316:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800631e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800632a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1da      	bne.n	80062e8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006356:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800635a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800635e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e1      	bne.n	8006332 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800637e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006392:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e3      	bne.n	800636e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c4:	f023 0310 	bic.w	r3, r3, #16
 80063c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80063d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e4      	bne.n	80063b4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fc fa40 	bl	8002874 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006406:	b29b      	uxth	r3, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8c2 	bl	8006598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006414:	e0a4      	b.n	8006560 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006422:	b29b      	uxth	r3, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8096 	beq.w	8006564 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8091 	beq.w	8006564 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
 8006466:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800646a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e4      	bne.n	8006442 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	623b      	str	r3, [r7, #32]
   return(result);
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800649c:	633a      	str	r2, [r7, #48]	; 0x30
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e3      	bne.n	8006478 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0310 	bic.w	r3, r3, #16
 80064d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	69b9      	ldr	r1, [r7, #24]
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	617b      	str	r3, [r7, #20]
   return(result);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e4      	bne.n	80064c4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2202      	movs	r2, #2
 80064fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f846 	bl	8006598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800650c:	e02a      	b.n	8006564 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800651a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01c      	beq.n	8006568 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
    }
    return;
 8006536:	e017      	b.n	8006568 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d012      	beq.n	800656a <HAL_UART_IRQHandler+0x59e>
 8006544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00c      	beq.n	800656a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fcaa 	bl	8006eaa <UART_EndTransmit_IT>
    return;
 8006556:	e008      	b.n	800656a <HAL_UART_IRQHandler+0x59e>
      return;
 8006558:	bf00      	nop
 800655a:	e006      	b.n	800656a <HAL_UART_IRQHandler+0x59e>
    return;
 800655c:	bf00      	nop
 800655e:	e004      	b.n	800656a <HAL_UART_IRQHandler+0x59e>
      return;
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <HAL_UART_IRQHandler+0x59e>
      return;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <HAL_UART_IRQHandler+0x59e>
    return;
 8006568:	bf00      	nop
  }

}
 800656a:	37e8      	adds	r7, #232	; 0xe8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4ba6      	ldr	r3, [pc, #664]	; (8006874 <UART_SetConfig+0x2c4>)
 80065dc:	4013      	ands	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	430a      	orrs	r2, r1
 8006620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a94      	ldr	r2, [pc, #592]	; (8006878 <UART_SetConfig+0x2c8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d120      	bne.n	800666e <UART_SetConfig+0xbe>
 800662c:	4b93      	ldr	r3, [pc, #588]	; (800687c <UART_SetConfig+0x2cc>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b03      	cmp	r3, #3
 8006638:	d816      	bhi.n	8006668 <UART_SetConfig+0xb8>
 800663a:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0x90>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006651 	.word	0x08006651
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006657 	.word	0x08006657
 800664c:	08006663 	.word	0x08006663
 8006650:	2301      	movs	r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e150      	b.n	80068f8 <UART_SetConfig+0x348>
 8006656:	2302      	movs	r3, #2
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e14d      	b.n	80068f8 <UART_SetConfig+0x348>
 800665c:	2304      	movs	r3, #4
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e14a      	b.n	80068f8 <UART_SetConfig+0x348>
 8006662:	2308      	movs	r3, #8
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e147      	b.n	80068f8 <UART_SetConfig+0x348>
 8006668:	2310      	movs	r3, #16
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e144      	b.n	80068f8 <UART_SetConfig+0x348>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a83      	ldr	r2, [pc, #524]	; (8006880 <UART_SetConfig+0x2d0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d132      	bne.n	80066de <UART_SetConfig+0x12e>
 8006678:	4b80      	ldr	r3, [pc, #512]	; (800687c <UART_SetConfig+0x2cc>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b0c      	cmp	r3, #12
 8006684:	d828      	bhi.n	80066d8 <UART_SetConfig+0x128>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0xdc>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066c1 	.word	0x080066c1
 8006690:	080066d9 	.word	0x080066d9
 8006694:	080066d9 	.word	0x080066d9
 8006698:	080066d9 	.word	0x080066d9
 800669c:	080066cd 	.word	0x080066cd
 80066a0:	080066d9 	.word	0x080066d9
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	080066d9 	.word	0x080066d9
 80066ac:	080066c7 	.word	0x080066c7
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066d9 	.word	0x080066d9
 80066bc:	080066d3 	.word	0x080066d3
 80066c0:	2300      	movs	r3, #0
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e118      	b.n	80068f8 <UART_SetConfig+0x348>
 80066c6:	2302      	movs	r3, #2
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e115      	b.n	80068f8 <UART_SetConfig+0x348>
 80066cc:	2304      	movs	r3, #4
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e112      	b.n	80068f8 <UART_SetConfig+0x348>
 80066d2:	2308      	movs	r3, #8
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e10f      	b.n	80068f8 <UART_SetConfig+0x348>
 80066d8:	2310      	movs	r3, #16
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e10c      	b.n	80068f8 <UART_SetConfig+0x348>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a68      	ldr	r2, [pc, #416]	; (8006884 <UART_SetConfig+0x2d4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d120      	bne.n	800672a <UART_SetConfig+0x17a>
 80066e8:	4b64      	ldr	r3, [pc, #400]	; (800687c <UART_SetConfig+0x2cc>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066f2:	2b30      	cmp	r3, #48	; 0x30
 80066f4:	d013      	beq.n	800671e <UART_SetConfig+0x16e>
 80066f6:	2b30      	cmp	r3, #48	; 0x30
 80066f8:	d814      	bhi.n	8006724 <UART_SetConfig+0x174>
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d009      	beq.n	8006712 <UART_SetConfig+0x162>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d810      	bhi.n	8006724 <UART_SetConfig+0x174>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <UART_SetConfig+0x15c>
 8006706:	2b10      	cmp	r3, #16
 8006708:	d006      	beq.n	8006718 <UART_SetConfig+0x168>
 800670a:	e00b      	b.n	8006724 <UART_SetConfig+0x174>
 800670c:	2300      	movs	r3, #0
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e0f2      	b.n	80068f8 <UART_SetConfig+0x348>
 8006712:	2302      	movs	r3, #2
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e0ef      	b.n	80068f8 <UART_SetConfig+0x348>
 8006718:	2304      	movs	r3, #4
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e0ec      	b.n	80068f8 <UART_SetConfig+0x348>
 800671e:	2308      	movs	r3, #8
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e0e9      	b.n	80068f8 <UART_SetConfig+0x348>
 8006724:	2310      	movs	r3, #16
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e0e6      	b.n	80068f8 <UART_SetConfig+0x348>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a56      	ldr	r2, [pc, #344]	; (8006888 <UART_SetConfig+0x2d8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d120      	bne.n	8006776 <UART_SetConfig+0x1c6>
 8006734:	4b51      	ldr	r3, [pc, #324]	; (800687c <UART_SetConfig+0x2cc>)
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800673e:	2bc0      	cmp	r3, #192	; 0xc0
 8006740:	d013      	beq.n	800676a <UART_SetConfig+0x1ba>
 8006742:	2bc0      	cmp	r3, #192	; 0xc0
 8006744:	d814      	bhi.n	8006770 <UART_SetConfig+0x1c0>
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d009      	beq.n	800675e <UART_SetConfig+0x1ae>
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d810      	bhi.n	8006770 <UART_SetConfig+0x1c0>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <UART_SetConfig+0x1a8>
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d006      	beq.n	8006764 <UART_SetConfig+0x1b4>
 8006756:	e00b      	b.n	8006770 <UART_SetConfig+0x1c0>
 8006758:	2300      	movs	r3, #0
 800675a:	77fb      	strb	r3, [r7, #31]
 800675c:	e0cc      	b.n	80068f8 <UART_SetConfig+0x348>
 800675e:	2302      	movs	r3, #2
 8006760:	77fb      	strb	r3, [r7, #31]
 8006762:	e0c9      	b.n	80068f8 <UART_SetConfig+0x348>
 8006764:	2304      	movs	r3, #4
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e0c6      	b.n	80068f8 <UART_SetConfig+0x348>
 800676a:	2308      	movs	r3, #8
 800676c:	77fb      	strb	r3, [r7, #31]
 800676e:	e0c3      	b.n	80068f8 <UART_SetConfig+0x348>
 8006770:	2310      	movs	r3, #16
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e0c0      	b.n	80068f8 <UART_SetConfig+0x348>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a44      	ldr	r2, [pc, #272]	; (800688c <UART_SetConfig+0x2dc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d125      	bne.n	80067cc <UART_SetConfig+0x21c>
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <UART_SetConfig+0x2cc>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800678e:	d017      	beq.n	80067c0 <UART_SetConfig+0x210>
 8006790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006794:	d817      	bhi.n	80067c6 <UART_SetConfig+0x216>
 8006796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679a:	d00b      	beq.n	80067b4 <UART_SetConfig+0x204>
 800679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a0:	d811      	bhi.n	80067c6 <UART_SetConfig+0x216>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <UART_SetConfig+0x1fe>
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067aa:	d006      	beq.n	80067ba <UART_SetConfig+0x20a>
 80067ac:	e00b      	b.n	80067c6 <UART_SetConfig+0x216>
 80067ae:	2300      	movs	r3, #0
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e0a1      	b.n	80068f8 <UART_SetConfig+0x348>
 80067b4:	2302      	movs	r3, #2
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e09e      	b.n	80068f8 <UART_SetConfig+0x348>
 80067ba:	2304      	movs	r3, #4
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e09b      	b.n	80068f8 <UART_SetConfig+0x348>
 80067c0:	2308      	movs	r3, #8
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e098      	b.n	80068f8 <UART_SetConfig+0x348>
 80067c6:	2310      	movs	r3, #16
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e095      	b.n	80068f8 <UART_SetConfig+0x348>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2f      	ldr	r2, [pc, #188]	; (8006890 <UART_SetConfig+0x2e0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d125      	bne.n	8006822 <UART_SetConfig+0x272>
 80067d6:	4b29      	ldr	r3, [pc, #164]	; (800687c <UART_SetConfig+0x2cc>)
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067e4:	d017      	beq.n	8006816 <UART_SetConfig+0x266>
 80067e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ea:	d817      	bhi.n	800681c <UART_SetConfig+0x26c>
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f0:	d00b      	beq.n	800680a <UART_SetConfig+0x25a>
 80067f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f6:	d811      	bhi.n	800681c <UART_SetConfig+0x26c>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <UART_SetConfig+0x254>
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006800:	d006      	beq.n	8006810 <UART_SetConfig+0x260>
 8006802:	e00b      	b.n	800681c <UART_SetConfig+0x26c>
 8006804:	2301      	movs	r3, #1
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e076      	b.n	80068f8 <UART_SetConfig+0x348>
 800680a:	2302      	movs	r3, #2
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e073      	b.n	80068f8 <UART_SetConfig+0x348>
 8006810:	2304      	movs	r3, #4
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e070      	b.n	80068f8 <UART_SetConfig+0x348>
 8006816:	2308      	movs	r3, #8
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e06d      	b.n	80068f8 <UART_SetConfig+0x348>
 800681c:	2310      	movs	r3, #16
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e06a      	b.n	80068f8 <UART_SetConfig+0x348>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a1b      	ldr	r2, [pc, #108]	; (8006894 <UART_SetConfig+0x2e4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d138      	bne.n	800689e <UART_SetConfig+0x2ee>
 800682c:	4b13      	ldr	r3, [pc, #76]	; (800687c <UART_SetConfig+0x2cc>)
 800682e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006832:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800683a:	d017      	beq.n	800686c <UART_SetConfig+0x2bc>
 800683c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006840:	d82a      	bhi.n	8006898 <UART_SetConfig+0x2e8>
 8006842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006846:	d00b      	beq.n	8006860 <UART_SetConfig+0x2b0>
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684c:	d824      	bhi.n	8006898 <UART_SetConfig+0x2e8>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <UART_SetConfig+0x2aa>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d006      	beq.n	8006866 <UART_SetConfig+0x2b6>
 8006858:	e01e      	b.n	8006898 <UART_SetConfig+0x2e8>
 800685a:	2300      	movs	r3, #0
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e04b      	b.n	80068f8 <UART_SetConfig+0x348>
 8006860:	2302      	movs	r3, #2
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e048      	b.n	80068f8 <UART_SetConfig+0x348>
 8006866:	2304      	movs	r3, #4
 8006868:	77fb      	strb	r3, [r7, #31]
 800686a:	e045      	b.n	80068f8 <UART_SetConfig+0x348>
 800686c:	2308      	movs	r3, #8
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e042      	b.n	80068f8 <UART_SetConfig+0x348>
 8006872:	bf00      	nop
 8006874:	efff69f3 	.word	0xefff69f3
 8006878:	40011000 	.word	0x40011000
 800687c:	40023800 	.word	0x40023800
 8006880:	40004400 	.word	0x40004400
 8006884:	40004800 	.word	0x40004800
 8006888:	40004c00 	.word	0x40004c00
 800688c:	40005000 	.word	0x40005000
 8006890:	40011400 	.word	0x40011400
 8006894:	40007800 	.word	0x40007800
 8006898:	2310      	movs	r3, #16
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e02c      	b.n	80068f8 <UART_SetConfig+0x348>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a72      	ldr	r2, [pc, #456]	; (8006a6c <UART_SetConfig+0x4bc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d125      	bne.n	80068f4 <UART_SetConfig+0x344>
 80068a8:	4b71      	ldr	r3, [pc, #452]	; (8006a70 <UART_SetConfig+0x4c0>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068b6:	d017      	beq.n	80068e8 <UART_SetConfig+0x338>
 80068b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068bc:	d817      	bhi.n	80068ee <UART_SetConfig+0x33e>
 80068be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c2:	d00b      	beq.n	80068dc <UART_SetConfig+0x32c>
 80068c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c8:	d811      	bhi.n	80068ee <UART_SetConfig+0x33e>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <UART_SetConfig+0x326>
 80068ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d2:	d006      	beq.n	80068e2 <UART_SetConfig+0x332>
 80068d4:	e00b      	b.n	80068ee <UART_SetConfig+0x33e>
 80068d6:	2300      	movs	r3, #0
 80068d8:	77fb      	strb	r3, [r7, #31]
 80068da:	e00d      	b.n	80068f8 <UART_SetConfig+0x348>
 80068dc:	2302      	movs	r3, #2
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e00a      	b.n	80068f8 <UART_SetConfig+0x348>
 80068e2:	2304      	movs	r3, #4
 80068e4:	77fb      	strb	r3, [r7, #31]
 80068e6:	e007      	b.n	80068f8 <UART_SetConfig+0x348>
 80068e8:	2308      	movs	r3, #8
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e004      	b.n	80068f8 <UART_SetConfig+0x348>
 80068ee:	2310      	movs	r3, #16
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e001      	b.n	80068f8 <UART_SetConfig+0x348>
 80068f4:	2310      	movs	r3, #16
 80068f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006900:	d15b      	bne.n	80069ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006902:	7ffb      	ldrb	r3, [r7, #31]
 8006904:	2b08      	cmp	r3, #8
 8006906:	d828      	bhi.n	800695a <UART_SetConfig+0x3aa>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <UART_SetConfig+0x360>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006935 	.word	0x08006935
 8006914:	0800693d 	.word	0x0800693d
 8006918:	08006945 	.word	0x08006945
 800691c:	0800695b 	.word	0x0800695b
 8006920:	0800694b 	.word	0x0800694b
 8006924:	0800695b 	.word	0x0800695b
 8006928:	0800695b 	.word	0x0800695b
 800692c:	0800695b 	.word	0x0800695b
 8006930:	08006953 	.word	0x08006953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006934:	f7fe f812 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8006938:	61b8      	str	r0, [r7, #24]
        break;
 800693a:	e013      	b.n	8006964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800693c:	f7fe f822 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 8006940:	61b8      	str	r0, [r7, #24]
        break;
 8006942:	e00f      	b.n	8006964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006944:	4b4b      	ldr	r3, [pc, #300]	; (8006a74 <UART_SetConfig+0x4c4>)
 8006946:	61bb      	str	r3, [r7, #24]
        break;
 8006948:	e00c      	b.n	8006964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800694a:	f7fd fef5 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 800694e:	61b8      	str	r0, [r7, #24]
        break;
 8006950:	e008      	b.n	8006964 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006956:	61bb      	str	r3, [r7, #24]
        break;
 8006958:	e004      	b.n	8006964 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	77bb      	strb	r3, [r7, #30]
        break;
 8006962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d074      	beq.n	8006a54 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	005a      	lsls	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	441a      	add	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b0f      	cmp	r3, #15
 8006984:	d916      	bls.n	80069b4 <UART_SetConfig+0x404>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698c:	d212      	bcs.n	80069b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f023 030f 	bic.w	r3, r3, #15
 8006996:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	89fa      	ldrh	r2, [r7, #14]
 80069b0:	60da      	str	r2, [r3, #12]
 80069b2:	e04f      	b.n	8006a54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	77bb      	strb	r3, [r7, #30]
 80069b8:	e04c      	b.n	8006a54 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ba:	7ffb      	ldrb	r3, [r7, #31]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d828      	bhi.n	8006a12 <UART_SetConfig+0x462>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <UART_SetConfig+0x418>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a13 	.word	0x08006a13
 80069d8:	08006a03 	.word	0x08006a03
 80069dc:	08006a13 	.word	0x08006a13
 80069e0:	08006a13 	.word	0x08006a13
 80069e4:	08006a13 	.word	0x08006a13
 80069e8:	08006a0b 	.word	0x08006a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fd ffb6 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 80069f0:	61b8      	str	r0, [r7, #24]
        break;
 80069f2:	e013      	b.n	8006a1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fd ffc6 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 80069f8:	61b8      	str	r0, [r7, #24]
        break;
 80069fa:	e00f      	b.n	8006a1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069fc:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <UART_SetConfig+0x4c4>)
 80069fe:	61bb      	str	r3, [r7, #24]
        break;
 8006a00:	e00c      	b.n	8006a1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a02:	f7fd fe99 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 8006a06:	61b8      	str	r0, [r7, #24]
        break;
 8006a08:	e008      	b.n	8006a1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0e:	61bb      	str	r3, [r7, #24]
        break;
 8006a10:	e004      	b.n	8006a1c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	77bb      	strb	r3, [r7, #30]
        break;
 8006a1a:	bf00      	nop
    }

    if (pclk != 0U)
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d018      	beq.n	8006a54 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	085a      	lsrs	r2, r3, #1
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	441a      	add	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b0f      	cmp	r3, #15
 8006a3a:	d909      	bls.n	8006a50 <UART_SetConfig+0x4a0>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a42:	d205      	bcs.n	8006a50 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60da      	str	r2, [r3, #12]
 8006a4e:	e001      	b.n	8006a54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a60:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40007c00 	.word	0x40007c00
 8006a70:	40023800 	.word	0x40023800
 8006a74:	00f42400 	.word	0x00f42400

08006a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01a      	beq.n	8006b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b76:	d10a      	bne.n	8006b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	605a      	str	r2, [r3, #4]
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bcc:	f7fa ffb8 	bl	8001b40 <HAL_GetTick>
 8006bd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d10e      	bne.n	8006bfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f81b 	bl	8006c2a <UART_WaitOnFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e011      	b.n	8006c22 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b09c      	sub	sp, #112	; 0x70
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	603b      	str	r3, [r7, #0]
 8006c36:	4613      	mov	r3, r2
 8006c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c3a:	e0a7      	b.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	f000 80a3 	beq.w	8006d8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c46:	f7fa ff7b 	bl	8001b40 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d302      	bcc.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d13f      	bne.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c70:	667b      	str	r3, [r7, #100]	; 0x64
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e6      	bne.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e5      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e068      	b.n	8006dae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d050      	beq.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf8:	d148      	bne.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d22:	637b      	str	r3, [r7, #52]	; 0x34
 8006d24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e6      	bne.n	8006d04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	613b      	str	r3, [r7, #16]
   return(result);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d56:	623a      	str	r2, [r7, #32]
 8006d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	69f9      	ldr	r1, [r7, #28]
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e010      	b.n	8006dae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69da      	ldr	r2, [r3, #28]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4013      	ands	r3, r2
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2301      	moveq	r3, #1
 8006d9e:	2300      	movne	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	f43f af48 	beq.w	8006c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3770      	adds	r7, #112	; 0x70
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b095      	sub	sp, #84	; 0x54
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e5      	bne.n	8006df0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d118      	bne.n	8006e5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	647b      	str	r3, [r7, #68]	; 0x44
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6979      	ldr	r1, [r7, #20]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	613b      	str	r3, [r7, #16]
   return(result);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e6      	bne.n	8006e2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006e72:	bf00      	nop
 8006e74:	3754      	adds	r7, #84	; 0x54
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff fb71 	bl	8006584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b088      	sub	sp, #32
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6979      	ldr	r1, [r7, #20]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff fb3d 	bl	8006570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef6:	bf00      	nop
 8006ef8:	3720      	adds	r7, #32
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006f06:	f000 f9c6 	bl	8007296 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <MX_LWIP_Init+0x70>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006f10:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <MX_LWIP_Init+0x74>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006f16:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <MX_LWIP_Init+0x78>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006f1c:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <MX_LWIP_Init+0x7c>)
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <MX_LWIP_Init+0x80>)
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	2300      	movs	r3, #0
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <MX_LWIP_Init+0x78>)
 8006f2a:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <MX_LWIP_Init+0x74>)
 8006f2c:	4910      	ldr	r1, [pc, #64]	; (8006f70 <MX_LWIP_Init+0x70>)
 8006f2e:	4815      	ldr	r0, [pc, #84]	; (8006f84 <MX_LWIP_Init+0x84>)
 8006f30:	f000 fe56 	bl	8007be0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006f34:	4813      	ldr	r0, [pc, #76]	; (8006f84 <MX_LWIP_Init+0x84>)
 8006f36:	f001 f80d 	bl	8007f54 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006f3a:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <MX_LWIP_Init+0x84>)
 8006f3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f40:	089b      	lsrs	r3, r3, #2
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006f4c:	480d      	ldr	r0, [pc, #52]	; (8006f84 <MX_LWIP_Init+0x84>)
 8006f4e:	f001 f811 	bl	8007f74 <netif_set_up>
 8006f52:	e002      	b.n	8006f5a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006f54:	480b      	ldr	r0, [pc, #44]	; (8006f84 <MX_LWIP_Init+0x84>)
 8006f56:	f001 f879 	bl	800804c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006f5a:	490b      	ldr	r1, [pc, #44]	; (8006f88 <MX_LWIP_Init+0x88>)
 8006f5c:	4809      	ldr	r0, [pc, #36]	; (8006f84 <MX_LWIP_Init+0x84>)
 8006f5e:	f001 f8a7 	bl	80080b0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006f62:	4808      	ldr	r0, [pc, #32]	; (8006f84 <MX_LWIP_Init+0x84>)
 8006f64:	f008 f940 	bl	800f1e8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200007c0 	.word	0x200007c0
 8006f74:	200007c4 	.word	0x200007c4
 8006f78:	200007c8 	.word	0x200007c8
 8006f7c:	08012bc1 	.word	0x08012bc1
 8006f80:	080071bd 	.word	0x080071bd
 8006f84:	20000788 	.word	0x20000788
 8006f88:	08006f8d 	.word	0x08006f8d

08006f8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006fac:	4b3c      	ldr	r3, [pc, #240]	; (80070a0 <low_level_init+0x100>)
 8006fae:	4a3d      	ldr	r2, [pc, #244]	; (80070a4 <low_level_init+0x104>)
 8006fb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006fb6:	2380      	movs	r3, #128	; 0x80
 8006fb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006fba:	23e1      	movs	r3, #225	; 0xe1
 8006fbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006fca:	4a35      	ldr	r2, [pc, #212]	; (80070a0 <low_level_init+0x100>)
 8006fcc:	f107 0308 	add.w	r3, r7, #8
 8006fd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006fd2:	4b33      	ldr	r3, [pc, #204]	; (80070a0 <low_level_init+0x100>)
 8006fd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006fd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006fda:	4b31      	ldr	r3, [pc, #196]	; (80070a0 <low_level_init+0x100>)
 8006fdc:	4a32      	ldr	r2, [pc, #200]	; (80070a8 <low_level_init+0x108>)
 8006fde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006fe0:	4b2f      	ldr	r3, [pc, #188]	; (80070a0 <low_level_init+0x100>)
 8006fe2:	4a32      	ldr	r2, [pc, #200]	; (80070ac <low_level_init+0x10c>)
 8006fe4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006fe6:	4b2e      	ldr	r3, [pc, #184]	; (80070a0 <low_level_init+0x100>)
 8006fe8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006fec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006fee:	482c      	ldr	r0, [pc, #176]	; (80070a0 <low_level_init+0x100>)
 8006ff0:	f7fb ff0e 	bl	8002e10 <HAL_ETH_Init>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006ff8:	2238      	movs	r2, #56	; 0x38
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	482c      	ldr	r0, [pc, #176]	; (80070b0 <low_level_init+0x110>)
 8006ffe:	f00c f808 	bl	8013012 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007002:	4b2b      	ldr	r3, [pc, #172]	; (80070b0 <low_level_init+0x110>)
 8007004:	2221      	movs	r2, #33	; 0x21
 8007006:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007008:	4b29      	ldr	r3, [pc, #164]	; (80070b0 <low_level_init+0x110>)
 800700a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800700e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007010:	4b27      	ldr	r3, [pc, #156]	; (80070b0 <low_level_init+0x110>)
 8007012:	2200      	movs	r2, #0
 8007014:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007016:	4827      	ldr	r0, [pc, #156]	; (80070b4 <low_level_init+0x114>)
 8007018:	f000 fcf0 	bl	80079fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2206      	movs	r2, #6
 8007020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007024:	4b1e      	ldr	r3, [pc, #120]	; (80070a0 <low_level_init+0x100>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007030:	4b1b      	ldr	r3, [pc, #108]	; (80070a0 <low_level_init+0x100>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	785a      	ldrb	r2, [r3, #1]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800703c:	4b18      	ldr	r3, [pc, #96]	; (80070a0 <low_level_init+0x100>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	789a      	ldrb	r2, [r3, #2]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007048:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <low_level_init+0x100>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	78da      	ldrb	r2, [r3, #3]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007054:	4b12      	ldr	r3, [pc, #72]	; (80070a0 <low_level_init+0x100>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	791a      	ldrb	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <low_level_init+0x100>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	795a      	ldrb	r2, [r3, #5]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007072:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800707a:	f043 030a 	orr.w	r3, r3, #10
 800707e:	b2da      	uxtb	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <low_level_init+0xf4>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8ca 	bl	8007226 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8007092:	e001      	b.n	8007098 <low_level_init+0xf8>
    Error_Handler();
 8007094:	f7f9 fe74 	bl	8000d80 <Error_Handler>
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20005154 	.word	0x20005154
 80070a4:	40028000 	.word	0x40028000
 80070a8:	20000114 	.word	0x20000114
 80070ac:	20000074 	.word	0x20000074
 80070b0:	20005204 	.word	0x20005204
 80070b4:	08016b20 	.word	0x08016b20

080070b8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b092      	sub	sp, #72	; 0x48
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80070d0:	f107 030c 	add.w	r3, r7, #12
 80070d4:	2230      	movs	r2, #48	; 0x30
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f00b ff9a 	bl	8013012 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80070de:	f107 030c 	add.w	r3, r7, #12
 80070e2:	2230      	movs	r2, #48	; 0x30
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f00b ff93 	bl	8013012 <memset>

  for(q = p; q != NULL; q = q->next)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	643b      	str	r3, [r7, #64]	; 0x40
 80070f0:	e045      	b.n	800717e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80070f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d902      	bls.n	80070fe <low_level_output+0x46>
      return ERR_IF;
 80070f8:	f06f 030b 	mvn.w	r3, #11
 80070fc:	e055      	b.n	80071aa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80070fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007100:	6859      	ldr	r1, [r3, #4]
 8007102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	3348      	adds	r3, #72	; 0x48
 800710e:	443b      	add	r3, r7
 8007110:	3b3c      	subs	r3, #60	; 0x3c
 8007112:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007116:	895b      	ldrh	r3, [r3, #10]
 8007118:	4619      	mov	r1, r3
 800711a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800711c:	4613      	mov	r3, r2
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	3348      	adds	r3, #72	; 0x48
 8007126:	443b      	add	r3, r7
 8007128:	3b38      	subs	r3, #56	; 0x38
 800712a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800712c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007134:	1e5a      	subs	r2, r3, #1
 8007136:	f107 000c 	add.w	r0, r7, #12
 800713a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800713c:	460b      	mov	r3, r1
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	440b      	add	r3, r1
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	18c1      	adds	r1, r0, r3
 8007146:	4613      	mov	r3, r2
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	3348      	adds	r3, #72	; 0x48
 8007150:	443b      	add	r3, r7
 8007152:	3b34      	subs	r3, #52	; 0x34
 8007154:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800715e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007160:	4613      	mov	r3, r2
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	3348      	adds	r3, #72	; 0x48
 800716a:	443b      	add	r3, r7
 800716c:	3b34      	subs	r3, #52	; 0x34
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007174:	3301      	adds	r3, #1
 8007176:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	643b      	str	r3, [r7, #64]	; 0x40
 800717e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1b6      	bne.n	80070f2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	891b      	ldrh	r3, [r3, #8]
 8007188:	461a      	mov	r2, r3
 800718a:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <low_level_output+0xfc>)
 800718c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800718e:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <low_level_output+0xfc>)
 8007190:	f107 030c 	add.w	r3, r7, #12
 8007194:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007196:	4a07      	ldr	r2, [pc, #28]	; (80071b4 <low_level_output+0xfc>)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800719c:	2214      	movs	r2, #20
 800719e:	4905      	ldr	r1, [pc, #20]	; (80071b4 <low_level_output+0xfc>)
 80071a0:	4805      	ldr	r0, [pc, #20]	; (80071b8 <low_level_output+0x100>)
 80071a2:	f7fb febb 	bl	8002f1c <HAL_ETH_Transmit>

  return errval;
 80071a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3748      	adds	r7, #72	; 0x48
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20005204 	.word	0x20005204
 80071b8:	20005154 	.word	0x20005154

080071bc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <ethernetif_init+0x1c>
 80071ca:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <ethernetif_init+0x48>)
 80071cc:	f240 126f 	movw	r2, #367	; 0x16f
 80071d0:	490d      	ldr	r1, [pc, #52]	; (8007208 <ethernetif_init+0x4c>)
 80071d2:	480e      	ldr	r0, [pc, #56]	; (800720c <ethernetif_init+0x50>)
 80071d4:	f00b feb8 	bl	8012f48 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2273      	movs	r2, #115	; 0x73
 80071dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2274      	movs	r2, #116	; 0x74
 80071e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a09      	ldr	r2, [pc, #36]	; (8007210 <ethernetif_init+0x54>)
 80071ec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a08      	ldr	r2, [pc, #32]	; (8007214 <ethernetif_init+0x58>)
 80071f2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff fed3 	bl	8006fa0 <low_level_init>

  return ERR_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	08013d80 	.word	0x08013d80
 8007208:	08013d9c 	.word	0x08013d9c
 800720c:	08013dac 	.word	0x08013dac
 8007210:	0801103d 	.word	0x0801103d
 8007214:	080070b9 	.word	0x080070b9

08007218 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800721c:	f7fa fc90 	bl	8001b40 <HAL_GetTick>
 8007220:	4603      	mov	r3, r0
}
 8007222:	4618      	mov	r0, r3
 8007224:	bd80      	pop	{r7, pc}

08007226 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]

}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	4603      	mov	r3, r0
 8007242:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	b21a      	sxth	r2, r3
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	b29b      	uxth	r3, r3
 8007250:	b21b      	sxth	r3, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	b21b      	sxth	r3, r3
 8007256:	b29b      	uxth	r3, r3
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	061a      	lsls	r2, r3, #24
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0a1b      	lsrs	r3, r3, #8
 800727e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	0e1b      	lsrs	r3, r3, #24
 8007288:	4313      	orrs	r3, r2
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80072a0:	f000 f8d4 	bl	800744c <mem_init>
  memp_init();
 80072a4:	f000 fbda 	bl	8007a5c <memp_init>
  pbuf_init();
  netif_init();
 80072a8:	f000 fc92 	bl	8007bd0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80072ac:	f006 ff62 	bl	800e174 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80072b0:	f001 fcfc 	bl	8008cac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80072b4:	f006 ff16 	bl	800e0e4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <ptr_to_mem+0x20>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	4413      	add	r3, r2
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	200058a8 	.word	0x200058a8

080072e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <mem_to_ptr+0x20>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	b29b      	uxth	r3, r3
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	200058a8 	.word	0x200058a8

08007308 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007308:	b590      	push	{r4, r7, lr}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007310:	4b45      	ldr	r3, [pc, #276]	; (8007428 <plug_holes+0x120>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	429a      	cmp	r2, r3
 8007318:	d206      	bcs.n	8007328 <plug_holes+0x20>
 800731a:	4b44      	ldr	r3, [pc, #272]	; (800742c <plug_holes+0x124>)
 800731c:	f240 12df 	movw	r2, #479	; 0x1df
 8007320:	4943      	ldr	r1, [pc, #268]	; (8007430 <plug_holes+0x128>)
 8007322:	4844      	ldr	r0, [pc, #272]	; (8007434 <plug_holes+0x12c>)
 8007324:	f00b fe10 	bl	8012f48 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007328:	4b43      	ldr	r3, [pc, #268]	; (8007438 <plug_holes+0x130>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	429a      	cmp	r2, r3
 8007330:	d306      	bcc.n	8007340 <plug_holes+0x38>
 8007332:	4b3e      	ldr	r3, [pc, #248]	; (800742c <plug_holes+0x124>)
 8007334:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007338:	4940      	ldr	r1, [pc, #256]	; (800743c <plug_holes+0x134>)
 800733a:	483e      	ldr	r0, [pc, #248]	; (8007434 <plug_holes+0x12c>)
 800733c:	f00b fe04 	bl	8012f48 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	791b      	ldrb	r3, [r3, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <plug_holes+0x4e>
 8007348:	4b38      	ldr	r3, [pc, #224]	; (800742c <plug_holes+0x124>)
 800734a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800734e:	493c      	ldr	r1, [pc, #240]	; (8007440 <plug_holes+0x138>)
 8007350:	4838      	ldr	r0, [pc, #224]	; (8007434 <plug_holes+0x12c>)
 8007352:	f00b fdf9 	bl	8012f48 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800735e:	d906      	bls.n	800736e <plug_holes+0x66>
 8007360:	4b32      	ldr	r3, [pc, #200]	; (800742c <plug_holes+0x124>)
 8007362:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007366:	4937      	ldr	r1, [pc, #220]	; (8007444 <plug_holes+0x13c>)
 8007368:	4832      	ldr	r0, [pc, #200]	; (8007434 <plug_holes+0x12c>)
 800736a:	f00b fded 	bl	8012f48 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff ffa4 	bl	80072c0 <ptr_to_mem>
 8007378:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	429a      	cmp	r2, r3
 8007380:	d024      	beq.n	80073cc <plug_holes+0xc4>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	791b      	ldrb	r3, [r3, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d120      	bne.n	80073cc <plug_holes+0xc4>
 800738a:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <plug_holes+0x130>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	429a      	cmp	r2, r3
 8007392:	d01b      	beq.n	80073cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007394:	4b2c      	ldr	r3, [pc, #176]	; (8007448 <plug_holes+0x140>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	429a      	cmp	r2, r3
 800739c:	d102      	bne.n	80073a4 <plug_holes+0x9c>
      lfree = mem;
 800739e:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <plug_holes+0x140>)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	881a      	ldrh	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073b4:	d00a      	beq.n	80073cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff ff80 	bl	80072c0 <ptr_to_mem>
 80073c0:	4604      	mov	r4, r0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff ff8e 	bl	80072e4 <mem_to_ptr>
 80073c8:	4603      	mov	r3, r0
 80073ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	885b      	ldrh	r3, [r3, #2]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff ff75 	bl	80072c0 <ptr_to_mem>
 80073d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d01f      	beq.n	8007420 <plug_holes+0x118>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	791b      	ldrb	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11b      	bne.n	8007420 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <plug_holes+0x140>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d102      	bne.n	80073f8 <plug_holes+0xf0>
      lfree = pmem;
 80073f2:	4a15      	ldr	r2, [pc, #84]	; (8007448 <plug_holes+0x140>)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	881a      	ldrh	r2, [r3, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007408:	d00a      	beq.n	8007420 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff ff56 	bl	80072c0 <ptr_to_mem>
 8007414:	4604      	mov	r4, r0
 8007416:	68b8      	ldr	r0, [r7, #8]
 8007418:	f7ff ff64 	bl	80072e4 <mem_to_ptr>
 800741c:	4603      	mov	r3, r0
 800741e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}
 8007428:	200058a8 	.word	0x200058a8
 800742c:	08013dd4 	.word	0x08013dd4
 8007430:	08013e04 	.word	0x08013e04
 8007434:	08013e1c 	.word	0x08013e1c
 8007438:	200058ac 	.word	0x200058ac
 800743c:	08013e44 	.word	0x08013e44
 8007440:	08013e60 	.word	0x08013e60
 8007444:	08013e7c 	.word	0x08013e7c
 8007448:	200058b0 	.word	0x200058b0

0800744c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007452:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <mem_init+0x68>)
 8007454:	3303      	adds	r3, #3
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	461a      	mov	r2, r3
 800745c:	4b16      	ldr	r3, [pc, #88]	; (80074b8 <mem_init+0x6c>)
 800745e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007460:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <mem_init+0x6c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800746c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800747a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800747e:	f7ff ff1f 	bl	80072c0 <ptr_to_mem>
 8007482:	4603      	mov	r3, r0
 8007484:	4a0d      	ldr	r2, [pc, #52]	; (80074bc <mem_init+0x70>)
 8007486:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <mem_init+0x70>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <mem_init+0x70>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007498:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800749a:	4b08      	ldr	r3, [pc, #32]	; (80074bc <mem_init+0x70>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80074a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <mem_init+0x6c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a05      	ldr	r2, [pc, #20]	; (80074c0 <mem_init+0x74>)
 80074aa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20005254 	.word	0x20005254
 80074b8:	200058a8 	.word	0x200058a8
 80074bc:	200058ac 	.word	0x200058ac
 80074c0:	200058b0 	.word	0x200058b0

080074c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ff09 	bl	80072e4 <mem_to_ptr>
 80074d2:	4603      	mov	r3, r0
 80074d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fef0 	bl	80072c0 <ptr_to_mem>
 80074e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff feea 	bl	80072c0 <ptr_to_mem>
 80074ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074f6:	d818      	bhi.n	800752a <mem_link_valid+0x66>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007500:	d813      	bhi.n	800752a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007506:	8afa      	ldrh	r2, [r7, #22]
 8007508:	429a      	cmp	r2, r3
 800750a:	d004      	beq.n	8007516 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	8afa      	ldrh	r2, [r7, #22]
 8007512:	429a      	cmp	r2, r3
 8007514:	d109      	bne.n	800752a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007516:	4b08      	ldr	r3, [pc, #32]	; (8007538 <mem_link_valid+0x74>)
 8007518:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	429a      	cmp	r2, r3
 800751e:	d006      	beq.n	800752e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	8afa      	ldrh	r2, [r7, #22]
 8007526:	429a      	cmp	r2, r3
 8007528:	d001      	beq.n	800752e <mem_link_valid+0x6a>
    return 0;
 800752a:	2300      	movs	r3, #0
 800752c:	e000      	b.n	8007530 <mem_link_valid+0x6c>
  }
  return 1;
 800752e:	2301      	movs	r3, #1
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	200058ac 	.word	0x200058ac

0800753c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d04c      	beq.n	80075e4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d007      	beq.n	8007564 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007554:	4b25      	ldr	r3, [pc, #148]	; (80075ec <mem_free+0xb0>)
 8007556:	f240 2273 	movw	r2, #627	; 0x273
 800755a:	4925      	ldr	r1, [pc, #148]	; (80075f0 <mem_free+0xb4>)
 800755c:	4825      	ldr	r0, [pc, #148]	; (80075f4 <mem_free+0xb8>)
 800755e:	f00b fcf3 	bl	8012f48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007562:	e040      	b.n	80075e6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3b08      	subs	r3, #8
 8007568:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800756a:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <mem_free+0xbc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	429a      	cmp	r2, r3
 8007572:	d306      	bcc.n	8007582 <mem_free+0x46>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f103 020c 	add.w	r2, r3, #12
 800757a:	4b20      	ldr	r3, [pc, #128]	; (80075fc <mem_free+0xc0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d907      	bls.n	8007592 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007582:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <mem_free+0xb0>)
 8007584:	f240 227f 	movw	r2, #639	; 0x27f
 8007588:	491d      	ldr	r1, [pc, #116]	; (8007600 <mem_free+0xc4>)
 800758a:	481a      	ldr	r0, [pc, #104]	; (80075f4 <mem_free+0xb8>)
 800758c:	f00b fcdc 	bl	8012f48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007590:	e029      	b.n	80075e6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	791b      	ldrb	r3, [r3, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d107      	bne.n	80075aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800759a:	4b14      	ldr	r3, [pc, #80]	; (80075ec <mem_free+0xb0>)
 800759c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80075a0:	4918      	ldr	r1, [pc, #96]	; (8007604 <mem_free+0xc8>)
 80075a2:	4814      	ldr	r0, [pc, #80]	; (80075f4 <mem_free+0xb8>)
 80075a4:	f00b fcd0 	bl	8012f48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80075a8:	e01d      	b.n	80075e6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7ff ff8a 	bl	80074c4 <mem_link_valid>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <mem_free+0xb0>)
 80075b8:	f240 2295 	movw	r2, #661	; 0x295
 80075bc:	4912      	ldr	r1, [pc, #72]	; (8007608 <mem_free+0xcc>)
 80075be:	480d      	ldr	r0, [pc, #52]	; (80075f4 <mem_free+0xb8>)
 80075c0:	f00b fcc2 	bl	8012f48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80075c4:	e00f      	b.n	80075e6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <mem_free+0xd0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d202      	bcs.n	80075dc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80075d6:	4a0d      	ldr	r2, [pc, #52]	; (800760c <mem_free+0xd0>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fe93 	bl	8007308 <plug_holes>
 80075e2:	e000      	b.n	80075e6 <mem_free+0xaa>
    return;
 80075e4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	08013dd4 	.word	0x08013dd4
 80075f0:	08013ea8 	.word	0x08013ea8
 80075f4:	08013e1c 	.word	0x08013e1c
 80075f8:	200058a8 	.word	0x200058a8
 80075fc:	200058ac 	.word	0x200058ac
 8007600:	08013ecc 	.word	0x08013ecc
 8007604:	08013ee8 	.word	0x08013ee8
 8007608:	08013f10 	.word	0x08013f10
 800760c:	200058b0 	.word	0x200058b0

08007610 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800761c:	887b      	ldrh	r3, [r7, #2]
 800761e:	3303      	adds	r3, #3
 8007620:	b29b      	uxth	r3, r3
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007628:	8bfb      	ldrh	r3, [r7, #30]
 800762a:	2b0b      	cmp	r3, #11
 800762c:	d801      	bhi.n	8007632 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800762e:	230c      	movs	r3, #12
 8007630:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007632:	8bfb      	ldrh	r3, [r7, #30]
 8007634:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007638:	d803      	bhi.n	8007642 <mem_trim+0x32>
 800763a:	8bfa      	ldrh	r2, [r7, #30]
 800763c:	887b      	ldrh	r3, [r7, #2]
 800763e:	429a      	cmp	r2, r3
 8007640:	d201      	bcs.n	8007646 <mem_trim+0x36>
    return NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	e0cc      	b.n	80077e0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007646:	4b68      	ldr	r3, [pc, #416]	; (80077e8 <mem_trim+0x1d8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	429a      	cmp	r2, r3
 800764e:	d304      	bcc.n	800765a <mem_trim+0x4a>
 8007650:	4b66      	ldr	r3, [pc, #408]	; (80077ec <mem_trim+0x1dc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d306      	bcc.n	8007668 <mem_trim+0x58>
 800765a:	4b65      	ldr	r3, [pc, #404]	; (80077f0 <mem_trim+0x1e0>)
 800765c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007660:	4964      	ldr	r1, [pc, #400]	; (80077f4 <mem_trim+0x1e4>)
 8007662:	4865      	ldr	r0, [pc, #404]	; (80077f8 <mem_trim+0x1e8>)
 8007664:	f00b fc70 	bl	8012f48 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007668:	4b5f      	ldr	r3, [pc, #380]	; (80077e8 <mem_trim+0x1d8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d304      	bcc.n	800767c <mem_trim+0x6c>
 8007672:	4b5e      	ldr	r3, [pc, #376]	; (80077ec <mem_trim+0x1dc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d301      	bcc.n	8007680 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	e0af      	b.n	80077e0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3b08      	subs	r3, #8
 8007684:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007686:	69b8      	ldr	r0, [r7, #24]
 8007688:	f7ff fe2c 	bl	80072e4 <mem_to_ptr>
 800768c:	4603      	mov	r3, r0
 800768e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	881a      	ldrh	r2, [r3, #0]
 8007694:	8afb      	ldrh	r3, [r7, #22]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b08      	subs	r3, #8
 800769c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800769e:	8bfa      	ldrh	r2, [r7, #30]
 80076a0:	8abb      	ldrh	r3, [r7, #20]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d906      	bls.n	80076b4 <mem_trim+0xa4>
 80076a6:	4b52      	ldr	r3, [pc, #328]	; (80077f0 <mem_trim+0x1e0>)
 80076a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80076ac:	4953      	ldr	r1, [pc, #332]	; (80077fc <mem_trim+0x1ec>)
 80076ae:	4852      	ldr	r0, [pc, #328]	; (80077f8 <mem_trim+0x1e8>)
 80076b0:	f00b fc4a 	bl	8012f48 <iprintf>
  if (newsize > size) {
 80076b4:	8bfa      	ldrh	r2, [r7, #30]
 80076b6:	8abb      	ldrh	r3, [r7, #20]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d901      	bls.n	80076c0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	e08f      	b.n	80077e0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80076c0:	8bfa      	ldrh	r2, [r7, #30]
 80076c2:	8abb      	ldrh	r3, [r7, #20]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d101      	bne.n	80076cc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	e089      	b.n	80077e0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff fdf5 	bl	80072c0 <ptr_to_mem>
 80076d6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d13f      	bne.n	8007760 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076e8:	d106      	bne.n	80076f8 <mem_trim+0xe8>
 80076ea:	4b41      	ldr	r3, [pc, #260]	; (80077f0 <mem_trim+0x1e0>)
 80076ec:	f240 22f5 	movw	r2, #757	; 0x2f5
 80076f0:	4943      	ldr	r1, [pc, #268]	; (8007800 <mem_trim+0x1f0>)
 80076f2:	4841      	ldr	r0, [pc, #260]	; (80077f8 <mem_trim+0x1e8>)
 80076f4:	f00b fc28 	bl	8012f48 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80076fe:	8afa      	ldrh	r2, [r7, #22]
 8007700:	8bfb      	ldrh	r3, [r7, #30]
 8007702:	4413      	add	r3, r2
 8007704:	b29b      	uxth	r3, r3
 8007706:	3308      	adds	r3, #8
 8007708:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800770a:	4b3e      	ldr	r3, [pc, #248]	; (8007804 <mem_trim+0x1f4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d106      	bne.n	8007722 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fdd2 	bl	80072c0 <ptr_to_mem>
 800771c:	4603      	mov	r3, r0
 800771e:	4a39      	ldr	r2, [pc, #228]	; (8007804 <mem_trim+0x1f4>)
 8007720:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007722:	89fb      	ldrh	r3, [r7, #14]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fdcb 	bl	80072c0 <ptr_to_mem>
 800772a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2200      	movs	r2, #0
 8007730:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	89ba      	ldrh	r2, [r7, #12]
 8007736:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	8afa      	ldrh	r2, [r7, #22]
 800773c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	89fa      	ldrh	r2, [r7, #14]
 8007742:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800774c:	d047      	beq.n	80077de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fdb4 	bl	80072c0 <ptr_to_mem>
 8007758:	4602      	mov	r2, r0
 800775a:	89fb      	ldrh	r3, [r7, #14]
 800775c:	8053      	strh	r3, [r2, #2]
 800775e:	e03e      	b.n	80077de <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007760:	8bfb      	ldrh	r3, [r7, #30]
 8007762:	f103 0214 	add.w	r2, r3, #20
 8007766:	8abb      	ldrh	r3, [r7, #20]
 8007768:	429a      	cmp	r2, r3
 800776a:	d838      	bhi.n	80077de <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800776c:	8afa      	ldrh	r2, [r7, #22]
 800776e:	8bfb      	ldrh	r3, [r7, #30]
 8007770:	4413      	add	r3, r2
 8007772:	b29b      	uxth	r3, r3
 8007774:	3308      	adds	r3, #8
 8007776:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007780:	d106      	bne.n	8007790 <mem_trim+0x180>
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <mem_trim+0x1e0>)
 8007784:	f240 3216 	movw	r2, #790	; 0x316
 8007788:	491d      	ldr	r1, [pc, #116]	; (8007800 <mem_trim+0x1f0>)
 800778a:	481b      	ldr	r0, [pc, #108]	; (80077f8 <mem_trim+0x1e8>)
 800778c:	f00b fbdc 	bl	8012f48 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007790:	89fb      	ldrh	r3, [r7, #14]
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff fd94 	bl	80072c0 <ptr_to_mem>
 8007798:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800779a:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <mem_trim+0x1f4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d202      	bcs.n	80077aa <mem_trim+0x19a>
      lfree = mem2;
 80077a4:	4a17      	ldr	r2, [pc, #92]	; (8007804 <mem_trim+0x1f4>)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2200      	movs	r2, #0
 80077ae:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	881a      	ldrh	r2, [r3, #0]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	8afa      	ldrh	r2, [r7, #22]
 80077bc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	89fa      	ldrh	r2, [r7, #14]
 80077c2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80077cc:	d007      	beq.n	80077de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff fd74 	bl	80072c0 <ptr_to_mem>
 80077d8:	4602      	mov	r2, r0
 80077da:	89fb      	ldrh	r3, [r7, #14]
 80077dc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80077de:	687b      	ldr	r3, [r7, #4]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	200058a8 	.word	0x200058a8
 80077ec:	200058ac 	.word	0x200058ac
 80077f0:	08013dd4 	.word	0x08013dd4
 80077f4:	08013f44 	.word	0x08013f44
 80077f8:	08013e1c 	.word	0x08013e1c
 80077fc:	08013f5c 	.word	0x08013f5c
 8007800:	08013f7c 	.word	0x08013f7c
 8007804:	200058b0 	.word	0x200058b0

08007808 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <mem_malloc+0x14>
    return NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	e0d9      	b.n	80079d0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	3303      	adds	r3, #3
 8007820:	b29b      	uxth	r3, r3
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007828:	8bbb      	ldrh	r3, [r7, #28]
 800782a:	2b0b      	cmp	r3, #11
 800782c:	d801      	bhi.n	8007832 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800782e:	230c      	movs	r3, #12
 8007830:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007832:	8bbb      	ldrh	r3, [r7, #28]
 8007834:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007838:	d803      	bhi.n	8007842 <mem_malloc+0x3a>
 800783a:	8bba      	ldrh	r2, [r7, #28]
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	429a      	cmp	r2, r3
 8007840:	d201      	bcs.n	8007846 <mem_malloc+0x3e>
    return NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	e0c4      	b.n	80079d0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007846:	4b64      	ldr	r3, [pc, #400]	; (80079d8 <mem_malloc+0x1d0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fd4a 	bl	80072e4 <mem_to_ptr>
 8007850:	4603      	mov	r3, r0
 8007852:	83fb      	strh	r3, [r7, #30]
 8007854:	e0b4      	b.n	80079c0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007856:	8bfb      	ldrh	r3, [r7, #30]
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fd31 	bl	80072c0 <ptr_to_mem>
 800785e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	791b      	ldrb	r3, [r3, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	f040 80a4 	bne.w	80079b2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	8bfb      	ldrh	r3, [r7, #30]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	f1a3 0208 	sub.w	r2, r3, #8
 8007878:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800787a:	429a      	cmp	r2, r3
 800787c:	f0c0 8099 	bcc.w	80079b2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	8bfb      	ldrh	r3, [r7, #30]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	f1a3 0208 	sub.w	r2, r3, #8
 800788e:	8bbb      	ldrh	r3, [r7, #28]
 8007890:	3314      	adds	r3, #20
 8007892:	429a      	cmp	r2, r3
 8007894:	d333      	bcc.n	80078fe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007896:	8bfa      	ldrh	r2, [r7, #30]
 8007898:	8bbb      	ldrh	r3, [r7, #28]
 800789a:	4413      	add	r3, r2
 800789c:	b29b      	uxth	r3, r3
 800789e:	3308      	adds	r3, #8
 80078a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80078a2:	8a7b      	ldrh	r3, [r7, #18]
 80078a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078a8:	d106      	bne.n	80078b8 <mem_malloc+0xb0>
 80078aa:	4b4c      	ldr	r3, [pc, #304]	; (80079dc <mem_malloc+0x1d4>)
 80078ac:	f240 3287 	movw	r2, #903	; 0x387
 80078b0:	494b      	ldr	r1, [pc, #300]	; (80079e0 <mem_malloc+0x1d8>)
 80078b2:	484c      	ldr	r0, [pc, #304]	; (80079e4 <mem_malloc+0x1dc>)
 80078b4:	f00b fb48 	bl	8012f48 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80078b8:	8a7b      	ldrh	r3, [r7, #18]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fd00 	bl	80072c0 <ptr_to_mem>
 80078c0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	881a      	ldrh	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8bfa      	ldrh	r2, [r7, #30]
 80078d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	8a7a      	ldrh	r2, [r7, #18]
 80078da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2201      	movs	r2, #1
 80078e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078ea:	d00b      	beq.n	8007904 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff fce5 	bl	80072c0 <ptr_to_mem>
 80078f6:	4602      	mov	r2, r0
 80078f8:	8a7b      	ldrh	r3, [r7, #18]
 80078fa:	8053      	strh	r3, [r2, #2]
 80078fc:	e002      	b.n	8007904 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2201      	movs	r2, #1
 8007902:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007904:	4b34      	ldr	r3, [pc, #208]	; (80079d8 <mem_malloc+0x1d0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	429a      	cmp	r2, r3
 800790c:	d127      	bne.n	800795e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800790e:	4b32      	ldr	r3, [pc, #200]	; (80079d8 <mem_malloc+0x1d0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007914:	e005      	b.n	8007922 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fcd0 	bl	80072c0 <ptr_to_mem>
 8007920:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <mem_malloc+0x12c>
 800792a:	4b2f      	ldr	r3, [pc, #188]	; (80079e8 <mem_malloc+0x1e0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	429a      	cmp	r2, r3
 8007932:	d1f0      	bne.n	8007916 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007934:	4a28      	ldr	r2, [pc, #160]	; (80079d8 <mem_malloc+0x1d0>)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800793a:	4b27      	ldr	r3, [pc, #156]	; (80079d8 <mem_malloc+0x1d0>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b2a      	ldr	r3, [pc, #168]	; (80079e8 <mem_malloc+0x1e0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d00b      	beq.n	800795e <mem_malloc+0x156>
 8007946:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <mem_malloc+0x1d0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	791b      	ldrb	r3, [r3, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <mem_malloc+0x156>
 8007950:	4b22      	ldr	r3, [pc, #136]	; (80079dc <mem_malloc+0x1d4>)
 8007952:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007956:	4925      	ldr	r1, [pc, #148]	; (80079ec <mem_malloc+0x1e4>)
 8007958:	4822      	ldr	r0, [pc, #136]	; (80079e4 <mem_malloc+0x1dc>)
 800795a:	f00b faf5 	bl	8012f48 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800795e:	8bba      	ldrh	r2, [r7, #28]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	4413      	add	r3, r2
 8007964:	3308      	adds	r3, #8
 8007966:	4a20      	ldr	r2, [pc, #128]	; (80079e8 <mem_malloc+0x1e0>)
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	4293      	cmp	r3, r2
 800796c:	d906      	bls.n	800797c <mem_malloc+0x174>
 800796e:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <mem_malloc+0x1d4>)
 8007970:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007974:	491e      	ldr	r1, [pc, #120]	; (80079f0 <mem_malloc+0x1e8>)
 8007976:	481b      	ldr	r0, [pc, #108]	; (80079e4 <mem_malloc+0x1dc>)
 8007978:	f00b fae6 	bl	8012f48 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <mem_malloc+0x18c>
 8007986:	4b15      	ldr	r3, [pc, #84]	; (80079dc <mem_malloc+0x1d4>)
 8007988:	f240 32bb 	movw	r2, #955	; 0x3bb
 800798c:	4919      	ldr	r1, [pc, #100]	; (80079f4 <mem_malloc+0x1ec>)
 800798e:	4815      	ldr	r0, [pc, #84]	; (80079e4 <mem_malloc+0x1dc>)
 8007990:	f00b fada 	bl	8012f48 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d006      	beq.n	80079ac <mem_malloc+0x1a4>
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <mem_malloc+0x1d4>)
 80079a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80079a4:	4914      	ldr	r1, [pc, #80]	; (80079f8 <mem_malloc+0x1f0>)
 80079a6:	480f      	ldr	r0, [pc, #60]	; (80079e4 <mem_malloc+0x1dc>)
 80079a8:	f00b face 	bl	8012f48 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	3308      	adds	r3, #8
 80079b0:	e00e      	b.n	80079d0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80079b2:	8bfb      	ldrh	r3, [r7, #30]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fc83 	bl	80072c0 <ptr_to_mem>
 80079ba:	4603      	mov	r3, r0
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80079c0:	8bfa      	ldrh	r2, [r7, #30]
 80079c2:	8bbb      	ldrh	r3, [r7, #28]
 80079c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80079c8:	429a      	cmp	r2, r3
 80079ca:	f4ff af44 	bcc.w	8007856 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	200058b0 	.word	0x200058b0
 80079dc:	08013dd4 	.word	0x08013dd4
 80079e0:	08013f7c 	.word	0x08013f7c
 80079e4:	08013e1c 	.word	0x08013e1c
 80079e8:	200058ac 	.word	0x200058ac
 80079ec:	08013f90 	.word	0x08013f90
 80079f0:	08013fac 	.word	0x08013fac
 80079f4:	08013fdc 	.word	0x08013fdc
 80079f8:	0801400c 	.word	0x0801400c

080079fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	3303      	adds	r3, #3
 8007a12:	f023 0303 	bic.w	r3, r3, #3
 8007a16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e011      	b.n	8007a42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4413      	add	r3, r2
 8007a3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	885b      	ldrh	r3, [r3, #2]
 8007a46:	461a      	mov	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	dbe7      	blt.n	8007a1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007a4e:	bf00      	nop
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a62:	2300      	movs	r3, #0
 8007a64:	80fb      	strh	r3, [r7, #6]
 8007a66:	e009      	b.n	8007a7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	4a08      	ldr	r2, [pc, #32]	; (8007a8c <memp_init+0x30>)
 8007a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff ffc3 	bl	80079fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	80fb      	strh	r3, [r7, #6]
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d9f2      	bls.n	8007a68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08016b98 	.word	0x08016b98

08007a90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d012      	beq.n	8007acc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d006      	beq.n	8007ac8 <do_memp_malloc_pool+0x38>
 8007aba:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <do_memp_malloc_pool+0x48>)
 8007abc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007ac0:	4906      	ldr	r1, [pc, #24]	; (8007adc <do_memp_malloc_pool+0x4c>)
 8007ac2:	4807      	ldr	r0, [pc, #28]	; (8007ae0 <do_memp_malloc_pool+0x50>)
 8007ac4:	f00b fa40 	bl	8012f48 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	e000      	b.n	8007ace <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08014030 	.word	0x08014030
 8007adc:	08014060 	.word	0x08014060
 8007ae0:	08014084 	.word	0x08014084

08007ae4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d908      	bls.n	8007b06 <memp_malloc+0x22>
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <memp_malloc+0x3c>)
 8007af6:	f240 1257 	movw	r2, #343	; 0x157
 8007afa:	490a      	ldr	r1, [pc, #40]	; (8007b24 <memp_malloc+0x40>)
 8007afc:	480a      	ldr	r0, [pc, #40]	; (8007b28 <memp_malloc+0x44>)
 8007afe:	f00b fa23 	bl	8012f48 <iprintf>
 8007b02:	2300      	movs	r3, #0
 8007b04:	e008      	b.n	8007b18 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <memp_malloc+0x48>)
 8007b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ffbe 	bl	8007a90 <do_memp_malloc_pool>
 8007b14:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007b16:	68fb      	ldr	r3, [r7, #12]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	08014030 	.word	0x08014030
 8007b24:	080140c0 	.word	0x080140c0
 8007b28:	08014084 	.word	0x08014084
 8007b2c:	08016b98 	.word	0x08016b98

08007b30 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d006      	beq.n	8007b52 <do_memp_free_pool+0x22>
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <do_memp_free_pool+0x40>)
 8007b46:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007b4a:	490a      	ldr	r1, [pc, #40]	; (8007b74 <do_memp_free_pool+0x44>)
 8007b4c:	480a      	ldr	r0, [pc, #40]	; (8007b78 <do_memp_free_pool+0x48>)
 8007b4e:	f00b f9fb 	bl	8012f48 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	08014030 	.word	0x08014030
 8007b74:	080140e0 	.word	0x080140e0
 8007b78:	08014084 	.word	0x08014084

08007b7c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d907      	bls.n	8007b9e <memp_free+0x22>
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <memp_free+0x44>)
 8007b90:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007b94:	490b      	ldr	r1, [pc, #44]	; (8007bc4 <memp_free+0x48>)
 8007b96:	480c      	ldr	r0, [pc, #48]	; (8007bc8 <memp_free+0x4c>)
 8007b98:	f00b f9d6 	bl	8012f48 <iprintf>
 8007b9c:	e00c      	b.n	8007bb8 <memp_free+0x3c>

  if (mem == NULL) {
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <memp_free+0x50>)
 8007ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff ffbe 	bl	8007b30 <do_memp_free_pool>
 8007bb4:	e000      	b.n	8007bb8 <memp_free+0x3c>
    return;
 8007bb6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08014030 	.word	0x08014030
 8007bc4:	08014100 	.word	0x08014100
 8007bc8:	08014084 	.word	0x08014084
 8007bcc:	08016b98 	.word	0x08016b98

08007bd0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007bd4:	bf00      	nop
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d108      	bne.n	8007c06 <netif_add+0x26>
 8007bf4:	4b5b      	ldr	r3, [pc, #364]	; (8007d64 <netif_add+0x184>)
 8007bf6:	f240 1227 	movw	r2, #295	; 0x127
 8007bfa:	495b      	ldr	r1, [pc, #364]	; (8007d68 <netif_add+0x188>)
 8007bfc:	485b      	ldr	r0, [pc, #364]	; (8007d6c <netif_add+0x18c>)
 8007bfe:	f00b f9a3 	bl	8012f48 <iprintf>
 8007c02:	2300      	movs	r3, #0
 8007c04:	e0a9      	b.n	8007d5a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d108      	bne.n	8007c1e <netif_add+0x3e>
 8007c0c:	4b55      	ldr	r3, [pc, #340]	; (8007d64 <netif_add+0x184>)
 8007c0e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007c12:	4957      	ldr	r1, [pc, #348]	; (8007d70 <netif_add+0x190>)
 8007c14:	4855      	ldr	r0, [pc, #340]	; (8007d6c <netif_add+0x18c>)
 8007c16:	f00b f997 	bl	8012f48 <iprintf>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e09d      	b.n	8007d5a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007c24:	4b53      	ldr	r3, [pc, #332]	; (8007d74 <netif_add+0x194>)
 8007c26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007c2e:	4b51      	ldr	r3, [pc, #324]	; (8007d74 <netif_add+0x194>)
 8007c30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007c38:	4b4e      	ldr	r3, [pc, #312]	; (8007d74 <netif_add+0x194>)
 8007c3a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4a49      	ldr	r2, [pc, #292]	; (8007d78 <netif_add+0x198>)
 8007c52:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3324      	adds	r3, #36	; 0x24
 8007c66:	2204      	movs	r2, #4
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f00b f9d1 	bl	8013012 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a3a      	ldr	r2, [r7, #32]
 8007c7a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007c7c:	4b3f      	ldr	r3, [pc, #252]	; (8007d7c <netif_add+0x19c>)
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c8a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f914 	bl	8007ec0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <netif_add+0xc8>
    return NULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e058      	b.n	8007d5a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cae:	2bff      	cmp	r3, #255	; 0xff
 8007cb0:	d103      	bne.n	8007cba <netif_add+0xda>
        netif->num = 0;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007cbe:	4b30      	ldr	r3, [pc, #192]	; (8007d80 <netif_add+0x1a0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e02b      	b.n	8007d1e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d106      	bne.n	8007cdc <netif_add+0xfc>
 8007cce:	4b25      	ldr	r3, [pc, #148]	; (8007d64 <netif_add+0x184>)
 8007cd0:	f240 128b 	movw	r2, #395	; 0x18b
 8007cd4:	492b      	ldr	r1, [pc, #172]	; (8007d84 <netif_add+0x1a4>)
 8007cd6:	4825      	ldr	r0, [pc, #148]	; (8007d6c <netif_add+0x18c>)
 8007cd8:	f00b f936 	bl	8012f48 <iprintf>
        num_netifs++;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2bff      	cmp	r3, #255	; 0xff
 8007ce6:	dd06      	ble.n	8007cf6 <netif_add+0x116>
 8007ce8:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <netif_add+0x184>)
 8007cea:	f240 128d 	movw	r2, #397	; 0x18d
 8007cee:	4926      	ldr	r1, [pc, #152]	; (8007d88 <netif_add+0x1a8>)
 8007cf0:	481e      	ldr	r0, [pc, #120]	; (8007d6c <netif_add+0x18c>)
 8007cf2:	f00b f929 	bl	8012f48 <iprintf>
        if (netif2->num == netif->num) {
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d108      	bne.n	8007d18 <netif_add+0x138>
          netif->num++;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8007d16:	e005      	b.n	8007d24 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1d0      	bne.n	8007cc6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1be      	bne.n	8007ca8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d30:	2bfe      	cmp	r3, #254	; 0xfe
 8007d32:	d103      	bne.n	8007d3c <netif_add+0x15c>
    netif_num = 0;
 8007d34:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <netif_add+0x19c>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e006      	b.n	8007d4a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d42:	3301      	adds	r3, #1
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <netif_add+0x19c>)
 8007d48:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <netif_add+0x1a0>)
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007d52:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <netif_add+0x1a0>)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007d58:	68fb      	ldr	r3, [r7, #12]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	0801411c 	.word	0x0801411c
 8007d68:	080141b0 	.word	0x080141b0
 8007d6c:	0801416c 	.word	0x0801416c
 8007d70:	080141cc 	.word	0x080141cc
 8007d74:	08016c0c 	.word	0x08016c0c
 8007d78:	080080d3 	.word	0x080080d3
 8007d7c:	200087c8 	.word	0x200087c8
 8007d80:	200087c0 	.word	0x200087c0
 8007d84:	080141f0 	.word	0x080141f0
 8007d88:	08014204 	.word	0x08014204

08007d8c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f002 facf 	bl	800a33c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f006 fe73 	bl	800ea8c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <netif_do_set_ipaddr+0x20>
 8007dc2:	4b1d      	ldr	r3, [pc, #116]	; (8007e38 <netif_do_set_ipaddr+0x88>)
 8007dc4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007dc8:	491c      	ldr	r1, [pc, #112]	; (8007e3c <netif_do_set_ipaddr+0x8c>)
 8007dca:	481d      	ldr	r0, [pc, #116]	; (8007e40 <netif_do_set_ipaddr+0x90>)
 8007dcc:	f00b f8bc 	bl	8012f48 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <netif_do_set_ipaddr+0x34>
 8007dd6:	4b18      	ldr	r3, [pc, #96]	; (8007e38 <netif_do_set_ipaddr+0x88>)
 8007dd8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007ddc:	4917      	ldr	r1, [pc, #92]	; (8007e3c <netif_do_set_ipaddr+0x8c>)
 8007dde:	4818      	ldr	r0, [pc, #96]	; (8007e40 <netif_do_set_ipaddr+0x90>)
 8007de0:	f00b f8b2 	bl	8012f48 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3304      	adds	r3, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d01c      	beq.n	8007e2c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007e02:	f107 0314 	add.w	r3, r7, #20
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff ffbf 	bl	8007d8c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <netif_do_set_ipaddr+0x6a>
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	e000      	b.n	8007e1c <netif_do_set_ipaddr+0x6c>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007e20:	2101      	movs	r1, #1
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f8d2 	bl	8007fcc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e000      	b.n	8007e2e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	0801411c 	.word	0x0801411c
 8007e3c:	08014234 	.word	0x08014234
 8007e40:	0801416c 	.word	0x0801416c

08007e44 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3308      	adds	r3, #8
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d00a      	beq.n	8007e74 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <netif_do_set_netmask+0x26>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	e000      	b.n	8007e6c <netif_do_set_netmask+0x28>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	330c      	adds	r3, #12
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d00a      	beq.n	8007eb2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <netif_do_set_gw+0x26>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	e000      	b.n	8007eaa <netif_do_set_gw+0x28>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e000      	b.n	8007eb4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007edc:	4b1c      	ldr	r3, [pc, #112]	; (8007f50 <netif_set_addr+0x90>)
 8007ede:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <netif_set_addr+0x90>)
 8007ee8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007ef0:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <netif_set_addr+0x90>)
 8007ef2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <netif_set_addr+0x42>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <netif_set_addr+0x46>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <netif_set_addr+0x48>
 8007f06:	2300      	movs	r3, #0
 8007f08:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f10:	f107 0310 	add.w	r3, r7, #16
 8007f14:	461a      	mov	r2, r3
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7ff ff49 	bl	8007db0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff ff8e 	bl	8007e44 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7ff ffa8 	bl	8007e82 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007f38:	f107 0310 	add.w	r3, r7, #16
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff ff35 	bl	8007db0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007f46:	bf00      	nop
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	08016c0c 	.word	0x08016c0c

08007f54 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007f5c:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <netif_set_default+0x1c>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	200087c4 	.word	0x200087c4

08007f74 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d107      	bne.n	8007f92 <netif_set_up+0x1e>
 8007f82:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <netif_set_up+0x4c>)
 8007f84:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007f88:	490e      	ldr	r1, [pc, #56]	; (8007fc4 <netif_set_up+0x50>)
 8007f8a:	480f      	ldr	r0, [pc, #60]	; (8007fc8 <netif_set_up+0x54>)
 8007f8c:	f00a ffdc 	bl	8012f48 <iprintf>
 8007f90:	e013      	b.n	8007fba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10c      	bne.n	8007fba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007fb2:	2103      	movs	r1, #3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f809 	bl	8007fcc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	0801411c 	.word	0x0801411c
 8007fc4:	080142a4 	.word	0x080142a4
 8007fc8:	0801416c 	.word	0x0801416c

08007fcc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <netif_issue_reports+0x20>
 8007fde:	4b18      	ldr	r3, [pc, #96]	; (8008040 <netif_issue_reports+0x74>)
 8007fe0:	f240 326d 	movw	r2, #877	; 0x36d
 8007fe4:	4917      	ldr	r1, [pc, #92]	; (8008044 <netif_issue_reports+0x78>)
 8007fe6:	4818      	ldr	r0, [pc, #96]	; (8008048 <netif_issue_reports+0x7c>)
 8007fe8:	f00a ffae 	bl	8012f48 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01e      	beq.n	8008038 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008000:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d013      	beq.n	800803a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00e      	beq.n	800803a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3304      	adds	r3, #4
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f009 faf1 	bl	8011618 <etharp_request>
 8008036:	e000      	b.n	800803a <netif_issue_reports+0x6e>
    return;
 8008038:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	0801411c 	.word	0x0801411c
 8008044:	080142c0 	.word	0x080142c0
 8008048:	0801416c 	.word	0x0801416c

0800804c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d107      	bne.n	800806a <netif_set_down+0x1e>
 800805a:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <netif_set_down+0x58>)
 800805c:	f240 329b 	movw	r2, #923	; 0x39b
 8008060:	4911      	ldr	r1, [pc, #68]	; (80080a8 <netif_set_down+0x5c>)
 8008062:	4812      	ldr	r0, [pc, #72]	; (80080ac <netif_set_down+0x60>)
 8008064:	f00a ff70 	bl	8012f48 <iprintf>
 8008068:	e019      	b.n	800809e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d012      	beq.n	800809e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800807e:	f023 0301 	bic.w	r3, r3, #1
 8008082:	b2da      	uxtb	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f008 fe77 	bl	8010d8c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	0801411c 	.word	0x0801411c
 80080a8:	080142e4 	.word	0x080142e4
 80080ac:	0801416c 	.word	0x0801416c

080080b0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	61da      	str	r2, [r3, #28]
  }
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80080de:	f06f 030b 	mvn.w	r3, #11
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d013      	beq.n	8008128 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <netif_get_by_index+0x48>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e00c      	b.n	8008122 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800810e:	3301      	adds	r3, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	79fa      	ldrb	r2, [r7, #7]
 8008114:	429a      	cmp	r2, r3
 8008116:	d101      	bne.n	800811c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	e006      	b.n	800812a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1ef      	bne.n	8008108 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	200087c0 	.word	0x200087c0

0800813c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008140:	4b03      	ldr	r3, [pc, #12]	; (8008150 <pbuf_pool_is_empty+0x14>)
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008146:	bf00      	nop
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	200087c9 	.word	0x200087c9

08008154 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4611      	mov	r1, r2
 8008160:	461a      	mov	r2, r3
 8008162:	460b      	mov	r3, r1
 8008164:	80fb      	strh	r3, [r7, #6]
 8008166:	4613      	mov	r3, r2
 8008168:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	88fa      	ldrh	r2, [r7, #6]
 800817a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	88ba      	ldrh	r2, [r7, #4]
 8008180:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008182:	8b3b      	ldrh	r3, [r7, #24]
 8008184:	b2da      	uxtb	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	7f3a      	ldrb	r2, [r7, #28]
 800818e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	73da      	strb	r2, [r3, #15]
}
 800819c:	bf00      	nop
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08c      	sub	sp, #48	; 0x30
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
 80081b2:	460b      	mov	r3, r1
 80081b4:	80bb      	strh	r3, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80081be:	887b      	ldrh	r3, [r7, #2]
 80081c0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081c4:	d07f      	beq.n	80082c6 <pbuf_alloc+0x11e>
 80081c6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081ca:	f300 80c8 	bgt.w	800835e <pbuf_alloc+0x1b6>
 80081ce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80081d2:	d010      	beq.n	80081f6 <pbuf_alloc+0x4e>
 80081d4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80081d8:	f300 80c1 	bgt.w	800835e <pbuf_alloc+0x1b6>
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d002      	beq.n	80081e6 <pbuf_alloc+0x3e>
 80081e0:	2b41      	cmp	r3, #65	; 0x41
 80081e2:	f040 80bc 	bne.w	800835e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80081e6:	887a      	ldrh	r2, [r7, #2]
 80081e8:	88bb      	ldrh	r3, [r7, #4]
 80081ea:	4619      	mov	r1, r3
 80081ec:	2000      	movs	r0, #0
 80081ee:	f000 f8d1 	bl	8008394 <pbuf_alloc_reference>
 80081f2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80081f4:	e0bd      	b.n	8008372 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80081fe:	88bb      	ldrh	r3, [r7, #4]
 8008200:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008202:	2008      	movs	r0, #8
 8008204:	f7ff fc6e 	bl	8007ae4 <memp_malloc>
 8008208:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008210:	f7ff ff94 	bl	800813c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <pbuf_alloc+0x78>
            pbuf_free(p);
 800821a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800821c:	f000 faa8 	bl	8008770 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008220:	2300      	movs	r3, #0
 8008222:	e0a7      	b.n	8008374 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008226:	3303      	adds	r3, #3
 8008228:	b29b      	uxth	r3, r3
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	b29b      	uxth	r3, r3
 8008230:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008234:	b29b      	uxth	r3, r3
 8008236:	8b7a      	ldrh	r2, [r7, #26]
 8008238:	4293      	cmp	r3, r2
 800823a:	bf28      	it	cs
 800823c:	4613      	movcs	r3, r2
 800823e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008242:	3310      	adds	r3, #16
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4413      	add	r3, r2
 8008248:	3303      	adds	r3, #3
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	4618      	mov	r0, r3
 8008250:	89f9      	ldrh	r1, [r7, #14]
 8008252:	8b7a      	ldrh	r2, [r7, #26]
 8008254:	2300      	movs	r3, #0
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	887b      	ldrh	r3, [r7, #2]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	460b      	mov	r3, r1
 800825e:	4601      	mov	r1, r0
 8008260:	6938      	ldr	r0, [r7, #16]
 8008262:	f7ff ff77 	bl	8008154 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d006      	beq.n	8008280 <pbuf_alloc+0xd8>
 8008272:	4b42      	ldr	r3, [pc, #264]	; (800837c <pbuf_alloc+0x1d4>)
 8008274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008278:	4941      	ldr	r1, [pc, #260]	; (8008380 <pbuf_alloc+0x1d8>)
 800827a:	4842      	ldr	r0, [pc, #264]	; (8008384 <pbuf_alloc+0x1dc>)
 800827c:	f00a fe64 	bl	8012f48 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008282:	3303      	adds	r3, #3
 8008284:	f023 0303 	bic.w	r3, r3, #3
 8008288:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800828c:	d106      	bne.n	800829c <pbuf_alloc+0xf4>
 800828e:	4b3b      	ldr	r3, [pc, #236]	; (800837c <pbuf_alloc+0x1d4>)
 8008290:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008294:	493c      	ldr	r1, [pc, #240]	; (8008388 <pbuf_alloc+0x1e0>)
 8008296:	483b      	ldr	r0, [pc, #236]	; (8008384 <pbuf_alloc+0x1dc>)
 8008298:	f00a fe56 	bl	8012f48 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
 80082a6:	e002      	b.n	80082ae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80082b2:	8b7a      	ldrh	r2, [r7, #26]
 80082b4:	89fb      	ldrh	r3, [r7, #14]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80082be:	8b7b      	ldrh	r3, [r7, #26]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d19e      	bne.n	8008202 <pbuf_alloc+0x5a>
      break;
 80082c4:	e055      	b.n	8008372 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80082c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082c8:	3303      	adds	r3, #3
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f023 0303 	bic.w	r3, r3, #3
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	88bb      	ldrh	r3, [r7, #4]
 80082d4:	3303      	adds	r3, #3
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f023 0303 	bic.w	r3, r3, #3
 80082dc:	b29b      	uxth	r3, r3
 80082de:	4413      	add	r3, r2
 80082e0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80082e2:	8b3b      	ldrh	r3, [r7, #24]
 80082e4:	3310      	adds	r3, #16
 80082e6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082e8:	8b3a      	ldrh	r2, [r7, #24]
 80082ea:	88bb      	ldrh	r3, [r7, #4]
 80082ec:	3303      	adds	r3, #3
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d306      	bcc.n	8008304 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80082f6:	8afa      	ldrh	r2, [r7, #22]
 80082f8:	88bb      	ldrh	r3, [r7, #4]
 80082fa:	3303      	adds	r3, #3
 80082fc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008300:	429a      	cmp	r2, r3
 8008302:	d201      	bcs.n	8008308 <pbuf_alloc+0x160>
        return NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	e035      	b.n	8008374 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008308:	8afb      	ldrh	r3, [r7, #22]
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fa7c 	bl	8007808 <mem_malloc>
 8008310:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <pbuf_alloc+0x174>
        return NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	e02b      	b.n	8008374 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800831c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800831e:	3310      	adds	r3, #16
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	4413      	add	r3, r2
 8008324:	3303      	adds	r3, #3
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	4618      	mov	r0, r3
 800832c:	88b9      	ldrh	r1, [r7, #4]
 800832e:	88ba      	ldrh	r2, [r7, #4]
 8008330:	2300      	movs	r3, #0
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	887b      	ldrh	r3, [r7, #2]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	460b      	mov	r3, r1
 800833a:	4601      	mov	r1, r0
 800833c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800833e:	f7ff ff09 	bl	8008154 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d010      	beq.n	8008370 <pbuf_alloc+0x1c8>
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <pbuf_alloc+0x1d4>)
 8008350:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008354:	490d      	ldr	r1, [pc, #52]	; (800838c <pbuf_alloc+0x1e4>)
 8008356:	480b      	ldr	r0, [pc, #44]	; (8008384 <pbuf_alloc+0x1dc>)
 8008358:	f00a fdf6 	bl	8012f48 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800835c:	e008      	b.n	8008370 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800835e:	4b07      	ldr	r3, [pc, #28]	; (800837c <pbuf_alloc+0x1d4>)
 8008360:	f240 1227 	movw	r2, #295	; 0x127
 8008364:	490a      	ldr	r1, [pc, #40]	; (8008390 <pbuf_alloc+0x1e8>)
 8008366:	4807      	ldr	r0, [pc, #28]	; (8008384 <pbuf_alloc+0x1dc>)
 8008368:	f00a fdee 	bl	8012f48 <iprintf>
      return NULL;
 800836c:	2300      	movs	r3, #0
 800836e:	e001      	b.n	8008374 <pbuf_alloc+0x1cc>
      break;
 8008370:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008374:	4618      	mov	r0, r3
 8008376:	3728      	adds	r7, #40	; 0x28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	0801434c 	.word	0x0801434c
 8008380:	0801437c 	.word	0x0801437c
 8008384:	080143ac 	.word	0x080143ac
 8008388:	080143d4 	.word	0x080143d4
 800838c:	08014408 	.word	0x08014408
 8008390:	08014434 	.word	0x08014434

08008394 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af02      	add	r7, sp, #8
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
 80083a0:	4613      	mov	r3, r2
 80083a2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80083a4:	883b      	ldrh	r3, [r7, #0]
 80083a6:	2b41      	cmp	r3, #65	; 0x41
 80083a8:	d009      	beq.n	80083be <pbuf_alloc_reference+0x2a>
 80083aa:	883b      	ldrh	r3, [r7, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d006      	beq.n	80083be <pbuf_alloc_reference+0x2a>
 80083b0:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <pbuf_alloc_reference+0x5c>)
 80083b2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80083b6:	490f      	ldr	r1, [pc, #60]	; (80083f4 <pbuf_alloc_reference+0x60>)
 80083b8:	480f      	ldr	r0, [pc, #60]	; (80083f8 <pbuf_alloc_reference+0x64>)
 80083ba:	f00a fdc5 	bl	8012f48 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80083be:	2007      	movs	r0, #7
 80083c0:	f7ff fb90 	bl	8007ae4 <memp_malloc>
 80083c4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	e00b      	b.n	80083e8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80083d0:	8879      	ldrh	r1, [r7, #2]
 80083d2:	887a      	ldrh	r2, [r7, #2]
 80083d4:	2300      	movs	r3, #0
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	883b      	ldrh	r3, [r7, #0]
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	460b      	mov	r3, r1
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff feb7 	bl	8008154 <pbuf_init_alloced_pbuf>
  return p;
 80083e6:	68fb      	ldr	r3, [r7, #12]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	0801434c 	.word	0x0801434c
 80083f4:	08014450 	.word	0x08014450
 80083f8:	080143ac 	.word	0x080143ac

080083fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af02      	add	r7, sp, #8
 8008402:	607b      	str	r3, [r7, #4]
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	460b      	mov	r3, r1
 800840a:	81bb      	strh	r3, [r7, #12]
 800840c:	4613      	mov	r3, r2
 800840e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008414:	8a7b      	ldrh	r3, [r7, #18]
 8008416:	3303      	adds	r3, #3
 8008418:	f023 0203 	bic.w	r2, r3, #3
 800841c:	89bb      	ldrh	r3, [r7, #12]
 800841e:	441a      	add	r2, r3
 8008420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008422:	429a      	cmp	r2, r3
 8008424:	d901      	bls.n	800842a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	e018      	b.n	800845c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008430:	8a7b      	ldrh	r3, [r7, #18]
 8008432:	3303      	adds	r3, #3
 8008434:	f023 0303 	bic.w	r3, r3, #3
 8008438:	6a3a      	ldr	r2, [r7, #32]
 800843a:	4413      	add	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	e001      	b.n	8008444 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	89b9      	ldrh	r1, [r7, #12]
 8008448:	89ba      	ldrh	r2, [r7, #12]
 800844a:	2302      	movs	r3, #2
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	897b      	ldrh	r3, [r7, #10]
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	460b      	mov	r3, r1
 8008454:	6979      	ldr	r1, [r7, #20]
 8008456:	f7ff fe7d 	bl	8008154 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800845a:	687b      	ldr	r3, [r7, #4]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <pbuf_realloc+0x20>
 8008476:	4b3a      	ldr	r3, [pc, #232]	; (8008560 <pbuf_realloc+0xfc>)
 8008478:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800847c:	4939      	ldr	r1, [pc, #228]	; (8008564 <pbuf_realloc+0x100>)
 800847e:	483a      	ldr	r0, [pc, #232]	; (8008568 <pbuf_realloc+0x104>)
 8008480:	f00a fd62 	bl	8012f48 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	891b      	ldrh	r3, [r3, #8]
 8008488:	887a      	ldrh	r2, [r7, #2]
 800848a:	429a      	cmp	r2, r3
 800848c:	d263      	bcs.n	8008556 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	891a      	ldrh	r2, [r3, #8]
 8008492:	887b      	ldrh	r3, [r7, #2]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008498:	887b      	ldrh	r3, [r7, #2]
 800849a:	817b      	strh	r3, [r7, #10]
  q = p;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80084a0:	e018      	b.n	80084d4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	895b      	ldrh	r3, [r3, #10]
 80084a6:	897a      	ldrh	r2, [r7, #10]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	891a      	ldrh	r2, [r3, #8]
 80084b0:	893b      	ldrh	r3, [r7, #8]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d106      	bne.n	80084d4 <pbuf_realloc+0x70>
 80084c6:	4b26      	ldr	r3, [pc, #152]	; (8008560 <pbuf_realloc+0xfc>)
 80084c8:	f240 12af 	movw	r2, #431	; 0x1af
 80084cc:	4927      	ldr	r1, [pc, #156]	; (800856c <pbuf_realloc+0x108>)
 80084ce:	4826      	ldr	r0, [pc, #152]	; (8008568 <pbuf_realloc+0x104>)
 80084d0:	f00a fd3a 	bl	8012f48 <iprintf>
  while (rem_len > q->len) {
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	895b      	ldrh	r3, [r3, #10]
 80084d8:	897a      	ldrh	r2, [r7, #10]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d8e1      	bhi.n	80084a2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	7b1b      	ldrb	r3, [r3, #12]
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d121      	bne.n	800852e <pbuf_realloc+0xca>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	895b      	ldrh	r3, [r3, #10]
 80084ee:	897a      	ldrh	r2, [r7, #10]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d01c      	beq.n	800852e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	7b5b      	ldrb	r3, [r3, #13]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d116      	bne.n	800852e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	b29a      	uxth	r2, r3
 800850a:	897b      	ldrh	r3, [r7, #10]
 800850c:	4413      	add	r3, r2
 800850e:	b29b      	uxth	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff f87c 	bl	8007610 <mem_trim>
 8008518:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <pbuf_realloc+0xca>
 8008520:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <pbuf_realloc+0xfc>)
 8008522:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008526:	4912      	ldr	r1, [pc, #72]	; (8008570 <pbuf_realloc+0x10c>)
 8008528:	480f      	ldr	r0, [pc, #60]	; (8008568 <pbuf_realloc+0x104>)
 800852a:	f00a fd0d 	bl	8012f48 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	897a      	ldrh	r2, [r7, #10]
 8008532:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	895a      	ldrh	r2, [r3, #10]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f911 	bl	8008770 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e000      	b.n	8008558 <pbuf_realloc+0xf4>
    return;
 8008556:	bf00      	nop

}
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	0801434c 	.word	0x0801434c
 8008564:	08014464 	.word	0x08014464
 8008568:	080143ac 	.word	0x080143ac
 800856c:	0801447c 	.word	0x0801447c
 8008570:	08014494 	.word	0x08014494

08008574 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <pbuf_add_header_impl+0x22>
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <pbuf_add_header_impl+0xc4>)
 800858a:	f240 12df 	movw	r2, #479	; 0x1df
 800858e:	492b      	ldr	r1, [pc, #172]	; (800863c <pbuf_add_header_impl+0xc8>)
 8008590:	482b      	ldr	r0, [pc, #172]	; (8008640 <pbuf_add_header_impl+0xcc>)
 8008592:	f00a fcd9 	bl	8012f48 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <pbuf_add_header_impl+0x30>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a2:	d301      	bcc.n	80085a8 <pbuf_add_header_impl+0x34>
    return 1;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e043      	b.n	8008630 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <pbuf_add_header_impl+0x3e>
    return 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e03e      	b.n	8008630 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	891a      	ldrh	r2, [r3, #8]
 80085ba:	8a7b      	ldrh	r3, [r7, #18]
 80085bc:	4413      	add	r3, r2
 80085be:	b29b      	uxth	r3, r3
 80085c0:	8a7a      	ldrh	r2, [r7, #18]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d901      	bls.n	80085ca <pbuf_add_header_impl+0x56>
    return 1;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e032      	b.n	8008630 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	7b1b      	ldrb	r3, [r3, #12]
 80085ce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80085d0:	8a3b      	ldrh	r3, [r7, #16]
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00c      	beq.n	80085f4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	425b      	negs	r3, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3310      	adds	r3, #16
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d20d      	bcs.n	800860c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e01d      	b.n	8008630 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d006      	beq.n	8008608 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	425b      	negs	r3, r3
 8008602:	4413      	add	r3, r2
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e001      	b.n	800860c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008608:	2301      	movs	r3, #1
 800860a:	e011      	b.n	8008630 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	895a      	ldrh	r2, [r3, #10]
 8008616:	8a7b      	ldrh	r3, [r7, #18]
 8008618:	4413      	add	r3, r2
 800861a:	b29a      	uxth	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	891a      	ldrh	r2, [r3, #8]
 8008624:	8a7b      	ldrh	r3, [r7, #18]
 8008626:	4413      	add	r3, r2
 8008628:	b29a      	uxth	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	811a      	strh	r2, [r3, #8]


  return 0;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	0801434c 	.word	0x0801434c
 800863c:	080144b0 	.word	0x080144b0
 8008640:	080143ac 	.word	0x080143ac

08008644 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800864e:	2200      	movs	r2, #0
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff ff8e 	bl	8008574 <pbuf_add_header_impl>
 8008658:	4603      	mov	r3, r0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <pbuf_remove_header+0x1e>
 8008674:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <pbuf_remove_header+0x94>)
 8008676:	f240 224b 	movw	r2, #587	; 0x24b
 800867a:	4920      	ldr	r1, [pc, #128]	; (80086fc <pbuf_remove_header+0x98>)
 800867c:	4820      	ldr	r0, [pc, #128]	; (8008700 <pbuf_remove_header+0x9c>)
 800867e:	f00a fc63 	bl	8012f48 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <pbuf_remove_header+0x2c>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868e:	d301      	bcc.n	8008694 <pbuf_remove_header+0x30>
    return 1;
 8008690:	2301      	movs	r3, #1
 8008692:	e02c      	b.n	80086ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <pbuf_remove_header+0x3a>
    return 0;
 800869a:	2300      	movs	r3, #0
 800869c:	e027      	b.n	80086ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	895b      	ldrh	r3, [r3, #10]
 80086a6:	89fa      	ldrh	r2, [r7, #14]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d908      	bls.n	80086be <pbuf_remove_header+0x5a>
 80086ac:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <pbuf_remove_header+0x94>)
 80086ae:	f240 2255 	movw	r2, #597	; 0x255
 80086b2:	4914      	ldr	r1, [pc, #80]	; (8008704 <pbuf_remove_header+0xa0>)
 80086b4:	4812      	ldr	r0, [pc, #72]	; (8008700 <pbuf_remove_header+0x9c>)
 80086b6:	f00a fc47 	bl	8012f48 <iprintf>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e017      	b.n	80086ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	441a      	add	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	895a      	ldrh	r2, [r3, #10]
 80086d4:	89fb      	ldrh	r3, [r7, #14]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	b29a      	uxth	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	891a      	ldrh	r2, [r3, #8]
 80086e2:	89fb      	ldrh	r3, [r7, #14]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	0801434c 	.word	0x0801434c
 80086fc:	080144b0 	.word	0x080144b0
 8008700:	080143ac 	.word	0x080143ac
 8008704:	080144bc 	.word	0x080144bc

08008708 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	807b      	strh	r3, [r7, #2]
 8008714:	4613      	mov	r3, r2
 8008716:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	da08      	bge.n	8008732 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008724:	425b      	negs	r3, r3
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff ff9b 	bl	8008664 <pbuf_remove_header>
 800872e:	4603      	mov	r3, r0
 8008730:	e007      	b.n	8008742 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008732:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008736:	787a      	ldrb	r2, [r7, #1]
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff ff1a 	bl	8008574 <pbuf_add_header_impl>
 8008740:	4603      	mov	r3, r0
  }
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008756:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800875a:	2201      	movs	r2, #1
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff ffd2 	bl	8008708 <pbuf_header_impl>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <pbuf_free+0x22>
 8008784:	4b38      	ldr	r3, [pc, #224]	; (8008868 <pbuf_free+0xf8>)
 8008786:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800878a:	4938      	ldr	r1, [pc, #224]	; (800886c <pbuf_free+0xfc>)
 800878c:	4838      	ldr	r0, [pc, #224]	; (8008870 <pbuf_free+0x100>)
 800878e:	f00a fbdb 	bl	8012f48 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008792:	2300      	movs	r3, #0
 8008794:	e063      	b.n	800885e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800879a:	e05c      	b.n	8008856 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7b9b      	ldrb	r3, [r3, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <pbuf_free+0x42>
 80087a4:	4b30      	ldr	r3, [pc, #192]	; (8008868 <pbuf_free+0xf8>)
 80087a6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80087aa:	4932      	ldr	r1, [pc, #200]	; (8008874 <pbuf_free+0x104>)
 80087ac:	4830      	ldr	r0, [pc, #192]	; (8008870 <pbuf_free+0x100>)
 80087ae:	f00a fbcb 	bl	8012f48 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	7b9b      	ldrb	r3, [r3, #14]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	739a      	strb	r2, [r3, #14]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	7b9b      	ldrb	r3, [r3, #14]
 80087c2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d143      	bne.n	8008852 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7b1b      	ldrb	r3, [r3, #12]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	7b5b      	ldrb	r3, [r3, #13]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d011      	beq.n	800880a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <pbuf_free+0x90>
 80087f2:	4b1d      	ldr	r3, [pc, #116]	; (8008868 <pbuf_free+0xf8>)
 80087f4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80087f8:	491f      	ldr	r1, [pc, #124]	; (8008878 <pbuf_free+0x108>)
 80087fa:	481d      	ldr	r0, [pc, #116]	; (8008870 <pbuf_free+0x100>)
 80087fc:	f00a fba4 	bl	8012f48 <iprintf>
        pc->custom_free_function(p);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
 8008808:	e01d      	b.n	8008846 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d104      	bne.n	800881a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	2008      	movs	r0, #8
 8008814:	f7ff f9b2 	bl	8007b7c <memp_free>
 8008818:	e015      	b.n	8008846 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d104      	bne.n	800882a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	2007      	movs	r0, #7
 8008824:	f7ff f9aa 	bl	8007b7c <memp_free>
 8008828:	e00d      	b.n	8008846 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d103      	bne.n	8008838 <pbuf_free+0xc8>
          mem_free(p);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7fe fe83 	bl	800753c <mem_free>
 8008836:	e006      	b.n	8008846 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008838:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <pbuf_free+0xf8>)
 800883a:	f240 320f 	movw	r2, #783	; 0x30f
 800883e:	490f      	ldr	r1, [pc, #60]	; (800887c <pbuf_free+0x10c>)
 8008840:	480b      	ldr	r0, [pc, #44]	; (8008870 <pbuf_free+0x100>)
 8008842:	f00a fb81 	bl	8012f48 <iprintf>
        }
      }
      count++;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	3301      	adds	r3, #1
 800884a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	607b      	str	r3, [r7, #4]
 8008850:	e001      	b.n	8008856 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d19f      	bne.n	800879c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	0801434c 	.word	0x0801434c
 800886c:	080144b0 	.word	0x080144b0
 8008870:	080143ac 	.word	0x080143ac
 8008874:	080144dc 	.word	0x080144dc
 8008878:	080144f4 	.word	0x080144f4
 800887c:	08014518 	.word	0x08014518

08008880 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800888c:	e005      	b.n	800889a <pbuf_clen+0x1a>
    ++len;
 800888e:	89fb      	ldrh	r3, [r7, #14]
 8008890:	3301      	adds	r3, #1
 8008892:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f6      	bne.n	800888e <pbuf_clen+0xe>
  }
  return len;
 80088a0:	89fb      	ldrh	r3, [r7, #14]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d010      	beq.n	80088e0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7b9b      	ldrb	r3, [r3, #14]
 80088c2:	3301      	adds	r3, #1
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7b9b      	ldrb	r3, [r3, #14]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d106      	bne.n	80088e0 <pbuf_ref+0x30>
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <pbuf_ref+0x38>)
 80088d4:	f240 3242 	movw	r2, #834	; 0x342
 80088d8:	4904      	ldr	r1, [pc, #16]	; (80088ec <pbuf_ref+0x3c>)
 80088da:	4805      	ldr	r0, [pc, #20]	; (80088f0 <pbuf_ref+0x40>)
 80088dc:	f00a fb34 	bl	8012f48 <iprintf>
  }
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	0801434c 	.word	0x0801434c
 80088ec:	0801452c 	.word	0x0801452c
 80088f0:	080143ac 	.word	0x080143ac

080088f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <pbuf_cat+0x16>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d107      	bne.n	800891a <pbuf_cat+0x26>
 800890a:	4b20      	ldr	r3, [pc, #128]	; (800898c <pbuf_cat+0x98>)
 800890c:	f240 3259 	movw	r2, #857	; 0x359
 8008910:	491f      	ldr	r1, [pc, #124]	; (8008990 <pbuf_cat+0x9c>)
 8008912:	4820      	ldr	r0, [pc, #128]	; (8008994 <pbuf_cat+0xa0>)
 8008914:	f00a fb18 	bl	8012f48 <iprintf>
 8008918:	e034      	b.n	8008984 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	e00a      	b.n	8008936 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	891a      	ldrh	r2, [r3, #8]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	891b      	ldrh	r3, [r3, #8]
 8008928:	4413      	add	r3, r2
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f0      	bne.n	8008920 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	891a      	ldrh	r2, [r3, #8]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	895b      	ldrh	r3, [r3, #10]
 8008946:	429a      	cmp	r2, r3
 8008948:	d006      	beq.n	8008958 <pbuf_cat+0x64>
 800894a:	4b10      	ldr	r3, [pc, #64]	; (800898c <pbuf_cat+0x98>)
 800894c:	f240 3262 	movw	r2, #866	; 0x362
 8008950:	4911      	ldr	r1, [pc, #68]	; (8008998 <pbuf_cat+0xa4>)
 8008952:	4810      	ldr	r0, [pc, #64]	; (8008994 <pbuf_cat+0xa0>)
 8008954:	f00a faf8 	bl	8012f48 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d006      	beq.n	800896e <pbuf_cat+0x7a>
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <pbuf_cat+0x98>)
 8008962:	f240 3263 	movw	r2, #867	; 0x363
 8008966:	490d      	ldr	r1, [pc, #52]	; (800899c <pbuf_cat+0xa8>)
 8008968:	480a      	ldr	r0, [pc, #40]	; (8008994 <pbuf_cat+0xa0>)
 800896a:	f00a faed 	bl	8012f48 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	891a      	ldrh	r2, [r3, #8]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	891b      	ldrh	r3, [r3, #8]
 8008976:	4413      	add	r3, r2
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	0801434c 	.word	0x0801434c
 8008990:	08014540 	.word	0x08014540
 8008994:	080143ac 	.word	0x080143ac
 8008998:	08014578 	.word	0x08014578
 800899c:	080145a8 	.word	0x080145a8

080089a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff ffa1 	bl	80088f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80089b2:	6838      	ldr	r0, [r7, #0]
 80089b4:	f7ff ff7c 	bl	80088b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	2300      	movs	r3, #0
 80089d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <pbuf_copy+0x2a>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <pbuf_copy+0x2a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	891a      	ldrh	r2, [r3, #8]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	891b      	ldrh	r3, [r3, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d209      	bcs.n	80089fe <pbuf_copy+0x3e>
 80089ea:	4b57      	ldr	r3, [pc, #348]	; (8008b48 <pbuf_copy+0x188>)
 80089ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 80089f0:	4956      	ldr	r1, [pc, #344]	; (8008b4c <pbuf_copy+0x18c>)
 80089f2:	4857      	ldr	r0, [pc, #348]	; (8008b50 <pbuf_copy+0x190>)
 80089f4:	f00a faa8 	bl	8012f48 <iprintf>
 80089f8:	f06f 030f 	mvn.w	r3, #15
 80089fc:	e09f      	b.n	8008b3e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	895b      	ldrh	r3, [r3, #10]
 8008a02:	461a      	mov	r2, r3
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	895b      	ldrh	r3, [r3, #10]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1acb      	subs	r3, r1, r3
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d306      	bcc.n	8008a24 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	895b      	ldrh	r3, [r3, #10]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	e005      	b.n	8008a30 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	895b      	ldrh	r3, [r3, #10]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	18d0      	adds	r0, r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4413      	add	r3, r2
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4619      	mov	r1, r3
 8008a44:	f00a fb5a 	bl	80130fc <memcpy>
    offset_to += len;
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	895b      	ldrh	r3, [r3, #10]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d906      	bls.n	8008a72 <pbuf_copy+0xb2>
 8008a64:	4b38      	ldr	r3, [pc, #224]	; (8008b48 <pbuf_copy+0x188>)
 8008a66:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008a6a:	493a      	ldr	r1, [pc, #232]	; (8008b54 <pbuf_copy+0x194>)
 8008a6c:	4838      	ldr	r0, [pc, #224]	; (8008b50 <pbuf_copy+0x190>)
 8008a6e:	f00a fa6b 	bl	8012f48 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	895b      	ldrh	r3, [r3, #10]
 8008a76:	461a      	mov	r2, r3
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d906      	bls.n	8008a8c <pbuf_copy+0xcc>
 8008a7e:	4b32      	ldr	r3, [pc, #200]	; (8008b48 <pbuf_copy+0x188>)
 8008a80:	f240 32da 	movw	r2, #986	; 0x3da
 8008a84:	4934      	ldr	r1, [pc, #208]	; (8008b58 <pbuf_copy+0x198>)
 8008a86:	4832      	ldr	r0, [pc, #200]	; (8008b50 <pbuf_copy+0x190>)
 8008a88:	f00a fa5e 	bl	8012f48 <iprintf>
    if (offset_from >= p_from->len) {
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	895b      	ldrh	r3, [r3, #10]
 8008a90:	461a      	mov	r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d304      	bcc.n	8008aa2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	895b      	ldrh	r3, [r3, #10]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d114      	bne.n	8008ad8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10c      	bne.n	8008ad8 <pbuf_copy+0x118>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <pbuf_copy+0x118>
 8008ac4:	4b20      	ldr	r3, [pc, #128]	; (8008b48 <pbuf_copy+0x188>)
 8008ac6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008aca:	4924      	ldr	r1, [pc, #144]	; (8008b5c <pbuf_copy+0x19c>)
 8008acc:	4820      	ldr	r0, [pc, #128]	; (8008b50 <pbuf_copy+0x190>)
 8008ace:	f00a fa3b 	bl	8012f48 <iprintf>
 8008ad2:	f06f 030f 	mvn.w	r3, #15
 8008ad6:	e032      	b.n	8008b3e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d013      	beq.n	8008b06 <pbuf_copy+0x146>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	895a      	ldrh	r2, [r3, #10]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	891b      	ldrh	r3, [r3, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d10d      	bne.n	8008b06 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <pbuf_copy+0x146>
 8008af2:	4b15      	ldr	r3, [pc, #84]	; (8008b48 <pbuf_copy+0x188>)
 8008af4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008af8:	4919      	ldr	r1, [pc, #100]	; (8008b60 <pbuf_copy+0x1a0>)
 8008afa:	4815      	ldr	r0, [pc, #84]	; (8008b50 <pbuf_copy+0x190>)
 8008afc:	f00a fa24 	bl	8012f48 <iprintf>
 8008b00:	f06f 0305 	mvn.w	r3, #5
 8008b04:	e01b      	b.n	8008b3e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d013      	beq.n	8008b34 <pbuf_copy+0x174>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	895a      	ldrh	r2, [r3, #10]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	891b      	ldrh	r3, [r3, #8]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d10d      	bne.n	8008b34 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d009      	beq.n	8008b34 <pbuf_copy+0x174>
 8008b20:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <pbuf_copy+0x188>)
 8008b22:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008b26:	490e      	ldr	r1, [pc, #56]	; (8008b60 <pbuf_copy+0x1a0>)
 8008b28:	4809      	ldr	r0, [pc, #36]	; (8008b50 <pbuf_copy+0x190>)
 8008b2a:	f00a fa0d 	bl	8012f48 <iprintf>
 8008b2e:	f06f 0305 	mvn.w	r3, #5
 8008b32:	e004      	b.n	8008b3e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f47f af61 	bne.w	80089fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	0801434c 	.word	0x0801434c
 8008b4c:	080145f4 	.word	0x080145f4
 8008b50:	080143ac 	.word	0x080143ac
 8008b54:	08014624 	.word	0x08014624
 8008b58:	0801463c 	.word	0x0801463c
 8008b5c:	08014658 	.word	0x08014658
 8008b60:	08014668 	.word	0x08014668

08008b64 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	460b      	mov	r3, r1
 8008b74:	80fb      	strh	r3, [r7, #6]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d108      	bne.n	8008b9a <pbuf_copy_partial+0x36>
 8008b88:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <pbuf_copy_partial+0xd4>)
 8008b8a:	f240 420a 	movw	r2, #1034	; 0x40a
 8008b8e:	492b      	ldr	r1, [pc, #172]	; (8008c3c <pbuf_copy_partial+0xd8>)
 8008b90:	482b      	ldr	r0, [pc, #172]	; (8008c40 <pbuf_copy_partial+0xdc>)
 8008b92:	f00a f9d9 	bl	8012f48 <iprintf>
 8008b96:	2300      	movs	r3, #0
 8008b98:	e04a      	b.n	8008c30 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d108      	bne.n	8008bb2 <pbuf_copy_partial+0x4e>
 8008ba0:	4b25      	ldr	r3, [pc, #148]	; (8008c38 <pbuf_copy_partial+0xd4>)
 8008ba2:	f240 420b 	movw	r2, #1035	; 0x40b
 8008ba6:	4927      	ldr	r1, [pc, #156]	; (8008c44 <pbuf_copy_partial+0xe0>)
 8008ba8:	4825      	ldr	r0, [pc, #148]	; (8008c40 <pbuf_copy_partial+0xdc>)
 8008baa:	f00a f9cd 	bl	8012f48 <iprintf>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e03e      	b.n	8008c30 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	61fb      	str	r3, [r7, #28]
 8008bb6:	e034      	b.n	8008c22 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008bb8:	88bb      	ldrh	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <pbuf_copy_partial+0x70>
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	895b      	ldrh	r3, [r3, #10]
 8008bc2:	88ba      	ldrh	r2, [r7, #4]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d305      	bcc.n	8008bd4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	895b      	ldrh	r3, [r3, #10]
 8008bcc:	88ba      	ldrh	r2, [r7, #4]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	80bb      	strh	r3, [r7, #4]
 8008bd2:	e023      	b.n	8008c1c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	895a      	ldrh	r2, [r3, #10]
 8008bd8:	88bb      	ldrh	r3, [r7, #4]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008bde:	8b3a      	ldrh	r2, [r7, #24]
 8008be0:	88fb      	ldrh	r3, [r7, #6]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d901      	bls.n	8008bea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008be6:	88fb      	ldrh	r3, [r7, #6]
 8008be8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008bea:	8b7b      	ldrh	r3, [r7, #26]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	18d0      	adds	r0, r2, r3
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	88bb      	ldrh	r3, [r7, #4]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	8b3a      	ldrh	r2, [r7, #24]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f00a fa7e 	bl	80130fc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c00:	8afa      	ldrh	r2, [r7, #22]
 8008c02:	8b3b      	ldrh	r3, [r7, #24]
 8008c04:	4413      	add	r3, r2
 8008c06:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008c08:	8b7a      	ldrh	r2, [r7, #26]
 8008c0a:	8b3b      	ldrh	r3, [r7, #24]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008c10:	88fa      	ldrh	r2, [r7, #6]
 8008c12:	8b3b      	ldrh	r3, [r7, #24]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <pbuf_copy_partial+0xca>
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1c4      	bne.n	8008bb8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008c2e:	8afb      	ldrh	r3, [r7, #22]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	0801434c 	.word	0x0801434c
 8008c3c:	08014694 	.word	0x08014694
 8008c40:	080143ac 	.word	0x080143ac
 8008c44:	080146b4 	.word	0x080146b4

08008c48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	603a      	str	r2, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
 8008c54:	460b      	mov	r3, r1
 8008c56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	8919      	ldrh	r1, [r3, #8]
 8008c5c:	88ba      	ldrh	r2, [r7, #4]
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff faa1 	bl	80081a8 <pbuf_alloc>
 8008c66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <pbuf_clone+0x2a>
    return NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e011      	b.n	8008c96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7ff fea3 	bl	80089c0 <pbuf_copy>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008c7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <pbuf_clone+0x4c>
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <pbuf_clone+0x58>)
 8008c88:	f240 5224 	movw	r2, #1316	; 0x524
 8008c8c:	4905      	ldr	r1, [pc, #20]	; (8008ca4 <pbuf_clone+0x5c>)
 8008c8e:	4806      	ldr	r0, [pc, #24]	; (8008ca8 <pbuf_clone+0x60>)
 8008c90:	f00a f95a 	bl	8012f48 <iprintf>
  return q;
 8008c94:	68fb      	ldr	r3, [r7, #12]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	0801434c 	.word	0x0801434c
 8008ca4:	080147c0 	.word	0x080147c0
 8008ca8:	080143ac 	.word	0x080143ac

08008cac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008cb0:	f00a f85c 	bl	8012d6c <rand>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	4b01      	ldr	r3, [pc, #4]	; (8008ccc <tcp_init+0x20>)
 8008cc6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008cc8:	bf00      	nop
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	2000000a 	.word	0x2000000a

08008cd0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	7d1b      	ldrb	r3, [r3, #20]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d105      	bne.n	8008cec <tcp_free+0x1c>
 8008ce0:	4b06      	ldr	r3, [pc, #24]	; (8008cfc <tcp_free+0x2c>)
 8008ce2:	22d4      	movs	r2, #212	; 0xd4
 8008ce4:	4906      	ldr	r1, [pc, #24]	; (8008d00 <tcp_free+0x30>)
 8008ce6:	4807      	ldr	r0, [pc, #28]	; (8008d04 <tcp_free+0x34>)
 8008ce8:	f00a f92e 	bl	8012f48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	2001      	movs	r0, #1
 8008cf0:	f7fe ff44 	bl	8007b7c <memp_free>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	0801484c 	.word	0x0801484c
 8008d00:	0801487c 	.word	0x0801487c
 8008d04:	08014890 	.word	0x08014890

08008d08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	7d1b      	ldrb	r3, [r3, #20]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d105      	bne.n	8008d24 <tcp_free_listen+0x1c>
 8008d18:	4b06      	ldr	r3, [pc, #24]	; (8008d34 <tcp_free_listen+0x2c>)
 8008d1a:	22df      	movs	r2, #223	; 0xdf
 8008d1c:	4906      	ldr	r1, [pc, #24]	; (8008d38 <tcp_free_listen+0x30>)
 8008d1e:	4807      	ldr	r0, [pc, #28]	; (8008d3c <tcp_free_listen+0x34>)
 8008d20:	f00a f912 	bl	8012f48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	2002      	movs	r0, #2
 8008d28:	f7fe ff28 	bl	8007b7c <memp_free>
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	0801484c 	.word	0x0801484c
 8008d38:	080148b8 	.word	0x080148b8
 8008d3c:	08014890 	.word	0x08014890

08008d40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008d44:	f000 fea2 	bl	8009a8c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <tcp_tmr+0x28>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <tcp_tmr+0x28>)
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <tcp_tmr+0x28>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008d60:	f000 fb54 	bl	800940c <tcp_slowtmr>
  }
}
 8008d64:	bf00      	nop
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	200087e1 	.word	0x200087e1

08008d6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <tcp_remove_listener+0x1c>
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <tcp_remove_listener+0x48>)
 8008d7e:	22ff      	movs	r2, #255	; 0xff
 8008d80:	490d      	ldr	r1, [pc, #52]	; (8008db8 <tcp_remove_listener+0x4c>)
 8008d82:	480e      	ldr	r0, [pc, #56]	; (8008dbc <tcp_remove_listener+0x50>)
 8008d84:	f00a f8e0 	bl	8012f48 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	e00a      	b.n	8008da4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d102      	bne.n	8008d9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1f1      	bne.n	8008d8e <tcp_remove_listener+0x22>
    }
  }
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	0801484c 	.word	0x0801484c
 8008db8:	080148d4 	.word	0x080148d4
 8008dbc:	08014890 	.word	0x08014890

08008dc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <tcp_listen_closed+0x1c>
 8008dce:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <tcp_listen_closed+0x60>)
 8008dd0:	f240 1211 	movw	r2, #273	; 0x111
 8008dd4:	4913      	ldr	r1, [pc, #76]	; (8008e24 <tcp_listen_closed+0x64>)
 8008dd6:	4814      	ldr	r0, [pc, #80]	; (8008e28 <tcp_listen_closed+0x68>)
 8008dd8:	f00a f8b6 	bl	8012f48 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	7d1b      	ldrb	r3, [r3, #20]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d006      	beq.n	8008df2 <tcp_listen_closed+0x32>
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <tcp_listen_closed+0x60>)
 8008de6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008dea:	4910      	ldr	r1, [pc, #64]	; (8008e2c <tcp_listen_closed+0x6c>)
 8008dec:	480e      	ldr	r0, [pc, #56]	; (8008e28 <tcp_listen_closed+0x68>)
 8008dee:	f00a f8ab 	bl	8012f48 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008df2:	2301      	movs	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	e00b      	b.n	8008e10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008df8:	4a0d      	ldr	r2, [pc, #52]	; (8008e30 <tcp_listen_closed+0x70>)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff ffb1 	bl	8008d6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d9f0      	bls.n	8008df8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0801484c 	.word	0x0801484c
 8008e24:	080148fc 	.word	0x080148fc
 8008e28:	08014890 	.word	0x08014890
 8008e2c:	08014908 	.word	0x08014908
 8008e30:	08016bd4 	.word	0x08016bd4

08008e34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008e34:	b5b0      	push	{r4, r5, r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af04      	add	r7, sp, #16
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <tcp_close_shutdown+0x20>
 8008e46:	4b63      	ldr	r3, [pc, #396]	; (8008fd4 <tcp_close_shutdown+0x1a0>)
 8008e48:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008e4c:	4962      	ldr	r1, [pc, #392]	; (8008fd8 <tcp_close_shutdown+0x1a4>)
 8008e4e:	4863      	ldr	r0, [pc, #396]	; (8008fdc <tcp_close_shutdown+0x1a8>)
 8008e50:	f00a f87a 	bl	8012f48 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d066      	beq.n	8008f28 <tcp_close_shutdown+0xf4>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7d1b      	ldrb	r3, [r3, #20]
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d003      	beq.n	8008e6a <tcp_close_shutdown+0x36>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7d1b      	ldrb	r3, [r3, #20]
 8008e66:	2b07      	cmp	r3, #7
 8008e68:	d15e      	bne.n	8008f28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d104      	bne.n	8008e7c <tcp_close_shutdown+0x48>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008e7a:	d055      	beq.n	8008f28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	8b5b      	ldrh	r3, [r3, #26]
 8008e80:	f003 0310 	and.w	r3, r3, #16
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d106      	bne.n	8008e96 <tcp_close_shutdown+0x62>
 8008e88:	4b52      	ldr	r3, [pc, #328]	; (8008fd4 <tcp_close_shutdown+0x1a0>)
 8008e8a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008e8e:	4954      	ldr	r1, [pc, #336]	; (8008fe0 <tcp_close_shutdown+0x1ac>)
 8008e90:	4852      	ldr	r0, [pc, #328]	; (8008fdc <tcp_close_shutdown+0x1a8>)
 8008e92:	f00a f859 	bl	8012f48 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008e9e:	687d      	ldr	r5, [r7, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	8ad2      	ldrh	r2, [r2, #22]
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	8b09      	ldrh	r1, [r1, #24]
 8008eac:	9102      	str	r1, [sp, #8]
 8008eae:	9201      	str	r2, [sp, #4]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	462b      	mov	r3, r5
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f004 fe91 	bl	800dbe0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 f8c6 	bl	800a050 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008ec4:	4b47      	ldr	r3, [pc, #284]	; (8008fe4 <tcp_close_shutdown+0x1b0>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d105      	bne.n	8008eda <tcp_close_shutdown+0xa6>
 8008ece:	4b45      	ldr	r3, [pc, #276]	; (8008fe4 <tcp_close_shutdown+0x1b0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	4a43      	ldr	r2, [pc, #268]	; (8008fe4 <tcp_close_shutdown+0x1b0>)
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	e013      	b.n	8008f02 <tcp_close_shutdown+0xce>
 8008eda:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <tcp_close_shutdown+0x1b0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	e00c      	b.n	8008efc <tcp_close_shutdown+0xc8>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d104      	bne.n	8008ef6 <tcp_close_shutdown+0xc2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	60da      	str	r2, [r3, #12]
 8008ef4:	e005      	b.n	8008f02 <tcp_close_shutdown+0xce>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1ef      	bne.n	8008ee2 <tcp_close_shutdown+0xae>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	60da      	str	r2, [r3, #12]
 8008f08:	4b37      	ldr	r3, [pc, #220]	; (8008fe8 <tcp_close_shutdown+0x1b4>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008f0e:	4b37      	ldr	r3, [pc, #220]	; (8008fec <tcp_close_shutdown+0x1b8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d102      	bne.n	8008f1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008f18:	f003 fd5e 	bl	800c9d8 <tcp_trigger_input_pcb_close>
 8008f1c:	e002      	b.n	8008f24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fed6 	bl	8008cd0 <tcp_free>
      }
      return ERR_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e050      	b.n	8008fca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7d1b      	ldrb	r3, [r3, #20]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d03b      	beq.n	8008fa8 <tcp_close_shutdown+0x174>
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	dc44      	bgt.n	8008fbe <tcp_close_shutdown+0x18a>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <tcp_close_shutdown+0x10a>
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d02a      	beq.n	8008f92 <tcp_close_shutdown+0x15e>
 8008f3c:	e03f      	b.n	8008fbe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8adb      	ldrh	r3, [r3, #22]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d021      	beq.n	8008f8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008f46:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <tcp_close_shutdown+0x1bc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d105      	bne.n	8008f5c <tcp_close_shutdown+0x128>
 8008f50:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <tcp_close_shutdown+0x1bc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	4a26      	ldr	r2, [pc, #152]	; (8008ff0 <tcp_close_shutdown+0x1bc>)
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	e013      	b.n	8008f84 <tcp_close_shutdown+0x150>
 8008f5c:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <tcp_close_shutdown+0x1bc>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60bb      	str	r3, [r7, #8]
 8008f62:	e00c      	b.n	8008f7e <tcp_close_shutdown+0x14a>
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d104      	bne.n	8008f78 <tcp_close_shutdown+0x144>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	60da      	str	r2, [r3, #12]
 8008f76:	e005      	b.n	8008f84 <tcp_close_shutdown+0x150>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1ef      	bne.n	8008f64 <tcp_close_shutdown+0x130>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fea0 	bl	8008cd0 <tcp_free>
      break;
 8008f90:	e01a      	b.n	8008fc8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff ff14 	bl	8008dc0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	4816      	ldr	r0, [pc, #88]	; (8008ff4 <tcp_close_shutdown+0x1c0>)
 8008f9c:	f001 f8a8 	bl	800a0f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff feb1 	bl	8008d08 <tcp_free_listen>
      break;
 8008fa6:	e00f      	b.n	8008fc8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	480e      	ldr	r0, [pc, #56]	; (8008fe4 <tcp_close_shutdown+0x1b0>)
 8008fac:	f001 f8a0 	bl	800a0f0 <tcp_pcb_remove>
 8008fb0:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <tcp_close_shutdown+0x1b4>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff fe8a 	bl	8008cd0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008fbc:	e004      	b.n	8008fc8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f81a 	bl	8008ff8 <tcp_close_shutdown_fin>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	e000      	b.n	8008fca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	0801484c 	.word	0x0801484c
 8008fd8:	08014920 	.word	0x08014920
 8008fdc:	08014890 	.word	0x08014890
 8008fe0:	08014940 	.word	0x08014940
 8008fe4:	200087d8 	.word	0x200087d8
 8008fe8:	200087e0 	.word	0x200087e0
 8008fec:	20008818 	.word	0x20008818
 8008ff0:	200087d0 	.word	0x200087d0
 8008ff4:	200087d4 	.word	0x200087d4

08008ff8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <tcp_close_shutdown_fin+0x1c>
 8009006:	4b2e      	ldr	r3, [pc, #184]	; (80090c0 <tcp_close_shutdown_fin+0xc8>)
 8009008:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800900c:	492d      	ldr	r1, [pc, #180]	; (80090c4 <tcp_close_shutdown_fin+0xcc>)
 800900e:	482e      	ldr	r0, [pc, #184]	; (80090c8 <tcp_close_shutdown_fin+0xd0>)
 8009010:	f009 ff9a 	bl	8012f48 <iprintf>

  switch (pcb->state) {
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	7d1b      	ldrb	r3, [r3, #20]
 8009018:	2b07      	cmp	r3, #7
 800901a:	d020      	beq.n	800905e <tcp_close_shutdown_fin+0x66>
 800901c:	2b07      	cmp	r3, #7
 800901e:	dc2b      	bgt.n	8009078 <tcp_close_shutdown_fin+0x80>
 8009020:	2b03      	cmp	r3, #3
 8009022:	d002      	beq.n	800902a <tcp_close_shutdown_fin+0x32>
 8009024:	2b04      	cmp	r3, #4
 8009026:	d00d      	beq.n	8009044 <tcp_close_shutdown_fin+0x4c>
 8009028:	e026      	b.n	8009078 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f003 fee6 	bl	800cdfc <tcp_send_fin>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d11f      	bne.n	800907c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2205      	movs	r2, #5
 8009040:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009042:	e01b      	b.n	800907c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f003 fed9 	bl	800cdfc <tcp_send_fin>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800904e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d114      	bne.n	8009080 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2205      	movs	r2, #5
 800905a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800905c:	e010      	b.n	8009080 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f003 fecc 	bl	800cdfc <tcp_send_fin>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d109      	bne.n	8009084 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2209      	movs	r2, #9
 8009074:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009076:	e005      	b.n	8009084 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	e01c      	b.n	80090b6 <tcp_close_shutdown_fin+0xbe>
      break;
 800907c:	bf00      	nop
 800907e:	e002      	b.n	8009086 <tcp_close_shutdown_fin+0x8e>
      break;
 8009080:	bf00      	nop
 8009082:	e000      	b.n	8009086 <tcp_close_shutdown_fin+0x8e>
      break;
 8009084:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d103      	bne.n	8009096 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f003 fff2 	bl	800d078 <tcp_output>
 8009094:	e00d      	b.n	80090b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d108      	bne.n	80090b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	8b5b      	ldrh	r3, [r3, #26]
 80090a4:	f043 0308 	orr.w	r3, r3, #8
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	e001      	b.n	80090b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80090b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	0801484c 	.word	0x0801484c
 80090c4:	080148fc 	.word	0x080148fc
 80090c8:	08014890 	.word	0x08014890

080090cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d109      	bne.n	80090ee <tcp_close+0x22>
 80090da:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <tcp_close+0x4c>)
 80090dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80090e0:	490e      	ldr	r1, [pc, #56]	; (800911c <tcp_close+0x50>)
 80090e2:	480f      	ldr	r0, [pc, #60]	; (8009120 <tcp_close+0x54>)
 80090e4:	f009 ff30 	bl	8012f48 <iprintf>
 80090e8:	f06f 030f 	mvn.w	r3, #15
 80090ec:	e00f      	b.n	800910e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7d1b      	ldrb	r3, [r3, #20]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d006      	beq.n	8009104 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	8b5b      	ldrh	r3, [r3, #26]
 80090fa:	f043 0310 	orr.w	r3, r3, #16
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009104:	2101      	movs	r1, #1
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fe94 	bl	8008e34 <tcp_close_shutdown>
 800910c:	4603      	mov	r3, r0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	0801484c 	.word	0x0801484c
 800911c:	0801495c 	.word	0x0801495c
 8009120:	08014890 	.word	0x08014890

08009124 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08e      	sub	sp, #56	; 0x38
 8009128:	af04      	add	r7, sp, #16
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d107      	bne.n	8009144 <tcp_abandon+0x20>
 8009134:	4b52      	ldr	r3, [pc, #328]	; (8009280 <tcp_abandon+0x15c>)
 8009136:	f240 223d 	movw	r2, #573	; 0x23d
 800913a:	4952      	ldr	r1, [pc, #328]	; (8009284 <tcp_abandon+0x160>)
 800913c:	4852      	ldr	r0, [pc, #328]	; (8009288 <tcp_abandon+0x164>)
 800913e:	f009 ff03 	bl	8012f48 <iprintf>
 8009142:	e099      	b.n	8009278 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7d1b      	ldrb	r3, [r3, #20]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d106      	bne.n	800915a <tcp_abandon+0x36>
 800914c:	4b4c      	ldr	r3, [pc, #304]	; (8009280 <tcp_abandon+0x15c>)
 800914e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009152:	494e      	ldr	r1, [pc, #312]	; (800928c <tcp_abandon+0x168>)
 8009154:	484c      	ldr	r0, [pc, #304]	; (8009288 <tcp_abandon+0x164>)
 8009156:	f009 fef7 	bl	8012f48 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	7d1b      	ldrb	r3, [r3, #20]
 800915e:	2b0a      	cmp	r3, #10
 8009160:	d107      	bne.n	8009172 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	484a      	ldr	r0, [pc, #296]	; (8009290 <tcp_abandon+0x16c>)
 8009166:	f000 ffc3 	bl	800a0f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff fdb0 	bl	8008cd0 <tcp_free>
 8009170:	e082      	b.n	8009278 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7d1b      	ldrb	r3, [r3, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d126      	bne.n	80091ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	8adb      	ldrh	r3, [r3, #22]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d02e      	beq.n	8009202 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80091a4:	4b3b      	ldr	r3, [pc, #236]	; (8009294 <tcp_abandon+0x170>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d105      	bne.n	80091ba <tcp_abandon+0x96>
 80091ae:	4b39      	ldr	r3, [pc, #228]	; (8009294 <tcp_abandon+0x170>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	4a37      	ldr	r2, [pc, #220]	; (8009294 <tcp_abandon+0x170>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e013      	b.n	80091e2 <tcp_abandon+0xbe>
 80091ba:	4b36      	ldr	r3, [pc, #216]	; (8009294 <tcp_abandon+0x170>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	61fb      	str	r3, [r7, #28]
 80091c0:	e00c      	b.n	80091dc <tcp_abandon+0xb8>
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d104      	bne.n	80091d6 <tcp_abandon+0xb2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68da      	ldr	r2, [r3, #12]
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	60da      	str	r2, [r3, #12]
 80091d4:	e005      	b.n	80091e2 <tcp_abandon+0xbe>
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	61fb      	str	r3, [r7, #28]
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1ef      	bne.n	80091c2 <tcp_abandon+0x9e>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	60da      	str	r2, [r3, #12]
 80091e8:	e00b      	b.n	8009202 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8adb      	ldrh	r3, [r3, #22]
 80091f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4828      	ldr	r0, [pc, #160]	; (8009298 <tcp_abandon+0x174>)
 80091f8:	f000 ff7a 	bl	800a0f0 <tcp_pcb_remove>
 80091fc:	4b27      	ldr	r3, [pc, #156]	; (800929c <tcp_abandon+0x178>)
 80091fe:	2201      	movs	r2, #1
 8009200:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009206:	2b00      	cmp	r3, #0
 8009208:	d004      	beq.n	8009214 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fd1c 	bl	8009c4c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fd13 	bl	8009c4c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fd0a 	bl	8009c4c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00e      	beq.n	800925c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	8b12      	ldrh	r2, [r2, #24]
 8009248:	9202      	str	r2, [sp, #8]
 800924a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800924c:	9201      	str	r2, [sp, #4]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	460b      	mov	r3, r1
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	69b9      	ldr	r1, [r7, #24]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f004 fcc2 	bl	800dbe0 <tcp_rst>
    }
    last_state = pcb->state;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7d1b      	ldrb	r3, [r3, #20]
 8009260:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff fd34 	bl	8008cd0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <tcp_abandon+0x154>
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f06f 010c 	mvn.w	r1, #12
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	4798      	blx	r3
  }
}
 8009278:	3728      	adds	r7, #40	; 0x28
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	0801484c 	.word	0x0801484c
 8009284:	08014990 	.word	0x08014990
 8009288:	08014890 	.word	0x08014890
 800928c:	080149ac 	.word	0x080149ac
 8009290:	200087dc 	.word	0x200087dc
 8009294:	200087d0 	.word	0x200087d0
 8009298:	200087d8 	.word	0x200087d8
 800929c:	200087e0 	.word	0x200087e0

080092a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80092a8:	2101      	movs	r1, #1
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff ff3a 	bl	8009124 <tcp_abandon>
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <tcp_update_rcv_ann_wnd+0x1c>
 80092c6:	4b25      	ldr	r3, [pc, #148]	; (800935c <tcp_update_rcv_ann_wnd+0xa4>)
 80092c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80092cc:	4924      	ldr	r1, [pc, #144]	; (8009360 <tcp_update_rcv_ann_wnd+0xa8>)
 80092ce:	4825      	ldr	r0, [pc, #148]	; (8009364 <tcp_update_rcv_ann_wnd+0xac>)
 80092d0:	f009 fe3a 	bl	8012f48 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80092dc:	4413      	add	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80092e8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80092ec:	bf28      	it	cs
 80092ee:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80092f2:	b292      	uxth	r2, r2
 80092f4:	4413      	add	r3, r2
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	db08      	blt.n	8009310 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	e020      	b.n	8009352 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	dd03      	ble.n	8009326 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009324:	e014      	b.n	8009350 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009338:	d306      	bcc.n	8009348 <tcp_update_rcv_ann_wnd+0x90>
 800933a:	4b08      	ldr	r3, [pc, #32]	; (800935c <tcp_update_rcv_ann_wnd+0xa4>)
 800933c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009340:	4909      	ldr	r1, [pc, #36]	; (8009368 <tcp_update_rcv_ann_wnd+0xb0>)
 8009342:	4808      	ldr	r0, [pc, #32]	; (8009364 <tcp_update_rcv_ann_wnd+0xac>)
 8009344:	f009 fe00 	bl	8012f48 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	b29a      	uxth	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009350:	2300      	movs	r3, #0
  }
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	0801484c 	.word	0x0801484c
 8009360:	08014aa8 	.word	0x08014aa8
 8009364:	08014890 	.word	0x08014890
 8009368:	08014acc 	.word	0x08014acc

0800936c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d107      	bne.n	800938e <tcp_recved+0x22>
 800937e:	4b1f      	ldr	r3, [pc, #124]	; (80093fc <tcp_recved+0x90>)
 8009380:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009384:	491e      	ldr	r1, [pc, #120]	; (8009400 <tcp_recved+0x94>)
 8009386:	481f      	ldr	r0, [pc, #124]	; (8009404 <tcp_recved+0x98>)
 8009388:	f009 fdde 	bl	8012f48 <iprintf>
 800938c:	e032      	b.n	80093f4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	7d1b      	ldrb	r3, [r3, #20]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d106      	bne.n	80093a4 <tcp_recved+0x38>
 8009396:	4b19      	ldr	r3, [pc, #100]	; (80093fc <tcp_recved+0x90>)
 8009398:	f240 32d2 	movw	r2, #978	; 0x3d2
 800939c:	491a      	ldr	r1, [pc, #104]	; (8009408 <tcp_recved+0x9c>)
 800939e:	4819      	ldr	r0, [pc, #100]	; (8009404 <tcp_recved+0x98>)
 80093a0:	f009 fdd2 	bl	8012f48 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093a8:	887b      	ldrh	r3, [r7, #2]
 80093aa:	4413      	add	r3, r2
 80093ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80093ae:	89fb      	ldrh	r3, [r7, #14]
 80093b0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80093b4:	d804      	bhi.n	80093c0 <tcp_recved+0x54>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ba:	89fa      	ldrh	r2, [r7, #14]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d204      	bcs.n	80093ca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80093c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80093c8:	e002      	b.n	80093d0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	89fa      	ldrh	r2, [r7, #14]
 80093ce:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7ff ff71 	bl	80092b8 <tcp_update_rcv_ann_wnd>
 80093d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80093de:	d309      	bcc.n	80093f4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	8b5b      	ldrh	r3, [r3, #26]
 80093e4:	f043 0302 	orr.w	r3, r3, #2
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f003 fe42 	bl	800d078 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	0801484c 	.word	0x0801484c
 8009400:	08014ae8 	.word	0x08014ae8
 8009404:	08014890 	.word	0x08014890
 8009408:	08014b00 	.word	0x08014b00

0800940c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800940c:	b5b0      	push	{r4, r5, r7, lr}
 800940e:	b090      	sub	sp, #64	; 0x40
 8009410:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009418:	4b94      	ldr	r3, [pc, #592]	; (800966c <tcp_slowtmr+0x260>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	4a93      	ldr	r2, [pc, #588]	; (800966c <tcp_slowtmr+0x260>)
 8009420:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009422:	4b93      	ldr	r3, [pc, #588]	; (8009670 <tcp_slowtmr+0x264>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	3301      	adds	r3, #1
 8009428:	b2da      	uxtb	r2, r3
 800942a:	4b91      	ldr	r3, [pc, #580]	; (8009670 <tcp_slowtmr+0x264>)
 800942c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009432:	4b90      	ldr	r3, [pc, #576]	; (8009674 <tcp_slowtmr+0x268>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009438:	e29d      	b.n	8009976 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	7d1b      	ldrb	r3, [r3, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <tcp_slowtmr+0x44>
 8009442:	4b8d      	ldr	r3, [pc, #564]	; (8009678 <tcp_slowtmr+0x26c>)
 8009444:	f240 42be 	movw	r2, #1214	; 0x4be
 8009448:	498c      	ldr	r1, [pc, #560]	; (800967c <tcp_slowtmr+0x270>)
 800944a:	488d      	ldr	r0, [pc, #564]	; (8009680 <tcp_slowtmr+0x274>)
 800944c:	f009 fd7c 	bl	8012f48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	7d1b      	ldrb	r3, [r3, #20]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d106      	bne.n	8009466 <tcp_slowtmr+0x5a>
 8009458:	4b87      	ldr	r3, [pc, #540]	; (8009678 <tcp_slowtmr+0x26c>)
 800945a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800945e:	4989      	ldr	r1, [pc, #548]	; (8009684 <tcp_slowtmr+0x278>)
 8009460:	4887      	ldr	r0, [pc, #540]	; (8009680 <tcp_slowtmr+0x274>)
 8009462:	f009 fd71 	bl	8012f48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	7d1b      	ldrb	r3, [r3, #20]
 800946a:	2b0a      	cmp	r3, #10
 800946c:	d106      	bne.n	800947c <tcp_slowtmr+0x70>
 800946e:	4b82      	ldr	r3, [pc, #520]	; (8009678 <tcp_slowtmr+0x26c>)
 8009470:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009474:	4984      	ldr	r1, [pc, #528]	; (8009688 <tcp_slowtmr+0x27c>)
 8009476:	4882      	ldr	r0, [pc, #520]	; (8009680 <tcp_slowtmr+0x274>)
 8009478:	f009 fd66 	bl	8012f48 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	7f9a      	ldrb	r2, [r3, #30]
 8009480:	4b7b      	ldr	r3, [pc, #492]	; (8009670 <tcp_slowtmr+0x264>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d105      	bne.n	8009494 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009492:	e270      	b.n	8009976 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009494:	4b76      	ldr	r3, [pc, #472]	; (8009670 <tcp_slowtmr+0x264>)
 8009496:	781a      	ldrb	r2, [r3, #0]
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80094a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094aa:	7d1b      	ldrb	r3, [r3, #20]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d10a      	bne.n	80094c6 <tcp_slowtmr+0xba>
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d905      	bls.n	80094c6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80094ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094be:	3301      	adds	r3, #1
 80094c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094c4:	e11e      	b.n	8009704 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80094c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094cc:	2b0b      	cmp	r3, #11
 80094ce:	d905      	bls.n	80094dc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80094d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d4:	3301      	adds	r3, #1
 80094d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094da:	e113      	b.n	8009704 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d075      	beq.n	80095d2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d006      	beq.n	80094fc <tcp_slowtmr+0xf0>
 80094ee:	4b62      	ldr	r3, [pc, #392]	; (8009678 <tcp_slowtmr+0x26c>)
 80094f0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80094f4:	4965      	ldr	r1, [pc, #404]	; (800968c <tcp_slowtmr+0x280>)
 80094f6:	4862      	ldr	r0, [pc, #392]	; (8009680 <tcp_slowtmr+0x274>)
 80094f8:	f009 fd26 	bl	8012f48 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009500:	2b00      	cmp	r3, #0
 8009502:	d106      	bne.n	8009512 <tcp_slowtmr+0x106>
 8009504:	4b5c      	ldr	r3, [pc, #368]	; (8009678 <tcp_slowtmr+0x26c>)
 8009506:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800950a:	4961      	ldr	r1, [pc, #388]	; (8009690 <tcp_slowtmr+0x284>)
 800950c:	485c      	ldr	r0, [pc, #368]	; (8009680 <tcp_slowtmr+0x274>)
 800950e:	f009 fd1b 	bl	8012f48 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009518:	2b0b      	cmp	r3, #11
 800951a:	d905      	bls.n	8009528 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800951c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009520:	3301      	adds	r3, #1
 8009522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009526:	e0ed      	b.n	8009704 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800952e:	3b01      	subs	r3, #1
 8009530:	4a58      	ldr	r2, [pc, #352]	; (8009694 <tcp_slowtmr+0x288>)
 8009532:	5cd3      	ldrb	r3, [r2, r3]
 8009534:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800953c:	7c7a      	ldrb	r2, [r7, #17]
 800953e:	429a      	cmp	r2, r3
 8009540:	d907      	bls.n	8009552 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009548:	3301      	adds	r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009558:	7c7a      	ldrb	r2, [r7, #17]
 800955a:	429a      	cmp	r2, r3
 800955c:	f200 80d2 	bhi.w	8009704 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009560:	2301      	movs	r3, #1
 8009562:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800956a:	2b00      	cmp	r3, #0
 800956c:	d108      	bne.n	8009580 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800956e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009570:	f004 fc2a 	bl	800ddc8 <tcp_zero_window_probe>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d014      	beq.n	80095a4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800957a:	2300      	movs	r3, #0
 800957c:	623b      	str	r3, [r7, #32]
 800957e:	e011      	b.n	80095a4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009586:	4619      	mov	r1, r3
 8009588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800958a:	f003 faef 	bl	800cb6c <tcp_split_unsent_seg>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d107      	bne.n	80095a4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009596:	f003 fd6f 	bl	800d078 <tcp_output>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80ac 	beq.w	8009704 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80095ba:	2b06      	cmp	r3, #6
 80095bc:	f200 80a2 	bhi.w	8009704 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80095c6:	3301      	adds	r3, #1
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80095d0:	e098      	b.n	8009704 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095d8:	2b00      	cmp	r3, #0
 80095da:	db0f      	blt.n	80095fc <tcp_slowtmr+0x1f0>
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d008      	beq.n	80095fc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3301      	adds	r3, #1
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	b21a      	sxth	r2, r3
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009608:	429a      	cmp	r2, r3
 800960a:	db7b      	blt.n	8009704 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800960c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800960e:	f004 f827 	bl	800d660 <tcp_rexmit_rto_prepare>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d007      	beq.n	8009628 <tcp_slowtmr+0x21c>
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961c:	2b00      	cmp	r3, #0
 800961e:	d171      	bne.n	8009704 <tcp_slowtmr+0x2f8>
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d06d      	beq.n	8009704 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962a:	7d1b      	ldrb	r3, [r3, #20]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d03a      	beq.n	80096a6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009636:	2b0c      	cmp	r3, #12
 8009638:	bf28      	it	cs
 800963a:	230c      	movcs	r3, #12
 800963c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009644:	10db      	asrs	r3, r3, #3
 8009646:	b21b      	sxth	r3, r3
 8009648:	461a      	mov	r2, r3
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009650:	4413      	add	r3, r2
 8009652:	7efa      	ldrb	r2, [r7, #27]
 8009654:	4910      	ldr	r1, [pc, #64]	; (8009698 <tcp_slowtmr+0x28c>)
 8009656:	5c8a      	ldrb	r2, [r1, r2]
 8009658:	4093      	lsls	r3, r2
 800965a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009662:	4293      	cmp	r3, r2
 8009664:	dc1a      	bgt.n	800969c <tcp_slowtmr+0x290>
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	b21a      	sxth	r2, r3
 800966a:	e019      	b.n	80096a0 <tcp_slowtmr+0x294>
 800966c:	200087cc 	.word	0x200087cc
 8009670:	200087e2 	.word	0x200087e2
 8009674:	200087d8 	.word	0x200087d8
 8009678:	0801484c 	.word	0x0801484c
 800967c:	08014b90 	.word	0x08014b90
 8009680:	08014890 	.word	0x08014890
 8009684:	08014bbc 	.word	0x08014bbc
 8009688:	08014be8 	.word	0x08014be8
 800968c:	08014c18 	.word	0x08014c18
 8009690:	08014c4c 	.word	0x08014c4c
 8009694:	08016bcc 	.word	0x08016bcc
 8009698:	08016bbc 	.word	0x08016bbc
 800969c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80096a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a8:	2200      	movs	r2, #0
 80096aa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096b8:	4293      	cmp	r3, r2
 80096ba:	bf28      	it	cs
 80096bc:	4613      	movcs	r3, r2
 80096be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80096c0:	8a7b      	ldrh	r3, [r7, #18]
 80096c2:	085b      	lsrs	r3, r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	b29b      	uxth	r3, r3
 80096da:	429a      	cmp	r2, r3
 80096dc:	d206      	bcs.n	80096ec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80096fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009700:	f004 f81e 	bl	800d740 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	7d1b      	ldrb	r3, [r3, #20]
 8009708:	2b06      	cmp	r3, #6
 800970a:	d111      	bne.n	8009730 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	8b5b      	ldrh	r3, [r3, #26]
 8009710:	f003 0310 	and.w	r3, r3, #16
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009718:	4b9c      	ldr	r3, [pc, #624]	; (800998c <tcp_slowtmr+0x580>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	2b28      	cmp	r3, #40	; 0x28
 8009724:	d904      	bls.n	8009730 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800972a:	3301      	adds	r3, #1
 800972c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009732:	7a5b      	ldrb	r3, [r3, #9]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b00      	cmp	r3, #0
 800973a:	d04a      	beq.n	80097d2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009740:	2b04      	cmp	r3, #4
 8009742:	d003      	beq.n	800974c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009748:	2b07      	cmp	r3, #7
 800974a:	d142      	bne.n	80097d2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800974c:	4b8f      	ldr	r3, [pc, #572]	; (800998c <tcp_slowtmr+0x580>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800975c:	4b8c      	ldr	r3, [pc, #560]	; (8009990 <tcp_slowtmr+0x584>)
 800975e:	440b      	add	r3, r1
 8009760:	498c      	ldr	r1, [pc, #560]	; (8009994 <tcp_slowtmr+0x588>)
 8009762:	fba1 1303 	umull	r1, r3, r1, r3
 8009766:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009768:	429a      	cmp	r2, r3
 800976a:	d90a      	bls.n	8009782 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009770:	3301      	adds	r3, #1
 8009772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800977a:	3301      	adds	r3, #1
 800977c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009780:	e027      	b.n	80097d2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009782:	4b82      	ldr	r3, [pc, #520]	; (800998c <tcp_slowtmr+0x580>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009798:	4618      	mov	r0, r3
 800979a:	4b7f      	ldr	r3, [pc, #508]	; (8009998 <tcp_slowtmr+0x58c>)
 800979c:	fb00 f303 	mul.w	r3, r0, r3
 80097a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80097a2:	497c      	ldr	r1, [pc, #496]	; (8009994 <tcp_slowtmr+0x588>)
 80097a4:	fba1 1303 	umull	r1, r3, r1, r3
 80097a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d911      	bls.n	80097d2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80097ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097b0:	f004 faca 	bl	800dd48 <tcp_keepalive>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80097ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d107      	bne.n	80097d2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80097c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80097c8:	3301      	adds	r3, #1
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80097d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d011      	beq.n	80097fe <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80097da:	4b6c      	ldr	r3, [pc, #432]	; (800998c <tcp_slowtmr+0x580>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	1ad2      	subs	r2, r2, r3
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80097ea:	4619      	mov	r1, r3
 80097ec:	460b      	mov	r3, r1
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	440b      	add	r3, r1
 80097f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d302      	bcc.n	80097fe <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80097f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097fa:	f000 fddd 	bl	800a3b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	7d1b      	ldrb	r3, [r3, #20]
 8009802:	2b03      	cmp	r3, #3
 8009804:	d10b      	bne.n	800981e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009806:	4b61      	ldr	r3, [pc, #388]	; (800998c <tcp_slowtmr+0x580>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b28      	cmp	r3, #40	; 0x28
 8009812:	d904      	bls.n	800981e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009818:	3301      	adds	r3, #1
 800981a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	7d1b      	ldrb	r3, [r3, #20]
 8009822:	2b09      	cmp	r3, #9
 8009824:	d10b      	bne.n	800983e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009826:	4b59      	ldr	r3, [pc, #356]	; (800998c <tcp_slowtmr+0x580>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	2bf0      	cmp	r3, #240	; 0xf0
 8009832:	d904      	bls.n	800983e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009838:	3301      	adds	r3, #1
 800983a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800983e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009842:	2b00      	cmp	r3, #0
 8009844:	d060      	beq.n	8009908 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800984e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009850:	f000 fbfe 	bl	800a050 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	2b00      	cmp	r3, #0
 8009858:	d010      	beq.n	800987c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800985a:	4b50      	ldr	r3, [pc, #320]	; (800999c <tcp_slowtmr+0x590>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009860:	429a      	cmp	r2, r3
 8009862:	d106      	bne.n	8009872 <tcp_slowtmr+0x466>
 8009864:	4b4e      	ldr	r3, [pc, #312]	; (80099a0 <tcp_slowtmr+0x594>)
 8009866:	f240 526d 	movw	r2, #1389	; 0x56d
 800986a:	494e      	ldr	r1, [pc, #312]	; (80099a4 <tcp_slowtmr+0x598>)
 800986c:	484e      	ldr	r0, [pc, #312]	; (80099a8 <tcp_slowtmr+0x59c>)
 800986e:	f009 fb6b 	bl	8012f48 <iprintf>
        prev->next = pcb->next;
 8009872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	60da      	str	r2, [r3, #12]
 800987a:	e00f      	b.n	800989c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800987c:	4b47      	ldr	r3, [pc, #284]	; (800999c <tcp_slowtmr+0x590>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009882:	429a      	cmp	r2, r3
 8009884:	d006      	beq.n	8009894 <tcp_slowtmr+0x488>
 8009886:	4b46      	ldr	r3, [pc, #280]	; (80099a0 <tcp_slowtmr+0x594>)
 8009888:	f240 5271 	movw	r2, #1393	; 0x571
 800988c:	4947      	ldr	r1, [pc, #284]	; (80099ac <tcp_slowtmr+0x5a0>)
 800988e:	4846      	ldr	r0, [pc, #280]	; (80099a8 <tcp_slowtmr+0x59c>)
 8009890:	f009 fb5a 	bl	8012f48 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4a40      	ldr	r2, [pc, #256]	; (800999c <tcp_slowtmr+0x590>)
 800989a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800989c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d013      	beq.n	80098cc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80098ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	3304      	adds	r3, #4
 80098b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098b4:	8ad2      	ldrh	r2, [r2, #22]
 80098b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098b8:	8b09      	ldrh	r1, [r1, #24]
 80098ba:	9102      	str	r1, [sp, #8]
 80098bc:	9201      	str	r2, [sp, #4]
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	462b      	mov	r3, r5
 80098c2:	4622      	mov	r2, r4
 80098c4:	4601      	mov	r1, r0
 80098c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098c8:	f004 f98a 	bl	800dbe0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	7d1b      	ldrb	r3, [r3, #20]
 80098d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80098d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80098e2:	6838      	ldr	r0, [r7, #0]
 80098e4:	f7ff f9f4 	bl	8008cd0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80098e8:	4b31      	ldr	r3, [pc, #196]	; (80099b0 <tcp_slowtmr+0x5a4>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d004      	beq.n	80098fe <tcp_slowtmr+0x4f2>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f06f 010c 	mvn.w	r1, #12
 80098fa:	68b8      	ldr	r0, [r7, #8]
 80098fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80098fe:	4b2c      	ldr	r3, [pc, #176]	; (80099b0 <tcp_slowtmr+0x5a4>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d037      	beq.n	8009976 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009906:	e592      	b.n	800942e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	7f1b      	ldrb	r3, [r3, #28]
 8009916:	3301      	adds	r3, #1
 8009918:	b2da      	uxtb	r2, r3
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	7f1a      	ldrb	r2, [r3, #28]
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	7f5b      	ldrb	r3, [r3, #29]
 8009926:	429a      	cmp	r2, r3
 8009928:	d325      	bcc.n	8009976 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	2200      	movs	r2, #0
 800992e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009930:	4b1f      	ldr	r3, [pc, #124]	; (80099b0 <tcp_slowtmr+0x5a4>)
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <tcp_slowtmr+0x54c>
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009948:	6912      	ldr	r2, [r2, #16]
 800994a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	4603      	mov	r3, r0
 8009952:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009956:	e002      	b.n	800995e <tcp_slowtmr+0x552>
 8009958:	2300      	movs	r3, #0
 800995a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800995e:	4b14      	ldr	r3, [pc, #80]	; (80099b0 <tcp_slowtmr+0x5a4>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d000      	beq.n	8009968 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009966:	e562      	b.n	800942e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009968:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009972:	f003 fb81 	bl	800d078 <tcp_output>
  while (pcb != NULL) {
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	2b00      	cmp	r3, #0
 800997a:	f47f ad5e 	bne.w	800943a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009982:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <tcp_slowtmr+0x5a8>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009988:	e069      	b.n	8009a5e <tcp_slowtmr+0x652>
 800998a:	bf00      	nop
 800998c:	200087cc 	.word	0x200087cc
 8009990:	000a4cb8 	.word	0x000a4cb8
 8009994:	10624dd3 	.word	0x10624dd3
 8009998:	000124f8 	.word	0x000124f8
 800999c:	200087d8 	.word	0x200087d8
 80099a0:	0801484c 	.word	0x0801484c
 80099a4:	08014c84 	.word	0x08014c84
 80099a8:	08014890 	.word	0x08014890
 80099ac:	08014cb0 	.word	0x08014cb0
 80099b0:	200087e0 	.word	0x200087e0
 80099b4:	200087dc 	.word	0x200087dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	7d1b      	ldrb	r3, [r3, #20]
 80099bc:	2b0a      	cmp	r3, #10
 80099be:	d006      	beq.n	80099ce <tcp_slowtmr+0x5c2>
 80099c0:	4b2b      	ldr	r3, [pc, #172]	; (8009a70 <tcp_slowtmr+0x664>)
 80099c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80099c6:	492b      	ldr	r1, [pc, #172]	; (8009a74 <tcp_slowtmr+0x668>)
 80099c8:	482b      	ldr	r0, [pc, #172]	; (8009a78 <tcp_slowtmr+0x66c>)
 80099ca:	f009 fabd 	bl	8012f48 <iprintf>
    pcb_remove = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80099d4:	4b29      	ldr	r3, [pc, #164]	; (8009a7c <tcp_slowtmr+0x670>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2bf0      	cmp	r3, #240	; 0xf0
 80099e0:	d904      	bls.n	80099ec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80099e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e6:	3301      	adds	r3, #1
 80099e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80099ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d02f      	beq.n	8009a54 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80099f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099f6:	f000 fb2b 	bl	800a050 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d010      	beq.n	8009a22 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009a00:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <tcp_slowtmr+0x674>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d106      	bne.n	8009a18 <tcp_slowtmr+0x60c>
 8009a0a:	4b19      	ldr	r3, [pc, #100]	; (8009a70 <tcp_slowtmr+0x664>)
 8009a0c:	f240 52af 	movw	r2, #1455	; 0x5af
 8009a10:	491c      	ldr	r1, [pc, #112]	; (8009a84 <tcp_slowtmr+0x678>)
 8009a12:	4819      	ldr	r0, [pc, #100]	; (8009a78 <tcp_slowtmr+0x66c>)
 8009a14:	f009 fa98 	bl	8012f48 <iprintf>
        prev->next = pcb->next;
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	60da      	str	r2, [r3, #12]
 8009a20:	e00f      	b.n	8009a42 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009a22:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <tcp_slowtmr+0x674>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d006      	beq.n	8009a3a <tcp_slowtmr+0x62e>
 8009a2c:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <tcp_slowtmr+0x664>)
 8009a2e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009a32:	4915      	ldr	r1, [pc, #84]	; (8009a88 <tcp_slowtmr+0x67c>)
 8009a34:	4810      	ldr	r0, [pc, #64]	; (8009a78 <tcp_slowtmr+0x66c>)
 8009a36:	f009 fa87 	bl	8012f48 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <tcp_slowtmr+0x674>)
 8009a40:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009a4c:	69f8      	ldr	r0, [r7, #28]
 8009a4e:	f7ff f93f 	bl	8008cd0 <tcp_free>
 8009a52:	e004      	b.n	8009a5e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1a9      	bne.n	80099b8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	3730      	adds	r7, #48	; 0x30
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	0801484c 	.word	0x0801484c
 8009a74:	08014cdc 	.word	0x08014cdc
 8009a78:	08014890 	.word	0x08014890
 8009a7c:	200087cc 	.word	0x200087cc
 8009a80:	200087dc 	.word	0x200087dc
 8009a84:	08014d0c 	.word	0x08014d0c
 8009a88:	08014d34 	.word	0x08014d34

08009a8c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009a92:	4b2d      	ldr	r3, [pc, #180]	; (8009b48 <tcp_fasttmr+0xbc>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	3301      	adds	r3, #1
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	4b2b      	ldr	r3, [pc, #172]	; (8009b48 <tcp_fasttmr+0xbc>)
 8009a9c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009a9e:	4b2b      	ldr	r3, [pc, #172]	; (8009b4c <tcp_fasttmr+0xc0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009aa4:	e048      	b.n	8009b38 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7f9a      	ldrb	r2, [r3, #30]
 8009aaa:	4b27      	ldr	r3, [pc, #156]	; (8009b48 <tcp_fasttmr+0xbc>)
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d03f      	beq.n	8009b32 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009ab2:	4b25      	ldr	r3, [pc, #148]	; (8009b48 <tcp_fasttmr+0xbc>)
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	8b5b      	ldrh	r3, [r3, #26]
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d010      	beq.n	8009ae8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	8b5b      	ldrh	r3, [r3, #26]
 8009aca:	f043 0302 	orr.w	r3, r3, #2
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f003 facf 	bl	800d078 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	8b5b      	ldrh	r3, [r3, #26]
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	8b5b      	ldrh	r3, [r3, #26]
 8009aec:	f003 0308 	and.w	r3, r3, #8
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	8b5b      	ldrh	r3, [r3, #26]
 8009af8:	f023 0308 	bic.w	r3, r3, #8
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff fa78 	bl	8008ff8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009b16:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <tcp_fasttmr+0xc4>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f819 	bl	8009b54 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b22:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <tcp_fasttmr+0xc4>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d000      	beq.n	8009b2c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009b2a:	e7b8      	b.n	8009a9e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	607b      	str	r3, [r7, #4]
 8009b30:	e002      	b.n	8009b38 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1b3      	bne.n	8009aa6 <tcp_fasttmr+0x1a>
    }
  }
}
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	200087e2 	.word	0x200087e2
 8009b4c:	200087d8 	.word	0x200087d8
 8009b50:	200087e0 	.word	0x200087e0

08009b54 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d109      	bne.n	8009b76 <tcp_process_refused_data+0x22>
 8009b62:	4b37      	ldr	r3, [pc, #220]	; (8009c40 <tcp_process_refused_data+0xec>)
 8009b64:	f240 6209 	movw	r2, #1545	; 0x609
 8009b68:	4936      	ldr	r1, [pc, #216]	; (8009c44 <tcp_process_refused_data+0xf0>)
 8009b6a:	4837      	ldr	r0, [pc, #220]	; (8009c48 <tcp_process_refused_data+0xf4>)
 8009b6c:	f009 f9ec 	bl	8012f48 <iprintf>
 8009b70:	f06f 030f 	mvn.w	r3, #15
 8009b74:	e060      	b.n	8009c38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b7a:	7b5b      	ldrb	r3, [r3, #13]
 8009b7c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b82:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <tcp_process_refused_data+0x58>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6918      	ldr	r0, [r3, #16]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	47a0      	blx	r4
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73fb      	strb	r3, [r7, #15]
 8009baa:	e007      	b.n	8009bbc <tcp_process_refused_data+0x68>
 8009bac:	2300      	movs	r3, #0
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f000 f8a4 	bl	8009d00 <tcp_recv_null>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d12a      	bne.n	8009c1a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	f003 0320 	and.w	r3, r3, #32
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d033      	beq.n	8009c36 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009bd6:	d005      	beq.n	8009be4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bdc:	3301      	adds	r3, #1
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00b      	beq.n	8009c06 <tcp_process_refused_data+0xb2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6918      	ldr	r0, [r3, #16]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	47a0      	blx	r4
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]
 8009c04:	e001      	b.n	8009c0a <tcp_process_refused_data+0xb6>
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c0e:	f113 0f0d 	cmn.w	r3, #13
 8009c12:	d110      	bne.n	8009c36 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009c14:	f06f 030c 	mvn.w	r3, #12
 8009c18:	e00e      	b.n	8009c38 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c1e:	f113 0f0d 	cmn.w	r3, #13
 8009c22:	d102      	bne.n	8009c2a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009c24:	f06f 030c 	mvn.w	r3, #12
 8009c28:	e006      	b.n	8009c38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009c30:	f06f 0304 	mvn.w	r3, #4
 8009c34:	e000      	b.n	8009c38 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd90      	pop	{r4, r7, pc}
 8009c40:	0801484c 	.word	0x0801484c
 8009c44:	08014d5c 	.word	0x08014d5c
 8009c48:	08014890 	.word	0x08014890

08009c4c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009c54:	e007      	b.n	8009c66 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f80a 	bl	8009c76 <tcp_seg_free>
    seg = next;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1f4      	bne.n	8009c56 <tcp_segs_free+0xa>
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00c      	beq.n	8009c9e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fd6d 	bl	8008770 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	2003      	movs	r0, #3
 8009c9a:	f7fd ff6f 	bl	8007b7c <memp_free>
  }
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d106      	bne.n	8009cc4 <tcp_seg_copy+0x1c>
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <tcp_seg_copy+0x4c>)
 8009cb8:	f240 6282 	movw	r2, #1666	; 0x682
 8009cbc:	490e      	ldr	r1, [pc, #56]	; (8009cf8 <tcp_seg_copy+0x50>)
 8009cbe:	480f      	ldr	r0, [pc, #60]	; (8009cfc <tcp_seg_copy+0x54>)
 8009cc0:	f009 f942 	bl	8012f48 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009cc4:	2003      	movs	r0, #3
 8009cc6:	f7fd ff0d 	bl	8007ae4 <memp_malloc>
 8009cca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <tcp_seg_copy+0x2e>
    return NULL;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e00a      	b.n	8009cec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009cd6:	2210      	movs	r2, #16
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f009 fa0e 	bl	80130fc <memcpy>
  pbuf_ref(cseg->p);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe fde3 	bl	80088b0 <pbuf_ref>
  return cseg;
 8009cea:	68fb      	ldr	r3, [r7, #12]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	0801484c 	.word	0x0801484c
 8009cf8:	08014da0 	.word	0x08014da0
 8009cfc:	08014890 	.word	0x08014890

08009d00 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <tcp_recv_null+0x28>
 8009d14:	4b12      	ldr	r3, [pc, #72]	; (8009d60 <tcp_recv_null+0x60>)
 8009d16:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009d1a:	4912      	ldr	r1, [pc, #72]	; (8009d64 <tcp_recv_null+0x64>)
 8009d1c:	4812      	ldr	r0, [pc, #72]	; (8009d68 <tcp_recv_null+0x68>)
 8009d1e:	f009 f913 	bl	8012f48 <iprintf>
 8009d22:	f06f 030f 	mvn.w	r3, #15
 8009d26:	e016      	b.n	8009d56 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	891b      	ldrh	r3, [r3, #8]
 8009d32:	4619      	mov	r1, r3
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f7ff fb19 	bl	800936c <tcp_recved>
    pbuf_free(p);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fe fd18 	bl	8008770 <pbuf_free>
 8009d40:	e008      	b.n	8009d54 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009d4a:	68b8      	ldr	r0, [r7, #8]
 8009d4c:	f7ff f9be 	bl	80090cc <tcp_close>
 8009d50:	4603      	mov	r3, r0
 8009d52:	e000      	b.n	8009d56 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	0801484c 	.word	0x0801484c
 8009d64:	08014dbc 	.word	0x08014dbc
 8009d68:	08014890 	.word	0x08014890

08009d6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	db01      	blt.n	8009d82 <tcp_kill_prio+0x16>
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	e000      	b.n	8009d84 <tcp_kill_prio+0x18>
 8009d82:	237f      	movs	r3, #127	; 0x7f
 8009d84:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009d86:	7afb      	ldrb	r3, [r7, #11]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d034      	beq.n	8009df6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009d8c:	7afb      	ldrb	r3, [r7, #11]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d9a:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <tcp_kill_prio+0x94>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	e01f      	b.n	8009de2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	7d5b      	ldrb	r3, [r3, #21]
 8009da6:	7afa      	ldrb	r2, [r7, #11]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d80c      	bhi.n	8009dc6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009db0:	7afa      	ldrb	r2, [r7, #11]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d112      	bne.n	8009ddc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009db6:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <tcp_kill_prio+0x98>)
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d80a      	bhi.n	8009ddc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	; (8009e04 <tcp_kill_prio+0x98>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	7d5b      	ldrb	r3, [r3, #21]
 8009dda:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	617b      	str	r3, [r7, #20]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1dc      	bne.n	8009da2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009dee:	6938      	ldr	r0, [r7, #16]
 8009df0:	f7ff fa56 	bl	80092a0 <tcp_abort>
 8009df4:	e000      	b.n	8009df8 <tcp_kill_prio+0x8c>
    return;
 8009df6:	bf00      	nop
  }
}
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	200087d8 	.word	0x200087d8
 8009e04:	200087cc 	.word	0x200087cc

08009e08 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	2b08      	cmp	r3, #8
 8009e16:	d009      	beq.n	8009e2c <tcp_kill_state+0x24>
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b09      	cmp	r3, #9
 8009e1c:	d006      	beq.n	8009e2c <tcp_kill_state+0x24>
 8009e1e:	4b1a      	ldr	r3, [pc, #104]	; (8009e88 <tcp_kill_state+0x80>)
 8009e20:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009e24:	4919      	ldr	r1, [pc, #100]	; (8009e8c <tcp_kill_state+0x84>)
 8009e26:	481a      	ldr	r0, [pc, #104]	; (8009e90 <tcp_kill_state+0x88>)
 8009e28:	f009 f88e 	bl	8012f48 <iprintf>

  inactivity = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009e30:	2300      	movs	r3, #0
 8009e32:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e34:	4b17      	ldr	r3, [pc, #92]	; (8009e94 <tcp_kill_state+0x8c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e017      	b.n	8009e6c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	7d1b      	ldrb	r3, [r3, #20]
 8009e40:	79fa      	ldrb	r2, [r7, #7]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d10f      	bne.n	8009e66 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <tcp_kill_state+0x90>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d807      	bhi.n	8009e66 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009e56:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <tcp_kill_state+0x90>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e4      	bne.n	8009e3c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009e78:	2100      	movs	r1, #0
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f7ff f952 	bl	8009124 <tcp_abandon>
  }
}
 8009e80:	bf00      	nop
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	0801484c 	.word	0x0801484c
 8009e8c:	08014dd8 	.word	0x08014dd8
 8009e90:	08014890 	.word	0x08014890
 8009e94:	200087d8 	.word	0x200087d8
 8009e98:	200087cc 	.word	0x200087cc

08009e9c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009eaa:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <tcp_kill_timewait+0x58>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e012      	b.n	8009ed8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009eb2:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <tcp_kill_timewait+0x5c>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d807      	bhi.n	8009ed2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <tcp_kill_timewait+0x5c>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e9      	bne.n	8009eb2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	f7ff f9db 	bl	80092a0 <tcp_abort>
  }
}
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200087dc 	.word	0x200087dc
 8009ef8:	200087cc 	.word	0x200087cc

08009efc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009f02:	4b10      	ldr	r3, [pc, #64]	; (8009f44 <tcp_handle_closepend+0x48>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009f08:	e014      	b.n	8009f34 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8b5b      	ldrh	r3, [r3, #26]
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	8b5b      	ldrh	r3, [r3, #26]
 8009f20:	f023 0308 	bic.w	r3, r3, #8
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff f864 	bl	8008ff8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e7      	bne.n	8009f0a <tcp_handle_closepend+0xe>
  }
}
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	200087d8 	.word	0x200087d8

08009f48 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f52:	2001      	movs	r0, #1
 8009f54:	f7fd fdc6 	bl	8007ae4 <memp_malloc>
 8009f58:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d126      	bne.n	8009fae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009f60:	f7ff ffcc 	bl	8009efc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009f64:	f7ff ff9a 	bl	8009e9c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f68:	2001      	movs	r0, #1
 8009f6a:	f7fd fdbb 	bl	8007ae4 <memp_malloc>
 8009f6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d11b      	bne.n	8009fae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009f76:	2009      	movs	r0, #9
 8009f78:	f7ff ff46 	bl	8009e08 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	f7fd fdb1 	bl	8007ae4 <memp_malloc>
 8009f82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d111      	bne.n	8009fae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009f8a:	2008      	movs	r0, #8
 8009f8c:	f7ff ff3c 	bl	8009e08 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f90:	2001      	movs	r0, #1
 8009f92:	f7fd fda7 	bl	8007ae4 <memp_malloc>
 8009f96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d107      	bne.n	8009fae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff fee3 	bl	8009d6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f7fd fd9c 	bl	8007ae4 <memp_malloc>
 8009fac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d03f      	beq.n	800a034 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009fb4:	229c      	movs	r2, #156	; 0x9c
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f009 f82a 	bl	8013012 <memset>
    pcb->prio = prio;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	79fa      	ldrb	r2, [r7, #7]
 8009fc2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009fca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	22ff      	movs	r2, #255	; 0xff
 8009fe2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009fea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2206      	movs	r2, #6
 8009ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2206      	movs	r2, #6
 8009ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a000:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a00a:	4b0d      	ldr	r3, [pc, #52]	; (800a040 <tcp_alloc+0xf8>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a012:	4b0c      	ldr	r3, [pc, #48]	; (800a044 <tcp_alloc+0xfc>)
 800a014:	781a      	ldrb	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a020:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4a08      	ldr	r2, [pc, #32]	; (800a048 <tcp_alloc+0x100>)
 800a028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4a07      	ldr	r2, [pc, #28]	; (800a04c <tcp_alloc+0x104>)
 800a030:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a034:	68fb      	ldr	r3, [r7, #12]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	200087cc 	.word	0x200087cc
 800a044:	200087e2 	.word	0x200087e2
 800a048:	08009d01 	.word	0x08009d01
 800a04c:	006ddd00 	.word	0x006ddd00

0800a050 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d107      	bne.n	800a06e <tcp_pcb_purge+0x1e>
 800a05e:	4b21      	ldr	r3, [pc, #132]	; (800a0e4 <tcp_pcb_purge+0x94>)
 800a060:	f640 0251 	movw	r2, #2129	; 0x851
 800a064:	4920      	ldr	r1, [pc, #128]	; (800a0e8 <tcp_pcb_purge+0x98>)
 800a066:	4821      	ldr	r0, [pc, #132]	; (800a0ec <tcp_pcb_purge+0x9c>)
 800a068:	f008 ff6e 	bl	8012f48 <iprintf>
 800a06c:	e037      	b.n	800a0de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7d1b      	ldrb	r3, [r3, #20]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d033      	beq.n	800a0de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a07a:	2b0a      	cmp	r3, #10
 800a07c:	d02f      	beq.n	800a0de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a082:	2b01      	cmp	r3, #1
 800a084:	d02b      	beq.n	800a0de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d007      	beq.n	800a09e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fb6c 	bl	8008770 <pbuf_free>
      pcb->refused_data = NULL;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f986 	bl	800a3b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0b2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff fdc7 	bl	8009c4c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff fdc2 	bl	8009c4c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	0801484c 	.word	0x0801484c
 800a0e8:	08014e98 	.word	0x08014e98
 800a0ec:	08014890 	.word	0x08014890

0800a0f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d106      	bne.n	800a10e <tcp_pcb_remove+0x1e>
 800a100:	4b3e      	ldr	r3, [pc, #248]	; (800a1fc <tcp_pcb_remove+0x10c>)
 800a102:	f640 0283 	movw	r2, #2179	; 0x883
 800a106:	493e      	ldr	r1, [pc, #248]	; (800a200 <tcp_pcb_remove+0x110>)
 800a108:	483e      	ldr	r0, [pc, #248]	; (800a204 <tcp_pcb_remove+0x114>)
 800a10a:	f008 ff1d 	bl	8012f48 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <tcp_pcb_remove+0x32>
 800a114:	4b39      	ldr	r3, [pc, #228]	; (800a1fc <tcp_pcb_remove+0x10c>)
 800a116:	f640 0284 	movw	r2, #2180	; 0x884
 800a11a:	493b      	ldr	r1, [pc, #236]	; (800a208 <tcp_pcb_remove+0x118>)
 800a11c:	4839      	ldr	r0, [pc, #228]	; (800a204 <tcp_pcb_remove+0x114>)
 800a11e:	f008 ff13 	bl	8012f48 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d105      	bne.n	800a138 <tcp_pcb_remove+0x48>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	e013      	b.n	800a160 <tcp_pcb_remove+0x70>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e00c      	b.n	800a15a <tcp_pcb_remove+0x6a>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	429a      	cmp	r2, r3
 800a148:	d104      	bne.n	800a154 <tcp_pcb_remove+0x64>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	60da      	str	r2, [r3, #12]
 800a152:	e005      	b.n	800a160 <tcp_pcb_remove+0x70>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1ef      	bne.n	800a140 <tcp_pcb_remove+0x50>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a166:	6838      	ldr	r0, [r7, #0]
 800a168:	f7ff ff72 	bl	800a050 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	7d1b      	ldrb	r3, [r3, #20]
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d013      	beq.n	800a19c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d00f      	beq.n	800a19c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	8b5b      	ldrh	r3, [r3, #26]
 800a180:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a184:	2b00      	cmp	r3, #0
 800a186:	d009      	beq.n	800a19c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	8b5b      	ldrh	r3, [r3, #26]
 800a18c:	f043 0302 	orr.w	r3, r3, #2
 800a190:	b29a      	uxth	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a196:	6838      	ldr	r0, [r7, #0]
 800a198:	f002 ff6e 	bl	800d078 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d020      	beq.n	800a1e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <tcp_pcb_remove+0xca>
 800a1ac:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <tcp_pcb_remove+0x10c>)
 800a1ae:	f640 0293 	movw	r2, #2195	; 0x893
 800a1b2:	4916      	ldr	r1, [pc, #88]	; (800a20c <tcp_pcb_remove+0x11c>)
 800a1b4:	4813      	ldr	r0, [pc, #76]	; (800a204 <tcp_pcb_remove+0x114>)
 800a1b6:	f008 fec7 	bl	8012f48 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d006      	beq.n	800a1d0 <tcp_pcb_remove+0xe0>
 800a1c2:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <tcp_pcb_remove+0x10c>)
 800a1c4:	f640 0294 	movw	r2, #2196	; 0x894
 800a1c8:	4911      	ldr	r1, [pc, #68]	; (800a210 <tcp_pcb_remove+0x120>)
 800a1ca:	480e      	ldr	r0, [pc, #56]	; (800a204 <tcp_pcb_remove+0x114>)
 800a1cc:	f008 febc 	bl	8012f48 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d006      	beq.n	800a1e6 <tcp_pcb_remove+0xf6>
 800a1d8:	4b08      	ldr	r3, [pc, #32]	; (800a1fc <tcp_pcb_remove+0x10c>)
 800a1da:	f640 0296 	movw	r2, #2198	; 0x896
 800a1de:	490d      	ldr	r1, [pc, #52]	; (800a214 <tcp_pcb_remove+0x124>)
 800a1e0:	4808      	ldr	r0, [pc, #32]	; (800a204 <tcp_pcb_remove+0x114>)
 800a1e2:	f008 feb1 	bl	8012f48 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a1f2:	bf00      	nop
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	0801484c 	.word	0x0801484c
 800a200:	08014eb4 	.word	0x08014eb4
 800a204:	08014890 	.word	0x08014890
 800a208:	08014ed0 	.word	0x08014ed0
 800a20c:	08014ef0 	.word	0x08014ef0
 800a210:	08014f08 	.word	0x08014f08
 800a214:	08014f24 	.word	0x08014f24

0800a218 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d106      	bne.n	800a234 <tcp_next_iss+0x1c>
 800a226:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <tcp_next_iss+0x38>)
 800a228:	f640 02af 	movw	r2, #2223	; 0x8af
 800a22c:	4909      	ldr	r1, [pc, #36]	; (800a254 <tcp_next_iss+0x3c>)
 800a22e:	480a      	ldr	r0, [pc, #40]	; (800a258 <tcp_next_iss+0x40>)
 800a230:	f008 fe8a 	bl	8012f48 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a234:	4b09      	ldr	r3, [pc, #36]	; (800a25c <tcp_next_iss+0x44>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	4b09      	ldr	r3, [pc, #36]	; (800a260 <tcp_next_iss+0x48>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4413      	add	r3, r2
 800a23e:	4a07      	ldr	r2, [pc, #28]	; (800a25c <tcp_next_iss+0x44>)
 800a240:	6013      	str	r3, [r2, #0]
  return iss;
 800a242:	4b06      	ldr	r3, [pc, #24]	; (800a25c <tcp_next_iss+0x44>)
 800a244:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	0801484c 	.word	0x0801484c
 800a254:	08014f3c 	.word	0x08014f3c
 800a258:	08014890 	.word	0x08014890
 800a25c:	2000000c 	.word	0x2000000c
 800a260:	200087cc 	.word	0x200087cc

0800a264 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <tcp_eff_send_mss_netif+0x22>
 800a278:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <tcp_eff_send_mss_netif+0x68>)
 800a27a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a27e:	4914      	ldr	r1, [pc, #80]	; (800a2d0 <tcp_eff_send_mss_netif+0x6c>)
 800a280:	4814      	ldr	r0, [pc, #80]	; (800a2d4 <tcp_eff_send_mss_netif+0x70>)
 800a282:	f008 fe61 	bl	8012f48 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a28c:	89fb      	ldrh	r3, [r7, #14]
 800a28e:	e019      	b.n	800a2c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a294:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a296:	8afb      	ldrh	r3, [r7, #22]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d012      	beq.n	800a2c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a29c:	2328      	movs	r3, #40	; 0x28
 800a29e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a2a0:	8afa      	ldrh	r2, [r7, #22]
 800a2a2:	8abb      	ldrh	r3, [r7, #20]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d904      	bls.n	800a2b2 <tcp_eff_send_mss_netif+0x4e>
 800a2a8:	8afa      	ldrh	r2, [r7, #22]
 800a2aa:	8abb      	ldrh	r3, [r7, #20]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	e000      	b.n	800a2b4 <tcp_eff_send_mss_netif+0x50>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a2b6:	8a7a      	ldrh	r2, [r7, #18]
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	bf28      	it	cs
 800a2be:	4613      	movcs	r3, r2
 800a2c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a2c2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	0801484c 	.word	0x0801484c
 800a2d0:	08014f58 	.word	0x08014f58
 800a2d4:	08014890 	.word	0x08014890

0800a2d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d119      	bne.n	800a320 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a2ec:	4b10      	ldr	r3, [pc, #64]	; (800a330 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a2ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a2f2:	4910      	ldr	r1, [pc, #64]	; (800a334 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a2f4:	4810      	ldr	r0, [pc, #64]	; (800a338 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a2f6:	f008 fe27 	bl	8012f48 <iprintf>

  while (pcb != NULL) {
 800a2fa:	e011      	b.n	800a320 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d108      	bne.n	800a31a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7fe ffc6 	bl	80092a0 <tcp_abort>
      pcb = next;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	e002      	b.n	800a320 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1ea      	bne.n	800a2fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a326:	bf00      	nop
 800a328:	bf00      	nop
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	0801484c 	.word	0x0801484c
 800a334:	08014f80 	.word	0x08014f80
 800a338:	08014890 	.word	0x08014890

0800a33c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d02a      	beq.n	800a3a2 <tcp_netif_ip_addr_changed+0x66>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d026      	beq.n	800a3a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a354:	4b15      	ldr	r3, [pc, #84]	; (800a3ac <tcp_netif_ip_addr_changed+0x70>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff ffbc 	bl	800a2d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a360:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <tcp_netif_ip_addr_changed+0x74>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff ffb6 	bl	800a2d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d017      	beq.n	800a3a2 <tcp_netif_ip_addr_changed+0x66>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d013      	beq.n	800a3a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <tcp_netif_ip_addr_changed+0x78>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	e00c      	b.n	800a39c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d103      	bne.n	800a396 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1ef      	bne.n	800a382 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200087d8 	.word	0x200087d8
 800a3b0:	200087d0 	.word	0x200087d0
 800a3b4:	200087d4 	.word	0x200087d4

0800a3b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d007      	beq.n	800a3d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fc3d 	bl	8009c4c <tcp_segs_free>
    pcb->ooseq = NULL;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a3d8:	bf00      	nop
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a3e0:	b590      	push	{r4, r7, lr}
 800a3e2:	b08d      	sub	sp, #52	; 0x34
 800a3e4:	af04      	add	r7, sp, #16
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d105      	bne.n	800a3fc <tcp_input+0x1c>
 800a3f0:	4b9b      	ldr	r3, [pc, #620]	; (800a660 <tcp_input+0x280>)
 800a3f2:	2283      	movs	r2, #131	; 0x83
 800a3f4:	499b      	ldr	r1, [pc, #620]	; (800a664 <tcp_input+0x284>)
 800a3f6:	489c      	ldr	r0, [pc, #624]	; (800a668 <tcp_input+0x288>)
 800a3f8:	f008 fda6 	bl	8012f48 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4a9a      	ldr	r2, [pc, #616]	; (800a66c <tcp_input+0x28c>)
 800a402:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	895b      	ldrh	r3, [r3, #10]
 800a408:	2b13      	cmp	r3, #19
 800a40a:	f240 83d1 	bls.w	800abb0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a40e:	4b98      	ldr	r3, [pc, #608]	; (800a670 <tcp_input+0x290>)
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	4a97      	ldr	r2, [pc, #604]	; (800a670 <tcp_input+0x290>)
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f007 fd51 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 83c7 	bne.w	800abb4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a426:	4b92      	ldr	r3, [pc, #584]	; (800a670 <tcp_input+0x290>)
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a42e:	2be0      	cmp	r3, #224	; 0xe0
 800a430:	f000 83c0 	beq.w	800abb4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a434:	4b8d      	ldr	r3, [pc, #564]	; (800a66c <tcp_input+0x28c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	899b      	ldrh	r3, [r3, #12]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fc fefc 	bl	800723a <lwip_htons>
 800a442:	4603      	mov	r3, r0
 800a444:	0b1b      	lsrs	r3, r3, #12
 800a446:	b29b      	uxth	r3, r3
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a44e:	7cbb      	ldrb	r3, [r7, #18]
 800a450:	2b13      	cmp	r3, #19
 800a452:	f240 83b1 	bls.w	800abb8 <tcp_input+0x7d8>
 800a456:	7cbb      	ldrb	r3, [r7, #18]
 800a458:	b29a      	uxth	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	891b      	ldrh	r3, [r3, #8]
 800a45e:	429a      	cmp	r2, r3
 800a460:	f200 83aa 	bhi.w	800abb8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a464:	7cbb      	ldrb	r3, [r7, #18]
 800a466:	b29b      	uxth	r3, r3
 800a468:	3b14      	subs	r3, #20
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	4b81      	ldr	r3, [pc, #516]	; (800a674 <tcp_input+0x294>)
 800a46e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a470:	4b81      	ldr	r3, [pc, #516]	; (800a678 <tcp_input+0x298>)
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	895a      	ldrh	r2, [r3, #10]
 800a47a:	7cbb      	ldrb	r3, [r7, #18]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	429a      	cmp	r2, r3
 800a480:	d309      	bcc.n	800a496 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a482:	4b7c      	ldr	r3, [pc, #496]	; (800a674 <tcp_input+0x294>)
 800a484:	881a      	ldrh	r2, [r3, #0]
 800a486:	4b7d      	ldr	r3, [pc, #500]	; (800a67c <tcp_input+0x29c>)
 800a488:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a48a:	7cbb      	ldrb	r3, [r7, #18]
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7fe f8e8 	bl	8008664 <pbuf_remove_header>
 800a494:	e04e      	b.n	800a534 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d105      	bne.n	800a4aa <tcp_input+0xca>
 800a49e:	4b70      	ldr	r3, [pc, #448]	; (800a660 <tcp_input+0x280>)
 800a4a0:	22c2      	movs	r2, #194	; 0xc2
 800a4a2:	4977      	ldr	r1, [pc, #476]	; (800a680 <tcp_input+0x2a0>)
 800a4a4:	4870      	ldr	r0, [pc, #448]	; (800a668 <tcp_input+0x288>)
 800a4a6:	f008 fd4f 	bl	8012f48 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a4aa:	2114      	movs	r1, #20
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7fe f8d9 	bl	8008664 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	895a      	ldrh	r2, [r3, #10]
 800a4b6:	4b71      	ldr	r3, [pc, #452]	; (800a67c <tcp_input+0x29c>)
 800a4b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a4ba:	4b6e      	ldr	r3, [pc, #440]	; (800a674 <tcp_input+0x294>)
 800a4bc:	881a      	ldrh	r2, [r3, #0]
 800a4be:	4b6f      	ldr	r3, [pc, #444]	; (800a67c <tcp_input+0x29c>)
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a4c6:	4b6d      	ldr	r3, [pc, #436]	; (800a67c <tcp_input+0x29c>)
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7fe f8c9 	bl	8008664 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	895b      	ldrh	r3, [r3, #10]
 800a4d8:	8a3a      	ldrh	r2, [r7, #16]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	f200 836e 	bhi.w	800abbc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	4a64      	ldr	r2, [pc, #400]	; (800a678 <tcp_input+0x298>)
 800a4e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	8a3a      	ldrh	r2, [r7, #16]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe f8b6 	bl	8008664 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	891a      	ldrh	r2, [r3, #8]
 800a4fc:	8a3b      	ldrh	r3, [r7, #16]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	b29a      	uxth	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	895b      	ldrh	r3, [r3, #10]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d005      	beq.n	800a51a <tcp_input+0x13a>
 800a50e:	4b54      	ldr	r3, [pc, #336]	; (800a660 <tcp_input+0x280>)
 800a510:	22df      	movs	r2, #223	; 0xdf
 800a512:	495c      	ldr	r1, [pc, #368]	; (800a684 <tcp_input+0x2a4>)
 800a514:	4854      	ldr	r0, [pc, #336]	; (800a668 <tcp_input+0x288>)
 800a516:	f008 fd17 	bl	8012f48 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	891a      	ldrh	r2, [r3, #8]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	891b      	ldrh	r3, [r3, #8]
 800a524:	429a      	cmp	r2, r3
 800a526:	d005      	beq.n	800a534 <tcp_input+0x154>
 800a528:	4b4d      	ldr	r3, [pc, #308]	; (800a660 <tcp_input+0x280>)
 800a52a:	22e0      	movs	r2, #224	; 0xe0
 800a52c:	4956      	ldr	r1, [pc, #344]	; (800a688 <tcp_input+0x2a8>)
 800a52e:	484e      	ldr	r0, [pc, #312]	; (800a668 <tcp_input+0x288>)
 800a530:	f008 fd0a 	bl	8012f48 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a534:	4b4d      	ldr	r3, [pc, #308]	; (800a66c <tcp_input+0x28c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	4a4b      	ldr	r2, [pc, #300]	; (800a66c <tcp_input+0x28c>)
 800a53e:	6814      	ldr	r4, [r2, #0]
 800a540:	4618      	mov	r0, r3
 800a542:	f7fc fe7a 	bl	800723a <lwip_htons>
 800a546:	4603      	mov	r3, r0
 800a548:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a54a:	4b48      	ldr	r3, [pc, #288]	; (800a66c <tcp_input+0x28c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	885b      	ldrh	r3, [r3, #2]
 800a550:	b29b      	uxth	r3, r3
 800a552:	4a46      	ldr	r2, [pc, #280]	; (800a66c <tcp_input+0x28c>)
 800a554:	6814      	ldr	r4, [r2, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f7fc fe6f 	bl	800723a <lwip_htons>
 800a55c:	4603      	mov	r3, r0
 800a55e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a560:	4b42      	ldr	r3, [pc, #264]	; (800a66c <tcp_input+0x28c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	4a41      	ldr	r2, [pc, #260]	; (800a66c <tcp_input+0x28c>)
 800a568:	6814      	ldr	r4, [r2, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fc fe7a 	bl	8007264 <lwip_htonl>
 800a570:	4603      	mov	r3, r0
 800a572:	6063      	str	r3, [r4, #4]
 800a574:	6863      	ldr	r3, [r4, #4]
 800a576:	4a45      	ldr	r2, [pc, #276]	; (800a68c <tcp_input+0x2ac>)
 800a578:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a57a:	4b3c      	ldr	r3, [pc, #240]	; (800a66c <tcp_input+0x28c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	4a3a      	ldr	r2, [pc, #232]	; (800a66c <tcp_input+0x28c>)
 800a582:	6814      	ldr	r4, [r2, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f7fc fe6d 	bl	8007264 <lwip_htonl>
 800a58a:	4603      	mov	r3, r0
 800a58c:	60a3      	str	r3, [r4, #8]
 800a58e:	68a3      	ldr	r3, [r4, #8]
 800a590:	4a3f      	ldr	r2, [pc, #252]	; (800a690 <tcp_input+0x2b0>)
 800a592:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a594:	4b35      	ldr	r3, [pc, #212]	; (800a66c <tcp_input+0x28c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	89db      	ldrh	r3, [r3, #14]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4a33      	ldr	r2, [pc, #204]	; (800a66c <tcp_input+0x28c>)
 800a59e:	6814      	ldr	r4, [r2, #0]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fc fe4a 	bl	800723a <lwip_htons>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a5aa:	4b30      	ldr	r3, [pc, #192]	; (800a66c <tcp_input+0x28c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	899b      	ldrh	r3, [r3, #12]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fc fe41 	bl	800723a <lwip_htons>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	4b34      	ldr	r3, [pc, #208]	; (800a694 <tcp_input+0x2b4>)
 800a5c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	891a      	ldrh	r2, [r3, #8]
 800a5ca:	4b33      	ldr	r3, [pc, #204]	; (800a698 <tcp_input+0x2b8>)
 800a5cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a5ce:	4b31      	ldr	r3, [pc, #196]	; (800a694 <tcp_input+0x2b4>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00c      	beq.n	800a5f4 <tcp_input+0x214>
    tcplen++;
 800a5da:	4b2f      	ldr	r3, [pc, #188]	; (800a698 <tcp_input+0x2b8>)
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	4b2d      	ldr	r3, [pc, #180]	; (800a698 <tcp_input+0x2b8>)
 800a5e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	891a      	ldrh	r2, [r3, #8]
 800a5ea:	4b2b      	ldr	r3, [pc, #172]	; (800a698 <tcp_input+0x2b8>)
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	f200 82e6 	bhi.w	800abc0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5f8:	4b28      	ldr	r3, [pc, #160]	; (800a69c <tcp_input+0x2bc>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	e09d      	b.n	800a73c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	7d1b      	ldrb	r3, [r3, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d105      	bne.n	800a614 <tcp_input+0x234>
 800a608:	4b15      	ldr	r3, [pc, #84]	; (800a660 <tcp_input+0x280>)
 800a60a:	22fb      	movs	r2, #251	; 0xfb
 800a60c:	4924      	ldr	r1, [pc, #144]	; (800a6a0 <tcp_input+0x2c0>)
 800a60e:	4816      	ldr	r0, [pc, #88]	; (800a668 <tcp_input+0x288>)
 800a610:	f008 fc9a 	bl	8012f48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	7d1b      	ldrb	r3, [r3, #20]
 800a618:	2b0a      	cmp	r3, #10
 800a61a:	d105      	bne.n	800a628 <tcp_input+0x248>
 800a61c:	4b10      	ldr	r3, [pc, #64]	; (800a660 <tcp_input+0x280>)
 800a61e:	22fc      	movs	r2, #252	; 0xfc
 800a620:	4920      	ldr	r1, [pc, #128]	; (800a6a4 <tcp_input+0x2c4>)
 800a622:	4811      	ldr	r0, [pc, #68]	; (800a668 <tcp_input+0x288>)
 800a624:	f008 fc90 	bl	8012f48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	7d1b      	ldrb	r3, [r3, #20]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d105      	bne.n	800a63c <tcp_input+0x25c>
 800a630:	4b0b      	ldr	r3, [pc, #44]	; (800a660 <tcp_input+0x280>)
 800a632:	22fd      	movs	r2, #253	; 0xfd
 800a634:	491c      	ldr	r1, [pc, #112]	; (800a6a8 <tcp_input+0x2c8>)
 800a636:	480c      	ldr	r0, [pc, #48]	; (800a668 <tcp_input+0x288>)
 800a638:	f008 fc86 	bl	8012f48 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	7a1b      	ldrb	r3, [r3, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d033      	beq.n	800a6ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	7a1a      	ldrb	r2, [r3, #8]
 800a648:	4b09      	ldr	r3, [pc, #36]	; (800a670 <tcp_input+0x290>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a650:	3301      	adds	r3, #1
 800a652:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a654:	429a      	cmp	r2, r3
 800a656:	d029      	beq.n	800a6ac <tcp_input+0x2cc>
      prev = pcb;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	61bb      	str	r3, [r7, #24]
      continue;
 800a65c:	e06b      	b.n	800a736 <tcp_input+0x356>
 800a65e:	bf00      	nop
 800a660:	08014fb4 	.word	0x08014fb4
 800a664:	08014fe8 	.word	0x08014fe8
 800a668:	08015000 	.word	0x08015000
 800a66c:	200087f4 	.word	0x200087f4
 800a670:	2000523c 	.word	0x2000523c
 800a674:	200087f8 	.word	0x200087f8
 800a678:	200087fc 	.word	0x200087fc
 800a67c:	200087fa 	.word	0x200087fa
 800a680:	08015028 	.word	0x08015028
 800a684:	08015038 	.word	0x08015038
 800a688:	08015044 	.word	0x08015044
 800a68c:	20008804 	.word	0x20008804
 800a690:	20008808 	.word	0x20008808
 800a694:	20008810 	.word	0x20008810
 800a698:	2000880e 	.word	0x2000880e
 800a69c:	200087d8 	.word	0x200087d8
 800a6a0:	08015064 	.word	0x08015064
 800a6a4:	0801508c 	.word	0x0801508c
 800a6a8:	080150b8 	.word	0x080150b8
    }

    if (pcb->remote_port == tcphdr->src &&
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	8b1a      	ldrh	r2, [r3, #24]
 800a6b0:	4b72      	ldr	r3, [pc, #456]	; (800a87c <tcp_input+0x49c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d13a      	bne.n	800a732 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	8ada      	ldrh	r2, [r3, #22]
 800a6c0:	4b6e      	ldr	r3, [pc, #440]	; (800a87c <tcp_input+0x49c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	885b      	ldrh	r3, [r3, #2]
 800a6c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d132      	bne.n	800a732 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	4b6b      	ldr	r3, [pc, #428]	; (800a880 <tcp_input+0x4a0>)
 800a6d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d12c      	bne.n	800a732 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	4b68      	ldr	r3, [pc, #416]	; (800a880 <tcp_input+0x4a0>)
 800a6de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d126      	bne.n	800a732 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	69fa      	ldr	r2, [r7, #28]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d106      	bne.n	800a6fc <tcp_input+0x31c>
 800a6ee:	4b65      	ldr	r3, [pc, #404]	; (800a884 <tcp_input+0x4a4>)
 800a6f0:	f240 120d 	movw	r2, #269	; 0x10d
 800a6f4:	4964      	ldr	r1, [pc, #400]	; (800a888 <tcp_input+0x4a8>)
 800a6f6:	4865      	ldr	r0, [pc, #404]	; (800a88c <tcp_input+0x4ac>)
 800a6f8:	f008 fc26 	bl	8012f48 <iprintf>
      if (prev != NULL) {
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <tcp_input+0x338>
        prev->next = pcb->next;
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a70a:	4b61      	ldr	r3, [pc, #388]	; (800a890 <tcp_input+0x4b0>)
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a712:	4a5f      	ldr	r2, [pc, #380]	; (800a890 <tcp_input+0x4b0>)
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	69fa      	ldr	r2, [r7, #28]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d111      	bne.n	800a746 <tcp_input+0x366>
 800a722:	4b58      	ldr	r3, [pc, #352]	; (800a884 <tcp_input+0x4a4>)
 800a724:	f240 1215 	movw	r2, #277	; 0x115
 800a728:	495a      	ldr	r1, [pc, #360]	; (800a894 <tcp_input+0x4b4>)
 800a72a:	4858      	ldr	r0, [pc, #352]	; (800a88c <tcp_input+0x4ac>)
 800a72c:	f008 fc0c 	bl	8012f48 <iprintf>
      break;
 800a730:	e009      	b.n	800a746 <tcp_input+0x366>
    }
    prev = pcb;
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f47f af5e 	bne.w	800a600 <tcp_input+0x220>
 800a744:	e000      	b.n	800a748 <tcp_input+0x368>
      break;
 800a746:	bf00      	nop
  }

  if (pcb == NULL) {
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f040 80aa 	bne.w	800a8a4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a750:	4b51      	ldr	r3, [pc, #324]	; (800a898 <tcp_input+0x4b8>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	e03f      	b.n	800a7d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	7d1b      	ldrb	r3, [r3, #20]
 800a75c:	2b0a      	cmp	r3, #10
 800a75e:	d006      	beq.n	800a76e <tcp_input+0x38e>
 800a760:	4b48      	ldr	r3, [pc, #288]	; (800a884 <tcp_input+0x4a4>)
 800a762:	f240 121f 	movw	r2, #287	; 0x11f
 800a766:	494d      	ldr	r1, [pc, #308]	; (800a89c <tcp_input+0x4bc>)
 800a768:	4848      	ldr	r0, [pc, #288]	; (800a88c <tcp_input+0x4ac>)
 800a76a:	f008 fbed 	bl	8012f48 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	7a1b      	ldrb	r3, [r3, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	7a1a      	ldrb	r2, [r3, #8]
 800a77a:	4b41      	ldr	r3, [pc, #260]	; (800a880 <tcp_input+0x4a0>)
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a782:	3301      	adds	r3, #1
 800a784:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a786:	429a      	cmp	r2, r3
 800a788:	d122      	bne.n	800a7d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	8b1a      	ldrh	r2, [r3, #24]
 800a78e:	4b3b      	ldr	r3, [pc, #236]	; (800a87c <tcp_input+0x49c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	b29b      	uxth	r3, r3
 800a796:	429a      	cmp	r2, r3
 800a798:	d11b      	bne.n	800a7d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	8ada      	ldrh	r2, [r3, #22]
 800a79e:	4b37      	ldr	r3, [pc, #220]	; (800a87c <tcp_input+0x49c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	885b      	ldrh	r3, [r3, #2]
 800a7a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d113      	bne.n	800a7d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	4b34      	ldr	r3, [pc, #208]	; (800a880 <tcp_input+0x4a0>)
 800a7b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d10d      	bne.n	800a7d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	4b31      	ldr	r3, [pc, #196]	; (800a880 <tcp_input+0x4a0>)
 800a7bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d107      	bne.n	800a7d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a7c2:	69f8      	ldr	r0, [r7, #28]
 800a7c4:	f000 fb56 	bl	800ae74 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7fd ffd1 	bl	8008770 <pbuf_free>
        return;
 800a7ce:	e1fd      	b.n	800abcc <tcp_input+0x7ec>
        continue;
 800a7d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	61fb      	str	r3, [r7, #28]
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1bc      	bne.n	800a758 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7e2:	4b2f      	ldr	r3, [pc, #188]	; (800a8a0 <tcp_input+0x4c0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e02a      	b.n	800a840 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	7a1b      	ldrb	r3, [r3, #8]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00c      	beq.n	800a80c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	7a1a      	ldrb	r2, [r3, #8]
 800a7f6:	4b22      	ldr	r3, [pc, #136]	; (800a880 <tcp_input+0x4a0>)
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7fe:	3301      	adds	r3, #1
 800a800:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a802:	429a      	cmp	r2, r3
 800a804:	d002      	beq.n	800a80c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	61bb      	str	r3, [r7, #24]
        continue;
 800a80a:	e016      	b.n	800a83a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	8ada      	ldrh	r2, [r3, #22]
 800a810:	4b1a      	ldr	r3, [pc, #104]	; (800a87c <tcp_input+0x49c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	885b      	ldrh	r3, [r3, #2]
 800a816:	b29b      	uxth	r3, r3
 800a818:	429a      	cmp	r2, r3
 800a81a:	d10c      	bne.n	800a836 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b17      	ldr	r3, [pc, #92]	; (800a880 <tcp_input+0x4a0>)
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	429a      	cmp	r2, r3
 800a826:	d00f      	beq.n	800a848 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00d      	beq.n	800a84a <tcp_input+0x46a>
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d009      	beq.n	800a84a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1d1      	bne.n	800a7ea <tcp_input+0x40a>
 800a846:	e000      	b.n	800a84a <tcp_input+0x46a>
            break;
 800a848:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d029      	beq.n	800a8a4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	68da      	ldr	r2, [r3, #12]
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <tcp_input+0x4c0>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a866:	4a0e      	ldr	r2, [pc, #56]	; (800a8a0 <tcp_input+0x4c0>)
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a86c:	6978      	ldr	r0, [r7, #20]
 800a86e:	f000 fa03 	bl	800ac78 <tcp_listen_input>
      }
      pbuf_free(p);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7fd ff7c 	bl	8008770 <pbuf_free>
      return;
 800a878:	e1a8      	b.n	800abcc <tcp_input+0x7ec>
 800a87a:	bf00      	nop
 800a87c:	200087f4 	.word	0x200087f4
 800a880:	2000523c 	.word	0x2000523c
 800a884:	08014fb4 	.word	0x08014fb4
 800a888:	080150e0 	.word	0x080150e0
 800a88c:	08015000 	.word	0x08015000
 800a890:	200087d8 	.word	0x200087d8
 800a894:	0801510c 	.word	0x0801510c
 800a898:	200087dc 	.word	0x200087dc
 800a89c:	08015138 	.word	0x08015138
 800a8a0:	200087d4 	.word	0x200087d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 8158 	beq.w	800ab5c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a8ac:	4b95      	ldr	r3, [pc, #596]	; (800ab04 <tcp_input+0x724>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	891a      	ldrh	r2, [r3, #8]
 800a8b6:	4b93      	ldr	r3, [pc, #588]	; (800ab04 <tcp_input+0x724>)
 800a8b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a8ba:	4a92      	ldr	r2, [pc, #584]	; (800ab04 <tcp_input+0x724>)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a8c0:	4b91      	ldr	r3, [pc, #580]	; (800ab08 <tcp_input+0x728>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a8f      	ldr	r2, [pc, #572]	; (800ab04 <tcp_input+0x724>)
 800a8c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a8c8:	4b90      	ldr	r3, [pc, #576]	; (800ab0c <tcp_input+0x72c>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a8ce:	4b90      	ldr	r3, [pc, #576]	; (800ab10 <tcp_input+0x730>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a8d4:	4b8f      	ldr	r3, [pc, #572]	; (800ab14 <tcp_input+0x734>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a8da:	4b8f      	ldr	r3, [pc, #572]	; (800ab18 <tcp_input+0x738>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	f003 0308 	and.w	r3, r3, #8
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d006      	beq.n	800a8f4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	7b5b      	ldrb	r3, [r3, #13]
 800a8ea:	f043 0301 	orr.w	r3, r3, #1
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d017      	beq.n	800a92c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a8fc:	69f8      	ldr	r0, [r7, #28]
 800a8fe:	f7ff f929 	bl	8009b54 <tcp_process_refused_data>
 800a902:	4603      	mov	r3, r0
 800a904:	f113 0f0d 	cmn.w	r3, #13
 800a908:	d007      	beq.n	800a91a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00c      	beq.n	800a92c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a912:	4b82      	ldr	r3, [pc, #520]	; (800ab1c <tcp_input+0x73c>)
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d008      	beq.n	800a92c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f040 80e3 	bne.w	800aaea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a924:	69f8      	ldr	r0, [r7, #28]
 800a926:	f003 f9ad 	bl	800dc84 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a92a:	e0de      	b.n	800aaea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a92c:	4a7c      	ldr	r2, [pc, #496]	; (800ab20 <tcp_input+0x740>)
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a932:	69f8      	ldr	r0, [r7, #28]
 800a934:	f000 fb18 	bl	800af68 <tcp_process>
 800a938:	4603      	mov	r3, r0
 800a93a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a93c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a940:	f113 0f0d 	cmn.w	r3, #13
 800a944:	f000 80d3 	beq.w	800aaee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a948:	4b71      	ldr	r3, [pc, #452]	; (800ab10 <tcp_input+0x730>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f003 0308 	and.w	r3, r3, #8
 800a950:	2b00      	cmp	r3, #0
 800a952:	d015      	beq.n	800a980 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d008      	beq.n	800a970 <tcp_input+0x590>
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a964:	69fa      	ldr	r2, [r7, #28]
 800a966:	6912      	ldr	r2, [r2, #16]
 800a968:	f06f 010d 	mvn.w	r1, #13
 800a96c:	4610      	mov	r0, r2
 800a96e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a970:	69f9      	ldr	r1, [r7, #28]
 800a972:	486c      	ldr	r0, [pc, #432]	; (800ab24 <tcp_input+0x744>)
 800a974:	f7ff fbbc 	bl	800a0f0 <tcp_pcb_remove>
        tcp_free(pcb);
 800a978:	69f8      	ldr	r0, [r7, #28]
 800a97a:	f7fe f9a9 	bl	8008cd0 <tcp_free>
 800a97e:	e0da      	b.n	800ab36 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a984:	4b63      	ldr	r3, [pc, #396]	; (800ab14 <tcp_input+0x734>)
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01d      	beq.n	800a9c8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a98c:	4b61      	ldr	r3, [pc, #388]	; (800ab14 <tcp_input+0x734>)
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00a      	beq.n	800a9b2 <tcp_input+0x5d2>
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a2:	69fa      	ldr	r2, [r7, #28]
 800a9a4:	6910      	ldr	r0, [r2, #16]
 800a9a6:	89fa      	ldrh	r2, [r7, #14]
 800a9a8:	69f9      	ldr	r1, [r7, #28]
 800a9aa:	4798      	blx	r3
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	74fb      	strb	r3, [r7, #19]
 800a9b0:	e001      	b.n	800a9b6 <tcp_input+0x5d6>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a9b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a9ba:	f113 0f0d 	cmn.w	r3, #13
 800a9be:	f000 8098 	beq.w	800aaf2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a9c2:	4b54      	ldr	r3, [pc, #336]	; (800ab14 <tcp_input+0x734>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a9c8:	69f8      	ldr	r0, [r7, #28]
 800a9ca:	f000 f915 	bl	800abf8 <tcp_input_delayed_close>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 8090 	bne.w	800aaf6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a9d6:	4b4d      	ldr	r3, [pc, #308]	; (800ab0c <tcp_input+0x72c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d041      	beq.n	800aa62 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d006      	beq.n	800a9f4 <tcp_input+0x614>
 800a9e6:	4b50      	ldr	r3, [pc, #320]	; (800ab28 <tcp_input+0x748>)
 800a9e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a9ec:	494f      	ldr	r1, [pc, #316]	; (800ab2c <tcp_input+0x74c>)
 800a9ee:	4850      	ldr	r0, [pc, #320]	; (800ab30 <tcp_input+0x750>)
 800a9f0:	f008 faaa 	bl	8012f48 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	8b5b      	ldrh	r3, [r3, #26]
 800a9f8:	f003 0310 	and.w	r3, r3, #16
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d008      	beq.n	800aa12 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aa00:	4b42      	ldr	r3, [pc, #264]	; (800ab0c <tcp_input+0x72c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fd feb3 	bl	8008770 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800aa0a:	69f8      	ldr	r0, [r7, #28]
 800aa0c:	f7fe fc48 	bl	80092a0 <tcp_abort>
            goto aborted;
 800aa10:	e091      	b.n	800ab36 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00c      	beq.n	800aa36 <tcp_input+0x656>
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	6918      	ldr	r0, [r3, #16]
 800aa26:	4b39      	ldr	r3, [pc, #228]	; (800ab0c <tcp_input+0x72c>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	69f9      	ldr	r1, [r7, #28]
 800aa2e:	47a0      	blx	r4
 800aa30:	4603      	mov	r3, r0
 800aa32:	74fb      	strb	r3, [r7, #19]
 800aa34:	e008      	b.n	800aa48 <tcp_input+0x668>
 800aa36:	4b35      	ldr	r3, [pc, #212]	; (800ab0c <tcp_input+0x72c>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	69f9      	ldr	r1, [r7, #28]
 800aa3e:	2000      	movs	r0, #0
 800aa40:	f7ff f95e 	bl	8009d00 <tcp_recv_null>
 800aa44:	4603      	mov	r3, r0
 800aa46:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800aa48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa4c:	f113 0f0d 	cmn.w	r3, #13
 800aa50:	d053      	beq.n	800aafa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800aa52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800aa5a:	4b2c      	ldr	r3, [pc, #176]	; (800ab0c <tcp_input+0x72c>)
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800aa62:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <tcp_input+0x730>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d030      	beq.n	800aad0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d009      	beq.n	800aa8a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa7a:	7b5a      	ldrb	r2, [r3, #13]
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa80:	f042 0220 	orr.w	r2, r2, #32
 800aa84:	b2d2      	uxtb	r2, r2
 800aa86:	735a      	strb	r2, [r3, #13]
 800aa88:	e022      	b.n	800aad0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aa92:	d005      	beq.n	800aaa0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa98:	3301      	adds	r3, #1
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00b      	beq.n	800aac2 <tcp_input+0x6e2>
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	6918      	ldr	r0, [r3, #16]
 800aab4:	2300      	movs	r3, #0
 800aab6:	2200      	movs	r2, #0
 800aab8:	69f9      	ldr	r1, [r7, #28]
 800aaba:	47a0      	blx	r4
 800aabc:	4603      	mov	r3, r0
 800aabe:	74fb      	strb	r3, [r7, #19]
 800aac0:	e001      	b.n	800aac6 <tcp_input+0x6e6>
 800aac2:	2300      	movs	r3, #0
 800aac4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aaca:	f113 0f0d 	cmn.w	r3, #13
 800aace:	d016      	beq.n	800aafe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800aad0:	4b13      	ldr	r3, [pc, #76]	; (800ab20 <tcp_input+0x740>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800aad6:	69f8      	ldr	r0, [r7, #28]
 800aad8:	f000 f88e 	bl	800abf8 <tcp_input_delayed_close>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d128      	bne.n	800ab34 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800aae2:	69f8      	ldr	r0, [r7, #28]
 800aae4:	f002 fac8 	bl	800d078 <tcp_output>
 800aae8:	e025      	b.n	800ab36 <tcp_input+0x756>
        goto aborted;
 800aaea:	bf00      	nop
 800aaec:	e023      	b.n	800ab36 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800aaee:	bf00      	nop
 800aaf0:	e021      	b.n	800ab36 <tcp_input+0x756>
              goto aborted;
 800aaf2:	bf00      	nop
 800aaf4:	e01f      	b.n	800ab36 <tcp_input+0x756>
          goto aborted;
 800aaf6:	bf00      	nop
 800aaf8:	e01d      	b.n	800ab36 <tcp_input+0x756>
            goto aborted;
 800aafa:	bf00      	nop
 800aafc:	e01b      	b.n	800ab36 <tcp_input+0x756>
              goto aborted;
 800aafe:	bf00      	nop
 800ab00:	e019      	b.n	800ab36 <tcp_input+0x756>
 800ab02:	bf00      	nop
 800ab04:	200087e4 	.word	0x200087e4
 800ab08:	200087f4 	.word	0x200087f4
 800ab0c:	20008814 	.word	0x20008814
 800ab10:	20008811 	.word	0x20008811
 800ab14:	2000880c 	.word	0x2000880c
 800ab18:	20008810 	.word	0x20008810
 800ab1c:	2000880e 	.word	0x2000880e
 800ab20:	20008818 	.word	0x20008818
 800ab24:	200087d8 	.word	0x200087d8
 800ab28:	08014fb4 	.word	0x08014fb4
 800ab2c:	08015168 	.word	0x08015168
 800ab30:	08015000 	.word	0x08015000
          goto aborted;
 800ab34:	bf00      	nop
    tcp_input_pcb = NULL;
 800ab36:	4b27      	ldr	r3, [pc, #156]	; (800abd4 <tcp_input+0x7f4>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ab3c:	4b26      	ldr	r3, [pc, #152]	; (800abd8 <tcp_input+0x7f8>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ab42:	4b26      	ldr	r3, [pc, #152]	; (800abdc <tcp_input+0x7fc>)
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d03f      	beq.n	800abca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ab4a:	4b24      	ldr	r3, [pc, #144]	; (800abdc <tcp_input+0x7fc>)
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fd fe0e 	bl	8008770 <pbuf_free>
      inseg.p = NULL;
 800ab54:	4b21      	ldr	r3, [pc, #132]	; (800abdc <tcp_input+0x7fc>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ab5a:	e036      	b.n	800abca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ab5c:	4b20      	ldr	r3, [pc, #128]	; (800abe0 <tcp_input+0x800>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	899b      	ldrh	r3, [r3, #12]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fc fb68 	bl	800723a <lwip_htons>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f003 0304 	and.w	r3, r3, #4
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d118      	bne.n	800aba8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab76:	4b1b      	ldr	r3, [pc, #108]	; (800abe4 <tcp_input+0x804>)
 800ab78:	6819      	ldr	r1, [r3, #0]
 800ab7a:	4b1b      	ldr	r3, [pc, #108]	; (800abe8 <tcp_input+0x808>)
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4b1a      	ldr	r3, [pc, #104]	; (800abec <tcp_input+0x80c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab86:	4b16      	ldr	r3, [pc, #88]	; (800abe0 <tcp_input+0x800>)
 800ab88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab8a:	885b      	ldrh	r3, [r3, #2]
 800ab8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab8e:	4a14      	ldr	r2, [pc, #80]	; (800abe0 <tcp_input+0x800>)
 800ab90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab92:	8812      	ldrh	r2, [r2, #0]
 800ab94:	b292      	uxth	r2, r2
 800ab96:	9202      	str	r2, [sp, #8]
 800ab98:	9301      	str	r3, [sp, #4]
 800ab9a:	4b15      	ldr	r3, [pc, #84]	; (800abf0 <tcp_input+0x810>)
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	4b15      	ldr	r3, [pc, #84]	; (800abf4 <tcp_input+0x814>)
 800aba0:	4602      	mov	r2, r0
 800aba2:	2000      	movs	r0, #0
 800aba4:	f003 f81c 	bl	800dbe0 <tcp_rst>
    pbuf_free(p);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7fd fde1 	bl	8008770 <pbuf_free>
  return;
 800abae:	e00c      	b.n	800abca <tcp_input+0x7ea>
    goto dropped;
 800abb0:	bf00      	nop
 800abb2:	e006      	b.n	800abc2 <tcp_input+0x7e2>
    goto dropped;
 800abb4:	bf00      	nop
 800abb6:	e004      	b.n	800abc2 <tcp_input+0x7e2>
    goto dropped;
 800abb8:	bf00      	nop
 800abba:	e002      	b.n	800abc2 <tcp_input+0x7e2>
      goto dropped;
 800abbc:	bf00      	nop
 800abbe:	e000      	b.n	800abc2 <tcp_input+0x7e2>
      goto dropped;
 800abc0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fd fdd4 	bl	8008770 <pbuf_free>
 800abc8:	e000      	b.n	800abcc <tcp_input+0x7ec>
  return;
 800abca:	bf00      	nop
}
 800abcc:	3724      	adds	r7, #36	; 0x24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd90      	pop	{r4, r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20008818 	.word	0x20008818
 800abd8:	20008814 	.word	0x20008814
 800abdc:	200087e4 	.word	0x200087e4
 800abe0:	200087f4 	.word	0x200087f4
 800abe4:	20008808 	.word	0x20008808
 800abe8:	2000880e 	.word	0x2000880e
 800abec:	20008804 	.word	0x20008804
 800abf0:	2000524c 	.word	0x2000524c
 800abf4:	20005250 	.word	0x20005250

0800abf8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <tcp_input_delayed_close+0x1c>
 800ac06:	4b17      	ldr	r3, [pc, #92]	; (800ac64 <tcp_input_delayed_close+0x6c>)
 800ac08:	f240 225a 	movw	r2, #602	; 0x25a
 800ac0c:	4916      	ldr	r1, [pc, #88]	; (800ac68 <tcp_input_delayed_close+0x70>)
 800ac0e:	4817      	ldr	r0, [pc, #92]	; (800ac6c <tcp_input_delayed_close+0x74>)
 800ac10:	f008 f99a 	bl	8012f48 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ac14:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <tcp_input_delayed_close+0x78>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01c      	beq.n	800ac5a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	8b5b      	ldrh	r3, [r3, #26]
 800ac24:	f003 0310 	and.w	r3, r3, #16
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10d      	bne.n	800ac48 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d008      	beq.n	800ac48 <tcp_input_delayed_close+0x50>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6912      	ldr	r2, [r2, #16]
 800ac40:	f06f 010e 	mvn.w	r1, #14
 800ac44:	4610      	mov	r0, r2
 800ac46:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	480a      	ldr	r0, [pc, #40]	; (800ac74 <tcp_input_delayed_close+0x7c>)
 800ac4c:	f7ff fa50 	bl	800a0f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7fe f83d 	bl	8008cd0 <tcp_free>
    return 1;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	08014fb4 	.word	0x08014fb4
 800ac68:	08015184 	.word	0x08015184
 800ac6c:	08015000 	.word	0x08015000
 800ac70:	20008811 	.word	0x20008811
 800ac74:	200087d8 	.word	0x200087d8

0800ac78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b08b      	sub	sp, #44	; 0x2c
 800ac7c:	af04      	add	r7, sp, #16
 800ac7e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ac80:	4b6f      	ldr	r3, [pc, #444]	; (800ae40 <tcp_listen_input+0x1c8>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 80d2 	bne.w	800ae32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d106      	bne.n	800aca2 <tcp_listen_input+0x2a>
 800ac94:	4b6b      	ldr	r3, [pc, #428]	; (800ae44 <tcp_listen_input+0x1cc>)
 800ac96:	f240 2281 	movw	r2, #641	; 0x281
 800ac9a:	496b      	ldr	r1, [pc, #428]	; (800ae48 <tcp_listen_input+0x1d0>)
 800ac9c:	486b      	ldr	r0, [pc, #428]	; (800ae4c <tcp_listen_input+0x1d4>)
 800ac9e:	f008 f953 	bl	8012f48 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aca2:	4b67      	ldr	r3, [pc, #412]	; (800ae40 <tcp_listen_input+0x1c8>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	f003 0310 	and.w	r3, r3, #16
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d019      	beq.n	800ace2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acae:	4b68      	ldr	r3, [pc, #416]	; (800ae50 <tcp_listen_input+0x1d8>)
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	4b68      	ldr	r3, [pc, #416]	; (800ae54 <tcp_listen_input+0x1dc>)
 800acb4:	881b      	ldrh	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	4b67      	ldr	r3, [pc, #412]	; (800ae58 <tcp_listen_input+0x1e0>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acbe:	4b67      	ldr	r3, [pc, #412]	; (800ae5c <tcp_listen_input+0x1e4>)
 800acc0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acc2:	885b      	ldrh	r3, [r3, #2]
 800acc4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acc6:	4a65      	ldr	r2, [pc, #404]	; (800ae5c <tcp_listen_input+0x1e4>)
 800acc8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acca:	8812      	ldrh	r2, [r2, #0]
 800accc:	b292      	uxth	r2, r2
 800acce:	9202      	str	r2, [sp, #8]
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	4b63      	ldr	r3, [pc, #396]	; (800ae60 <tcp_listen_input+0x1e8>)
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	4b63      	ldr	r3, [pc, #396]	; (800ae64 <tcp_listen_input+0x1ec>)
 800acd8:	4602      	mov	r2, r0
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f002 ff80 	bl	800dbe0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ace0:	e0a9      	b.n	800ae36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ace2:	4b57      	ldr	r3, [pc, #348]	; (800ae40 <tcp_listen_input+0x1c8>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 80a3 	beq.w	800ae36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7d5b      	ldrb	r3, [r3, #21]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff f927 	bl	8009f48 <tcp_alloc>
 800acfa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d111      	bne.n	800ad26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <tcp_listen_input+0xa8>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	6910      	ldr	r0, [r2, #16]
 800ad12:	f04f 32ff 	mov.w	r2, #4294967295
 800ad16:	2100      	movs	r1, #0
 800ad18:	4798      	blx	r3
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]
      return;
 800ad1e:	e08b      	b.n	800ae38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ad20:	23f0      	movs	r3, #240	; 0xf0
 800ad22:	73bb      	strb	r3, [r7, #14]
      return;
 800ad24:	e088      	b.n	800ae38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ad26:	4b50      	ldr	r3, [pc, #320]	; (800ae68 <tcp_listen_input+0x1f0>)
 800ad28:	695a      	ldr	r2, [r3, #20]
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ad2e:	4b4e      	ldr	r3, [pc, #312]	; (800ae68 <tcp_listen_input+0x1f0>)
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	8ada      	ldrh	r2, [r3, #22]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ad3e:	4b47      	ldr	r3, [pc, #284]	; (800ae5c <tcp_listen_input+0x1e4>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2203      	movs	r2, #3
 800ad4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ad50:	4b41      	ldr	r3, [pc, #260]	; (800ae58 <tcp_listen_input+0x1e0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ad62:	6978      	ldr	r0, [r7, #20]
 800ad64:	f7ff fa58 	bl	800a218 <tcp_next_iss>
 800ad68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ad82:	4b35      	ldr	r3, [pc, #212]	; (800ae58 <tcp_listen_input+0x1e0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	1e5a      	subs	r2, r3, #1
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691a      	ldr	r2, [r3, #16]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	7a5b      	ldrb	r3, [r3, #9]
 800ad9e:	f003 030c 	and.w	r3, r3, #12
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7a1a      	ldrb	r2, [r3, #8]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800adb0:	4b2e      	ldr	r3, [pc, #184]	; (800ae6c <tcp_listen_input+0x1f4>)
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	60da      	str	r2, [r3, #12]
 800adb8:	4a2c      	ldr	r2, [pc, #176]	; (800ae6c <tcp_listen_input+0x1f4>)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	f003 f8d1 	bl	800df64 <tcp_timer_needed>
 800adc2:	4b2b      	ldr	r3, [pc, #172]	; (800ae70 <tcp_listen_input+0x1f8>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800adc8:	6978      	ldr	r0, [r7, #20]
 800adca:	f001 fd8f 	bl	800c8ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800adce:	4b23      	ldr	r3, [pc, #140]	; (800ae5c <tcp_listen_input+0x1e4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	89db      	ldrh	r3, [r3, #14]
 800add4:	b29a      	uxth	r2, r3
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	3304      	adds	r3, #4
 800adf0:	4618      	mov	r0, r3
 800adf2:	f006 fdb1 	bl	8011958 <ip4_route>
 800adf6:	4601      	mov	r1, r0
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3304      	adds	r3, #4
 800adfc:	461a      	mov	r2, r3
 800adfe:	4620      	mov	r0, r4
 800ae00:	f7ff fa30 	bl	800a264 <tcp_eff_send_mss_netif>
 800ae04:	4603      	mov	r3, r0
 800ae06:	461a      	mov	r2, r3
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ae0c:	2112      	movs	r1, #18
 800ae0e:	6978      	ldr	r0, [r7, #20]
 800ae10:	f002 f844 	bl	800ce9c <tcp_enqueue_flags>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ae18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d004      	beq.n	800ae2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ae20:	2100      	movs	r1, #0
 800ae22:	6978      	ldr	r0, [r7, #20]
 800ae24:	f7fe f97e 	bl	8009124 <tcp_abandon>
      return;
 800ae28:	e006      	b.n	800ae38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ae2a:	6978      	ldr	r0, [r7, #20]
 800ae2c:	f002 f924 	bl	800d078 <tcp_output>
  return;
 800ae30:	e001      	b.n	800ae36 <tcp_listen_input+0x1be>
    return;
 800ae32:	bf00      	nop
 800ae34:	e000      	b.n	800ae38 <tcp_listen_input+0x1c0>
  return;
 800ae36:	bf00      	nop
}
 800ae38:	371c      	adds	r7, #28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd90      	pop	{r4, r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20008810 	.word	0x20008810
 800ae44:	08014fb4 	.word	0x08014fb4
 800ae48:	080151ac 	.word	0x080151ac
 800ae4c:	08015000 	.word	0x08015000
 800ae50:	20008808 	.word	0x20008808
 800ae54:	2000880e 	.word	0x2000880e
 800ae58:	20008804 	.word	0x20008804
 800ae5c:	200087f4 	.word	0x200087f4
 800ae60:	2000524c 	.word	0x2000524c
 800ae64:	20005250 	.word	0x20005250
 800ae68:	2000523c 	.word	0x2000523c
 800ae6c:	200087d8 	.word	0x200087d8
 800ae70:	200087e0 	.word	0x200087e0

0800ae74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af04      	add	r7, sp, #16
 800ae7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ae7c:	4b2f      	ldr	r3, [pc, #188]	; (800af3c <tcp_timewait_input+0xc8>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d153      	bne.n	800af30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d106      	bne.n	800ae9c <tcp_timewait_input+0x28>
 800ae8e:	4b2c      	ldr	r3, [pc, #176]	; (800af40 <tcp_timewait_input+0xcc>)
 800ae90:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ae94:	492b      	ldr	r1, [pc, #172]	; (800af44 <tcp_timewait_input+0xd0>)
 800ae96:	482c      	ldr	r0, [pc, #176]	; (800af48 <tcp_timewait_input+0xd4>)
 800ae98:	f008 f856 	bl	8012f48 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ae9c:	4b27      	ldr	r3, [pc, #156]	; (800af3c <tcp_timewait_input+0xc8>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	f003 0302 	and.w	r3, r3, #2
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d02a      	beq.n	800aefe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800aea8:	4b28      	ldr	r3, [pc, #160]	; (800af4c <tcp_timewait_input+0xd8>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	db2d      	blt.n	800af12 <tcp_timewait_input+0x9e>
 800aeb6:	4b25      	ldr	r3, [pc, #148]	; (800af4c <tcp_timewait_input+0xd8>)
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aec2:	440b      	add	r3, r1
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dc23      	bgt.n	800af12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aeca:	4b21      	ldr	r3, [pc, #132]	; (800af50 <tcp_timewait_input+0xdc>)
 800aecc:	6819      	ldr	r1, [r3, #0]
 800aece:	4b21      	ldr	r3, [pc, #132]	; (800af54 <tcp_timewait_input+0xe0>)
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	4b1d      	ldr	r3, [pc, #116]	; (800af4c <tcp_timewait_input+0xd8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aeda:	4b1f      	ldr	r3, [pc, #124]	; (800af58 <tcp_timewait_input+0xe4>)
 800aedc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aede:	885b      	ldrh	r3, [r3, #2]
 800aee0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aee2:	4a1d      	ldr	r2, [pc, #116]	; (800af58 <tcp_timewait_input+0xe4>)
 800aee4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aee6:	8812      	ldrh	r2, [r2, #0]
 800aee8:	b292      	uxth	r2, r2
 800aeea:	9202      	str	r2, [sp, #8]
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	4b1b      	ldr	r3, [pc, #108]	; (800af5c <tcp_timewait_input+0xe8>)
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <tcp_timewait_input+0xec>)
 800aef4:	4602      	mov	r2, r0
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f002 fe72 	bl	800dbe0 <tcp_rst>
      return;
 800aefc:	e01b      	b.n	800af36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800aefe:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <tcp_timewait_input+0xc8>)
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800af0a:	4b16      	ldr	r3, [pc, #88]	; (800af64 <tcp_timewait_input+0xf0>)
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800af12:	4b10      	ldr	r3, [pc, #64]	; (800af54 <tcp_timewait_input+0xe0>)
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00c      	beq.n	800af34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8b5b      	ldrh	r3, [r3, #26]
 800af1e:	f043 0302 	orr.w	r3, r3, #2
 800af22:	b29a      	uxth	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f002 f8a5 	bl	800d078 <tcp_output>
  }
  return;
 800af2e:	e001      	b.n	800af34 <tcp_timewait_input+0xc0>
    return;
 800af30:	bf00      	nop
 800af32:	e000      	b.n	800af36 <tcp_timewait_input+0xc2>
  return;
 800af34:	bf00      	nop
}
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20008810 	.word	0x20008810
 800af40:	08014fb4 	.word	0x08014fb4
 800af44:	080151cc 	.word	0x080151cc
 800af48:	08015000 	.word	0x08015000
 800af4c:	20008804 	.word	0x20008804
 800af50:	20008808 	.word	0x20008808
 800af54:	2000880e 	.word	0x2000880e
 800af58:	200087f4 	.word	0x200087f4
 800af5c:	2000524c 	.word	0x2000524c
 800af60:	20005250 	.word	0x20005250
 800af64:	200087cc 	.word	0x200087cc

0800af68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800af68:	b590      	push	{r4, r7, lr}
 800af6a:	b08d      	sub	sp, #52	; 0x34
 800af6c:	af04      	add	r7, sp, #16
 800af6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <tcp_process+0x24>
 800af7e:	4b9d      	ldr	r3, [pc, #628]	; (800b1f4 <tcp_process+0x28c>)
 800af80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800af84:	499c      	ldr	r1, [pc, #624]	; (800b1f8 <tcp_process+0x290>)
 800af86:	489d      	ldr	r0, [pc, #628]	; (800b1fc <tcp_process+0x294>)
 800af88:	f007 ffde 	bl	8012f48 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800af8c:	4b9c      	ldr	r3, [pc, #624]	; (800b200 <tcp_process+0x298>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	f003 0304 	and.w	r3, r3, #4
 800af94:	2b00      	cmp	r3, #0
 800af96:	d04e      	beq.n	800b036 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7d1b      	ldrb	r3, [r3, #20]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d108      	bne.n	800afb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afa4:	4b97      	ldr	r3, [pc, #604]	; (800b204 <tcp_process+0x29c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d123      	bne.n	800aff4 <tcp_process+0x8c>
        acceptable = 1;
 800afac:	2301      	movs	r3, #1
 800afae:	76fb      	strb	r3, [r7, #27]
 800afb0:	e020      	b.n	800aff4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afb6:	4b94      	ldr	r3, [pc, #592]	; (800b208 <tcp_process+0x2a0>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d102      	bne.n	800afc4 <tcp_process+0x5c>
        acceptable = 1;
 800afbe:	2301      	movs	r3, #1
 800afc0:	76fb      	strb	r3, [r7, #27]
 800afc2:	e017      	b.n	800aff4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afc4:	4b90      	ldr	r3, [pc, #576]	; (800b208 <tcp_process+0x2a0>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	db10      	blt.n	800aff4 <tcp_process+0x8c>
 800afd2:	4b8d      	ldr	r3, [pc, #564]	; (800b208 <tcp_process+0x2a0>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afde:	440b      	add	r3, r1
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dc06      	bgt.n	800aff4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8b5b      	ldrh	r3, [r3, #26]
 800afea:	f043 0302 	orr.w	r3, r3, #2
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aff4:	7efb      	ldrb	r3, [r7, #27]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d01b      	beq.n	800b032 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	7d1b      	ldrb	r3, [r3, #20]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d106      	bne.n	800b010 <tcp_process+0xa8>
 800b002:	4b7c      	ldr	r3, [pc, #496]	; (800b1f4 <tcp_process+0x28c>)
 800b004:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b008:	4980      	ldr	r1, [pc, #512]	; (800b20c <tcp_process+0x2a4>)
 800b00a:	487c      	ldr	r0, [pc, #496]	; (800b1fc <tcp_process+0x294>)
 800b00c:	f007 ff9c 	bl	8012f48 <iprintf>
      recv_flags |= TF_RESET;
 800b010:	4b7f      	ldr	r3, [pc, #508]	; (800b210 <tcp_process+0x2a8>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f043 0308 	orr.w	r3, r3, #8
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	4b7d      	ldr	r3, [pc, #500]	; (800b210 <tcp_process+0x2a8>)
 800b01c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8b5b      	ldrh	r3, [r3, #26]
 800b022:	f023 0301 	bic.w	r3, r3, #1
 800b026:	b29a      	uxth	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b02c:	f06f 030d 	mvn.w	r3, #13
 800b030:	e37a      	b.n	800b728 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	e378      	b.n	800b728 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b036:	4b72      	ldr	r3, [pc, #456]	; (800b200 <tcp_process+0x298>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d010      	beq.n	800b064 <tcp_process+0xfc>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	7d1b      	ldrb	r3, [r3, #20]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d00c      	beq.n	800b064 <tcp_process+0xfc>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7d1b      	ldrb	r3, [r3, #20]
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d008      	beq.n	800b064 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	8b5b      	ldrh	r3, [r3, #26]
 800b056:	f043 0302 	orr.w	r3, r3, #2
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	e361      	b.n	800b728 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8b5b      	ldrh	r3, [r3, #26]
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d103      	bne.n	800b078 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b070:	4b68      	ldr	r3, [pc, #416]	; (800b214 <tcp_process+0x2ac>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 fc2f 	bl	800c8ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	7d1b      	ldrb	r3, [r3, #20]
 800b092:	3b02      	subs	r3, #2
 800b094:	2b07      	cmp	r3, #7
 800b096:	f200 8337 	bhi.w	800b708 <tcp_process+0x7a0>
 800b09a:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <tcp_process+0x138>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b2f1 	.word	0x0800b2f1
 800b0a8:	0800b469 	.word	0x0800b469
 800b0ac:	0800b493 	.word	0x0800b493
 800b0b0:	0800b5b7 	.word	0x0800b5b7
 800b0b4:	0800b469 	.word	0x0800b469
 800b0b8:	0800b643 	.word	0x0800b643
 800b0bc:	0800b6d3 	.word	0x0800b6d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b0c0:	4b4f      	ldr	r3, [pc, #316]	; (800b200 <tcp_process+0x298>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	f003 0310 	and.w	r3, r3, #16
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 80e4 	beq.w	800b296 <tcp_process+0x32e>
 800b0ce:	4b4c      	ldr	r3, [pc, #304]	; (800b200 <tcp_process+0x298>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	f003 0302 	and.w	r3, r3, #2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f000 80dd 	beq.w	800b296 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	4b48      	ldr	r3, [pc, #288]	; (800b204 <tcp_process+0x29c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	f040 80d5 	bne.w	800b296 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b0ec:	4b46      	ldr	r3, [pc, #280]	; (800b208 <tcp_process+0x2a0>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b0fe:	4b41      	ldr	r3, [pc, #260]	; (800b204 <tcp_process+0x29c>)
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b106:	4b44      	ldr	r3, [pc, #272]	; (800b218 <tcp_process+0x2b0>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	89db      	ldrh	r3, [r3, #14]
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b120:	4b39      	ldr	r3, [pc, #228]	; (800b208 <tcp_process+0x2a0>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	1e5a      	subs	r2, r3, #1
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2204      	movs	r2, #4
 800b12e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3304      	adds	r3, #4
 800b138:	4618      	mov	r0, r3
 800b13a:	f006 fc0d 	bl	8011958 <ip4_route>
 800b13e:	4601      	mov	r1, r0
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3304      	adds	r3, #4
 800b144:	461a      	mov	r2, r3
 800b146:	4620      	mov	r0, r4
 800b148:	f7ff f88c 	bl	800a264 <tcp_eff_send_mss_netif>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b158:	009a      	lsls	r2, r3, #2
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	f241 111c 	movw	r1, #4380	; 0x111c
 800b164:	428b      	cmp	r3, r1
 800b166:	bf38      	it	cc
 800b168:	460b      	movcc	r3, r1
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d204      	bcs.n	800b178 <tcp_process+0x210>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	b29b      	uxth	r3, r3
 800b176:	e00d      	b.n	800b194 <tcp_process+0x22c>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	f241 121c 	movw	r2, #4380	; 0x111c
 800b182:	4293      	cmp	r3, r2
 800b184:	d904      	bls.n	800b190 <tcp_process+0x228>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	e001      	b.n	800b194 <tcp_process+0x22c>
 800b190:	f241 131c 	movw	r3, #4380	; 0x111c
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d106      	bne.n	800b1b2 <tcp_process+0x24a>
 800b1a4:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <tcp_process+0x28c>)
 800b1a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b1aa:	491c      	ldr	r1, [pc, #112]	; (800b21c <tcp_process+0x2b4>)
 800b1ac:	4813      	ldr	r0, [pc, #76]	; (800b1fc <tcp_process+0x294>)
 800b1ae:	f007 fecb 	bl	8012f48 <iprintf>
        --pcb->snd_queuelen;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d12a      	bne.n	800b224 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <tcp_process+0x280>
 800b1da:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <tcp_process+0x28c>)
 800b1dc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b1e0:	490f      	ldr	r1, [pc, #60]	; (800b220 <tcp_process+0x2b8>)
 800b1e2:	4806      	ldr	r0, [pc, #24]	; (800b1fc <tcp_process+0x294>)
 800b1e4:	f007 feb0 	bl	8012f48 <iprintf>
          pcb->unsent = rseg->next;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	66da      	str	r2, [r3, #108]	; 0x6c
 800b1f0:	e01c      	b.n	800b22c <tcp_process+0x2c4>
 800b1f2:	bf00      	nop
 800b1f4:	08014fb4 	.word	0x08014fb4
 800b1f8:	080151ec 	.word	0x080151ec
 800b1fc:	08015000 	.word	0x08015000
 800b200:	20008810 	.word	0x20008810
 800b204:	20008808 	.word	0x20008808
 800b208:	20008804 	.word	0x20008804
 800b20c:	08015208 	.word	0x08015208
 800b210:	20008811 	.word	0x20008811
 800b214:	200087cc 	.word	0x200087cc
 800b218:	200087f4 	.word	0x200087f4
 800b21c:	08015228 	.word	0x08015228
 800b220:	08015240 	.word	0x08015240
        } else {
          pcb->unacked = rseg->next;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b22c:	69f8      	ldr	r0, [r7, #28]
 800b22e:	f7fe fd22 	bl	8009c76 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b236:	2b00      	cmp	r3, #0
 800b238:	d104      	bne.n	800b244 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b240:	861a      	strh	r2, [r3, #48]	; 0x30
 800b242:	e006      	b.n	800b252 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00a      	beq.n	800b272 <tcp_process+0x30a>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	6910      	ldr	r0, [r2, #16]
 800b266:	2200      	movs	r2, #0
 800b268:	6879      	ldr	r1, [r7, #4]
 800b26a:	4798      	blx	r3
 800b26c:	4603      	mov	r3, r0
 800b26e:	76bb      	strb	r3, [r7, #26]
 800b270:	e001      	b.n	800b276 <tcp_process+0x30e>
 800b272:	2300      	movs	r3, #0
 800b274:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b276:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b27a:	f113 0f0d 	cmn.w	r3, #13
 800b27e:	d102      	bne.n	800b286 <tcp_process+0x31e>
          return ERR_ABRT;
 800b280:	f06f 030c 	mvn.w	r3, #12
 800b284:	e250      	b.n	800b728 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8b5b      	ldrh	r3, [r3, #26]
 800b28a:	f043 0302 	orr.w	r3, r3, #2
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b294:	e23a      	b.n	800b70c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b296:	4b98      	ldr	r3, [pc, #608]	; (800b4f8 <tcp_process+0x590>)
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	f003 0310 	and.w	r3, r3, #16
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 8234 	beq.w	800b70c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2a4:	4b95      	ldr	r3, [pc, #596]	; (800b4fc <tcp_process+0x594>)
 800b2a6:	6819      	ldr	r1, [r3, #0]
 800b2a8:	4b95      	ldr	r3, [pc, #596]	; (800b500 <tcp_process+0x598>)
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4b95      	ldr	r3, [pc, #596]	; (800b504 <tcp_process+0x59c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2b4:	4b94      	ldr	r3, [pc, #592]	; (800b508 <tcp_process+0x5a0>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2b8:	885b      	ldrh	r3, [r3, #2]
 800b2ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2bc:	4a92      	ldr	r2, [pc, #584]	; (800b508 <tcp_process+0x5a0>)
 800b2be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2c0:	8812      	ldrh	r2, [r2, #0]
 800b2c2:	b292      	uxth	r2, r2
 800b2c4:	9202      	str	r2, [sp, #8]
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	4b90      	ldr	r3, [pc, #576]	; (800b50c <tcp_process+0x5a4>)
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	4b90      	ldr	r3, [pc, #576]	; (800b510 <tcp_process+0x5a8>)
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f002 fc85 	bl	800dbe0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2dc:	2b05      	cmp	r3, #5
 800b2de:	f200 8215 	bhi.w	800b70c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f002 fa51 	bl	800d790 <tcp_rexmit_rto>
      break;
 800b2ee:	e20d      	b.n	800b70c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b2f0:	4b81      	ldr	r3, [pc, #516]	; (800b4f8 <tcp_process+0x590>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80a1 	beq.w	800b440 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2fe:	4b7f      	ldr	r3, [pc, #508]	; (800b4fc <tcp_process+0x594>)
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	3b01      	subs	r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	db7e      	blt.n	800b40c <tcp_process+0x4a4>
 800b30e:	4b7b      	ldr	r3, [pc, #492]	; (800b4fc <tcp_process+0x594>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	dc77      	bgt.n	800b40c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2204      	movs	r2, #4
 800b320:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b32a:	23fa      	movs	r3, #250	; 0xfa
 800b32c:	76bb      	strb	r3, [r7, #26]
 800b32e:	e01d      	b.n	800b36c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <tcp_process+0x3e0>
 800b33a:	4b76      	ldr	r3, [pc, #472]	; (800b514 <tcp_process+0x5ac>)
 800b33c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b340:	4975      	ldr	r1, [pc, #468]	; (800b518 <tcp_process+0x5b0>)
 800b342:	4876      	ldr	r0, [pc, #472]	; (800b51c <tcp_process+0x5b4>)
 800b344:	f007 fe00 	bl	8012f48 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <tcp_process+0x400>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	6910      	ldr	r0, [r2, #16]
 800b35c:	2200      	movs	r2, #0
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	4798      	blx	r3
 800b362:	4603      	mov	r3, r0
 800b364:	76bb      	strb	r3, [r7, #26]
 800b366:	e001      	b.n	800b36c <tcp_process+0x404>
 800b368:	23f0      	movs	r3, #240	; 0xf0
 800b36a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b36c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00a      	beq.n	800b38a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b374:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b378:	f113 0f0d 	cmn.w	r3, #13
 800b37c:	d002      	beq.n	800b384 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fd ff8e 	bl	80092a0 <tcp_abort>
            }
            return ERR_ABRT;
 800b384:	f06f 030c 	mvn.w	r3, #12
 800b388:	e1ce      	b.n	800b728 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fae0 	bl	800b950 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b390:	4b63      	ldr	r3, [pc, #396]	; (800b520 <tcp_process+0x5b8>)
 800b392:	881b      	ldrh	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d005      	beq.n	800b3a4 <tcp_process+0x43c>
            recv_acked--;
 800b398:	4b61      	ldr	r3, [pc, #388]	; (800b520 <tcp_process+0x5b8>)
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	4b5f      	ldr	r3, [pc, #380]	; (800b520 <tcp_process+0x5b8>)
 800b3a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3a8:	009a      	lsls	r2, r3, #2
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3ae:	005b      	lsls	r3, r3, #1
 800b3b0:	f241 111c 	movw	r1, #4380	; 0x111c
 800b3b4:	428b      	cmp	r3, r1
 800b3b6:	bf38      	it	cc
 800b3b8:	460b      	movcc	r3, r1
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d204      	bcs.n	800b3c8 <tcp_process+0x460>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	e00d      	b.n	800b3e4 <tcp_process+0x47c>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d904      	bls.n	800b3e0 <tcp_process+0x478>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	e001      	b.n	800b3e4 <tcp_process+0x47c>
 800b3e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b3ea:	4b4e      	ldr	r3, [pc, #312]	; (800b524 <tcp_process+0x5bc>)
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f003 0320 	and.w	r3, r3, #32
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d037      	beq.n	800b466 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	8b5b      	ldrh	r3, [r3, #26]
 800b3fa:	f043 0302 	orr.w	r3, r3, #2
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2207      	movs	r2, #7
 800b408:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b40a:	e02c      	b.n	800b466 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b40c:	4b3b      	ldr	r3, [pc, #236]	; (800b4fc <tcp_process+0x594>)
 800b40e:	6819      	ldr	r1, [r3, #0]
 800b410:	4b3b      	ldr	r3, [pc, #236]	; (800b500 <tcp_process+0x598>)
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	461a      	mov	r2, r3
 800b416:	4b3b      	ldr	r3, [pc, #236]	; (800b504 <tcp_process+0x59c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b41c:	4b3a      	ldr	r3, [pc, #232]	; (800b508 <tcp_process+0x5a0>)
 800b41e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b420:	885b      	ldrh	r3, [r3, #2]
 800b422:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b424:	4a38      	ldr	r2, [pc, #224]	; (800b508 <tcp_process+0x5a0>)
 800b426:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b428:	8812      	ldrh	r2, [r2, #0]
 800b42a:	b292      	uxth	r2, r2
 800b42c:	9202      	str	r2, [sp, #8]
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	4b36      	ldr	r3, [pc, #216]	; (800b50c <tcp_process+0x5a4>)
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	4b36      	ldr	r3, [pc, #216]	; (800b510 <tcp_process+0x5a8>)
 800b436:	4602      	mov	r2, r0
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f002 fbd1 	bl	800dbe0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b43e:	e167      	b.n	800b710 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b440:	4b2d      	ldr	r3, [pc, #180]	; (800b4f8 <tcp_process+0x590>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	f003 0302 	and.w	r3, r3, #2
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 8161 	beq.w	800b710 <tcp_process+0x7a8>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	1e5a      	subs	r2, r3, #1
 800b454:	4b2b      	ldr	r3, [pc, #172]	; (800b504 <tcp_process+0x59c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	429a      	cmp	r2, r3
 800b45a:	f040 8159 	bne.w	800b710 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f002 f9b8 	bl	800d7d4 <tcp_rexmit>
      break;
 800b464:	e154      	b.n	800b710 <tcp_process+0x7a8>
 800b466:	e153      	b.n	800b710 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fa71 	bl	800b950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b46e:	4b2d      	ldr	r3, [pc, #180]	; (800b524 <tcp_process+0x5bc>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	f003 0320 	and.w	r3, r3, #32
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 814c 	beq.w	800b714 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	8b5b      	ldrh	r3, [r3, #26]
 800b480:	f043 0302 	orr.w	r3, r3, #2
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2207      	movs	r2, #7
 800b48e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b490:	e140      	b.n	800b714 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fa5c 	bl	800b950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b498:	4b22      	ldr	r3, [pc, #136]	; (800b524 <tcp_process+0x5bc>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	f003 0320 	and.w	r3, r3, #32
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d071      	beq.n	800b588 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b4a4:	4b14      	ldr	r3, [pc, #80]	; (800b4f8 <tcp_process+0x590>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	f003 0310 	and.w	r3, r3, #16
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d060      	beq.n	800b572 <tcp_process+0x60a>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4b4:	4b11      	ldr	r3, [pc, #68]	; (800b4fc <tcp_process+0x594>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d15a      	bne.n	800b572 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d156      	bne.n	800b572 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8b5b      	ldrh	r3, [r3, #26]
 800b4c8:	f043 0302 	orr.w	r3, r3, #2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7fe fdbc 	bl	800a050 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b4d8:	4b13      	ldr	r3, [pc, #76]	; (800b528 <tcp_process+0x5c0>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d105      	bne.n	800b4ee <tcp_process+0x586>
 800b4e2:	4b11      	ldr	r3, [pc, #68]	; (800b528 <tcp_process+0x5c0>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	4a0f      	ldr	r2, [pc, #60]	; (800b528 <tcp_process+0x5c0>)
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	e02e      	b.n	800b54c <tcp_process+0x5e4>
 800b4ee:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <tcp_process+0x5c0>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	e027      	b.n	800b546 <tcp_process+0x5de>
 800b4f6:	bf00      	nop
 800b4f8:	20008810 	.word	0x20008810
 800b4fc:	20008808 	.word	0x20008808
 800b500:	2000880e 	.word	0x2000880e
 800b504:	20008804 	.word	0x20008804
 800b508:	200087f4 	.word	0x200087f4
 800b50c:	2000524c 	.word	0x2000524c
 800b510:	20005250 	.word	0x20005250
 800b514:	08014fb4 	.word	0x08014fb4
 800b518:	08015254 	.word	0x08015254
 800b51c:	08015000 	.word	0x08015000
 800b520:	2000880c 	.word	0x2000880c
 800b524:	20008811 	.word	0x20008811
 800b528:	200087d8 	.word	0x200087d8
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	429a      	cmp	r2, r3
 800b534:	d104      	bne.n	800b540 <tcp_process+0x5d8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68da      	ldr	r2, [r3, #12]
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	60da      	str	r2, [r3, #12]
 800b53e:	e005      	b.n	800b54c <tcp_process+0x5e4>
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	617b      	str	r3, [r7, #20]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1ef      	bne.n	800b52c <tcp_process+0x5c4>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	60da      	str	r2, [r3, #12]
 800b552:	4b77      	ldr	r3, [pc, #476]	; (800b730 <tcp_process+0x7c8>)
 800b554:	2201      	movs	r2, #1
 800b556:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	220a      	movs	r2, #10
 800b55c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b55e:	4b75      	ldr	r3, [pc, #468]	; (800b734 <tcp_process+0x7cc>)
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60da      	str	r2, [r3, #12]
 800b566:	4a73      	ldr	r2, [pc, #460]	; (800b734 <tcp_process+0x7cc>)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	f002 fcfa 	bl	800df64 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b570:	e0d2      	b.n	800b718 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	8b5b      	ldrh	r3, [r3, #26]
 800b576:	f043 0302 	orr.w	r3, r3, #2
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2208      	movs	r2, #8
 800b584:	751a      	strb	r2, [r3, #20]
      break;
 800b586:	e0c7      	b.n	800b718 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b588:	4b6b      	ldr	r3, [pc, #428]	; (800b738 <tcp_process+0x7d0>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	f003 0310 	and.w	r3, r3, #16
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80c1 	beq.w	800b718 <tcp_process+0x7b0>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b59a:	4b68      	ldr	r3, [pc, #416]	; (800b73c <tcp_process+0x7d4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	f040 80ba 	bne.w	800b718 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f040 80b5 	bne.w	800b718 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2206      	movs	r2, #6
 800b5b2:	751a      	strb	r2, [r3, #20]
      break;
 800b5b4:	e0b0      	b.n	800b718 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f9ca 	bl	800b950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5bc:	4b60      	ldr	r3, [pc, #384]	; (800b740 <tcp_process+0x7d8>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 80a9 	beq.w	800b71c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8b5b      	ldrh	r3, [r3, #26]
 800b5ce:	f043 0302 	orr.w	r3, r3, #2
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7fe fd39 	bl	800a050 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b5de:	4b59      	ldr	r3, [pc, #356]	; (800b744 <tcp_process+0x7dc>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d105      	bne.n	800b5f4 <tcp_process+0x68c>
 800b5e8:	4b56      	ldr	r3, [pc, #344]	; (800b744 <tcp_process+0x7dc>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	4a55      	ldr	r2, [pc, #340]	; (800b744 <tcp_process+0x7dc>)
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	e013      	b.n	800b61c <tcp_process+0x6b4>
 800b5f4:	4b53      	ldr	r3, [pc, #332]	; (800b744 <tcp_process+0x7dc>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	613b      	str	r3, [r7, #16]
 800b5fa:	e00c      	b.n	800b616 <tcp_process+0x6ae>
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d104      	bne.n	800b610 <tcp_process+0x6a8>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	60da      	str	r2, [r3, #12]
 800b60e:	e005      	b.n	800b61c <tcp_process+0x6b4>
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	613b      	str	r3, [r7, #16]
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1ef      	bne.n	800b5fc <tcp_process+0x694>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	60da      	str	r2, [r3, #12]
 800b622:	4b43      	ldr	r3, [pc, #268]	; (800b730 <tcp_process+0x7c8>)
 800b624:	2201      	movs	r2, #1
 800b626:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	220a      	movs	r2, #10
 800b62c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b62e:	4b41      	ldr	r3, [pc, #260]	; (800b734 <tcp_process+0x7cc>)
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	60da      	str	r2, [r3, #12]
 800b636:	4a3f      	ldr	r2, [pc, #252]	; (800b734 <tcp_process+0x7cc>)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	f002 fc92 	bl	800df64 <tcp_timer_needed>
      }
      break;
 800b640:	e06c      	b.n	800b71c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f984 	bl	800b950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b648:	4b3b      	ldr	r3, [pc, #236]	; (800b738 <tcp_process+0x7d0>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	f003 0310 	and.w	r3, r3, #16
 800b650:	2b00      	cmp	r3, #0
 800b652:	d065      	beq.n	800b720 <tcp_process+0x7b8>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b658:	4b38      	ldr	r3, [pc, #224]	; (800b73c <tcp_process+0x7d4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d15f      	bne.n	800b720 <tcp_process+0x7b8>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d15b      	bne.n	800b720 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7fe fcf1 	bl	800a050 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b66e:	4b35      	ldr	r3, [pc, #212]	; (800b744 <tcp_process+0x7dc>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	429a      	cmp	r2, r3
 800b676:	d105      	bne.n	800b684 <tcp_process+0x71c>
 800b678:	4b32      	ldr	r3, [pc, #200]	; (800b744 <tcp_process+0x7dc>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	4a31      	ldr	r2, [pc, #196]	; (800b744 <tcp_process+0x7dc>)
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	e013      	b.n	800b6ac <tcp_process+0x744>
 800b684:	4b2f      	ldr	r3, [pc, #188]	; (800b744 <tcp_process+0x7dc>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	e00c      	b.n	800b6a6 <tcp_process+0x73e>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d104      	bne.n	800b6a0 <tcp_process+0x738>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	60da      	str	r2, [r3, #12]
 800b69e:	e005      	b.n	800b6ac <tcp_process+0x744>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	60fb      	str	r3, [r7, #12]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1ef      	bne.n	800b68c <tcp_process+0x724>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	60da      	str	r2, [r3, #12]
 800b6b2:	4b1f      	ldr	r3, [pc, #124]	; (800b730 <tcp_process+0x7c8>)
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	220a      	movs	r2, #10
 800b6bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b6be:	4b1d      	ldr	r3, [pc, #116]	; (800b734 <tcp_process+0x7cc>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60da      	str	r2, [r3, #12]
 800b6c6:	4a1b      	ldr	r2, [pc, #108]	; (800b734 <tcp_process+0x7cc>)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	f002 fc4a 	bl	800df64 <tcp_timer_needed>
      }
      break;
 800b6d0:	e026      	b.n	800b720 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f93c 	bl	800b950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <tcp_process+0x7d0>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f003 0310 	and.w	r3, r3, #16
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01f      	beq.n	800b724 <tcp_process+0x7bc>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6e8:	4b14      	ldr	r3, [pc, #80]	; (800b73c <tcp_process+0x7d4>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d119      	bne.n	800b724 <tcp_process+0x7bc>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d115      	bne.n	800b724 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b6f8:	4b11      	ldr	r3, [pc, #68]	; (800b740 <tcp_process+0x7d8>)
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	f043 0310 	orr.w	r3, r3, #16
 800b700:	b2da      	uxtb	r2, r3
 800b702:	4b0f      	ldr	r3, [pc, #60]	; (800b740 <tcp_process+0x7d8>)
 800b704:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b706:	e00d      	b.n	800b724 <tcp_process+0x7bc>
    default:
      break;
 800b708:	bf00      	nop
 800b70a:	e00c      	b.n	800b726 <tcp_process+0x7be>
      break;
 800b70c:	bf00      	nop
 800b70e:	e00a      	b.n	800b726 <tcp_process+0x7be>
      break;
 800b710:	bf00      	nop
 800b712:	e008      	b.n	800b726 <tcp_process+0x7be>
      break;
 800b714:	bf00      	nop
 800b716:	e006      	b.n	800b726 <tcp_process+0x7be>
      break;
 800b718:	bf00      	nop
 800b71a:	e004      	b.n	800b726 <tcp_process+0x7be>
      break;
 800b71c:	bf00      	nop
 800b71e:	e002      	b.n	800b726 <tcp_process+0x7be>
      break;
 800b720:	bf00      	nop
 800b722:	e000      	b.n	800b726 <tcp_process+0x7be>
      break;
 800b724:	bf00      	nop
  }
  return ERR_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3724      	adds	r7, #36	; 0x24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd90      	pop	{r4, r7, pc}
 800b730:	200087e0 	.word	0x200087e0
 800b734:	200087dc 	.word	0x200087dc
 800b738:	20008810 	.word	0x20008810
 800b73c:	20008808 	.word	0x20008808
 800b740:	20008811 	.word	0x20008811
 800b744:	200087d8 	.word	0x200087d8

0800b748 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b748:	b590      	push	{r4, r7, lr}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d106      	bne.n	800b766 <tcp_oos_insert_segment+0x1e>
 800b758:	4b3b      	ldr	r3, [pc, #236]	; (800b848 <tcp_oos_insert_segment+0x100>)
 800b75a:	f240 421f 	movw	r2, #1055	; 0x41f
 800b75e:	493b      	ldr	r1, [pc, #236]	; (800b84c <tcp_oos_insert_segment+0x104>)
 800b760:	483b      	ldr	r0, [pc, #236]	; (800b850 <tcp_oos_insert_segment+0x108>)
 800b762:	f007 fbf1 	bl	8012f48 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	899b      	ldrh	r3, [r3, #12]
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fb fd63 	bl	800723a <lwip_htons>
 800b774:	4603      	mov	r3, r0
 800b776:	b2db      	uxtb	r3, r3
 800b778:	f003 0301 	and.w	r3, r3, #1
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d028      	beq.n	800b7d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b780:	6838      	ldr	r0, [r7, #0]
 800b782:	f7fe fa63 	bl	8009c4c <tcp_segs_free>
    next = NULL;
 800b786:	2300      	movs	r3, #0
 800b788:	603b      	str	r3, [r7, #0]
 800b78a:	e056      	b.n	800b83a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	899b      	ldrh	r3, [r3, #12]
 800b792:	b29b      	uxth	r3, r3
 800b794:	4618      	mov	r0, r3
 800b796:	f7fb fd50 	bl	800723a <lwip_htons>
 800b79a:	4603      	mov	r3, r0
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	899b      	ldrh	r3, [r3, #12]
 800b7ac:	b29c      	uxth	r4, r3
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f7fb fd43 	bl	800723a <lwip_htons>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	4322      	orrs	r2, r4
 800b7be:	b292      	uxth	r2, r2
 800b7c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f7fe fa52 	bl	8009c76 <tcp_seg_free>
    while (next &&
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00e      	beq.n	800b7f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	891b      	ldrh	r3, [r3, #8]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4b1d      	ldr	r3, [pc, #116]	; (800b854 <tcp_oos_insert_segment+0x10c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	441a      	add	r2, r3
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	8909      	ldrh	r1, [r1, #8]
 800b7ee:	440b      	add	r3, r1
 800b7f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	daca      	bge.n	800b78c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01e      	beq.n	800b83a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	891b      	ldrh	r3, [r3, #8]
 800b800:	461a      	mov	r2, r3
 800b802:	4b14      	ldr	r3, [pc, #80]	; (800b854 <tcp_oos_insert_segment+0x10c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	441a      	add	r2, r3
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b810:	2b00      	cmp	r3, #0
 800b812:	dd12      	ble.n	800b83a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <tcp_oos_insert_segment+0x10c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	b29b      	uxth	r3, r3
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	b29a      	uxth	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	891b      	ldrh	r3, [r3, #8]
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f7fc fe15 	bl	8008464 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	683a      	ldr	r2, [r7, #0]
 800b83e:	601a      	str	r2, [r3, #0]
}
 800b840:	bf00      	nop
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	bd90      	pop	{r4, r7, pc}
 800b848:	08014fb4 	.word	0x08014fb4
 800b84c:	08015274 	.word	0x08015274
 800b850:	08015000 	.word	0x08015000
 800b854:	20008804 	.word	0x20008804

0800b858 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b858:	b5b0      	push	{r4, r5, r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
 800b864:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b866:	e03e      	b.n	800b8e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	4618      	mov	r0, r3
 800b878:	f7fd f802 	bl	8008880 <pbuf_clen>
 800b87c:	4603      	mov	r3, r0
 800b87e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b886:	8a7a      	ldrh	r2, [r7, #18]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d906      	bls.n	800b89a <tcp_free_acked_segments+0x42>
 800b88c:	4b2a      	ldr	r3, [pc, #168]	; (800b938 <tcp_free_acked_segments+0xe0>)
 800b88e:	f240 4257 	movw	r2, #1111	; 0x457
 800b892:	492a      	ldr	r1, [pc, #168]	; (800b93c <tcp_free_acked_segments+0xe4>)
 800b894:	482a      	ldr	r0, [pc, #168]	; (800b940 <tcp_free_acked_segments+0xe8>)
 800b896:	f007 fb57 	bl	8012f48 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b8a0:	8a7b      	ldrh	r3, [r7, #18]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	891a      	ldrh	r2, [r3, #8]
 800b8b0:	4b24      	ldr	r3, [pc, #144]	; (800b944 <tcp_free_acked_segments+0xec>)
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	4b22      	ldr	r3, [pc, #136]	; (800b944 <tcp_free_acked_segments+0xec>)
 800b8ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b8bc:	6978      	ldr	r0, [r7, #20]
 800b8be:	f7fe f9da 	bl	8009c76 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00c      	beq.n	800b8e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <tcp_free_acked_segments+0x8e>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d106      	bne.n	800b8e6 <tcp_free_acked_segments+0x8e>
 800b8d8:	4b17      	ldr	r3, [pc, #92]	; (800b938 <tcp_free_acked_segments+0xe0>)
 800b8da:	f240 4261 	movw	r2, #1121	; 0x461
 800b8de:	491a      	ldr	r1, [pc, #104]	; (800b948 <tcp_free_acked_segments+0xf0>)
 800b8e0:	4817      	ldr	r0, [pc, #92]	; (800b940 <tcp_free_acked_segments+0xe8>)
 800b8e2:	f007 fb31 	bl	8012f48 <iprintf>
  while (seg_list != NULL &&
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d020      	beq.n	800b92e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fb fcb6 	bl	8007264 <lwip_htonl>
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	891b      	ldrh	r3, [r3, #8]
 800b8fe:	461d      	mov	r5, r3
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	899b      	ldrh	r3, [r3, #12]
 800b906:	b29b      	uxth	r3, r3
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fb fc96 	bl	800723a <lwip_htons>
 800b90e:	4603      	mov	r3, r0
 800b910:	b2db      	uxtb	r3, r3
 800b912:	f003 0303 	and.w	r3, r3, #3
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <tcp_free_acked_segments+0xc6>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e000      	b.n	800b920 <tcp_free_acked_segments+0xc8>
 800b91e:	2300      	movs	r3, #0
 800b920:	442b      	add	r3, r5
 800b922:	18e2      	adds	r2, r4, r3
 800b924:	4b09      	ldr	r3, [pc, #36]	; (800b94c <tcp_free_acked_segments+0xf4>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	dd9c      	ble.n	800b868 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b92e:	68bb      	ldr	r3, [r7, #8]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bdb0      	pop	{r4, r5, r7, pc}
 800b938:	08014fb4 	.word	0x08014fb4
 800b93c:	0801529c 	.word	0x0801529c
 800b940:	08015000 	.word	0x08015000
 800b944:	2000880c 	.word	0x2000880c
 800b948:	080152c4 	.word	0x080152c4
 800b94c:	20008808 	.word	0x20008808

0800b950 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b950:	b5b0      	push	{r4, r5, r7, lr}
 800b952:	b094      	sub	sp, #80	; 0x50
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <tcp_receive+0x20>
 800b962:	4b91      	ldr	r3, [pc, #580]	; (800bba8 <tcp_receive+0x258>)
 800b964:	f240 427b 	movw	r2, #1147	; 0x47b
 800b968:	4990      	ldr	r1, [pc, #576]	; (800bbac <tcp_receive+0x25c>)
 800b96a:	4891      	ldr	r0, [pc, #580]	; (800bbb0 <tcp_receive+0x260>)
 800b96c:	f007 faec 	bl	8012f48 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	7d1b      	ldrb	r3, [r3, #20]
 800b974:	2b03      	cmp	r3, #3
 800b976:	d806      	bhi.n	800b986 <tcp_receive+0x36>
 800b978:	4b8b      	ldr	r3, [pc, #556]	; (800bba8 <tcp_receive+0x258>)
 800b97a:	f240 427c 	movw	r2, #1148	; 0x47c
 800b97e:	498d      	ldr	r1, [pc, #564]	; (800bbb4 <tcp_receive+0x264>)
 800b980:	488b      	ldr	r0, [pc, #556]	; (800bbb0 <tcp_receive+0x260>)
 800b982:	f007 fae1 	bl	8012f48 <iprintf>

  if (flags & TCP_ACK) {
 800b986:	4b8c      	ldr	r3, [pc, #560]	; (800bbb8 <tcp_receive+0x268>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	f003 0310 	and.w	r3, r3, #16
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 8264 	beq.w	800be5c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b99a:	461a      	mov	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a0:	4413      	add	r3, r2
 800b9a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9a8:	4b84      	ldr	r3, [pc, #528]	; (800bbbc <tcp_receive+0x26c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	db1b      	blt.n	800b9ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9b6:	4b81      	ldr	r3, [pc, #516]	; (800bbbc <tcp_receive+0x26c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d106      	bne.n	800b9cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9c2:	4b7f      	ldr	r3, [pc, #508]	; (800bbc0 <tcp_receive+0x270>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	db0e      	blt.n	800b9ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9d0:	4b7b      	ldr	r3, [pc, #492]	; (800bbc0 <tcp_receive+0x270>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d125      	bne.n	800ba24 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b9d8:	4b7a      	ldr	r3, [pc, #488]	; (800bbc4 <tcp_receive+0x274>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	89db      	ldrh	r3, [r3, #14]
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d91c      	bls.n	800ba24 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b9ea:	4b76      	ldr	r3, [pc, #472]	; (800bbc4 <tcp_receive+0x274>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	89db      	ldrh	r3, [r3, #14]
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d205      	bcs.n	800ba14 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ba14:	4b69      	ldr	r3, [pc, #420]	; (800bbbc <tcp_receive+0x26c>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ba1c:	4b68      	ldr	r3, [pc, #416]	; (800bbc0 <tcp_receive+0x270>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ba24:	4b66      	ldr	r3, [pc, #408]	; (800bbc0 <tcp_receive+0x270>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	dc58      	bgt.n	800bae4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ba32:	4b65      	ldr	r3, [pc, #404]	; (800bbc8 <tcp_receive+0x278>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d14b      	bne.n	800bad2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ba44:	4413      	add	r3, r2
 800ba46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d142      	bne.n	800bad2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	db3d      	blt.n	800bad2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba5a:	4b59      	ldr	r3, [pc, #356]	; (800bbc0 <tcp_receive+0x270>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d137      	bne.n	800bad2 <tcp_receive+0x182>
              found_dupack = 1;
 800ba62:	2301      	movs	r3, #1
 800ba64:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba6c:	2bff      	cmp	r3, #255	; 0xff
 800ba6e:	d007      	beq.n	800ba80 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba76:	3301      	adds	r3, #1
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba86:	2b03      	cmp	r3, #3
 800ba88:	d91b      	bls.n	800bac2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba94:	4413      	add	r3, r2
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d30a      	bcc.n	800bab8 <tcp_receive+0x168>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baac:	4413      	add	r3, r2
 800baae:	b29a      	uxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bab6:	e004      	b.n	800bac2 <tcp_receive+0x172>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800babe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d902      	bls.n	800bad2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f001 feed 	bl	800d8ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f040 8161 	bne.w	800bd9c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bae2:	e15b      	b.n	800bd9c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bae4:	4b36      	ldr	r3, [pc, #216]	; (800bbc0 <tcp_receive+0x270>)
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f2c0 814e 	blt.w	800bd92 <tcp_receive+0x442>
 800baf6:	4b32      	ldr	r3, [pc, #200]	; (800bbc0 <tcp_receive+0x270>)
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f300 8146 	bgt.w	800bd92 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8b5b      	ldrh	r3, [r3, #26]
 800bb0a:	f003 0304 	and.w	r3, r3, #4
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d010      	beq.n	800bb34 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	8b5b      	ldrh	r3, [r3, #26]
 800bb16:	f023 0304 	bic.w	r3, r3, #4
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb42:	10db      	asrs	r3, r3, #3
 800bb44:	b21b      	sxth	r3, r3
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	4413      	add	r3, r2
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	b21a      	sxth	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bb5c:	4b18      	ldr	r3, [pc, #96]	; (800bbc0 <tcp_receive+0x270>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bb74:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <tcp_receive+0x270>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7d1b      	ldrb	r3, [r3, #20]
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	f240 8097 	bls.w	800bcb4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d245      	bcs.n	800bc22 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	8b5b      	ldrh	r3, [r3, #26]
 800bb9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d014      	beq.n	800bbcc <tcp_receive+0x27c>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e013      	b.n	800bbce <tcp_receive+0x27e>
 800bba6:	bf00      	nop
 800bba8:	08014fb4 	.word	0x08014fb4
 800bbac:	080152e4 	.word	0x080152e4
 800bbb0:	08015000 	.word	0x08015000
 800bbb4:	08015300 	.word	0x08015300
 800bbb8:	20008810 	.word	0x20008810
 800bbbc:	20008804 	.word	0x20008804
 800bbc0:	20008808 	.word	0x20008808
 800bbc4:	200087f4 	.word	0x200087f4
 800bbc8:	2000880e 	.word	0x2000880e
 800bbcc:	2302      	movs	r3, #2
 800bbce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bbd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbdc:	fb12 f303 	smulbb	r3, r2, r3
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	bf28      	it	cs
 800bbe8:	4613      	movcs	r3, r2
 800bbea:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bbf4:	4413      	add	r3, r2
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d309      	bcc.n	800bc16 <tcp_receive+0x2c6>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bc0a:	4413      	add	r3, r2
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc14:	e04e      	b.n	800bcb4 <tcp_receive+0x364>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc20:	e048      	b.n	800bcb4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc2a:	4413      	add	r3, r2
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d309      	bcc.n	800bc4c <tcp_receive+0x2fc>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc40:	4413      	add	r3, r2
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc4a:	e004      	b.n	800bc56 <tcp_receive+0x306>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d326      	bcc.n	800bcb4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc86:	4413      	add	r3, r2
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d30a      	bcc.n	800bcaa <tcp_receive+0x35a>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc9e:	4413      	add	r3, r2
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bca8:	e004      	b.n	800bcb4 <tcp_receive+0x364>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcbc:	4a98      	ldr	r2, [pc, #608]	; (800bf20 <tcp_receive+0x5d0>)
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff fdca 	bl	800b858 <tcp_free_acked_segments>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd2:	4a94      	ldr	r2, [pc, #592]	; (800bf24 <tcp_receive+0x5d4>)
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff fdbf 	bl	800b858 <tcp_free_acked_segments>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d104      	bne.n	800bcf2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcee:	861a      	strh	r2, [r3, #48]	; 0x30
 800bcf0:	e002      	b.n	800bcf8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d103      	bne.n	800bd0e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bd14:	4b84      	ldr	r3, [pc, #528]	; (800bf28 <tcp_receive+0x5d8>)
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	4413      	add	r3, r2
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	8b5b      	ldrh	r3, [r3, #26]
 800bd26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d035      	beq.n	800bd9a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d118      	bne.n	800bd68 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00c      	beq.n	800bd58 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fb fa8a 	bl	8007264 <lwip_htonl>
 800bd50:	4603      	mov	r3, r0
 800bd52:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	dc20      	bgt.n	800bd9a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	8b5b      	ldrh	r3, [r3, #26]
 800bd5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd66:	e018      	b.n	800bd9a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fb fa75 	bl	8007264 <lwip_htonl>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	1ae3      	subs	r3, r4, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	dc0b      	bgt.n	800bd9a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	8b5b      	ldrh	r3, [r3, #26]
 800bd86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd90:	e003      	b.n	800bd9a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f001 ff76 	bl	800dc84 <tcp_send_empty_ack>
 800bd98:	e000      	b.n	800bd9c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd9a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d05b      	beq.n	800be5c <tcp_receive+0x50c>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bda8:	4b60      	ldr	r3, [pc, #384]	; (800bf2c <tcp_receive+0x5dc>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	da54      	bge.n	800be5c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bdb2:	4b5f      	ldr	r3, [pc, #380]	; (800bf30 <tcp_receive+0x5e0>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bdc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bdd0:	10db      	asrs	r3, r3, #3
 800bdd2:	b21b      	sxth	r3, r3
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bdea:	4413      	add	r3, r2
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	b21a      	sxth	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bdf4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	da05      	bge.n	800be08 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bdfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be00:	425b      	negs	r3, r3
 800be02:	b29b      	uxth	r3, r3
 800be04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800be08:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be12:	109b      	asrs	r3, r3, #2
 800be14:	b21b      	sxth	r3, r3
 800be16:	b29b      	uxth	r3, r3
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be26:	b29a      	uxth	r2, r3
 800be28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be2c:	4413      	add	r3, r2
 800be2e:	b29b      	uxth	r3, r3
 800be30:	b21a      	sxth	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800be3c:	10db      	asrs	r3, r3, #3
 800be3e:	b21b      	sxth	r3, r3
 800be40:	b29a      	uxth	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800be48:	b29b      	uxth	r3, r3
 800be4a:	4413      	add	r3, r2
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	b21a      	sxth	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800be5c:	4b35      	ldr	r3, [pc, #212]	; (800bf34 <tcp_receive+0x5e4>)
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 84e2 	beq.w	800c82a <tcp_receive+0xeda>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	7d1b      	ldrb	r3, [r3, #20]
 800be6a:	2b06      	cmp	r3, #6
 800be6c:	f200 84dd 	bhi.w	800c82a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be74:	4b30      	ldr	r3, [pc, #192]	; (800bf38 <tcp_receive+0x5e8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	3b01      	subs	r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f2c0 808f 	blt.w	800bfa0 <tcp_receive+0x650>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be86:	4b2b      	ldr	r3, [pc, #172]	; (800bf34 <tcp_receive+0x5e4>)
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	4619      	mov	r1, r3
 800be8c:	4b2a      	ldr	r3, [pc, #168]	; (800bf38 <tcp_receive+0x5e8>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	440b      	add	r3, r1
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	3301      	adds	r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	f300 8082 	bgt.w	800bfa0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800be9c:	4b27      	ldr	r3, [pc, #156]	; (800bf3c <tcp_receive+0x5ec>)
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <tcp_receive+0x5e8>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800beae:	4b23      	ldr	r3, [pc, #140]	; (800bf3c <tcp_receive+0x5ec>)
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d106      	bne.n	800bec4 <tcp_receive+0x574>
 800beb6:	4b22      	ldr	r3, [pc, #136]	; (800bf40 <tcp_receive+0x5f0>)
 800beb8:	f240 5294 	movw	r2, #1428	; 0x594
 800bebc:	4921      	ldr	r1, [pc, #132]	; (800bf44 <tcp_receive+0x5f4>)
 800bebe:	4822      	ldr	r0, [pc, #136]	; (800bf48 <tcp_receive+0x5f8>)
 800bec0:	f007 f842 	bl	8012f48 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800beca:	4293      	cmp	r3, r2
 800becc:	d906      	bls.n	800bedc <tcp_receive+0x58c>
 800bece:	4b1c      	ldr	r3, [pc, #112]	; (800bf40 <tcp_receive+0x5f0>)
 800bed0:	f240 5295 	movw	r2, #1429	; 0x595
 800bed4:	491d      	ldr	r1, [pc, #116]	; (800bf4c <tcp_receive+0x5fc>)
 800bed6:	481c      	ldr	r0, [pc, #112]	; (800bf48 <tcp_receive+0x5f8>)
 800bed8:	f007 f836 	bl	8012f48 <iprintf>
      off = (u16_t)off32;
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bee2:	4b16      	ldr	r3, [pc, #88]	; (800bf3c <tcp_receive+0x5ec>)
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	891b      	ldrh	r3, [r3, #8]
 800bee8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800beec:	429a      	cmp	r2, r3
 800beee:	d906      	bls.n	800befe <tcp_receive+0x5ae>
 800bef0:	4b13      	ldr	r3, [pc, #76]	; (800bf40 <tcp_receive+0x5f0>)
 800bef2:	f240 5297 	movw	r2, #1431	; 0x597
 800bef6:	4916      	ldr	r1, [pc, #88]	; (800bf50 <tcp_receive+0x600>)
 800bef8:	4813      	ldr	r0, [pc, #76]	; (800bf48 <tcp_receive+0x5f8>)
 800befa:	f007 f825 	bl	8012f48 <iprintf>
      inseg.len -= off;
 800befe:	4b0f      	ldr	r3, [pc, #60]	; (800bf3c <tcp_receive+0x5ec>)
 800bf00:	891a      	ldrh	r2, [r3, #8]
 800bf02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	4b0c      	ldr	r3, [pc, #48]	; (800bf3c <tcp_receive+0x5ec>)
 800bf0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bf0e:	4b0b      	ldr	r3, [pc, #44]	; (800bf3c <tcp_receive+0x5ec>)
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	891a      	ldrh	r2, [r3, #8]
 800bf14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bf1c:	e02a      	b.n	800bf74 <tcp_receive+0x624>
 800bf1e:	bf00      	nop
 800bf20:	0801531c 	.word	0x0801531c
 800bf24:	08015324 	.word	0x08015324
 800bf28:	2000880c 	.word	0x2000880c
 800bf2c:	20008808 	.word	0x20008808
 800bf30:	200087cc 	.word	0x200087cc
 800bf34:	2000880e 	.word	0x2000880e
 800bf38:	20008804 	.word	0x20008804
 800bf3c:	200087e4 	.word	0x200087e4
 800bf40:	08014fb4 	.word	0x08014fb4
 800bf44:	0801532c 	.word	0x0801532c
 800bf48:	08015000 	.word	0x08015000
 800bf4c:	0801533c 	.word	0x0801533c
 800bf50:	0801534c 	.word	0x0801534c
        off -= p->len;
 800bf54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf56:	895b      	ldrh	r3, [r3, #10]
 800bf58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bf62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bf68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bf6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800bf74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf76:	895b      	ldrh	r3, [r3, #10]
 800bf78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d8e9      	bhi.n	800bf54 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bf80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf84:	4619      	mov	r1, r3
 800bf86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bf88:	f7fc fb6c 	bl	8008664 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf90:	4a91      	ldr	r2, [pc, #580]	; (800c1d8 <tcp_receive+0x888>)
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	4b91      	ldr	r3, [pc, #580]	; (800c1dc <tcp_receive+0x88c>)
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	4a8f      	ldr	r2, [pc, #572]	; (800c1d8 <tcp_receive+0x888>)
 800bf9a:	6812      	ldr	r2, [r2, #0]
 800bf9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bf9e:	e00d      	b.n	800bfbc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bfa0:	4b8d      	ldr	r3, [pc, #564]	; (800c1d8 <tcp_receive+0x888>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	da06      	bge.n	800bfbc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	8b5b      	ldrh	r3, [r3, #26]
 800bfb2:	f043 0302 	orr.w	r3, r3, #2
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bfbc:	4b86      	ldr	r3, [pc, #536]	; (800c1d8 <tcp_receive+0x888>)
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f2c0 842a 	blt.w	800c820 <tcp_receive+0xed0>
 800bfcc:	4b82      	ldr	r3, [pc, #520]	; (800c1d8 <tcp_receive+0x888>)
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bfd8:	440b      	add	r3, r1
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	3301      	adds	r3, #1
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f300 841e 	bgt.w	800c820 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfe8:	4b7b      	ldr	r3, [pc, #492]	; (800c1d8 <tcp_receive+0x888>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	f040 829a 	bne.w	800c526 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bff2:	4b7a      	ldr	r3, [pc, #488]	; (800c1dc <tcp_receive+0x88c>)
 800bff4:	891c      	ldrh	r4, [r3, #8]
 800bff6:	4b79      	ldr	r3, [pc, #484]	; (800c1dc <tcp_receive+0x88c>)
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	899b      	ldrh	r3, [r3, #12]
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fb f91b 	bl	800723a <lwip_htons>
 800c004:	4603      	mov	r3, r0
 800c006:	b2db      	uxtb	r3, r3
 800c008:	f003 0303 	and.w	r3, r3, #3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <tcp_receive+0x6c4>
 800c010:	2301      	movs	r3, #1
 800c012:	e000      	b.n	800c016 <tcp_receive+0x6c6>
 800c014:	2300      	movs	r3, #0
 800c016:	4423      	add	r3, r4
 800c018:	b29a      	uxth	r2, r3
 800c01a:	4b71      	ldr	r3, [pc, #452]	; (800c1e0 <tcp_receive+0x890>)
 800c01c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c022:	4b6f      	ldr	r3, [pc, #444]	; (800c1e0 <tcp_receive+0x890>)
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	429a      	cmp	r2, r3
 800c028:	d275      	bcs.n	800c116 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c02a:	4b6c      	ldr	r3, [pc, #432]	; (800c1dc <tcp_receive+0x88c>)
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	899b      	ldrh	r3, [r3, #12]
 800c030:	b29b      	uxth	r3, r3
 800c032:	4618      	mov	r0, r3
 800c034:	f7fb f901 	bl	800723a <lwip_htons>
 800c038:	4603      	mov	r3, r0
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	2b00      	cmp	r3, #0
 800c042:	d01f      	beq.n	800c084 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c044:	4b65      	ldr	r3, [pc, #404]	; (800c1dc <tcp_receive+0x88c>)
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	899b      	ldrh	r3, [r3, #12]
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	b21b      	sxth	r3, r3
 800c04e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c052:	b21c      	sxth	r4, r3
 800c054:	4b61      	ldr	r3, [pc, #388]	; (800c1dc <tcp_receive+0x88c>)
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	899b      	ldrh	r3, [r3, #12]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fb f8ec 	bl	800723a <lwip_htons>
 800c062:	4603      	mov	r3, r0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	b29b      	uxth	r3, r3
 800c068:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fb f8e3 	bl	800723a <lwip_htons>
 800c074:	4603      	mov	r3, r0
 800c076:	b21b      	sxth	r3, r3
 800c078:	4323      	orrs	r3, r4
 800c07a:	b21a      	sxth	r2, r3
 800c07c:	4b57      	ldr	r3, [pc, #348]	; (800c1dc <tcp_receive+0x88c>)
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	b292      	uxth	r2, r2
 800c082:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c088:	4b54      	ldr	r3, [pc, #336]	; (800c1dc <tcp_receive+0x88c>)
 800c08a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c08c:	4b53      	ldr	r3, [pc, #332]	; (800c1dc <tcp_receive+0x88c>)
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	899b      	ldrh	r3, [r3, #12]
 800c092:	b29b      	uxth	r3, r3
 800c094:	4618      	mov	r0, r3
 800c096:	f7fb f8d0 	bl	800723a <lwip_htons>
 800c09a:	4603      	mov	r3, r0
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	f003 0302 	and.w	r3, r3, #2
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d005      	beq.n	800c0b2 <tcp_receive+0x762>
            inseg.len -= 1;
 800c0a6:	4b4d      	ldr	r3, [pc, #308]	; (800c1dc <tcp_receive+0x88c>)
 800c0a8:	891b      	ldrh	r3, [r3, #8]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	4b4b      	ldr	r3, [pc, #300]	; (800c1dc <tcp_receive+0x88c>)
 800c0b0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c0b2:	4b4a      	ldr	r3, [pc, #296]	; (800c1dc <tcp_receive+0x88c>)
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	4a49      	ldr	r2, [pc, #292]	; (800c1dc <tcp_receive+0x88c>)
 800c0b8:	8912      	ldrh	r2, [r2, #8]
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fc f9d1 	bl	8008464 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c0c2:	4b46      	ldr	r3, [pc, #280]	; (800c1dc <tcp_receive+0x88c>)
 800c0c4:	891c      	ldrh	r4, [r3, #8]
 800c0c6:	4b45      	ldr	r3, [pc, #276]	; (800c1dc <tcp_receive+0x88c>)
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	899b      	ldrh	r3, [r3, #12]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fb f8b3 	bl	800723a <lwip_htons>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	f003 0303 	and.w	r3, r3, #3
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <tcp_receive+0x794>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e000      	b.n	800c0e6 <tcp_receive+0x796>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4423      	add	r3, r4
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	4b3d      	ldr	r3, [pc, #244]	; (800c1e0 <tcp_receive+0x890>)
 800c0ec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c0ee:	4b3c      	ldr	r3, [pc, #240]	; (800c1e0 <tcp_receive+0x890>)
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4b38      	ldr	r3, [pc, #224]	; (800c1d8 <tcp_receive+0x888>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	441a      	add	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c102:	440b      	add	r3, r1
 800c104:	429a      	cmp	r2, r3
 800c106:	d006      	beq.n	800c116 <tcp_receive+0x7c6>
 800c108:	4b36      	ldr	r3, [pc, #216]	; (800c1e4 <tcp_receive+0x894>)
 800c10a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c10e:	4936      	ldr	r1, [pc, #216]	; (800c1e8 <tcp_receive+0x898>)
 800c110:	4836      	ldr	r0, [pc, #216]	; (800c1ec <tcp_receive+0x89c>)
 800c112:	f006 ff19 	bl	8012f48 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 80e7 	beq.w	800c2ee <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c120:	4b2e      	ldr	r3, [pc, #184]	; (800c1dc <tcp_receive+0x88c>)
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	899b      	ldrh	r3, [r3, #12]
 800c126:	b29b      	uxth	r3, r3
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fb f886 	bl	800723a <lwip_htons>
 800c12e:	4603      	mov	r3, r0
 800c130:	b2db      	uxtb	r3, r3
 800c132:	f003 0301 	and.w	r3, r3, #1
 800c136:	2b00      	cmp	r3, #0
 800c138:	d010      	beq.n	800c15c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c13a:	e00a      	b.n	800c152 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c140:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7fd fd92 	bl	8009c76 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1f0      	bne.n	800c13c <tcp_receive+0x7ec>
 800c15a:	e0c8      	b.n	800c2ee <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c162:	e052      	b.n	800c20a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fb f864 	bl	800723a <lwip_htons>
 800c172:	4603      	mov	r3, r0
 800c174:	b2db      	uxtb	r3, r3
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d03d      	beq.n	800c1fa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c17e:	4b17      	ldr	r3, [pc, #92]	; (800c1dc <tcp_receive+0x88c>)
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	899b      	ldrh	r3, [r3, #12]
 800c184:	b29b      	uxth	r3, r3
 800c186:	4618      	mov	r0, r3
 800c188:	f7fb f857 	bl	800723a <lwip_htons>
 800c18c:	4603      	mov	r3, r0
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c194:	2b00      	cmp	r3, #0
 800c196:	d130      	bne.n	800c1fa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c198:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <tcp_receive+0x88c>)
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	899b      	ldrh	r3, [r3, #12]
 800c19e:	b29c      	uxth	r4, r3
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	f7fb f84a 	bl	800723a <lwip_htons>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <tcp_receive+0x88c>)
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	4322      	orrs	r2, r4
 800c1b0:	b292      	uxth	r2, r2
 800c1b2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c1b4:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <tcp_receive+0x88c>)
 800c1b6:	891c      	ldrh	r4, [r3, #8]
 800c1b8:	4b08      	ldr	r3, [pc, #32]	; (800c1dc <tcp_receive+0x88c>)
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	899b      	ldrh	r3, [r3, #12]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fb f83a 	bl	800723a <lwip_htons>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	f003 0303 	and.w	r3, r3, #3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00e      	beq.n	800c1f0 <tcp_receive+0x8a0>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e00d      	b.n	800c1f2 <tcp_receive+0x8a2>
 800c1d6:	bf00      	nop
 800c1d8:	20008804 	.word	0x20008804
 800c1dc:	200087e4 	.word	0x200087e4
 800c1e0:	2000880e 	.word	0x2000880e
 800c1e4:	08014fb4 	.word	0x08014fb4
 800c1e8:	0801535c 	.word	0x0801535c
 800c1ec:	08015000 	.word	0x08015000
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4423      	add	r3, r4
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	4b98      	ldr	r3, [pc, #608]	; (800c458 <tcp_receive+0xb08>)
 800c1f8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c204:	6938      	ldr	r0, [r7, #16]
 800c206:	f7fd fd36 	bl	8009c76 <tcp_seg_free>
            while (next &&
 800c20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00e      	beq.n	800c22e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c210:	4b91      	ldr	r3, [pc, #580]	; (800c458 <tcp_receive+0xb08>)
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	461a      	mov	r2, r3
 800c216:	4b91      	ldr	r3, [pc, #580]	; (800c45c <tcp_receive+0xb0c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	441a      	add	r2, r3
 800c21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c224:	8909      	ldrh	r1, [r1, #8]
 800c226:	440b      	add	r3, r1
 800c228:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	da9a      	bge.n	800c164 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d059      	beq.n	800c2e8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c234:	4b88      	ldr	r3, [pc, #544]	; (800c458 <tcp_receive+0xb08>)
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	461a      	mov	r2, r3
 800c23a:	4b88      	ldr	r3, [pc, #544]	; (800c45c <tcp_receive+0xb0c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	441a      	add	r2, r3
 800c240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c248:	2b00      	cmp	r3, #0
 800c24a:	dd4d      	ble.n	800c2e8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	b29a      	uxth	r2, r3
 800c254:	4b81      	ldr	r3, [pc, #516]	; (800c45c <tcp_receive+0xb0c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	4b80      	ldr	r3, [pc, #512]	; (800c460 <tcp_receive+0xb10>)
 800c260:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c262:	4b7f      	ldr	r3, [pc, #508]	; (800c460 <tcp_receive+0xb10>)
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	899b      	ldrh	r3, [r3, #12]
 800c268:	b29b      	uxth	r3, r3
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fa ffe5 	bl	800723a <lwip_htons>
 800c270:	4603      	mov	r3, r0
 800c272:	b2db      	uxtb	r3, r3
 800c274:	f003 0302 	and.w	r3, r3, #2
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d005      	beq.n	800c288 <tcp_receive+0x938>
                inseg.len -= 1;
 800c27c:	4b78      	ldr	r3, [pc, #480]	; (800c460 <tcp_receive+0xb10>)
 800c27e:	891b      	ldrh	r3, [r3, #8]
 800c280:	3b01      	subs	r3, #1
 800c282:	b29a      	uxth	r2, r3
 800c284:	4b76      	ldr	r3, [pc, #472]	; (800c460 <tcp_receive+0xb10>)
 800c286:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c288:	4b75      	ldr	r3, [pc, #468]	; (800c460 <tcp_receive+0xb10>)
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	4a74      	ldr	r2, [pc, #464]	; (800c460 <tcp_receive+0xb10>)
 800c28e:	8912      	ldrh	r2, [r2, #8]
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f7fc f8e6 	bl	8008464 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c298:	4b71      	ldr	r3, [pc, #452]	; (800c460 <tcp_receive+0xb10>)
 800c29a:	891c      	ldrh	r4, [r3, #8]
 800c29c:	4b70      	ldr	r3, [pc, #448]	; (800c460 <tcp_receive+0xb10>)
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	899b      	ldrh	r3, [r3, #12]
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7fa ffc8 	bl	800723a <lwip_htons>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	f003 0303 	and.w	r3, r3, #3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <tcp_receive+0x96a>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <tcp_receive+0x96c>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	4423      	add	r3, r4
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	4b65      	ldr	r3, [pc, #404]	; (800c458 <tcp_receive+0xb08>)
 800c2c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c2c4:	4b64      	ldr	r3, [pc, #400]	; (800c458 <tcp_receive+0xb08>)
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4b64      	ldr	r3, [pc, #400]	; (800c45c <tcp_receive+0xb0c>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	441a      	add	r2, r3
 800c2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d006      	beq.n	800c2e8 <tcp_receive+0x998>
 800c2da:	4b62      	ldr	r3, [pc, #392]	; (800c464 <tcp_receive+0xb14>)
 800c2dc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c2e0:	4961      	ldr	r1, [pc, #388]	; (800c468 <tcp_receive+0xb18>)
 800c2e2:	4862      	ldr	r0, [pc, #392]	; (800c46c <tcp_receive+0xb1c>)
 800c2e4:	f006 fe30 	bl	8012f48 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2ec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c2ee:	4b5a      	ldr	r3, [pc, #360]	; (800c458 <tcp_receive+0xb08>)
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	4b59      	ldr	r3, [pc, #356]	; (800c45c <tcp_receive+0xb0c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	441a      	add	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c302:	4b55      	ldr	r3, [pc, #340]	; (800c458 <tcp_receive+0xb08>)
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	429a      	cmp	r2, r3
 800c308:	d206      	bcs.n	800c318 <tcp_receive+0x9c8>
 800c30a:	4b56      	ldr	r3, [pc, #344]	; (800c464 <tcp_receive+0xb14>)
 800c30c:	f240 6207 	movw	r2, #1543	; 0x607
 800c310:	4957      	ldr	r1, [pc, #348]	; (800c470 <tcp_receive+0xb20>)
 800c312:	4856      	ldr	r0, [pc, #344]	; (800c46c <tcp_receive+0xb1c>)
 800c314:	f006 fe18 	bl	8012f48 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c31c:	4b4e      	ldr	r3, [pc, #312]	; (800c458 <tcp_receive+0xb08>)
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7fc ffc5 	bl	80092b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c32e:	4b4c      	ldr	r3, [pc, #304]	; (800c460 <tcp_receive+0xb10>)
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	891b      	ldrh	r3, [r3, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d006      	beq.n	800c346 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c338:	4b49      	ldr	r3, [pc, #292]	; (800c460 <tcp_receive+0xb10>)
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	4a4d      	ldr	r2, [pc, #308]	; (800c474 <tcp_receive+0xb24>)
 800c33e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c340:	4b47      	ldr	r3, [pc, #284]	; (800c460 <tcp_receive+0xb10>)
 800c342:	2200      	movs	r2, #0
 800c344:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c346:	4b46      	ldr	r3, [pc, #280]	; (800c460 <tcp_receive+0xb10>)
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	899b      	ldrh	r3, [r3, #12]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fa ff73 	bl	800723a <lwip_htons>
 800c354:	4603      	mov	r3, r0
 800c356:	b2db      	uxtb	r3, r3
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 80b8 	beq.w	800c4d2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c362:	4b45      	ldr	r3, [pc, #276]	; (800c478 <tcp_receive+0xb28>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	f043 0320 	orr.w	r3, r3, #32
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	4b42      	ldr	r3, [pc, #264]	; (800c478 <tcp_receive+0xb28>)
 800c36e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c370:	e0af      	b.n	800c4d2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c376:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	4a36      	ldr	r2, [pc, #216]	; (800c45c <tcp_receive+0xb0c>)
 800c382:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	891b      	ldrh	r3, [r3, #8]
 800c388:	461c      	mov	r4, r3
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	899b      	ldrh	r3, [r3, #12]
 800c390:	b29b      	uxth	r3, r3
 800c392:	4618      	mov	r0, r3
 800c394:	f7fa ff51 	bl	800723a <lwip_htons>
 800c398:	4603      	mov	r3, r0
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d001      	beq.n	800c3a8 <tcp_receive+0xa58>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e000      	b.n	800c3aa <tcp_receive+0xa5a>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	191a      	adds	r2, r3, r4
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	441a      	add	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ba:	461c      	mov	r4, r3
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	891b      	ldrh	r3, [r3, #8]
 800c3c0:	461d      	mov	r5, r3
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	899b      	ldrh	r3, [r3, #12]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fa ff35 	bl	800723a <lwip_htons>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0303 	and.w	r3, r3, #3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <tcp_receive+0xa90>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e000      	b.n	800c3e2 <tcp_receive+0xa92>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	442b      	add	r3, r5
 800c3e4:	429c      	cmp	r4, r3
 800c3e6:	d206      	bcs.n	800c3f6 <tcp_receive+0xaa6>
 800c3e8:	4b1e      	ldr	r3, [pc, #120]	; (800c464 <tcp_receive+0xb14>)
 800c3ea:	f240 622b 	movw	r2, #1579	; 0x62b
 800c3ee:	4923      	ldr	r1, [pc, #140]	; (800c47c <tcp_receive+0xb2c>)
 800c3f0:	481e      	ldr	r0, [pc, #120]	; (800c46c <tcp_receive+0xb1c>)
 800c3f2:	f006 fda9 	bl	8012f48 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	891b      	ldrh	r3, [r3, #8]
 800c3fa:	461c      	mov	r4, r3
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	899b      	ldrh	r3, [r3, #12]
 800c402:	b29b      	uxth	r3, r3
 800c404:	4618      	mov	r0, r3
 800c406:	f7fa ff18 	bl	800723a <lwip_htons>
 800c40a:	4603      	mov	r3, r0
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	f003 0303 	and.w	r3, r3, #3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <tcp_receive+0xaca>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <tcp_receive+0xacc>
 800c41a:	2300      	movs	r3, #0
 800c41c:	1919      	adds	r1, r3, r4
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c422:	b28b      	uxth	r3, r1
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7fc ff43 	bl	80092b8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	891b      	ldrh	r3, [r3, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d028      	beq.n	800c48e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c43c:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <tcp_receive+0xb24>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d01d      	beq.n	800c480 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c444:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <tcp_receive+0xb24>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	4619      	mov	r1, r3
 800c44e:	4610      	mov	r0, r2
 800c450:	f7fc fa50 	bl	80088f4 <pbuf_cat>
 800c454:	e018      	b.n	800c488 <tcp_receive+0xb38>
 800c456:	bf00      	nop
 800c458:	2000880e 	.word	0x2000880e
 800c45c:	20008804 	.word	0x20008804
 800c460:	200087e4 	.word	0x200087e4
 800c464:	08014fb4 	.word	0x08014fb4
 800c468:	08015394 	.word	0x08015394
 800c46c:	08015000 	.word	0x08015000
 800c470:	080153d0 	.word	0x080153d0
 800c474:	20008814 	.word	0x20008814
 800c478:	20008811 	.word	0x20008811
 800c47c:	080153f0 	.word	0x080153f0
            } else {
              recv_data = cseg->p;
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	4a70      	ldr	r2, [pc, #448]	; (800c648 <tcp_receive+0xcf8>)
 800c486:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2200      	movs	r2, #0
 800c48c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	899b      	ldrh	r3, [r3, #12]
 800c494:	b29b      	uxth	r3, r3
 800c496:	4618      	mov	r0, r3
 800c498:	f7fa fecf 	bl	800723a <lwip_htons>
 800c49c:	4603      	mov	r3, r0
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	f003 0301 	and.w	r3, r3, #1
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00d      	beq.n	800c4c4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c4a8:	4b68      	ldr	r3, [pc, #416]	; (800c64c <tcp_receive+0xcfc>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	f043 0320 	orr.w	r3, r3, #32
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	4b66      	ldr	r3, [pc, #408]	; (800c64c <tcp_receive+0xcfc>)
 800c4b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	7d1b      	ldrb	r3, [r3, #20]
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	d102      	bne.n	800c4c4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c4cc:	68b8      	ldr	r0, [r7, #8]
 800c4ce:	f7fd fbd2 	bl	8009c76 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d008      	beq.n	800c4ec <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	f43f af43 	beq.w	800c372 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	8b5b      	ldrh	r3, [r3, #26]
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00e      	beq.n	800c516 <tcp_receive+0xbc6>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	8b5b      	ldrh	r3, [r3, #26]
 800c4fc:	f023 0301 	bic.w	r3, r3, #1
 800c500:	b29a      	uxth	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	835a      	strh	r2, [r3, #26]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	8b5b      	ldrh	r3, [r3, #26]
 800c50a:	f043 0302 	orr.w	r3, r3, #2
 800c50e:	b29a      	uxth	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c514:	e188      	b.n	800c828 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	8b5b      	ldrh	r3, [r3, #26]
 800c51a:	f043 0301 	orr.w	r3, r3, #1
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c524:	e180      	b.n	800c828 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d106      	bne.n	800c53c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c52e:	4848      	ldr	r0, [pc, #288]	; (800c650 <tcp_receive+0xd00>)
 800c530:	f7fd fbba 	bl	8009ca8 <tcp_seg_copy>
 800c534:	4602      	mov	r2, r0
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	675a      	str	r2, [r3, #116]	; 0x74
 800c53a:	e16d      	b.n	800c818 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c53c:	2300      	movs	r3, #0
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c544:	63bb      	str	r3, [r7, #56]	; 0x38
 800c546:	e157      	b.n	800c7f8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	4b41      	ldr	r3, [pc, #260]	; (800c654 <tcp_receive+0xd04>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	429a      	cmp	r2, r3
 800c554:	d11d      	bne.n	800c592 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c556:	4b3e      	ldr	r3, [pc, #248]	; (800c650 <tcp_receive+0xd00>)
 800c558:	891a      	ldrh	r2, [r3, #8]
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	891b      	ldrh	r3, [r3, #8]
 800c55e:	429a      	cmp	r2, r3
 800c560:	f240 814f 	bls.w	800c802 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c564:	483a      	ldr	r0, [pc, #232]	; (800c650 <tcp_receive+0xd00>)
 800c566:	f7fd fb9f 	bl	8009ca8 <tcp_seg_copy>
 800c56a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 8149 	beq.w	800c806 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <tcp_receive+0xc32>
                    prev->next = cseg;
 800c57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	e002      	b.n	800c588 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c58a:	6978      	ldr	r0, [r7, #20]
 800c58c:	f7ff f8dc 	bl	800b748 <tcp_oos_insert_segment>
                }
                break;
 800c590:	e139      	b.n	800c806 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c594:	2b00      	cmp	r3, #0
 800c596:	d117      	bne.n	800c5c8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c598:	4b2e      	ldr	r3, [pc, #184]	; (800c654 <tcp_receive+0xd04>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	da57      	bge.n	800c658 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c5a8:	4829      	ldr	r0, [pc, #164]	; (800c650 <tcp_receive+0xd00>)
 800c5aa:	f7fd fb7d 	bl	8009ca8 <tcp_seg_copy>
 800c5ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 8129 	beq.w	800c80a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	69ba      	ldr	r2, [r7, #24]
 800c5bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c5be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c5c0:	69b8      	ldr	r0, [r7, #24]
 800c5c2:	f7ff f8c1 	bl	800b748 <tcp_oos_insert_segment>
                  }
                  break;
 800c5c6:	e120      	b.n	800c80a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c5c8:	4b22      	ldr	r3, [pc, #136]	; (800c654 <tcp_receive+0xd04>)
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	db3e      	blt.n	800c658 <tcp_receive+0xd08>
 800c5da:	4b1e      	ldr	r3, [pc, #120]	; (800c654 <tcp_receive+0xd04>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	dc35      	bgt.n	800c658 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c5ec:	4818      	ldr	r0, [pc, #96]	; (800c650 <tcp_receive+0xd00>)
 800c5ee:	f7fd fb5b 	bl	8009ca8 <tcp_seg_copy>
 800c5f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 8109 	beq.w	800c80e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c604:	8912      	ldrh	r2, [r2, #8]
 800c606:	441a      	add	r2, r3
 800c608:	4b12      	ldr	r3, [pc, #72]	; (800c654 <tcp_receive+0xd04>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	dd12      	ble.n	800c638 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c612:	4b10      	ldr	r3, [pc, #64]	; (800c654 <tcp_receive+0xd04>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	b29a      	uxth	r2, r3
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	b29a      	uxth	r2, r3
 800c624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c626:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62e:	891b      	ldrh	r3, [r3, #8]
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f7fb ff16 	bl	8008464 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63a:	69fa      	ldr	r2, [r7, #28]
 800c63c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c63e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c640:	69f8      	ldr	r0, [r7, #28]
 800c642:	f7ff f881 	bl	800b748 <tcp_oos_insert_segment>
                  }
                  break;
 800c646:	e0e2      	b.n	800c80e <tcp_receive+0xebe>
 800c648:	20008814 	.word	0x20008814
 800c64c:	20008811 	.word	0x20008811
 800c650:	200087e4 	.word	0x200087e4
 800c654:	20008804 	.word	0x20008804
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f040 80c6 	bne.w	800c7f2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c666:	4b80      	ldr	r3, [pc, #512]	; (800c868 <tcp_receive+0xf18>)
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c672:	2b00      	cmp	r3, #0
 800c674:	f340 80bd 	ble.w	800c7f2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	899b      	ldrh	r3, [r3, #12]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	4618      	mov	r0, r3
 800c682:	f7fa fdda 	bl	800723a <lwip_htons>
 800c686:	4603      	mov	r3, r0
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 80bf 	bne.w	800c812 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c694:	4875      	ldr	r0, [pc, #468]	; (800c86c <tcp_receive+0xf1c>)
 800c696:	f7fd fb07 	bl	8009ca8 <tcp_seg_copy>
 800c69a:	4602      	mov	r2, r0
 800c69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 80b6 	beq.w	800c816 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6b2:	8912      	ldrh	r2, [r2, #8]
 800c6b4:	441a      	add	r2, r3
 800c6b6:	4b6c      	ldr	r3, [pc, #432]	; (800c868 <tcp_receive+0xf18>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	dd12      	ble.n	800c6e6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c6c0:	4b69      	ldr	r3, [pc, #420]	; (800c868 <tcp_receive+0xf18>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	891b      	ldrh	r3, [r3, #8]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	f7fb febf 	bl	8008464 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c6e6:	4b62      	ldr	r3, [pc, #392]	; (800c870 <tcp_receive+0xf20>)
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4b5e      	ldr	r3, [pc, #376]	; (800c868 <tcp_receive+0xf18>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	441a      	add	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	6879      	ldr	r1, [r7, #4]
 800c6f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6fa:	440b      	add	r3, r1
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f340 8089 	ble.w	800c816 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	899b      	ldrh	r3, [r3, #12]
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fa fd93 	bl	800723a <lwip_htons>
 800c714:	4603      	mov	r3, r0
 800c716:	b2db      	uxtb	r3, r3
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d022      	beq.n	800c766 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	899b      	ldrh	r3, [r3, #12]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	b21b      	sxth	r3, r3
 800c72c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c730:	b21c      	sxth	r4, r3
 800c732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	899b      	ldrh	r3, [r3, #12]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fa fd7c 	bl	800723a <lwip_htons>
 800c742:	4603      	mov	r3, r0
 800c744:	b2db      	uxtb	r3, r3
 800c746:	b29b      	uxth	r3, r3
 800c748:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fa fd73 	bl	800723a <lwip_htons>
 800c754:	4603      	mov	r3, r0
 800c756:	b21b      	sxth	r3, r3
 800c758:	4323      	orrs	r3, r4
 800c75a:	b21a      	sxth	r2, r3
 800c75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	b292      	uxth	r2, r2
 800c764:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c770:	4413      	add	r3, r2
 800c772:	b299      	uxth	r1, r3
 800c774:	4b3c      	ldr	r3, [pc, #240]	; (800c868 <tcp_receive+0xf18>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	b29a      	uxth	r2, r3
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	1a8a      	subs	r2, r1, r2
 800c780:	b292      	uxth	r2, r2
 800c782:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	891b      	ldrh	r3, [r3, #8]
 800c790:	4619      	mov	r1, r3
 800c792:	4610      	mov	r0, r2
 800c794:	f7fb fe66 	bl	8008464 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	891c      	ldrh	r4, [r3, #8]
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	899b      	ldrh	r3, [r3, #12]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fa fd46 	bl	800723a <lwip_htons>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <tcp_receive+0xe6e>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e000      	b.n	800c7c0 <tcp_receive+0xe70>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	4423      	add	r3, r4
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	4b2a      	ldr	r3, [pc, #168]	; (800c870 <tcp_receive+0xf20>)
 800c7c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c7c8:	4b29      	ldr	r3, [pc, #164]	; (800c870 <tcp_receive+0xf20>)
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	4b26      	ldr	r3, [pc, #152]	; (800c868 <tcp_receive+0xf18>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	441a      	add	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c7dc:	440b      	add	r3, r1
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d019      	beq.n	800c816 <tcp_receive+0xec6>
 800c7e2:	4b24      	ldr	r3, [pc, #144]	; (800c874 <tcp_receive+0xf24>)
 800c7e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c7e8:	4923      	ldr	r1, [pc, #140]	; (800c878 <tcp_receive+0xf28>)
 800c7ea:	4824      	ldr	r0, [pc, #144]	; (800c87c <tcp_receive+0xf2c>)
 800c7ec:	f006 fbac 	bl	8012f48 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c7f0:	e011      	b.n	800c816 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f47f aea4 	bne.w	800c548 <tcp_receive+0xbf8>
 800c800:	e00a      	b.n	800c818 <tcp_receive+0xec8>
                break;
 800c802:	bf00      	nop
 800c804:	e008      	b.n	800c818 <tcp_receive+0xec8>
                break;
 800c806:	bf00      	nop
 800c808:	e006      	b.n	800c818 <tcp_receive+0xec8>
                  break;
 800c80a:	bf00      	nop
 800c80c:	e004      	b.n	800c818 <tcp_receive+0xec8>
                  break;
 800c80e:	bf00      	nop
 800c810:	e002      	b.n	800c818 <tcp_receive+0xec8>
                  break;
 800c812:	bf00      	nop
 800c814:	e000      	b.n	800c818 <tcp_receive+0xec8>
                break;
 800c816:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f001 fa33 	bl	800dc84 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c81e:	e003      	b.n	800c828 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f001 fa2f 	bl	800dc84 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c826:	e01a      	b.n	800c85e <tcp_receive+0xf0e>
 800c828:	e019      	b.n	800c85e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c82a:	4b0f      	ldr	r3, [pc, #60]	; (800c868 <tcp_receive+0xf18>)
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	db0a      	blt.n	800c84e <tcp_receive+0xefe>
 800c838:	4b0b      	ldr	r3, [pc, #44]	; (800c868 <tcp_receive+0xf18>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c844:	440b      	add	r3, r1
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	3301      	adds	r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	dd07      	ble.n	800c85e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	8b5b      	ldrh	r3, [r3, #26]
 800c852:	f043 0302 	orr.w	r3, r3, #2
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c85c:	e7ff      	b.n	800c85e <tcp_receive+0xf0e>
 800c85e:	bf00      	nop
 800c860:	3750      	adds	r7, #80	; 0x50
 800c862:	46bd      	mov	sp, r7
 800c864:	bdb0      	pop	{r4, r5, r7, pc}
 800c866:	bf00      	nop
 800c868:	20008804 	.word	0x20008804
 800c86c:	200087e4 	.word	0x200087e4
 800c870:	2000880e 	.word	0x2000880e
 800c874:	08014fb4 	.word	0x08014fb4
 800c878:	0801535c 	.word	0x0801535c
 800c87c:	08015000 	.word	0x08015000

0800c880 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c886:	4b15      	ldr	r3, [pc, #84]	; (800c8dc <tcp_get_next_optbyte+0x5c>)
 800c888:	881b      	ldrh	r3, [r3, #0]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	b291      	uxth	r1, r2
 800c88e:	4a13      	ldr	r2, [pc, #76]	; (800c8dc <tcp_get_next_optbyte+0x5c>)
 800c890:	8011      	strh	r1, [r2, #0]
 800c892:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c894:	4b12      	ldr	r3, [pc, #72]	; (800c8e0 <tcp_get_next_optbyte+0x60>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <tcp_get_next_optbyte+0x26>
 800c89c:	4b11      	ldr	r3, [pc, #68]	; (800c8e4 <tcp_get_next_optbyte+0x64>)
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	88fa      	ldrh	r2, [r7, #6]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d208      	bcs.n	800c8b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c8a6:	4b10      	ldr	r3, [pc, #64]	; (800c8e8 <tcp_get_next_optbyte+0x68>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3314      	adds	r3, #20
 800c8ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c8ae:	88fb      	ldrh	r3, [r7, #6]
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	e00b      	b.n	800c8d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c8b8:	88fb      	ldrh	r3, [r7, #6]
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <tcp_get_next_optbyte+0x64>)
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c8c6:	4b06      	ldr	r3, [pc, #24]	; (800c8e0 <tcp_get_next_optbyte+0x60>)
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	797b      	ldrb	r3, [r7, #5]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	20008800 	.word	0x20008800
 800c8e0:	200087fc 	.word	0x200087fc
 800c8e4:	200087fa 	.word	0x200087fa
 800c8e8:	200087f4 	.word	0x200087f4

0800c8ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d106      	bne.n	800c908 <tcp_parseopt+0x1c>
 800c8fa:	4b32      	ldr	r3, [pc, #200]	; (800c9c4 <tcp_parseopt+0xd8>)
 800c8fc:	f240 727d 	movw	r2, #1917	; 0x77d
 800c900:	4931      	ldr	r1, [pc, #196]	; (800c9c8 <tcp_parseopt+0xdc>)
 800c902:	4832      	ldr	r0, [pc, #200]	; (800c9cc <tcp_parseopt+0xe0>)
 800c904:	f006 fb20 	bl	8012f48 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c908:	4b31      	ldr	r3, [pc, #196]	; (800c9d0 <tcp_parseopt+0xe4>)
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d055      	beq.n	800c9bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c910:	4b30      	ldr	r3, [pc, #192]	; (800c9d4 <tcp_parseopt+0xe8>)
 800c912:	2200      	movs	r2, #0
 800c914:	801a      	strh	r2, [r3, #0]
 800c916:	e045      	b.n	800c9a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c918:	f7ff ffb2 	bl	800c880 <tcp_get_next_optbyte>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	2b02      	cmp	r3, #2
 800c924:	d006      	beq.n	800c934 <tcp_parseopt+0x48>
 800c926:	2b02      	cmp	r3, #2
 800c928:	dc2b      	bgt.n	800c982 <tcp_parseopt+0x96>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d041      	beq.n	800c9b2 <tcp_parseopt+0xc6>
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d127      	bne.n	800c982 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c932:	e037      	b.n	800c9a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c934:	f7ff ffa4 	bl	800c880 <tcp_get_next_optbyte>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d13b      	bne.n	800c9b6 <tcp_parseopt+0xca>
 800c93e:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <tcp_parseopt+0xe8>)
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	3301      	adds	r3, #1
 800c944:	4a22      	ldr	r2, [pc, #136]	; (800c9d0 <tcp_parseopt+0xe4>)
 800c946:	8812      	ldrh	r2, [r2, #0]
 800c948:	4293      	cmp	r3, r2
 800c94a:	da34      	bge.n	800c9b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c94c:	f7ff ff98 	bl	800c880 <tcp_get_next_optbyte>
 800c950:	4603      	mov	r3, r0
 800c952:	b29b      	uxth	r3, r3
 800c954:	021b      	lsls	r3, r3, #8
 800c956:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c958:	f7ff ff92 	bl	800c880 <tcp_get_next_optbyte>
 800c95c:	4603      	mov	r3, r0
 800c95e:	b29a      	uxth	r2, r3
 800c960:	89bb      	ldrh	r3, [r7, #12]
 800c962:	4313      	orrs	r3, r2
 800c964:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c966:	89bb      	ldrh	r3, [r7, #12]
 800c968:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c96c:	d804      	bhi.n	800c978 <tcp_parseopt+0x8c>
 800c96e:	89bb      	ldrh	r3, [r7, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <tcp_parseopt+0x8c>
 800c974:	89ba      	ldrh	r2, [r7, #12]
 800c976:	e001      	b.n	800c97c <tcp_parseopt+0x90>
 800c978:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c980:	e010      	b.n	800c9a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c982:	f7ff ff7d 	bl	800c880 <tcp_get_next_optbyte>
 800c986:	4603      	mov	r3, r0
 800c988:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c98a:	7afb      	ldrb	r3, [r7, #11]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d914      	bls.n	800c9ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	b29a      	uxth	r2, r3
 800c994:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <tcp_parseopt+0xe8>)
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	4413      	add	r3, r2
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	3b02      	subs	r3, #2
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <tcp_parseopt+0xe8>)
 800c9a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c9a4:	4b0b      	ldr	r3, [pc, #44]	; (800c9d4 <tcp_parseopt+0xe8>)
 800c9a6:	881a      	ldrh	r2, [r3, #0]
 800c9a8:	4b09      	ldr	r3, [pc, #36]	; (800c9d0 <tcp_parseopt+0xe4>)
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d3b3      	bcc.n	800c918 <tcp_parseopt+0x2c>
 800c9b0:	e004      	b.n	800c9bc <tcp_parseopt+0xd0>
          return;
 800c9b2:	bf00      	nop
 800c9b4:	e002      	b.n	800c9bc <tcp_parseopt+0xd0>
            return;
 800c9b6:	bf00      	nop
 800c9b8:	e000      	b.n	800c9bc <tcp_parseopt+0xd0>
            return;
 800c9ba:	bf00      	nop
      }
    }
  }
}
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	08014fb4 	.word	0x08014fb4
 800c9c8:	08015418 	.word	0x08015418
 800c9cc:	08015000 	.word	0x08015000
 800c9d0:	200087f8 	.word	0x200087f8
 800c9d4:	20008800 	.word	0x20008800

0800c9d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c9dc:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <tcp_trigger_input_pcb_close+0x1c>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f043 0310 	orr.w	r3, r3, #16
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	4b03      	ldr	r3, [pc, #12]	; (800c9f4 <tcp_trigger_input_pcb_close+0x1c>)
 800c9e8:	701a      	strb	r2, [r3, #0]
}
 800c9ea:	bf00      	nop
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	20008811 	.word	0x20008811

0800c9f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00a      	beq.n	800ca20 <tcp_route+0x28>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	7a1b      	ldrb	r3, [r3, #8]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d006      	beq.n	800ca20 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	7a1b      	ldrb	r3, [r3, #8]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fb fb6a 	bl	80080f0 <netif_get_by_index>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	e003      	b.n	800ca28 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f004 ff99 	bl	8011958 <ip4_route>
 800ca26:	4603      	mov	r3, r0
  }
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ca30:	b590      	push	{r4, r7, lr}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	603b      	str	r3, [r7, #0]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d105      	bne.n	800ca52 <tcp_create_segment+0x22>
 800ca46:	4b44      	ldr	r3, [pc, #272]	; (800cb58 <tcp_create_segment+0x128>)
 800ca48:	22a3      	movs	r2, #163	; 0xa3
 800ca4a:	4944      	ldr	r1, [pc, #272]	; (800cb5c <tcp_create_segment+0x12c>)
 800ca4c:	4844      	ldr	r0, [pc, #272]	; (800cb60 <tcp_create_segment+0x130>)
 800ca4e:	f006 fa7b 	bl	8012f48 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <tcp_create_segment+0x34>
 800ca58:	4b3f      	ldr	r3, [pc, #252]	; (800cb58 <tcp_create_segment+0x128>)
 800ca5a:	22a4      	movs	r2, #164	; 0xa4
 800ca5c:	4941      	ldr	r1, [pc, #260]	; (800cb64 <tcp_create_segment+0x134>)
 800ca5e:	4840      	ldr	r0, [pc, #256]	; (800cb60 <tcp_create_segment+0x130>)
 800ca60:	f006 fa72 	bl	8012f48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ca64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	f003 0304 	and.w	r3, r3, #4
 800ca70:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ca72:	2003      	movs	r0, #3
 800ca74:	f7fb f836 	bl	8007ae4 <memp_malloc>
 800ca78:	6138      	str	r0, [r7, #16]
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d104      	bne.n	800ca8a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ca80:	68b8      	ldr	r0, [r7, #8]
 800ca82:	f7fb fe75 	bl	8008770 <pbuf_free>
    return NULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	e061      	b.n	800cb4e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ca90:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	891a      	ldrh	r2, [r3, #8]
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d205      	bcs.n	800cab6 <tcp_create_segment+0x86>
 800caaa:	4b2b      	ldr	r3, [pc, #172]	; (800cb58 <tcp_create_segment+0x128>)
 800caac:	22b0      	movs	r2, #176	; 0xb0
 800caae:	492e      	ldr	r1, [pc, #184]	; (800cb68 <tcp_create_segment+0x138>)
 800cab0:	482b      	ldr	r0, [pc, #172]	; (800cb60 <tcp_create_segment+0x130>)
 800cab2:	f006 fa49 	bl	8012f48 <iprintf>
  seg->len = p->tot_len - optlen;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	891a      	ldrh	r2, [r3, #8]
 800caba:	7dfb      	ldrb	r3, [r7, #23]
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cac6:	2114      	movs	r1, #20
 800cac8:	68b8      	ldr	r0, [r7, #8]
 800caca:	f7fb fdbb 	bl	8008644 <pbuf_add_header>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d004      	beq.n	800cade <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cad4:	6938      	ldr	r0, [r7, #16]
 800cad6:	f7fd f8ce 	bl	8009c76 <tcp_seg_free>
    return NULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	e037      	b.n	800cb4e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	8ada      	ldrh	r2, [r3, #22]
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	68dc      	ldr	r4, [r3, #12]
 800caf0:	4610      	mov	r0, r2
 800caf2:	f7fa fba2 	bl	800723a <lwip_htons>
 800caf6:	4603      	mov	r3, r0
 800caf8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	8b1a      	ldrh	r2, [r3, #24]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	68dc      	ldr	r4, [r3, #12]
 800cb02:	4610      	mov	r0, r2
 800cb04:	f7fa fb99 	bl	800723a <lwip_htons>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	68dc      	ldr	r4, [r3, #12]
 800cb10:	6838      	ldr	r0, [r7, #0]
 800cb12:	f7fa fba7 	bl	8007264 <lwip_htonl>
 800cb16:	4603      	mov	r3, r0
 800cb18:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
 800cb1c:	089b      	lsrs	r3, r3, #2
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	3305      	adds	r3, #5
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	031b      	lsls	r3, r3, #12
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	68dc      	ldr	r4, [r3, #12]
 800cb36:	4610      	mov	r0, r2
 800cb38:	f7fa fb7f 	bl	800723a <lwip_htons>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	749a      	strb	r2, [r3, #18]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	74da      	strb	r2, [r3, #19]
  return seg;
 800cb4c:	693b      	ldr	r3, [r7, #16]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	371c      	adds	r7, #28
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd90      	pop	{r4, r7, pc}
 800cb56:	bf00      	nop
 800cb58:	08015434 	.word	0x08015434
 800cb5c:	08015468 	.word	0x08015468
 800cb60:	08015488 	.word	0x08015488
 800cb64:	080154b0 	.word	0x080154b0
 800cb68:	080154d4 	.word	0x080154d4

0800cb6c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cb6c:	b590      	push	{r4, r7, lr}
 800cb6e:	b08b      	sub	sp, #44	; 0x2c
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d106      	bne.n	800cb98 <tcp_split_unsent_seg+0x2c>
 800cb8a:	4b95      	ldr	r3, [pc, #596]	; (800cde0 <tcp_split_unsent_seg+0x274>)
 800cb8c:	f240 324b 	movw	r2, #843	; 0x34b
 800cb90:	4994      	ldr	r1, [pc, #592]	; (800cde4 <tcp_split_unsent_seg+0x278>)
 800cb92:	4895      	ldr	r0, [pc, #596]	; (800cde8 <tcp_split_unsent_seg+0x27c>)
 800cb94:	f006 f9d8 	bl	8012f48 <iprintf>

  useg = pcb->unsent;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb9c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cba4:	f04f 33ff 	mov.w	r3, #4294967295
 800cba8:	e116      	b.n	800cdd8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cbaa:	887b      	ldrh	r3, [r7, #2]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d109      	bne.n	800cbc4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cbb0:	4b8b      	ldr	r3, [pc, #556]	; (800cde0 <tcp_split_unsent_seg+0x274>)
 800cbb2:	f240 3253 	movw	r2, #851	; 0x353
 800cbb6:	498d      	ldr	r1, [pc, #564]	; (800cdec <tcp_split_unsent_seg+0x280>)
 800cbb8:	488b      	ldr	r0, [pc, #556]	; (800cde8 <tcp_split_unsent_seg+0x27c>)
 800cbba:	f006 f9c5 	bl	8012f48 <iprintf>
    return ERR_VAL;
 800cbbe:	f06f 0305 	mvn.w	r3, #5
 800cbc2:	e109      	b.n	800cdd8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	891b      	ldrh	r3, [r3, #8]
 800cbc8:	887a      	ldrh	r2, [r7, #2]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d301      	bcc.n	800cbd2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e102      	b.n	800cdd8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbd6:	887a      	ldrh	r2, [r7, #2]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d906      	bls.n	800cbea <tcp_split_unsent_seg+0x7e>
 800cbdc:	4b80      	ldr	r3, [pc, #512]	; (800cde0 <tcp_split_unsent_seg+0x274>)
 800cbde:	f240 325b 	movw	r2, #859	; 0x35b
 800cbe2:	4983      	ldr	r1, [pc, #524]	; (800cdf0 <tcp_split_unsent_seg+0x284>)
 800cbe4:	4880      	ldr	r0, [pc, #512]	; (800cde8 <tcp_split_unsent_seg+0x27c>)
 800cbe6:	f006 f9af 	bl	8012f48 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	891b      	ldrh	r3, [r3, #8]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <tcp_split_unsent_seg+0x94>
 800cbf2:	4b7b      	ldr	r3, [pc, #492]	; (800cde0 <tcp_split_unsent_seg+0x274>)
 800cbf4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cbf8:	497e      	ldr	r1, [pc, #504]	; (800cdf4 <tcp_split_unsent_seg+0x288>)
 800cbfa:	487b      	ldr	r0, [pc, #492]	; (800cde8 <tcp_split_unsent_seg+0x27c>)
 800cbfc:	f006 f9a4 	bl	8012f48 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	7a9b      	ldrb	r3, [r3, #10]
 800cc04:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	f003 0304 	and.w	r3, r3, #4
 800cc10:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	891a      	ldrh	r2, [r3, #8]
 800cc16:	887b      	ldrh	r3, [r7, #2]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	89bb      	ldrh	r3, [r7, #12]
 800cc22:	4413      	add	r3, r2
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	2036      	movs	r0, #54	; 0x36
 800cc2e:	f7fb fabb 	bl	80081a8 <pbuf_alloc>
 800cc32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f000 80b7 	beq.w	800cdaa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	891a      	ldrh	r2, [r3, #8]
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	891b      	ldrh	r3, [r3, #8]
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	887b      	ldrh	r3, [r7, #2]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	6858      	ldr	r0, [r3, #4]
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	18d1      	adds	r1, r2, r3
 800cc5c:	897b      	ldrh	r3, [r7, #10]
 800cc5e:	89ba      	ldrh	r2, [r7, #12]
 800cc60:	f7fb ff80 	bl	8008b64 <pbuf_copy_partial>
 800cc64:	4603      	mov	r3, r0
 800cc66:	461a      	mov	r2, r3
 800cc68:	89bb      	ldrh	r3, [r7, #12]
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	f040 809f 	bne.w	800cdae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	899b      	ldrh	r3, [r3, #12]
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fa fade 	bl	800723a <lwip_htons>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc86:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cc88:	2300      	movs	r3, #0
 800cc8a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cc8c:	7efb      	ldrb	r3, [r7, #27]
 800cc8e:	f003 0308 	and.w	r3, r3, #8
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d007      	beq.n	800cca6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cc96:	7efb      	ldrb	r3, [r7, #27]
 800cc98:	f023 0308 	bic.w	r3, r3, #8
 800cc9c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cc9e:	7ebb      	ldrb	r3, [r7, #26]
 800cca0:	f043 0308 	orr.w	r3, r3, #8
 800cca4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cca6:	7efb      	ldrb	r3, [r7, #27]
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d007      	beq.n	800ccc0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ccb0:	7efb      	ldrb	r3, [r7, #27]
 800ccb2:	f023 0301 	bic.w	r3, r3, #1
 800ccb6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ccb8:	7ebb      	ldrb	r3, [r7, #26]
 800ccba:	f043 0301 	orr.w	r3, r3, #1
 800ccbe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fa facc 	bl	8007264 <lwip_htonl>
 800cccc:	4602      	mov	r2, r0
 800ccce:	887b      	ldrh	r3, [r7, #2]
 800ccd0:	18d1      	adds	r1, r2, r3
 800ccd2:	7eba      	ldrb	r2, [r7, #26]
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	6939      	ldr	r1, [r7, #16]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff fea7 	bl	800ca30 <tcp_create_segment>
 800cce2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d063      	beq.n	800cdb2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fb fdc6 	bl	8008880 <pbuf_clen>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccfe:	1a9b      	subs	r3, r3, r2
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	6858      	ldr	r0, [r3, #4]
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	891a      	ldrh	r2, [r3, #8]
 800cd12:	89bb      	ldrh	r3, [r7, #12]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	4619      	mov	r1, r3
 800cd1a:	f7fb fba3 	bl	8008464 <pbuf_realloc>
  useg->len -= remainder;
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	891a      	ldrh	r2, [r3, #8]
 800cd22:	89bb      	ldrh	r3, [r7, #12]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	899b      	ldrh	r3, [r3, #12]
 800cd32:	b29c      	uxth	r4, r3
 800cd34:	7efb      	ldrb	r3, [r7, #27]
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fa fa7e 	bl	800723a <lwip_htons>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	461a      	mov	r2, r3
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	4322      	orrs	r2, r4
 800cd48:	b292      	uxth	r2, r2
 800cd4a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fb fd95 	bl	8008880 <pbuf_clen>
 800cd56:	4603      	mov	r3, r0
 800cd58:	461a      	mov	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd60:	4413      	add	r3, r2
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fb fd86 	bl	8008880 <pbuf_clen>
 800cd74:	4603      	mov	r3, r0
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd7e:	4413      	add	r3, r2
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	69fa      	ldr	r2, [r7, #28]
 800cd94:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d103      	bne.n	800cda6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	e016      	b.n	800cdd8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cdaa:	bf00      	nop
 800cdac:	e002      	b.n	800cdb4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cdae:	bf00      	nop
 800cdb0:	e000      	b.n	800cdb4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cdb2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d006      	beq.n	800cdc8 <tcp_split_unsent_seg+0x25c>
 800cdba:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <tcp_split_unsent_seg+0x274>)
 800cdbc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cdc0:	490d      	ldr	r1, [pc, #52]	; (800cdf8 <tcp_split_unsent_seg+0x28c>)
 800cdc2:	4809      	ldr	r0, [pc, #36]	; (800cde8 <tcp_split_unsent_seg+0x27c>)
 800cdc4:	f006 f8c0 	bl	8012f48 <iprintf>
  if (p != NULL) {
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cdce:	6938      	ldr	r0, [r7, #16]
 800cdd0:	f7fb fcce 	bl	8008770 <pbuf_free>
  }

  return ERR_MEM;
 800cdd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3724      	adds	r7, #36	; 0x24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd90      	pop	{r4, r7, pc}
 800cde0:	08015434 	.word	0x08015434
 800cde4:	080157c8 	.word	0x080157c8
 800cde8:	08015488 	.word	0x08015488
 800cdec:	080157ec 	.word	0x080157ec
 800cdf0:	08015810 	.word	0x08015810
 800cdf4:	08015820 	.word	0x08015820
 800cdf8:	08015830 	.word	0x08015830

0800cdfc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cdfc:	b590      	push	{r4, r7, lr}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d106      	bne.n	800ce18 <tcp_send_fin+0x1c>
 800ce0a:	4b21      	ldr	r3, [pc, #132]	; (800ce90 <tcp_send_fin+0x94>)
 800ce0c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ce10:	4920      	ldr	r1, [pc, #128]	; (800ce94 <tcp_send_fin+0x98>)
 800ce12:	4821      	ldr	r0, [pc, #132]	; (800ce98 <tcp_send_fin+0x9c>)
 800ce14:	f006 f898 	bl	8012f48 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d02e      	beq.n	800ce7e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	e002      	b.n	800ce2e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1f8      	bne.n	800ce28 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	899b      	ldrh	r3, [r3, #12]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fa f9fb 	bl	800723a <lwip_htons>
 800ce44:	4603      	mov	r3, r0
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	f003 0307 	and.w	r3, r3, #7
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d116      	bne.n	800ce7e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	899b      	ldrh	r3, [r3, #12]
 800ce56:	b29c      	uxth	r4, r3
 800ce58:	2001      	movs	r0, #1
 800ce5a:	f7fa f9ee 	bl	800723a <lwip_htons>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	461a      	mov	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	4322      	orrs	r2, r4
 800ce68:	b292      	uxth	r2, r2
 800ce6a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	8b5b      	ldrh	r3, [r3, #26]
 800ce70:	f043 0320 	orr.w	r3, r3, #32
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	e004      	b.n	800ce88 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ce7e:	2101      	movs	r1, #1
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f80b 	bl	800ce9c <tcp_enqueue_flags>
 800ce86:	4603      	mov	r3, r0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd90      	pop	{r4, r7, pc}
 800ce90:	08015434 	.word	0x08015434
 800ce94:	0801583c 	.word	0x0801583c
 800ce98:	08015488 	.word	0x08015488

0800ce9c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	; 0x28
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	f003 0303 	and.w	r3, r3, #3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d106      	bne.n	800cec8 <tcp_enqueue_flags+0x2c>
 800ceba:	4b67      	ldr	r3, [pc, #412]	; (800d058 <tcp_enqueue_flags+0x1bc>)
 800cebc:	f240 4211 	movw	r2, #1041	; 0x411
 800cec0:	4966      	ldr	r1, [pc, #408]	; (800d05c <tcp_enqueue_flags+0x1c0>)
 800cec2:	4867      	ldr	r0, [pc, #412]	; (800d060 <tcp_enqueue_flags+0x1c4>)
 800cec4:	f006 f840 	bl	8012f48 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d106      	bne.n	800cedc <tcp_enqueue_flags+0x40>
 800cece:	4b62      	ldr	r3, [pc, #392]	; (800d058 <tcp_enqueue_flags+0x1bc>)
 800ced0:	f240 4213 	movw	r2, #1043	; 0x413
 800ced4:	4963      	ldr	r1, [pc, #396]	; (800d064 <tcp_enqueue_flags+0x1c8>)
 800ced6:	4862      	ldr	r0, [pc, #392]	; (800d060 <tcp_enqueue_flags+0x1c4>)
 800ced8:	f006 f836 	bl	8012f48 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cedc:	78fb      	ldrb	r3, [r7, #3]
 800cede:	f003 0302 	and.w	r3, r3, #2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d001      	beq.n	800ceea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cee6:	2301      	movs	r3, #1
 800cee8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ceea:	7ffb      	ldrb	r3, [r7, #31]
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	f003 0304 	and.w	r3, r3, #4
 800cef4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cefe:	4619      	mov	r1, r3
 800cf00:	2036      	movs	r0, #54	; 0x36
 800cf02:	f7fb f951 	bl	80081a8 <pbuf_alloc>
 800cf06:	6138      	str	r0, [r7, #16]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d109      	bne.n	800cf22 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	8b5b      	ldrh	r3, [r3, #26]
 800cf12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf20:	e095      	b.n	800d04e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	895a      	ldrh	r2, [r3, #10]
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d206      	bcs.n	800cf3c <tcp_enqueue_flags+0xa0>
 800cf2e:	4b4a      	ldr	r3, [pc, #296]	; (800d058 <tcp_enqueue_flags+0x1bc>)
 800cf30:	f240 4239 	movw	r2, #1081	; 0x439
 800cf34:	494c      	ldr	r1, [pc, #304]	; (800d068 <tcp_enqueue_flags+0x1cc>)
 800cf36:	484a      	ldr	r0, [pc, #296]	; (800d060 <tcp_enqueue_flags+0x1c4>)
 800cf38:	f006 f806 	bl	8012f48 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cf40:	78fa      	ldrb	r2, [r7, #3]
 800cf42:	7ffb      	ldrb	r3, [r7, #31]
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	460b      	mov	r3, r1
 800cf48:	6939      	ldr	r1, [r7, #16]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7ff fd70 	bl	800ca30 <tcp_create_segment>
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d109      	bne.n	800cf6c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	8b5b      	ldrh	r3, [r3, #26]
 800cf5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cf66:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6a:	e070      	b.n	800d04e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	f003 0303 	and.w	r3, r3, #3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d006      	beq.n	800cf86 <tcp_enqueue_flags+0xea>
 800cf78:	4b37      	ldr	r3, [pc, #220]	; (800d058 <tcp_enqueue_flags+0x1bc>)
 800cf7a:	f240 4242 	movw	r2, #1090	; 0x442
 800cf7e:	493b      	ldr	r1, [pc, #236]	; (800d06c <tcp_enqueue_flags+0x1d0>)
 800cf80:	4837      	ldr	r0, [pc, #220]	; (800d060 <tcp_enqueue_flags+0x1c4>)
 800cf82:	f005 ffe1 	bl	8012f48 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	891b      	ldrh	r3, [r3, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d006      	beq.n	800cf9c <tcp_enqueue_flags+0x100>
 800cf8e:	4b32      	ldr	r3, [pc, #200]	; (800d058 <tcp_enqueue_flags+0x1bc>)
 800cf90:	f240 4243 	movw	r2, #1091	; 0x443
 800cf94:	4936      	ldr	r1, [pc, #216]	; (800d070 <tcp_enqueue_flags+0x1d4>)
 800cf96:	4832      	ldr	r0, [pc, #200]	; (800d060 <tcp_enqueue_flags+0x1c4>)
 800cf98:	f005 ffd6 	bl	8012f48 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d103      	bne.n	800cfac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	66da      	str	r2, [r3, #108]	; 0x6c
 800cfaa:	e00d      	b.n	800cfc8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfb0:	61bb      	str	r3, [r7, #24]
 800cfb2:	e002      	b.n	800cfba <tcp_enqueue_flags+0x11e>
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	61bb      	str	r3, [r7, #24]
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1f8      	bne.n	800cfb4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d104      	bne.n	800cfe4 <tcp_enqueue_flags+0x148>
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cfee:	78fb      	ldrb	r3, [r7, #3]
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d006      	beq.n	800d006 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	8b5b      	ldrh	r3, [r3, #26]
 800cffc:	f043 0320 	orr.w	r3, r3, #32
 800d000:	b29a      	uxth	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fb fc38 	bl	8008880 <pbuf_clen>
 800d010:	4603      	mov	r3, r0
 800d012:	461a      	mov	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d01a:	4413      	add	r3, r2
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00e      	beq.n	800d04c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10a      	bne.n	800d04c <tcp_enqueue_flags+0x1b0>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <tcp_enqueue_flags+0x1b0>
 800d03e:	4b06      	ldr	r3, [pc, #24]	; (800d058 <tcp_enqueue_flags+0x1bc>)
 800d040:	f240 4265 	movw	r2, #1125	; 0x465
 800d044:	490b      	ldr	r1, [pc, #44]	; (800d074 <tcp_enqueue_flags+0x1d8>)
 800d046:	4806      	ldr	r0, [pc, #24]	; (800d060 <tcp_enqueue_flags+0x1c4>)
 800d048:	f005 ff7e 	bl	8012f48 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3720      	adds	r7, #32
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	08015434 	.word	0x08015434
 800d05c:	08015858 	.word	0x08015858
 800d060:	08015488 	.word	0x08015488
 800d064:	080158b0 	.word	0x080158b0
 800d068:	080158d0 	.word	0x080158d0
 800d06c:	0801590c 	.word	0x0801590c
 800d070:	08015924 	.word	0x08015924
 800d074:	08015950 	.word	0x08015950

0800d078 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d078:	b5b0      	push	{r4, r5, r7, lr}
 800d07a:	b08a      	sub	sp, #40	; 0x28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d106      	bne.n	800d094 <tcp_output+0x1c>
 800d086:	4b8a      	ldr	r3, [pc, #552]	; (800d2b0 <tcp_output+0x238>)
 800d088:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d08c:	4989      	ldr	r1, [pc, #548]	; (800d2b4 <tcp_output+0x23c>)
 800d08e:	488a      	ldr	r0, [pc, #552]	; (800d2b8 <tcp_output+0x240>)
 800d090:	f005 ff5a 	bl	8012f48 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	7d1b      	ldrb	r3, [r3, #20]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d106      	bne.n	800d0aa <tcp_output+0x32>
 800d09c:	4b84      	ldr	r3, [pc, #528]	; (800d2b0 <tcp_output+0x238>)
 800d09e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d0a2:	4986      	ldr	r1, [pc, #536]	; (800d2bc <tcp_output+0x244>)
 800d0a4:	4884      	ldr	r0, [pc, #528]	; (800d2b8 <tcp_output+0x240>)
 800d0a6:	f005 ff4f 	bl	8012f48 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d0aa:	4b85      	ldr	r3, [pc, #532]	; (800d2c0 <tcp_output+0x248>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d101      	bne.n	800d0b8 <tcp_output+0x40>
    return ERR_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e1ce      	b.n	800d456 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	bf28      	it	cs
 800d0c8:	4613      	movcs	r3, r2
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10b      	bne.n	800d0f2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	8b5b      	ldrh	r3, [r3, #26]
 800d0de:	f003 0302 	and.w	r3, r3, #2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 81aa 	beq.w	800d43c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fdcb 	bl	800dc84 <tcp_send_empty_ack>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	e1b1      	b.n	800d456 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3304      	adds	r3, #4
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fc7c 	bl	800c9f8 <tcp_route>
 800d100:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d102      	bne.n	800d10e <tcp_output+0x96>
    return ERR_RTE;
 800d108:	f06f 0303 	mvn.w	r3, #3
 800d10c:	e1a3      	b.n	800d456 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d003      	beq.n	800d11c <tcp_output+0xa4>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d111      	bne.n	800d140 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <tcp_output+0xb0>
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	3304      	adds	r3, #4
 800d126:	e000      	b.n	800d12a <tcp_output+0xb2>
 800d128:	2300      	movs	r3, #0
 800d12a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d102      	bne.n	800d138 <tcp_output+0xc0>
      return ERR_RTE;
 800d132:	f06f 0303 	mvn.w	r3, #3
 800d136:	e18e      	b.n	800d456 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	4618      	mov	r0, r3
 800d148:	f7fa f88c 	bl	8007264 <lwip_htonl>
 800d14c:	4602      	mov	r2, r0
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d156:	8912      	ldrh	r2, [r2, #8]
 800d158:	4413      	add	r3, r2
 800d15a:	69ba      	ldr	r2, [r7, #24]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d227      	bcs.n	800d1b0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d166:	461a      	mov	r2, r3
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d114      	bne.n	800d198 <tcp_output+0x120>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d172:	2b00      	cmp	r3, #0
 800d174:	d110      	bne.n	800d198 <tcp_output+0x120>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10b      	bne.n	800d198 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	8b5b      	ldrh	r3, [r3, #26]
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 814d 	beq.w	800d440 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fd6c 	bl	800dc84 <tcp_send_empty_ack>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	e152      	b.n	800d456 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1bc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 811c 	beq.w	800d3fe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d1c6:	e002      	b.n	800d1ce <tcp_output+0x156>
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	623b      	str	r3, [r7, #32]
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1f8      	bne.n	800d1c8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d1d6:	e112      	b.n	800d3fe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	899b      	ldrh	r3, [r3, #12]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fa f82a 	bl	800723a <lwip_htons>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f003 0304 	and.w	r3, r3, #4
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d006      	beq.n	800d200 <tcp_output+0x188>
 800d1f2:	4b2f      	ldr	r3, [pc, #188]	; (800d2b0 <tcp_output+0x238>)
 800d1f4:	f240 5236 	movw	r2, #1334	; 0x536
 800d1f8:	4932      	ldr	r1, [pc, #200]	; (800d2c4 <tcp_output+0x24c>)
 800d1fa:	482f      	ldr	r0, [pc, #188]	; (800d2b8 <tcp_output+0x240>)
 800d1fc:	f005 fea4 	bl	8012f48 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d204:	2b00      	cmp	r3, #0
 800d206:	d01f      	beq.n	800d248 <tcp_output+0x1d0>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	8b5b      	ldrh	r3, [r3, #26]
 800d20c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d210:	2b00      	cmp	r3, #0
 800d212:	d119      	bne.n	800d248 <tcp_output+0x1d0>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d00b      	beq.n	800d234 <tcp_output+0x1bc>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d110      	bne.n	800d248 <tcp_output+0x1d0>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d22a:	891a      	ldrh	r2, [r3, #8]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d230:	429a      	cmp	r2, r3
 800d232:	d209      	bcs.n	800d248 <tcp_output+0x1d0>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d004      	beq.n	800d248 <tcp_output+0x1d0>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d244:	2b08      	cmp	r3, #8
 800d246:	d901      	bls.n	800d24c <tcp_output+0x1d4>
 800d248:	2301      	movs	r3, #1
 800d24a:	e000      	b.n	800d24e <tcp_output+0x1d6>
 800d24c:	2300      	movs	r3, #0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	8b5b      	ldrh	r3, [r3, #26]
 800d256:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 80e4 	beq.w	800d428 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	7d1b      	ldrb	r3, [r3, #20]
 800d264:	2b02      	cmp	r3, #2
 800d266:	d00d      	beq.n	800d284 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	899b      	ldrh	r3, [r3, #12]
 800d26e:	b29c      	uxth	r4, r3
 800d270:	2010      	movs	r0, #16
 800d272:	f7f9 ffe2 	bl	800723a <lwip_htons>
 800d276:	4603      	mov	r3, r0
 800d278:	461a      	mov	r2, r3
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	4322      	orrs	r2, r4
 800d280:	b292      	uxth	r2, r2
 800d282:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	6879      	ldr	r1, [r7, #4]
 800d288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d28a:	f000 f909 	bl	800d4a0 <tcp_output_segment>
 800d28e:	4603      	mov	r3, r0
 800d290:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d016      	beq.n	800d2c8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	8b5b      	ldrh	r3, [r3, #26]
 800d29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	835a      	strh	r2, [r3, #26]
      return err;
 800d2a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ac:	e0d3      	b.n	800d456 <tcp_output+0x3de>
 800d2ae:	bf00      	nop
 800d2b0:	08015434 	.word	0x08015434
 800d2b4:	08015978 	.word	0x08015978
 800d2b8:	08015488 	.word	0x08015488
 800d2bc:	08015990 	.word	0x08015990
 800d2c0:	20008818 	.word	0x20008818
 800d2c4:	080159b8 	.word	0x080159b8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7d1b      	ldrb	r3, [r3, #20]
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	d006      	beq.n	800d2e6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	8b5b      	ldrh	r3, [r3, #26]
 800d2dc:	f023 0303 	bic.w	r3, r3, #3
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7f9 ffb9 	bl	8007264 <lwip_htonl>
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	891b      	ldrh	r3, [r3, #8]
 800d2f8:	461d      	mov	r5, r3
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	899b      	ldrh	r3, [r3, #12]
 800d300:	b29b      	uxth	r3, r3
 800d302:	4618      	mov	r0, r3
 800d304:	f7f9 ff99 	bl	800723a <lwip_htons>
 800d308:	4603      	mov	r3, r0
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	f003 0303 	and.w	r3, r3, #3
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <tcp_output+0x2a0>
 800d314:	2301      	movs	r3, #1
 800d316:	e000      	b.n	800d31a <tcp_output+0x2a2>
 800d318:	2300      	movs	r3, #0
 800d31a:	442b      	add	r3, r5
 800d31c:	4423      	add	r3, r4
 800d31e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	2b00      	cmp	r3, #0
 800d32a:	da02      	bge.n	800d332 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	891b      	ldrh	r3, [r3, #8]
 800d336:	461c      	mov	r4, r3
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	899b      	ldrh	r3, [r3, #12]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	4618      	mov	r0, r3
 800d342:	f7f9 ff7a 	bl	800723a <lwip_htons>
 800d346:	4603      	mov	r3, r0
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	f003 0303 	and.w	r3, r3, #3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <tcp_output+0x2de>
 800d352:	2301      	movs	r3, #1
 800d354:	e000      	b.n	800d358 <tcp_output+0x2e0>
 800d356:	2300      	movs	r3, #0
 800d358:	4423      	add	r3, r4
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d049      	beq.n	800d3f2 <tcp_output+0x37a>
      seg->next = NULL;
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	2200      	movs	r2, #0
 800d362:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d105      	bne.n	800d378 <tcp_output+0x300>
        pcb->unacked = seg;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d370:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	623b      	str	r3, [r7, #32]
 800d376:	e03f      	b.n	800d3f8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f9 ff70 	bl	8007264 <lwip_htonl>
 800d384:	4604      	mov	r4, r0
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7f9 ff69 	bl	8007264 <lwip_htonl>
 800d392:	4603      	mov	r3, r0
 800d394:	1ae3      	subs	r3, r4, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	da24      	bge.n	800d3e4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3370      	adds	r3, #112	; 0x70
 800d39e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d3a0:	e002      	b.n	800d3a8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d011      	beq.n	800d3d4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7f9 ff53 	bl	8007264 <lwip_htonl>
 800d3be:	4604      	mov	r4, r0
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7f9 ff4c 	bl	8007264 <lwip_htonl>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dbe6      	blt.n	800d3a2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	e009      	b.n	800d3f8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d3e4:	6a3b      	ldr	r3, [r7, #32]
 800d3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3e8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	623b      	str	r3, [r7, #32]
 800d3f0:	e002      	b.n	800d3f8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d3f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3f4:	f7fc fc3f 	bl	8009c76 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d400:	2b00      	cmp	r3, #0
 800d402:	d012      	beq.n	800d42a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7f9 ff2a 	bl	8007264 <lwip_htonl>
 800d410:	4602      	mov	r2, r0
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41a:	8912      	ldrh	r2, [r2, #8]
 800d41c:	4413      	add	r3, r2
  while (seg != NULL &&
 800d41e:	69ba      	ldr	r2, [r7, #24]
 800d420:	429a      	cmp	r2, r3
 800d422:	f4bf aed9 	bcs.w	800d1d8 <tcp_output+0x160>
 800d426:	e000      	b.n	800d42a <tcp_output+0x3b2>
      break;
 800d428:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d108      	bne.n	800d444 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d43a:	e004      	b.n	800d446 <tcp_output+0x3ce>
    goto output_done;
 800d43c:	bf00      	nop
 800d43e:	e002      	b.n	800d446 <tcp_output+0x3ce>
    goto output_done;
 800d440:	bf00      	nop
 800d442:	e000      	b.n	800d446 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d444:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	8b5b      	ldrh	r3, [r3, #26]
 800d44a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d44e:	b29a      	uxth	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3728      	adds	r7, #40	; 0x28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bdb0      	pop	{r4, r5, r7, pc}
 800d45e:	bf00      	nop

0800d460 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d106      	bne.n	800d47c <tcp_output_segment_busy+0x1c>
 800d46e:	4b09      	ldr	r3, [pc, #36]	; (800d494 <tcp_output_segment_busy+0x34>)
 800d470:	f240 529a 	movw	r2, #1434	; 0x59a
 800d474:	4908      	ldr	r1, [pc, #32]	; (800d498 <tcp_output_segment_busy+0x38>)
 800d476:	4809      	ldr	r0, [pc, #36]	; (800d49c <tcp_output_segment_busy+0x3c>)
 800d478:	f005 fd66 	bl	8012f48 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	7b9b      	ldrb	r3, [r3, #14]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d001      	beq.n	800d48a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d486:	2301      	movs	r3, #1
 800d488:	e000      	b.n	800d48c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	08015434 	.word	0x08015434
 800d498:	080159d0 	.word	0x080159d0
 800d49c:	08015488 	.word	0x08015488

0800d4a0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d4a0:	b5b0      	push	{r4, r5, r7, lr}
 800d4a2:	b08c      	sub	sp, #48	; 0x30
 800d4a4:	af04      	add	r7, sp, #16
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d106      	bne.n	800d4c0 <tcp_output_segment+0x20>
 800d4b2:	4b64      	ldr	r3, [pc, #400]	; (800d644 <tcp_output_segment+0x1a4>)
 800d4b4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d4b8:	4963      	ldr	r1, [pc, #396]	; (800d648 <tcp_output_segment+0x1a8>)
 800d4ba:	4864      	ldr	r0, [pc, #400]	; (800d64c <tcp_output_segment+0x1ac>)
 800d4bc:	f005 fd44 	bl	8012f48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <tcp_output_segment+0x34>
 800d4c6:	4b5f      	ldr	r3, [pc, #380]	; (800d644 <tcp_output_segment+0x1a4>)
 800d4c8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d4cc:	4960      	ldr	r1, [pc, #384]	; (800d650 <tcp_output_segment+0x1b0>)
 800d4ce:	485f      	ldr	r0, [pc, #380]	; (800d64c <tcp_output_segment+0x1ac>)
 800d4d0:	f005 fd3a 	bl	8012f48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d106      	bne.n	800d4e8 <tcp_output_segment+0x48>
 800d4da:	4b5a      	ldr	r3, [pc, #360]	; (800d644 <tcp_output_segment+0x1a4>)
 800d4dc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d4e0:	495c      	ldr	r1, [pc, #368]	; (800d654 <tcp_output_segment+0x1b4>)
 800d4e2:	485a      	ldr	r0, [pc, #360]	; (800d64c <tcp_output_segment+0x1ac>)
 800d4e4:	f005 fd30 	bl	8012f48 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f7ff ffb9 	bl	800d460 <tcp_output_segment_busy>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e0a1      	b.n	800d63c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	68dc      	ldr	r4, [r3, #12]
 800d500:	4610      	mov	r0, r2
 800d502:	f7f9 feaf 	bl	8007264 <lwip_htonl>
 800d506:	4603      	mov	r3, r0
 800d508:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	68dc      	ldr	r4, [r3, #12]
 800d512:	4610      	mov	r0, r2
 800d514:	f7f9 fe91 	bl	800723a <lwip_htons>
 800d518:	4603      	mov	r3, r0
 800d51a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d520:	68ba      	ldr	r2, [r7, #8]
 800d522:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d524:	441a      	add	r2, r3
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	3314      	adds	r3, #20
 800d530:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	7a9b      	ldrb	r3, [r3, #10]
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d015      	beq.n	800d56a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	3304      	adds	r3, #4
 800d542:	461a      	mov	r2, r3
 800d544:	6879      	ldr	r1, [r7, #4]
 800d546:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d54a:	f7fc fe8b 	bl	800a264 <tcp_eff_send_mss_netif>
 800d54e:	4603      	mov	r3, r0
 800d550:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d552:	8b7b      	ldrh	r3, [r7, #26]
 800d554:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d558:	4618      	mov	r0, r3
 800d55a:	f7f9 fe83 	bl	8007264 <lwip_htonl>
 800d55e:	4602      	mov	r2, r0
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	3304      	adds	r3, #4
 800d568:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d570:	2b00      	cmp	r3, #0
 800d572:	da02      	bge.n	800d57a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2200      	movs	r2, #0
 800d578:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10c      	bne.n	800d59c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d582:	4b35      	ldr	r3, [pc, #212]	; (800d658 <tcp_output_segment+0x1b8>)
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	4618      	mov	r0, r3
 800d592:	f7f9 fe67 	bl	8007264 <lwip_htonl>
 800d596:	4602      	mov	r2, r0
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	8959      	ldrh	r1, [r3, #10]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	8b3a      	ldrh	r2, [r7, #24]
 800d5b6:	1a8a      	subs	r2, r1, r2
 800d5b8:	b292      	uxth	r2, r2
 800d5ba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	8919      	ldrh	r1, [r3, #8]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	8b3a      	ldrh	r2, [r7, #24]
 800d5c8:	1a8a      	subs	r2, r1, r2
 800d5ca:	b292      	uxth	r2, r2
 800d5cc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	68d2      	ldr	r2, [r2, #12]
 800d5d6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	741a      	strb	r2, [r3, #16]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	68da      	ldr	r2, [r3, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	7a9b      	ldrb	r3, [r3, #10]
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <tcp_output_segment+0x158>
 800d5f4:	2318      	movs	r3, #24
 800d5f6:	e000      	b.n	800d5fa <tcp_output_segment+0x15a>
 800d5f8:	2314      	movs	r3, #20
 800d5fa:	4413      	add	r3, r2
 800d5fc:	69fa      	ldr	r2, [r7, #28]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d006      	beq.n	800d610 <tcp_output_segment+0x170>
 800d602:	4b10      	ldr	r3, [pc, #64]	; (800d644 <tcp_output_segment+0x1a4>)
 800d604:	f240 621c 	movw	r2, #1564	; 0x61c
 800d608:	4914      	ldr	r1, [pc, #80]	; (800d65c <tcp_output_segment+0x1bc>)
 800d60a:	4810      	ldr	r0, [pc, #64]	; (800d64c <tcp_output_segment+0x1ac>)
 800d60c:	f005 fc9c 	bl	8012f48 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6858      	ldr	r0, [r3, #4]
 800d614:	68b9      	ldr	r1, [r7, #8]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	1d1c      	adds	r4, r3, #4
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	7add      	ldrb	r5, [r3, #11]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	7a9b      	ldrb	r3, [r3, #10]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	9202      	str	r2, [sp, #8]
 800d626:	2206      	movs	r2, #6
 800d628:	9201      	str	r2, [sp, #4]
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	462b      	mov	r3, r5
 800d62e:	4622      	mov	r2, r4
 800d630:	f004 fb6e 	bl	8011d10 <ip4_output_if>
 800d634:	4603      	mov	r3, r0
 800d636:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3720      	adds	r7, #32
 800d640:	46bd      	mov	sp, r7
 800d642:	bdb0      	pop	{r4, r5, r7, pc}
 800d644:	08015434 	.word	0x08015434
 800d648:	080159f8 	.word	0x080159f8
 800d64c:	08015488 	.word	0x08015488
 800d650:	08015a18 	.word	0x08015a18
 800d654:	08015a38 	.word	0x08015a38
 800d658:	200087cc 	.word	0x200087cc
 800d65c:	08015a5c 	.word	0x08015a5c

0800d660 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d660:	b5b0      	push	{r4, r5, r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <tcp_rexmit_rto_prepare+0x1c>
 800d66e:	4b31      	ldr	r3, [pc, #196]	; (800d734 <tcp_rexmit_rto_prepare+0xd4>)
 800d670:	f240 6263 	movw	r2, #1635	; 0x663
 800d674:	4930      	ldr	r1, [pc, #192]	; (800d738 <tcp_rexmit_rto_prepare+0xd8>)
 800d676:	4831      	ldr	r0, [pc, #196]	; (800d73c <tcp_rexmit_rto_prepare+0xdc>)
 800d678:	f005 fc66 	bl	8012f48 <iprintf>

  if (pcb->unacked == NULL) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d684:	f06f 0305 	mvn.w	r3, #5
 800d688:	e050      	b.n	800d72c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	e00b      	b.n	800d6aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff fee4 	bl	800d460 <tcp_output_segment_busy>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d69e:	f06f 0305 	mvn.w	r3, #5
 800d6a2:	e043      	b.n	800d72c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1ef      	bne.n	800d692 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f7ff fed4 	bl	800d460 <tcp_output_segment_busy>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d6be:	f06f 0305 	mvn.w	r3, #5
 800d6c2:	e033      	b.n	800d72c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	8b5b      	ldrh	r3, [r3, #26]
 800d6de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7f9 fdb8 	bl	8007264 <lwip_htonl>
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	891b      	ldrh	r3, [r3, #8]
 800d6fa:	461d      	mov	r5, r3
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	899b      	ldrh	r3, [r3, #12]
 800d702:	b29b      	uxth	r3, r3
 800d704:	4618      	mov	r0, r3
 800d706:	f7f9 fd98 	bl	800723a <lwip_htons>
 800d70a:	4603      	mov	r3, r0
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	f003 0303 	and.w	r3, r3, #3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <tcp_rexmit_rto_prepare+0xba>
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <tcp_rexmit_rto_prepare+0xbc>
 800d71a:	2300      	movs	r3, #0
 800d71c:	442b      	add	r3, r5
 800d71e:	18e2      	adds	r2, r4, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bdb0      	pop	{r4, r5, r7, pc}
 800d734:	08015434 	.word	0x08015434
 800d738:	08015a70 	.word	0x08015a70
 800d73c:	08015488 	.word	0x08015488

0800d740 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <tcp_rexmit_rto_commit+0x1c>
 800d74e:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <tcp_rexmit_rto_commit+0x44>)
 800d750:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d754:	490c      	ldr	r1, [pc, #48]	; (800d788 <tcp_rexmit_rto_commit+0x48>)
 800d756:	480d      	ldr	r0, [pc, #52]	; (800d78c <tcp_rexmit_rto_commit+0x4c>)
 800d758:	f005 fbf6 	bl	8012f48 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d762:	2bff      	cmp	r3, #255	; 0xff
 800d764:	d007      	beq.n	800d776 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d76c:	3301      	adds	r3, #1
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7ff fc7e 	bl	800d078 <tcp_output>
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	08015434 	.word	0x08015434
 800d788:	08015a94 	.word	0x08015a94
 800d78c:	08015488 	.word	0x08015488

0800d790 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d106      	bne.n	800d7ac <tcp_rexmit_rto+0x1c>
 800d79e:	4b0a      	ldr	r3, [pc, #40]	; (800d7c8 <tcp_rexmit_rto+0x38>)
 800d7a0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d7a4:	4909      	ldr	r1, [pc, #36]	; (800d7cc <tcp_rexmit_rto+0x3c>)
 800d7a6:	480a      	ldr	r0, [pc, #40]	; (800d7d0 <tcp_rexmit_rto+0x40>)
 800d7a8:	f005 fbce 	bl	8012f48 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff ff57 	bl	800d660 <tcp_rexmit_rto_prepare>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d102      	bne.n	800d7be <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff ffc1 	bl	800d740 <tcp_rexmit_rto_commit>
  }
}
 800d7be:	bf00      	nop
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	08015434 	.word	0x08015434
 800d7cc:	08015ab8 	.word	0x08015ab8
 800d7d0:	08015488 	.word	0x08015488

0800d7d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d7d4:	b590      	push	{r4, r7, lr}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d106      	bne.n	800d7f0 <tcp_rexmit+0x1c>
 800d7e2:	4b2f      	ldr	r3, [pc, #188]	; (800d8a0 <tcp_rexmit+0xcc>)
 800d7e4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d7e8:	492e      	ldr	r1, [pc, #184]	; (800d8a4 <tcp_rexmit+0xd0>)
 800d7ea:	482f      	ldr	r0, [pc, #188]	; (800d8a8 <tcp_rexmit+0xd4>)
 800d7ec:	f005 fbac 	bl	8012f48 <iprintf>

  if (pcb->unacked == NULL) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d7f8:	f06f 0305 	mvn.w	r3, #5
 800d7fc:	e04c      	b.n	800d898 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d802:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d804:	68b8      	ldr	r0, [r7, #8]
 800d806:	f7ff fe2b 	bl	800d460 <tcp_output_segment_busy>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d810:	f06f 0305 	mvn.w	r3, #5
 800d814:	e040      	b.n	800d898 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	336c      	adds	r3, #108	; 0x6c
 800d822:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d824:	e002      	b.n	800d82c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d011      	beq.n	800d858 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7f9 fd11 	bl	8007264 <lwip_htonl>
 800d842:	4604      	mov	r4, r0
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7f9 fd0a 	bl	8007264 <lwip_htonl>
 800d850:	4603      	mov	r3, r0
 800d852:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d854:	2b00      	cmp	r3, #0
 800d856:	dbe6      	blt.n	800d826 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d87c:	2bff      	cmp	r3, #255	; 0xff
 800d87e:	d007      	beq.n	800d890 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d886:	3301      	adds	r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3714      	adds	r7, #20
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd90      	pop	{r4, r7, pc}
 800d8a0:	08015434 	.word	0x08015434
 800d8a4:	08015ad4 	.word	0x08015ad4
 800d8a8:	08015488 	.word	0x08015488

0800d8ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d106      	bne.n	800d8c8 <tcp_rexmit_fast+0x1c>
 800d8ba:	4b2a      	ldr	r3, [pc, #168]	; (800d964 <tcp_rexmit_fast+0xb8>)
 800d8bc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d8c0:	4929      	ldr	r1, [pc, #164]	; (800d968 <tcp_rexmit_fast+0xbc>)
 800d8c2:	482a      	ldr	r0, [pc, #168]	; (800d96c <tcp_rexmit_fast+0xc0>)
 800d8c4:	f005 fb40 	bl	8012f48 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d045      	beq.n	800d95c <tcp_rexmit_fast+0xb0>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	8b5b      	ldrh	r3, [r3, #26]
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d13f      	bne.n	800d95c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7ff ff79 	bl	800d7d4 <tcp_rexmit>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d139      	bne.n	800d95c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	bf28      	it	cs
 800d8f8:	4613      	movcs	r3, r2
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	da00      	bge.n	800d902 <tcp_rexmit_fast+0x56>
 800d900:	3301      	adds	r3, #1
 800d902:	105b      	asrs	r3, r3, #1
 800d904:	b29a      	uxth	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d912:	461a      	mov	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d206      	bcs.n	800d92c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	b29a      	uxth	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d936:	4619      	mov	r1, r3
 800d938:	0049      	lsls	r1, r1, #1
 800d93a:	440b      	add	r3, r1
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	4413      	add	r3, r2
 800d940:	b29a      	uxth	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	8b5b      	ldrh	r3, [r3, #26]
 800d94c:	f043 0304 	orr.w	r3, r3, #4
 800d950:	b29a      	uxth	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	08015434 	.word	0x08015434
 800d968:	08015aec 	.word	0x08015aec
 800d96c:	08015488 	.word	0x08015488

0800d970 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	607b      	str	r3, [r7, #4]
 800d97a:	460b      	mov	r3, r1
 800d97c:	817b      	strh	r3, [r7, #10]
 800d97e:	4613      	mov	r3, r2
 800d980:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d982:	897a      	ldrh	r2, [r7, #10]
 800d984:	893b      	ldrh	r3, [r7, #8]
 800d986:	4413      	add	r3, r2
 800d988:	b29b      	uxth	r3, r3
 800d98a:	3314      	adds	r3, #20
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d992:	4619      	mov	r1, r3
 800d994:	2022      	movs	r0, #34	; 0x22
 800d996:	f7fa fc07 	bl	80081a8 <pbuf_alloc>
 800d99a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d04d      	beq.n	800da3e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d9a2:	897b      	ldrh	r3, [r7, #10]
 800d9a4:	3313      	adds	r3, #19
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	8952      	ldrh	r2, [r2, #10]
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	db06      	blt.n	800d9bc <tcp_output_alloc_header_common+0x4c>
 800d9ae:	4b26      	ldr	r3, [pc, #152]	; (800da48 <tcp_output_alloc_header_common+0xd8>)
 800d9b0:	f240 7223 	movw	r2, #1827	; 0x723
 800d9b4:	4925      	ldr	r1, [pc, #148]	; (800da4c <tcp_output_alloc_header_common+0xdc>)
 800d9b6:	4826      	ldr	r0, [pc, #152]	; (800da50 <tcp_output_alloc_header_common+0xe0>)
 800d9b8:	f005 fac6 	bl	8012f48 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d9c2:	8c3b      	ldrh	r3, [r7, #32]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f9 fc38 	bl	800723a <lwip_htons>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7f9 fc30 	bl	800723a <lwip_htons>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	461a      	mov	r2, r3
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7f9 fc3b 	bl	8007264 <lwip_htonl>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d9f4:	897b      	ldrh	r3, [r7, #10]
 800d9f6:	089b      	lsrs	r3, r3, #2
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	3305      	adds	r3, #5
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	031b      	lsls	r3, r3, #12
 800da00:	b29a      	uxth	r2, r3
 800da02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da06:	b29b      	uxth	r3, r3
 800da08:	4313      	orrs	r3, r2
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7f9 fc14 	bl	800723a <lwip_htons>
 800da12:	4603      	mov	r3, r0
 800da14:	461a      	mov	r2, r3
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800da1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7f9 fc0c 	bl	800723a <lwip_htons>
 800da22:	4603      	mov	r3, r0
 800da24:	461a      	mov	r2, r3
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	2200      	movs	r2, #0
 800da2e:	741a      	strb	r2, [r3, #16]
 800da30:	2200      	movs	r2, #0
 800da32:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2200      	movs	r2, #0
 800da38:	749a      	strb	r2, [r3, #18]
 800da3a:	2200      	movs	r2, #0
 800da3c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800da3e:	697b      	ldr	r3, [r7, #20]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	08015434 	.word	0x08015434
 800da4c:	08015b0c 	.word	0x08015b0c
 800da50:	08015488 	.word	0x08015488

0800da54 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800da54:	b5b0      	push	{r4, r5, r7, lr}
 800da56:	b08a      	sub	sp, #40	; 0x28
 800da58:	af04      	add	r7, sp, #16
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	460b      	mov	r3, r1
 800da60:	817b      	strh	r3, [r7, #10]
 800da62:	4613      	mov	r3, r2
 800da64:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d106      	bne.n	800da7a <tcp_output_alloc_header+0x26>
 800da6c:	4b15      	ldr	r3, [pc, #84]	; (800dac4 <tcp_output_alloc_header+0x70>)
 800da6e:	f240 7242 	movw	r2, #1858	; 0x742
 800da72:	4915      	ldr	r1, [pc, #84]	; (800dac8 <tcp_output_alloc_header+0x74>)
 800da74:	4815      	ldr	r0, [pc, #84]	; (800dacc <tcp_output_alloc_header+0x78>)
 800da76:	f005 fa67 	bl	8012f48 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	8adb      	ldrh	r3, [r3, #22]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	8b12      	ldrh	r2, [r2, #24]
 800da86:	68f9      	ldr	r1, [r7, #12]
 800da88:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800da8a:	893d      	ldrh	r5, [r7, #8]
 800da8c:	897c      	ldrh	r4, [r7, #10]
 800da8e:	9103      	str	r1, [sp, #12]
 800da90:	2110      	movs	r1, #16
 800da92:	9102      	str	r1, [sp, #8]
 800da94:	9201      	str	r2, [sp, #4]
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	462a      	mov	r2, r5
 800da9c:	4621      	mov	r1, r4
 800da9e:	f7ff ff67 	bl	800d970 <tcp_output_alloc_header_common>
 800daa2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d006      	beq.n	800dab8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dab2:	441a      	add	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dab8:	697b      	ldr	r3, [r7, #20]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3718      	adds	r7, #24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bdb0      	pop	{r4, r5, r7, pc}
 800dac2:	bf00      	nop
 800dac4:	08015434 	.word	0x08015434
 800dac8:	08015b3c 	.word	0x08015b3c
 800dacc:	08015488 	.word	0x08015488

0800dad0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	4611      	mov	r1, r2
 800dadc:	461a      	mov	r2, r3
 800dade:	460b      	mov	r3, r1
 800dae0:	71fb      	strb	r3, [r7, #7]
 800dae2:	4613      	mov	r3, r2
 800dae4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d106      	bne.n	800dafe <tcp_output_fill_options+0x2e>
 800daf0:	4b12      	ldr	r3, [pc, #72]	; (800db3c <tcp_output_fill_options+0x6c>)
 800daf2:	f240 7256 	movw	r2, #1878	; 0x756
 800daf6:	4912      	ldr	r1, [pc, #72]	; (800db40 <tcp_output_fill_options+0x70>)
 800daf8:	4812      	ldr	r0, [pc, #72]	; (800db44 <tcp_output_fill_options+0x74>)
 800dafa:	f005 fa25 	bl	8012f48 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	3314      	adds	r3, #20
 800db08:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800db0a:	8bfb      	ldrh	r3, [r7, #30]
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	461a      	mov	r2, r3
 800db10:	79fb      	ldrb	r3, [r7, #7]
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	4413      	add	r3, r2
 800db1a:	3314      	adds	r3, #20
 800db1c:	69ba      	ldr	r2, [r7, #24]
 800db1e:	4413      	add	r3, r2
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	429a      	cmp	r2, r3
 800db24:	d006      	beq.n	800db34 <tcp_output_fill_options+0x64>
 800db26:	4b05      	ldr	r3, [pc, #20]	; (800db3c <tcp_output_fill_options+0x6c>)
 800db28:	f240 7275 	movw	r2, #1909	; 0x775
 800db2c:	4906      	ldr	r1, [pc, #24]	; (800db48 <tcp_output_fill_options+0x78>)
 800db2e:	4805      	ldr	r0, [pc, #20]	; (800db44 <tcp_output_fill_options+0x74>)
 800db30:	f005 fa0a 	bl	8012f48 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800db34:	bf00      	nop
 800db36:	3720      	adds	r7, #32
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	08015434 	.word	0x08015434
 800db40:	08015b64 	.word	0x08015b64
 800db44:	08015488 	.word	0x08015488
 800db48:	08015a5c 	.word	0x08015a5c

0800db4c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b08a      	sub	sp, #40	; 0x28
 800db50:	af04      	add	r7, sp, #16
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
 800db58:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d106      	bne.n	800db6e <tcp_output_control_segment+0x22>
 800db60:	4b1c      	ldr	r3, [pc, #112]	; (800dbd4 <tcp_output_control_segment+0x88>)
 800db62:	f240 7287 	movw	r2, #1927	; 0x787
 800db66:	491c      	ldr	r1, [pc, #112]	; (800dbd8 <tcp_output_control_segment+0x8c>)
 800db68:	481c      	ldr	r0, [pc, #112]	; (800dbdc <tcp_output_control_segment+0x90>)
 800db6a:	f005 f9ed 	bl	8012f48 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f7fe ff40 	bl	800c9f8 <tcp_route>
 800db78:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d102      	bne.n	800db86 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800db80:	23fc      	movs	r3, #252	; 0xfc
 800db82:	75fb      	strb	r3, [r7, #23]
 800db84:	e01c      	b.n	800dbc0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d006      	beq.n	800db9a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	7adb      	ldrb	r3, [r3, #11]
 800db90:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	7a9b      	ldrb	r3, [r3, #10]
 800db96:	757b      	strb	r3, [r7, #21]
 800db98:	e003      	b.n	800dba2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800db9a:	23ff      	movs	r3, #255	; 0xff
 800db9c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dba2:	7dba      	ldrb	r2, [r7, #22]
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	9302      	str	r3, [sp, #8]
 800dba8:	2306      	movs	r3, #6
 800dbaa:	9301      	str	r3, [sp, #4]
 800dbac:	7d7b      	ldrb	r3, [r7, #21]
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	68b8      	ldr	r0, [r7, #8]
 800dbb8:	f004 f8aa 	bl	8011d10 <ip4_output_if>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dbc0:	68b8      	ldr	r0, [r7, #8]
 800dbc2:	f7fa fdd5 	bl	8008770 <pbuf_free>
  return err;
 800dbc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3718      	adds	r7, #24
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	08015434 	.word	0x08015434
 800dbd8:	08015b8c 	.word	0x08015b8c
 800dbdc:	08015488 	.word	0x08015488

0800dbe0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dbe0:	b590      	push	{r4, r7, lr}
 800dbe2:	b08b      	sub	sp, #44	; 0x2c
 800dbe4:	af04      	add	r7, sp, #16
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
 800dbec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <tcp_rst+0x22>
 800dbf4:	4b1f      	ldr	r3, [pc, #124]	; (800dc74 <tcp_rst+0x94>)
 800dbf6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dbfa:	491f      	ldr	r1, [pc, #124]	; (800dc78 <tcp_rst+0x98>)
 800dbfc:	481f      	ldr	r0, [pc, #124]	; (800dc7c <tcp_rst+0x9c>)
 800dbfe:	f005 f9a3 	bl	8012f48 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d106      	bne.n	800dc16 <tcp_rst+0x36>
 800dc08:	4b1a      	ldr	r3, [pc, #104]	; (800dc74 <tcp_rst+0x94>)
 800dc0a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dc0e:	491c      	ldr	r1, [pc, #112]	; (800dc80 <tcp_rst+0xa0>)
 800dc10:	481a      	ldr	r0, [pc, #104]	; (800dc7c <tcp_rst+0x9c>)
 800dc12:	f005 f999 	bl	8012f48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc16:	2300      	movs	r3, #0
 800dc18:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dc1a:	f246 0308 	movw	r3, #24584	; 0x6008
 800dc1e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
 800dc22:	b29c      	uxth	r4, r3
 800dc24:	68b8      	ldr	r0, [r7, #8]
 800dc26:	f7f9 fb1d 	bl	8007264 <lwip_htonl>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	8abb      	ldrh	r3, [r7, #20]
 800dc2e:	9303      	str	r3, [sp, #12]
 800dc30:	2314      	movs	r3, #20
 800dc32:	9302      	str	r3, [sp, #8]
 800dc34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dc36:	9301      	str	r3, [sp, #4]
 800dc38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	2200      	movs	r2, #0
 800dc40:	4621      	mov	r1, r4
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7ff fe94 	bl	800d970 <tcp_output_alloc_header_common>
 800dc48:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00c      	beq.n	800dc6a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc50:	7dfb      	ldrb	r3, [r7, #23]
 800dc52:	2200      	movs	r2, #0
 800dc54:	6939      	ldr	r1, [r7, #16]
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff ff3a 	bl	800dad0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	6939      	ldr	r1, [r7, #16]
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7ff ff72 	bl	800db4c <tcp_output_control_segment>
 800dc68:	e000      	b.n	800dc6c <tcp_rst+0x8c>
    return;
 800dc6a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd90      	pop	{r4, r7, pc}
 800dc72:	bf00      	nop
 800dc74:	08015434 	.word	0x08015434
 800dc78:	08015bb8 	.word	0x08015bb8
 800dc7c:	08015488 	.word	0x08015488
 800dc80:	08015bd4 	.word	0x08015bd4

0800dc84 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dc84:	b590      	push	{r4, r7, lr}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d106      	bne.n	800dca8 <tcp_send_empty_ack+0x24>
 800dc9a:	4b28      	ldr	r3, [pc, #160]	; (800dd3c <tcp_send_empty_ack+0xb8>)
 800dc9c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dca0:	4927      	ldr	r1, [pc, #156]	; (800dd40 <tcp_send_empty_ack+0xbc>)
 800dca2:	4828      	ldr	r0, [pc, #160]	; (800dd44 <tcp_send_empty_ack+0xc0>)
 800dca4:	f005 f950 	bl	8012f48 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dca8:	7dfb      	ldrb	r3, [r7, #23]
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f003 0304 	and.w	r3, r3, #4
 800dcb2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dcb4:	7d7b      	ldrb	r3, [r7, #21]
 800dcb6:	b29c      	uxth	r4, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7f9 fad1 	bl	8007264 <lwip_htonl>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7ff fec3 	bl	800da54 <tcp_output_alloc_header>
 800dcce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d109      	bne.n	800dcea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	8b5b      	ldrh	r3, [r3, #26]
 800dcda:	f043 0303 	orr.w	r3, r3, #3
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dce4:	f06f 0301 	mvn.w	r3, #1
 800dce8:	e023      	b.n	800dd32 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dcea:	7dbb      	ldrb	r3, [r7, #22]
 800dcec:	7dfa      	ldrb	r2, [r7, #23]
 800dcee:	6939      	ldr	r1, [r7, #16]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7ff feed 	bl	800dad0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	6939      	ldr	r1, [r7, #16]
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff ff24 	bl	800db4c <tcp_output_control_segment>
 800dd04:	4603      	mov	r3, r0
 800dd06:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dd08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d007      	beq.n	800dd20 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	8b5b      	ldrh	r3, [r3, #26]
 800dd14:	f043 0303 	orr.w	r3, r3, #3
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	835a      	strh	r2, [r3, #26]
 800dd1e:	e006      	b.n	800dd2e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	8b5b      	ldrh	r3, [r3, #26]
 800dd24:	f023 0303 	bic.w	r3, r3, #3
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dd2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	371c      	adds	r7, #28
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd90      	pop	{r4, r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	08015434 	.word	0x08015434
 800dd40:	08015bf0 	.word	0x08015bf0
 800dd44:	08015488 	.word	0x08015488

0800dd48 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dd48:	b590      	push	{r4, r7, lr}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd50:	2300      	movs	r3, #0
 800dd52:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <tcp_keepalive+0x20>
 800dd5a:	4b18      	ldr	r3, [pc, #96]	; (800ddbc <tcp_keepalive+0x74>)
 800dd5c:	f640 0224 	movw	r2, #2084	; 0x824
 800dd60:	4917      	ldr	r1, [pc, #92]	; (800ddc0 <tcp_keepalive+0x78>)
 800dd62:	4818      	ldr	r0, [pc, #96]	; (800ddc4 <tcp_keepalive+0x7c>)
 800dd64:	f005 f8f0 	bl	8012f48 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	b29c      	uxth	r4, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd70:	3b01      	subs	r3, #1
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7f9 fa76 	bl	8007264 <lwip_htonl>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff fe68 	bl	800da54 <tcp_output_alloc_header>
 800dd84:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd90:	e010      	b.n	800ddb4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	2200      	movs	r2, #0
 800dd96:	6939      	ldr	r1, [r7, #16]
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff fe99 	bl	800dad0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	3304      	adds	r3, #4
 800dda4:	6939      	ldr	r1, [r7, #16]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff fed0 	bl	800db4c <tcp_output_control_segment>
 800ddac:	4603      	mov	r3, r0
 800ddae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ddb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	371c      	adds	r7, #28
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd90      	pop	{r4, r7, pc}
 800ddbc:	08015434 	.word	0x08015434
 800ddc0:	08015c10 	.word	0x08015c10
 800ddc4:	08015488 	.word	0x08015488

0800ddc8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b08b      	sub	sp, #44	; 0x2c
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d106      	bne.n	800ddea <tcp_zero_window_probe+0x22>
 800dddc:	4b4c      	ldr	r3, [pc, #304]	; (800df10 <tcp_zero_window_probe+0x148>)
 800ddde:	f640 024f 	movw	r2, #2127	; 0x84f
 800dde2:	494c      	ldr	r1, [pc, #304]	; (800df14 <tcp_zero_window_probe+0x14c>)
 800dde4:	484c      	ldr	r0, [pc, #304]	; (800df18 <tcp_zero_window_probe+0x150>)
 800dde6:	f005 f8af 	bl	8012f48 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d101      	bne.n	800ddfa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	e086      	b.n	800df08 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de00:	2bff      	cmp	r3, #255	; 0xff
 800de02:	d007      	beq.n	800de14 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de0a:	3301      	adds	r3, #1
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800de14:	6a3b      	ldr	r3, [r7, #32]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	899b      	ldrh	r3, [r3, #12]
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7f9 fa0c 	bl	800723a <lwip_htons>
 800de22:	4603      	mov	r3, r0
 800de24:	b2db      	uxtb	r3, r3
 800de26:	f003 0301 	and.w	r3, r3, #1
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d005      	beq.n	800de3a <tcp_zero_window_probe+0x72>
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	891b      	ldrh	r3, [r3, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <tcp_zero_window_probe+0x72>
 800de36:	2301      	movs	r3, #1
 800de38:	e000      	b.n	800de3c <tcp_zero_window_probe+0x74>
 800de3a:	2300      	movs	r3, #0
 800de3c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800de3e:	7ffb      	ldrb	r3, [r7, #31]
 800de40:	2b00      	cmp	r3, #0
 800de42:	bf0c      	ite	eq
 800de44:	2301      	moveq	r3, #1
 800de46:	2300      	movne	r3, #0
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800de4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de50:	b299      	uxth	r1, r3
 800de52:	6a3b      	ldr	r3, [r7, #32]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	8bba      	ldrh	r2, [r7, #28]
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7ff fdfa 	bl	800da54 <tcp_output_alloc_header>
 800de60:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d102      	bne.n	800de6e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800de68:	f04f 33ff 	mov.w	r3, #4294967295
 800de6c:	e04c      	b.n	800df08 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800de74:	7ffb      	ldrb	r3, [r7, #31]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d011      	beq.n	800de9e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	899b      	ldrh	r3, [r3, #12]
 800de7e:	b29b      	uxth	r3, r3
 800de80:	b21b      	sxth	r3, r3
 800de82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800de86:	b21c      	sxth	r4, r3
 800de88:	2011      	movs	r0, #17
 800de8a:	f7f9 f9d6 	bl	800723a <lwip_htons>
 800de8e:	4603      	mov	r3, r0
 800de90:	b21b      	sxth	r3, r3
 800de92:	4323      	orrs	r3, r4
 800de94:	b21b      	sxth	r3, r3
 800de96:	b29a      	uxth	r2, r3
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	819a      	strh	r2, [r3, #12]
 800de9c:	e010      	b.n	800dec0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	3314      	adds	r3, #20
 800dea4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	6858      	ldr	r0, [r3, #4]
 800deaa:	6a3b      	ldr	r3, [r7, #32]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	891a      	ldrh	r2, [r3, #8]
 800deb0:	6a3b      	ldr	r3, [r7, #32]
 800deb2:	891b      	ldrh	r3, [r3, #8]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	2201      	movs	r2, #1
 800deba:	6939      	ldr	r1, [r7, #16]
 800debc:	f7fa fe52 	bl	8008b64 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7f9 f9cc 	bl	8007264 <lwip_htonl>
 800decc:	4603      	mov	r3, r0
 800dece:	3301      	adds	r3, #1
 800ded0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	da02      	bge.n	800dee4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dee8:	2200      	movs	r2, #0
 800deea:	69b9      	ldr	r1, [r7, #24]
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff fdef 	bl	800dad0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	3304      	adds	r3, #4
 800def8:	69b9      	ldr	r1, [r7, #24]
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff fe26 	bl	800db4c <tcp_output_control_segment>
 800df00:	4603      	mov	r3, r0
 800df02:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800df04:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	372c      	adds	r7, #44	; 0x2c
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd90      	pop	{r4, r7, pc}
 800df10:	08015434 	.word	0x08015434
 800df14:	08015c2c 	.word	0x08015c2c
 800df18:	08015488 	.word	0x08015488

0800df1c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800df24:	f7fa ff0c 	bl	8008d40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <tcpip_tcp_timer+0x38>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d103      	bne.n	800df38 <tcpip_tcp_timer+0x1c>
 800df30:	4b09      	ldr	r3, [pc, #36]	; (800df58 <tcpip_tcp_timer+0x3c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df38:	2200      	movs	r2, #0
 800df3a:	4908      	ldr	r1, [pc, #32]	; (800df5c <tcpip_tcp_timer+0x40>)
 800df3c:	20fa      	movs	r0, #250	; 0xfa
 800df3e:	f000 f8f3 	bl	800e128 <sys_timeout>
 800df42:	e003      	b.n	800df4c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800df44:	4b06      	ldr	r3, [pc, #24]	; (800df60 <tcpip_tcp_timer+0x44>)
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
  }
}
 800df4a:	bf00      	nop
 800df4c:	bf00      	nop
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	200087d8 	.word	0x200087d8
 800df58:	200087dc 	.word	0x200087dc
 800df5c:	0800df1d 	.word	0x0800df1d
 800df60:	20008824 	.word	0x20008824

0800df64 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <tcp_timer_needed+0x30>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10f      	bne.n	800df90 <tcp_timer_needed+0x2c>
 800df70:	4b09      	ldr	r3, [pc, #36]	; (800df98 <tcp_timer_needed+0x34>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d103      	bne.n	800df80 <tcp_timer_needed+0x1c>
 800df78:	4b08      	ldr	r3, [pc, #32]	; (800df9c <tcp_timer_needed+0x38>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d007      	beq.n	800df90 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800df80:	4b04      	ldr	r3, [pc, #16]	; (800df94 <tcp_timer_needed+0x30>)
 800df82:	2201      	movs	r2, #1
 800df84:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df86:	2200      	movs	r2, #0
 800df88:	4905      	ldr	r1, [pc, #20]	; (800dfa0 <tcp_timer_needed+0x3c>)
 800df8a:	20fa      	movs	r0, #250	; 0xfa
 800df8c:	f000 f8cc 	bl	800e128 <sys_timeout>
  }
}
 800df90:	bf00      	nop
 800df92:	bd80      	pop	{r7, pc}
 800df94:	20008824 	.word	0x20008824
 800df98:	200087d8 	.word	0x200087d8
 800df9c:	200087dc 	.word	0x200087dc
 800dfa0:	0800df1d 	.word	0x0800df1d

0800dfa4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dfb0:	2006      	movs	r0, #6
 800dfb2:	f7f9 fd97 	bl	8007ae4 <memp_malloc>
 800dfb6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d109      	bne.n	800dfd2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d151      	bne.n	800e068 <sys_timeout_abs+0xc4>
 800dfc4:	4b2a      	ldr	r3, [pc, #168]	; (800e070 <sys_timeout_abs+0xcc>)
 800dfc6:	22be      	movs	r2, #190	; 0xbe
 800dfc8:	492a      	ldr	r1, [pc, #168]	; (800e074 <sys_timeout_abs+0xd0>)
 800dfca:	482b      	ldr	r0, [pc, #172]	; (800e078 <sys_timeout_abs+0xd4>)
 800dfcc:	f004 ffbc 	bl	8012f48 <iprintf>
    return;
 800dfd0:	e04a      	b.n	800e068 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dfea:	4b24      	ldr	r3, [pc, #144]	; (800e07c <sys_timeout_abs+0xd8>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d103      	bne.n	800dffa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dff2:	4a22      	ldr	r2, [pc, #136]	; (800e07c <sys_timeout_abs+0xd8>)
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	6013      	str	r3, [r2, #0]
    return;
 800dff8:	e037      	b.n	800e06a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	4b1f      	ldr	r3, [pc, #124]	; (800e07c <sys_timeout_abs+0xd8>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	0fdb      	lsrs	r3, r3, #31
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d007      	beq.n	800e022 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e012:	4b1a      	ldr	r3, [pc, #104]	; (800e07c <sys_timeout_abs+0xd8>)
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e01a:	4a18      	ldr	r2, [pc, #96]	; (800e07c <sys_timeout_abs+0xd8>)
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	6013      	str	r3, [r2, #0]
 800e020:	e023      	b.n	800e06a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e022:	4b16      	ldr	r3, [pc, #88]	; (800e07c <sys_timeout_abs+0xd8>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	617b      	str	r3, [r7, #20]
 800e028:	e01a      	b.n	800e060 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00b      	beq.n	800e04a <sys_timeout_abs+0xa6>
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	0fdb      	lsrs	r3, r3, #31
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d007      	beq.n	800e05a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	693a      	ldr	r2, [r7, #16]
 800e056:	601a      	str	r2, [r3, #0]
        break;
 800e058:	e007      	b.n	800e06a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	617b      	str	r3, [r7, #20]
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1e1      	bne.n	800e02a <sys_timeout_abs+0x86>
 800e066:	e000      	b.n	800e06a <sys_timeout_abs+0xc6>
    return;
 800e068:	bf00      	nop
      }
    }
  }
}
 800e06a:	3718      	adds	r7, #24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	08015c50 	.word	0x08015c50
 800e074:	08015c84 	.word	0x08015c84
 800e078:	08015cc4 	.word	0x08015cc4
 800e07c:	2000881c 	.word	0x2000881c

0800e080 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	4798      	blx	r3

  now = sys_now();
 800e092:	f7f9 f8c1 	bl	8007218 <sys_now>
 800e096:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <lwip_cyclic_timer+0x5c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	0fdb      	lsrs	r3, r3, #31
 800e0ac:	f003 0301 	and.w	r3, r3, #1
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d009      	beq.n	800e0ca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	4413      	add	r3, r2
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	4907      	ldr	r1, [pc, #28]	; (800e0e0 <lwip_cyclic_timer+0x60>)
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff ff6e 	bl	800dfa4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e0c8:	e004      	b.n	800e0d4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	4904      	ldr	r1, [pc, #16]	; (800e0e0 <lwip_cyclic_timer+0x60>)
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f7ff ff68 	bl	800dfa4 <sys_timeout_abs>
}
 800e0d4:	bf00      	nop
 800e0d6:	3718      	adds	r7, #24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	20008820 	.word	0x20008820
 800e0e0:	0800e081 	.word	0x0800e081

0800e0e4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	607b      	str	r3, [r7, #4]
 800e0ee:	e00e      	b.n	800e10e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e0f0:	4a0b      	ldr	r2, [pc, #44]	; (800e120 <sys_timeouts_init+0x3c>)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	4a08      	ldr	r2, [pc, #32]	; (800e120 <sys_timeouts_init+0x3c>)
 800e0fe:	4413      	add	r3, r2
 800e100:	461a      	mov	r2, r3
 800e102:	4908      	ldr	r1, [pc, #32]	; (800e124 <sys_timeouts_init+0x40>)
 800e104:	f000 f810 	bl	800e128 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3301      	adds	r3, #1
 800e10c:	607b      	str	r3, [r7, #4]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b04      	cmp	r3, #4
 800e112:	d9ed      	bls.n	800e0f0 <sys_timeouts_init+0xc>
  }
}
 800e114:	bf00      	nop
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	08016be4 	.word	0x08016be4
 800e124:	0800e081 	.word	0x0800e081

0800e128 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e13a:	d306      	bcc.n	800e14a <sys_timeout+0x22>
 800e13c:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <sys_timeout+0x40>)
 800e13e:	f240 1229 	movw	r2, #297	; 0x129
 800e142:	490a      	ldr	r1, [pc, #40]	; (800e16c <sys_timeout+0x44>)
 800e144:	480a      	ldr	r0, [pc, #40]	; (800e170 <sys_timeout+0x48>)
 800e146:	f004 feff 	bl	8012f48 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e14a:	f7f9 f865 	bl	8007218 <sys_now>
 800e14e:	4602      	mov	r2, r0
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	4413      	add	r3, r2
 800e154:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	68b9      	ldr	r1, [r7, #8]
 800e15a:	6978      	ldr	r0, [r7, #20]
 800e15c:	f7ff ff22 	bl	800dfa4 <sys_timeout_abs>
#endif
}
 800e160:	bf00      	nop
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	08015c50 	.word	0x08015c50
 800e16c:	08015cec 	.word	0x08015cec
 800e170:	08015cc4 	.word	0x08015cc4

0800e174 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e178:	f004 fdf8 	bl	8012d6c <rand>
 800e17c:	4603      	mov	r3, r0
 800e17e:	b29b      	uxth	r3, r3
 800e180:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e184:	b29b      	uxth	r3, r3
 800e186:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	4b01      	ldr	r3, [pc, #4]	; (800e194 <udp_init+0x20>)
 800e18e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e190:	bf00      	nop
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20000010 	.word	0x20000010

0800e198 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e1a2:	4b17      	ldr	r3, [pc, #92]	; (800e200 <udp_new_port+0x68>)
 800e1a4:	881b      	ldrh	r3, [r3, #0]
 800e1a6:	1c5a      	adds	r2, r3, #1
 800e1a8:	b291      	uxth	r1, r2
 800e1aa:	4a15      	ldr	r2, [pc, #84]	; (800e200 <udp_new_port+0x68>)
 800e1ac:	8011      	strh	r1, [r2, #0]
 800e1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d103      	bne.n	800e1be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e1b6:	4b12      	ldr	r3, [pc, #72]	; (800e200 <udp_new_port+0x68>)
 800e1b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e1bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1be:	4b11      	ldr	r3, [pc, #68]	; (800e204 <udp_new_port+0x6c>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	603b      	str	r3, [r7, #0]
 800e1c4:	e011      	b.n	800e1ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	8a5a      	ldrh	r2, [r3, #18]
 800e1ca:	4b0d      	ldr	r3, [pc, #52]	; (800e200 <udp_new_port+0x68>)
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d108      	bne.n	800e1e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e1d2:	88fb      	ldrh	r3, [r7, #6]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	80fb      	strh	r3, [r7, #6]
 800e1d8:	88fb      	ldrh	r3, [r7, #6]
 800e1da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1de:	d3e0      	bcc.n	800e1a2 <udp_new_port+0xa>
        return 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	e007      	b.n	800e1f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	603b      	str	r3, [r7, #0]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1ea      	bne.n	800e1c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e1f0:	4b03      	ldr	r3, [pc, #12]	; (800e200 <udp_new_port+0x68>)
 800e1f2:	881b      	ldrh	r3, [r3, #0]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr
 800e200:	20000010 	.word	0x20000010
 800e204:	20008828 	.word	0x20008828

0800e208 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	4613      	mov	r3, r2
 800e214:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d105      	bne.n	800e228 <udp_input_local_match+0x20>
 800e21c:	4b27      	ldr	r3, [pc, #156]	; (800e2bc <udp_input_local_match+0xb4>)
 800e21e:	2287      	movs	r2, #135	; 0x87
 800e220:	4927      	ldr	r1, [pc, #156]	; (800e2c0 <udp_input_local_match+0xb8>)
 800e222:	4828      	ldr	r0, [pc, #160]	; (800e2c4 <udp_input_local_match+0xbc>)
 800e224:	f004 fe90 	bl	8012f48 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d105      	bne.n	800e23a <udp_input_local_match+0x32>
 800e22e:	4b23      	ldr	r3, [pc, #140]	; (800e2bc <udp_input_local_match+0xb4>)
 800e230:	2288      	movs	r2, #136	; 0x88
 800e232:	4925      	ldr	r1, [pc, #148]	; (800e2c8 <udp_input_local_match+0xc0>)
 800e234:	4823      	ldr	r0, [pc, #140]	; (800e2c4 <udp_input_local_match+0xbc>)
 800e236:	f004 fe87 	bl	8012f48 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	7a1b      	ldrb	r3, [r3, #8]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00b      	beq.n	800e25a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	7a1a      	ldrb	r2, [r3, #8]
 800e246:	4b21      	ldr	r3, [pc, #132]	; (800e2cc <udp_input_local_match+0xc4>)
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e24e:	3301      	adds	r3, #1
 800e250:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e252:	429a      	cmp	r2, r3
 800e254:	d001      	beq.n	800e25a <udp_input_local_match+0x52>
    return 0;
 800e256:	2300      	movs	r3, #0
 800e258:	e02b      	b.n	800e2b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d018      	beq.n	800e292 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d013      	beq.n	800e28e <udp_input_local_match+0x86>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00f      	beq.n	800e28e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e26e:	4b17      	ldr	r3, [pc, #92]	; (800e2cc <udp_input_local_match+0xc4>)
 800e270:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e276:	d00a      	beq.n	800e28e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	4b13      	ldr	r3, [pc, #76]	; (800e2cc <udp_input_local_match+0xc4>)
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	405a      	eors	r2, r3
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	3308      	adds	r3, #8
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d110      	bne.n	800e2b0 <udp_input_local_match+0xa8>
          return 1;
 800e28e:	2301      	movs	r3, #1
 800e290:	e00f      	b.n	800e2b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d009      	beq.n	800e2ac <udp_input_local_match+0xa4>
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d005      	beq.n	800e2ac <udp_input_local_match+0xa4>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <udp_input_local_match+0xc4>)
 800e2a6:	695b      	ldr	r3, [r3, #20]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d101      	bne.n	800e2b0 <udp_input_local_match+0xa8>
        return 1;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e000      	b.n	800e2b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	08015d38 	.word	0x08015d38
 800e2c0:	08015d68 	.word	0x08015d68
 800e2c4:	08015d8c 	.word	0x08015d8c
 800e2c8:	08015db4 	.word	0x08015db4
 800e2cc:	2000523c 	.word	0x2000523c

0800e2d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e2d0:	b590      	push	{r4, r7, lr}
 800e2d2:	b08d      	sub	sp, #52	; 0x34
 800e2d4:	af02      	add	r7, sp, #8
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d105      	bne.n	800e2f0 <udp_input+0x20>
 800e2e4:	4b7c      	ldr	r3, [pc, #496]	; (800e4d8 <udp_input+0x208>)
 800e2e6:	22cf      	movs	r2, #207	; 0xcf
 800e2e8:	497c      	ldr	r1, [pc, #496]	; (800e4dc <udp_input+0x20c>)
 800e2ea:	487d      	ldr	r0, [pc, #500]	; (800e4e0 <udp_input+0x210>)
 800e2ec:	f004 fe2c 	bl	8012f48 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d105      	bne.n	800e302 <udp_input+0x32>
 800e2f6:	4b78      	ldr	r3, [pc, #480]	; (800e4d8 <udp_input+0x208>)
 800e2f8:	22d0      	movs	r2, #208	; 0xd0
 800e2fa:	497a      	ldr	r1, [pc, #488]	; (800e4e4 <udp_input+0x214>)
 800e2fc:	4878      	ldr	r0, [pc, #480]	; (800e4e0 <udp_input+0x210>)
 800e2fe:	f004 fe23 	bl	8012f48 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	895b      	ldrh	r3, [r3, #10]
 800e306:	2b07      	cmp	r3, #7
 800e308:	d803      	bhi.n	800e312 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7fa fa30 	bl	8008770 <pbuf_free>
    goto end;
 800e310:	e0de      	b.n	800e4d0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e318:	4b73      	ldr	r3, [pc, #460]	; (800e4e8 <udp_input+0x218>)
 800e31a:	695b      	ldr	r3, [r3, #20]
 800e31c:	4a72      	ldr	r2, [pc, #456]	; (800e4e8 <udp_input+0x218>)
 800e31e:	6812      	ldr	r2, [r2, #0]
 800e320:	4611      	mov	r1, r2
 800e322:	4618      	mov	r0, r3
 800e324:	f003 fdcc 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 800e328:	4603      	mov	r3, r0
 800e32a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	b29b      	uxth	r3, r3
 800e332:	4618      	mov	r0, r3
 800e334:	f7f8 ff81 	bl	800723a <lwip_htons>
 800e338:	4603      	mov	r3, r0
 800e33a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	885b      	ldrh	r3, [r3, #2]
 800e340:	b29b      	uxth	r3, r3
 800e342:	4618      	mov	r0, r3
 800e344:	f7f8 ff79 	bl	800723a <lwip_htons>
 800e348:	4603      	mov	r3, r0
 800e34a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e350:	2300      	movs	r3, #0
 800e352:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e354:	2300      	movs	r3, #0
 800e356:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e358:	4b64      	ldr	r3, [pc, #400]	; (800e4ec <udp_input+0x21c>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	627b      	str	r3, [r7, #36]	; 0x24
 800e35e:	e054      	b.n	800e40a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	8a5b      	ldrh	r3, [r3, #18]
 800e364:	89fa      	ldrh	r2, [r7, #14]
 800e366:	429a      	cmp	r2, r3
 800e368:	d14a      	bne.n	800e400 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e36a:	7cfb      	ldrb	r3, [r7, #19]
 800e36c:	461a      	mov	r2, r3
 800e36e:	6839      	ldr	r1, [r7, #0]
 800e370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e372:	f7ff ff49 	bl	800e208 <udp_input_local_match>
 800e376:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d041      	beq.n	800e400 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37e:	7c1b      	ldrb	r3, [r3, #16]
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	2b00      	cmp	r3, #0
 800e386:	d11d      	bne.n	800e3c4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d102      	bne.n	800e394 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	61fb      	str	r3, [r7, #28]
 800e392:	e017      	b.n	800e3c4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e394:	7cfb      	ldrb	r3, [r7, #19]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d014      	beq.n	800e3c4 <udp_input+0xf4>
 800e39a:	4b53      	ldr	r3, [pc, #332]	; (800e4e8 <udp_input+0x218>)
 800e39c:	695b      	ldr	r3, [r3, #20]
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a2:	d10f      	bne.n	800e3c4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d008      	beq.n	800e3c4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d101      	bne.n	800e3c4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	8a9b      	ldrh	r3, [r3, #20]
 800e3c8:	8a3a      	ldrh	r2, [r7, #16]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d118      	bne.n	800e400 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d005      	beq.n	800e3e2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	685a      	ldr	r2, [r3, #4]
 800e3da:	4b43      	ldr	r3, [pc, #268]	; (800e4e8 <udp_input+0x218>)
 800e3dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d10e      	bne.n	800e400 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e3e2:	6a3b      	ldr	r3, [r7, #32]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d014      	beq.n	800e412 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	68da      	ldr	r2, [r3, #12]
 800e3ec:	6a3b      	ldr	r3, [r7, #32]
 800e3ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e3f0:	4b3e      	ldr	r3, [pc, #248]	; (800e4ec <udp_input+0x21c>)
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e3f8:	4a3c      	ldr	r2, [pc, #240]	; (800e4ec <udp_input+0x21c>)
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e3fe:	e008      	b.n	800e412 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	627b      	str	r3, [r7, #36]	; 0x24
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1a7      	bne.n	800e360 <udp_input+0x90>
 800e410:	e000      	b.n	800e414 <udp_input+0x144>
        break;
 800e412:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <udp_input+0x14e>
    pcb = uncon_pcb;
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <udp_input+0x15a>
    for_us = 1;
 800e424:	2301      	movs	r3, #1
 800e426:	76fb      	strb	r3, [r7, #27]
 800e428:	e00a      	b.n	800e440 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	3304      	adds	r3, #4
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	4b2d      	ldr	r3, [pc, #180]	; (800e4e8 <udp_input+0x218>)
 800e432:	695b      	ldr	r3, [r3, #20]
 800e434:	429a      	cmp	r2, r3
 800e436:	bf0c      	ite	eq
 800e438:	2301      	moveq	r3, #1
 800e43a:	2300      	movne	r3, #0
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e440:	7efb      	ldrb	r3, [r7, #27]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d041      	beq.n	800e4ca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e446:	2108      	movs	r1, #8
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7fa f90b 	bl	8008664 <pbuf_remove_header>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e454:	4b20      	ldr	r3, [pc, #128]	; (800e4d8 <udp_input+0x208>)
 800e456:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e45a:	4925      	ldr	r1, [pc, #148]	; (800e4f0 <udp_input+0x220>)
 800e45c:	4820      	ldr	r0, [pc, #128]	; (800e4e0 <udp_input+0x210>)
 800e45e:	f004 fd73 	bl	8012f48 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fa f984 	bl	8008770 <pbuf_free>
      goto end;
 800e468:	e032      	b.n	800e4d0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d012      	beq.n	800e496 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00a      	beq.n	800e48e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	699c      	ldr	r4, [r3, #24]
 800e47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47e:	69d8      	ldr	r0, [r3, #28]
 800e480:	8a3b      	ldrh	r3, [r7, #16]
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	4b1b      	ldr	r3, [pc, #108]	; (800e4f4 <udp_input+0x224>)
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e48a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e48c:	e021      	b.n	800e4d2 <udp_input+0x202>
        pbuf_free(p);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7fa f96e 	bl	8008770 <pbuf_free>
        goto end;
 800e494:	e01c      	b.n	800e4d0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e496:	7cfb      	ldrb	r3, [r7, #19]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d112      	bne.n	800e4c2 <udp_input+0x1f2>
 800e49c:	4b12      	ldr	r3, [pc, #72]	; (800e4e8 <udp_input+0x218>)
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4a4:	2be0      	cmp	r3, #224	; 0xe0
 800e4a6:	d00c      	beq.n	800e4c2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e4a8:	4b0f      	ldr	r3, [pc, #60]	; (800e4e8 <udp_input+0x218>)
 800e4aa:	899b      	ldrh	r3, [r3, #12]
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	b21b      	sxth	r3, r3
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7fa f948 	bl	800874a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e4ba:	2103      	movs	r1, #3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f003 f9c1 	bl	8011844 <icmp_dest_unreach>
      pbuf_free(p);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7fa f954 	bl	8008770 <pbuf_free>
  return;
 800e4c8:	e003      	b.n	800e4d2 <udp_input+0x202>
    pbuf_free(p);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7fa f950 	bl	8008770 <pbuf_free>
  return;
 800e4d0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e4d2:	372c      	adds	r7, #44	; 0x2c
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd90      	pop	{r4, r7, pc}
 800e4d8:	08015d38 	.word	0x08015d38
 800e4dc:	08015ddc 	.word	0x08015ddc
 800e4e0:	08015d8c 	.word	0x08015d8c
 800e4e4:	08015df4 	.word	0x08015df4
 800e4e8:	2000523c 	.word	0x2000523c
 800e4ec:	20008828 	.word	0x20008828
 800e4f0:	08015e10 	.word	0x08015e10
 800e4f4:	2000524c 	.word	0x2000524c

0800e4f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af02      	add	r7, sp, #8
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	607a      	str	r2, [r7, #4]
 800e504:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d109      	bne.n	800e520 <udp_sendto_if+0x28>
 800e50c:	4b2e      	ldr	r3, [pc, #184]	; (800e5c8 <udp_sendto_if+0xd0>)
 800e50e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e512:	492e      	ldr	r1, [pc, #184]	; (800e5cc <udp_sendto_if+0xd4>)
 800e514:	482e      	ldr	r0, [pc, #184]	; (800e5d0 <udp_sendto_if+0xd8>)
 800e516:	f004 fd17 	bl	8012f48 <iprintf>
 800e51a:	f06f 030f 	mvn.w	r3, #15
 800e51e:	e04f      	b.n	800e5c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d109      	bne.n	800e53a <udp_sendto_if+0x42>
 800e526:	4b28      	ldr	r3, [pc, #160]	; (800e5c8 <udp_sendto_if+0xd0>)
 800e528:	f240 2281 	movw	r2, #641	; 0x281
 800e52c:	4929      	ldr	r1, [pc, #164]	; (800e5d4 <udp_sendto_if+0xdc>)
 800e52e:	4828      	ldr	r0, [pc, #160]	; (800e5d0 <udp_sendto_if+0xd8>)
 800e530:	f004 fd0a 	bl	8012f48 <iprintf>
 800e534:	f06f 030f 	mvn.w	r3, #15
 800e538:	e042      	b.n	800e5c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d109      	bne.n	800e554 <udp_sendto_if+0x5c>
 800e540:	4b21      	ldr	r3, [pc, #132]	; (800e5c8 <udp_sendto_if+0xd0>)
 800e542:	f240 2282 	movw	r2, #642	; 0x282
 800e546:	4924      	ldr	r1, [pc, #144]	; (800e5d8 <udp_sendto_if+0xe0>)
 800e548:	4821      	ldr	r0, [pc, #132]	; (800e5d0 <udp_sendto_if+0xd8>)
 800e54a:	f004 fcfd 	bl	8012f48 <iprintf>
 800e54e:	f06f 030f 	mvn.w	r3, #15
 800e552:	e035      	b.n	800e5c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d109      	bne.n	800e56e <udp_sendto_if+0x76>
 800e55a:	4b1b      	ldr	r3, [pc, #108]	; (800e5c8 <udp_sendto_if+0xd0>)
 800e55c:	f240 2283 	movw	r2, #643	; 0x283
 800e560:	491e      	ldr	r1, [pc, #120]	; (800e5dc <udp_sendto_if+0xe4>)
 800e562:	481b      	ldr	r0, [pc, #108]	; (800e5d0 <udp_sendto_if+0xd8>)
 800e564:	f004 fcf0 	bl	8012f48 <iprintf>
 800e568:	f06f 030f 	mvn.w	r3, #15
 800e56c:	e028      	b.n	800e5c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d009      	beq.n	800e588 <udp_sendto_if+0x90>
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d005      	beq.n	800e588 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e584:	2be0      	cmp	r3, #224	; 0xe0
 800e586:	d103      	bne.n	800e590 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e588:	6a3b      	ldr	r3, [r7, #32]
 800e58a:	3304      	adds	r3, #4
 800e58c:	617b      	str	r3, [r7, #20]
 800e58e:	e00b      	b.n	800e5a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	6a3b      	ldr	r3, [r7, #32]
 800e596:	3304      	adds	r3, #4
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d002      	beq.n	800e5a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e59e:	f06f 0303 	mvn.w	r3, #3
 800e5a2:	e00d      	b.n	800e5c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e5a8:	887a      	ldrh	r2, [r7, #2]
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	9301      	str	r3, [sp, #4]
 800e5ae:	6a3b      	ldr	r3, [r7, #32]
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	68b9      	ldr	r1, [r7, #8]
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f000 f811 	bl	800e5e0 <udp_sendto_if_src>
 800e5be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3718      	adds	r7, #24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	08015d38 	.word	0x08015d38
 800e5cc:	08015eac 	.word	0x08015eac
 800e5d0:	08015d8c 	.word	0x08015d8c
 800e5d4:	08015ec8 	.word	0x08015ec8
 800e5d8:	08015ee4 	.word	0x08015ee4
 800e5dc:	08015f04 	.word	0x08015f04

0800e5e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b08c      	sub	sp, #48	; 0x30
 800e5e4:	af04      	add	r7, sp, #16
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	607a      	str	r2, [r7, #4]
 800e5ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d109      	bne.n	800e608 <udp_sendto_if_src+0x28>
 800e5f4:	4b65      	ldr	r3, [pc, #404]	; (800e78c <udp_sendto_if_src+0x1ac>)
 800e5f6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e5fa:	4965      	ldr	r1, [pc, #404]	; (800e790 <udp_sendto_if_src+0x1b0>)
 800e5fc:	4865      	ldr	r0, [pc, #404]	; (800e794 <udp_sendto_if_src+0x1b4>)
 800e5fe:	f004 fca3 	bl	8012f48 <iprintf>
 800e602:	f06f 030f 	mvn.w	r3, #15
 800e606:	e0bc      	b.n	800e782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d109      	bne.n	800e622 <udp_sendto_if_src+0x42>
 800e60e:	4b5f      	ldr	r3, [pc, #380]	; (800e78c <udp_sendto_if_src+0x1ac>)
 800e610:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e614:	4960      	ldr	r1, [pc, #384]	; (800e798 <udp_sendto_if_src+0x1b8>)
 800e616:	485f      	ldr	r0, [pc, #380]	; (800e794 <udp_sendto_if_src+0x1b4>)
 800e618:	f004 fc96 	bl	8012f48 <iprintf>
 800e61c:	f06f 030f 	mvn.w	r3, #15
 800e620:	e0af      	b.n	800e782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d109      	bne.n	800e63c <udp_sendto_if_src+0x5c>
 800e628:	4b58      	ldr	r3, [pc, #352]	; (800e78c <udp_sendto_if_src+0x1ac>)
 800e62a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e62e:	495b      	ldr	r1, [pc, #364]	; (800e79c <udp_sendto_if_src+0x1bc>)
 800e630:	4858      	ldr	r0, [pc, #352]	; (800e794 <udp_sendto_if_src+0x1b4>)
 800e632:	f004 fc89 	bl	8012f48 <iprintf>
 800e636:	f06f 030f 	mvn.w	r3, #15
 800e63a:	e0a2      	b.n	800e782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d109      	bne.n	800e656 <udp_sendto_if_src+0x76>
 800e642:	4b52      	ldr	r3, [pc, #328]	; (800e78c <udp_sendto_if_src+0x1ac>)
 800e644:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e648:	4955      	ldr	r1, [pc, #340]	; (800e7a0 <udp_sendto_if_src+0x1c0>)
 800e64a:	4852      	ldr	r0, [pc, #328]	; (800e794 <udp_sendto_if_src+0x1b4>)
 800e64c:	f004 fc7c 	bl	8012f48 <iprintf>
 800e650:	f06f 030f 	mvn.w	r3, #15
 800e654:	e095      	b.n	800e782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d109      	bne.n	800e670 <udp_sendto_if_src+0x90>
 800e65c:	4b4b      	ldr	r3, [pc, #300]	; (800e78c <udp_sendto_if_src+0x1ac>)
 800e65e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e662:	4950      	ldr	r1, [pc, #320]	; (800e7a4 <udp_sendto_if_src+0x1c4>)
 800e664:	484b      	ldr	r0, [pc, #300]	; (800e794 <udp_sendto_if_src+0x1b4>)
 800e666:	f004 fc6f 	bl	8012f48 <iprintf>
 800e66a:	f06f 030f 	mvn.w	r3, #15
 800e66e:	e088      	b.n	800e782 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	8a5b      	ldrh	r3, [r3, #18]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d10f      	bne.n	800e698 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e678:	68f9      	ldr	r1, [r7, #12]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	8a5b      	ldrh	r3, [r3, #18]
 800e67e:	461a      	mov	r2, r3
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f000 f893 	bl	800e7ac <udp_bind>
 800e686:	4603      	mov	r3, r0
 800e688:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e68a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e692:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e696:	e074      	b.n	800e782 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	891b      	ldrh	r3, [r3, #8]
 800e69c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d902      	bls.n	800e6aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a8:	e06b      	b.n	800e782 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e6aa:	2108      	movs	r1, #8
 800e6ac:	68b8      	ldr	r0, [r7, #8]
 800e6ae:	f7f9 ffc9 	bl	8008644 <pbuf_add_header>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d015      	beq.n	800e6e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e6b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6bc:	2108      	movs	r1, #8
 800e6be:	2022      	movs	r0, #34	; 0x22
 800e6c0:	f7f9 fd72 	bl	80081a8 <pbuf_alloc>
 800e6c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d0:	e057      	b.n	800e782 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	891b      	ldrh	r3, [r3, #8]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d006      	beq.n	800e6e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e6da:	68b9      	ldr	r1, [r7, #8]
 800e6dc:	69f8      	ldr	r0, [r7, #28]
 800e6de:	f7fa f95f 	bl	80089a0 <pbuf_chain>
 800e6e2:	e001      	b.n	800e6e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	895b      	ldrh	r3, [r3, #10]
 800e6ec:	2b07      	cmp	r3, #7
 800e6ee:	d806      	bhi.n	800e6fe <udp_sendto_if_src+0x11e>
 800e6f0:	4b26      	ldr	r3, [pc, #152]	; (800e78c <udp_sendto_if_src+0x1ac>)
 800e6f2:	f240 320d 	movw	r2, #781	; 0x30d
 800e6f6:	492c      	ldr	r1, [pc, #176]	; (800e7a8 <udp_sendto_if_src+0x1c8>)
 800e6f8:	4826      	ldr	r0, [pc, #152]	; (800e794 <udp_sendto_if_src+0x1b4>)
 800e6fa:	f004 fc25 	bl	8012f48 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	8a5b      	ldrh	r3, [r3, #18]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7f8 fd96 	bl	800723a <lwip_htons>
 800e70e:	4603      	mov	r3, r0
 800e710:	461a      	mov	r2, r3
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e716:	887b      	ldrh	r3, [r7, #2]
 800e718:	4618      	mov	r0, r3
 800e71a:	f7f8 fd8e 	bl	800723a <lwip_htons>
 800e71e:	4603      	mov	r3, r0
 800e720:	461a      	mov	r2, r3
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	2200      	movs	r2, #0
 800e72a:	719a      	strb	r2, [r3, #6]
 800e72c:	2200      	movs	r2, #0
 800e72e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	891b      	ldrh	r3, [r3, #8]
 800e734:	4618      	mov	r0, r3
 800e736:	f7f8 fd80 	bl	800723a <lwip_htons>
 800e73a:	4603      	mov	r3, r0
 800e73c:	461a      	mov	r2, r3
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e742:	2311      	movs	r3, #17
 800e744:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	7adb      	ldrb	r3, [r3, #11]
 800e74a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	7a9b      	ldrb	r3, [r3, #10]
 800e750:	7cb9      	ldrb	r1, [r7, #18]
 800e752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e754:	9202      	str	r2, [sp, #8]
 800e756:	7cfa      	ldrb	r2, [r7, #19]
 800e758:	9201      	str	r2, [sp, #4]
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	460b      	mov	r3, r1
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e762:	69f8      	ldr	r0, [r7, #28]
 800e764:	f003 fafe 	bl	8011d64 <ip4_output_if_src>
 800e768:	4603      	mov	r3, r0
 800e76a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e76c:	69fa      	ldr	r2, [r7, #28]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	429a      	cmp	r2, r3
 800e772:	d004      	beq.n	800e77e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e774:	69f8      	ldr	r0, [r7, #28]
 800e776:	f7f9 fffb 	bl	8008770 <pbuf_free>
    q = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e77e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3720      	adds	r7, #32
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	08015d38 	.word	0x08015d38
 800e790:	08015f24 	.word	0x08015f24
 800e794:	08015d8c 	.word	0x08015d8c
 800e798:	08015f44 	.word	0x08015f44
 800e79c:	08015f64 	.word	0x08015f64
 800e7a0:	08015f88 	.word	0x08015f88
 800e7a4:	08015fac 	.word	0x08015fac
 800e7a8:	08015fd0 	.word	0x08015fd0

0800e7ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e7c0:	4b39      	ldr	r3, [pc, #228]	; (800e8a8 <udp_bind+0xfc>)
 800e7c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d109      	bne.n	800e7de <udp_bind+0x32>
 800e7ca:	4b38      	ldr	r3, [pc, #224]	; (800e8ac <udp_bind+0x100>)
 800e7cc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e7d0:	4937      	ldr	r1, [pc, #220]	; (800e8b0 <udp_bind+0x104>)
 800e7d2:	4838      	ldr	r0, [pc, #224]	; (800e8b4 <udp_bind+0x108>)
 800e7d4:	f004 fbb8 	bl	8012f48 <iprintf>
 800e7d8:	f06f 030f 	mvn.w	r3, #15
 800e7dc:	e060      	b.n	800e8a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7e2:	4b35      	ldr	r3, [pc, #212]	; (800e8b8 <udp_bind+0x10c>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	617b      	str	r3, [r7, #20]
 800e7e8:	e009      	b.n	800e7fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d102      	bne.n	800e7f8 <udp_bind+0x4c>
      rebind = 1;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	74fb      	strb	r3, [r7, #19]
      break;
 800e7f6:	e005      	b.n	800e804 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	617b      	str	r3, [r7, #20]
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d1f2      	bne.n	800e7ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e804:	88fb      	ldrh	r3, [r7, #6]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d109      	bne.n	800e81e <udp_bind+0x72>
    port = udp_new_port();
 800e80a:	f7ff fcc5 	bl	800e198 <udp_new_port>
 800e80e:	4603      	mov	r3, r0
 800e810:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e812:	88fb      	ldrh	r3, [r7, #6]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d12c      	bne.n	800e872 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e818:	f06f 0307 	mvn.w	r3, #7
 800e81c:	e040      	b.n	800e8a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e81e:	4b26      	ldr	r3, [pc, #152]	; (800e8b8 <udp_bind+0x10c>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	617b      	str	r3, [r7, #20]
 800e824:	e022      	b.n	800e86c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d01b      	beq.n	800e866 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	8a5b      	ldrh	r3, [r3, #18]
 800e832:	88fa      	ldrh	r2, [r7, #6]
 800e834:	429a      	cmp	r2, r3
 800e836:	d116      	bne.n	800e866 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e840:	429a      	cmp	r2, r3
 800e842:	d00d      	beq.n	800e860 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00a      	beq.n	800e860 <udp_bind+0xb4>
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d006      	beq.n	800e860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e852:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e854:	2b00      	cmp	r3, #0
 800e856:	d003      	beq.n	800e860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d102      	bne.n	800e866 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e860:	f06f 0307 	mvn.w	r3, #7
 800e864:	e01c      	b.n	800e8a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	617b      	str	r3, [r7, #20]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1d9      	bne.n	800e826 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d002      	beq.n	800e87e <udp_bind+0xd2>
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	e000      	b.n	800e880 <udp_bind+0xd4>
 800e87e:	2300      	movs	r3, #0
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	88fa      	ldrh	r2, [r7, #6]
 800e888:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e88a:	7cfb      	ldrb	r3, [r7, #19]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d106      	bne.n	800e89e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e890:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <udp_bind+0x10c>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e898:	4a07      	ldr	r2, [pc, #28]	; (800e8b8 <udp_bind+0x10c>)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3718      	adds	r7, #24
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	08016c0c 	.word	0x08016c0c
 800e8ac:	08015d38 	.word	0x08015d38
 800e8b0:	08016000 	.word	0x08016000
 800e8b4:	08015d8c 	.word	0x08015d8c
 800e8b8:	20008828 	.word	0x20008828

0800e8bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d109      	bne.n	800e8e4 <udp_connect+0x28>
 800e8d0:	4b2c      	ldr	r3, [pc, #176]	; (800e984 <udp_connect+0xc8>)
 800e8d2:	f240 4235 	movw	r2, #1077	; 0x435
 800e8d6:	492c      	ldr	r1, [pc, #176]	; (800e988 <udp_connect+0xcc>)
 800e8d8:	482c      	ldr	r0, [pc, #176]	; (800e98c <udp_connect+0xd0>)
 800e8da:	f004 fb35 	bl	8012f48 <iprintf>
 800e8de:	f06f 030f 	mvn.w	r3, #15
 800e8e2:	e04b      	b.n	800e97c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d109      	bne.n	800e8fe <udp_connect+0x42>
 800e8ea:	4b26      	ldr	r3, [pc, #152]	; (800e984 <udp_connect+0xc8>)
 800e8ec:	f240 4236 	movw	r2, #1078	; 0x436
 800e8f0:	4927      	ldr	r1, [pc, #156]	; (800e990 <udp_connect+0xd4>)
 800e8f2:	4826      	ldr	r0, [pc, #152]	; (800e98c <udp_connect+0xd0>)
 800e8f4:	f004 fb28 	bl	8012f48 <iprintf>
 800e8f8:	f06f 030f 	mvn.w	r3, #15
 800e8fc:	e03e      	b.n	800e97c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	8a5b      	ldrh	r3, [r3, #18]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10f      	bne.n	800e926 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e906:	68f9      	ldr	r1, [r7, #12]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	8a5b      	ldrh	r3, [r3, #18]
 800e90c:	461a      	mov	r2, r3
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	f7ff ff4c 	bl	800e7ac <udp_bind>
 800e914:	4603      	mov	r3, r0
 800e916:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e918:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <udp_connect+0x6a>
      return err;
 800e920:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e924:	e02a      	b.n	800e97c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d002      	beq.n	800e932 <udp_connect+0x76>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	e000      	b.n	800e934 <udp_connect+0x78>
 800e932:	2300      	movs	r3, #0
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	88fa      	ldrh	r2, [r7, #6]
 800e93c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	7c1b      	ldrb	r3, [r3, #16]
 800e942:	f043 0304 	orr.w	r3, r3, #4
 800e946:	b2da      	uxtb	r2, r3
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e94c:	4b11      	ldr	r3, [pc, #68]	; (800e994 <udp_connect+0xd8>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	617b      	str	r3, [r7, #20]
 800e952:	e008      	b.n	800e966 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d101      	bne.n	800e960 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	e00d      	b.n	800e97c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	617b      	str	r3, [r7, #20]
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1f3      	bne.n	800e954 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e96c:	4b09      	ldr	r3, [pc, #36]	; (800e994 <udp_connect+0xd8>)
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e974:	4a07      	ldr	r2, [pc, #28]	; (800e994 <udp_connect+0xd8>)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	08015d38 	.word	0x08015d38
 800e988:	08016018 	.word	0x08016018
 800e98c:	08015d8c 	.word	0x08015d8c
 800e990:	08016034 	.word	0x08016034
 800e994:	20008828 	.word	0x20008828

0800e998 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d107      	bne.n	800e9ba <udp_recv+0x22>
 800e9aa:	4b08      	ldr	r3, [pc, #32]	; (800e9cc <udp_recv+0x34>)
 800e9ac:	f240 428a 	movw	r2, #1162	; 0x48a
 800e9b0:	4907      	ldr	r1, [pc, #28]	; (800e9d0 <udp_recv+0x38>)
 800e9b2:	4808      	ldr	r0, [pc, #32]	; (800e9d4 <udp_recv+0x3c>)
 800e9b4:	f004 fac8 	bl	8012f48 <iprintf>
 800e9b8:	e005      	b.n	800e9c6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	61da      	str	r2, [r3, #28]
}
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	08015d38 	.word	0x08015d38
 800e9d0:	0801606c 	.word	0x0801606c
 800e9d4:	08015d8c 	.word	0x08015d8c

0800e9d8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d107      	bne.n	800e9f6 <udp_remove+0x1e>
 800e9e6:	4b19      	ldr	r3, [pc, #100]	; (800ea4c <udp_remove+0x74>)
 800e9e8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e9ec:	4918      	ldr	r1, [pc, #96]	; (800ea50 <udp_remove+0x78>)
 800e9ee:	4819      	ldr	r0, [pc, #100]	; (800ea54 <udp_remove+0x7c>)
 800e9f0:	f004 faaa 	bl	8012f48 <iprintf>
 800e9f4:	e026      	b.n	800ea44 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e9f6:	4b18      	ldr	r3, [pc, #96]	; (800ea58 <udp_remove+0x80>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d105      	bne.n	800ea0c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ea00:	4b15      	ldr	r3, [pc, #84]	; (800ea58 <udp_remove+0x80>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	4a14      	ldr	r2, [pc, #80]	; (800ea58 <udp_remove+0x80>)
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	e017      	b.n	800ea3c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ea0c:	4b12      	ldr	r3, [pc, #72]	; (800ea58 <udp_remove+0x80>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	60fb      	str	r3, [r7, #12]
 800ea12:	e010      	b.n	800ea36 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d009      	beq.n	800ea30 <udp_remove+0x58>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d104      	bne.n	800ea30 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	68da      	ldr	r2, [r3, #12]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	60da      	str	r2, [r3, #12]
        break;
 800ea2e:	e005      	b.n	800ea3c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1eb      	bne.n	800ea14 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ea3c:	6879      	ldr	r1, [r7, #4]
 800ea3e:	2000      	movs	r0, #0
 800ea40:	f7f9 f89c 	bl	8007b7c <memp_free>
}
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	08015d38 	.word	0x08015d38
 800ea50:	08016084 	.word	0x08016084
 800ea54:	08015d8c 	.word	0x08015d8c
 800ea58:	20008828 	.word	0x20008828

0800ea5c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ea62:	2000      	movs	r0, #0
 800ea64:	f7f9 f83e 	bl	8007ae4 <memp_malloc>
 800ea68:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d007      	beq.n	800ea80 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ea70:	2220      	movs	r2, #32
 800ea72:	2100      	movs	r1, #0
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f004 facc 	bl	8013012 <memset>
    pcb->ttl = UDP_TTL;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	22ff      	movs	r2, #255	; 0xff
 800ea7e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ea80:	687b      	ldr	r3, [r7, #4]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
	...

0800ea8c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d01e      	beq.n	800eada <udp_netif_ip_addr_changed+0x4e>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d01a      	beq.n	800eada <udp_netif_ip_addr_changed+0x4e>
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d017      	beq.n	800eada <udp_netif_ip_addr_changed+0x4e>
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d013      	beq.n	800eada <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eab2:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <udp_netif_ip_addr_changed+0x5c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	60fb      	str	r3, [r7, #12]
 800eab8:	e00c      	b.n	800ead4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d103      	bne.n	800eace <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1ef      	bne.n	800eaba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800eada:	bf00      	nop
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	20008828 	.word	0x20008828

0800eaec <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800eaf0:	4b20      	ldr	r3, [pc, #128]	; (800eb74 <dhcp_inc_pcb_refcount+0x88>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d133      	bne.n	800eb60 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800eaf8:	4b1f      	ldr	r3, [pc, #124]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d005      	beq.n	800eb0c <dhcp_inc_pcb_refcount+0x20>
 800eb00:	4b1e      	ldr	r3, [pc, #120]	; (800eb7c <dhcp_inc_pcb_refcount+0x90>)
 800eb02:	22e5      	movs	r2, #229	; 0xe5
 800eb04:	491e      	ldr	r1, [pc, #120]	; (800eb80 <dhcp_inc_pcb_refcount+0x94>)
 800eb06:	481f      	ldr	r0, [pc, #124]	; (800eb84 <dhcp_inc_pcb_refcount+0x98>)
 800eb08:	f004 fa1e 	bl	8012f48 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800eb0c:	f7ff ffa6 	bl	800ea5c <udp_new>
 800eb10:	4603      	mov	r3, r0
 800eb12:	4a19      	ldr	r2, [pc, #100]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eb14:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800eb16:	4b18      	ldr	r3, [pc, #96]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d102      	bne.n	800eb24 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800eb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb22:	e024      	b.n	800eb6e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800eb24:	4b14      	ldr	r3, [pc, #80]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	7a5a      	ldrb	r2, [r3, #9]
 800eb2a:	4b13      	ldr	r3, [pc, #76]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f042 0220 	orr.w	r2, r2, #32
 800eb32:	b2d2      	uxtb	r2, r2
 800eb34:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800eb36:	4b10      	ldr	r3, [pc, #64]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2244      	movs	r2, #68	; 0x44
 800eb3c:	4912      	ldr	r1, [pc, #72]	; (800eb88 <dhcp_inc_pcb_refcount+0x9c>)
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff fe34 	bl	800e7ac <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800eb44:	4b0c      	ldr	r3, [pc, #48]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2243      	movs	r2, #67	; 0x43
 800eb4a:	490f      	ldr	r1, [pc, #60]	; (800eb88 <dhcp_inc_pcb_refcount+0x9c>)
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff feb5 	bl	800e8bc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800eb52:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <dhcp_inc_pcb_refcount+0x8c>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2200      	movs	r2, #0
 800eb58:	490c      	ldr	r1, [pc, #48]	; (800eb8c <dhcp_inc_pcb_refcount+0xa0>)
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7ff ff1c 	bl	800e998 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800eb60:	4b04      	ldr	r3, [pc, #16]	; (800eb74 <dhcp_inc_pcb_refcount+0x88>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	3301      	adds	r3, #1
 800eb66:	b2da      	uxtb	r2, r3
 800eb68:	4b02      	ldr	r3, [pc, #8]	; (800eb74 <dhcp_inc_pcb_refcount+0x88>)
 800eb6a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800eb6c:	2300      	movs	r3, #0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	20008858 	.word	0x20008858
 800eb78:	20008854 	.word	0x20008854
 800eb7c:	0801609c 	.word	0x0801609c
 800eb80:	080160d4 	.word	0x080160d4
 800eb84:	080160fc 	.word	0x080160fc
 800eb88:	08016c0c 	.word	0x08016c0c
 800eb8c:	080103ad 	.word	0x080103ad

0800eb90 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <dhcp_dec_pcb_refcount+0x40>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d105      	bne.n	800eba8 <dhcp_dec_pcb_refcount+0x18>
 800eb9c:	4b0d      	ldr	r3, [pc, #52]	; (800ebd4 <dhcp_dec_pcb_refcount+0x44>)
 800eb9e:	22ff      	movs	r2, #255	; 0xff
 800eba0:	490d      	ldr	r1, [pc, #52]	; (800ebd8 <dhcp_dec_pcb_refcount+0x48>)
 800eba2:	480e      	ldr	r0, [pc, #56]	; (800ebdc <dhcp_dec_pcb_refcount+0x4c>)
 800eba4:	f004 f9d0 	bl	8012f48 <iprintf>
  dhcp_pcb_refcount--;
 800eba8:	4b09      	ldr	r3, [pc, #36]	; (800ebd0 <dhcp_dec_pcb_refcount+0x40>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	3b01      	subs	r3, #1
 800ebae:	b2da      	uxtb	r2, r3
 800ebb0:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <dhcp_dec_pcb_refcount+0x40>)
 800ebb2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ebb4:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <dhcp_dec_pcb_refcount+0x40>)
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d107      	bne.n	800ebcc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ebbc:	4b08      	ldr	r3, [pc, #32]	; (800ebe0 <dhcp_dec_pcb_refcount+0x50>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff ff09 	bl	800e9d8 <udp_remove>
    dhcp_pcb = NULL;
 800ebc6:	4b06      	ldr	r3, [pc, #24]	; (800ebe0 <dhcp_dec_pcb_refcount+0x50>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	601a      	str	r2, [r3, #0]
  }
}
 800ebcc:	bf00      	nop
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	20008858 	.word	0x20008858
 800ebd4:	0801609c 	.word	0x0801609c
 800ebd8:	08016124 	.word	0x08016124
 800ebdc:	080160fc 	.word	0x080160fc
 800ebe0:	20008854 	.word	0x20008854

0800ebe4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ebf2:	210c      	movs	r1, #12
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f001 f81b 	bl	800fc30 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ebfa:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <dhcp_handle_nak+0x30>)
 800ebfc:	4a05      	ldr	r2, [pc, #20]	; (800ec14 <dhcp_handle_nak+0x30>)
 800ebfe:	4905      	ldr	r1, [pc, #20]	; (800ec14 <dhcp_handle_nak+0x30>)
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7f9 f95d 	bl	8007ec0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 fc0e 	bl	800f428 <dhcp_discover>
}
 800ec0c:	bf00      	nop
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	08016c0c 	.word	0x08016c0c

0800ec18 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec24:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ec26:	2108      	movs	r1, #8
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f001 f801 	bl	800fc30 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	331c      	adds	r3, #28
 800ec32:	2200      	movs	r2, #0
 800ec34:	4619      	mov	r1, r3
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f002 fb02 	bl	8011240 <etharp_query>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	799b      	ldrb	r3, [r3, #6]
 800ec44:	2bff      	cmp	r3, #255	; 0xff
 800ec46:	d005      	beq.n	800ec54 <dhcp_check+0x3c>
    dhcp->tries++;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	799b      	ldrb	r3, [r3, #6]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	b2da      	uxtb	r2, r3
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800ec54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ec58:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ec5a:	893b      	ldrh	r3, [r7, #8]
 800ec5c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ec60:	4a06      	ldr	r2, [pc, #24]	; (800ec7c <dhcp_check+0x64>)
 800ec62:	fb82 1203 	smull	r1, r2, r2, r3
 800ec66:	1152      	asrs	r2, r2, #5
 800ec68:	17db      	asrs	r3, r3, #31
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800ec72:	bf00      	nop
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	10624dd3 	.word	0x10624dd3

0800ec80 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800ec90:	4b0c      	ldr	r3, [pc, #48]	; (800ecc4 <dhcp_handle_offer+0x44>)
 800ec92:	789b      	ldrb	r3, [r3, #2]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d011      	beq.n	800ecbc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800ec9e:	4b0a      	ldr	r3, [pc, #40]	; (800ecc8 <dhcp_handle_offer+0x48>)
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7f8 fade 	bl	8007264 <lwip_htonl>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	691a      	ldr	r2, [r3, #16]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f808 	bl	800eccc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800ecbc:	bf00      	nop
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	2000884c 	.word	0x2000884c
 800ecc8:	2000882c 	.word	0x2000882c

0800eccc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800eccc:	b5b0      	push	{r4, r5, r7, lr}
 800ecce:	b08a      	sub	sp, #40	; 0x28
 800ecd0:	af02      	add	r7, sp, #8
 800ecd2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d109      	bne.n	800ecee <dhcp_select+0x22>
 800ecda:	4b71      	ldr	r3, [pc, #452]	; (800eea0 <dhcp_select+0x1d4>)
 800ecdc:	f240 1277 	movw	r2, #375	; 0x177
 800ece0:	4970      	ldr	r1, [pc, #448]	; (800eea4 <dhcp_select+0x1d8>)
 800ece2:	4871      	ldr	r0, [pc, #452]	; (800eea8 <dhcp_select+0x1dc>)
 800ece4:	f004 f930 	bl	8012f48 <iprintf>
 800ece8:	f06f 030f 	mvn.w	r3, #15
 800ecec:	e0d3      	b.n	800ee96 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d109      	bne.n	800ed0e <dhcp_select+0x42>
 800ecfa:	4b69      	ldr	r3, [pc, #420]	; (800eea0 <dhcp_select+0x1d4>)
 800ecfc:	f240 1279 	movw	r2, #377	; 0x179
 800ed00:	496a      	ldr	r1, [pc, #424]	; (800eeac <dhcp_select+0x1e0>)
 800ed02:	4869      	ldr	r0, [pc, #420]	; (800eea8 <dhcp_select+0x1dc>)
 800ed04:	f004 f920 	bl	8012f48 <iprintf>
 800ed08:	f06f 0305 	mvn.w	r3, #5
 800ed0c:	e0c3      	b.n	800ee96 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ed0e:	2101      	movs	r1, #1
 800ed10:	69b8      	ldr	r0, [r7, #24]
 800ed12:	f000 ff8d 	bl	800fc30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ed16:	f107 030c 	add.w	r3, r7, #12
 800ed1a:	2203      	movs	r2, #3
 800ed1c:	69b9      	ldr	r1, [r7, #24]
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f001 fc12 	bl	8010548 <dhcp_create_msg>
 800ed24:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 8085 	beq.w	800ee38 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ed34:	89b8      	ldrh	r0, [r7, #12]
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed3c:	2302      	movs	r3, #2
 800ed3e:	2239      	movs	r2, #57	; 0x39
 800ed40:	f000 ff90 	bl	800fc64 <dhcp_option>
 800ed44:	4603      	mov	r3, r0
 800ed46:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ed48:	89b8      	ldrh	r0, [r7, #12]
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed54:	461a      	mov	r2, r3
 800ed56:	f000 ffdf 	bl	800fd18 <dhcp_option_short>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ed5e:	89b8      	ldrh	r0, [r7, #12]
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed66:	2304      	movs	r3, #4
 800ed68:	2232      	movs	r2, #50	; 0x32
 800ed6a:	f000 ff7b 	bl	800fc64 <dhcp_option>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ed72:	89bc      	ldrh	r4, [r7, #12]
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	69db      	ldr	r3, [r3, #28]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7f8 fa70 	bl	8007264 <lwip_htonl>
 800ed84:	4603      	mov	r3, r0
 800ed86:	461a      	mov	r2, r3
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 fff6 	bl	800fd7c <dhcp_option_long>
 800ed90:	4603      	mov	r3, r0
 800ed92:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ed94:	89b8      	ldrh	r0, [r7, #12]
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed9c:	2304      	movs	r3, #4
 800ed9e:	2236      	movs	r2, #54	; 0x36
 800eda0:	f000 ff60 	bl	800fc64 <dhcp_option>
 800eda4:	4603      	mov	r3, r0
 800eda6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800eda8:	89bc      	ldrh	r4, [r7, #12]
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7f8 fa55 	bl	8007264 <lwip_htonl>
 800edba:	4603      	mov	r3, r0
 800edbc:	461a      	mov	r2, r3
 800edbe:	4629      	mov	r1, r5
 800edc0:	4620      	mov	r0, r4
 800edc2:	f000 ffdb 	bl	800fd7c <dhcp_option_long>
 800edc6:	4603      	mov	r3, r0
 800edc8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800edca:	89b8      	ldrh	r0, [r7, #12]
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800edd2:	2303      	movs	r3, #3
 800edd4:	2237      	movs	r2, #55	; 0x37
 800edd6:	f000 ff45 	bl	800fc64 <dhcp_option>
 800edda:	4603      	mov	r3, r0
 800eddc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800edde:	2300      	movs	r3, #0
 800ede0:	77bb      	strb	r3, [r7, #30]
 800ede2:	e00e      	b.n	800ee02 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ede4:	89b8      	ldrh	r0, [r7, #12]
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800edec:	7fbb      	ldrb	r3, [r7, #30]
 800edee:	4a30      	ldr	r2, [pc, #192]	; (800eeb0 <dhcp_select+0x1e4>)
 800edf0:	5cd3      	ldrb	r3, [r2, r3]
 800edf2:	461a      	mov	r2, r3
 800edf4:	f000 ff6a 	bl	800fccc <dhcp_option_byte>
 800edf8:	4603      	mov	r3, r0
 800edfa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800edfc:	7fbb      	ldrb	r3, [r7, #30]
 800edfe:	3301      	adds	r3, #1
 800ee00:	77bb      	strb	r3, [r7, #30]
 800ee02:	7fbb      	ldrb	r3, [r7, #30]
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d9ed      	bls.n	800ede4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ee08:	89b8      	ldrh	r0, [r7, #12]
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	33f0      	adds	r3, #240	; 0xf0
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	4619      	mov	r1, r3
 800ee12:	f001 fc6f 	bl	80106f4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ee16:	4b27      	ldr	r3, [pc, #156]	; (800eeb4 <dhcp_select+0x1e8>)
 800ee18:	6818      	ldr	r0, [r3, #0]
 800ee1a:	4b27      	ldr	r3, [pc, #156]	; (800eeb8 <dhcp_select+0x1ec>)
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	2343      	movs	r3, #67	; 0x43
 800ee24:	4a25      	ldr	r2, [pc, #148]	; (800eebc <dhcp_select+0x1f0>)
 800ee26:	6979      	ldr	r1, [r7, #20]
 800ee28:	f7ff fbda 	bl	800e5e0 <udp_sendto_if_src>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ee30:	6978      	ldr	r0, [r7, #20]
 800ee32:	f7f9 fc9d 	bl	8008770 <pbuf_free>
 800ee36:	e001      	b.n	800ee3c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ee38:	23ff      	movs	r3, #255	; 0xff
 800ee3a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	799b      	ldrb	r3, [r3, #6]
 800ee40:	2bff      	cmp	r3, #255	; 0xff
 800ee42:	d005      	beq.n	800ee50 <dhcp_select+0x184>
    dhcp->tries++;
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	799b      	ldrb	r3, [r3, #6]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	b2da      	uxtb	r2, r3
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	799b      	ldrb	r3, [r3, #6]
 800ee54:	2b05      	cmp	r3, #5
 800ee56:	d80d      	bhi.n	800ee74 <dhcp_select+0x1a8>
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	799b      	ldrb	r3, [r3, #6]
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	2301      	movs	r3, #1
 800ee60:	4093      	lsls	r3, r2
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	461a      	mov	r2, r3
 800ee66:	0152      	lsls	r2, r2, #5
 800ee68:	1ad2      	subs	r2, r2, r3
 800ee6a:	0092      	lsls	r2, r2, #2
 800ee6c:	4413      	add	r3, r2
 800ee6e:	00db      	lsls	r3, r3, #3
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	e001      	b.n	800ee78 <dhcp_select+0x1ac>
 800ee74:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ee78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ee7a:	89fb      	ldrh	r3, [r7, #14]
 800ee7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ee80:	4a0f      	ldr	r2, [pc, #60]	; (800eec0 <dhcp_select+0x1f4>)
 800ee82:	fb82 1203 	smull	r1, r2, r2, r3
 800ee86:	1152      	asrs	r2, r2, #5
 800ee88:	17db      	asrs	r3, r3, #31
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ee92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3720      	adds	r7, #32
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	0801609c 	.word	0x0801609c
 800eea4:	08016148 	.word	0x08016148
 800eea8:	080160fc 	.word	0x080160fc
 800eeac:	08016164 	.word	0x08016164
 800eeb0:	20000014 	.word	0x20000014
 800eeb4:	20008854 	.word	0x20008854
 800eeb8:	08016c0c 	.word	0x08016c0c
 800eebc:	08016c10 	.word	0x08016c10
 800eec0:	10624dd3 	.word	0x10624dd3

0800eec4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800eeca:	4b27      	ldr	r3, [pc, #156]	; (800ef68 <dhcp_coarse_tmr+0xa4>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	607b      	str	r3, [r7, #4]
 800eed0:	e042      	b.n	800ef58 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d039      	beq.n	800ef52 <dhcp_coarse_tmr+0x8e>
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	795b      	ldrb	r3, [r3, #5]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d035      	beq.n	800ef52 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	8a9b      	ldrh	r3, [r3, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d012      	beq.n	800ef14 <dhcp_coarse_tmr+0x50>
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	8a5b      	ldrh	r3, [r3, #18]
 800eef2:	3301      	adds	r3, #1
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	825a      	strh	r2, [r3, #18]
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	8a5a      	ldrh	r2, [r3, #18]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	8a9b      	ldrh	r3, [r3, #20]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d106      	bne.n	800ef14 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fdf8 	bl	800fafc <dhcp_release_and_stop>
        dhcp_start(netif);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f96b 	bl	800f1e8 <dhcp_start>
 800ef12:	e01e      	b.n	800ef52 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	8a1b      	ldrh	r3, [r3, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00b      	beq.n	800ef34 <dhcp_coarse_tmr+0x70>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	8a1b      	ldrh	r3, [r3, #16]
 800ef20:	1e5a      	subs	r2, r3, #1
 800ef22:	b291      	uxth	r1, r2
 800ef24:	683a      	ldr	r2, [r7, #0]
 800ef26:	8211      	strh	r1, [r2, #16]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d103      	bne.n	800ef34 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 f8c7 	bl	800f0c0 <dhcp_t2_timeout>
 800ef32:	e00e      	b.n	800ef52 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	89db      	ldrh	r3, [r3, #14]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00a      	beq.n	800ef52 <dhcp_coarse_tmr+0x8e>
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	89db      	ldrh	r3, [r3, #14]
 800ef40:	1e5a      	subs	r2, r3, #1
 800ef42:	b291      	uxth	r1, r2
 800ef44:	683a      	ldr	r2, [r7, #0]
 800ef46:	81d1      	strh	r1, [r2, #14]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d102      	bne.n	800ef52 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 f888 	bl	800f062 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	607b      	str	r3, [r7, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1b9      	bne.n	800eed2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ef5e:	bf00      	nop
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	200087c0 	.word	0x200087c0

0800ef6c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ef72:	4b16      	ldr	r3, [pc, #88]	; (800efcc <dhcp_fine_tmr+0x60>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	607b      	str	r3, [r7, #4]
 800ef78:	e020      	b.n	800efbc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d017      	beq.n	800efb6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	891b      	ldrh	r3, [r3, #8]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d906      	bls.n	800ef9c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	891b      	ldrh	r3, [r3, #8]
 800ef92:	3b01      	subs	r3, #1
 800ef94:	b29a      	uxth	r2, r3
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	811a      	strh	r2, [r3, #8]
 800ef9a:	e00c      	b.n	800efb6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	891b      	ldrh	r3, [r3, #8]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d108      	bne.n	800efb6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	891b      	ldrh	r3, [r3, #8]
 800efa8:	3b01      	subs	r3, #1
 800efaa:	b29a      	uxth	r2, r3
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 f80d 	bl	800efd0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	607b      	str	r3, [r7, #4]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1db      	bne.n	800ef7a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800efc2:	bf00      	nop
 800efc4:	bf00      	nop
 800efc6:	3708      	adds	r7, #8
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	200087c0 	.word	0x200087c0

0800efd0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efdc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	795b      	ldrb	r3, [r3, #5]
 800efe2:	2b0c      	cmp	r3, #12
 800efe4:	d003      	beq.n	800efee <dhcp_timeout+0x1e>
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	795b      	ldrb	r3, [r3, #5]
 800efea:	2b06      	cmp	r3, #6
 800efec:	d103      	bne.n	800eff6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 fa1a 	bl	800f428 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800eff4:	e031      	b.n	800f05a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	795b      	ldrb	r3, [r3, #5]
 800effa:	2b01      	cmp	r3, #1
 800effc:	d10e      	bne.n	800f01c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	799b      	ldrb	r3, [r3, #6]
 800f002:	2b05      	cmp	r3, #5
 800f004:	d803      	bhi.n	800f00e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7ff fe60 	bl	800eccc <dhcp_select>
}
 800f00c:	e025      	b.n	800f05a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fd74 	bl	800fafc <dhcp_release_and_stop>
      dhcp_start(netif);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f8e7 	bl	800f1e8 <dhcp_start>
}
 800f01a:	e01e      	b.n	800f05a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	795b      	ldrb	r3, [r3, #5]
 800f020:	2b08      	cmp	r3, #8
 800f022:	d10b      	bne.n	800f03c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	799b      	ldrb	r3, [r3, #6]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d803      	bhi.n	800f034 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7ff fdf3 	bl	800ec18 <dhcp_check>
}
 800f032:	e012      	b.n	800f05a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 fa99 	bl	800f56c <dhcp_bind>
}
 800f03a:	e00e      	b.n	800f05a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	795b      	ldrb	r3, [r3, #5]
 800f040:	2b03      	cmp	r3, #3
 800f042:	d10a      	bne.n	800f05a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	799b      	ldrb	r3, [r3, #6]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d803      	bhi.n	800f054 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fc9f 	bl	800f990 <dhcp_reboot>
}
 800f052:	e002      	b.n	800f05a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 f9e7 	bl	800f428 <dhcp_discover>
}
 800f05a:	bf00      	nop
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	795b      	ldrb	r3, [r3, #5]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d007      	beq.n	800f088 <dhcp_t1_timeout+0x26>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	795b      	ldrb	r3, [r3, #5]
 800f07c:	2b0a      	cmp	r3, #10
 800f07e:	d003      	beq.n	800f088 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f084:	2b05      	cmp	r3, #5
 800f086:	d117      	bne.n	800f0b8 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 fb49 	bl	800f720 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	899b      	ldrh	r3, [r3, #12]
 800f092:	461a      	mov	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	8a5b      	ldrh	r3, [r3, #18]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	dd0c      	ble.n	800f0b8 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	899b      	ldrh	r3, [r3, #12]
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	8a5b      	ldrh	r3, [r3, #18]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	da00      	bge.n	800f0b0 <dhcp_t1_timeout+0x4e>
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	105b      	asrs	r3, r3, #1
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800f0b8:	bf00      	nop
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	795b      	ldrb	r3, [r3, #5]
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d00b      	beq.n	800f0ee <dhcp_t2_timeout+0x2e>
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	795b      	ldrb	r3, [r3, #5]
 800f0da:	2b0a      	cmp	r3, #10
 800f0dc:	d007      	beq.n	800f0ee <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f0e2:	2b05      	cmp	r3, #5
 800f0e4:	d003      	beq.n	800f0ee <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	795b      	ldrb	r3, [r3, #5]
 800f0ea:	2b04      	cmp	r3, #4
 800f0ec:	d117      	bne.n	800f11e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 fbb2 	bl	800f858 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	8a9b      	ldrh	r3, [r3, #20]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	8a5b      	ldrh	r3, [r3, #18]
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	2b01      	cmp	r3, #1
 800f102:	dd0c      	ble.n	800f11e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	8a9b      	ldrh	r3, [r3, #20]
 800f108:	461a      	mov	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	8a5b      	ldrh	r3, [r3, #18]
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	2b00      	cmp	r3, #0
 800f112:	da00      	bge.n	800f116 <dhcp_t2_timeout+0x56>
 800f114:	3301      	adds	r3, #1
 800f116:	105b      	asrs	r3, r3, #1
 800f118:	b29a      	uxth	r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800f11e:	bf00      	nop
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
	...

0800f128 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f136:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2200      	movs	r2, #0
 800f13c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2200      	movs	r2, #0
 800f142:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f144:	4b26      	ldr	r3, [pc, #152]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f146:	78db      	ldrb	r3, [r3, #3]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f14c:	4b25      	ldr	r3, [pc, #148]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f14e:	68da      	ldr	r2, [r3, #12]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f154:	4b22      	ldr	r3, [pc, #136]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f156:	791b      	ldrb	r3, [r3, #4]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d004      	beq.n	800f166 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f15c:	4b21      	ldr	r3, [pc, #132]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f15e:	691a      	ldr	r2, [r3, #16]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	62da      	str	r2, [r3, #44]	; 0x2c
 800f164:	e004      	b.n	800f170 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f16a:	085a      	lsrs	r2, r3, #1
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f170:	4b1b      	ldr	r3, [pc, #108]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f172:	795b      	ldrb	r3, [r3, #5]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d004      	beq.n	800f182 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f178:	4b1a      	ldr	r3, [pc, #104]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f17a:	695a      	ldr	r2, [r3, #20]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	631a      	str	r2, [r3, #48]	; 0x30
 800f180:	e007      	b.n	800f192 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f186:	4613      	mov	r3, r2
 800f188:	00db      	lsls	r3, r3, #3
 800f18a:	1a9b      	subs	r3, r3, r2
 800f18c:	08da      	lsrs	r2, r3, #3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	691a      	ldr	r2, [r3, #16]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f19a:	4b11      	ldr	r3, [pc, #68]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f19c:	799b      	ldrb	r3, [r3, #6]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00b      	beq.n	800f1ba <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f1a2:	4b10      	ldr	r3, [pc, #64]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7f8 f85c 	bl	8007264 <lwip_htonl>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	71da      	strb	r2, [r3, #7]
 800f1b8:	e002      	b.n	800f1c0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f1c0:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <dhcp_handle_ack+0xb8>)
 800f1c2:	79db      	ldrb	r3, [r3, #7]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d007      	beq.n	800f1d8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f1c8:	4b06      	ldr	r3, [pc, #24]	; (800f1e4 <dhcp_handle_ack+0xbc>)
 800f1ca:	69db      	ldr	r3, [r3, #28]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7f8 f849 	bl	8007264 <lwip_htonl>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f1d8:	bf00      	nop
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	2000884c 	.word	0x2000884c
 800f1e4:	2000882c 	.word	0x2000882c

0800f1e8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d109      	bne.n	800f20a <dhcp_start+0x22>
 800f1f6:	4b37      	ldr	r3, [pc, #220]	; (800f2d4 <dhcp_start+0xec>)
 800f1f8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f1fc:	4936      	ldr	r1, [pc, #216]	; (800f2d8 <dhcp_start+0xf0>)
 800f1fe:	4837      	ldr	r0, [pc, #220]	; (800f2dc <dhcp_start+0xf4>)
 800f200:	f003 fea2 	bl	8012f48 <iprintf>
 800f204:	f06f 030f 	mvn.w	r3, #15
 800f208:	e060      	b.n	800f2cc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f210:	f003 0301 	and.w	r3, r3, #1
 800f214:	2b00      	cmp	r3, #0
 800f216:	d109      	bne.n	800f22c <dhcp_start+0x44>
 800f218:	4b2e      	ldr	r3, [pc, #184]	; (800f2d4 <dhcp_start+0xec>)
 800f21a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f21e:	4930      	ldr	r1, [pc, #192]	; (800f2e0 <dhcp_start+0xf8>)
 800f220:	482e      	ldr	r0, [pc, #184]	; (800f2dc <dhcp_start+0xf4>)
 800f222:	f003 fe91 	bl	8012f48 <iprintf>
 800f226:	f06f 030f 	mvn.w	r3, #15
 800f22a:	e04f      	b.n	800f2cc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f230:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f236:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f23a:	d202      	bcs.n	800f242 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f23c:	f04f 33ff 	mov.w	r3, #4294967295
 800f240:	e044      	b.n	800f2cc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10d      	bne.n	800f264 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f248:	2034      	movs	r0, #52	; 0x34
 800f24a:	f7f8 fadd 	bl	8007808 <mem_malloc>
 800f24e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d102      	bne.n	800f25c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f256:	f04f 33ff 	mov.w	r3, #4294967295
 800f25a:	e037      	b.n	800f2cc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	625a      	str	r2, [r3, #36]	; 0x24
 800f262:	e005      	b.n	800f270 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	791b      	ldrb	r3, [r3, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d001      	beq.n	800f270 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f26c:	f7ff fc90 	bl	800eb90 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f270:	2234      	movs	r2, #52	; 0x34
 800f272:	2100      	movs	r1, #0
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f003 fecc 	bl	8013012 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f27a:	f7ff fc37 	bl	800eaec <dhcp_inc_pcb_refcount>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <dhcp_start+0xa2>
    return ERR_MEM;
 800f284:	f04f 33ff 	mov.w	r3, #4294967295
 800f288:	e020      	b.n	800f2cc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2201      	movs	r2, #1
 800f28e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f296:	f003 0304 	and.w	r3, r3, #4
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d105      	bne.n	800f2aa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f29e:	2102      	movs	r1, #2
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f000 fcc5 	bl	800fc30 <dhcp_set_state>
    return ERR_OK;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	e010      	b.n	800f2cc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f8bc 	bl	800f428 <dhcp_discover>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f2b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d005      	beq.n	800f2c8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fc1d 	bl	800fafc <dhcp_release_and_stop>
    return ERR_MEM;
 800f2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c6:	e001      	b.n	800f2cc <dhcp_start+0xe4>
  }
  return result;
 800f2c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	0801609c 	.word	0x0801609c
 800f2d8:	08016180 	.word	0x08016180
 800f2dc:	080160fc 	.word	0x080160fc
 800f2e0:	080161c4 	.word	0x080161c4

0800f2e4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d107      	bne.n	800f304 <dhcp_arp_reply+0x20>
 800f2f4:	4b0e      	ldr	r3, [pc, #56]	; (800f330 <dhcp_arp_reply+0x4c>)
 800f2f6:	f240 328b 	movw	r2, #907	; 0x38b
 800f2fa:	490e      	ldr	r1, [pc, #56]	; (800f334 <dhcp_arp_reply+0x50>)
 800f2fc:	480e      	ldr	r0, [pc, #56]	; (800f338 <dhcp_arp_reply+0x54>)
 800f2fe:	f003 fe23 	bl	8012f48 <iprintf>
 800f302:	e012      	b.n	800f32a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f308:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00c      	beq.n	800f32a <dhcp_arp_reply+0x46>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	795b      	ldrb	r3, [r3, #5]
 800f314:	2b08      	cmp	r3, #8
 800f316:	d108      	bne.n	800f32a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	69db      	ldr	r3, [r3, #28]
 800f320:	429a      	cmp	r2, r3
 800f322:	d102      	bne.n	800f32a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f809 	bl	800f33c <dhcp_decline>
    }
  }
}
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	0801609c 	.word	0x0801609c
 800f334:	08016180 	.word	0x08016180
 800f338:	080160fc 	.word	0x080160fc

0800f33c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f33c:	b5b0      	push	{r4, r5, r7, lr}
 800f33e:	b08a      	sub	sp, #40	; 0x28
 800f340:	af02      	add	r7, sp, #8
 800f342:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f348:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f34a:	210c      	movs	r1, #12
 800f34c:	69b8      	ldr	r0, [r7, #24]
 800f34e:	f000 fc6f 	bl	800fc30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f352:	f107 030c 	add.w	r3, r7, #12
 800f356:	2204      	movs	r2, #4
 800f358:	69b9      	ldr	r1, [r7, #24]
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f001 f8f4 	bl	8010548 <dhcp_create_msg>
 800f360:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d035      	beq.n	800f3d4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f36e:	89b8      	ldrh	r0, [r7, #12]
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f376:	2304      	movs	r3, #4
 800f378:	2232      	movs	r2, #50	; 0x32
 800f37a:	f000 fc73 	bl	800fc64 <dhcp_option>
 800f37e:	4603      	mov	r3, r0
 800f380:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f382:	89bc      	ldrh	r4, [r7, #12]
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	69db      	ldr	r3, [r3, #28]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7f7 ff68 	bl	8007264 <lwip_htonl>
 800f394:	4603      	mov	r3, r0
 800f396:	461a      	mov	r2, r3
 800f398:	4629      	mov	r1, r5
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 fcee 	bl	800fd7c <dhcp_option_long>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f3a4:	89b8      	ldrh	r0, [r7, #12]
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	33f0      	adds	r3, #240	; 0xf0
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	f001 f9a1 	bl	80106f4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f3b2:	4b19      	ldr	r3, [pc, #100]	; (800f418 <dhcp_decline+0xdc>)
 800f3b4:	6818      	ldr	r0, [r3, #0]
 800f3b6:	4b19      	ldr	r3, [pc, #100]	; (800f41c <dhcp_decline+0xe0>)
 800f3b8:	9301      	str	r3, [sp, #4]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	9300      	str	r3, [sp, #0]
 800f3be:	2343      	movs	r3, #67	; 0x43
 800f3c0:	4a17      	ldr	r2, [pc, #92]	; (800f420 <dhcp_decline+0xe4>)
 800f3c2:	6979      	ldr	r1, [r7, #20]
 800f3c4:	f7ff f90c 	bl	800e5e0 <udp_sendto_if_src>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f3cc:	6978      	ldr	r0, [r7, #20]
 800f3ce:	f7f9 f9cf 	bl	8008770 <pbuf_free>
 800f3d2:	e001      	b.n	800f3d8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f3d4:	23ff      	movs	r3, #255	; 0xff
 800f3d6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	799b      	ldrb	r3, [r3, #6]
 800f3dc:	2bff      	cmp	r3, #255	; 0xff
 800f3de:	d005      	beq.n	800f3ec <dhcp_decline+0xb0>
    dhcp->tries++;
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	799b      	ldrb	r3, [r3, #6]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	b2da      	uxtb	r2, r3
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f3ec:	f242 7310 	movw	r3, #10000	; 0x2710
 800f3f0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f3f2:	89fb      	ldrh	r3, [r7, #14]
 800f3f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f3f8:	4a0a      	ldr	r2, [pc, #40]	; (800f424 <dhcp_decline+0xe8>)
 800f3fa:	fb82 1203 	smull	r1, r2, r2, r3
 800f3fe:	1152      	asrs	r2, r2, #5
 800f400:	17db      	asrs	r3, r3, #31
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	b29a      	uxth	r2, r3
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f40a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3720      	adds	r7, #32
 800f412:	46bd      	mov	sp, r7
 800f414:	bdb0      	pop	{r4, r5, r7, pc}
 800f416:	bf00      	nop
 800f418:	20008854 	.word	0x20008854
 800f41c:	08016c0c 	.word	0x08016c0c
 800f420:	08016c10 	.word	0x08016c10
 800f424:	10624dd3 	.word	0x10624dd3

0800f428 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08a      	sub	sp, #40	; 0x28
 800f42c:	af02      	add	r7, sp, #8
 800f42e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f434:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f436:	2300      	movs	r3, #0
 800f438:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	2200      	movs	r2, #0
 800f43e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f440:	2106      	movs	r1, #6
 800f442:	69b8      	ldr	r0, [r7, #24]
 800f444:	f000 fbf4 	bl	800fc30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f448:	f107 0308 	add.w	r3, r7, #8
 800f44c:	2201      	movs	r2, #1
 800f44e:	69b9      	ldr	r1, [r7, #24]
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f001 f879 	bl	8010548 <dhcp_create_msg>
 800f456:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d04b      	beq.n	800f4f6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f464:	8938      	ldrh	r0, [r7, #8]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f46c:	2302      	movs	r3, #2
 800f46e:	2239      	movs	r2, #57	; 0x39
 800f470:	f000 fbf8 	bl	800fc64 <dhcp_option>
 800f474:	4603      	mov	r3, r0
 800f476:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f478:	8938      	ldrh	r0, [r7, #8]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f484:	461a      	mov	r2, r3
 800f486:	f000 fc47 	bl	800fd18 <dhcp_option_short>
 800f48a:	4603      	mov	r3, r0
 800f48c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f48e:	8938      	ldrh	r0, [r7, #8]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f496:	2303      	movs	r3, #3
 800f498:	2237      	movs	r2, #55	; 0x37
 800f49a:	f000 fbe3 	bl	800fc64 <dhcp_option>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	77fb      	strb	r3, [r7, #31]
 800f4a6:	e00e      	b.n	800f4c6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f4a8:	8938      	ldrh	r0, [r7, #8]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f4b0:	7ffb      	ldrb	r3, [r7, #31]
 800f4b2:	4a29      	ldr	r2, [pc, #164]	; (800f558 <dhcp_discover+0x130>)
 800f4b4:	5cd3      	ldrb	r3, [r2, r3]
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	f000 fc08 	bl	800fccc <dhcp_option_byte>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4c0:	7ffb      	ldrb	r3, [r7, #31]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	77fb      	strb	r3, [r7, #31]
 800f4c6:	7ffb      	ldrb	r3, [r7, #31]
 800f4c8:	2b02      	cmp	r3, #2
 800f4ca:	d9ed      	bls.n	800f4a8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f4cc:	8938      	ldrh	r0, [r7, #8]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	33f0      	adds	r3, #240	; 0xf0
 800f4d2:	693a      	ldr	r2, [r7, #16]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	f001 f90d 	bl	80106f4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f4da:	4b20      	ldr	r3, [pc, #128]	; (800f55c <dhcp_discover+0x134>)
 800f4dc:	6818      	ldr	r0, [r3, #0]
 800f4de:	4b20      	ldr	r3, [pc, #128]	; (800f560 <dhcp_discover+0x138>)
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	2343      	movs	r3, #67	; 0x43
 800f4e8:	4a1e      	ldr	r2, [pc, #120]	; (800f564 <dhcp_discover+0x13c>)
 800f4ea:	6939      	ldr	r1, [r7, #16]
 800f4ec:	f7ff f878 	bl	800e5e0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f4f0:	6938      	ldr	r0, [r7, #16]
 800f4f2:	f7f9 f93d 	bl	8008770 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	799b      	ldrb	r3, [r3, #6]
 800f4fa:	2bff      	cmp	r3, #255	; 0xff
 800f4fc:	d005      	beq.n	800f50a <dhcp_discover+0xe2>
    dhcp->tries++;
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	799b      	ldrb	r3, [r3, #6]
 800f502:	3301      	adds	r3, #1
 800f504:	b2da      	uxtb	r2, r3
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	799b      	ldrb	r3, [r3, #6]
 800f50e:	2b05      	cmp	r3, #5
 800f510:	d80d      	bhi.n	800f52e <dhcp_discover+0x106>
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	799b      	ldrb	r3, [r3, #6]
 800f516:	461a      	mov	r2, r3
 800f518:	2301      	movs	r3, #1
 800f51a:	4093      	lsls	r3, r2
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	461a      	mov	r2, r3
 800f520:	0152      	lsls	r2, r2, #5
 800f522:	1ad2      	subs	r2, r2, r3
 800f524:	0092      	lsls	r2, r2, #2
 800f526:	4413      	add	r3, r2
 800f528:	00db      	lsls	r3, r3, #3
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	e001      	b.n	800f532 <dhcp_discover+0x10a>
 800f52e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f532:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f534:	897b      	ldrh	r3, [r7, #10]
 800f536:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f53a:	4a0b      	ldr	r2, [pc, #44]	; (800f568 <dhcp_discover+0x140>)
 800f53c:	fb82 1203 	smull	r1, r2, r2, r3
 800f540:	1152      	asrs	r2, r2, #5
 800f542:	17db      	asrs	r3, r3, #31
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	b29a      	uxth	r2, r3
 800f548:	69bb      	ldr	r3, [r7, #24]
 800f54a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3720      	adds	r7, #32
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	20000014 	.word	0x20000014
 800f55c:	20008854 	.word	0x20008854
 800f560:	08016c0c 	.word	0x08016c0c
 800f564:	08016c10 	.word	0x08016c10
 800f568:	10624dd3 	.word	0x10624dd3

0800f56c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d107      	bne.n	800f58a <dhcp_bind+0x1e>
 800f57a:	4b64      	ldr	r3, [pc, #400]	; (800f70c <dhcp_bind+0x1a0>)
 800f57c:	f240 4215 	movw	r2, #1045	; 0x415
 800f580:	4963      	ldr	r1, [pc, #396]	; (800f710 <dhcp_bind+0x1a4>)
 800f582:	4864      	ldr	r0, [pc, #400]	; (800f714 <dhcp_bind+0x1a8>)
 800f584:	f003 fce0 	bl	8012f48 <iprintf>
 800f588:	e0bc      	b.n	800f704 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f590:	69bb      	ldr	r3, [r7, #24]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d107      	bne.n	800f5a6 <dhcp_bind+0x3a>
 800f596:	4b5d      	ldr	r3, [pc, #372]	; (800f70c <dhcp_bind+0x1a0>)
 800f598:	f240 4217 	movw	r2, #1047	; 0x417
 800f59c:	495e      	ldr	r1, [pc, #376]	; (800f718 <dhcp_bind+0x1ac>)
 800f59e:	485d      	ldr	r0, [pc, #372]	; (800f714 <dhcp_bind+0x1a8>)
 800f5a0:	f003 fcd2 	bl	8012f48 <iprintf>
 800f5a4:	e0ae      	b.n	800f704 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b4:	d019      	beq.n	800f5ea <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ba:	331e      	adds	r3, #30
 800f5bc:	4a57      	ldr	r2, [pc, #348]	; (800f71c <dhcp_bind+0x1b0>)
 800f5be:	fba2 2303 	umull	r2, r3, r2, r3
 800f5c2:	095b      	lsrs	r3, r3, #5
 800f5c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5cc:	d302      	bcc.n	800f5d4 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f5ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	8a9b      	ldrh	r3, [r3, #20]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d102      	bne.n	800f5ea <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f2:	d01d      	beq.n	800f630 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f8:	331e      	adds	r3, #30
 800f5fa:	4a48      	ldr	r2, [pc, #288]	; (800f71c <dhcp_bind+0x1b0>)
 800f5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800f600:	095b      	lsrs	r3, r3, #5
 800f602:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f60a:	d302      	bcc.n	800f612 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f60c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f610:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	b29a      	uxth	r2, r3
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	895b      	ldrh	r3, [r3, #10]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d102      	bne.n	800f628 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	2201      	movs	r2, #1
 800f626:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	895a      	ldrh	r2, [r3, #10]
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f638:	d01d      	beq.n	800f676 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63e:	331e      	adds	r3, #30
 800f640:	4a36      	ldr	r2, [pc, #216]	; (800f71c <dhcp_bind+0x1b0>)
 800f642:	fba2 2303 	umull	r2, r3, r2, r3
 800f646:	095b      	lsrs	r3, r3, #5
 800f648:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f650:	d302      	bcc.n	800f658 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f656:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	899b      	ldrh	r3, [r3, #12]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d102      	bne.n	800f66e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	2201      	movs	r2, #1
 800f66c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	899a      	ldrh	r2, [r3, #12]
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	895a      	ldrh	r2, [r3, #10]
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	899b      	ldrh	r3, [r3, #12]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d306      	bcc.n	800f690 <dhcp_bind+0x124>
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	899b      	ldrh	r3, [r3, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	2200      	movs	r2, #0
 800f68e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f690:	69bb      	ldr	r3, [r7, #24]
 800f692:	79db      	ldrb	r3, [r3, #7]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d003      	beq.n	800f6a0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	6a1b      	ldr	r3, [r3, #32]
 800f69c:	613b      	str	r3, [r7, #16]
 800f69e:	e014      	b.n	800f6ca <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	331c      	adds	r3, #28
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f6a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	db02      	blt.n	800f6b6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f6b0:	23ff      	movs	r3, #255	; 0xff
 800f6b2:	613b      	str	r3, [r7, #16]
 800f6b4:	e009      	b.n	800f6ca <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f6b6:	7dfb      	ldrb	r3, [r7, #23]
 800f6b8:	2bbf      	cmp	r3, #191	; 0xbf
 800f6ba:	d903      	bls.n	800f6c4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f6bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f6c0:	613b      	str	r3, [r7, #16]
 800f6c2:	e002      	b.n	800f6ca <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f6c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6c8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ce:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d108      	bne.n	800f6e8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	69da      	ldr	r2, [r3, #28]
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	4013      	ands	r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f6e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f6e8:	210a      	movs	r1, #10
 800f6ea:	69b8      	ldr	r0, [r7, #24]
 800f6ec:	f000 faa0 	bl	800fc30 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	f103 011c 	add.w	r1, r3, #28
 800f6f6:	f107 030c 	add.w	r3, r7, #12
 800f6fa:	f107 0210 	add.w	r2, r7, #16
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7f8 fbde 	bl	8007ec0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f704:	3720      	adds	r7, #32
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	0801609c 	.word	0x0801609c
 800f710:	080161fc 	.word	0x080161fc
 800f714:	080160fc 	.word	0x080160fc
 800f718:	08016218 	.word	0x08016218
 800f71c:	88888889 	.word	0x88888889

0800f720 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b08a      	sub	sp, #40	; 0x28
 800f724:	af02      	add	r7, sp, #8
 800f726:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f72c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f72e:	2105      	movs	r1, #5
 800f730:	69b8      	ldr	r0, [r7, #24]
 800f732:	f000 fa7d 	bl	800fc30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f736:	f107 030c 	add.w	r3, r7, #12
 800f73a:	2203      	movs	r2, #3
 800f73c:	69b9      	ldr	r1, [r7, #24]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 ff02 	bl	8010548 <dhcp_create_msg>
 800f744:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d04e      	beq.n	800f7ea <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f752:	89b8      	ldrh	r0, [r7, #12]
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f75a:	2302      	movs	r3, #2
 800f75c:	2239      	movs	r2, #57	; 0x39
 800f75e:	f000 fa81 	bl	800fc64 <dhcp_option>
 800f762:	4603      	mov	r3, r0
 800f764:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f766:	89b8      	ldrh	r0, [r7, #12]
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f772:	461a      	mov	r2, r3
 800f774:	f000 fad0 	bl	800fd18 <dhcp_option_short>
 800f778:	4603      	mov	r3, r0
 800f77a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f77c:	89b8      	ldrh	r0, [r7, #12]
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f784:	2303      	movs	r3, #3
 800f786:	2237      	movs	r2, #55	; 0x37
 800f788:	f000 fa6c 	bl	800fc64 <dhcp_option>
 800f78c:	4603      	mov	r3, r0
 800f78e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f790:	2300      	movs	r3, #0
 800f792:	77bb      	strb	r3, [r7, #30]
 800f794:	e00e      	b.n	800f7b4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f796:	89b8      	ldrh	r0, [r7, #12]
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f79e:	7fbb      	ldrb	r3, [r7, #30]
 800f7a0:	4a2a      	ldr	r2, [pc, #168]	; (800f84c <dhcp_renew+0x12c>)
 800f7a2:	5cd3      	ldrb	r3, [r2, r3]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	f000 fa91 	bl	800fccc <dhcp_option_byte>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f7ae:	7fbb      	ldrb	r3, [r7, #30]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	77bb      	strb	r3, [r7, #30]
 800f7b4:	7fbb      	ldrb	r3, [r7, #30]
 800f7b6:	2b02      	cmp	r3, #2
 800f7b8:	d9ed      	bls.n	800f796 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f7ba:	89b8      	ldrh	r0, [r7, #12]
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	33f0      	adds	r3, #240	; 0xf0
 800f7c0:	697a      	ldr	r2, [r7, #20]
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	f000 ff96 	bl	80106f4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f7c8:	4b21      	ldr	r3, [pc, #132]	; (800f850 <dhcp_renew+0x130>)
 800f7ca:	6818      	ldr	r0, [r3, #0]
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	f103 0218 	add.w	r2, r3, #24
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	9300      	str	r3, [sp, #0]
 800f7d6:	2343      	movs	r3, #67	; 0x43
 800f7d8:	6979      	ldr	r1, [r7, #20]
 800f7da:	f7fe fe8d 	bl	800e4f8 <udp_sendto_if>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f7e2:	6978      	ldr	r0, [r7, #20]
 800f7e4:	f7f8 ffc4 	bl	8008770 <pbuf_free>
 800f7e8:	e001      	b.n	800f7ee <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f7ea:	23ff      	movs	r3, #255	; 0xff
 800f7ec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	799b      	ldrb	r3, [r3, #6]
 800f7f2:	2bff      	cmp	r3, #255	; 0xff
 800f7f4:	d005      	beq.n	800f802 <dhcp_renew+0xe2>
    dhcp->tries++;
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	799b      	ldrb	r3, [r3, #6]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f802:	69bb      	ldr	r3, [r7, #24]
 800f804:	799b      	ldrb	r3, [r3, #6]
 800f806:	2b09      	cmp	r3, #9
 800f808:	d80a      	bhi.n	800f820 <dhcp_renew+0x100>
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	799b      	ldrb	r3, [r3, #6]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	461a      	mov	r2, r3
 800f812:	0152      	lsls	r2, r2, #5
 800f814:	1ad2      	subs	r2, r2, r3
 800f816:	0092      	lsls	r2, r2, #2
 800f818:	4413      	add	r3, r2
 800f81a:	011b      	lsls	r3, r3, #4
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	e001      	b.n	800f824 <dhcp_renew+0x104>
 800f820:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f824:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f826:	89fb      	ldrh	r3, [r7, #14]
 800f828:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f82c:	4a09      	ldr	r2, [pc, #36]	; (800f854 <dhcp_renew+0x134>)
 800f82e:	fb82 1203 	smull	r1, r2, r2, r3
 800f832:	1152      	asrs	r2, r2, #5
 800f834:	17db      	asrs	r3, r3, #31
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	b29a      	uxth	r2, r3
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f83e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f842:	4618      	mov	r0, r3
 800f844:	3720      	adds	r7, #32
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	20000014 	.word	0x20000014
 800f850:	20008854 	.word	0x20008854
 800f854:	10624dd3 	.word	0x10624dd3

0800f858 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b08a      	sub	sp, #40	; 0x28
 800f85c:	af02      	add	r7, sp, #8
 800f85e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f864:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f866:	2104      	movs	r1, #4
 800f868:	69b8      	ldr	r0, [r7, #24]
 800f86a:	f000 f9e1 	bl	800fc30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f86e:	f107 030c 	add.w	r3, r7, #12
 800f872:	2203      	movs	r2, #3
 800f874:	69b9      	ldr	r1, [r7, #24]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fe66 	bl	8010548 <dhcp_create_msg>
 800f87c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d04c      	beq.n	800f91e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f88a:	89b8      	ldrh	r0, [r7, #12]
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f892:	2302      	movs	r3, #2
 800f894:	2239      	movs	r2, #57	; 0x39
 800f896:	f000 f9e5 	bl	800fc64 <dhcp_option>
 800f89a:	4603      	mov	r3, r0
 800f89c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f89e:	89b8      	ldrh	r0, [r7, #12]
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	f000 fa34 	bl	800fd18 <dhcp_option_short>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f8b4:	89b8      	ldrh	r0, [r7, #12]
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f8bc:	2303      	movs	r3, #3
 800f8be:	2237      	movs	r2, #55	; 0x37
 800f8c0:	f000 f9d0 	bl	800fc64 <dhcp_option>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	77bb      	strb	r3, [r7, #30]
 800f8cc:	e00e      	b.n	800f8ec <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f8ce:	89b8      	ldrh	r0, [r7, #12]
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f8d6:	7fbb      	ldrb	r3, [r7, #30]
 800f8d8:	4a29      	ldr	r2, [pc, #164]	; (800f980 <dhcp_rebind+0x128>)
 800f8da:	5cd3      	ldrb	r3, [r2, r3]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	f000 f9f5 	bl	800fccc <dhcp_option_byte>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8e6:	7fbb      	ldrb	r3, [r7, #30]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	77bb      	strb	r3, [r7, #30]
 800f8ec:	7fbb      	ldrb	r3, [r7, #30]
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d9ed      	bls.n	800f8ce <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f8f2:	89b8      	ldrh	r0, [r7, #12]
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	33f0      	adds	r3, #240	; 0xf0
 800f8f8:	697a      	ldr	r2, [r7, #20]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	f000 fefa 	bl	80106f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f900:	4b20      	ldr	r3, [pc, #128]	; (800f984 <dhcp_rebind+0x12c>)
 800f902:	6818      	ldr	r0, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	9300      	str	r3, [sp, #0]
 800f908:	2343      	movs	r3, #67	; 0x43
 800f90a:	4a1f      	ldr	r2, [pc, #124]	; (800f988 <dhcp_rebind+0x130>)
 800f90c:	6979      	ldr	r1, [r7, #20]
 800f90e:	f7fe fdf3 	bl	800e4f8 <udp_sendto_if>
 800f912:	4603      	mov	r3, r0
 800f914:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f916:	6978      	ldr	r0, [r7, #20]
 800f918:	f7f8 ff2a 	bl	8008770 <pbuf_free>
 800f91c:	e001      	b.n	800f922 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f91e:	23ff      	movs	r3, #255	; 0xff
 800f920:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	799b      	ldrb	r3, [r3, #6]
 800f926:	2bff      	cmp	r3, #255	; 0xff
 800f928:	d005      	beq.n	800f936 <dhcp_rebind+0xde>
    dhcp->tries++;
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	799b      	ldrb	r3, [r3, #6]
 800f92e:	3301      	adds	r3, #1
 800f930:	b2da      	uxtb	r2, r3
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	799b      	ldrb	r3, [r3, #6]
 800f93a:	2b09      	cmp	r3, #9
 800f93c:	d80a      	bhi.n	800f954 <dhcp_rebind+0xfc>
 800f93e:	69bb      	ldr	r3, [r7, #24]
 800f940:	799b      	ldrb	r3, [r3, #6]
 800f942:	b29b      	uxth	r3, r3
 800f944:	461a      	mov	r2, r3
 800f946:	0152      	lsls	r2, r2, #5
 800f948:	1ad2      	subs	r2, r2, r3
 800f94a:	0092      	lsls	r2, r2, #2
 800f94c:	4413      	add	r3, r2
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	b29b      	uxth	r3, r3
 800f952:	e001      	b.n	800f958 <dhcp_rebind+0x100>
 800f954:	f242 7310 	movw	r3, #10000	; 0x2710
 800f958:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f95a:	89fb      	ldrh	r3, [r7, #14]
 800f95c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f960:	4a0a      	ldr	r2, [pc, #40]	; (800f98c <dhcp_rebind+0x134>)
 800f962:	fb82 1203 	smull	r1, r2, r2, r3
 800f966:	1152      	asrs	r2, r2, #5
 800f968:	17db      	asrs	r3, r3, #31
 800f96a:	1ad3      	subs	r3, r2, r3
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	69bb      	ldr	r3, [r7, #24]
 800f970:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f972:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3720      	adds	r7, #32
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	20000014 	.word	0x20000014
 800f984:	20008854 	.word	0x20008854
 800f988:	08016c10 	.word	0x08016c10
 800f98c:	10624dd3 	.word	0x10624dd3

0800f990 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f990:	b5b0      	push	{r4, r5, r7, lr}
 800f992:	b08a      	sub	sp, #40	; 0x28
 800f994:	af02      	add	r7, sp, #8
 800f996:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f99e:	2103      	movs	r1, #3
 800f9a0:	69b8      	ldr	r0, [r7, #24]
 800f9a2:	f000 f945 	bl	800fc30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f9a6:	f107 030c 	add.w	r3, r7, #12
 800f9aa:	2203      	movs	r2, #3
 800f9ac:	69b9      	ldr	r1, [r7, #24]
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fdca 	bl	8010548 <dhcp_create_msg>
 800f9b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d066      	beq.n	800fa8a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f9c2:	89b8      	ldrh	r0, [r7, #12]
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9ca:	2302      	movs	r3, #2
 800f9cc:	2239      	movs	r2, #57	; 0x39
 800f9ce:	f000 f949 	bl	800fc64 <dhcp_option>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f9d6:	89b8      	ldrh	r0, [r7, #12]
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	33f0      	adds	r3, #240	; 0xf0
 800f9dc:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	f000 f999 	bl	800fd18 <dhcp_option_short>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f9ea:	89b8      	ldrh	r0, [r7, #12]
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9f2:	2304      	movs	r3, #4
 800f9f4:	2232      	movs	r2, #50	; 0x32
 800f9f6:	f000 f935 	bl	800fc64 <dhcp_option>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f9fe:	89bc      	ldrh	r4, [r7, #12]
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7f7 fc2a 	bl	8007264 <lwip_htonl>
 800fa10:	4603      	mov	r3, r0
 800fa12:	461a      	mov	r2, r3
 800fa14:	4629      	mov	r1, r5
 800fa16:	4620      	mov	r0, r4
 800fa18:	f000 f9b0 	bl	800fd7c <dhcp_option_long>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fa20:	89b8      	ldrh	r0, [r7, #12]
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa28:	2303      	movs	r3, #3
 800fa2a:	2237      	movs	r2, #55	; 0x37
 800fa2c:	f000 f91a 	bl	800fc64 <dhcp_option>
 800fa30:	4603      	mov	r3, r0
 800fa32:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa34:	2300      	movs	r3, #0
 800fa36:	77bb      	strb	r3, [r7, #30]
 800fa38:	e00e      	b.n	800fa58 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fa3a:	89b8      	ldrh	r0, [r7, #12]
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa42:	7fbb      	ldrb	r3, [r7, #30]
 800fa44:	4a29      	ldr	r2, [pc, #164]	; (800faec <dhcp_reboot+0x15c>)
 800fa46:	5cd3      	ldrb	r3, [r2, r3]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	f000 f93f 	bl	800fccc <dhcp_option_byte>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa52:	7fbb      	ldrb	r3, [r7, #30]
 800fa54:	3301      	adds	r3, #1
 800fa56:	77bb      	strb	r3, [r7, #30]
 800fa58:	7fbb      	ldrb	r3, [r7, #30]
 800fa5a:	2b02      	cmp	r3, #2
 800fa5c:	d9ed      	bls.n	800fa3a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fa5e:	89b8      	ldrh	r0, [r7, #12]
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	33f0      	adds	r3, #240	; 0xf0
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	4619      	mov	r1, r3
 800fa68:	f000 fe44 	bl	80106f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fa6c:	4b20      	ldr	r3, [pc, #128]	; (800faf0 <dhcp_reboot+0x160>)
 800fa6e:	6818      	ldr	r0, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	2343      	movs	r3, #67	; 0x43
 800fa76:	4a1f      	ldr	r2, [pc, #124]	; (800faf4 <dhcp_reboot+0x164>)
 800fa78:	6979      	ldr	r1, [r7, #20]
 800fa7a:	f7fe fd3d 	bl	800e4f8 <udp_sendto_if>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fa82:	6978      	ldr	r0, [r7, #20]
 800fa84:	f7f8 fe74 	bl	8008770 <pbuf_free>
 800fa88:	e001      	b.n	800fa8e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fa8a:	23ff      	movs	r3, #255	; 0xff
 800fa8c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	799b      	ldrb	r3, [r3, #6]
 800fa92:	2bff      	cmp	r3, #255	; 0xff
 800fa94:	d005      	beq.n	800faa2 <dhcp_reboot+0x112>
    dhcp->tries++;
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	799b      	ldrb	r3, [r3, #6]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	b2da      	uxtb	r2, r3
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	799b      	ldrb	r3, [r3, #6]
 800faa6:	2b09      	cmp	r3, #9
 800faa8:	d80a      	bhi.n	800fac0 <dhcp_reboot+0x130>
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	799b      	ldrb	r3, [r3, #6]
 800faae:	b29b      	uxth	r3, r3
 800fab0:	461a      	mov	r2, r3
 800fab2:	0152      	lsls	r2, r2, #5
 800fab4:	1ad2      	subs	r2, r2, r3
 800fab6:	0092      	lsls	r2, r2, #2
 800fab8:	4413      	add	r3, r2
 800faba:	00db      	lsls	r3, r3, #3
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	e001      	b.n	800fac4 <dhcp_reboot+0x134>
 800fac0:	f242 7310 	movw	r3, #10000	; 0x2710
 800fac4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fac6:	89fb      	ldrh	r3, [r7, #14]
 800fac8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800facc:	4a0a      	ldr	r2, [pc, #40]	; (800faf8 <dhcp_reboot+0x168>)
 800face:	fb82 1203 	smull	r1, r2, r2, r3
 800fad2:	1152      	asrs	r2, r2, #5
 800fad4:	17db      	asrs	r3, r3, #31
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	b29a      	uxth	r2, r3
 800fada:	69bb      	ldr	r3, [r7, #24]
 800fadc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fade:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3720      	adds	r7, #32
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bdb0      	pop	{r4, r5, r7, pc}
 800faea:	bf00      	nop
 800faec:	20000014 	.word	0x20000014
 800faf0:	20008854 	.word	0x20008854
 800faf4:	08016c10 	.word	0x08016c10
 800faf8:	10624dd3 	.word	0x10624dd3

0800fafc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800fafc:	b5b0      	push	{r4, r5, r7, lr}
 800fafe:	b08a      	sub	sp, #40	; 0x28
 800fb00:	af02      	add	r7, sp, #8
 800fb02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb08:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f000 8084 	beq.w	800fc1a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	795b      	ldrb	r3, [r3, #5]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f000 8081 	beq.w	800fc1e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	699b      	ldr	r3, [r3, #24]
 800fb20:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	2200      	movs	r2, #0
 800fb26:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	2200      	movs	r2, #0
 800fb32:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	2200      	movs	r2, #0
 800fb38:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	631a      	str	r2, [r3, #48]	; 0x30
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	62da      	str	r2, [r3, #44]	; 0x2c
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	2200      	movs	r2, #0
 800fb54:	829a      	strh	r2, [r3, #20]
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	8a9a      	ldrh	r2, [r3, #20]
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	825a      	strh	r2, [r3, #18]
 800fb5e:	69fb      	ldr	r3, [r7, #28]
 800fb60:	8a5a      	ldrh	r2, [r3, #18]
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	821a      	strh	r2, [r3, #16]
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	8a1a      	ldrh	r2, [r3, #16]
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fdee 	bl	8010750 <dhcp_supplied_address>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d03b      	beq.n	800fbf2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800fb7a:	f107 030e 	add.w	r3, r7, #14
 800fb7e:	2207      	movs	r2, #7
 800fb80:	69f9      	ldr	r1, [r7, #28]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 fce0 	bl	8010548 <dhcp_create_msg>
 800fb88:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800fb8a:	69bb      	ldr	r3, [r7, #24]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d030      	beq.n	800fbf2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fb96:	89f8      	ldrh	r0, [r7, #14]
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb9e:	2304      	movs	r3, #4
 800fba0:	2236      	movs	r2, #54	; 0x36
 800fba2:	f000 f85f 	bl	800fc64 <dhcp_option>
 800fba6:	4603      	mov	r3, r0
 800fba8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fbaa:	89fc      	ldrh	r4, [r7, #14]
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f7 fb55 	bl	8007264 <lwip_htonl>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4629      	mov	r1, r5
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f000 f8db 	bl	800fd7c <dhcp_option_long>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fbca:	89f8      	ldrh	r0, [r7, #14]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	33f0      	adds	r3, #240	; 0xf0
 800fbd0:	69ba      	ldr	r2, [r7, #24]
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	f000 fd8e 	bl	80106f4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fbd8:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <dhcp_release_and_stop+0x12c>)
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	f107 0210 	add.w	r2, r7, #16
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	2343      	movs	r3, #67	; 0x43
 800fbe6:	69b9      	ldr	r1, [r7, #24]
 800fbe8:	f7fe fc86 	bl	800e4f8 <udp_sendto_if>
      pbuf_free(p_out);
 800fbec:	69b8      	ldr	r0, [r7, #24]
 800fbee:	f7f8 fdbf 	bl	8008770 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fbf2:	4b0e      	ldr	r3, [pc, #56]	; (800fc2c <dhcp_release_and_stop+0x130>)
 800fbf4:	4a0d      	ldr	r2, [pc, #52]	; (800fc2c <dhcp_release_and_stop+0x130>)
 800fbf6:	490d      	ldr	r1, [pc, #52]	; (800fc2c <dhcp_release_and_stop+0x130>)
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7f8 f961 	bl	8007ec0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fbfe:	2100      	movs	r1, #0
 800fc00:	69f8      	ldr	r0, [r7, #28]
 800fc02:	f000 f815 	bl	800fc30 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	791b      	ldrb	r3, [r3, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d008      	beq.n	800fc20 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fc0e:	f7fe ffbf 	bl	800eb90 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	2200      	movs	r2, #0
 800fc16:	711a      	strb	r2, [r3, #4]
 800fc18:	e002      	b.n	800fc20 <dhcp_release_and_stop+0x124>
    return;
 800fc1a:	bf00      	nop
 800fc1c:	e000      	b.n	800fc20 <dhcp_release_and_stop+0x124>
    return;
 800fc1e:	bf00      	nop
  }
}
 800fc20:	3720      	adds	r7, #32
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bdb0      	pop	{r4, r5, r7, pc}
 800fc26:	bf00      	nop
 800fc28:	20008854 	.word	0x20008854
 800fc2c:	08016c0c 	.word	0x08016c0c

0800fc30 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	460b      	mov	r3, r1
 800fc3a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	795b      	ldrb	r3, [r3, #5]
 800fc40:	78fa      	ldrb	r2, [r7, #3]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d008      	beq.n	800fc58 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	78fa      	ldrb	r2, [r7, #3]
 800fc4a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	811a      	strh	r2, [r3, #8]
  }
}
 800fc58:	bf00      	nop
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6039      	str	r1, [r7, #0]
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	461a      	mov	r2, r3
 800fc70:	4603      	mov	r3, r0
 800fc72:	80fb      	strh	r3, [r7, #6]
 800fc74:	460b      	mov	r3, r1
 800fc76:	717b      	strb	r3, [r7, #5]
 800fc78:	4613      	mov	r3, r2
 800fc7a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fc7c:	88fa      	ldrh	r2, [r7, #6]
 800fc7e:	793b      	ldrb	r3, [r7, #4]
 800fc80:	4413      	add	r3, r2
 800fc82:	3302      	adds	r3, #2
 800fc84:	2b44      	cmp	r3, #68	; 0x44
 800fc86:	d906      	bls.n	800fc96 <dhcp_option+0x32>
 800fc88:	4b0d      	ldr	r3, [pc, #52]	; (800fcc0 <dhcp_option+0x5c>)
 800fc8a:	f240 529a 	movw	r2, #1434	; 0x59a
 800fc8e:	490d      	ldr	r1, [pc, #52]	; (800fcc4 <dhcp_option+0x60>)
 800fc90:	480d      	ldr	r0, [pc, #52]	; (800fcc8 <dhcp_option+0x64>)
 800fc92:	f003 f959 	bl	8012f48 <iprintf>
  options[options_out_len++] = option_type;
 800fc96:	88fb      	ldrh	r3, [r7, #6]
 800fc98:	1c5a      	adds	r2, r3, #1
 800fc9a:	80fa      	strh	r2, [r7, #6]
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	4413      	add	r3, r2
 800fca2:	797a      	ldrb	r2, [r7, #5]
 800fca4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800fca6:	88fb      	ldrh	r3, [r7, #6]
 800fca8:	1c5a      	adds	r2, r3, #1
 800fcaa:	80fa      	strh	r2, [r7, #6]
 800fcac:	461a      	mov	r2, r3
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	793a      	ldrb	r2, [r7, #4]
 800fcb4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fcb6:	88fb      	ldrh	r3, [r7, #6]
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	0801609c 	.word	0x0801609c
 800fcc4:	08016230 	.word	0x08016230
 800fcc8:	080160fc 	.word	0x080160fc

0800fccc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	6039      	str	r1, [r7, #0]
 800fcd6:	80fb      	strh	r3, [r7, #6]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800fcdc:	88fb      	ldrh	r3, [r7, #6]
 800fcde:	2b43      	cmp	r3, #67	; 0x43
 800fce0:	d906      	bls.n	800fcf0 <dhcp_option_byte+0x24>
 800fce2:	4b0a      	ldr	r3, [pc, #40]	; (800fd0c <dhcp_option_byte+0x40>)
 800fce4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800fce8:	4909      	ldr	r1, [pc, #36]	; (800fd10 <dhcp_option_byte+0x44>)
 800fcea:	480a      	ldr	r0, [pc, #40]	; (800fd14 <dhcp_option_byte+0x48>)
 800fcec:	f003 f92c 	bl	8012f48 <iprintf>
  options[options_out_len++] = value;
 800fcf0:	88fb      	ldrh	r3, [r7, #6]
 800fcf2:	1c5a      	adds	r2, r3, #1
 800fcf4:	80fa      	strh	r2, [r7, #6]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	797a      	ldrb	r2, [r7, #5]
 800fcfe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fd00:	88fb      	ldrh	r3, [r7, #6]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	0801609c 	.word	0x0801609c
 800fd10:	08016274 	.word	0x08016274
 800fd14:	080160fc 	.word	0x080160fc

0800fd18 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	4603      	mov	r3, r0
 800fd20:	6039      	str	r1, [r7, #0]
 800fd22:	80fb      	strh	r3, [r7, #6]
 800fd24:	4613      	mov	r3, r2
 800fd26:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fd28:	88fb      	ldrh	r3, [r7, #6]
 800fd2a:	3302      	adds	r3, #2
 800fd2c:	2b44      	cmp	r3, #68	; 0x44
 800fd2e:	d906      	bls.n	800fd3e <dhcp_option_short+0x26>
 800fd30:	4b0f      	ldr	r3, [pc, #60]	; (800fd70 <dhcp_option_short+0x58>)
 800fd32:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800fd36:	490f      	ldr	r1, [pc, #60]	; (800fd74 <dhcp_option_short+0x5c>)
 800fd38:	480f      	ldr	r0, [pc, #60]	; (800fd78 <dhcp_option_short+0x60>)
 800fd3a:	f003 f905 	bl	8012f48 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fd3e:	88bb      	ldrh	r3, [r7, #4]
 800fd40:	0a1b      	lsrs	r3, r3, #8
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	88fb      	ldrh	r3, [r7, #6]
 800fd46:	1c59      	adds	r1, r3, #1
 800fd48:	80f9      	strh	r1, [r7, #6]
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	440b      	add	r3, r1
 800fd50:	b2d2      	uxtb	r2, r2
 800fd52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800fd54:	88fb      	ldrh	r3, [r7, #6]
 800fd56:	1c5a      	adds	r2, r3, #1
 800fd58:	80fa      	strh	r2, [r7, #6]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	4413      	add	r3, r2
 800fd60:	88ba      	ldrh	r2, [r7, #4]
 800fd62:	b2d2      	uxtb	r2, r2
 800fd64:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fd66:	88fb      	ldrh	r3, [r7, #6]
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	0801609c 	.word	0x0801609c
 800fd74:	080162ac 	.word	0x080162ac
 800fd78:	080160fc 	.word	0x080160fc

0800fd7c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	607a      	str	r2, [r7, #4]
 800fd88:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fd8a:	89fb      	ldrh	r3, [r7, #14]
 800fd8c:	3304      	adds	r3, #4
 800fd8e:	2b44      	cmp	r3, #68	; 0x44
 800fd90:	d906      	bls.n	800fda0 <dhcp_option_long+0x24>
 800fd92:	4b19      	ldr	r3, [pc, #100]	; (800fdf8 <dhcp_option_long+0x7c>)
 800fd94:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800fd98:	4918      	ldr	r1, [pc, #96]	; (800fdfc <dhcp_option_long+0x80>)
 800fd9a:	4819      	ldr	r0, [pc, #100]	; (800fe00 <dhcp_option_long+0x84>)
 800fd9c:	f003 f8d4 	bl	8012f48 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	0e1a      	lsrs	r2, r3, #24
 800fda4:	89fb      	ldrh	r3, [r7, #14]
 800fda6:	1c59      	adds	r1, r3, #1
 800fda8:	81f9      	strh	r1, [r7, #14]
 800fdaa:	4619      	mov	r1, r3
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	440b      	add	r3, r1
 800fdb0:	b2d2      	uxtb	r2, r2
 800fdb2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	0c1a      	lsrs	r2, r3, #16
 800fdb8:	89fb      	ldrh	r3, [r7, #14]
 800fdba:	1c59      	adds	r1, r3, #1
 800fdbc:	81f9      	strh	r1, [r7, #14]
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	440b      	add	r3, r1
 800fdc4:	b2d2      	uxtb	r2, r2
 800fdc6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	0a1a      	lsrs	r2, r3, #8
 800fdcc:	89fb      	ldrh	r3, [r7, #14]
 800fdce:	1c59      	adds	r1, r3, #1
 800fdd0:	81f9      	strh	r1, [r7, #14]
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	440b      	add	r3, r1
 800fdd8:	b2d2      	uxtb	r2, r2
 800fdda:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800fddc:	89fb      	ldrh	r3, [r7, #14]
 800fdde:	1c5a      	adds	r2, r3, #1
 800fde0:	81fa      	strh	r2, [r7, #14]
 800fde2:	461a      	mov	r2, r3
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	4413      	add	r3, r2
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	b2d2      	uxtb	r2, r2
 800fdec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fdee:	89fb      	ldrh	r3, [r7, #14]
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	0801609c 	.word	0x0801609c
 800fdfc:	080162e8 	.word	0x080162e8
 800fe00:	080160fc 	.word	0x080160fc

0800fe04 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b090      	sub	sp, #64	; 0x40
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800fe12:	2300      	movs	r3, #0
 800fe14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800fe16:	2208      	movs	r2, #8
 800fe18:	2100      	movs	r1, #0
 800fe1a:	48b5      	ldr	r0, [pc, #724]	; (80100f0 <dhcp_parse_reply+0x2ec>)
 800fe1c:	f003 f8f9 	bl	8013012 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	895b      	ldrh	r3, [r3, #10]
 800fe24:	2b2b      	cmp	r3, #43	; 0x2b
 800fe26:	d802      	bhi.n	800fe2e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800fe28:	f06f 0301 	mvn.w	r3, #1
 800fe2c:	e2a7      	b.n	801037e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800fe34:	23f0      	movs	r3, #240	; 0xf0
 800fe36:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	891b      	ldrh	r3, [r3, #8]
 800fe3c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fe42:	e00c      	b.n	800fe5e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800fe44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe46:	895b      	ldrh	r3, [r3, #10]
 800fe48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800fe4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe50:	895b      	ldrh	r3, [r3, #10]
 800fe52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d004      	beq.n	800fe6e <dhcp_parse_reply+0x6a>
 800fe64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe66:	895b      	ldrh	r3, [r3, #10]
 800fe68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d2ea      	bcs.n	800fe44 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d102      	bne.n	800fe7a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800fe74:	f06f 0301 	mvn.w	r3, #1
 800fe78:	e281      	b.n	801037e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800fe7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800fe7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fe80:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800fe82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fe88:	e239      	b.n	80102fe <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800fe8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe8e:	4413      	add	r3, r2
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800fe94:	2300      	movs	r3, #0
 800fe96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800fe9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800fea0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fea2:	3302      	adds	r3, #2
 800fea4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800fea6:	8bfa      	ldrh	r2, [r7, #30]
 800fea8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800feaa:	429a      	cmp	r2, r3
 800feac:	d202      	bcs.n	800feb4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800feae:	f06f 0301 	mvn.w	r3, #1
 800feb2:	e264      	b.n	801037e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800feb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800feb6:	3301      	adds	r3, #1
 800feb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feba:	8952      	ldrh	r2, [r2, #10]
 800febc:	4293      	cmp	r3, r2
 800febe:	da07      	bge.n	800fed0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800fec0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fec2:	3301      	adds	r3, #1
 800fec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fec6:	4413      	add	r3, r2
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fece:	e00b      	b.n	800fee8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d004      	beq.n	800fee2 <dhcp_parse_reply+0xde>
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	e000      	b.n	800fee4 <dhcp_parse_reply+0xe0>
 800fee2:	2300      	movs	r3, #0
 800fee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800fee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800fef0:	7dfb      	ldrb	r3, [r7, #23]
 800fef2:	2b3b      	cmp	r3, #59	; 0x3b
 800fef4:	f200 812c 	bhi.w	8010150 <dhcp_parse_reply+0x34c>
 800fef8:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <dhcp_parse_reply+0xfc>)
 800fefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefe:	bf00      	nop
 800ff00:	0800fff1 	.word	0x0800fff1
 800ff04:	08010001 	.word	0x08010001
 800ff08:	08010151 	.word	0x08010151
 800ff0c:	08010023 	.word	0x08010023
 800ff10:	08010151 	.word	0x08010151
 800ff14:	08010151 	.word	0x08010151
 800ff18:	08010151 	.word	0x08010151
 800ff1c:	08010151 	.word	0x08010151
 800ff20:	08010151 	.word	0x08010151
 800ff24:	08010151 	.word	0x08010151
 800ff28:	08010151 	.word	0x08010151
 800ff2c:	08010151 	.word	0x08010151
 800ff30:	08010151 	.word	0x08010151
 800ff34:	08010151 	.word	0x08010151
 800ff38:	08010151 	.word	0x08010151
 800ff3c:	08010151 	.word	0x08010151
 800ff40:	08010151 	.word	0x08010151
 800ff44:	08010151 	.word	0x08010151
 800ff48:	08010151 	.word	0x08010151
 800ff4c:	08010151 	.word	0x08010151
 800ff50:	08010151 	.word	0x08010151
 800ff54:	08010151 	.word	0x08010151
 800ff58:	08010151 	.word	0x08010151
 800ff5c:	08010151 	.word	0x08010151
 800ff60:	08010151 	.word	0x08010151
 800ff64:	08010151 	.word	0x08010151
 800ff68:	08010151 	.word	0x08010151
 800ff6c:	08010151 	.word	0x08010151
 800ff70:	08010151 	.word	0x08010151
 800ff74:	08010151 	.word	0x08010151
 800ff78:	08010151 	.word	0x08010151
 800ff7c:	08010151 	.word	0x08010151
 800ff80:	08010151 	.word	0x08010151
 800ff84:	08010151 	.word	0x08010151
 800ff88:	08010151 	.word	0x08010151
 800ff8c:	08010151 	.word	0x08010151
 800ff90:	08010151 	.word	0x08010151
 800ff94:	08010151 	.word	0x08010151
 800ff98:	08010151 	.word	0x08010151
 800ff9c:	08010151 	.word	0x08010151
 800ffa0:	08010151 	.word	0x08010151
 800ffa4:	08010151 	.word	0x08010151
 800ffa8:	08010151 	.word	0x08010151
 800ffac:	08010151 	.word	0x08010151
 800ffb0:	08010151 	.word	0x08010151
 800ffb4:	08010151 	.word	0x08010151
 800ffb8:	08010151 	.word	0x08010151
 800ffbc:	08010151 	.word	0x08010151
 800ffc0:	08010151 	.word	0x08010151
 800ffc4:	08010151 	.word	0x08010151
 800ffc8:	08010151 	.word	0x08010151
 800ffcc:	0801004f 	.word	0x0801004f
 800ffd0:	08010071 	.word	0x08010071
 800ffd4:	080100ad 	.word	0x080100ad
 800ffd8:	080100cf 	.word	0x080100cf
 800ffdc:	08010151 	.word	0x08010151
 800ffe0:	08010151 	.word	0x08010151
 800ffe4:	08010151 	.word	0x08010151
 800ffe8:	0801010d 	.word	0x0801010d
 800ffec:	0801012f 	.word	0x0801012f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800fffe:	e0ab      	b.n	8010158 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010004:	2b04      	cmp	r3, #4
 8010006:	d009      	beq.n	801001c <dhcp_parse_reply+0x218>
 8010008:	4b3a      	ldr	r3, [pc, #232]	; (80100f4 <dhcp_parse_reply+0x2f0>)
 801000a:	f240 622e 	movw	r2, #1582	; 0x62e
 801000e:	493a      	ldr	r1, [pc, #232]	; (80100f8 <dhcp_parse_reply+0x2f4>)
 8010010:	483a      	ldr	r0, [pc, #232]	; (80100fc <dhcp_parse_reply+0x2f8>)
 8010012:	f002 ff99 	bl	8012f48 <iprintf>
 8010016:	f06f 0305 	mvn.w	r3, #5
 801001a:	e1b0      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801001c:	2306      	movs	r3, #6
 801001e:	623b      	str	r3, [r7, #32]
        break;
 8010020:	e09a      	b.n	8010158 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010022:	2304      	movs	r3, #4
 8010024:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010028:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801002c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010030:	429a      	cmp	r2, r3
 8010032:	d209      	bcs.n	8010048 <dhcp_parse_reply+0x244>
 8010034:	4b2f      	ldr	r3, [pc, #188]	; (80100f4 <dhcp_parse_reply+0x2f0>)
 8010036:	f240 6233 	movw	r2, #1587	; 0x633
 801003a:	4931      	ldr	r1, [pc, #196]	; (8010100 <dhcp_parse_reply+0x2fc>)
 801003c:	482f      	ldr	r0, [pc, #188]	; (80100fc <dhcp_parse_reply+0x2f8>)
 801003e:	f002 ff83 	bl	8012f48 <iprintf>
 8010042:	f06f 0305 	mvn.w	r3, #5
 8010046:	e19a      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010048:	2307      	movs	r3, #7
 801004a:	623b      	str	r3, [r7, #32]
        break;
 801004c:	e084      	b.n	8010158 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801004e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010052:	2b04      	cmp	r3, #4
 8010054:	d009      	beq.n	801006a <dhcp_parse_reply+0x266>
 8010056:	4b27      	ldr	r3, [pc, #156]	; (80100f4 <dhcp_parse_reply+0x2f0>)
 8010058:	f240 6241 	movw	r2, #1601	; 0x641
 801005c:	4926      	ldr	r1, [pc, #152]	; (80100f8 <dhcp_parse_reply+0x2f4>)
 801005e:	4827      	ldr	r0, [pc, #156]	; (80100fc <dhcp_parse_reply+0x2f8>)
 8010060:	f002 ff72 	bl	8012f48 <iprintf>
 8010064:	f06f 0305 	mvn.w	r3, #5
 8010068:	e189      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801006a:	2303      	movs	r3, #3
 801006c:	623b      	str	r3, [r7, #32]
        break;
 801006e:	e073      	b.n	8010158 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010074:	2b01      	cmp	r3, #1
 8010076:	d009      	beq.n	801008c <dhcp_parse_reply+0x288>
 8010078:	4b1e      	ldr	r3, [pc, #120]	; (80100f4 <dhcp_parse_reply+0x2f0>)
 801007a:	f240 624f 	movw	r2, #1615	; 0x64f
 801007e:	4921      	ldr	r1, [pc, #132]	; (8010104 <dhcp_parse_reply+0x300>)
 8010080:	481e      	ldr	r0, [pc, #120]	; (80100fc <dhcp_parse_reply+0x2f8>)
 8010082:	f002 ff61 	bl	8012f48 <iprintf>
 8010086:	f06f 0305 	mvn.w	r3, #5
 801008a:	e178      	b.n	801037e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801008c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801008e:	2bf0      	cmp	r3, #240	; 0xf0
 8010090:	d009      	beq.n	80100a6 <dhcp_parse_reply+0x2a2>
 8010092:	4b18      	ldr	r3, [pc, #96]	; (80100f4 <dhcp_parse_reply+0x2f0>)
 8010094:	f240 6251 	movw	r2, #1617	; 0x651
 8010098:	491b      	ldr	r1, [pc, #108]	; (8010108 <dhcp_parse_reply+0x304>)
 801009a:	4818      	ldr	r0, [pc, #96]	; (80100fc <dhcp_parse_reply+0x2f8>)
 801009c:	f002 ff54 	bl	8012f48 <iprintf>
 80100a0:	f06f 0305 	mvn.w	r3, #5
 80100a4:	e16b      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80100a6:	2300      	movs	r3, #0
 80100a8:	623b      	str	r3, [r7, #32]
        break;
 80100aa:	e055      	b.n	8010158 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80100ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d009      	beq.n	80100c8 <dhcp_parse_reply+0x2c4>
 80100b4:	4b0f      	ldr	r3, [pc, #60]	; (80100f4 <dhcp_parse_reply+0x2f0>)
 80100b6:	f240 6255 	movw	r2, #1621	; 0x655
 80100ba:	4912      	ldr	r1, [pc, #72]	; (8010104 <dhcp_parse_reply+0x300>)
 80100bc:	480f      	ldr	r0, [pc, #60]	; (80100fc <dhcp_parse_reply+0x2f8>)
 80100be:	f002 ff43 	bl	8012f48 <iprintf>
 80100c2:	f06f 0305 	mvn.w	r3, #5
 80100c6:	e15a      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80100c8:	2301      	movs	r3, #1
 80100ca:	623b      	str	r3, [r7, #32]
        break;
 80100cc:	e044      	b.n	8010158 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80100ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100d2:	2b04      	cmp	r3, #4
 80100d4:	d009      	beq.n	80100ea <dhcp_parse_reply+0x2e6>
 80100d6:	4b07      	ldr	r3, [pc, #28]	; (80100f4 <dhcp_parse_reply+0x2f0>)
 80100d8:	f240 6259 	movw	r2, #1625	; 0x659
 80100dc:	4906      	ldr	r1, [pc, #24]	; (80100f8 <dhcp_parse_reply+0x2f4>)
 80100de:	4807      	ldr	r0, [pc, #28]	; (80100fc <dhcp_parse_reply+0x2f8>)
 80100e0:	f002 ff32 	bl	8012f48 <iprintf>
 80100e4:	f06f 0305 	mvn.w	r3, #5
 80100e8:	e149      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80100ea:	2302      	movs	r3, #2
 80100ec:	623b      	str	r3, [r7, #32]
        break;
 80100ee:	e033      	b.n	8010158 <dhcp_parse_reply+0x354>
 80100f0:	2000884c 	.word	0x2000884c
 80100f4:	0801609c 	.word	0x0801609c
 80100f8:	08016324 	.word	0x08016324
 80100fc:	080160fc 	.word	0x080160fc
 8010100:	08016330 	.word	0x08016330
 8010104:	08016344 	.word	0x08016344
 8010108:	08016350 	.word	0x08016350
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801010c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010110:	2b04      	cmp	r3, #4
 8010112:	d009      	beq.n	8010128 <dhcp_parse_reply+0x324>
 8010114:	4b9c      	ldr	r3, [pc, #624]	; (8010388 <dhcp_parse_reply+0x584>)
 8010116:	f240 625d 	movw	r2, #1629	; 0x65d
 801011a:	499c      	ldr	r1, [pc, #624]	; (801038c <dhcp_parse_reply+0x588>)
 801011c:	489c      	ldr	r0, [pc, #624]	; (8010390 <dhcp_parse_reply+0x58c>)
 801011e:	f002 ff13 	bl	8012f48 <iprintf>
 8010122:	f06f 0305 	mvn.w	r3, #5
 8010126:	e12a      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010128:	2304      	movs	r3, #4
 801012a:	623b      	str	r3, [r7, #32]
        break;
 801012c:	e014      	b.n	8010158 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801012e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010132:	2b04      	cmp	r3, #4
 8010134:	d009      	beq.n	801014a <dhcp_parse_reply+0x346>
 8010136:	4b94      	ldr	r3, [pc, #592]	; (8010388 <dhcp_parse_reply+0x584>)
 8010138:	f240 6261 	movw	r2, #1633	; 0x661
 801013c:	4993      	ldr	r1, [pc, #588]	; (801038c <dhcp_parse_reply+0x588>)
 801013e:	4894      	ldr	r0, [pc, #592]	; (8010390 <dhcp_parse_reply+0x58c>)
 8010140:	f002 ff02 	bl	8012f48 <iprintf>
 8010144:	f06f 0305 	mvn.w	r3, #5
 8010148:	e119      	b.n	801037e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801014a:	2305      	movs	r3, #5
 801014c:	623b      	str	r3, [r7, #32]
        break;
 801014e:	e003      	b.n	8010158 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010156:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010158:	7dfb      	ldrb	r3, [r7, #23]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d103      	bne.n	8010166 <dhcp_parse_reply+0x362>
      offset++;
 801015e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010160:	3301      	adds	r3, #1
 8010162:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010164:	e0a1      	b.n	80102aa <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010166:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801016c:	4413      	add	r3, r2
 801016e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8010172:	4293      	cmp	r3, r2
 8010174:	dd02      	ble.n	801017c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010176:	f06f 0301 	mvn.w	r3, #1
 801017a:	e100      	b.n	801037e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801017c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010180:	b29a      	uxth	r2, r3
 8010182:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010184:	4413      	add	r3, r2
 8010186:	b29b      	uxth	r3, r3
 8010188:	3302      	adds	r3, #2
 801018a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801018c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010190:	2b00      	cmp	r3, #0
 8010192:	f000 808a 	beq.w	80102aa <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8010196:	2300      	movs	r3, #0
 8010198:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	2b00      	cmp	r3, #0
 801019e:	db02      	blt.n	80101a6 <dhcp_parse_reply+0x3a2>
 80101a0:	6a3b      	ldr	r3, [r7, #32]
 80101a2:	2b07      	cmp	r3, #7
 80101a4:	dd06      	ble.n	80101b4 <dhcp_parse_reply+0x3b0>
 80101a6:	4b78      	ldr	r3, [pc, #480]	; (8010388 <dhcp_parse_reply+0x584>)
 80101a8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80101ac:	4979      	ldr	r1, [pc, #484]	; (8010394 <dhcp_parse_reply+0x590>)
 80101ae:	4878      	ldr	r0, [pc, #480]	; (8010390 <dhcp_parse_reply+0x58c>)
 80101b0:	f002 feca 	bl	8012f48 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80101b4:	4a78      	ldr	r2, [pc, #480]	; (8010398 <dhcp_parse_reply+0x594>)
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	4413      	add	r3, r2
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d174      	bne.n	80102aa <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80101c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101c4:	2b04      	cmp	r3, #4
 80101c6:	bf28      	it	cs
 80101c8:	2304      	movcs	r3, #4
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80101ce:	8bfb      	ldrh	r3, [r7, #30]
 80101d0:	8aba      	ldrh	r2, [r7, #20]
 80101d2:	f107 0108 	add.w	r1, r7, #8
 80101d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101d8:	f7f8 fcc4 	bl	8008b64 <pbuf_copy_partial>
 80101dc:	4603      	mov	r3, r0
 80101de:	461a      	mov	r2, r3
 80101e0:	8abb      	ldrh	r3, [r7, #20]
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d002      	beq.n	80101ec <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80101e6:	f06f 0301 	mvn.w	r3, #1
 80101ea:	e0c8      	b.n	801037e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80101ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101f0:	2b04      	cmp	r3, #4
 80101f2:	d933      	bls.n	801025c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80101f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101f8:	f003 0303 	and.w	r3, r3, #3
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d009      	beq.n	8010216 <dhcp_parse_reply+0x412>
 8010202:	4b61      	ldr	r3, [pc, #388]	; (8010388 <dhcp_parse_reply+0x584>)
 8010204:	f240 6281 	movw	r2, #1665	; 0x681
 8010208:	4964      	ldr	r1, [pc, #400]	; (801039c <dhcp_parse_reply+0x598>)
 801020a:	4861      	ldr	r0, [pc, #388]	; (8010390 <dhcp_parse_reply+0x58c>)
 801020c:	f002 fe9c 	bl	8012f48 <iprintf>
 8010210:	f06f 0305 	mvn.w	r3, #5
 8010214:	e0b3      	b.n	801037e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010216:	4a60      	ldr	r2, [pc, #384]	; (8010398 <dhcp_parse_reply+0x594>)
 8010218:	6a3b      	ldr	r3, [r7, #32]
 801021a:	4413      	add	r3, r2
 801021c:	2201      	movs	r2, #1
 801021e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	4618      	mov	r0, r3
 8010224:	f7f7 f81e 	bl	8007264 <lwip_htonl>
 8010228:	4602      	mov	r2, r0
 801022a:	495d      	ldr	r1, [pc, #372]	; (80103a0 <dhcp_parse_reply+0x59c>)
 801022c:	6a3b      	ldr	r3, [r7, #32]
 801022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010232:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010236:	3b04      	subs	r3, #4
 8010238:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801023c:	8bfb      	ldrh	r3, [r7, #30]
 801023e:	3304      	adds	r3, #4
 8010240:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010242:	8a7a      	ldrh	r2, [r7, #18]
 8010244:	8bfb      	ldrh	r3, [r7, #30]
 8010246:	429a      	cmp	r2, r3
 8010248:	d202      	bcs.n	8010250 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801024a:	f06f 0301 	mvn.w	r3, #1
 801024e:	e096      	b.n	801037e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8010250:	8a7b      	ldrh	r3, [r7, #18]
 8010252:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010254:	6a3b      	ldr	r3, [r7, #32]
 8010256:	3301      	adds	r3, #1
 8010258:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801025a:	e79e      	b.n	801019a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801025c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010260:	2b04      	cmp	r3, #4
 8010262:	d106      	bne.n	8010272 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	4618      	mov	r0, r3
 8010268:	f7f6 fffc 	bl	8007264 <lwip_htonl>
 801026c:	4603      	mov	r3, r0
 801026e:	60bb      	str	r3, [r7, #8]
 8010270:	e011      	b.n	8010296 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010272:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010276:	2b01      	cmp	r3, #1
 8010278:	d009      	beq.n	801028e <dhcp_parse_reply+0x48a>
 801027a:	4b43      	ldr	r3, [pc, #268]	; (8010388 <dhcp_parse_reply+0x584>)
 801027c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8010280:	4948      	ldr	r1, [pc, #288]	; (80103a4 <dhcp_parse_reply+0x5a0>)
 8010282:	4843      	ldr	r0, [pc, #268]	; (8010390 <dhcp_parse_reply+0x58c>)
 8010284:	f002 fe60 	bl	8012f48 <iprintf>
 8010288:	f06f 0305 	mvn.w	r3, #5
 801028c:	e077      	b.n	801037e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801028e:	f107 0308 	add.w	r3, r7, #8
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8010296:	4a40      	ldr	r2, [pc, #256]	; (8010398 <dhcp_parse_reply+0x594>)
 8010298:	6a3b      	ldr	r3, [r7, #32]
 801029a:	4413      	add	r3, r2
 801029c:	2201      	movs	r2, #1
 801029e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	493f      	ldr	r1, [pc, #252]	; (80103a0 <dhcp_parse_reply+0x59c>)
 80102a4:	6a3b      	ldr	r3, [r7, #32]
 80102a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	895b      	ldrh	r3, [r3, #10]
 80102ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d324      	bcc.n	80102fe <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80102b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b6:	895b      	ldrh	r3, [r3, #10]
 80102b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80102be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c0:	895b      	ldrh	r3, [r3, #10]
 80102c2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80102c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80102ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d213      	bcs.n	80102f8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80102d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80102d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d109      	bne.n	80102f0 <dhcp_parse_reply+0x4ec>
 80102dc:	4b2a      	ldr	r3, [pc, #168]	; (8010388 <dhcp_parse_reply+0x584>)
 80102de:	f240 629d 	movw	r2, #1693	; 0x69d
 80102e2:	4931      	ldr	r1, [pc, #196]	; (80103a8 <dhcp_parse_reply+0x5a4>)
 80102e4:	482a      	ldr	r0, [pc, #168]	; (8010390 <dhcp_parse_reply+0x58c>)
 80102e6:	f002 fe2f 	bl	8012f48 <iprintf>
 80102ea:	f06f 0305 	mvn.w	r3, #5
 80102ee:	e046      	b.n	801037e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80102f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102f6:	e002      	b.n	80102fe <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80102f8:	f06f 0301 	mvn.w	r3, #1
 80102fc:	e03f      	b.n	801037e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	2b00      	cmp	r3, #0
 8010302:	d00a      	beq.n	801031a <dhcp_parse_reply+0x516>
 8010304:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010306:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010308:	429a      	cmp	r2, r3
 801030a:	d206      	bcs.n	801031a <dhcp_parse_reply+0x516>
 801030c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801030e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010310:	4413      	add	r3, r2
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	2bff      	cmp	r3, #255	; 0xff
 8010316:	f47f adb8 	bne.w	800fe8a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801031a:	4b1f      	ldr	r3, [pc, #124]	; (8010398 <dhcp_parse_reply+0x594>)
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d018      	beq.n	8010354 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010322:	4b1f      	ldr	r3, [pc, #124]	; (80103a0 <dhcp_parse_reply+0x59c>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010328:	4b1b      	ldr	r3, [pc, #108]	; (8010398 <dhcp_parse_reply+0x594>)
 801032a:	2200      	movs	r2, #0
 801032c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d102      	bne.n	801033a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8010334:	2301      	movs	r3, #1
 8010336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010338:	e00c      	b.n	8010354 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2b02      	cmp	r3, #2
 801033e:	d102      	bne.n	8010346 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8010340:	2301      	movs	r3, #1
 8010342:	62bb      	str	r3, [r7, #40]	; 0x28
 8010344:	e006      	b.n	8010354 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2b03      	cmp	r3, #3
 801034a:	d103      	bne.n	8010354 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801034c:	2301      	movs	r3, #1
 801034e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8010350:	2301      	movs	r3, #1
 8010352:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010356:	2b00      	cmp	r3, #0
 8010358:	d006      	beq.n	8010368 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801035a:	2300      	movs	r3, #0
 801035c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801035e:	236c      	movs	r3, #108	; 0x6c
 8010360:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010362:	23ec      	movs	r3, #236	; 0xec
 8010364:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010366:	e56a      	b.n	800fe3e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036a:	2b00      	cmp	r3, #0
 801036c:	d006      	beq.n	801037c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801036e:	2300      	movs	r3, #0
 8010370:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8010372:	232c      	movs	r3, #44	; 0x2c
 8010374:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010376:	236c      	movs	r3, #108	; 0x6c
 8010378:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801037a:	e560      	b.n	800fe3e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801037c:	2300      	movs	r3, #0
}
 801037e:	4618      	mov	r0, r3
 8010380:	3740      	adds	r7, #64	; 0x40
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	0801609c 	.word	0x0801609c
 801038c:	08016324 	.word	0x08016324
 8010390:	080160fc 	.word	0x080160fc
 8010394:	08016368 	.word	0x08016368
 8010398:	2000884c 	.word	0x2000884c
 801039c:	0801637c 	.word	0x0801637c
 80103a0:	2000882c 	.word	0x2000882c
 80103a4:	08016394 	.word	0x08016394
 80103a8:	080163a8 	.word	0x080163a8

080103ac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b08a      	sub	sp, #40	; 0x28
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	607a      	str	r2, [r7, #4]
 80103b8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80103ba:	4b60      	ldr	r3, [pc, #384]	; (801053c <dhcp_recv+0x190>)
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80103c0:	6a3b      	ldr	r3, [r7, #32]
 80103c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f000 809d 	beq.w	801050e <dhcp_recv+0x162>
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	791b      	ldrb	r3, [r3, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 8098 	beq.w	801050e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	895b      	ldrh	r3, [r3, #10]
 80103e2:	2b2b      	cmp	r3, #43	; 0x2b
 80103e4:	f240 8095 	bls.w	8010512 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	f040 8092 	bne.w	8010516 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80103f2:	2300      	movs	r3, #0
 80103f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80103f8:	e012      	b.n	8010420 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80103fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103fe:	6a3a      	ldr	r2, [r7, #32]
 8010400:	4413      	add	r3, r2
 8010402:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801040a:	69b9      	ldr	r1, [r7, #24]
 801040c:	440b      	add	r3, r1
 801040e:	7f1b      	ldrb	r3, [r3, #28]
 8010410:	429a      	cmp	r2, r3
 8010412:	f040 8082 	bne.w	801051a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801041a:	3301      	adds	r3, #1
 801041c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010420:	6a3b      	ldr	r3, [r7, #32]
 8010422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010426:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801042a:	429a      	cmp	r2, r3
 801042c:	d203      	bcs.n	8010436 <dhcp_recv+0x8a>
 801042e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010432:	2b05      	cmp	r3, #5
 8010434:	d9e1      	bls.n	80103fa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	4618      	mov	r0, r3
 801043c:	f7f6 ff12 	bl	8007264 <lwip_htonl>
 8010440:	4602      	mov	r2, r0
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	429a      	cmp	r2, r3
 8010448:	d169      	bne.n	801051e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801044a:	69f9      	ldr	r1, [r7, #28]
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff fcd9 	bl	800fe04 <dhcp_parse_reply>
 8010452:	4603      	mov	r3, r0
 8010454:	2b00      	cmp	r3, #0
 8010456:	d164      	bne.n	8010522 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010458:	4b39      	ldr	r3, [pc, #228]	; (8010540 <dhcp_recv+0x194>)
 801045a:	785b      	ldrb	r3, [r3, #1]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d062      	beq.n	8010526 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010466:	4b37      	ldr	r3, [pc, #220]	; (8010544 <dhcp_recv+0x198>)
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801046c:	7cfb      	ldrb	r3, [r7, #19]
 801046e:	2b05      	cmp	r3, #5
 8010470:	d12a      	bne.n	80104c8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	795b      	ldrb	r3, [r3, #5]
 8010476:	2b01      	cmp	r3, #1
 8010478:	d112      	bne.n	80104a0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801047a:	6979      	ldr	r1, [r7, #20]
 801047c:	6a38      	ldr	r0, [r7, #32]
 801047e:	f7fe fe53 	bl	800f128 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8010482:	6a3b      	ldr	r3, [r7, #32]
 8010484:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010488:	f003 0308 	and.w	r3, r3, #8
 801048c:	2b00      	cmp	r3, #0
 801048e:	d003      	beq.n	8010498 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8010490:	6a38      	ldr	r0, [r7, #32]
 8010492:	f7fe fbc1 	bl	800ec18 <dhcp_check>
 8010496:	e049      	b.n	801052c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8010498:	6a38      	ldr	r0, [r7, #32]
 801049a:	f7ff f867 	bl	800f56c <dhcp_bind>
 801049e:	e045      	b.n	801052c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	795b      	ldrb	r3, [r3, #5]
 80104a4:	2b03      	cmp	r3, #3
 80104a6:	d007      	beq.n	80104b8 <dhcp_recv+0x10c>
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	795b      	ldrb	r3, [r3, #5]
 80104ac:	2b04      	cmp	r3, #4
 80104ae:	d003      	beq.n	80104b8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80104b4:	2b05      	cmp	r3, #5
 80104b6:	d139      	bne.n	801052c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80104b8:	6979      	ldr	r1, [r7, #20]
 80104ba:	6a38      	ldr	r0, [r7, #32]
 80104bc:	f7fe fe34 	bl	800f128 <dhcp_handle_ack>
      dhcp_bind(netif);
 80104c0:	6a38      	ldr	r0, [r7, #32]
 80104c2:	f7ff f853 	bl	800f56c <dhcp_bind>
 80104c6:	e031      	b.n	801052c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80104c8:	7cfb      	ldrb	r3, [r7, #19]
 80104ca:	2b06      	cmp	r3, #6
 80104cc:	d113      	bne.n	80104f6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80104ce:	69fb      	ldr	r3, [r7, #28]
 80104d0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80104d2:	2b03      	cmp	r3, #3
 80104d4:	d00b      	beq.n	80104ee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	795b      	ldrb	r3, [r3, #5]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d007      	beq.n	80104ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	d003      	beq.n	80104ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	795b      	ldrb	r3, [r3, #5]
 80104ea:	2b05      	cmp	r3, #5
 80104ec:	d103      	bne.n	80104f6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80104ee:	6a38      	ldr	r0, [r7, #32]
 80104f0:	f7fe fb78 	bl	800ebe4 <dhcp_handle_nak>
 80104f4:	e01a      	b.n	801052c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80104f6:	7cfb      	ldrb	r3, [r7, #19]
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d116      	bne.n	801052a <dhcp_recv+0x17e>
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	795b      	ldrb	r3, [r3, #5]
 8010500:	2b06      	cmp	r3, #6
 8010502:	d112      	bne.n	801052a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010504:	6979      	ldr	r1, [r7, #20]
 8010506:	6a38      	ldr	r0, [r7, #32]
 8010508:	f7fe fbba 	bl	800ec80 <dhcp_handle_offer>
 801050c:	e00e      	b.n	801052c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801050e:	bf00      	nop
 8010510:	e00c      	b.n	801052c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010512:	bf00      	nop
 8010514:	e00a      	b.n	801052c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010516:	bf00      	nop
 8010518:	e008      	b.n	801052c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801051a:	bf00      	nop
 801051c:	e006      	b.n	801052c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801051e:	bf00      	nop
 8010520:	e004      	b.n	801052c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010522:	bf00      	nop
 8010524:	e002      	b.n	801052c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010526:	bf00      	nop
 8010528:	e000      	b.n	801052c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801052a:	bf00      	nop
  pbuf_free(p);
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7f8 f91f 	bl	8008770 <pbuf_free>
}
 8010532:	bf00      	nop
 8010534:	3728      	adds	r7, #40	; 0x28
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	2000523c 	.word	0x2000523c
 8010540:	2000884c 	.word	0x2000884c
 8010544:	2000882c 	.word	0x2000882c

08010548 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b088      	sub	sp, #32
 801054c:	af00      	add	r7, sp, #0
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	603b      	str	r3, [r7, #0]
 8010554:	4613      	mov	r3, r2
 8010556:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d108      	bne.n	8010570 <dhcp_create_msg+0x28>
 801055e:	4b5f      	ldr	r3, [pc, #380]	; (80106dc <dhcp_create_msg+0x194>)
 8010560:	f240 7269 	movw	r2, #1897	; 0x769
 8010564:	495e      	ldr	r1, [pc, #376]	; (80106e0 <dhcp_create_msg+0x198>)
 8010566:	485f      	ldr	r0, [pc, #380]	; (80106e4 <dhcp_create_msg+0x19c>)
 8010568:	f002 fcee 	bl	8012f48 <iprintf>
 801056c:	2300      	movs	r3, #0
 801056e:	e0b1      	b.n	80106d4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d108      	bne.n	8010588 <dhcp_create_msg+0x40>
 8010576:	4b59      	ldr	r3, [pc, #356]	; (80106dc <dhcp_create_msg+0x194>)
 8010578:	f240 726a 	movw	r2, #1898	; 0x76a
 801057c:	495a      	ldr	r1, [pc, #360]	; (80106e8 <dhcp_create_msg+0x1a0>)
 801057e:	4859      	ldr	r0, [pc, #356]	; (80106e4 <dhcp_create_msg+0x19c>)
 8010580:	f002 fce2 	bl	8012f48 <iprintf>
 8010584:	2300      	movs	r3, #0
 8010586:	e0a5      	b.n	80106d4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010588:	f44f 7220 	mov.w	r2, #640	; 0x280
 801058c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010590:	2036      	movs	r0, #54	; 0x36
 8010592:	f7f7 fe09 	bl	80081a8 <pbuf_alloc>
 8010596:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d101      	bne.n	80105a2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801059e:	2300      	movs	r3, #0
 80105a0:	e098      	b.n	80106d4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	895b      	ldrh	r3, [r3, #10]
 80105a6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80105aa:	d206      	bcs.n	80105ba <dhcp_create_msg+0x72>
 80105ac:	4b4b      	ldr	r3, [pc, #300]	; (80106dc <dhcp_create_msg+0x194>)
 80105ae:	f240 7271 	movw	r2, #1905	; 0x771
 80105b2:	494e      	ldr	r1, [pc, #312]	; (80106ec <dhcp_create_msg+0x1a4>)
 80105b4:	484b      	ldr	r0, [pc, #300]	; (80106e4 <dhcp_create_msg+0x19c>)
 80105b6:	f002 fcc7 	bl	8012f48 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80105ba:	79fb      	ldrb	r3, [r7, #7]
 80105bc:	2b03      	cmp	r3, #3
 80105be:	d103      	bne.n	80105c8 <dhcp_create_msg+0x80>
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	795b      	ldrb	r3, [r3, #5]
 80105c4:	2b03      	cmp	r3, #3
 80105c6:	d10d      	bne.n	80105e4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	799b      	ldrb	r3, [r3, #6]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d105      	bne.n	80105dc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80105d0:	f002 fbcc 	bl	8012d6c <rand>
 80105d4:	4603      	mov	r3, r0
 80105d6:	461a      	mov	r2, r3
 80105d8:	4b45      	ldr	r3, [pc, #276]	; (80106f0 <dhcp_create_msg+0x1a8>)
 80105da:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80105dc:	4b44      	ldr	r3, [pc, #272]	; (80106f0 <dhcp_create_msg+0x1a8>)
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80105ea:	f44f 729a 	mov.w	r2, #308	; 0x134
 80105ee:	2100      	movs	r1, #0
 80105f0:	6978      	ldr	r0, [r7, #20]
 80105f2:	f002 fd0e 	bl	8013012 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	2201      	movs	r2, #1
 80105fa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	2201      	movs	r2, #1
 8010600:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4618      	mov	r0, r3
 8010612:	f7f6 fe27 	bl	8007264 <lwip_htonl>
 8010616:	4602      	mov	r2, r0
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801061c:	79fb      	ldrb	r3, [r7, #7]
 801061e:	2b08      	cmp	r3, #8
 8010620:	d010      	beq.n	8010644 <dhcp_create_msg+0xfc>
 8010622:	79fb      	ldrb	r3, [r7, #7]
 8010624:	2b04      	cmp	r3, #4
 8010626:	d00d      	beq.n	8010644 <dhcp_create_msg+0xfc>
 8010628:	79fb      	ldrb	r3, [r7, #7]
 801062a:	2b07      	cmp	r3, #7
 801062c:	d00a      	beq.n	8010644 <dhcp_create_msg+0xfc>
 801062e:	79fb      	ldrb	r3, [r7, #7]
 8010630:	2b03      	cmp	r3, #3
 8010632:	d10c      	bne.n	801064e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010638:	2b05      	cmp	r3, #5
 801063a:	d003      	beq.n	8010644 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	795b      	ldrb	r3, [r3, #5]
 8010640:	2b04      	cmp	r3, #4
 8010642:	d104      	bne.n	801064e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	3304      	adds	r3, #4
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801064e:	2300      	movs	r3, #0
 8010650:	83fb      	strh	r3, [r7, #30]
 8010652:	e00c      	b.n	801066e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010654:	8bfa      	ldrh	r2, [r7, #30]
 8010656:	8bfb      	ldrh	r3, [r7, #30]
 8010658:	68f9      	ldr	r1, [r7, #12]
 801065a:	440a      	add	r2, r1
 801065c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8010660:	697a      	ldr	r2, [r7, #20]
 8010662:	4413      	add	r3, r2
 8010664:	460a      	mov	r2, r1
 8010666:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010668:	8bfb      	ldrh	r3, [r7, #30]
 801066a:	3301      	adds	r3, #1
 801066c:	83fb      	strh	r3, [r7, #30]
 801066e:	8bfb      	ldrh	r3, [r7, #30]
 8010670:	2b05      	cmp	r3, #5
 8010672:	d9ef      	bls.n	8010654 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	2200      	movs	r2, #0
 8010678:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801067c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010680:	2200      	movs	r2, #0
 8010682:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010686:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801068a:	2200      	movs	r2, #0
 801068c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010690:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010694:	2200      	movs	r2, #0
 8010696:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801069a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106a4:	2301      	movs	r3, #1
 80106a6:	2235      	movs	r2, #53	; 0x35
 80106a8:	2000      	movs	r0, #0
 80106aa:	f7ff fadb 	bl	800fc64 <dhcp_option>
 80106ae:	4603      	mov	r3, r0
 80106b0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106b8:	79fa      	ldrb	r2, [r7, #7]
 80106ba:	8a7b      	ldrh	r3, [r7, #18]
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff fb05 	bl	800fccc <dhcp_option_byte>
 80106c2:	4603      	mov	r3, r0
 80106c4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	8a7a      	ldrh	r2, [r7, #18]
 80106d0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80106d2:	69bb      	ldr	r3, [r7, #24]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3720      	adds	r7, #32
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	0801609c 	.word	0x0801609c
 80106e0:	080163bc 	.word	0x080163bc
 80106e4:	080160fc 	.word	0x080160fc
 80106e8:	080163dc 	.word	0x080163dc
 80106ec:	080163fc 	.word	0x080163fc
 80106f0:	2000885c 	.word	0x2000885c

080106f4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	4603      	mov	r3, r0
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	607a      	str	r2, [r7, #4]
 8010700:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8010702:	89fb      	ldrh	r3, [r7, #14]
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	81fa      	strh	r2, [r7, #14]
 8010708:	461a      	mov	r2, r3
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	4413      	add	r3, r2
 801070e:	22ff      	movs	r2, #255	; 0xff
 8010710:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010712:	e007      	b.n	8010724 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010714:	89fb      	ldrh	r3, [r7, #14]
 8010716:	1c5a      	adds	r2, r3, #1
 8010718:	81fa      	strh	r2, [r7, #14]
 801071a:	461a      	mov	r2, r3
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	4413      	add	r3, r2
 8010720:	2200      	movs	r2, #0
 8010722:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010724:	89fb      	ldrh	r3, [r7, #14]
 8010726:	2b43      	cmp	r3, #67	; 0x43
 8010728:	d904      	bls.n	8010734 <dhcp_option_trailer+0x40>
 801072a:	89fb      	ldrh	r3, [r7, #14]
 801072c:	f003 0303 	and.w	r3, r3, #3
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <dhcp_option_trailer+0x46>
 8010734:	89fb      	ldrh	r3, [r7, #14]
 8010736:	2b43      	cmp	r3, #67	; 0x43
 8010738:	d9ec      	bls.n	8010714 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801073a:	89fb      	ldrh	r3, [r7, #14]
 801073c:	33f0      	adds	r3, #240	; 0xf0
 801073e:	b29b      	uxth	r3, r3
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7f7 fe8e 	bl	8008464 <pbuf_realloc>
}
 8010748:	bf00      	nop
 801074a:	3710      	adds	r7, #16
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d017      	beq.n	801078e <dhcp_supplied_address+0x3e>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010762:	2b00      	cmp	r3, #0
 8010764:	d013      	beq.n	801078e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	795b      	ldrb	r3, [r3, #5]
 8010770:	2b0a      	cmp	r3, #10
 8010772:	d007      	beq.n	8010784 <dhcp_supplied_address+0x34>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	795b      	ldrb	r3, [r3, #5]
 8010778:	2b05      	cmp	r3, #5
 801077a:	d003      	beq.n	8010784 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010780:	2b04      	cmp	r3, #4
 8010782:	d101      	bne.n	8010788 <dhcp_supplied_address+0x38>
 8010784:	2301      	movs	r3, #1
 8010786:	e000      	b.n	801078a <dhcp_supplied_address+0x3a>
 8010788:	2300      	movs	r3, #0
 801078a:	b2db      	uxtb	r3, r3
 801078c:	e000      	b.n	8010790 <dhcp_supplied_address+0x40>
  }
  return 0;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3714      	adds	r7, #20
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80107a4:	4915      	ldr	r1, [pc, #84]	; (80107fc <etharp_free_entry+0x60>)
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	4613      	mov	r3, r2
 80107aa:	005b      	lsls	r3, r3, #1
 80107ac:	4413      	add	r3, r2
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	440b      	add	r3, r1
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d013      	beq.n	80107e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80107b8:	4910      	ldr	r1, [pc, #64]	; (80107fc <etharp_free_entry+0x60>)
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	4613      	mov	r3, r2
 80107be:	005b      	lsls	r3, r3, #1
 80107c0:	4413      	add	r3, r2
 80107c2:	00db      	lsls	r3, r3, #3
 80107c4:	440b      	add	r3, r1
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7f7 ffd1 	bl	8008770 <pbuf_free>
    arp_table[i].q = NULL;
 80107ce:	490b      	ldr	r1, [pc, #44]	; (80107fc <etharp_free_entry+0x60>)
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	4613      	mov	r3, r2
 80107d4:	005b      	lsls	r3, r3, #1
 80107d6:	4413      	add	r3, r2
 80107d8:	00db      	lsls	r3, r3, #3
 80107da:	440b      	add	r3, r1
 80107dc:	2200      	movs	r2, #0
 80107de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80107e0:	4906      	ldr	r1, [pc, #24]	; (80107fc <etharp_free_entry+0x60>)
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	4613      	mov	r3, r2
 80107e6:	005b      	lsls	r3, r3, #1
 80107e8:	4413      	add	r3, r2
 80107ea:	00db      	lsls	r3, r3, #3
 80107ec:	440b      	add	r3, r1
 80107ee:	3314      	adds	r3, #20
 80107f0:	2200      	movs	r2, #0
 80107f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80107f4:	bf00      	nop
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	20008860 	.word	0x20008860

08010800 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010806:	2300      	movs	r3, #0
 8010808:	607b      	str	r3, [r7, #4]
 801080a:	e096      	b.n	801093a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801080c:	494f      	ldr	r1, [pc, #316]	; (801094c <etharp_tmr+0x14c>)
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	4613      	mov	r3, r2
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	4413      	add	r3, r2
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	440b      	add	r3, r1
 801081a:	3314      	adds	r3, #20
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010820:	78fb      	ldrb	r3, [r7, #3]
 8010822:	2b00      	cmp	r3, #0
 8010824:	f000 8086 	beq.w	8010934 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010828:	4948      	ldr	r1, [pc, #288]	; (801094c <etharp_tmr+0x14c>)
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	4613      	mov	r3, r2
 801082e:	005b      	lsls	r3, r3, #1
 8010830:	4413      	add	r3, r2
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	440b      	add	r3, r1
 8010836:	3312      	adds	r3, #18
 8010838:	881b      	ldrh	r3, [r3, #0]
 801083a:	3301      	adds	r3, #1
 801083c:	b298      	uxth	r0, r3
 801083e:	4943      	ldr	r1, [pc, #268]	; (801094c <etharp_tmr+0x14c>)
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	4613      	mov	r3, r2
 8010844:	005b      	lsls	r3, r3, #1
 8010846:	4413      	add	r3, r2
 8010848:	00db      	lsls	r3, r3, #3
 801084a:	440b      	add	r3, r1
 801084c:	3312      	adds	r3, #18
 801084e:	4602      	mov	r2, r0
 8010850:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010852:	493e      	ldr	r1, [pc, #248]	; (801094c <etharp_tmr+0x14c>)
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	4613      	mov	r3, r2
 8010858:	005b      	lsls	r3, r3, #1
 801085a:	4413      	add	r3, r2
 801085c:	00db      	lsls	r3, r3, #3
 801085e:	440b      	add	r3, r1
 8010860:	3312      	adds	r3, #18
 8010862:	881b      	ldrh	r3, [r3, #0]
 8010864:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010868:	d215      	bcs.n	8010896 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801086a:	4938      	ldr	r1, [pc, #224]	; (801094c <etharp_tmr+0x14c>)
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	4613      	mov	r3, r2
 8010870:	005b      	lsls	r3, r3, #1
 8010872:	4413      	add	r3, r2
 8010874:	00db      	lsls	r3, r3, #3
 8010876:	440b      	add	r3, r1
 8010878:	3314      	adds	r3, #20
 801087a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801087c:	2b01      	cmp	r3, #1
 801087e:	d10e      	bne.n	801089e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010880:	4932      	ldr	r1, [pc, #200]	; (801094c <etharp_tmr+0x14c>)
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	4613      	mov	r3, r2
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	4413      	add	r3, r2
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	440b      	add	r3, r1
 801088e:	3312      	adds	r3, #18
 8010890:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010892:	2b04      	cmp	r3, #4
 8010894:	d903      	bls.n	801089e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7ff ff80 	bl	801079c <etharp_free_entry>
 801089c:	e04a      	b.n	8010934 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801089e:	492b      	ldr	r1, [pc, #172]	; (801094c <etharp_tmr+0x14c>)
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	4613      	mov	r3, r2
 80108a4:	005b      	lsls	r3, r3, #1
 80108a6:	4413      	add	r3, r2
 80108a8:	00db      	lsls	r3, r3, #3
 80108aa:	440b      	add	r3, r1
 80108ac:	3314      	adds	r3, #20
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	2b03      	cmp	r3, #3
 80108b2:	d10a      	bne.n	80108ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80108b4:	4925      	ldr	r1, [pc, #148]	; (801094c <etharp_tmr+0x14c>)
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	4613      	mov	r3, r2
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	4413      	add	r3, r2
 80108be:	00db      	lsls	r3, r3, #3
 80108c0:	440b      	add	r3, r1
 80108c2:	3314      	adds	r3, #20
 80108c4:	2204      	movs	r2, #4
 80108c6:	701a      	strb	r2, [r3, #0]
 80108c8:	e034      	b.n	8010934 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80108ca:	4920      	ldr	r1, [pc, #128]	; (801094c <etharp_tmr+0x14c>)
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	4613      	mov	r3, r2
 80108d0:	005b      	lsls	r3, r3, #1
 80108d2:	4413      	add	r3, r2
 80108d4:	00db      	lsls	r3, r3, #3
 80108d6:	440b      	add	r3, r1
 80108d8:	3314      	adds	r3, #20
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	2b04      	cmp	r3, #4
 80108de:	d10a      	bne.n	80108f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80108e0:	491a      	ldr	r1, [pc, #104]	; (801094c <etharp_tmr+0x14c>)
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	4613      	mov	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	00db      	lsls	r3, r3, #3
 80108ec:	440b      	add	r3, r1
 80108ee:	3314      	adds	r3, #20
 80108f0:	2202      	movs	r2, #2
 80108f2:	701a      	strb	r2, [r3, #0]
 80108f4:	e01e      	b.n	8010934 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80108f6:	4915      	ldr	r1, [pc, #84]	; (801094c <etharp_tmr+0x14c>)
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	4613      	mov	r3, r2
 80108fc:	005b      	lsls	r3, r3, #1
 80108fe:	4413      	add	r3, r2
 8010900:	00db      	lsls	r3, r3, #3
 8010902:	440b      	add	r3, r1
 8010904:	3314      	adds	r3, #20
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d113      	bne.n	8010934 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801090c:	490f      	ldr	r1, [pc, #60]	; (801094c <etharp_tmr+0x14c>)
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	4613      	mov	r3, r2
 8010912:	005b      	lsls	r3, r3, #1
 8010914:	4413      	add	r3, r2
 8010916:	00db      	lsls	r3, r3, #3
 8010918:	440b      	add	r3, r1
 801091a:	3308      	adds	r3, #8
 801091c:	6818      	ldr	r0, [r3, #0]
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	4613      	mov	r3, r2
 8010922:	005b      	lsls	r3, r3, #1
 8010924:	4413      	add	r3, r2
 8010926:	00db      	lsls	r3, r3, #3
 8010928:	4a08      	ldr	r2, [pc, #32]	; (801094c <etharp_tmr+0x14c>)
 801092a:	4413      	add	r3, r2
 801092c:	3304      	adds	r3, #4
 801092e:	4619      	mov	r1, r3
 8010930:	f000 fe72 	bl	8011618 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	3301      	adds	r3, #1
 8010938:	607b      	str	r3, [r7, #4]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2b09      	cmp	r3, #9
 801093e:	f77f af65 	ble.w	801080c <etharp_tmr+0xc>
      }
    }
  }
}
 8010942:	bf00      	nop
 8010944:	bf00      	nop
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	20008860 	.word	0x20008860

08010950 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b08a      	sub	sp, #40	; 0x28
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	460b      	mov	r3, r1
 801095a:	607a      	str	r2, [r7, #4]
 801095c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801095e:	230a      	movs	r3, #10
 8010960:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010962:	230a      	movs	r3, #10
 8010964:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010966:	230a      	movs	r3, #10
 8010968:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801096a:	2300      	movs	r3, #0
 801096c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801096e:	230a      	movs	r3, #10
 8010970:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010972:	2300      	movs	r3, #0
 8010974:	83bb      	strh	r3, [r7, #28]
 8010976:	2300      	movs	r3, #0
 8010978:	837b      	strh	r3, [r7, #26]
 801097a:	2300      	movs	r3, #0
 801097c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801097e:	2300      	movs	r3, #0
 8010980:	843b      	strh	r3, [r7, #32]
 8010982:	e0ae      	b.n	8010ae2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010984:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010988:	49a6      	ldr	r1, [pc, #664]	; (8010c24 <etharp_find_entry+0x2d4>)
 801098a:	4613      	mov	r3, r2
 801098c:	005b      	lsls	r3, r3, #1
 801098e:	4413      	add	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	440b      	add	r3, r1
 8010994:	3314      	adds	r3, #20
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801099a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801099e:	2b0a      	cmp	r3, #10
 80109a0:	d105      	bne.n	80109ae <etharp_find_entry+0x5e>
 80109a2:	7dfb      	ldrb	r3, [r7, #23]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d102      	bne.n	80109ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80109a8:	8c3b      	ldrh	r3, [r7, #32]
 80109aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80109ac:	e095      	b.n	8010ada <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80109ae:	7dfb      	ldrb	r3, [r7, #23]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f000 8092 	beq.w	8010ada <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80109b6:	7dfb      	ldrb	r3, [r7, #23]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d009      	beq.n	80109d0 <etharp_find_entry+0x80>
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d806      	bhi.n	80109d0 <etharp_find_entry+0x80>
 80109c2:	4b99      	ldr	r3, [pc, #612]	; (8010c28 <etharp_find_entry+0x2d8>)
 80109c4:	f240 1223 	movw	r2, #291	; 0x123
 80109c8:	4998      	ldr	r1, [pc, #608]	; (8010c2c <etharp_find_entry+0x2dc>)
 80109ca:	4899      	ldr	r0, [pc, #612]	; (8010c30 <etharp_find_entry+0x2e0>)
 80109cc:	f002 fabc 	bl	8012f48 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d020      	beq.n	8010a18 <etharp_find_entry+0xc8>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6819      	ldr	r1, [r3, #0]
 80109da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109de:	4891      	ldr	r0, [pc, #580]	; (8010c24 <etharp_find_entry+0x2d4>)
 80109e0:	4613      	mov	r3, r2
 80109e2:	005b      	lsls	r3, r3, #1
 80109e4:	4413      	add	r3, r2
 80109e6:	00db      	lsls	r3, r3, #3
 80109e8:	4403      	add	r3, r0
 80109ea:	3304      	adds	r3, #4
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4299      	cmp	r1, r3
 80109f0:	d112      	bne.n	8010a18 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00c      	beq.n	8010a12 <etharp_find_entry+0xc2>
 80109f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109fc:	4989      	ldr	r1, [pc, #548]	; (8010c24 <etharp_find_entry+0x2d4>)
 80109fe:	4613      	mov	r3, r2
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	4413      	add	r3, r2
 8010a04:	00db      	lsls	r3, r3, #3
 8010a06:	440b      	add	r3, r1
 8010a08:	3308      	adds	r3, #8
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d102      	bne.n	8010a18 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010a12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a16:	e100      	b.n	8010c1a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010a18:	7dfb      	ldrb	r3, [r7, #23]
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d140      	bne.n	8010aa0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010a1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a22:	4980      	ldr	r1, [pc, #512]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010a24:	4613      	mov	r3, r2
 8010a26:	005b      	lsls	r3, r3, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	00db      	lsls	r3, r3, #3
 8010a2c:	440b      	add	r3, r1
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d01a      	beq.n	8010a6a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010a34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a38:	497a      	ldr	r1, [pc, #488]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4413      	add	r3, r2
 8010a40:	00db      	lsls	r3, r3, #3
 8010a42:	440b      	add	r3, r1
 8010a44:	3312      	adds	r3, #18
 8010a46:	881b      	ldrh	r3, [r3, #0]
 8010a48:	8bba      	ldrh	r2, [r7, #28]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d845      	bhi.n	8010ada <etharp_find_entry+0x18a>
            old_queue = i;
 8010a4e:	8c3b      	ldrh	r3, [r7, #32]
 8010a50:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010a52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a56:	4973      	ldr	r1, [pc, #460]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	4413      	add	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	440b      	add	r3, r1
 8010a62:	3312      	adds	r3, #18
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	83bb      	strh	r3, [r7, #28]
 8010a68:	e037      	b.n	8010ada <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010a6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a6e:	496d      	ldr	r1, [pc, #436]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010a70:	4613      	mov	r3, r2
 8010a72:	005b      	lsls	r3, r3, #1
 8010a74:	4413      	add	r3, r2
 8010a76:	00db      	lsls	r3, r3, #3
 8010a78:	440b      	add	r3, r1
 8010a7a:	3312      	adds	r3, #18
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	8b7a      	ldrh	r2, [r7, #26]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d82a      	bhi.n	8010ada <etharp_find_entry+0x18a>
            old_pending = i;
 8010a84:	8c3b      	ldrh	r3, [r7, #32]
 8010a86:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010a88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a8c:	4965      	ldr	r1, [pc, #404]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010a8e:	4613      	mov	r3, r2
 8010a90:	005b      	lsls	r3, r3, #1
 8010a92:	4413      	add	r3, r2
 8010a94:	00db      	lsls	r3, r3, #3
 8010a96:	440b      	add	r3, r1
 8010a98:	3312      	adds	r3, #18
 8010a9a:	881b      	ldrh	r3, [r3, #0]
 8010a9c:	837b      	strh	r3, [r7, #26]
 8010a9e:	e01c      	b.n	8010ada <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010aa0:	7dfb      	ldrb	r3, [r7, #23]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d919      	bls.n	8010ada <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010aa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010aaa:	495e      	ldr	r1, [pc, #376]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010aac:	4613      	mov	r3, r2
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	00db      	lsls	r3, r3, #3
 8010ab4:	440b      	add	r3, r1
 8010ab6:	3312      	adds	r3, #18
 8010ab8:	881b      	ldrh	r3, [r3, #0]
 8010aba:	8b3a      	ldrh	r2, [r7, #24]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d80c      	bhi.n	8010ada <etharp_find_entry+0x18a>
            old_stable = i;
 8010ac0:	8c3b      	ldrh	r3, [r7, #32]
 8010ac2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010ac4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ac8:	4956      	ldr	r1, [pc, #344]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010aca:	4613      	mov	r3, r2
 8010acc:	005b      	lsls	r3, r3, #1
 8010ace:	4413      	add	r3, r2
 8010ad0:	00db      	lsls	r3, r3, #3
 8010ad2:	440b      	add	r3, r1
 8010ad4:	3312      	adds	r3, #18
 8010ad6:	881b      	ldrh	r3, [r3, #0]
 8010ad8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ada:	8c3b      	ldrh	r3, [r7, #32]
 8010adc:	3301      	adds	r3, #1
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	843b      	strh	r3, [r7, #32]
 8010ae2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ae6:	2b09      	cmp	r3, #9
 8010ae8:	f77f af4c 	ble.w	8010984 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010aec:	7afb      	ldrb	r3, [r7, #11]
 8010aee:	f003 0302 	and.w	r3, r3, #2
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d108      	bne.n	8010b08 <etharp_find_entry+0x1b8>
 8010af6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010afa:	2b0a      	cmp	r3, #10
 8010afc:	d107      	bne.n	8010b0e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010afe:	7afb      	ldrb	r3, [r7, #11]
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010b08:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0c:	e085      	b.n	8010c1a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010b0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010b12:	2b09      	cmp	r3, #9
 8010b14:	dc02      	bgt.n	8010b1c <etharp_find_entry+0x1cc>
    i = empty;
 8010b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b18:	843b      	strh	r3, [r7, #32]
 8010b1a:	e039      	b.n	8010b90 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010b1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010b20:	2b09      	cmp	r3, #9
 8010b22:	dc14      	bgt.n	8010b4e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b26:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010b28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b2c:	493d      	ldr	r1, [pc, #244]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010b2e:	4613      	mov	r3, r2
 8010b30:	005b      	lsls	r3, r3, #1
 8010b32:	4413      	add	r3, r2
 8010b34:	00db      	lsls	r3, r3, #3
 8010b36:	440b      	add	r3, r1
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d018      	beq.n	8010b70 <etharp_find_entry+0x220>
 8010b3e:	4b3a      	ldr	r3, [pc, #232]	; (8010c28 <etharp_find_entry+0x2d8>)
 8010b40:	f240 126d 	movw	r2, #365	; 0x16d
 8010b44:	493b      	ldr	r1, [pc, #236]	; (8010c34 <etharp_find_entry+0x2e4>)
 8010b46:	483a      	ldr	r0, [pc, #232]	; (8010c30 <etharp_find_entry+0x2e0>)
 8010b48:	f002 f9fe 	bl	8012f48 <iprintf>
 8010b4c:	e010      	b.n	8010b70 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010b4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010b52:	2b09      	cmp	r3, #9
 8010b54:	dc02      	bgt.n	8010b5c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010b58:	843b      	strh	r3, [r7, #32]
 8010b5a:	e009      	b.n	8010b70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010b5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010b60:	2b09      	cmp	r3, #9
 8010b62:	dc02      	bgt.n	8010b6a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010b64:	8bfb      	ldrh	r3, [r7, #30]
 8010b66:	843b      	strh	r3, [r7, #32]
 8010b68:	e002      	b.n	8010b70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b6e:	e054      	b.n	8010c1a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010b70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b74:	2b09      	cmp	r3, #9
 8010b76:	dd06      	ble.n	8010b86 <etharp_find_entry+0x236>
 8010b78:	4b2b      	ldr	r3, [pc, #172]	; (8010c28 <etharp_find_entry+0x2d8>)
 8010b7a:	f240 127f 	movw	r2, #383	; 0x17f
 8010b7e:	492e      	ldr	r1, [pc, #184]	; (8010c38 <etharp_find_entry+0x2e8>)
 8010b80:	482b      	ldr	r0, [pc, #172]	; (8010c30 <etharp_find_entry+0x2e0>)
 8010b82:	f002 f9e1 	bl	8012f48 <iprintf>
    etharp_free_entry(i);
 8010b86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7ff fe06 	bl	801079c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010b90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b94:	2b09      	cmp	r3, #9
 8010b96:	dd06      	ble.n	8010ba6 <etharp_find_entry+0x256>
 8010b98:	4b23      	ldr	r3, [pc, #140]	; (8010c28 <etharp_find_entry+0x2d8>)
 8010b9a:	f240 1283 	movw	r2, #387	; 0x183
 8010b9e:	4926      	ldr	r1, [pc, #152]	; (8010c38 <etharp_find_entry+0x2e8>)
 8010ba0:	4823      	ldr	r0, [pc, #140]	; (8010c30 <etharp_find_entry+0x2e0>)
 8010ba2:	f002 f9d1 	bl	8012f48 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010ba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010baa:	491e      	ldr	r1, [pc, #120]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	3314      	adds	r3, #20
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d006      	beq.n	8010bcc <etharp_find_entry+0x27c>
 8010bbe:	4b1a      	ldr	r3, [pc, #104]	; (8010c28 <etharp_find_entry+0x2d8>)
 8010bc0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010bc4:	491d      	ldr	r1, [pc, #116]	; (8010c3c <etharp_find_entry+0x2ec>)
 8010bc6:	481a      	ldr	r0, [pc, #104]	; (8010c30 <etharp_find_entry+0x2e0>)
 8010bc8:	f002 f9be 	bl	8012f48 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00b      	beq.n	8010bea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	6819      	ldr	r1, [r3, #0]
 8010bda:	4812      	ldr	r0, [pc, #72]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010bdc:	4613      	mov	r3, r2
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	4413      	add	r3, r2
 8010be2:	00db      	lsls	r3, r3, #3
 8010be4:	4403      	add	r3, r0
 8010be6:	3304      	adds	r3, #4
 8010be8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010bea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bee:	490d      	ldr	r1, [pc, #52]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	005b      	lsls	r3, r3, #1
 8010bf4:	4413      	add	r3, r2
 8010bf6:	00db      	lsls	r3, r3, #3
 8010bf8:	440b      	add	r3, r1
 8010bfa:	3312      	adds	r3, #18
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c04:	4907      	ldr	r1, [pc, #28]	; (8010c24 <etharp_find_entry+0x2d4>)
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	440b      	add	r3, r1
 8010c10:	3308      	adds	r3, #8
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010c16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3728      	adds	r7, #40	; 0x28
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	20008860 	.word	0x20008860
 8010c28:	0801643c 	.word	0x0801643c
 8010c2c:	08016474 	.word	0x08016474
 8010c30:	080164b4 	.word	0x080164b4
 8010c34:	080164dc 	.word	0x080164dc
 8010c38:	080164f4 	.word	0x080164f4
 8010c3c:	08016508 	.word	0x08016508

08010c40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b088      	sub	sp, #32
 8010c44:	af02      	add	r7, sp, #8
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c54:	2b06      	cmp	r3, #6
 8010c56:	d006      	beq.n	8010c66 <etharp_update_arp_entry+0x26>
 8010c58:	4b48      	ldr	r3, [pc, #288]	; (8010d7c <etharp_update_arp_entry+0x13c>)
 8010c5a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010c5e:	4948      	ldr	r1, [pc, #288]	; (8010d80 <etharp_update_arp_entry+0x140>)
 8010c60:	4848      	ldr	r0, [pc, #288]	; (8010d84 <etharp_update_arp_entry+0x144>)
 8010c62:	f002 f971 	bl	8012f48 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d012      	beq.n	8010c92 <etharp_update_arp_entry+0x52>
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00e      	beq.n	8010c92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68f9      	ldr	r1, [r7, #12]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f001 f920 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 8010c80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d105      	bne.n	8010c92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c8e:	2be0      	cmp	r3, #224	; 0xe0
 8010c90:	d102      	bne.n	8010c98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010c92:	f06f 030f 	mvn.w	r3, #15
 8010c96:	e06c      	b.n	8010d72 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010c98:	78fb      	ldrb	r3, [r7, #3]
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	68b8      	ldr	r0, [r7, #8]
 8010ca0:	f7ff fe56 	bl	8010950 <etharp_find_entry>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010ca8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	da02      	bge.n	8010cb6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010cb0:	8afb      	ldrh	r3, [r7, #22]
 8010cb2:	b25b      	sxtb	r3, r3
 8010cb4:	e05d      	b.n	8010d72 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010cba:	4933      	ldr	r1, [pc, #204]	; (8010d88 <etharp_update_arp_entry+0x148>)
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	005b      	lsls	r3, r3, #1
 8010cc0:	4413      	add	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	440b      	add	r3, r1
 8010cc6:	3314      	adds	r3, #20
 8010cc8:	2202      	movs	r2, #2
 8010cca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010cd0:	492d      	ldr	r1, [pc, #180]	; (8010d88 <etharp_update_arp_entry+0x148>)
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	005b      	lsls	r3, r3, #1
 8010cd6:	4413      	add	r3, r2
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	440b      	add	r3, r1
 8010cdc:	3308      	adds	r3, #8
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010ce2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	4413      	add	r3, r2
 8010cec:	00db      	lsls	r3, r3, #3
 8010cee:	3308      	adds	r3, #8
 8010cf0:	4a25      	ldr	r2, [pc, #148]	; (8010d88 <etharp_update_arp_entry+0x148>)
 8010cf2:	4413      	add	r3, r2
 8010cf4:	3304      	adds	r3, #4
 8010cf6:	2206      	movs	r2, #6
 8010cf8:	6879      	ldr	r1, [r7, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f002 f9fe 	bl	80130fc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010d00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d04:	4920      	ldr	r1, [pc, #128]	; (8010d88 <etharp_update_arp_entry+0x148>)
 8010d06:	4613      	mov	r3, r2
 8010d08:	005b      	lsls	r3, r3, #1
 8010d0a:	4413      	add	r3, r2
 8010d0c:	00db      	lsls	r3, r3, #3
 8010d0e:	440b      	add	r3, r1
 8010d10:	3312      	adds	r3, #18
 8010d12:	2200      	movs	r2, #0
 8010d14:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010d16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d1a:	491b      	ldr	r1, [pc, #108]	; (8010d88 <etharp_update_arp_entry+0x148>)
 8010d1c:	4613      	mov	r3, r2
 8010d1e:	005b      	lsls	r3, r3, #1
 8010d20:	4413      	add	r3, r2
 8010d22:	00db      	lsls	r3, r3, #3
 8010d24:	440b      	add	r3, r1
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d021      	beq.n	8010d70 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010d2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d30:	4915      	ldr	r1, [pc, #84]	; (8010d88 <etharp_update_arp_entry+0x148>)
 8010d32:	4613      	mov	r3, r2
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	4413      	add	r3, r2
 8010d38:	00db      	lsls	r3, r3, #3
 8010d3a:	440b      	add	r3, r1
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010d40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d44:	4910      	ldr	r1, [pc, #64]	; (8010d88 <etharp_update_arp_entry+0x148>)
 8010d46:	4613      	mov	r3, r2
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	4413      	add	r3, r2
 8010d4c:	00db      	lsls	r3, r3, #3
 8010d4e:	440b      	add	r3, r1
 8010d50:	2200      	movs	r2, #0
 8010d52:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010d5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d5e:	9300      	str	r3, [sp, #0]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6939      	ldr	r1, [r7, #16]
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	f001 ffb9 	bl	8012cdc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010d6a:	6938      	ldr	r0, [r7, #16]
 8010d6c:	f7f7 fd00 	bl	8008770 <pbuf_free>
  }
  return ERR_OK;
 8010d70:	2300      	movs	r3, #0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	0801643c 	.word	0x0801643c
 8010d80:	08016534 	.word	0x08016534
 8010d84:	080164b4 	.word	0x080164b4
 8010d88:	20008860 	.word	0x20008860

08010d8c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d94:	2300      	movs	r3, #0
 8010d96:	60fb      	str	r3, [r7, #12]
 8010d98:	e01e      	b.n	8010dd8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010d9a:	4913      	ldr	r1, [pc, #76]	; (8010de8 <etharp_cleanup_netif+0x5c>)
 8010d9c:	68fa      	ldr	r2, [r7, #12]
 8010d9e:	4613      	mov	r3, r2
 8010da0:	005b      	lsls	r3, r3, #1
 8010da2:	4413      	add	r3, r2
 8010da4:	00db      	lsls	r3, r3, #3
 8010da6:	440b      	add	r3, r1
 8010da8:	3314      	adds	r3, #20
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010dae:	7afb      	ldrb	r3, [r7, #11]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d00e      	beq.n	8010dd2 <etharp_cleanup_netif+0x46>
 8010db4:	490c      	ldr	r1, [pc, #48]	; (8010de8 <etharp_cleanup_netif+0x5c>)
 8010db6:	68fa      	ldr	r2, [r7, #12]
 8010db8:	4613      	mov	r3, r2
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	4413      	add	r3, r2
 8010dbe:	00db      	lsls	r3, r3, #3
 8010dc0:	440b      	add	r3, r1
 8010dc2:	3308      	adds	r3, #8
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d102      	bne.n	8010dd2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f7ff fce5 	bl	801079c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	60fb      	str	r3, [r7, #12]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b09      	cmp	r3, #9
 8010ddc:	dddd      	ble.n	8010d9a <etharp_cleanup_netif+0xe>
    }
  }
}
 8010dde:	bf00      	nop
 8010de0:	bf00      	nop
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	20008860 	.word	0x20008860

08010dec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010dec:	b5b0      	push	{r4, r5, r7, lr}
 8010dee:	b08a      	sub	sp, #40	; 0x28
 8010df0:	af04      	add	r7, sp, #16
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d107      	bne.n	8010e0c <etharp_input+0x20>
 8010dfc:	4b3f      	ldr	r3, [pc, #252]	; (8010efc <etharp_input+0x110>)
 8010dfe:	f240 228a 	movw	r2, #650	; 0x28a
 8010e02:	493f      	ldr	r1, [pc, #252]	; (8010f00 <etharp_input+0x114>)
 8010e04:	483f      	ldr	r0, [pc, #252]	; (8010f04 <etharp_input+0x118>)
 8010e06:	f002 f89f 	bl	8012f48 <iprintf>
 8010e0a:	e074      	b.n	8010ef6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e1c:	d10c      	bne.n	8010e38 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010e22:	2b06      	cmp	r3, #6
 8010e24:	d108      	bne.n	8010e38 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010e2a:	2b04      	cmp	r3, #4
 8010e2c:	d104      	bne.n	8010e38 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	885b      	ldrh	r3, [r3, #2]
 8010e32:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010e34:	2b08      	cmp	r3, #8
 8010e36:	d003      	beq.n	8010e40 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f7f7 fc99 	bl	8008770 <pbuf_free>
    return;
 8010e3e:	e05a      	b.n	8010ef6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	330e      	adds	r3, #14
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	3318      	adds	r3, #24
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	3304      	adds	r3, #4
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d102      	bne.n	8010e60 <etharp_input+0x74>
    for_us = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	75fb      	strb	r3, [r7, #23]
 8010e5e:	e009      	b.n	8010e74 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	3304      	adds	r3, #4
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	bf0c      	ite	eq
 8010e6c:	2301      	moveq	r3, #1
 8010e6e:	2300      	movne	r3, #0
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	f103 0208 	add.w	r2, r3, #8
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d001      	beq.n	8010e84 <etharp_input+0x98>
 8010e80:	2301      	movs	r3, #1
 8010e82:	e000      	b.n	8010e86 <etharp_input+0x9a>
 8010e84:	2302      	movs	r3, #2
 8010e86:	f107 010c 	add.w	r1, r7, #12
 8010e8a:	6838      	ldr	r0, [r7, #0]
 8010e8c:	f7ff fed8 	bl	8010c40 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	88db      	ldrh	r3, [r3, #6]
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e9a:	d003      	beq.n	8010ea4 <etharp_input+0xb8>
 8010e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ea0:	d01e      	beq.n	8010ee0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010ea2:	e025      	b.n	8010ef0 <etharp_input+0x104>
      if (for_us) {
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d021      	beq.n	8010eee <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010ec0:	693a      	ldr	r2, [r7, #16]
 8010ec2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010ec4:	2102      	movs	r1, #2
 8010ec6:	9103      	str	r1, [sp, #12]
 8010ec8:	f107 010c 	add.w	r1, r7, #12
 8010ecc:	9102      	str	r1, [sp, #8]
 8010ece:	9201      	str	r2, [sp, #4]
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	462b      	mov	r3, r5
 8010ed4:	4622      	mov	r2, r4
 8010ed6:	4601      	mov	r1, r0
 8010ed8:	6838      	ldr	r0, [r7, #0]
 8010eda:	f000 faef 	bl	80114bc <etharp_raw>
      break;
 8010ede:	e006      	b.n	8010eee <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010ee0:	f107 030c 	add.w	r3, r7, #12
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	6838      	ldr	r0, [r7, #0]
 8010ee8:	f7fe f9fc 	bl	800f2e4 <dhcp_arp_reply>
      break;
 8010eec:	e000      	b.n	8010ef0 <etharp_input+0x104>
      break;
 8010eee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7f7 fc3d 	bl	8008770 <pbuf_free>
}
 8010ef6:	3718      	adds	r7, #24
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bdb0      	pop	{r4, r5, r7, pc}
 8010efc:	0801643c 	.word	0x0801643c
 8010f00:	0801658c 	.word	0x0801658c
 8010f04:	080164b4 	.word	0x080164b4

08010f08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af02      	add	r7, sp, #8
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	4613      	mov	r3, r2
 8010f14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010f16:	79fa      	ldrb	r2, [r7, #7]
 8010f18:	4944      	ldr	r1, [pc, #272]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	005b      	lsls	r3, r3, #1
 8010f1e:	4413      	add	r3, r2
 8010f20:	00db      	lsls	r3, r3, #3
 8010f22:	440b      	add	r3, r1
 8010f24:	3314      	adds	r3, #20
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d806      	bhi.n	8010f3a <etharp_output_to_arp_index+0x32>
 8010f2c:	4b40      	ldr	r3, [pc, #256]	; (8011030 <etharp_output_to_arp_index+0x128>)
 8010f2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010f32:	4940      	ldr	r1, [pc, #256]	; (8011034 <etharp_output_to_arp_index+0x12c>)
 8010f34:	4840      	ldr	r0, [pc, #256]	; (8011038 <etharp_output_to_arp_index+0x130>)
 8010f36:	f002 f807 	bl	8012f48 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010f3a:	79fa      	ldrb	r2, [r7, #7]
 8010f3c:	493b      	ldr	r1, [pc, #236]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010f3e:	4613      	mov	r3, r2
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	4413      	add	r3, r2
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	440b      	add	r3, r1
 8010f48:	3314      	adds	r3, #20
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	2b02      	cmp	r3, #2
 8010f4e:	d153      	bne.n	8010ff8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010f50:	79fa      	ldrb	r2, [r7, #7]
 8010f52:	4936      	ldr	r1, [pc, #216]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010f54:	4613      	mov	r3, r2
 8010f56:	005b      	lsls	r3, r3, #1
 8010f58:	4413      	add	r3, r2
 8010f5a:	00db      	lsls	r3, r3, #3
 8010f5c:	440b      	add	r3, r1
 8010f5e:	3312      	adds	r3, #18
 8010f60:	881b      	ldrh	r3, [r3, #0]
 8010f62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010f66:	d919      	bls.n	8010f9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010f68:	79fa      	ldrb	r2, [r7, #7]
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	005b      	lsls	r3, r3, #1
 8010f6e:	4413      	add	r3, r2
 8010f70:	00db      	lsls	r3, r3, #3
 8010f72:	4a2e      	ldr	r2, [pc, #184]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010f74:	4413      	add	r3, r2
 8010f76:	3304      	adds	r3, #4
 8010f78:	4619      	mov	r1, r3
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f000 fb4c 	bl	8011618 <etharp_request>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d138      	bne.n	8010ff8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010f86:	79fa      	ldrb	r2, [r7, #7]
 8010f88:	4928      	ldr	r1, [pc, #160]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	005b      	lsls	r3, r3, #1
 8010f8e:	4413      	add	r3, r2
 8010f90:	00db      	lsls	r3, r3, #3
 8010f92:	440b      	add	r3, r1
 8010f94:	3314      	adds	r3, #20
 8010f96:	2203      	movs	r2, #3
 8010f98:	701a      	strb	r2, [r3, #0]
 8010f9a:	e02d      	b.n	8010ff8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010f9c:	79fa      	ldrb	r2, [r7, #7]
 8010f9e:	4923      	ldr	r1, [pc, #140]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	005b      	lsls	r3, r3, #1
 8010fa4:	4413      	add	r3, r2
 8010fa6:	00db      	lsls	r3, r3, #3
 8010fa8:	440b      	add	r3, r1
 8010faa:	3312      	adds	r3, #18
 8010fac:	881b      	ldrh	r3, [r3, #0]
 8010fae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010fb2:	d321      	bcc.n	8010ff8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010fb4:	79fa      	ldrb	r2, [r7, #7]
 8010fb6:	4613      	mov	r3, r2
 8010fb8:	005b      	lsls	r3, r3, #1
 8010fba:	4413      	add	r3, r2
 8010fbc:	00db      	lsls	r3, r3, #3
 8010fbe:	4a1b      	ldr	r2, [pc, #108]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010fc0:	4413      	add	r3, r2
 8010fc2:	1d19      	adds	r1, r3, #4
 8010fc4:	79fa      	ldrb	r2, [r7, #7]
 8010fc6:	4613      	mov	r3, r2
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	4413      	add	r3, r2
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	3308      	adds	r3, #8
 8010fd0:	4a16      	ldr	r2, [pc, #88]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010fd2:	4413      	add	r3, r2
 8010fd4:	3304      	adds	r3, #4
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f000 fafb 	bl	80115d4 <etharp_request_dst>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d109      	bne.n	8010ff8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010fe4:	79fa      	ldrb	r2, [r7, #7]
 8010fe6:	4911      	ldr	r1, [pc, #68]	; (801102c <etharp_output_to_arp_index+0x124>)
 8010fe8:	4613      	mov	r3, r2
 8010fea:	005b      	lsls	r3, r3, #1
 8010fec:	4413      	add	r3, r2
 8010fee:	00db      	lsls	r3, r3, #3
 8010ff0:	440b      	add	r3, r1
 8010ff2:	3314      	adds	r3, #20
 8010ff4:	2203      	movs	r2, #3
 8010ff6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8010ffe:	79fa      	ldrb	r2, [r7, #7]
 8011000:	4613      	mov	r3, r2
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	4413      	add	r3, r2
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	3308      	adds	r3, #8
 801100a:	4a08      	ldr	r2, [pc, #32]	; (801102c <etharp_output_to_arp_index+0x124>)
 801100c:	4413      	add	r3, r2
 801100e:	3304      	adds	r3, #4
 8011010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011014:	9200      	str	r2, [sp, #0]
 8011016:	460a      	mov	r2, r1
 8011018:	68b9      	ldr	r1, [r7, #8]
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f001 fe5e 	bl	8012cdc <ethernet_output>
 8011020:	4603      	mov	r3, r0
}
 8011022:	4618      	mov	r0, r3
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	20008860 	.word	0x20008860
 8011030:	0801643c 	.word	0x0801643c
 8011034:	080165ac 	.word	0x080165ac
 8011038:	080164b4 	.word	0x080164b4

0801103c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b08a      	sub	sp, #40	; 0x28
 8011040:	af02      	add	r7, sp, #8
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d106      	bne.n	8011060 <etharp_output+0x24>
 8011052:	4b73      	ldr	r3, [pc, #460]	; (8011220 <etharp_output+0x1e4>)
 8011054:	f240 321e 	movw	r2, #798	; 0x31e
 8011058:	4972      	ldr	r1, [pc, #456]	; (8011224 <etharp_output+0x1e8>)
 801105a:	4873      	ldr	r0, [pc, #460]	; (8011228 <etharp_output+0x1ec>)
 801105c:	f001 ff74 	bl	8012f48 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <etharp_output+0x38>
 8011066:	4b6e      	ldr	r3, [pc, #440]	; (8011220 <etharp_output+0x1e4>)
 8011068:	f240 321f 	movw	r2, #799	; 0x31f
 801106c:	496f      	ldr	r1, [pc, #444]	; (801122c <etharp_output+0x1f0>)
 801106e:	486e      	ldr	r0, [pc, #440]	; (8011228 <etharp_output+0x1ec>)
 8011070:	f001 ff6a 	bl	8012f48 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d106      	bne.n	8011088 <etharp_output+0x4c>
 801107a:	4b69      	ldr	r3, [pc, #420]	; (8011220 <etharp_output+0x1e4>)
 801107c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011080:	496b      	ldr	r1, [pc, #428]	; (8011230 <etharp_output+0x1f4>)
 8011082:	4869      	ldr	r0, [pc, #420]	; (8011228 <etharp_output+0x1ec>)
 8011084:	f001 ff60 	bl	8012f48 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	68f9      	ldr	r1, [r7, #12]
 801108e:	4618      	mov	r0, r3
 8011090:	f000 ff16 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d002      	beq.n	80110a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801109a:	4b66      	ldr	r3, [pc, #408]	; (8011234 <etharp_output+0x1f8>)
 801109c:	61fb      	str	r3, [r7, #28]
 801109e:	e0af      	b.n	8011200 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110a8:	2be0      	cmp	r3, #224	; 0xe0
 80110aa:	d118      	bne.n	80110de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80110ac:	2301      	movs	r3, #1
 80110ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80110b0:	2300      	movs	r3, #0
 80110b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80110b4:	235e      	movs	r3, #94	; 0x5e
 80110b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	3301      	adds	r3, #1
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	3302      	adds	r3, #2
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	3303      	adds	r3, #3
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80110d6:	f107 0310 	add.w	r3, r7, #16
 80110da:	61fb      	str	r3, [r7, #28]
 80110dc:	e090      	b.n	8011200 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3304      	adds	r3, #4
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	405a      	eors	r2, r3
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	3308      	adds	r3, #8
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4013      	ands	r3, r2
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d012      	beq.n	801111c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80110fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011100:	4293      	cmp	r3, r2
 8011102:	d00b      	beq.n	801111c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	330c      	adds	r3, #12
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d003      	beq.n	8011116 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	330c      	adds	r3, #12
 8011112:	61bb      	str	r3, [r7, #24]
 8011114:	e002      	b.n	801111c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011116:	f06f 0303 	mvn.w	r3, #3
 801111a:	e07d      	b.n	8011218 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801111c:	4b46      	ldr	r3, [pc, #280]	; (8011238 <etharp_output+0x1fc>)
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	4619      	mov	r1, r3
 8011122:	4a46      	ldr	r2, [pc, #280]	; (801123c <etharp_output+0x200>)
 8011124:	460b      	mov	r3, r1
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	440b      	add	r3, r1
 801112a:	00db      	lsls	r3, r3, #3
 801112c:	4413      	add	r3, r2
 801112e:	3314      	adds	r3, #20
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2b01      	cmp	r3, #1
 8011134:	d925      	bls.n	8011182 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011136:	4b40      	ldr	r3, [pc, #256]	; (8011238 <etharp_output+0x1fc>)
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	4619      	mov	r1, r3
 801113c:	4a3f      	ldr	r2, [pc, #252]	; (801123c <etharp_output+0x200>)
 801113e:	460b      	mov	r3, r1
 8011140:	005b      	lsls	r3, r3, #1
 8011142:	440b      	add	r3, r1
 8011144:	00db      	lsls	r3, r3, #3
 8011146:	4413      	add	r3, r2
 8011148:	3308      	adds	r3, #8
 801114a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801114c:	68fa      	ldr	r2, [r7, #12]
 801114e:	429a      	cmp	r2, r3
 8011150:	d117      	bne.n	8011182 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	4b38      	ldr	r3, [pc, #224]	; (8011238 <etharp_output+0x1fc>)
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	4618      	mov	r0, r3
 801115c:	4937      	ldr	r1, [pc, #220]	; (801123c <etharp_output+0x200>)
 801115e:	4603      	mov	r3, r0
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	4403      	add	r3, r0
 8011164:	00db      	lsls	r3, r3, #3
 8011166:	440b      	add	r3, r1
 8011168:	3304      	adds	r3, #4
 801116a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801116c:	429a      	cmp	r2, r3
 801116e:	d108      	bne.n	8011182 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011170:	4b31      	ldr	r3, [pc, #196]	; (8011238 <etharp_output+0x1fc>)
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	461a      	mov	r2, r3
 8011176:	68b9      	ldr	r1, [r7, #8]
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f7ff fec5 	bl	8010f08 <etharp_output_to_arp_index>
 801117e:	4603      	mov	r3, r0
 8011180:	e04a      	b.n	8011218 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011182:	2300      	movs	r3, #0
 8011184:	75fb      	strb	r3, [r7, #23]
 8011186:	e031      	b.n	80111ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011188:	7dfa      	ldrb	r2, [r7, #23]
 801118a:	492c      	ldr	r1, [pc, #176]	; (801123c <etharp_output+0x200>)
 801118c:	4613      	mov	r3, r2
 801118e:	005b      	lsls	r3, r3, #1
 8011190:	4413      	add	r3, r2
 8011192:	00db      	lsls	r3, r3, #3
 8011194:	440b      	add	r3, r1
 8011196:	3314      	adds	r3, #20
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d923      	bls.n	80111e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801119e:	7dfa      	ldrb	r2, [r7, #23]
 80111a0:	4926      	ldr	r1, [pc, #152]	; (801123c <etharp_output+0x200>)
 80111a2:	4613      	mov	r3, r2
 80111a4:	005b      	lsls	r3, r3, #1
 80111a6:	4413      	add	r3, r2
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	440b      	add	r3, r1
 80111ac:	3308      	adds	r3, #8
 80111ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d117      	bne.n	80111e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	6819      	ldr	r1, [r3, #0]
 80111ba:	7dfa      	ldrb	r2, [r7, #23]
 80111bc:	481f      	ldr	r0, [pc, #124]	; (801123c <etharp_output+0x200>)
 80111be:	4613      	mov	r3, r2
 80111c0:	005b      	lsls	r3, r3, #1
 80111c2:	4413      	add	r3, r2
 80111c4:	00db      	lsls	r3, r3, #3
 80111c6:	4403      	add	r3, r0
 80111c8:	3304      	adds	r3, #4
 80111ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80111cc:	4299      	cmp	r1, r3
 80111ce:	d10a      	bne.n	80111e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80111d0:	4a19      	ldr	r2, [pc, #100]	; (8011238 <etharp_output+0x1fc>)
 80111d2:	7dfb      	ldrb	r3, [r7, #23]
 80111d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80111d6:	7dfb      	ldrb	r3, [r7, #23]
 80111d8:	461a      	mov	r2, r3
 80111da:	68b9      	ldr	r1, [r7, #8]
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f7ff fe93 	bl	8010f08 <etharp_output_to_arp_index>
 80111e2:	4603      	mov	r3, r0
 80111e4:	e018      	b.n	8011218 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80111e6:	7dfb      	ldrb	r3, [r7, #23]
 80111e8:	3301      	adds	r3, #1
 80111ea:	75fb      	strb	r3, [r7, #23]
 80111ec:	7dfb      	ldrb	r3, [r7, #23]
 80111ee:	2b09      	cmp	r3, #9
 80111f0:	d9ca      	bls.n	8011188 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	69b9      	ldr	r1, [r7, #24]
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f000 f822 	bl	8011240 <etharp_query>
 80111fc:	4603      	mov	r3, r0
 80111fe:	e00b      	b.n	8011218 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	69fb      	ldr	r3, [r7, #28]
 801120e:	68b9      	ldr	r1, [r7, #8]
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f001 fd63 	bl	8012cdc <ethernet_output>
 8011216:	4603      	mov	r3, r0
}
 8011218:	4618      	mov	r0, r3
 801121a:	3720      	adds	r7, #32
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	0801643c 	.word	0x0801643c
 8011224:	0801658c 	.word	0x0801658c
 8011228:	080164b4 	.word	0x080164b4
 801122c:	080165dc 	.word	0x080165dc
 8011230:	0801657c 	.word	0x0801657c
 8011234:	08016c14 	.word	0x08016c14
 8011238:	20008950 	.word	0x20008950
 801123c:	20008860 	.word	0x20008860

08011240 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08c      	sub	sp, #48	; 0x30
 8011244:	af02      	add	r7, sp, #8
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	332a      	adds	r3, #42	; 0x2a
 8011250:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011252:	23ff      	movs	r3, #255	; 0xff
 8011254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011258:	2300      	movs	r3, #0
 801125a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	68f9      	ldr	r1, [r7, #12]
 8011262:	4618      	mov	r0, r3
 8011264:	f000 fe2c 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d10c      	bne.n	8011288 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011276:	2be0      	cmp	r3, #224	; 0xe0
 8011278:	d006      	beq.n	8011288 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d003      	beq.n	8011288 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d102      	bne.n	801128e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011288:	f06f 030f 	mvn.w	r3, #15
 801128c:	e101      	b.n	8011492 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	2101      	movs	r1, #1
 8011292:	68b8      	ldr	r0, [r7, #8]
 8011294:	f7ff fb5c 	bl	8010950 <etharp_find_entry>
 8011298:	4603      	mov	r3, r0
 801129a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801129c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	da02      	bge.n	80112aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80112a4:	8a7b      	ldrh	r3, [r7, #18]
 80112a6:	b25b      	sxtb	r3, r3
 80112a8:	e0f3      	b.n	8011492 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80112aa:	8a7b      	ldrh	r3, [r7, #18]
 80112ac:	2b7e      	cmp	r3, #126	; 0x7e
 80112ae:	d906      	bls.n	80112be <etharp_query+0x7e>
 80112b0:	4b7a      	ldr	r3, [pc, #488]	; (801149c <etharp_query+0x25c>)
 80112b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80112b6:	497a      	ldr	r1, [pc, #488]	; (80114a0 <etharp_query+0x260>)
 80112b8:	487a      	ldr	r0, [pc, #488]	; (80114a4 <etharp_query+0x264>)
 80112ba:	f001 fe45 	bl	8012f48 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80112be:	8a7b      	ldrh	r3, [r7, #18]
 80112c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80112c2:	7c7a      	ldrb	r2, [r7, #17]
 80112c4:	4978      	ldr	r1, [pc, #480]	; (80114a8 <etharp_query+0x268>)
 80112c6:	4613      	mov	r3, r2
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	4413      	add	r3, r2
 80112cc:	00db      	lsls	r3, r3, #3
 80112ce:	440b      	add	r3, r1
 80112d0:	3314      	adds	r3, #20
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d115      	bne.n	8011304 <etharp_query+0xc4>
    is_new_entry = 1;
 80112d8:	2301      	movs	r3, #1
 80112da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80112dc:	7c7a      	ldrb	r2, [r7, #17]
 80112de:	4972      	ldr	r1, [pc, #456]	; (80114a8 <etharp_query+0x268>)
 80112e0:	4613      	mov	r3, r2
 80112e2:	005b      	lsls	r3, r3, #1
 80112e4:	4413      	add	r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	440b      	add	r3, r1
 80112ea:	3314      	adds	r3, #20
 80112ec:	2201      	movs	r2, #1
 80112ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80112f0:	7c7a      	ldrb	r2, [r7, #17]
 80112f2:	496d      	ldr	r1, [pc, #436]	; (80114a8 <etharp_query+0x268>)
 80112f4:	4613      	mov	r3, r2
 80112f6:	005b      	lsls	r3, r3, #1
 80112f8:	4413      	add	r3, r2
 80112fa:	00db      	lsls	r3, r3, #3
 80112fc:	440b      	add	r3, r1
 80112fe:	3308      	adds	r3, #8
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011304:	7c7a      	ldrb	r2, [r7, #17]
 8011306:	4968      	ldr	r1, [pc, #416]	; (80114a8 <etharp_query+0x268>)
 8011308:	4613      	mov	r3, r2
 801130a:	005b      	lsls	r3, r3, #1
 801130c:	4413      	add	r3, r2
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	440b      	add	r3, r1
 8011312:	3314      	adds	r3, #20
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d011      	beq.n	801133e <etharp_query+0xfe>
 801131a:	7c7a      	ldrb	r2, [r7, #17]
 801131c:	4962      	ldr	r1, [pc, #392]	; (80114a8 <etharp_query+0x268>)
 801131e:	4613      	mov	r3, r2
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	4413      	add	r3, r2
 8011324:	00db      	lsls	r3, r3, #3
 8011326:	440b      	add	r3, r1
 8011328:	3314      	adds	r3, #20
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	2b01      	cmp	r3, #1
 801132e:	d806      	bhi.n	801133e <etharp_query+0xfe>
 8011330:	4b5a      	ldr	r3, [pc, #360]	; (801149c <etharp_query+0x25c>)
 8011332:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011336:	495d      	ldr	r1, [pc, #372]	; (80114ac <etharp_query+0x26c>)
 8011338:	485a      	ldr	r0, [pc, #360]	; (80114a4 <etharp_query+0x264>)
 801133a:	f001 fe05 	bl	8012f48 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d102      	bne.n	801134a <etharp_query+0x10a>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10c      	bne.n	8011364 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801134a:	68b9      	ldr	r1, [r7, #8]
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f000 f963 	bl	8011618 <etharp_request>
 8011352:	4603      	mov	r3, r0
 8011354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d102      	bne.n	8011364 <etharp_query+0x124>
      return result;
 801135e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011362:	e096      	b.n	8011492 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d106      	bne.n	8011378 <etharp_query+0x138>
 801136a:	4b4c      	ldr	r3, [pc, #304]	; (801149c <etharp_query+0x25c>)
 801136c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011370:	494f      	ldr	r1, [pc, #316]	; (80114b0 <etharp_query+0x270>)
 8011372:	484c      	ldr	r0, [pc, #304]	; (80114a4 <etharp_query+0x264>)
 8011374:	f001 fde8 	bl	8012f48 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011378:	7c7a      	ldrb	r2, [r7, #17]
 801137a:	494b      	ldr	r1, [pc, #300]	; (80114a8 <etharp_query+0x268>)
 801137c:	4613      	mov	r3, r2
 801137e:	005b      	lsls	r3, r3, #1
 8011380:	4413      	add	r3, r2
 8011382:	00db      	lsls	r3, r3, #3
 8011384:	440b      	add	r3, r1
 8011386:	3314      	adds	r3, #20
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	2b01      	cmp	r3, #1
 801138c:	d917      	bls.n	80113be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801138e:	4a49      	ldr	r2, [pc, #292]	; (80114b4 <etharp_query+0x274>)
 8011390:	7c7b      	ldrb	r3, [r7, #17]
 8011392:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011394:	7c7a      	ldrb	r2, [r7, #17]
 8011396:	4613      	mov	r3, r2
 8011398:	005b      	lsls	r3, r3, #1
 801139a:	4413      	add	r3, r2
 801139c:	00db      	lsls	r3, r3, #3
 801139e:	3308      	adds	r3, #8
 80113a0:	4a41      	ldr	r2, [pc, #260]	; (80114a8 <etharp_query+0x268>)
 80113a2:	4413      	add	r3, r2
 80113a4:	3304      	adds	r3, #4
 80113a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80113aa:	9200      	str	r2, [sp, #0]
 80113ac:	697a      	ldr	r2, [r7, #20]
 80113ae:	6879      	ldr	r1, [r7, #4]
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	f001 fc93 	bl	8012cdc <ethernet_output>
 80113b6:	4603      	mov	r3, r0
 80113b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113bc:	e067      	b.n	801148e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80113be:	7c7a      	ldrb	r2, [r7, #17]
 80113c0:	4939      	ldr	r1, [pc, #228]	; (80114a8 <etharp_query+0x268>)
 80113c2:	4613      	mov	r3, r2
 80113c4:	005b      	lsls	r3, r3, #1
 80113c6:	4413      	add	r3, r2
 80113c8:	00db      	lsls	r3, r3, #3
 80113ca:	440b      	add	r3, r1
 80113cc:	3314      	adds	r3, #20
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d15c      	bne.n	801148e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80113d4:	2300      	movs	r3, #0
 80113d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80113dc:	e01c      	b.n	8011418 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	895a      	ldrh	r2, [r3, #10]
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	891b      	ldrh	r3, [r3, #8]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d10a      	bne.n	8011400 <etharp_query+0x1c0>
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d006      	beq.n	8011400 <etharp_query+0x1c0>
 80113f2:	4b2a      	ldr	r3, [pc, #168]	; (801149c <etharp_query+0x25c>)
 80113f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80113f8:	492f      	ldr	r1, [pc, #188]	; (80114b8 <etharp_query+0x278>)
 80113fa:	482a      	ldr	r0, [pc, #168]	; (80114a4 <etharp_query+0x264>)
 80113fc:	f001 fda4 	bl	8012f48 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	7b1b      	ldrb	r3, [r3, #12]
 8011404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011408:	2b00      	cmp	r3, #0
 801140a:	d002      	beq.n	8011412 <etharp_query+0x1d2>
        copy_needed = 1;
 801140c:	2301      	movs	r3, #1
 801140e:	61bb      	str	r3, [r7, #24]
        break;
 8011410:	e005      	b.n	801141e <etharp_query+0x1de>
      }
      p = p->next;
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1df      	bne.n	80113de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d007      	beq.n	8011434 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	f44f 7120 	mov.w	r1, #640	; 0x280
 801142a:	200e      	movs	r0, #14
 801142c:	f7f7 fc0c 	bl	8008c48 <pbuf_clone>
 8011430:	61f8      	str	r0, [r7, #28]
 8011432:	e004      	b.n	801143e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011438:	69f8      	ldr	r0, [r7, #28]
 801143a:	f7f7 fa39 	bl	80088b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d021      	beq.n	8011488 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011444:	7c7a      	ldrb	r2, [r7, #17]
 8011446:	4918      	ldr	r1, [pc, #96]	; (80114a8 <etharp_query+0x268>)
 8011448:	4613      	mov	r3, r2
 801144a:	005b      	lsls	r3, r3, #1
 801144c:	4413      	add	r3, r2
 801144e:	00db      	lsls	r3, r3, #3
 8011450:	440b      	add	r3, r1
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00a      	beq.n	801146e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011458:	7c7a      	ldrb	r2, [r7, #17]
 801145a:	4913      	ldr	r1, [pc, #76]	; (80114a8 <etharp_query+0x268>)
 801145c:	4613      	mov	r3, r2
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	4413      	add	r3, r2
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	440b      	add	r3, r1
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4618      	mov	r0, r3
 801146a:	f7f7 f981 	bl	8008770 <pbuf_free>
      }
      arp_table[i].q = p;
 801146e:	7c7a      	ldrb	r2, [r7, #17]
 8011470:	490d      	ldr	r1, [pc, #52]	; (80114a8 <etharp_query+0x268>)
 8011472:	4613      	mov	r3, r2
 8011474:	005b      	lsls	r3, r3, #1
 8011476:	4413      	add	r3, r2
 8011478:	00db      	lsls	r3, r3, #3
 801147a:	440b      	add	r3, r1
 801147c:	69fa      	ldr	r2, [r7, #28]
 801147e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011480:	2300      	movs	r3, #0
 8011482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011486:	e002      	b.n	801148e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011488:	23ff      	movs	r3, #255	; 0xff
 801148a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801148e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011492:	4618      	mov	r0, r3
 8011494:	3728      	adds	r7, #40	; 0x28
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	0801643c 	.word	0x0801643c
 80114a0:	080165e8 	.word	0x080165e8
 80114a4:	080164b4 	.word	0x080164b4
 80114a8:	20008860 	.word	0x20008860
 80114ac:	080165f8 	.word	0x080165f8
 80114b0:	080165dc 	.word	0x080165dc
 80114b4:	20008950 	.word	0x20008950
 80114b8:	08016620 	.word	0x08016620

080114bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b08a      	sub	sp, #40	; 0x28
 80114c0:	af02      	add	r7, sp, #8
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
 80114c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80114ca:	2300      	movs	r3, #0
 80114cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d106      	bne.n	80114e2 <etharp_raw+0x26>
 80114d4:	4b3a      	ldr	r3, [pc, #232]	; (80115c0 <etharp_raw+0x104>)
 80114d6:	f240 4257 	movw	r2, #1111	; 0x457
 80114da:	493a      	ldr	r1, [pc, #232]	; (80115c4 <etharp_raw+0x108>)
 80114dc:	483a      	ldr	r0, [pc, #232]	; (80115c8 <etharp_raw+0x10c>)
 80114de:	f001 fd33 	bl	8012f48 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80114e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114e6:	211c      	movs	r1, #28
 80114e8:	200e      	movs	r0, #14
 80114ea:	f7f6 fe5d 	bl	80081a8 <pbuf_alloc>
 80114ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80114f0:	69bb      	ldr	r3, [r7, #24]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d102      	bne.n	80114fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80114f6:	f04f 33ff 	mov.w	r3, #4294967295
 80114fa:	e05d      	b.n	80115b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	895b      	ldrh	r3, [r3, #10]
 8011500:	2b1b      	cmp	r3, #27
 8011502:	d806      	bhi.n	8011512 <etharp_raw+0x56>
 8011504:	4b2e      	ldr	r3, [pc, #184]	; (80115c0 <etharp_raw+0x104>)
 8011506:	f240 4262 	movw	r2, #1122	; 0x462
 801150a:	4930      	ldr	r1, [pc, #192]	; (80115cc <etharp_raw+0x110>)
 801150c:	482e      	ldr	r0, [pc, #184]	; (80115c8 <etharp_raw+0x10c>)
 801150e:	f001 fd1b 	bl	8012f48 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011518:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801151a:	4618      	mov	r0, r3
 801151c:	f7f5 fe8d 	bl	800723a <lwip_htons>
 8011520:	4603      	mov	r3, r0
 8011522:	461a      	mov	r2, r3
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801152e:	2b06      	cmp	r3, #6
 8011530:	d006      	beq.n	8011540 <etharp_raw+0x84>
 8011532:	4b23      	ldr	r3, [pc, #140]	; (80115c0 <etharp_raw+0x104>)
 8011534:	f240 4269 	movw	r2, #1129	; 0x469
 8011538:	4925      	ldr	r1, [pc, #148]	; (80115d0 <etharp_raw+0x114>)
 801153a:	4823      	ldr	r0, [pc, #140]	; (80115c8 <etharp_raw+0x10c>)
 801153c:	f001 fd04 	bl	8012f48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	3308      	adds	r3, #8
 8011544:	2206      	movs	r2, #6
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	4618      	mov	r0, r3
 801154a:	f001 fdd7 	bl	80130fc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	3312      	adds	r3, #18
 8011552:	2206      	movs	r2, #6
 8011554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011556:	4618      	mov	r0, r3
 8011558:	f001 fdd0 	bl	80130fc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	330e      	adds	r3, #14
 8011560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011562:	6812      	ldr	r2, [r2, #0]
 8011564:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	3318      	adds	r3, #24
 801156a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801156c:	6812      	ldr	r2, [r2, #0]
 801156e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	2200      	movs	r2, #0
 8011574:	701a      	strb	r2, [r3, #0]
 8011576:	2200      	movs	r2, #0
 8011578:	f042 0201 	orr.w	r2, r2, #1
 801157c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	2200      	movs	r2, #0
 8011582:	f042 0208 	orr.w	r2, r2, #8
 8011586:	709a      	strb	r2, [r3, #2]
 8011588:	2200      	movs	r2, #0
 801158a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2206      	movs	r2, #6
 8011590:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	2204      	movs	r2, #4
 8011596:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011598:	f640 0306 	movw	r3, #2054	; 0x806
 801159c:	9300      	str	r3, [sp, #0]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	68ba      	ldr	r2, [r7, #8]
 80115a2:	69b9      	ldr	r1, [r7, #24]
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	f001 fb99 	bl	8012cdc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80115aa:	69b8      	ldr	r0, [r7, #24]
 80115ac:	f7f7 f8e0 	bl	8008770 <pbuf_free>
  p = NULL;
 80115b0:	2300      	movs	r3, #0
 80115b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80115b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3720      	adds	r7, #32
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	0801643c 	.word	0x0801643c
 80115c4:	0801658c 	.word	0x0801658c
 80115c8:	080164b4 	.word	0x080164b4
 80115cc:	0801663c 	.word	0x0801663c
 80115d0:	08016670 	.word	0x08016670

080115d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b088      	sub	sp, #32
 80115d8:	af04      	add	r7, sp, #16
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115f0:	2201      	movs	r2, #1
 80115f2:	9203      	str	r2, [sp, #12]
 80115f4:	68ba      	ldr	r2, [r7, #8]
 80115f6:	9202      	str	r2, [sp, #8]
 80115f8:	4a06      	ldr	r2, [pc, #24]	; (8011614 <etharp_request_dst+0x40>)
 80115fa:	9201      	str	r2, [sp, #4]
 80115fc:	9300      	str	r3, [sp, #0]
 80115fe:	4603      	mov	r3, r0
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f7ff ff5a 	bl	80114bc <etharp_raw>
 8011608:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801160a:	4618      	mov	r0, r3
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	08016c1c 	.word	0x08016c1c

08011618 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011622:	4a05      	ldr	r2, [pc, #20]	; (8011638 <etharp_request+0x20>)
 8011624:	6839      	ldr	r1, [r7, #0]
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7ff ffd4 	bl	80115d4 <etharp_request_dst>
 801162c:	4603      	mov	r3, r0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3708      	adds	r7, #8
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
 8011636:	bf00      	nop
 8011638:	08016c14 	.word	0x08016c14

0801163c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b08e      	sub	sp, #56	; 0x38
 8011640:	af04      	add	r7, sp, #16
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011646:	4b79      	ldr	r3, [pc, #484]	; (801182c <icmp_input+0x1f0>)
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	f003 030f 	and.w	r3, r3, #15
 8011654:	b2db      	uxtb	r3, r3
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	b2db      	uxtb	r3, r3
 801165a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801165c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801165e:	2b13      	cmp	r3, #19
 8011660:	f240 80cd 	bls.w	80117fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	895b      	ldrh	r3, [r3, #10]
 8011668:	2b03      	cmp	r3, #3
 801166a:	f240 80ca 	bls.w	8011802 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011678:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801167c:	2b00      	cmp	r3, #0
 801167e:	f000 80b7 	beq.w	80117f0 <icmp_input+0x1b4>
 8011682:	2b08      	cmp	r3, #8
 8011684:	f040 80b7 	bne.w	80117f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011688:	4b69      	ldr	r3, [pc, #420]	; (8011830 <icmp_input+0x1f4>)
 801168a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801168c:	4b67      	ldr	r3, [pc, #412]	; (801182c <icmp_input+0x1f0>)
 801168e:	695b      	ldr	r3, [r3, #20]
 8011690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011694:	2be0      	cmp	r3, #224	; 0xe0
 8011696:	f000 80bb 	beq.w	8011810 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801169a:	4b64      	ldr	r3, [pc, #400]	; (801182c <icmp_input+0x1f0>)
 801169c:	695b      	ldr	r3, [r3, #20]
 801169e:	4a63      	ldr	r2, [pc, #396]	; (801182c <icmp_input+0x1f0>)
 80116a0:	6812      	ldr	r2, [r2, #0]
 80116a2:	4611      	mov	r1, r2
 80116a4:	4618      	mov	r0, r3
 80116a6:	f000 fc0b 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f040 80b1 	bne.w	8011814 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	891b      	ldrh	r3, [r3, #8]
 80116b6:	2b07      	cmp	r3, #7
 80116b8:	f240 80a5 	bls.w	8011806 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80116bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116be:	330e      	adds	r3, #14
 80116c0:	4619      	mov	r1, r3
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f7f6 ffbe 	bl	8008644 <pbuf_add_header>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d04b      	beq.n	8011766 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	891a      	ldrh	r2, [r3, #8]
 80116d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116d4:	4413      	add	r3, r2
 80116d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	891b      	ldrh	r3, [r3, #8]
 80116dc:	8b7a      	ldrh	r2, [r7, #26]
 80116de:	429a      	cmp	r2, r3
 80116e0:	f0c0 809a 	bcc.w	8011818 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80116e4:	8b7b      	ldrh	r3, [r7, #26]
 80116e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116ea:	4619      	mov	r1, r3
 80116ec:	200e      	movs	r0, #14
 80116ee:	f7f6 fd5b 	bl	80081a8 <pbuf_alloc>
 80116f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 8090 	beq.w	801181c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	895b      	ldrh	r3, [r3, #10]
 8011700:	461a      	mov	r2, r3
 8011702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011704:	3308      	adds	r3, #8
 8011706:	429a      	cmp	r2, r3
 8011708:	d203      	bcs.n	8011712 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801170a:	6978      	ldr	r0, [r7, #20]
 801170c:	f7f7 f830 	bl	8008770 <pbuf_free>
          goto icmperr;
 8011710:	e085      	b.n	801181e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801171a:	4618      	mov	r0, r3
 801171c:	f001 fcee 	bl	80130fc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011722:	4619      	mov	r1, r3
 8011724:	6978      	ldr	r0, [r7, #20]
 8011726:	f7f6 ff9d 	bl	8008664 <pbuf_remove_header>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d009      	beq.n	8011744 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011730:	4b40      	ldr	r3, [pc, #256]	; (8011834 <icmp_input+0x1f8>)
 8011732:	22b6      	movs	r2, #182	; 0xb6
 8011734:	4940      	ldr	r1, [pc, #256]	; (8011838 <icmp_input+0x1fc>)
 8011736:	4841      	ldr	r0, [pc, #260]	; (801183c <icmp_input+0x200>)
 8011738:	f001 fc06 	bl	8012f48 <iprintf>
          pbuf_free(r);
 801173c:	6978      	ldr	r0, [r7, #20]
 801173e:	f7f7 f817 	bl	8008770 <pbuf_free>
          goto icmperr;
 8011742:	e06c      	b.n	801181e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011744:	6879      	ldr	r1, [r7, #4]
 8011746:	6978      	ldr	r0, [r7, #20]
 8011748:	f7f7 f93a 	bl	80089c0 <pbuf_copy>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d003      	beq.n	801175a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011752:	6978      	ldr	r0, [r7, #20]
 8011754:	f7f7 f80c 	bl	8008770 <pbuf_free>
          goto icmperr;
 8011758:	e061      	b.n	801181e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7f7 f808 	bl	8008770 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	607b      	str	r3, [r7, #4]
 8011764:	e00f      	b.n	8011786 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011768:	330e      	adds	r3, #14
 801176a:	4619      	mov	r1, r3
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7f6 ff79 	bl	8008664 <pbuf_remove_header>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d006      	beq.n	8011786 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011778:	4b2e      	ldr	r3, [pc, #184]	; (8011834 <icmp_input+0x1f8>)
 801177a:	22c7      	movs	r2, #199	; 0xc7
 801177c:	4930      	ldr	r1, [pc, #192]	; (8011840 <icmp_input+0x204>)
 801177e:	482f      	ldr	r0, [pc, #188]	; (801183c <icmp_input+0x200>)
 8011780:	f001 fbe2 	bl	8012f48 <iprintf>
          goto icmperr;
 8011784:	e04b      	b.n	801181e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801178c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801178e:	4619      	mov	r1, r3
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f7f6 ff57 	bl	8008644 <pbuf_add_header>
 8011796:	4603      	mov	r3, r0
 8011798:	2b00      	cmp	r3, #0
 801179a:	d12b      	bne.n	80117f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80117a2:	69fb      	ldr	r3, [r7, #28]
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80117aa:	4b20      	ldr	r3, [pc, #128]	; (801182c <icmp_input+0x1f0>)
 80117ac:	691a      	ldr	r2, [r3, #16]
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	2200      	movs	r2, #0
 80117b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	2200      	movs	r2, #0
 80117bc:	709a      	strb	r2, [r3, #2]
 80117be:	2200      	movs	r2, #0
 80117c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	22ff      	movs	r2, #255	; 0xff
 80117c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	2200      	movs	r2, #0
 80117cc:	729a      	strb	r2, [r3, #10]
 80117ce:	2200      	movs	r2, #0
 80117d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	9302      	str	r3, [sp, #8]
 80117d6:	2301      	movs	r3, #1
 80117d8:	9301      	str	r3, [sp, #4]
 80117da:	2300      	movs	r3, #0
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	23ff      	movs	r3, #255	; 0xff
 80117e0:	2200      	movs	r2, #0
 80117e2:	69f9      	ldr	r1, [r7, #28]
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f000 fa93 	bl	8011d10 <ip4_output_if>
 80117ea:	4603      	mov	r3, r0
 80117ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80117ee:	e001      	b.n	80117f4 <icmp_input+0x1b8>
      break;
 80117f0:	bf00      	nop
 80117f2:	e000      	b.n	80117f6 <icmp_input+0x1ba>
      break;
 80117f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7f6 ffba 	bl	8008770 <pbuf_free>
  return;
 80117fc:	e013      	b.n	8011826 <icmp_input+0x1ea>
    goto lenerr;
 80117fe:	bf00      	nop
 8011800:	e002      	b.n	8011808 <icmp_input+0x1cc>
    goto lenerr;
 8011802:	bf00      	nop
 8011804:	e000      	b.n	8011808 <icmp_input+0x1cc>
        goto lenerr;
 8011806:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7f6 ffb1 	bl	8008770 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801180e:	e00a      	b.n	8011826 <icmp_input+0x1ea>
        goto icmperr;
 8011810:	bf00      	nop
 8011812:	e004      	b.n	801181e <icmp_input+0x1e2>
        goto icmperr;
 8011814:	bf00      	nop
 8011816:	e002      	b.n	801181e <icmp_input+0x1e2>
          goto icmperr;
 8011818:	bf00      	nop
 801181a:	e000      	b.n	801181e <icmp_input+0x1e2>
          goto icmperr;
 801181c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7f6 ffa6 	bl	8008770 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011824:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011826:	3728      	adds	r7, #40	; 0x28
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	2000523c 	.word	0x2000523c
 8011830:	20005250 	.word	0x20005250
 8011834:	080166b4 	.word	0x080166b4
 8011838:	080166ec 	.word	0x080166ec
 801183c:	08016724 	.word	0x08016724
 8011840:	0801674c 	.word	0x0801674c

08011844 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	460b      	mov	r3, r1
 801184e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011850:	78fb      	ldrb	r3, [r7, #3]
 8011852:	461a      	mov	r2, r3
 8011854:	2103      	movs	r1, #3
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 f814 	bl	8011884 <icmp_send_response>
}
 801185c:	bf00      	nop
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	460b      	mov	r3, r1
 801186e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011870:	78fb      	ldrb	r3, [r7, #3]
 8011872:	461a      	mov	r2, r3
 8011874:	210b      	movs	r1, #11
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 f804 	bl	8011884 <icmp_send_response>
}
 801187c:	bf00      	nop
 801187e:	3708      	adds	r7, #8
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b08c      	sub	sp, #48	; 0x30
 8011888:	af04      	add	r7, sp, #16
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	460b      	mov	r3, r1
 801188e:	70fb      	strb	r3, [r7, #3]
 8011890:	4613      	mov	r3, r2
 8011892:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011894:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011898:	2124      	movs	r1, #36	; 0x24
 801189a:	2022      	movs	r0, #34	; 0x22
 801189c:	f7f6 fc84 	bl	80081a8 <pbuf_alloc>
 80118a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d04c      	beq.n	8011942 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	895b      	ldrh	r3, [r3, #10]
 80118ac:	2b23      	cmp	r3, #35	; 0x23
 80118ae:	d806      	bhi.n	80118be <icmp_send_response+0x3a>
 80118b0:	4b26      	ldr	r3, [pc, #152]	; (801194c <icmp_send_response+0xc8>)
 80118b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80118b6:	4926      	ldr	r1, [pc, #152]	; (8011950 <icmp_send_response+0xcc>)
 80118b8:	4826      	ldr	r0, [pc, #152]	; (8011954 <icmp_send_response+0xd0>)
 80118ba:	f001 fb45 	bl	8012f48 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	78fa      	ldrb	r2, [r7, #3]
 80118ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	78ba      	ldrb	r2, [r7, #2]
 80118d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2200      	movs	r2, #0
 80118da:	711a      	strb	r2, [r3, #4]
 80118dc:	2200      	movs	r2, #0
 80118de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	2200      	movs	r2, #0
 80118e4:	719a      	strb	r2, [r3, #6]
 80118e6:	2200      	movs	r2, #0
 80118e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	f103 0008 	add.w	r0, r3, #8
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	221c      	movs	r2, #28
 80118f8:	4619      	mov	r1, r3
 80118fa:	f001 fbff 	bl	80130fc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80118fe:	69bb      	ldr	r3, [r7, #24]
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011904:	f107 030c 	add.w	r3, r7, #12
 8011908:	4618      	mov	r0, r3
 801190a:	f000 f825 	bl	8011958 <ip4_route>
 801190e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d011      	beq.n	801193a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	2200      	movs	r2, #0
 801191a:	709a      	strb	r2, [r3, #2]
 801191c:	2200      	movs	r2, #0
 801191e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011920:	f107 020c 	add.w	r2, r7, #12
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	9302      	str	r3, [sp, #8]
 8011928:	2301      	movs	r3, #1
 801192a:	9301      	str	r3, [sp, #4]
 801192c:	2300      	movs	r3, #0
 801192e:	9300      	str	r3, [sp, #0]
 8011930:	23ff      	movs	r3, #255	; 0xff
 8011932:	2100      	movs	r1, #0
 8011934:	69f8      	ldr	r0, [r7, #28]
 8011936:	f000 f9eb 	bl	8011d10 <ip4_output_if>
  }
  pbuf_free(q);
 801193a:	69f8      	ldr	r0, [r7, #28]
 801193c:	f7f6 ff18 	bl	8008770 <pbuf_free>
 8011940:	e000      	b.n	8011944 <icmp_send_response+0xc0>
    return;
 8011942:	bf00      	nop
}
 8011944:	3720      	adds	r7, #32
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	080166b4 	.word	0x080166b4
 8011950:	08016780 	.word	0x08016780
 8011954:	08016724 	.word	0x08016724

08011958 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011960:	4b33      	ldr	r3, [pc, #204]	; (8011a30 <ip4_route+0xd8>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	60fb      	str	r3, [r7, #12]
 8011966:	e036      	b.n	80119d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801196e:	f003 0301 	and.w	r3, r3, #1
 8011972:	b2db      	uxtb	r3, r3
 8011974:	2b00      	cmp	r3, #0
 8011976:	d02b      	beq.n	80119d0 <ip4_route+0x78>
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801197e:	089b      	lsrs	r3, r3, #2
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	b2db      	uxtb	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d022      	beq.n	80119d0 <ip4_route+0x78>
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	3304      	adds	r3, #4
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d01d      	beq.n	80119d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	3304      	adds	r3, #4
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	405a      	eors	r2, r3
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	3308      	adds	r3, #8
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4013      	ands	r3, r2
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d101      	bne.n	80119b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	e038      	b.n	8011a22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119b6:	f003 0302 	and.w	r3, r3, #2
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d108      	bne.n	80119d0 <ip4_route+0x78>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	330c      	adds	r3, #12
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d101      	bne.n	80119d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	e028      	b.n	8011a22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	60fb      	str	r3, [r7, #12]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d1c5      	bne.n	8011968 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80119dc:	4b15      	ldr	r3, [pc, #84]	; (8011a34 <ip4_route+0xdc>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d01a      	beq.n	8011a1a <ip4_route+0xc2>
 80119e4:	4b13      	ldr	r3, [pc, #76]	; (8011a34 <ip4_route+0xdc>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119ec:	f003 0301 	and.w	r3, r3, #1
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d012      	beq.n	8011a1a <ip4_route+0xc2>
 80119f4:	4b0f      	ldr	r3, [pc, #60]	; (8011a34 <ip4_route+0xdc>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119fc:	f003 0304 	and.w	r3, r3, #4
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00a      	beq.n	8011a1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011a04:	4b0b      	ldr	r3, [pc, #44]	; (8011a34 <ip4_route+0xdc>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	3304      	adds	r3, #4
 8011a0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d004      	beq.n	8011a1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	2b7f      	cmp	r3, #127	; 0x7f
 8011a18:	d101      	bne.n	8011a1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	e001      	b.n	8011a22 <ip4_route+0xca>
  }

  return netif_default;
 8011a1e:	4b05      	ldr	r3, [pc, #20]	; (8011a34 <ip4_route+0xdc>)
 8011a20:	681b      	ldr	r3, [r3, #0]
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	3714      	adds	r7, #20
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	200087c0 	.word	0x200087c0
 8011a34:	200087c4 	.word	0x200087c4

08011a38 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011a46:	f003 0301 	and.w	r3, r3, #1
 8011a4a:	b2db      	uxtb	r3, r3
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d016      	beq.n	8011a7e <ip4_input_accept+0x46>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	3304      	adds	r3, #4
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d011      	beq.n	8011a7e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011a5a:	4b0b      	ldr	r3, [pc, #44]	; (8011a88 <ip4_input_accept+0x50>)
 8011a5c:	695a      	ldr	r2, [r3, #20]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	3304      	adds	r3, #4
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d008      	beq.n	8011a7a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011a68:	4b07      	ldr	r3, [pc, #28]	; (8011a88 <ip4_input_accept+0x50>)
 8011a6a:	695b      	ldr	r3, [r3, #20]
 8011a6c:	6879      	ldr	r1, [r7, #4]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f000 fa26 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 8011a74:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e000      	b.n	8011a80 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011a7e:	2300      	movs	r3, #0
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	2000523c 	.word	0x2000523c

08011a8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b088      	sub	sp, #32
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011a96:	2301      	movs	r3, #1
 8011a98:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	091b      	lsrs	r3, r3, #4
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b04      	cmp	r3, #4
 8011aaa:	d004      	beq.n	8011ab6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f7f6 fe5f 	bl	8008770 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	e123      	b.n	8011cfe <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	f003 030f 	and.w	r3, r3, #15
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	885b      	ldrh	r3, [r3, #2]
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7f5 fbb4 	bl	800723a <lwip_htons>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	891b      	ldrh	r3, [r3, #8]
 8011ada:	8a3a      	ldrh	r2, [r7, #16]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d204      	bcs.n	8011aea <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8011ae0:	8a3b      	ldrh	r3, [r7, #16]
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7f6 fcbd 	bl	8008464 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	895b      	ldrh	r3, [r3, #10]
 8011aee:	8a7a      	ldrh	r2, [r7, #18]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d807      	bhi.n	8011b04 <ip4_input+0x78>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	891b      	ldrh	r3, [r3, #8]
 8011af8:	8a3a      	ldrh	r2, [r7, #16]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d802      	bhi.n	8011b04 <ip4_input+0x78>
 8011afe:	8a7b      	ldrh	r3, [r7, #18]
 8011b00:	2b13      	cmp	r3, #19
 8011b02:	d804      	bhi.n	8011b0e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7f6 fe33 	bl	8008770 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	e0f7      	b.n	8011cfe <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011b0e:	69fb      	ldr	r3, [r7, #28]
 8011b10:	691b      	ldr	r3, [r3, #16]
 8011b12:	4a7d      	ldr	r2, [pc, #500]	; (8011d08 <ip4_input+0x27c>)
 8011b14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	4a7b      	ldr	r2, [pc, #492]	; (8011d08 <ip4_input+0x27c>)
 8011b1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011b1e:	4b7a      	ldr	r3, [pc, #488]	; (8011d08 <ip4_input+0x27c>)
 8011b20:	695b      	ldr	r3, [r3, #20]
 8011b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b26:	2be0      	cmp	r3, #224	; 0xe0
 8011b28:	d112      	bne.n	8011b50 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011b30:	f003 0301 	and.w	r3, r3, #1
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d007      	beq.n	8011b4a <ip4_input+0xbe>
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	3304      	adds	r3, #4
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d002      	beq.n	8011b4a <ip4_input+0xbe>
      netif = inp;
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	61bb      	str	r3, [r7, #24]
 8011b48:	e02a      	b.n	8011ba0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	61bb      	str	r3, [r7, #24]
 8011b4e:	e027      	b.n	8011ba0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011b50:	6838      	ldr	r0, [r7, #0]
 8011b52:	f7ff ff71 	bl	8011a38 <ip4_input_accept>
 8011b56:	4603      	mov	r3, r0
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d002      	beq.n	8011b62 <ip4_input+0xd6>
      netif = inp;
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	61bb      	str	r3, [r7, #24]
 8011b60:	e01e      	b.n	8011ba0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011b62:	2300      	movs	r3, #0
 8011b64:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011b66:	4b68      	ldr	r3, [pc, #416]	; (8011d08 <ip4_input+0x27c>)
 8011b68:	695b      	ldr	r3, [r3, #20]
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8011b6e:	d017      	beq.n	8011ba0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011b70:	4b66      	ldr	r3, [pc, #408]	; (8011d0c <ip4_input+0x280>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	61bb      	str	r3, [r7, #24]
 8011b76:	e00e      	b.n	8011b96 <ip4_input+0x10a>
          if (netif == inp) {
 8011b78:	69ba      	ldr	r2, [r7, #24]
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d006      	beq.n	8011b8e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011b80:	69b8      	ldr	r0, [r7, #24]
 8011b82:	f7ff ff59 	bl	8011a38 <ip4_input_accept>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d108      	bne.n	8011b9e <ip4_input+0x112>
 8011b8c:	e000      	b.n	8011b90 <ip4_input+0x104>
            continue;
 8011b8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	61bb      	str	r3, [r7, #24]
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1ed      	bne.n	8011b78 <ip4_input+0xec>
 8011b9c:	e000      	b.n	8011ba0 <ip4_input+0x114>
            break;
 8011b9e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d111      	bne.n	8011bca <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	7a5b      	ldrb	r3, [r3, #9]
 8011baa:	2b11      	cmp	r3, #17
 8011bac:	d10d      	bne.n	8011bca <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011bae:	8a7b      	ldrh	r3, [r7, #18]
 8011bb0:	69fa      	ldr	r2, [r7, #28]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	885b      	ldrh	r3, [r3, #2]
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011bc0:	d103      	bne.n	8011bca <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d017      	beq.n	8011c00 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011bd0:	4b4d      	ldr	r3, [pc, #308]	; (8011d08 <ip4_input+0x27c>)
 8011bd2:	691b      	ldr	r3, [r3, #16]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d013      	beq.n	8011c00 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011bd8:	4b4b      	ldr	r3, [pc, #300]	; (8011d08 <ip4_input+0x27c>)
 8011bda:	691b      	ldr	r3, [r3, #16]
 8011bdc:	6839      	ldr	r1, [r7, #0]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f000 f96e 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 8011be4:	4603      	mov	r3, r0
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d105      	bne.n	8011bf6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011bea:	4b47      	ldr	r3, [pc, #284]	; (8011d08 <ip4_input+0x27c>)
 8011bec:	691b      	ldr	r3, [r3, #16]
 8011bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011bf2:	2be0      	cmp	r3, #224	; 0xe0
 8011bf4:	d104      	bne.n	8011c00 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f7f6 fdba 	bl	8008770 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	e07e      	b.n	8011cfe <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d104      	bne.n	8011c10 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f7f6 fdb2 	bl	8008770 <pbuf_free>
    return ERR_OK;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	e076      	b.n	8011cfe <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011c10:	69fb      	ldr	r3, [r7, #28]
 8011c12:	88db      	ldrh	r3, [r3, #6]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	461a      	mov	r2, r3
 8011c18:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011c1c:	4013      	ands	r3, r2
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d00b      	beq.n	8011c3a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f000 fc92 	bl	801254c <ip4_reass>
 8011c28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d101      	bne.n	8011c34 <ip4_input+0x1a8>
      return ERR_OK;
 8011c30:	2300      	movs	r3, #0
 8011c32:	e064      	b.n	8011cfe <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011c3a:	4a33      	ldr	r2, [pc, #204]	; (8011d08 <ip4_input+0x27c>)
 8011c3c:	69bb      	ldr	r3, [r7, #24]
 8011c3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011c40:	4a31      	ldr	r2, [pc, #196]	; (8011d08 <ip4_input+0x27c>)
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011c46:	4a30      	ldr	r2, [pc, #192]	; (8011d08 <ip4_input+0x27c>)
 8011c48:	69fb      	ldr	r3, [r7, #28]
 8011c4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	f003 030f 	and.w	r3, r3, #15
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	4b2a      	ldr	r3, [pc, #168]	; (8011d08 <ip4_input+0x27c>)
 8011c5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011c60:	8a7b      	ldrh	r3, [r7, #18]
 8011c62:	4619      	mov	r1, r3
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7f6 fcfd 	bl	8008664 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	7a5b      	ldrb	r3, [r3, #9]
 8011c6e:	2b11      	cmp	r3, #17
 8011c70:	d006      	beq.n	8011c80 <ip4_input+0x1f4>
 8011c72:	2b11      	cmp	r3, #17
 8011c74:	dc13      	bgt.n	8011c9e <ip4_input+0x212>
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d00c      	beq.n	8011c94 <ip4_input+0x208>
 8011c7a:	2b06      	cmp	r3, #6
 8011c7c:	d005      	beq.n	8011c8a <ip4_input+0x1fe>
 8011c7e:	e00e      	b.n	8011c9e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011c80:	6839      	ldr	r1, [r7, #0]
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f7fc fb24 	bl	800e2d0 <udp_input>
        break;
 8011c88:	e026      	b.n	8011cd8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011c8a:	6839      	ldr	r1, [r7, #0]
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7f8 fba7 	bl	800a3e0 <tcp_input>
        break;
 8011c92:	e021      	b.n	8011cd8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011c94:	6839      	ldr	r1, [r7, #0]
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f7ff fcd0 	bl	801163c <icmp_input>
        break;
 8011c9c:	e01c      	b.n	8011cd8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011c9e:	4b1a      	ldr	r3, [pc, #104]	; (8011d08 <ip4_input+0x27c>)
 8011ca0:	695b      	ldr	r3, [r3, #20]
 8011ca2:	69b9      	ldr	r1, [r7, #24]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f000 f90b 	bl	8011ec0 <ip4_addr_isbroadcast_u32>
 8011caa:	4603      	mov	r3, r0
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d10f      	bne.n	8011cd0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011cb0:	4b15      	ldr	r3, [pc, #84]	; (8011d08 <ip4_input+0x27c>)
 8011cb2:	695b      	ldr	r3, [r3, #20]
 8011cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011cb8:	2be0      	cmp	r3, #224	; 0xe0
 8011cba:	d009      	beq.n	8011cd0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011cbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7f6 fd41 	bl	800874a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011cc8:	2102      	movs	r1, #2
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7ff fdba 	bl	8011844 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f7f6 fd4d 	bl	8008770 <pbuf_free>
        break;
 8011cd6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011cd8:	4b0b      	ldr	r3, [pc, #44]	; (8011d08 <ip4_input+0x27c>)
 8011cda:	2200      	movs	r2, #0
 8011cdc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011cde:	4b0a      	ldr	r3, [pc, #40]	; (8011d08 <ip4_input+0x27c>)
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011ce4:	4b08      	ldr	r3, [pc, #32]	; (8011d08 <ip4_input+0x27c>)
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011cea:	4b07      	ldr	r3, [pc, #28]	; (8011d08 <ip4_input+0x27c>)
 8011cec:	2200      	movs	r2, #0
 8011cee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011cf0:	4b05      	ldr	r3, [pc, #20]	; (8011d08 <ip4_input+0x27c>)
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011cf6:	4b04      	ldr	r3, [pc, #16]	; (8011d08 <ip4_input+0x27c>)
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3720      	adds	r7, #32
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	2000523c 	.word	0x2000523c
 8011d0c:	200087c0 	.word	0x200087c0

08011d10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b08a      	sub	sp, #40	; 0x28
 8011d14:	af04      	add	r7, sp, #16
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]
 8011d1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d009      	beq.n	8011d3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d003      	beq.n	8011d36 <ip4_output_if+0x26>
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d102      	bne.n	8011d3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d38:	3304      	adds	r3, #4
 8011d3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011d3c:	78fa      	ldrb	r2, [r7, #3]
 8011d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d40:	9302      	str	r3, [sp, #8]
 8011d42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d46:	9301      	str	r3, [sp, #4]
 8011d48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	6979      	ldr	r1, [r7, #20]
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f000 f805 	bl	8011d64 <ip4_output_if_src>
 8011d5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3718      	adds	r7, #24
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b088      	sub	sp, #32
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]
 8011d70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	7b9b      	ldrb	r3, [r3, #14]
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d006      	beq.n	8011d88 <ip4_output_if_src+0x24>
 8011d7a:	4b4b      	ldr	r3, [pc, #300]	; (8011ea8 <ip4_output_if_src+0x144>)
 8011d7c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011d80:	494a      	ldr	r1, [pc, #296]	; (8011eac <ip4_output_if_src+0x148>)
 8011d82:	484b      	ldr	r0, [pc, #300]	; (8011eb0 <ip4_output_if_src+0x14c>)
 8011d84:	f001 f8e0 	bl	8012f48 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d060      	beq.n	8011e50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011d8e:	2314      	movs	r3, #20
 8011d90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011d92:	2114      	movs	r1, #20
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f7f6 fc55 	bl	8008644 <pbuf_add_header>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d002      	beq.n	8011da6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011da0:	f06f 0301 	mvn.w	r3, #1
 8011da4:	e07c      	b.n	8011ea0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	895b      	ldrh	r3, [r3, #10]
 8011db0:	2b13      	cmp	r3, #19
 8011db2:	d806      	bhi.n	8011dc2 <ip4_output_if_src+0x5e>
 8011db4:	4b3c      	ldr	r3, [pc, #240]	; (8011ea8 <ip4_output_if_src+0x144>)
 8011db6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011dba:	493e      	ldr	r1, [pc, #248]	; (8011eb4 <ip4_output_if_src+0x150>)
 8011dbc:	483c      	ldr	r0, [pc, #240]	; (8011eb0 <ip4_output_if_src+0x14c>)
 8011dbe:	f001 f8c3 	bl	8012f48 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	78fa      	ldrb	r2, [r7, #3]
 8011dc6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011dce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011dd8:	8b7b      	ldrh	r3, [r7, #26]
 8011dda:	089b      	lsrs	r3, r3, #2
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011dea:	69fb      	ldr	r3, [r7, #28]
 8011dec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011df0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	891b      	ldrh	r3, [r3, #8]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7f5 fa1f 	bl	800723a <lwip_htons>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	461a      	mov	r2, r3
 8011e00:	69fb      	ldr	r3, [r7, #28]
 8011e02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	2200      	movs	r2, #0
 8011e08:	719a      	strb	r2, [r3, #6]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011e0e:	4b2a      	ldr	r3, [pc, #168]	; (8011eb8 <ip4_output_if_src+0x154>)
 8011e10:	881b      	ldrh	r3, [r3, #0]
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7f5 fa11 	bl	800723a <lwip_htons>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011e20:	4b25      	ldr	r3, [pc, #148]	; (8011eb8 <ip4_output_if_src+0x154>)
 8011e22:	881b      	ldrh	r3, [r3, #0]
 8011e24:	3301      	adds	r3, #1
 8011e26:	b29a      	uxth	r2, r3
 8011e28:	4b23      	ldr	r3, [pc, #140]	; (8011eb8 <ip4_output_if_src+0x154>)
 8011e2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d104      	bne.n	8011e3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011e32:	4b22      	ldr	r3, [pc, #136]	; (8011ebc <ip4_output_if_src+0x158>)
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	60da      	str	r2, [r3, #12]
 8011e3a:	e003      	b.n	8011e44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	2200      	movs	r2, #0
 8011e48:	729a      	strb	r2, [r3, #10]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	72da      	strb	r2, [r3, #11]
 8011e4e:	e00f      	b.n	8011e70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	895b      	ldrh	r3, [r3, #10]
 8011e54:	2b13      	cmp	r3, #19
 8011e56:	d802      	bhi.n	8011e5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011e58:	f06f 0301 	mvn.w	r3, #1
 8011e5c:	e020      	b.n	8011ea0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	691b      	ldr	r3, [r3, #16]
 8011e68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011e6a:	f107 0314 	add.w	r3, r7, #20
 8011e6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d00c      	beq.n	8011e92 <ip4_output_if_src+0x12e>
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	891a      	ldrh	r2, [r3, #8]
 8011e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d906      	bls.n	8011e92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f000 fd53 	bl	8012934 <ip4_frag>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	e006      	b.n	8011ea0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e94:	695b      	ldr	r3, [r3, #20]
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	68f9      	ldr	r1, [r7, #12]
 8011e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e9c:	4798      	blx	r3
 8011e9e:	4603      	mov	r3, r0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3720      	adds	r7, #32
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	080167ac 	.word	0x080167ac
 8011eac:	080167e0 	.word	0x080167e0
 8011eb0:	080167ec 	.word	0x080167ec
 8011eb4:	08016814 	.word	0x08016814
 8011eb8:	20008952 	.word	0x20008952
 8011ebc:	08016c0c 	.word	0x08016c0c

08011ec0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b085      	sub	sp, #20
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed4:	d002      	beq.n	8011edc <ip4_addr_isbroadcast_u32+0x1c>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d101      	bne.n	8011ee0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011edc:	2301      	movs	r3, #1
 8011ede:	e02a      	b.n	8011f36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011ee6:	f003 0302 	and.w	r3, r3, #2
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d101      	bne.n	8011ef2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	e021      	b.n	8011f36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	3304      	adds	r3, #4
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	687a      	ldr	r2, [r7, #4]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d101      	bne.n	8011f02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	e019      	b.n	8011f36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	3304      	adds	r3, #4
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	405a      	eors	r2, r3
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	3308      	adds	r3, #8
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	4013      	ands	r3, r2
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d10d      	bne.n	8011f34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	3308      	adds	r3, #8
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	43da      	mvns	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	3308      	adds	r3, #8
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d101      	bne.n	8011f34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011f30:	2301      	movs	r3, #1
 8011f32:	e000      	b.n	8011f36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011f34:	2300      	movs	r3, #0
  }
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3714      	adds	r7, #20
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr
	...

08011f44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011f4e:	4b12      	ldr	r3, [pc, #72]	; (8011f98 <ip_reass_tmr+0x54>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011f54:	e018      	b.n	8011f88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	7fdb      	ldrb	r3, [r3, #31]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00b      	beq.n	8011f76 <ip_reass_tmr+0x32>
      r->timer--;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	7fdb      	ldrb	r3, [r3, #31]
 8011f62:	3b01      	subs	r3, #1
 8011f64:	b2da      	uxtb	r2, r3
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	60fb      	str	r3, [r7, #12]
 8011f74:	e008      	b.n	8011f88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011f80:	68b9      	ldr	r1, [r7, #8]
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 f80a 	bl	8011f9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1e3      	bne.n	8011f56 <ip_reass_tmr+0x12>
    }
  }
}
 8011f8e:	bf00      	nop
 8011f90:	bf00      	nop
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	20008954 	.word	0x20008954

08011f9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b088      	sub	sp, #32
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011faa:	683a      	ldr	r2, [r7, #0]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d105      	bne.n	8011fbe <ip_reass_free_complete_datagram+0x22>
 8011fb2:	4b45      	ldr	r3, [pc, #276]	; (80120c8 <ip_reass_free_complete_datagram+0x12c>)
 8011fb4:	22ab      	movs	r2, #171	; 0xab
 8011fb6:	4945      	ldr	r1, [pc, #276]	; (80120cc <ip_reass_free_complete_datagram+0x130>)
 8011fb8:	4845      	ldr	r0, [pc, #276]	; (80120d0 <ip_reass_free_complete_datagram+0x134>)
 8011fba:	f000 ffc5 	bl	8012f48 <iprintf>
  if (prev != NULL) {
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d00a      	beq.n	8011fda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d005      	beq.n	8011fda <ip_reass_free_complete_datagram+0x3e>
 8011fce:	4b3e      	ldr	r3, [pc, #248]	; (80120c8 <ip_reass_free_complete_datagram+0x12c>)
 8011fd0:	22ad      	movs	r2, #173	; 0xad
 8011fd2:	4940      	ldr	r1, [pc, #256]	; (80120d4 <ip_reass_free_complete_datagram+0x138>)
 8011fd4:	483e      	ldr	r0, [pc, #248]	; (80120d0 <ip_reass_free_complete_datagram+0x134>)
 8011fd6:	f000 ffb7 	bl	8012f48 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	889b      	ldrh	r3, [r3, #4]
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d12a      	bne.n	8012042 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011ffa:	69bb      	ldr	r3, [r7, #24]
 8011ffc:	6858      	ldr	r0, [r3, #4]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	3308      	adds	r3, #8
 8012002:	2214      	movs	r2, #20
 8012004:	4619      	mov	r1, r3
 8012006:	f001 f879 	bl	80130fc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801200a:	2101      	movs	r1, #1
 801200c:	69b8      	ldr	r0, [r7, #24]
 801200e:	f7ff fc29 	bl	8011864 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012012:	69b8      	ldr	r0, [r7, #24]
 8012014:	f7f6 fc34 	bl	8008880 <pbuf_clen>
 8012018:	4603      	mov	r3, r0
 801201a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801201c:	8bfa      	ldrh	r2, [r7, #30]
 801201e:	8a7b      	ldrh	r3, [r7, #18]
 8012020:	4413      	add	r3, r2
 8012022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012026:	db05      	blt.n	8012034 <ip_reass_free_complete_datagram+0x98>
 8012028:	4b27      	ldr	r3, [pc, #156]	; (80120c8 <ip_reass_free_complete_datagram+0x12c>)
 801202a:	22bc      	movs	r2, #188	; 0xbc
 801202c:	492a      	ldr	r1, [pc, #168]	; (80120d8 <ip_reass_free_complete_datagram+0x13c>)
 801202e:	4828      	ldr	r0, [pc, #160]	; (80120d0 <ip_reass_free_complete_datagram+0x134>)
 8012030:	f000 ff8a 	bl	8012f48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012034:	8bfa      	ldrh	r2, [r7, #30]
 8012036:	8a7b      	ldrh	r3, [r7, #18]
 8012038:	4413      	add	r3, r2
 801203a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801203c:	69b8      	ldr	r0, [r7, #24]
 801203e:	f7f6 fb97 	bl	8008770 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012048:	e01f      	b.n	801208a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801205a:	68f8      	ldr	r0, [r7, #12]
 801205c:	f7f6 fc10 	bl	8008880 <pbuf_clen>
 8012060:	4603      	mov	r3, r0
 8012062:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012064:	8bfa      	ldrh	r2, [r7, #30]
 8012066:	8a7b      	ldrh	r3, [r7, #18]
 8012068:	4413      	add	r3, r2
 801206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801206e:	db05      	blt.n	801207c <ip_reass_free_complete_datagram+0xe0>
 8012070:	4b15      	ldr	r3, [pc, #84]	; (80120c8 <ip_reass_free_complete_datagram+0x12c>)
 8012072:	22cc      	movs	r2, #204	; 0xcc
 8012074:	4918      	ldr	r1, [pc, #96]	; (80120d8 <ip_reass_free_complete_datagram+0x13c>)
 8012076:	4816      	ldr	r0, [pc, #88]	; (80120d0 <ip_reass_free_complete_datagram+0x134>)
 8012078:	f000 ff66 	bl	8012f48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801207c:	8bfa      	ldrh	r2, [r7, #30]
 801207e:	8a7b      	ldrh	r3, [r7, #18]
 8012080:	4413      	add	r3, r2
 8012082:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012084:	68f8      	ldr	r0, [r7, #12]
 8012086:	f7f6 fb73 	bl	8008770 <pbuf_free>
  while (p != NULL) {
 801208a:	69bb      	ldr	r3, [r7, #24]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1dc      	bne.n	801204a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012090:	6839      	ldr	r1, [r7, #0]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 f8c2 	bl	801221c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012098:	4b10      	ldr	r3, [pc, #64]	; (80120dc <ip_reass_free_complete_datagram+0x140>)
 801209a:	881b      	ldrh	r3, [r3, #0]
 801209c:	8bfa      	ldrh	r2, [r7, #30]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d905      	bls.n	80120ae <ip_reass_free_complete_datagram+0x112>
 80120a2:	4b09      	ldr	r3, [pc, #36]	; (80120c8 <ip_reass_free_complete_datagram+0x12c>)
 80120a4:	22d2      	movs	r2, #210	; 0xd2
 80120a6:	490e      	ldr	r1, [pc, #56]	; (80120e0 <ip_reass_free_complete_datagram+0x144>)
 80120a8:	4809      	ldr	r0, [pc, #36]	; (80120d0 <ip_reass_free_complete_datagram+0x134>)
 80120aa:	f000 ff4d 	bl	8012f48 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80120ae:	4b0b      	ldr	r3, [pc, #44]	; (80120dc <ip_reass_free_complete_datagram+0x140>)
 80120b0:	881a      	ldrh	r2, [r3, #0]
 80120b2:	8bfb      	ldrh	r3, [r7, #30]
 80120b4:	1ad3      	subs	r3, r2, r3
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	4b08      	ldr	r3, [pc, #32]	; (80120dc <ip_reass_free_complete_datagram+0x140>)
 80120ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80120bc:	8bfb      	ldrh	r3, [r7, #30]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3720      	adds	r7, #32
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	08016844 	.word	0x08016844
 80120cc:	08016880 	.word	0x08016880
 80120d0:	0801688c 	.word	0x0801688c
 80120d4:	080168b4 	.word	0x080168b4
 80120d8:	080168c8 	.word	0x080168c8
 80120dc:	20008958 	.word	0x20008958
 80120e0:	080168e8 	.word	0x080168e8

080120e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b08a      	sub	sp, #40	; 0x28
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80120ee:	2300      	movs	r3, #0
 80120f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80120f2:	2300      	movs	r3, #0
 80120f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80120f6:	2300      	movs	r3, #0
 80120f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80120fa:	2300      	movs	r3, #0
 80120fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80120fe:	2300      	movs	r3, #0
 8012100:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012102:	4b28      	ldr	r3, [pc, #160]	; (80121a4 <ip_reass_remove_oldest_datagram+0xc0>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012108:	e030      	b.n	801216c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210c:	695a      	ldr	r2, [r3, #20]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	429a      	cmp	r2, r3
 8012114:	d10c      	bne.n	8012130 <ip_reass_remove_oldest_datagram+0x4c>
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012118:	699a      	ldr	r2, [r3, #24]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	429a      	cmp	r2, r3
 8012120:	d106      	bne.n	8012130 <ip_reass_remove_oldest_datagram+0x4c>
 8012122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012124:	899a      	ldrh	r2, [r3, #12]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	889b      	ldrh	r3, [r3, #4]
 801212a:	b29b      	uxth	r3, r3
 801212c:	429a      	cmp	r2, r3
 801212e:	d014      	beq.n	801215a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	3301      	adds	r3, #1
 8012134:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d104      	bne.n	8012146 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	61bb      	str	r3, [r7, #24]
 8012144:	e009      	b.n	801215a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012148:	7fda      	ldrb	r2, [r3, #31]
 801214a:	6a3b      	ldr	r3, [r7, #32]
 801214c:	7fdb      	ldrb	r3, [r3, #31]
 801214e:	429a      	cmp	r2, r3
 8012150:	d803      	bhi.n	801215a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d001      	beq.n	8012166 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012164:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216e:	2b00      	cmp	r3, #0
 8012170:	d1cb      	bne.n	801210a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d008      	beq.n	801218a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012178:	69b9      	ldr	r1, [r7, #24]
 801217a:	6a38      	ldr	r0, [r7, #32]
 801217c:	f7ff ff0e 	bl	8011f9c <ip_reass_free_complete_datagram>
 8012180:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	4413      	add	r3, r2
 8012188:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801218a:	697a      	ldr	r2, [r7, #20]
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	429a      	cmp	r2, r3
 8012190:	da02      	bge.n	8012198 <ip_reass_remove_oldest_datagram+0xb4>
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	2b01      	cmp	r3, #1
 8012196:	dcac      	bgt.n	80120f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012198:	697b      	ldr	r3, [r7, #20]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3728      	adds	r7, #40	; 0x28
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	20008954 	.word	0x20008954

080121a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80121b2:	2004      	movs	r0, #4
 80121b4:	f7f5 fc96 	bl	8007ae4 <memp_malloc>
 80121b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d110      	bne.n	80121e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f7ff ff8e 	bl	80120e4 <ip_reass_remove_oldest_datagram>
 80121c8:	4602      	mov	r2, r0
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	4293      	cmp	r3, r2
 80121ce:	dc03      	bgt.n	80121d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80121d0:	2004      	movs	r0, #4
 80121d2:	f7f5 fc87 	bl	8007ae4 <memp_malloc>
 80121d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d101      	bne.n	80121e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	e016      	b.n	8012210 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80121e2:	2220      	movs	r2, #32
 80121e4:	2100      	movs	r1, #0
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f000 ff13 	bl	8013012 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	220f      	movs	r2, #15
 80121f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80121f2:	4b09      	ldr	r3, [pc, #36]	; (8012218 <ip_reass_enqueue_new_datagram+0x70>)
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80121fa:	4a07      	ldr	r2, [pc, #28]	; (8012218 <ip_reass_enqueue_new_datagram+0x70>)
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	3308      	adds	r3, #8
 8012204:	2214      	movs	r2, #20
 8012206:	6879      	ldr	r1, [r7, #4]
 8012208:	4618      	mov	r0, r3
 801220a:	f000 ff77 	bl	80130fc <memcpy>
  return ipr;
 801220e:	68fb      	ldr	r3, [r7, #12]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3710      	adds	r7, #16
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	20008954 	.word	0x20008954

0801221c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012226:	4b10      	ldr	r3, [pc, #64]	; (8012268 <ip_reass_dequeue_datagram+0x4c>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	687a      	ldr	r2, [r7, #4]
 801222c:	429a      	cmp	r2, r3
 801222e:	d104      	bne.n	801223a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	4a0c      	ldr	r2, [pc, #48]	; (8012268 <ip_reass_dequeue_datagram+0x4c>)
 8012236:	6013      	str	r3, [r2, #0]
 8012238:	e00d      	b.n	8012256 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d106      	bne.n	801224e <ip_reass_dequeue_datagram+0x32>
 8012240:	4b0a      	ldr	r3, [pc, #40]	; (801226c <ip_reass_dequeue_datagram+0x50>)
 8012242:	f240 1245 	movw	r2, #325	; 0x145
 8012246:	490a      	ldr	r1, [pc, #40]	; (8012270 <ip_reass_dequeue_datagram+0x54>)
 8012248:	480a      	ldr	r0, [pc, #40]	; (8012274 <ip_reass_dequeue_datagram+0x58>)
 801224a:	f000 fe7d 	bl	8012f48 <iprintf>
    prev->next = ipr->next;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012256:	6879      	ldr	r1, [r7, #4]
 8012258:	2004      	movs	r0, #4
 801225a:	f7f5 fc8f 	bl	8007b7c <memp_free>
}
 801225e:	bf00      	nop
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	20008954 	.word	0x20008954
 801226c:	08016844 	.word	0x08016844
 8012270:	0801690c 	.word	0x0801690c
 8012274:	0801688c 	.word	0x0801688c

08012278 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b08c      	sub	sp, #48	; 0x30
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012284:	2300      	movs	r3, #0
 8012286:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012288:	2301      	movs	r3, #1
 801228a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012292:	69fb      	ldr	r3, [r7, #28]
 8012294:	885b      	ldrh	r3, [r3, #2]
 8012296:	b29b      	uxth	r3, r3
 8012298:	4618      	mov	r0, r3
 801229a:	f7f4 ffce 	bl	800723a <lwip_htons>
 801229e:	4603      	mov	r3, r0
 80122a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80122a2:	69fb      	ldr	r3, [r7, #28]
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	f003 030f 	and.w	r3, r3, #15
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	009b      	lsls	r3, r3, #2
 80122ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80122b0:	7e7b      	ldrb	r3, [r7, #25]
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	8b7a      	ldrh	r2, [r7, #26]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d202      	bcs.n	80122c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80122ba:	f04f 33ff 	mov.w	r3, #4294967295
 80122be:	e135      	b.n	801252c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80122c0:	7e7b      	ldrb	r3, [r7, #25]
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	8b7a      	ldrh	r2, [r7, #26]
 80122c6:	1ad3      	subs	r3, r2, r3
 80122c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	88db      	ldrh	r3, [r3, #6]
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7f4 ffb2 	bl	800723a <lwip_htons>
 80122d6:	4603      	mov	r3, r0
 80122d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122dc:	b29b      	uxth	r3, r3
 80122de:	00db      	lsls	r3, r3, #3
 80122e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80122e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ea:	2200      	movs	r2, #0
 80122ec:	701a      	strb	r2, [r3, #0]
 80122ee:	2200      	movs	r2, #0
 80122f0:	705a      	strb	r2, [r3, #1]
 80122f2:	2200      	movs	r2, #0
 80122f4:	709a      	strb	r2, [r3, #2]
 80122f6:	2200      	movs	r2, #0
 80122f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80122fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fc:	8afa      	ldrh	r2, [r7, #22]
 80122fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012300:	8afa      	ldrh	r2, [r7, #22]
 8012302:	8b7b      	ldrh	r3, [r7, #26]
 8012304:	4413      	add	r3, r2
 8012306:	b29a      	uxth	r2, r3
 8012308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230e:	88db      	ldrh	r3, [r3, #6]
 8012310:	b29b      	uxth	r3, r3
 8012312:	8afa      	ldrh	r2, [r7, #22]
 8012314:	429a      	cmp	r2, r3
 8012316:	d902      	bls.n	801231e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012318:	f04f 33ff 	mov.w	r3, #4294967295
 801231c:	e106      	b.n	801252c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	627b      	str	r3, [r7, #36]	; 0x24
 8012324:	e068      	b.n	80123f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232e:	889b      	ldrh	r3, [r3, #4]
 8012330:	b29a      	uxth	r2, r3
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	889b      	ldrh	r3, [r3, #4]
 8012336:	b29b      	uxth	r3, r3
 8012338:	429a      	cmp	r2, r3
 801233a:	d235      	bcs.n	80123a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012340:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012344:	2b00      	cmp	r3, #0
 8012346:	d020      	beq.n	801238a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234a:	889b      	ldrh	r3, [r3, #4]
 801234c:	b29a      	uxth	r2, r3
 801234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012350:	88db      	ldrh	r3, [r3, #6]
 8012352:	b29b      	uxth	r3, r3
 8012354:	429a      	cmp	r2, r3
 8012356:	d307      	bcc.n	8012368 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235a:	88db      	ldrh	r3, [r3, #6]
 801235c:	b29a      	uxth	r2, r3
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	889b      	ldrh	r3, [r3, #4]
 8012362:	b29b      	uxth	r3, r3
 8012364:	429a      	cmp	r2, r3
 8012366:	d902      	bls.n	801236e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012368:	f04f 33ff 	mov.w	r3, #4294967295
 801236c:	e0de      	b.n	801252c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012370:	68ba      	ldr	r2, [r7, #8]
 8012372:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012376:	88db      	ldrh	r3, [r3, #6]
 8012378:	b29a      	uxth	r2, r3
 801237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237c:	889b      	ldrh	r3, [r3, #4]
 801237e:	b29b      	uxth	r3, r3
 8012380:	429a      	cmp	r2, r3
 8012382:	d03d      	beq.n	8012400 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012384:	2300      	movs	r3, #0
 8012386:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012388:	e03a      	b.n	8012400 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238c:	88db      	ldrh	r3, [r3, #6]
 801238e:	b29a      	uxth	r2, r3
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	889b      	ldrh	r3, [r3, #4]
 8012394:	b29b      	uxth	r3, r3
 8012396:	429a      	cmp	r2, r3
 8012398:	d902      	bls.n	80123a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801239a:	f04f 33ff 	mov.w	r3, #4294967295
 801239e:	e0c5      	b.n	801252c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	68ba      	ldr	r2, [r7, #8]
 80123a4:	605a      	str	r2, [r3, #4]
      break;
 80123a6:	e02b      	b.n	8012400 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80123a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123aa:	889b      	ldrh	r3, [r3, #4]
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	889b      	ldrh	r3, [r3, #4]
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d102      	bne.n	80123be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123b8:	f04f 33ff 	mov.w	r3, #4294967295
 80123bc:	e0b6      	b.n	801252c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80123be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c0:	889b      	ldrh	r3, [r3, #4]
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	88db      	ldrh	r3, [r3, #6]
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d202      	bcs.n	80123d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123ce:	f04f 33ff 	mov.w	r3, #4294967295
 80123d2:	e0ab      	b.n	801252c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80123d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d009      	beq.n	80123ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80123da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123dc:	88db      	ldrh	r3, [r3, #6]
 80123de:	b29a      	uxth	r2, r3
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	889b      	ldrh	r3, [r3, #4]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d001      	beq.n	80123ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80123ea:	2300      	movs	r3, #0
 80123ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80123f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d193      	bne.n	8012326 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80123fe:	e000      	b.n	8012402 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012400:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012404:	2b00      	cmp	r3, #0
 8012406:	d12d      	bne.n	8012464 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240a:	2b00      	cmp	r3, #0
 801240c:	d01c      	beq.n	8012448 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	88db      	ldrh	r3, [r3, #6]
 8012412:	b29a      	uxth	r2, r3
 8012414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012416:	889b      	ldrh	r3, [r3, #4]
 8012418:	b29b      	uxth	r3, r3
 801241a:	429a      	cmp	r2, r3
 801241c:	d906      	bls.n	801242c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801241e:	4b45      	ldr	r3, [pc, #276]	; (8012534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012420:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012424:	4944      	ldr	r1, [pc, #272]	; (8012538 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012426:	4845      	ldr	r0, [pc, #276]	; (801253c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012428:	f000 fd8e 	bl	8012f48 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	68ba      	ldr	r2, [r7, #8]
 8012430:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012434:	88db      	ldrh	r3, [r3, #6]
 8012436:	b29a      	uxth	r2, r3
 8012438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243a:	889b      	ldrh	r3, [r3, #4]
 801243c:	b29b      	uxth	r3, r3
 801243e:	429a      	cmp	r2, r3
 8012440:	d010      	beq.n	8012464 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012442:	2300      	movs	r3, #0
 8012444:	623b      	str	r3, [r7, #32]
 8012446:	e00d      	b.n	8012464 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d006      	beq.n	801245e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012450:	4b38      	ldr	r3, [pc, #224]	; (8012534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012452:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012456:	493a      	ldr	r1, [pc, #232]	; (8012540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012458:	4838      	ldr	r0, [pc, #224]	; (801253c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801245a:	f000 fd75 	bl	8012f48 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d105      	bne.n	8012476 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	7f9b      	ldrb	r3, [r3, #30]
 801246e:	f003 0301 	and.w	r3, r3, #1
 8012472:	2b00      	cmp	r3, #0
 8012474:	d059      	beq.n	801252a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012476:	6a3b      	ldr	r3, [r7, #32]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d04f      	beq.n	801251c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d006      	beq.n	8012492 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	889b      	ldrh	r3, [r3, #4]
 801248c:	b29b      	uxth	r3, r3
 801248e:	2b00      	cmp	r3, #0
 8012490:	d002      	beq.n	8012498 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012492:	2300      	movs	r3, #0
 8012494:	623b      	str	r3, [r7, #32]
 8012496:	e041      	b.n	801251c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80124a2:	e012      	b.n	80124ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80124aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ac:	88db      	ldrh	r3, [r3, #6]
 80124ae:	b29a      	uxth	r2, r3
 80124b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b2:	889b      	ldrh	r3, [r3, #4]
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d002      	beq.n	80124c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80124ba:	2300      	movs	r3, #0
 80124bc:	623b      	str	r3, [r7, #32]
            break;
 80124be:	e007      	b.n	80124d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80124c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80124c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80124ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d1e9      	bne.n	80124a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80124d0:	6a3b      	ldr	r3, [r7, #32]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d022      	beq.n	801251c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d106      	bne.n	80124ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80124de:	4b15      	ldr	r3, [pc, #84]	; (8012534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80124e0:	f240 12df 	movw	r2, #479	; 0x1df
 80124e4:	4917      	ldr	r1, [pc, #92]	; (8012544 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80124e6:	4815      	ldr	r0, [pc, #84]	; (801253c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80124e8:	f000 fd2e 	bl	8012f48 <iprintf>
          LWIP_ASSERT("sanity check",
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d106      	bne.n	8012506 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80124f8:	4b0e      	ldr	r3, [pc, #56]	; (8012534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80124fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80124fe:	4911      	ldr	r1, [pc, #68]	; (8012544 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012500:	480e      	ldr	r0, [pc, #56]	; (801253c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012502:	f000 fd21 	bl	8012f48 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d006      	beq.n	801251c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801250e:	4b09      	ldr	r3, [pc, #36]	; (8012534 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012510:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012514:	490c      	ldr	r1, [pc, #48]	; (8012548 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012516:	4809      	ldr	r0, [pc, #36]	; (801253c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012518:	f000 fd16 	bl	8012f48 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801251c:	6a3b      	ldr	r3, [r7, #32]
 801251e:	2b00      	cmp	r3, #0
 8012520:	bf14      	ite	ne
 8012522:	2301      	movne	r3, #1
 8012524:	2300      	moveq	r3, #0
 8012526:	b2db      	uxtb	r3, r3
 8012528:	e000      	b.n	801252c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	3730      	adds	r7, #48	; 0x30
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	08016844 	.word	0x08016844
 8012538:	08016928 	.word	0x08016928
 801253c:	0801688c 	.word	0x0801688c
 8012540:	08016948 	.word	0x08016948
 8012544:	08016980 	.word	0x08016980
 8012548:	08016990 	.word	0x08016990

0801254c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b08e      	sub	sp, #56	; 0x38
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	f003 030f 	and.w	r3, r3, #15
 8012562:	b2db      	uxtb	r3, r3
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	b2db      	uxtb	r3, r3
 8012568:	2b14      	cmp	r3, #20
 801256a:	f040 8171 	bne.w	8012850 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012570:	88db      	ldrh	r3, [r3, #6]
 8012572:	b29b      	uxth	r3, r3
 8012574:	4618      	mov	r0, r3
 8012576:	f7f4 fe60 	bl	800723a <lwip_htons>
 801257a:	4603      	mov	r3, r0
 801257c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012580:	b29b      	uxth	r3, r3
 8012582:	00db      	lsls	r3, r3, #3
 8012584:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012588:	885b      	ldrh	r3, [r3, #2]
 801258a:	b29b      	uxth	r3, r3
 801258c:	4618      	mov	r0, r3
 801258e:	f7f4 fe54 	bl	800723a <lwip_htons>
 8012592:	4603      	mov	r3, r0
 8012594:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	f003 030f 	and.w	r3, r3, #15
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80125a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125ae:	429a      	cmp	r2, r3
 80125b0:	f0c0 8150 	bcc.w	8012854 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80125b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125bc:	1ad3      	subs	r3, r2, r3
 80125be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f7f6 f95d 	bl	8008880 <pbuf_clen>
 80125c6:	4603      	mov	r3, r0
 80125c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80125ca:	4b8c      	ldr	r3, [pc, #560]	; (80127fc <ip4_reass+0x2b0>)
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	461a      	mov	r2, r3
 80125d0:	8c3b      	ldrh	r3, [r7, #32]
 80125d2:	4413      	add	r3, r2
 80125d4:	2b0a      	cmp	r3, #10
 80125d6:	dd10      	ble.n	80125fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80125d8:	8c3b      	ldrh	r3, [r7, #32]
 80125da:	4619      	mov	r1, r3
 80125dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125de:	f7ff fd81 	bl	80120e4 <ip_reass_remove_oldest_datagram>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	f000 8137 	beq.w	8012858 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80125ea:	4b84      	ldr	r3, [pc, #528]	; (80127fc <ip4_reass+0x2b0>)
 80125ec:	881b      	ldrh	r3, [r3, #0]
 80125ee:	461a      	mov	r2, r3
 80125f0:	8c3b      	ldrh	r3, [r7, #32]
 80125f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80125f4:	2b0a      	cmp	r3, #10
 80125f6:	f300 812f 	bgt.w	8012858 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80125fa:	4b81      	ldr	r3, [pc, #516]	; (8012800 <ip4_reass+0x2b4>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	633b      	str	r3, [r7, #48]	; 0x30
 8012600:	e015      	b.n	801262e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012604:	695a      	ldr	r2, [r3, #20]
 8012606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012608:	68db      	ldr	r3, [r3, #12]
 801260a:	429a      	cmp	r2, r3
 801260c:	d10c      	bne.n	8012628 <ip4_reass+0xdc>
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	699a      	ldr	r2, [r3, #24]
 8012612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	429a      	cmp	r2, r3
 8012618:	d106      	bne.n	8012628 <ip4_reass+0xdc>
 801261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261c:	899a      	ldrh	r2, [r3, #12]
 801261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012620:	889b      	ldrh	r3, [r3, #4]
 8012622:	b29b      	uxth	r3, r3
 8012624:	429a      	cmp	r2, r3
 8012626:	d006      	beq.n	8012636 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	633b      	str	r3, [r7, #48]	; 0x30
 801262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012630:	2b00      	cmp	r3, #0
 8012632:	d1e6      	bne.n	8012602 <ip4_reass+0xb6>
 8012634:	e000      	b.n	8012638 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012636:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263a:	2b00      	cmp	r3, #0
 801263c:	d109      	bne.n	8012652 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801263e:	8c3b      	ldrh	r3, [r7, #32]
 8012640:	4619      	mov	r1, r3
 8012642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012644:	f7ff fdb0 	bl	80121a8 <ip_reass_enqueue_new_datagram>
 8012648:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264c:	2b00      	cmp	r3, #0
 801264e:	d11c      	bne.n	801268a <ip4_reass+0x13e>
      goto nullreturn;
 8012650:	e105      	b.n	801285e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012654:	88db      	ldrh	r3, [r3, #6]
 8012656:	b29b      	uxth	r3, r3
 8012658:	4618      	mov	r0, r3
 801265a:	f7f4 fdee 	bl	800723a <lwip_htons>
 801265e:	4603      	mov	r3, r0
 8012660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012664:	2b00      	cmp	r3, #0
 8012666:	d110      	bne.n	801268a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266a:	89db      	ldrh	r3, [r3, #14]
 801266c:	4618      	mov	r0, r3
 801266e:	f7f4 fde4 	bl	800723a <lwip_htons>
 8012672:	4603      	mov	r3, r0
 8012674:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012678:	2b00      	cmp	r3, #0
 801267a:	d006      	beq.n	801268a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267e:	3308      	adds	r3, #8
 8012680:	2214      	movs	r2, #20
 8012682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012684:	4618      	mov	r0, r3
 8012686:	f000 fd39 	bl	80130fc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268c:	88db      	ldrh	r3, [r3, #6]
 801268e:	b29b      	uxth	r3, r3
 8012690:	f003 0320 	and.w	r3, r3, #32
 8012694:	2b00      	cmp	r3, #0
 8012696:	bf0c      	ite	eq
 8012698:	2301      	moveq	r3, #1
 801269a:	2300      	movne	r3, #0
 801269c:	b2db      	uxtb	r3, r3
 801269e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d00e      	beq.n	80126c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80126a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80126a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126aa:	4413      	add	r3, r2
 80126ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80126ae:	8b7a      	ldrh	r2, [r7, #26]
 80126b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80126b2:	429a      	cmp	r2, r3
 80126b4:	f0c0 80a0 	bcc.w	80127f8 <ip4_reass+0x2ac>
 80126b8:	8b7b      	ldrh	r3, [r7, #26]
 80126ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80126be:	4293      	cmp	r3, r2
 80126c0:	f200 809a 	bhi.w	80127f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80126c4:	69fa      	ldr	r2, [r7, #28]
 80126c6:	6879      	ldr	r1, [r7, #4]
 80126c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ca:	f7ff fdd5 	bl	8012278 <ip_reass_chain_frag_into_datagram_and_validate>
 80126ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126d6:	f000 809b 	beq.w	8012810 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80126da:	4b48      	ldr	r3, [pc, #288]	; (80127fc <ip4_reass+0x2b0>)
 80126dc:	881a      	ldrh	r2, [r3, #0]
 80126de:	8c3b      	ldrh	r3, [r7, #32]
 80126e0:	4413      	add	r3, r2
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	4b45      	ldr	r3, [pc, #276]	; (80127fc <ip4_reass+0x2b0>)
 80126e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00d      	beq.n	801270a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80126ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80126f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126f2:	4413      	add	r3, r2
 80126f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80126f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f8:	8a7a      	ldrh	r2, [r7, #18]
 80126fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80126fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fe:	7f9b      	ldrb	r3, [r3, #30]
 8012700:	f043 0301 	orr.w	r3, r3, #1
 8012704:	b2da      	uxtb	r2, r3
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	2b01      	cmp	r3, #1
 801270e:	d171      	bne.n	80127f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012712:	8b9b      	ldrh	r3, [r3, #28]
 8012714:	3314      	adds	r3, #20
 8012716:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	685b      	ldr	r3, [r3, #4]
 8012728:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272c:	3308      	adds	r3, #8
 801272e:	2214      	movs	r2, #20
 8012730:	4619      	mov	r1, r3
 8012732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012734:	f000 fce2 	bl	80130fc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012738:	8a3b      	ldrh	r3, [r7, #16]
 801273a:	4618      	mov	r0, r3
 801273c:	f7f4 fd7d 	bl	800723a <lwip_htons>
 8012740:	4603      	mov	r3, r0
 8012742:	461a      	mov	r2, r3
 8012744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012746:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274a:	2200      	movs	r2, #0
 801274c:	719a      	strb	r2, [r3, #6]
 801274e:	2200      	movs	r2, #0
 8012750:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012754:	2200      	movs	r2, #0
 8012756:	729a      	strb	r2, [r3, #10]
 8012758:	2200      	movs	r2, #0
 801275a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012762:	e00d      	b.n	8012780 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801276a:	2114      	movs	r1, #20
 801276c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801276e:	f7f5 ff79 	bl	8008664 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7f6 f8bd 	bl	80088f4 <pbuf_cat>
      r = iprh->next_pbuf;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1ee      	bne.n	8012764 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012786:	4b1e      	ldr	r3, [pc, #120]	; (8012800 <ip4_reass+0x2b4>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801278c:	429a      	cmp	r2, r3
 801278e:	d102      	bne.n	8012796 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012790:	2300      	movs	r3, #0
 8012792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012794:	e010      	b.n	80127b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012796:	4b1a      	ldr	r3, [pc, #104]	; (8012800 <ip4_reass+0x2b4>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801279c:	e007      	b.n	80127ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d006      	beq.n	80127b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d1f4      	bne.n	801279e <ip4_reass+0x252>
 80127b4:	e000      	b.n	80127b8 <ip4_reass+0x26c>
          break;
 80127b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80127b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127bc:	f7ff fd2e 	bl	801221c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7f6 f85d 	bl	8008880 <pbuf_clen>
 80127c6:	4603      	mov	r3, r0
 80127c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80127ca:	4b0c      	ldr	r3, [pc, #48]	; (80127fc <ip4_reass+0x2b0>)
 80127cc:	881b      	ldrh	r3, [r3, #0]
 80127ce:	8c3a      	ldrh	r2, [r7, #32]
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d906      	bls.n	80127e2 <ip4_reass+0x296>
 80127d4:	4b0b      	ldr	r3, [pc, #44]	; (8012804 <ip4_reass+0x2b8>)
 80127d6:	f240 229b 	movw	r2, #667	; 0x29b
 80127da:	490b      	ldr	r1, [pc, #44]	; (8012808 <ip4_reass+0x2bc>)
 80127dc:	480b      	ldr	r0, [pc, #44]	; (801280c <ip4_reass+0x2c0>)
 80127de:	f000 fbb3 	bl	8012f48 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80127e2:	4b06      	ldr	r3, [pc, #24]	; (80127fc <ip4_reass+0x2b0>)
 80127e4:	881a      	ldrh	r2, [r3, #0]
 80127e6:	8c3b      	ldrh	r3, [r7, #32]
 80127e8:	1ad3      	subs	r3, r2, r3
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	4b03      	ldr	r3, [pc, #12]	; (80127fc <ip4_reass+0x2b0>)
 80127ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	e038      	b.n	8012866 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80127f4:	2300      	movs	r3, #0
 80127f6:	e036      	b.n	8012866 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80127f8:	bf00      	nop
 80127fa:	e00a      	b.n	8012812 <ip4_reass+0x2c6>
 80127fc:	20008958 	.word	0x20008958
 8012800:	20008954 	.word	0x20008954
 8012804:	08016844 	.word	0x08016844
 8012808:	080169b4 	.word	0x080169b4
 801280c:	0801688c 	.word	0x0801688c
    goto nullreturn_ipr;
 8012810:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012814:	2b00      	cmp	r3, #0
 8012816:	d106      	bne.n	8012826 <ip4_reass+0x2da>
 8012818:	4b15      	ldr	r3, [pc, #84]	; (8012870 <ip4_reass+0x324>)
 801281a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801281e:	4915      	ldr	r1, [pc, #84]	; (8012874 <ip4_reass+0x328>)
 8012820:	4815      	ldr	r0, [pc, #84]	; (8012878 <ip4_reass+0x32c>)
 8012822:	f000 fb91 	bl	8012f48 <iprintf>
  if (ipr->p == NULL) {
 8012826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d116      	bne.n	801285c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801282e:	4b13      	ldr	r3, [pc, #76]	; (801287c <ip4_reass+0x330>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012834:	429a      	cmp	r2, r3
 8012836:	d006      	beq.n	8012846 <ip4_reass+0x2fa>
 8012838:	4b0d      	ldr	r3, [pc, #52]	; (8012870 <ip4_reass+0x324>)
 801283a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801283e:	4910      	ldr	r1, [pc, #64]	; (8012880 <ip4_reass+0x334>)
 8012840:	480d      	ldr	r0, [pc, #52]	; (8012878 <ip4_reass+0x32c>)
 8012842:	f000 fb81 	bl	8012f48 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012846:	2100      	movs	r1, #0
 8012848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801284a:	f7ff fce7 	bl	801221c <ip_reass_dequeue_datagram>
 801284e:	e006      	b.n	801285e <ip4_reass+0x312>
    goto nullreturn;
 8012850:	bf00      	nop
 8012852:	e004      	b.n	801285e <ip4_reass+0x312>
    goto nullreturn;
 8012854:	bf00      	nop
 8012856:	e002      	b.n	801285e <ip4_reass+0x312>
      goto nullreturn;
 8012858:	bf00      	nop
 801285a:	e000      	b.n	801285e <ip4_reass+0x312>
  }

nullreturn:
 801285c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f7f5 ff86 	bl	8008770 <pbuf_free>
  return NULL;
 8012864:	2300      	movs	r3, #0
}
 8012866:	4618      	mov	r0, r3
 8012868:	3738      	adds	r7, #56	; 0x38
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	08016844 	.word	0x08016844
 8012874:	080169d0 	.word	0x080169d0
 8012878:	0801688c 	.word	0x0801688c
 801287c:	20008954 	.word	0x20008954
 8012880:	080169dc 	.word	0x080169dc

08012884 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012888:	2005      	movs	r0, #5
 801288a:	f7f5 f92b 	bl	8007ae4 <memp_malloc>
 801288e:	4603      	mov	r3, r0
}
 8012890:	4618      	mov	r0, r3
 8012892:	bd80      	pop	{r7, pc}

08012894 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80128a2:	4b07      	ldr	r3, [pc, #28]	; (80128c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80128a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80128a8:	4906      	ldr	r1, [pc, #24]	; (80128c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80128aa:	4807      	ldr	r0, [pc, #28]	; (80128c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80128ac:	f000 fb4c 	bl	8012f48 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80128b0:	6879      	ldr	r1, [r7, #4]
 80128b2:	2005      	movs	r0, #5
 80128b4:	f7f5 f962 	bl	8007b7c <memp_free>
}
 80128b8:	bf00      	nop
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	08016844 	.word	0x08016844
 80128c4:	080169fc 	.word	0x080169fc
 80128c8:	0801688c 	.word	0x0801688c

080128cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d106      	bne.n	80128ec <ipfrag_free_pbuf_custom+0x20>
 80128de:	4b11      	ldr	r3, [pc, #68]	; (8012924 <ipfrag_free_pbuf_custom+0x58>)
 80128e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80128e4:	4910      	ldr	r1, [pc, #64]	; (8012928 <ipfrag_free_pbuf_custom+0x5c>)
 80128e6:	4811      	ldr	r0, [pc, #68]	; (801292c <ipfrag_free_pbuf_custom+0x60>)
 80128e8:	f000 fb2e 	bl	8012f48 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d006      	beq.n	8012902 <ipfrag_free_pbuf_custom+0x36>
 80128f4:	4b0b      	ldr	r3, [pc, #44]	; (8012924 <ipfrag_free_pbuf_custom+0x58>)
 80128f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80128fa:	490d      	ldr	r1, [pc, #52]	; (8012930 <ipfrag_free_pbuf_custom+0x64>)
 80128fc:	480b      	ldr	r0, [pc, #44]	; (801292c <ipfrag_free_pbuf_custom+0x60>)
 80128fe:	f000 fb23 	bl	8012f48 <iprintf>
  if (pcr->original != NULL) {
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	695b      	ldr	r3, [r3, #20]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d004      	beq.n	8012914 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	695b      	ldr	r3, [r3, #20]
 801290e:	4618      	mov	r0, r3
 8012910:	f7f5 ff2e 	bl	8008770 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012914:	68f8      	ldr	r0, [r7, #12]
 8012916:	f7ff ffbd 	bl	8012894 <ip_frag_free_pbuf_custom_ref>
}
 801291a:	bf00      	nop
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	08016844 	.word	0x08016844
 8012928:	08016a08 	.word	0x08016a08
 801292c:	0801688c 	.word	0x0801688c
 8012930:	08016a14 	.word	0x08016a14

08012934 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b094      	sub	sp, #80	; 0x50
 8012938:	af02      	add	r7, sp, #8
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012940:	2300      	movs	r3, #0
 8012942:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801294a:	3b14      	subs	r3, #20
 801294c:	2b00      	cmp	r3, #0
 801294e:	da00      	bge.n	8012952 <ip4_frag+0x1e>
 8012950:	3307      	adds	r3, #7
 8012952:	10db      	asrs	r3, r3, #3
 8012954:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012956:	2314      	movs	r3, #20
 8012958:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012962:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	f003 030f 	and.w	r3, r3, #15
 801296c:	b2db      	uxtb	r3, r3
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	b2db      	uxtb	r3, r3
 8012972:	2b14      	cmp	r3, #20
 8012974:	d002      	beq.n	801297c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012976:	f06f 0305 	mvn.w	r3, #5
 801297a:	e110      	b.n	8012b9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	895b      	ldrh	r3, [r3, #10]
 8012980:	2b13      	cmp	r3, #19
 8012982:	d809      	bhi.n	8012998 <ip4_frag+0x64>
 8012984:	4b88      	ldr	r3, [pc, #544]	; (8012ba8 <ip4_frag+0x274>)
 8012986:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801298a:	4988      	ldr	r1, [pc, #544]	; (8012bac <ip4_frag+0x278>)
 801298c:	4888      	ldr	r0, [pc, #544]	; (8012bb0 <ip4_frag+0x27c>)
 801298e:	f000 fadb 	bl	8012f48 <iprintf>
 8012992:	f06f 0305 	mvn.w	r3, #5
 8012996:	e102      	b.n	8012b9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299a:	88db      	ldrh	r3, [r3, #6]
 801299c:	b29b      	uxth	r3, r3
 801299e:	4618      	mov	r0, r3
 80129a0:	f7f4 fc4b 	bl	800723a <lwip_htons>
 80129a4:	4603      	mov	r3, r0
 80129a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80129a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80129aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80129b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80129b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	891b      	ldrh	r3, [r3, #8]
 80129be:	3b14      	subs	r3, #20
 80129c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80129c4:	e0e1      	b.n	8012b8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80129c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129c8:	00db      	lsls	r3, r3, #3
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129d0:	4293      	cmp	r3, r2
 80129d2:	bf28      	it	cs
 80129d4:	4613      	movcs	r3, r2
 80129d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80129d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129dc:	2114      	movs	r1, #20
 80129de:	200e      	movs	r0, #14
 80129e0:	f7f5 fbe2 	bl	80081a8 <pbuf_alloc>
 80129e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f000 80d5 	beq.w	8012b98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80129ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f0:	895b      	ldrh	r3, [r3, #10]
 80129f2:	2b13      	cmp	r3, #19
 80129f4:	d806      	bhi.n	8012a04 <ip4_frag+0xd0>
 80129f6:	4b6c      	ldr	r3, [pc, #432]	; (8012ba8 <ip4_frag+0x274>)
 80129f8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80129fc:	496d      	ldr	r1, [pc, #436]	; (8012bb4 <ip4_frag+0x280>)
 80129fe:	486c      	ldr	r0, [pc, #432]	; (8012bb0 <ip4_frag+0x27c>)
 8012a00:	f000 faa2 	bl	8012f48 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	2214      	movs	r2, #20
 8012a0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f000 fb75 	bl	80130fc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012a18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012a1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012a1e:	e064      	b.n	8012aea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	895a      	ldrh	r2, [r3, #10]
 8012a24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a26:	1ad3      	subs	r3, r2, r3
 8012a28:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	895b      	ldrh	r3, [r3, #10]
 8012a2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d906      	bls.n	8012a42 <ip4_frag+0x10e>
 8012a34:	4b5c      	ldr	r3, [pc, #368]	; (8012ba8 <ip4_frag+0x274>)
 8012a36:	f240 322d 	movw	r2, #813	; 0x32d
 8012a3a:	495f      	ldr	r1, [pc, #380]	; (8012bb8 <ip4_frag+0x284>)
 8012a3c:	485c      	ldr	r0, [pc, #368]	; (8012bb0 <ip4_frag+0x27c>)
 8012a3e:	f000 fa83 	bl	8012f48 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012a42:	8bfa      	ldrh	r2, [r7, #30]
 8012a44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	bf28      	it	cs
 8012a4c:	4613      	movcs	r3, r2
 8012a4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012a52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d105      	bne.n	8012a66 <ip4_frag+0x132>
        poff = 0;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	60fb      	str	r3, [r7, #12]
        continue;
 8012a64:	e041      	b.n	8012aea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012a66:	f7ff ff0d 	bl	8012884 <ip_frag_alloc_pbuf_custom_ref>
 8012a6a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d103      	bne.n	8012a7a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a74:	f7f5 fe7c 	bl	8008770 <pbuf_free>
        goto memerr;
 8012a78:	e08f      	b.n	8012b9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012a7a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012a80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a82:	4413      	add	r3, r2
 8012a84:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012a88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012a8c:	9201      	str	r2, [sp, #4]
 8012a8e:	9300      	str	r3, [sp, #0]
 8012a90:	4603      	mov	r3, r0
 8012a92:	2241      	movs	r2, #65	; 0x41
 8012a94:	2000      	movs	r0, #0
 8012a96:	f7f5 fcb1 	bl	80083fc <pbuf_alloced_custom>
 8012a9a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d106      	bne.n	8012ab0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012aa2:	69b8      	ldr	r0, [r7, #24]
 8012aa4:	f7ff fef6 	bl	8012894 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012aaa:	f7f5 fe61 	bl	8008770 <pbuf_free>
        goto memerr;
 8012aae:	e074      	b.n	8012b9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f7f5 fefd 	bl	80088b0 <pbuf_ref>
      pcr->original = p;
 8012ab6:	69bb      	ldr	r3, [r7, #24]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012abc:	69bb      	ldr	r3, [r7, #24]
 8012abe:	4a3f      	ldr	r2, [pc, #252]	; (8012bbc <ip4_frag+0x288>)
 8012ac0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012ac2:	6979      	ldr	r1, [r7, #20]
 8012ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ac6:	f7f5 ff15 	bl	80088f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012aca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012ace:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012ad2:	1ad3      	subs	r3, r2, r3
 8012ad4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012ad8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d004      	beq.n	8012aea <ip4_frag+0x1b6>
        poff = 0;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012aea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d196      	bne.n	8012a20 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012af2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012af4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012af8:	4413      	add	r3, r2
 8012afa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b00:	f1a3 0213 	sub.w	r2, r3, #19
 8012b04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	bfcc      	ite	gt
 8012b0c:	2301      	movgt	r3, #1
 8012b0e:	2300      	movle	r3, #0
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012b1e:	6a3b      	ldr	r3, [r7, #32]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d002      	beq.n	8012b2a <ip4_frag+0x1f6>
 8012b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d003      	beq.n	8012b32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012b2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012b30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012b32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7f4 fb80 	bl	800723a <lwip_htons>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b44:	3314      	adds	r3, #20
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7f4 fb76 	bl	800723a <lwip_htons>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	461a      	mov	r2, r3
 8012b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	2200      	movs	r2, #0
 8012b5a:	729a      	strb	r2, [r3, #10]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	695b      	ldr	r3, [r3, #20]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b68:	68b8      	ldr	r0, [r7, #8]
 8012b6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b6e:	f7f5 fdff 	bl	8008770 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012b72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b78:	1ad3      	subs	r3, r2, r3
 8012b7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012b7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012b82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b84:	4413      	add	r3, r2
 8012b86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012b8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f47f af19 	bne.w	80129c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012b94:	2300      	movs	r3, #0
 8012b96:	e002      	b.n	8012b9e <ip4_frag+0x26a>
      goto memerr;
 8012b98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3748      	adds	r7, #72	; 0x48
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	08016844 	.word	0x08016844
 8012bac:	08016a20 	.word	0x08016a20
 8012bb0:	0801688c 	.word	0x0801688c
 8012bb4:	08016a3c 	.word	0x08016a3c
 8012bb8:	08016a5c 	.word	0x08016a5c
 8012bbc:	080128cd 	.word	0x080128cd

08012bc0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b086      	sub	sp, #24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012bca:	230e      	movs	r3, #14
 8012bcc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	895b      	ldrh	r3, [r3, #10]
 8012bd2:	2b0e      	cmp	r3, #14
 8012bd4:	d96e      	bls.n	8012cb4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	7bdb      	ldrb	r3, [r3, #15]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d106      	bne.n	8012bec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012be4:	3301      	adds	r3, #1
 8012be6:	b2da      	uxtb	r2, r3
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	7b1a      	ldrb	r2, [r3, #12]
 8012bf6:	7b5b      	ldrb	r3, [r3, #13]
 8012bf8:	021b      	lsls	r3, r3, #8
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	f003 0301 	and.w	r3, r3, #1
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d023      	beq.n	8012c52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d10f      	bne.n	8012c32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	785b      	ldrb	r3, [r3, #1]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d11b      	bne.n	8012c52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c1e:	2b5e      	cmp	r3, #94	; 0x5e
 8012c20:	d117      	bne.n	8012c52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	7b5b      	ldrb	r3, [r3, #13]
 8012c26:	f043 0310 	orr.w	r3, r3, #16
 8012c2a:	b2da      	uxtb	r2, r3
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	735a      	strb	r2, [r3, #13]
 8012c30:	e00f      	b.n	8012c52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	2206      	movs	r2, #6
 8012c36:	4928      	ldr	r1, [pc, #160]	; (8012cd8 <ethernet_input+0x118>)
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f000 f9da 	bl	8012ff2 <memcmp>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d106      	bne.n	8012c52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	7b5b      	ldrb	r3, [r3, #13]
 8012c48:	f043 0308 	orr.w	r3, r3, #8
 8012c4c:	b2da      	uxtb	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012c52:	89fb      	ldrh	r3, [r7, #14]
 8012c54:	2b08      	cmp	r3, #8
 8012c56:	d003      	beq.n	8012c60 <ethernet_input+0xa0>
 8012c58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012c5c:	d014      	beq.n	8012c88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012c5e:	e032      	b.n	8012cc6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c66:	f003 0308 	and.w	r3, r3, #8
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d024      	beq.n	8012cb8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012c6e:	8afb      	ldrh	r3, [r7, #22]
 8012c70:	4619      	mov	r1, r3
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7f5 fcf6 	bl	8008664 <pbuf_remove_header>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d11e      	bne.n	8012cbc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012c7e:	6839      	ldr	r1, [r7, #0]
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7fe ff03 	bl	8011a8c <ip4_input>
      break;
 8012c86:	e013      	b.n	8012cb0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c8e:	f003 0308 	and.w	r3, r3, #8
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d014      	beq.n	8012cc0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012c96:	8afb      	ldrh	r3, [r7, #22]
 8012c98:	4619      	mov	r1, r3
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f7f5 fce2 	bl	8008664 <pbuf_remove_header>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d10e      	bne.n	8012cc4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012ca6:	6839      	ldr	r1, [r7, #0]
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7fe f89f 	bl	8010dec <etharp_input>
      break;
 8012cae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	e00c      	b.n	8012cce <ethernet_input+0x10e>
    goto free_and_return;
 8012cb4:	bf00      	nop
 8012cb6:	e006      	b.n	8012cc6 <ethernet_input+0x106>
        goto free_and_return;
 8012cb8:	bf00      	nop
 8012cba:	e004      	b.n	8012cc6 <ethernet_input+0x106>
        goto free_and_return;
 8012cbc:	bf00      	nop
 8012cbe:	e002      	b.n	8012cc6 <ethernet_input+0x106>
        goto free_and_return;
 8012cc0:	bf00      	nop
 8012cc2:	e000      	b.n	8012cc6 <ethernet_input+0x106>
        goto free_and_return;
 8012cc4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7f5 fd52 	bl	8008770 <pbuf_free>
  return ERR_OK;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3718      	adds	r7, #24
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	08016c14 	.word	0x08016c14

08012cdc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b086      	sub	sp, #24
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	607a      	str	r2, [r7, #4]
 8012ce8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012cea:	8c3b      	ldrh	r3, [r7, #32]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f4 faa4 	bl	800723a <lwip_htons>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012cf6:	210e      	movs	r1, #14
 8012cf8:	68b8      	ldr	r0, [r7, #8]
 8012cfa:	f7f5 fca3 	bl	8008644 <pbuf_add_header>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d125      	bne.n	8012d50 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	8afa      	ldrh	r2, [r7, #22]
 8012d0e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	2206      	movs	r2, #6
 8012d14:	6839      	ldr	r1, [r7, #0]
 8012d16:	4618      	mov	r0, r3
 8012d18:	f000 f9f0 	bl	80130fc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	3306      	adds	r3, #6
 8012d20:	2206      	movs	r2, #6
 8012d22:	6879      	ldr	r1, [r7, #4]
 8012d24:	4618      	mov	r0, r3
 8012d26:	f000 f9e9 	bl	80130fc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d30:	2b06      	cmp	r3, #6
 8012d32:	d006      	beq.n	8012d42 <ethernet_output+0x66>
 8012d34:	4b0a      	ldr	r3, [pc, #40]	; (8012d60 <ethernet_output+0x84>)
 8012d36:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012d3a:	490a      	ldr	r1, [pc, #40]	; (8012d64 <ethernet_output+0x88>)
 8012d3c:	480a      	ldr	r0, [pc, #40]	; (8012d68 <ethernet_output+0x8c>)
 8012d3e:	f000 f903 	bl	8012f48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	699b      	ldr	r3, [r3, #24]
 8012d46:	68b9      	ldr	r1, [r7, #8]
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	4798      	blx	r3
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	e002      	b.n	8012d56 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012d50:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012d52:	f06f 0301 	mvn.w	r3, #1
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3718      	adds	r7, #24
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	08016a6c 	.word	0x08016a6c
 8012d64:	08016aa4 	.word	0x08016aa4
 8012d68:	08016ad8 	.word	0x08016ad8

08012d6c <rand>:
 8012d6c:	4b16      	ldr	r3, [pc, #88]	; (8012dc8 <rand+0x5c>)
 8012d6e:	b510      	push	{r4, lr}
 8012d70:	681c      	ldr	r4, [r3, #0]
 8012d72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012d74:	b9b3      	cbnz	r3, 8012da4 <rand+0x38>
 8012d76:	2018      	movs	r0, #24
 8012d78:	f000 fa38 	bl	80131ec <malloc>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	6320      	str	r0, [r4, #48]	; 0x30
 8012d80:	b920      	cbnz	r0, 8012d8c <rand+0x20>
 8012d82:	4b12      	ldr	r3, [pc, #72]	; (8012dcc <rand+0x60>)
 8012d84:	4812      	ldr	r0, [pc, #72]	; (8012dd0 <rand+0x64>)
 8012d86:	2152      	movs	r1, #82	; 0x52
 8012d88:	f000 f9c6 	bl	8013118 <__assert_func>
 8012d8c:	4911      	ldr	r1, [pc, #68]	; (8012dd4 <rand+0x68>)
 8012d8e:	4b12      	ldr	r3, [pc, #72]	; (8012dd8 <rand+0x6c>)
 8012d90:	e9c0 1300 	strd	r1, r3, [r0]
 8012d94:	4b11      	ldr	r3, [pc, #68]	; (8012ddc <rand+0x70>)
 8012d96:	6083      	str	r3, [r0, #8]
 8012d98:	230b      	movs	r3, #11
 8012d9a:	8183      	strh	r3, [r0, #12]
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	2001      	movs	r0, #1
 8012da0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012da4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012da6:	480e      	ldr	r0, [pc, #56]	; (8012de0 <rand+0x74>)
 8012da8:	690b      	ldr	r3, [r1, #16]
 8012daa:	694c      	ldr	r4, [r1, #20]
 8012dac:	4a0d      	ldr	r2, [pc, #52]	; (8012de4 <rand+0x78>)
 8012dae:	4358      	muls	r0, r3
 8012db0:	fb02 0004 	mla	r0, r2, r4, r0
 8012db4:	fba3 3202 	umull	r3, r2, r3, r2
 8012db8:	3301      	adds	r3, #1
 8012dba:	eb40 0002 	adc.w	r0, r0, r2
 8012dbe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012dc2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012dc6:	bd10      	pop	{r4, pc}
 8012dc8:	20000070 	.word	0x20000070
 8012dcc:	08016c22 	.word	0x08016c22
 8012dd0:	08016c39 	.word	0x08016c39
 8012dd4:	abcd330e 	.word	0xabcd330e
 8012dd8:	e66d1234 	.word	0xe66d1234
 8012ddc:	0005deec 	.word	0x0005deec
 8012de0:	5851f42d 	.word	0x5851f42d
 8012de4:	4c957f2d 	.word	0x4c957f2d

08012de8 <std>:
 8012de8:	2300      	movs	r3, #0
 8012dea:	b510      	push	{r4, lr}
 8012dec:	4604      	mov	r4, r0
 8012dee:	e9c0 3300 	strd	r3, r3, [r0]
 8012df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012df6:	6083      	str	r3, [r0, #8]
 8012df8:	8181      	strh	r1, [r0, #12]
 8012dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8012dfc:	81c2      	strh	r2, [r0, #14]
 8012dfe:	6183      	str	r3, [r0, #24]
 8012e00:	4619      	mov	r1, r3
 8012e02:	2208      	movs	r2, #8
 8012e04:	305c      	adds	r0, #92	; 0x5c
 8012e06:	f000 f904 	bl	8013012 <memset>
 8012e0a:	4b05      	ldr	r3, [pc, #20]	; (8012e20 <std+0x38>)
 8012e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8012e0e:	4b05      	ldr	r3, [pc, #20]	; (8012e24 <std+0x3c>)
 8012e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e12:	4b05      	ldr	r3, [pc, #20]	; (8012e28 <std+0x40>)
 8012e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e16:	4b05      	ldr	r3, [pc, #20]	; (8012e2c <std+0x44>)
 8012e18:	6224      	str	r4, [r4, #32]
 8012e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8012e1c:	bd10      	pop	{r4, pc}
 8012e1e:	bf00      	nop
 8012e20:	08012f6d 	.word	0x08012f6d
 8012e24:	08012f8f 	.word	0x08012f8f
 8012e28:	08012fc7 	.word	0x08012fc7
 8012e2c:	08012feb 	.word	0x08012feb

08012e30 <stdio_exit_handler>:
 8012e30:	4a02      	ldr	r2, [pc, #8]	; (8012e3c <stdio_exit_handler+0xc>)
 8012e32:	4903      	ldr	r1, [pc, #12]	; (8012e40 <stdio_exit_handler+0x10>)
 8012e34:	4803      	ldr	r0, [pc, #12]	; (8012e44 <stdio_exit_handler+0x14>)
 8012e36:	f000 b869 	b.w	8012f0c <_fwalk_sglue>
 8012e3a:	bf00      	nop
 8012e3c:	20000018 	.word	0x20000018
 8012e40:	08013a09 	.word	0x08013a09
 8012e44:	20000024 	.word	0x20000024

08012e48 <cleanup_stdio>:
 8012e48:	6841      	ldr	r1, [r0, #4]
 8012e4a:	4b0c      	ldr	r3, [pc, #48]	; (8012e7c <cleanup_stdio+0x34>)
 8012e4c:	4299      	cmp	r1, r3
 8012e4e:	b510      	push	{r4, lr}
 8012e50:	4604      	mov	r4, r0
 8012e52:	d001      	beq.n	8012e58 <cleanup_stdio+0x10>
 8012e54:	f000 fdd8 	bl	8013a08 <_fflush_r>
 8012e58:	68a1      	ldr	r1, [r4, #8]
 8012e5a:	4b09      	ldr	r3, [pc, #36]	; (8012e80 <cleanup_stdio+0x38>)
 8012e5c:	4299      	cmp	r1, r3
 8012e5e:	d002      	beq.n	8012e66 <cleanup_stdio+0x1e>
 8012e60:	4620      	mov	r0, r4
 8012e62:	f000 fdd1 	bl	8013a08 <_fflush_r>
 8012e66:	68e1      	ldr	r1, [r4, #12]
 8012e68:	4b06      	ldr	r3, [pc, #24]	; (8012e84 <cleanup_stdio+0x3c>)
 8012e6a:	4299      	cmp	r1, r3
 8012e6c:	d004      	beq.n	8012e78 <cleanup_stdio+0x30>
 8012e6e:	4620      	mov	r0, r4
 8012e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e74:	f000 bdc8 	b.w	8013a08 <_fflush_r>
 8012e78:	bd10      	pop	{r4, pc}
 8012e7a:	bf00      	nop
 8012e7c:	2000895c 	.word	0x2000895c
 8012e80:	200089c4 	.word	0x200089c4
 8012e84:	20008a2c 	.word	0x20008a2c

08012e88 <global_stdio_init.part.0>:
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	4b0b      	ldr	r3, [pc, #44]	; (8012eb8 <global_stdio_init.part.0+0x30>)
 8012e8c:	4c0b      	ldr	r4, [pc, #44]	; (8012ebc <global_stdio_init.part.0+0x34>)
 8012e8e:	4a0c      	ldr	r2, [pc, #48]	; (8012ec0 <global_stdio_init.part.0+0x38>)
 8012e90:	601a      	str	r2, [r3, #0]
 8012e92:	4620      	mov	r0, r4
 8012e94:	2200      	movs	r2, #0
 8012e96:	2104      	movs	r1, #4
 8012e98:	f7ff ffa6 	bl	8012de8 <std>
 8012e9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	2109      	movs	r1, #9
 8012ea4:	f7ff ffa0 	bl	8012de8 <std>
 8012ea8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012eac:	2202      	movs	r2, #2
 8012eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eb2:	2112      	movs	r1, #18
 8012eb4:	f7ff bf98 	b.w	8012de8 <std>
 8012eb8:	20008a94 	.word	0x20008a94
 8012ebc:	2000895c 	.word	0x2000895c
 8012ec0:	08012e31 	.word	0x08012e31

08012ec4 <__sfp_lock_acquire>:
 8012ec4:	4801      	ldr	r0, [pc, #4]	; (8012ecc <__sfp_lock_acquire+0x8>)
 8012ec6:	f000 b917 	b.w	80130f8 <__retarget_lock_acquire_recursive>
 8012eca:	bf00      	nop
 8012ecc:	20008a9d 	.word	0x20008a9d

08012ed0 <__sfp_lock_release>:
 8012ed0:	4801      	ldr	r0, [pc, #4]	; (8012ed8 <__sfp_lock_release+0x8>)
 8012ed2:	f000 b912 	b.w	80130fa <__retarget_lock_release_recursive>
 8012ed6:	bf00      	nop
 8012ed8:	20008a9d 	.word	0x20008a9d

08012edc <__sinit>:
 8012edc:	b510      	push	{r4, lr}
 8012ede:	4604      	mov	r4, r0
 8012ee0:	f7ff fff0 	bl	8012ec4 <__sfp_lock_acquire>
 8012ee4:	6a23      	ldr	r3, [r4, #32]
 8012ee6:	b11b      	cbz	r3, 8012ef0 <__sinit+0x14>
 8012ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eec:	f7ff bff0 	b.w	8012ed0 <__sfp_lock_release>
 8012ef0:	4b04      	ldr	r3, [pc, #16]	; (8012f04 <__sinit+0x28>)
 8012ef2:	6223      	str	r3, [r4, #32]
 8012ef4:	4b04      	ldr	r3, [pc, #16]	; (8012f08 <__sinit+0x2c>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1f5      	bne.n	8012ee8 <__sinit+0xc>
 8012efc:	f7ff ffc4 	bl	8012e88 <global_stdio_init.part.0>
 8012f00:	e7f2      	b.n	8012ee8 <__sinit+0xc>
 8012f02:	bf00      	nop
 8012f04:	08012e49 	.word	0x08012e49
 8012f08:	20008a94 	.word	0x20008a94

08012f0c <_fwalk_sglue>:
 8012f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f10:	4607      	mov	r7, r0
 8012f12:	4688      	mov	r8, r1
 8012f14:	4614      	mov	r4, r2
 8012f16:	2600      	movs	r6, #0
 8012f18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f1c:	f1b9 0901 	subs.w	r9, r9, #1
 8012f20:	d505      	bpl.n	8012f2e <_fwalk_sglue+0x22>
 8012f22:	6824      	ldr	r4, [r4, #0]
 8012f24:	2c00      	cmp	r4, #0
 8012f26:	d1f7      	bne.n	8012f18 <_fwalk_sglue+0xc>
 8012f28:	4630      	mov	r0, r6
 8012f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f2e:	89ab      	ldrh	r3, [r5, #12]
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	d907      	bls.n	8012f44 <_fwalk_sglue+0x38>
 8012f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f38:	3301      	adds	r3, #1
 8012f3a:	d003      	beq.n	8012f44 <_fwalk_sglue+0x38>
 8012f3c:	4629      	mov	r1, r5
 8012f3e:	4638      	mov	r0, r7
 8012f40:	47c0      	blx	r8
 8012f42:	4306      	orrs	r6, r0
 8012f44:	3568      	adds	r5, #104	; 0x68
 8012f46:	e7e9      	b.n	8012f1c <_fwalk_sglue+0x10>

08012f48 <iprintf>:
 8012f48:	b40f      	push	{r0, r1, r2, r3}
 8012f4a:	b507      	push	{r0, r1, r2, lr}
 8012f4c:	4906      	ldr	r1, [pc, #24]	; (8012f68 <iprintf+0x20>)
 8012f4e:	ab04      	add	r3, sp, #16
 8012f50:	6808      	ldr	r0, [r1, #0]
 8012f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f56:	6881      	ldr	r1, [r0, #8]
 8012f58:	9301      	str	r3, [sp, #4]
 8012f5a:	f000 fa25 	bl	80133a8 <_vfiprintf_r>
 8012f5e:	b003      	add	sp, #12
 8012f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f64:	b004      	add	sp, #16
 8012f66:	4770      	bx	lr
 8012f68:	20000070 	.word	0x20000070

08012f6c <__sread>:
 8012f6c:	b510      	push	{r4, lr}
 8012f6e:	460c      	mov	r4, r1
 8012f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f74:	f000 f878 	bl	8013068 <_read_r>
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	bfab      	itete	ge
 8012f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8012f80:	181b      	addge	r3, r3, r0
 8012f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f86:	bfac      	ite	ge
 8012f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f8a:	81a3      	strhlt	r3, [r4, #12]
 8012f8c:	bd10      	pop	{r4, pc}

08012f8e <__swrite>:
 8012f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f92:	461f      	mov	r7, r3
 8012f94:	898b      	ldrh	r3, [r1, #12]
 8012f96:	05db      	lsls	r3, r3, #23
 8012f98:	4605      	mov	r5, r0
 8012f9a:	460c      	mov	r4, r1
 8012f9c:	4616      	mov	r6, r2
 8012f9e:	d505      	bpl.n	8012fac <__swrite+0x1e>
 8012fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	f000 f84c 	bl	8013044 <_lseek_r>
 8012fac:	89a3      	ldrh	r3, [r4, #12]
 8012fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fb6:	81a3      	strh	r3, [r4, #12]
 8012fb8:	4632      	mov	r2, r6
 8012fba:	463b      	mov	r3, r7
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc2:	f000 b863 	b.w	801308c <_write_r>

08012fc6 <__sseek>:
 8012fc6:	b510      	push	{r4, lr}
 8012fc8:	460c      	mov	r4, r1
 8012fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fce:	f000 f839 	bl	8013044 <_lseek_r>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	89a3      	ldrh	r3, [r4, #12]
 8012fd6:	bf15      	itete	ne
 8012fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fe2:	81a3      	strheq	r3, [r4, #12]
 8012fe4:	bf18      	it	ne
 8012fe6:	81a3      	strhne	r3, [r4, #12]
 8012fe8:	bd10      	pop	{r4, pc}

08012fea <__sclose>:
 8012fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fee:	f000 b819 	b.w	8013024 <_close_r>

08012ff2 <memcmp>:
 8012ff2:	b510      	push	{r4, lr}
 8012ff4:	3901      	subs	r1, #1
 8012ff6:	4402      	add	r2, r0
 8012ff8:	4290      	cmp	r0, r2
 8012ffa:	d101      	bne.n	8013000 <memcmp+0xe>
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	e005      	b.n	801300c <memcmp+0x1a>
 8013000:	7803      	ldrb	r3, [r0, #0]
 8013002:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013006:	42a3      	cmp	r3, r4
 8013008:	d001      	beq.n	801300e <memcmp+0x1c>
 801300a:	1b18      	subs	r0, r3, r4
 801300c:	bd10      	pop	{r4, pc}
 801300e:	3001      	adds	r0, #1
 8013010:	e7f2      	b.n	8012ff8 <memcmp+0x6>

08013012 <memset>:
 8013012:	4402      	add	r2, r0
 8013014:	4603      	mov	r3, r0
 8013016:	4293      	cmp	r3, r2
 8013018:	d100      	bne.n	801301c <memset+0xa>
 801301a:	4770      	bx	lr
 801301c:	f803 1b01 	strb.w	r1, [r3], #1
 8013020:	e7f9      	b.n	8013016 <memset+0x4>
	...

08013024 <_close_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4d06      	ldr	r5, [pc, #24]	; (8013040 <_close_r+0x1c>)
 8013028:	2300      	movs	r3, #0
 801302a:	4604      	mov	r4, r0
 801302c:	4608      	mov	r0, r1
 801302e:	602b      	str	r3, [r5, #0]
 8013030:	f7ee fc8d 	bl	800194e <_close>
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	d102      	bne.n	801303e <_close_r+0x1a>
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	b103      	cbz	r3, 801303e <_close_r+0x1a>
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	20008a98 	.word	0x20008a98

08013044 <_lseek_r>:
 8013044:	b538      	push	{r3, r4, r5, lr}
 8013046:	4d07      	ldr	r5, [pc, #28]	; (8013064 <_lseek_r+0x20>)
 8013048:	4604      	mov	r4, r0
 801304a:	4608      	mov	r0, r1
 801304c:	4611      	mov	r1, r2
 801304e:	2200      	movs	r2, #0
 8013050:	602a      	str	r2, [r5, #0]
 8013052:	461a      	mov	r2, r3
 8013054:	f7ee fca2 	bl	800199c <_lseek>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	d102      	bne.n	8013062 <_lseek_r+0x1e>
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	b103      	cbz	r3, 8013062 <_lseek_r+0x1e>
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	20008a98 	.word	0x20008a98

08013068 <_read_r>:
 8013068:	b538      	push	{r3, r4, r5, lr}
 801306a:	4d07      	ldr	r5, [pc, #28]	; (8013088 <_read_r+0x20>)
 801306c:	4604      	mov	r4, r0
 801306e:	4608      	mov	r0, r1
 8013070:	4611      	mov	r1, r2
 8013072:	2200      	movs	r2, #0
 8013074:	602a      	str	r2, [r5, #0]
 8013076:	461a      	mov	r2, r3
 8013078:	f7ee fc30 	bl	80018dc <_read>
 801307c:	1c43      	adds	r3, r0, #1
 801307e:	d102      	bne.n	8013086 <_read_r+0x1e>
 8013080:	682b      	ldr	r3, [r5, #0]
 8013082:	b103      	cbz	r3, 8013086 <_read_r+0x1e>
 8013084:	6023      	str	r3, [r4, #0]
 8013086:	bd38      	pop	{r3, r4, r5, pc}
 8013088:	20008a98 	.word	0x20008a98

0801308c <_write_r>:
 801308c:	b538      	push	{r3, r4, r5, lr}
 801308e:	4d07      	ldr	r5, [pc, #28]	; (80130ac <_write_r+0x20>)
 8013090:	4604      	mov	r4, r0
 8013092:	4608      	mov	r0, r1
 8013094:	4611      	mov	r1, r2
 8013096:	2200      	movs	r2, #0
 8013098:	602a      	str	r2, [r5, #0]
 801309a:	461a      	mov	r2, r3
 801309c:	f7ee fc3b 	bl	8001916 <_write>
 80130a0:	1c43      	adds	r3, r0, #1
 80130a2:	d102      	bne.n	80130aa <_write_r+0x1e>
 80130a4:	682b      	ldr	r3, [r5, #0]
 80130a6:	b103      	cbz	r3, 80130aa <_write_r+0x1e>
 80130a8:	6023      	str	r3, [r4, #0]
 80130aa:	bd38      	pop	{r3, r4, r5, pc}
 80130ac:	20008a98 	.word	0x20008a98

080130b0 <__libc_init_array>:
 80130b0:	b570      	push	{r4, r5, r6, lr}
 80130b2:	4d0d      	ldr	r5, [pc, #52]	; (80130e8 <__libc_init_array+0x38>)
 80130b4:	4c0d      	ldr	r4, [pc, #52]	; (80130ec <__libc_init_array+0x3c>)
 80130b6:	1b64      	subs	r4, r4, r5
 80130b8:	10a4      	asrs	r4, r4, #2
 80130ba:	2600      	movs	r6, #0
 80130bc:	42a6      	cmp	r6, r4
 80130be:	d109      	bne.n	80130d4 <__libc_init_array+0x24>
 80130c0:	4d0b      	ldr	r5, [pc, #44]	; (80130f0 <__libc_init_array+0x40>)
 80130c2:	4c0c      	ldr	r4, [pc, #48]	; (80130f4 <__libc_init_array+0x44>)
 80130c4:	f000 fe50 	bl	8013d68 <_init>
 80130c8:	1b64      	subs	r4, r4, r5
 80130ca:	10a4      	asrs	r4, r4, #2
 80130cc:	2600      	movs	r6, #0
 80130ce:	42a6      	cmp	r6, r4
 80130d0:	d105      	bne.n	80130de <__libc_init_array+0x2e>
 80130d2:	bd70      	pop	{r4, r5, r6, pc}
 80130d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80130d8:	4798      	blx	r3
 80130da:	3601      	adds	r6, #1
 80130dc:	e7ee      	b.n	80130bc <__libc_init_array+0xc>
 80130de:	f855 3b04 	ldr.w	r3, [r5], #4
 80130e2:	4798      	blx	r3
 80130e4:	3601      	adds	r6, #1
 80130e6:	e7f2      	b.n	80130ce <__libc_init_array+0x1e>
 80130e8:	08016d08 	.word	0x08016d08
 80130ec:	08016d08 	.word	0x08016d08
 80130f0:	08016d08 	.word	0x08016d08
 80130f4:	08016d0c 	.word	0x08016d0c

080130f8 <__retarget_lock_acquire_recursive>:
 80130f8:	4770      	bx	lr

080130fa <__retarget_lock_release_recursive>:
 80130fa:	4770      	bx	lr

080130fc <memcpy>:
 80130fc:	440a      	add	r2, r1
 80130fe:	4291      	cmp	r1, r2
 8013100:	f100 33ff 	add.w	r3, r0, #4294967295
 8013104:	d100      	bne.n	8013108 <memcpy+0xc>
 8013106:	4770      	bx	lr
 8013108:	b510      	push	{r4, lr}
 801310a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801310e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013112:	4291      	cmp	r1, r2
 8013114:	d1f9      	bne.n	801310a <memcpy+0xe>
 8013116:	bd10      	pop	{r4, pc}

08013118 <__assert_func>:
 8013118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801311a:	4614      	mov	r4, r2
 801311c:	461a      	mov	r2, r3
 801311e:	4b09      	ldr	r3, [pc, #36]	; (8013144 <__assert_func+0x2c>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	4605      	mov	r5, r0
 8013124:	68d8      	ldr	r0, [r3, #12]
 8013126:	b14c      	cbz	r4, 801313c <__assert_func+0x24>
 8013128:	4b07      	ldr	r3, [pc, #28]	; (8013148 <__assert_func+0x30>)
 801312a:	9100      	str	r1, [sp, #0]
 801312c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013130:	4906      	ldr	r1, [pc, #24]	; (801314c <__assert_func+0x34>)
 8013132:	462b      	mov	r3, r5
 8013134:	f000 fc90 	bl	8013a58 <fiprintf>
 8013138:	f000 fd46 	bl	8013bc8 <abort>
 801313c:	4b04      	ldr	r3, [pc, #16]	; (8013150 <__assert_func+0x38>)
 801313e:	461c      	mov	r4, r3
 8013140:	e7f3      	b.n	801312a <__assert_func+0x12>
 8013142:	bf00      	nop
 8013144:	20000070 	.word	0x20000070
 8013148:	08016c91 	.word	0x08016c91
 801314c:	08016c9e 	.word	0x08016c9e
 8013150:	08016ccc 	.word	0x08016ccc

08013154 <_free_r>:
 8013154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013156:	2900      	cmp	r1, #0
 8013158:	d044      	beq.n	80131e4 <_free_r+0x90>
 801315a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801315e:	9001      	str	r0, [sp, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	f1a1 0404 	sub.w	r4, r1, #4
 8013166:	bfb8      	it	lt
 8013168:	18e4      	addlt	r4, r4, r3
 801316a:	f000 f8e7 	bl	801333c <__malloc_lock>
 801316e:	4a1e      	ldr	r2, [pc, #120]	; (80131e8 <_free_r+0x94>)
 8013170:	9801      	ldr	r0, [sp, #4]
 8013172:	6813      	ldr	r3, [r2, #0]
 8013174:	b933      	cbnz	r3, 8013184 <_free_r+0x30>
 8013176:	6063      	str	r3, [r4, #4]
 8013178:	6014      	str	r4, [r2, #0]
 801317a:	b003      	add	sp, #12
 801317c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013180:	f000 b8e2 	b.w	8013348 <__malloc_unlock>
 8013184:	42a3      	cmp	r3, r4
 8013186:	d908      	bls.n	801319a <_free_r+0x46>
 8013188:	6825      	ldr	r5, [r4, #0]
 801318a:	1961      	adds	r1, r4, r5
 801318c:	428b      	cmp	r3, r1
 801318e:	bf01      	itttt	eq
 8013190:	6819      	ldreq	r1, [r3, #0]
 8013192:	685b      	ldreq	r3, [r3, #4]
 8013194:	1949      	addeq	r1, r1, r5
 8013196:	6021      	streq	r1, [r4, #0]
 8013198:	e7ed      	b.n	8013176 <_free_r+0x22>
 801319a:	461a      	mov	r2, r3
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	b10b      	cbz	r3, 80131a4 <_free_r+0x50>
 80131a0:	42a3      	cmp	r3, r4
 80131a2:	d9fa      	bls.n	801319a <_free_r+0x46>
 80131a4:	6811      	ldr	r1, [r2, #0]
 80131a6:	1855      	adds	r5, r2, r1
 80131a8:	42a5      	cmp	r5, r4
 80131aa:	d10b      	bne.n	80131c4 <_free_r+0x70>
 80131ac:	6824      	ldr	r4, [r4, #0]
 80131ae:	4421      	add	r1, r4
 80131b0:	1854      	adds	r4, r2, r1
 80131b2:	42a3      	cmp	r3, r4
 80131b4:	6011      	str	r1, [r2, #0]
 80131b6:	d1e0      	bne.n	801317a <_free_r+0x26>
 80131b8:	681c      	ldr	r4, [r3, #0]
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	6053      	str	r3, [r2, #4]
 80131be:	440c      	add	r4, r1
 80131c0:	6014      	str	r4, [r2, #0]
 80131c2:	e7da      	b.n	801317a <_free_r+0x26>
 80131c4:	d902      	bls.n	80131cc <_free_r+0x78>
 80131c6:	230c      	movs	r3, #12
 80131c8:	6003      	str	r3, [r0, #0]
 80131ca:	e7d6      	b.n	801317a <_free_r+0x26>
 80131cc:	6825      	ldr	r5, [r4, #0]
 80131ce:	1961      	adds	r1, r4, r5
 80131d0:	428b      	cmp	r3, r1
 80131d2:	bf04      	itt	eq
 80131d4:	6819      	ldreq	r1, [r3, #0]
 80131d6:	685b      	ldreq	r3, [r3, #4]
 80131d8:	6063      	str	r3, [r4, #4]
 80131da:	bf04      	itt	eq
 80131dc:	1949      	addeq	r1, r1, r5
 80131de:	6021      	streq	r1, [r4, #0]
 80131e0:	6054      	str	r4, [r2, #4]
 80131e2:	e7ca      	b.n	801317a <_free_r+0x26>
 80131e4:	b003      	add	sp, #12
 80131e6:	bd30      	pop	{r4, r5, pc}
 80131e8:	20008aa0 	.word	0x20008aa0

080131ec <malloc>:
 80131ec:	4b02      	ldr	r3, [pc, #8]	; (80131f8 <malloc+0xc>)
 80131ee:	4601      	mov	r1, r0
 80131f0:	6818      	ldr	r0, [r3, #0]
 80131f2:	f000 b823 	b.w	801323c <_malloc_r>
 80131f6:	bf00      	nop
 80131f8:	20000070 	.word	0x20000070

080131fc <sbrk_aligned>:
 80131fc:	b570      	push	{r4, r5, r6, lr}
 80131fe:	4e0e      	ldr	r6, [pc, #56]	; (8013238 <sbrk_aligned+0x3c>)
 8013200:	460c      	mov	r4, r1
 8013202:	6831      	ldr	r1, [r6, #0]
 8013204:	4605      	mov	r5, r0
 8013206:	b911      	cbnz	r1, 801320e <sbrk_aligned+0x12>
 8013208:	f000 fcce 	bl	8013ba8 <_sbrk_r>
 801320c:	6030      	str	r0, [r6, #0]
 801320e:	4621      	mov	r1, r4
 8013210:	4628      	mov	r0, r5
 8013212:	f000 fcc9 	bl	8013ba8 <_sbrk_r>
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	d00a      	beq.n	8013230 <sbrk_aligned+0x34>
 801321a:	1cc4      	adds	r4, r0, #3
 801321c:	f024 0403 	bic.w	r4, r4, #3
 8013220:	42a0      	cmp	r0, r4
 8013222:	d007      	beq.n	8013234 <sbrk_aligned+0x38>
 8013224:	1a21      	subs	r1, r4, r0
 8013226:	4628      	mov	r0, r5
 8013228:	f000 fcbe 	bl	8013ba8 <_sbrk_r>
 801322c:	3001      	adds	r0, #1
 801322e:	d101      	bne.n	8013234 <sbrk_aligned+0x38>
 8013230:	f04f 34ff 	mov.w	r4, #4294967295
 8013234:	4620      	mov	r0, r4
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	20008aa4 	.word	0x20008aa4

0801323c <_malloc_r>:
 801323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013240:	1ccd      	adds	r5, r1, #3
 8013242:	f025 0503 	bic.w	r5, r5, #3
 8013246:	3508      	adds	r5, #8
 8013248:	2d0c      	cmp	r5, #12
 801324a:	bf38      	it	cc
 801324c:	250c      	movcc	r5, #12
 801324e:	2d00      	cmp	r5, #0
 8013250:	4607      	mov	r7, r0
 8013252:	db01      	blt.n	8013258 <_malloc_r+0x1c>
 8013254:	42a9      	cmp	r1, r5
 8013256:	d905      	bls.n	8013264 <_malloc_r+0x28>
 8013258:	230c      	movs	r3, #12
 801325a:	603b      	str	r3, [r7, #0]
 801325c:	2600      	movs	r6, #0
 801325e:	4630      	mov	r0, r6
 8013260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013338 <_malloc_r+0xfc>
 8013268:	f000 f868 	bl	801333c <__malloc_lock>
 801326c:	f8d8 3000 	ldr.w	r3, [r8]
 8013270:	461c      	mov	r4, r3
 8013272:	bb5c      	cbnz	r4, 80132cc <_malloc_r+0x90>
 8013274:	4629      	mov	r1, r5
 8013276:	4638      	mov	r0, r7
 8013278:	f7ff ffc0 	bl	80131fc <sbrk_aligned>
 801327c:	1c43      	adds	r3, r0, #1
 801327e:	4604      	mov	r4, r0
 8013280:	d155      	bne.n	801332e <_malloc_r+0xf2>
 8013282:	f8d8 4000 	ldr.w	r4, [r8]
 8013286:	4626      	mov	r6, r4
 8013288:	2e00      	cmp	r6, #0
 801328a:	d145      	bne.n	8013318 <_malloc_r+0xdc>
 801328c:	2c00      	cmp	r4, #0
 801328e:	d048      	beq.n	8013322 <_malloc_r+0xe6>
 8013290:	6823      	ldr	r3, [r4, #0]
 8013292:	4631      	mov	r1, r6
 8013294:	4638      	mov	r0, r7
 8013296:	eb04 0903 	add.w	r9, r4, r3
 801329a:	f000 fc85 	bl	8013ba8 <_sbrk_r>
 801329e:	4581      	cmp	r9, r0
 80132a0:	d13f      	bne.n	8013322 <_malloc_r+0xe6>
 80132a2:	6821      	ldr	r1, [r4, #0]
 80132a4:	1a6d      	subs	r5, r5, r1
 80132a6:	4629      	mov	r1, r5
 80132a8:	4638      	mov	r0, r7
 80132aa:	f7ff ffa7 	bl	80131fc <sbrk_aligned>
 80132ae:	3001      	adds	r0, #1
 80132b0:	d037      	beq.n	8013322 <_malloc_r+0xe6>
 80132b2:	6823      	ldr	r3, [r4, #0]
 80132b4:	442b      	add	r3, r5
 80132b6:	6023      	str	r3, [r4, #0]
 80132b8:	f8d8 3000 	ldr.w	r3, [r8]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d038      	beq.n	8013332 <_malloc_r+0xf6>
 80132c0:	685a      	ldr	r2, [r3, #4]
 80132c2:	42a2      	cmp	r2, r4
 80132c4:	d12b      	bne.n	801331e <_malloc_r+0xe2>
 80132c6:	2200      	movs	r2, #0
 80132c8:	605a      	str	r2, [r3, #4]
 80132ca:	e00f      	b.n	80132ec <_malloc_r+0xb0>
 80132cc:	6822      	ldr	r2, [r4, #0]
 80132ce:	1b52      	subs	r2, r2, r5
 80132d0:	d41f      	bmi.n	8013312 <_malloc_r+0xd6>
 80132d2:	2a0b      	cmp	r2, #11
 80132d4:	d917      	bls.n	8013306 <_malloc_r+0xca>
 80132d6:	1961      	adds	r1, r4, r5
 80132d8:	42a3      	cmp	r3, r4
 80132da:	6025      	str	r5, [r4, #0]
 80132dc:	bf18      	it	ne
 80132de:	6059      	strne	r1, [r3, #4]
 80132e0:	6863      	ldr	r3, [r4, #4]
 80132e2:	bf08      	it	eq
 80132e4:	f8c8 1000 	streq.w	r1, [r8]
 80132e8:	5162      	str	r2, [r4, r5]
 80132ea:	604b      	str	r3, [r1, #4]
 80132ec:	4638      	mov	r0, r7
 80132ee:	f104 060b 	add.w	r6, r4, #11
 80132f2:	f000 f829 	bl	8013348 <__malloc_unlock>
 80132f6:	f026 0607 	bic.w	r6, r6, #7
 80132fa:	1d23      	adds	r3, r4, #4
 80132fc:	1af2      	subs	r2, r6, r3
 80132fe:	d0ae      	beq.n	801325e <_malloc_r+0x22>
 8013300:	1b9b      	subs	r3, r3, r6
 8013302:	50a3      	str	r3, [r4, r2]
 8013304:	e7ab      	b.n	801325e <_malloc_r+0x22>
 8013306:	42a3      	cmp	r3, r4
 8013308:	6862      	ldr	r2, [r4, #4]
 801330a:	d1dd      	bne.n	80132c8 <_malloc_r+0x8c>
 801330c:	f8c8 2000 	str.w	r2, [r8]
 8013310:	e7ec      	b.n	80132ec <_malloc_r+0xb0>
 8013312:	4623      	mov	r3, r4
 8013314:	6864      	ldr	r4, [r4, #4]
 8013316:	e7ac      	b.n	8013272 <_malloc_r+0x36>
 8013318:	4634      	mov	r4, r6
 801331a:	6876      	ldr	r6, [r6, #4]
 801331c:	e7b4      	b.n	8013288 <_malloc_r+0x4c>
 801331e:	4613      	mov	r3, r2
 8013320:	e7cc      	b.n	80132bc <_malloc_r+0x80>
 8013322:	230c      	movs	r3, #12
 8013324:	603b      	str	r3, [r7, #0]
 8013326:	4638      	mov	r0, r7
 8013328:	f000 f80e 	bl	8013348 <__malloc_unlock>
 801332c:	e797      	b.n	801325e <_malloc_r+0x22>
 801332e:	6025      	str	r5, [r4, #0]
 8013330:	e7dc      	b.n	80132ec <_malloc_r+0xb0>
 8013332:	605b      	str	r3, [r3, #4]
 8013334:	deff      	udf	#255	; 0xff
 8013336:	bf00      	nop
 8013338:	20008aa0 	.word	0x20008aa0

0801333c <__malloc_lock>:
 801333c:	4801      	ldr	r0, [pc, #4]	; (8013344 <__malloc_lock+0x8>)
 801333e:	f7ff bedb 	b.w	80130f8 <__retarget_lock_acquire_recursive>
 8013342:	bf00      	nop
 8013344:	20008a9c 	.word	0x20008a9c

08013348 <__malloc_unlock>:
 8013348:	4801      	ldr	r0, [pc, #4]	; (8013350 <__malloc_unlock+0x8>)
 801334a:	f7ff bed6 	b.w	80130fa <__retarget_lock_release_recursive>
 801334e:	bf00      	nop
 8013350:	20008a9c 	.word	0x20008a9c

08013354 <__sfputc_r>:
 8013354:	6893      	ldr	r3, [r2, #8]
 8013356:	3b01      	subs	r3, #1
 8013358:	2b00      	cmp	r3, #0
 801335a:	b410      	push	{r4}
 801335c:	6093      	str	r3, [r2, #8]
 801335e:	da08      	bge.n	8013372 <__sfputc_r+0x1e>
 8013360:	6994      	ldr	r4, [r2, #24]
 8013362:	42a3      	cmp	r3, r4
 8013364:	db01      	blt.n	801336a <__sfputc_r+0x16>
 8013366:	290a      	cmp	r1, #10
 8013368:	d103      	bne.n	8013372 <__sfputc_r+0x1e>
 801336a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801336e:	f000 bb85 	b.w	8013a7c <__swbuf_r>
 8013372:	6813      	ldr	r3, [r2, #0]
 8013374:	1c58      	adds	r0, r3, #1
 8013376:	6010      	str	r0, [r2, #0]
 8013378:	7019      	strb	r1, [r3, #0]
 801337a:	4608      	mov	r0, r1
 801337c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013380:	4770      	bx	lr

08013382 <__sfputs_r>:
 8013382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013384:	4606      	mov	r6, r0
 8013386:	460f      	mov	r7, r1
 8013388:	4614      	mov	r4, r2
 801338a:	18d5      	adds	r5, r2, r3
 801338c:	42ac      	cmp	r4, r5
 801338e:	d101      	bne.n	8013394 <__sfputs_r+0x12>
 8013390:	2000      	movs	r0, #0
 8013392:	e007      	b.n	80133a4 <__sfputs_r+0x22>
 8013394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013398:	463a      	mov	r2, r7
 801339a:	4630      	mov	r0, r6
 801339c:	f7ff ffda 	bl	8013354 <__sfputc_r>
 80133a0:	1c43      	adds	r3, r0, #1
 80133a2:	d1f3      	bne.n	801338c <__sfputs_r+0xa>
 80133a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080133a8 <_vfiprintf_r>:
 80133a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ac:	460d      	mov	r5, r1
 80133ae:	b09d      	sub	sp, #116	; 0x74
 80133b0:	4614      	mov	r4, r2
 80133b2:	4698      	mov	r8, r3
 80133b4:	4606      	mov	r6, r0
 80133b6:	b118      	cbz	r0, 80133c0 <_vfiprintf_r+0x18>
 80133b8:	6a03      	ldr	r3, [r0, #32]
 80133ba:	b90b      	cbnz	r3, 80133c0 <_vfiprintf_r+0x18>
 80133bc:	f7ff fd8e 	bl	8012edc <__sinit>
 80133c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133c2:	07d9      	lsls	r1, r3, #31
 80133c4:	d405      	bmi.n	80133d2 <_vfiprintf_r+0x2a>
 80133c6:	89ab      	ldrh	r3, [r5, #12]
 80133c8:	059a      	lsls	r2, r3, #22
 80133ca:	d402      	bmi.n	80133d2 <_vfiprintf_r+0x2a>
 80133cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133ce:	f7ff fe93 	bl	80130f8 <__retarget_lock_acquire_recursive>
 80133d2:	89ab      	ldrh	r3, [r5, #12]
 80133d4:	071b      	lsls	r3, r3, #28
 80133d6:	d501      	bpl.n	80133dc <_vfiprintf_r+0x34>
 80133d8:	692b      	ldr	r3, [r5, #16]
 80133da:	b99b      	cbnz	r3, 8013404 <_vfiprintf_r+0x5c>
 80133dc:	4629      	mov	r1, r5
 80133de:	4630      	mov	r0, r6
 80133e0:	f000 fb8a 	bl	8013af8 <__swsetup_r>
 80133e4:	b170      	cbz	r0, 8013404 <_vfiprintf_r+0x5c>
 80133e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133e8:	07dc      	lsls	r4, r3, #31
 80133ea:	d504      	bpl.n	80133f6 <_vfiprintf_r+0x4e>
 80133ec:	f04f 30ff 	mov.w	r0, #4294967295
 80133f0:	b01d      	add	sp, #116	; 0x74
 80133f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f6:	89ab      	ldrh	r3, [r5, #12]
 80133f8:	0598      	lsls	r0, r3, #22
 80133fa:	d4f7      	bmi.n	80133ec <_vfiprintf_r+0x44>
 80133fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133fe:	f7ff fe7c 	bl	80130fa <__retarget_lock_release_recursive>
 8013402:	e7f3      	b.n	80133ec <_vfiprintf_r+0x44>
 8013404:	2300      	movs	r3, #0
 8013406:	9309      	str	r3, [sp, #36]	; 0x24
 8013408:	2320      	movs	r3, #32
 801340a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801340e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013412:	2330      	movs	r3, #48	; 0x30
 8013414:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80135c8 <_vfiprintf_r+0x220>
 8013418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801341c:	f04f 0901 	mov.w	r9, #1
 8013420:	4623      	mov	r3, r4
 8013422:	469a      	mov	sl, r3
 8013424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013428:	b10a      	cbz	r2, 801342e <_vfiprintf_r+0x86>
 801342a:	2a25      	cmp	r2, #37	; 0x25
 801342c:	d1f9      	bne.n	8013422 <_vfiprintf_r+0x7a>
 801342e:	ebba 0b04 	subs.w	fp, sl, r4
 8013432:	d00b      	beq.n	801344c <_vfiprintf_r+0xa4>
 8013434:	465b      	mov	r3, fp
 8013436:	4622      	mov	r2, r4
 8013438:	4629      	mov	r1, r5
 801343a:	4630      	mov	r0, r6
 801343c:	f7ff ffa1 	bl	8013382 <__sfputs_r>
 8013440:	3001      	adds	r0, #1
 8013442:	f000 80a9 	beq.w	8013598 <_vfiprintf_r+0x1f0>
 8013446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013448:	445a      	add	r2, fp
 801344a:	9209      	str	r2, [sp, #36]	; 0x24
 801344c:	f89a 3000 	ldrb.w	r3, [sl]
 8013450:	2b00      	cmp	r3, #0
 8013452:	f000 80a1 	beq.w	8013598 <_vfiprintf_r+0x1f0>
 8013456:	2300      	movs	r3, #0
 8013458:	f04f 32ff 	mov.w	r2, #4294967295
 801345c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013460:	f10a 0a01 	add.w	sl, sl, #1
 8013464:	9304      	str	r3, [sp, #16]
 8013466:	9307      	str	r3, [sp, #28]
 8013468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801346c:	931a      	str	r3, [sp, #104]	; 0x68
 801346e:	4654      	mov	r4, sl
 8013470:	2205      	movs	r2, #5
 8013472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013476:	4854      	ldr	r0, [pc, #336]	; (80135c8 <_vfiprintf_r+0x220>)
 8013478:	f7ec feca 	bl	8000210 <memchr>
 801347c:	9a04      	ldr	r2, [sp, #16]
 801347e:	b9d8      	cbnz	r0, 80134b8 <_vfiprintf_r+0x110>
 8013480:	06d1      	lsls	r1, r2, #27
 8013482:	bf44      	itt	mi
 8013484:	2320      	movmi	r3, #32
 8013486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801348a:	0713      	lsls	r3, r2, #28
 801348c:	bf44      	itt	mi
 801348e:	232b      	movmi	r3, #43	; 0x2b
 8013490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013494:	f89a 3000 	ldrb.w	r3, [sl]
 8013498:	2b2a      	cmp	r3, #42	; 0x2a
 801349a:	d015      	beq.n	80134c8 <_vfiprintf_r+0x120>
 801349c:	9a07      	ldr	r2, [sp, #28]
 801349e:	4654      	mov	r4, sl
 80134a0:	2000      	movs	r0, #0
 80134a2:	f04f 0c0a 	mov.w	ip, #10
 80134a6:	4621      	mov	r1, r4
 80134a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134ac:	3b30      	subs	r3, #48	; 0x30
 80134ae:	2b09      	cmp	r3, #9
 80134b0:	d94d      	bls.n	801354e <_vfiprintf_r+0x1a6>
 80134b2:	b1b0      	cbz	r0, 80134e2 <_vfiprintf_r+0x13a>
 80134b4:	9207      	str	r2, [sp, #28]
 80134b6:	e014      	b.n	80134e2 <_vfiprintf_r+0x13a>
 80134b8:	eba0 0308 	sub.w	r3, r0, r8
 80134bc:	fa09 f303 	lsl.w	r3, r9, r3
 80134c0:	4313      	orrs	r3, r2
 80134c2:	9304      	str	r3, [sp, #16]
 80134c4:	46a2      	mov	sl, r4
 80134c6:	e7d2      	b.n	801346e <_vfiprintf_r+0xc6>
 80134c8:	9b03      	ldr	r3, [sp, #12]
 80134ca:	1d19      	adds	r1, r3, #4
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	9103      	str	r1, [sp, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	bfbb      	ittet	lt
 80134d4:	425b      	neglt	r3, r3
 80134d6:	f042 0202 	orrlt.w	r2, r2, #2
 80134da:	9307      	strge	r3, [sp, #28]
 80134dc:	9307      	strlt	r3, [sp, #28]
 80134de:	bfb8      	it	lt
 80134e0:	9204      	strlt	r2, [sp, #16]
 80134e2:	7823      	ldrb	r3, [r4, #0]
 80134e4:	2b2e      	cmp	r3, #46	; 0x2e
 80134e6:	d10c      	bne.n	8013502 <_vfiprintf_r+0x15a>
 80134e8:	7863      	ldrb	r3, [r4, #1]
 80134ea:	2b2a      	cmp	r3, #42	; 0x2a
 80134ec:	d134      	bne.n	8013558 <_vfiprintf_r+0x1b0>
 80134ee:	9b03      	ldr	r3, [sp, #12]
 80134f0:	1d1a      	adds	r2, r3, #4
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	9203      	str	r2, [sp, #12]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	bfb8      	it	lt
 80134fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80134fe:	3402      	adds	r4, #2
 8013500:	9305      	str	r3, [sp, #20]
 8013502:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80135d8 <_vfiprintf_r+0x230>
 8013506:	7821      	ldrb	r1, [r4, #0]
 8013508:	2203      	movs	r2, #3
 801350a:	4650      	mov	r0, sl
 801350c:	f7ec fe80 	bl	8000210 <memchr>
 8013510:	b138      	cbz	r0, 8013522 <_vfiprintf_r+0x17a>
 8013512:	9b04      	ldr	r3, [sp, #16]
 8013514:	eba0 000a 	sub.w	r0, r0, sl
 8013518:	2240      	movs	r2, #64	; 0x40
 801351a:	4082      	lsls	r2, r0
 801351c:	4313      	orrs	r3, r2
 801351e:	3401      	adds	r4, #1
 8013520:	9304      	str	r3, [sp, #16]
 8013522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013526:	4829      	ldr	r0, [pc, #164]	; (80135cc <_vfiprintf_r+0x224>)
 8013528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801352c:	2206      	movs	r2, #6
 801352e:	f7ec fe6f 	bl	8000210 <memchr>
 8013532:	2800      	cmp	r0, #0
 8013534:	d03f      	beq.n	80135b6 <_vfiprintf_r+0x20e>
 8013536:	4b26      	ldr	r3, [pc, #152]	; (80135d0 <_vfiprintf_r+0x228>)
 8013538:	bb1b      	cbnz	r3, 8013582 <_vfiprintf_r+0x1da>
 801353a:	9b03      	ldr	r3, [sp, #12]
 801353c:	3307      	adds	r3, #7
 801353e:	f023 0307 	bic.w	r3, r3, #7
 8013542:	3308      	adds	r3, #8
 8013544:	9303      	str	r3, [sp, #12]
 8013546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013548:	443b      	add	r3, r7
 801354a:	9309      	str	r3, [sp, #36]	; 0x24
 801354c:	e768      	b.n	8013420 <_vfiprintf_r+0x78>
 801354e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013552:	460c      	mov	r4, r1
 8013554:	2001      	movs	r0, #1
 8013556:	e7a6      	b.n	80134a6 <_vfiprintf_r+0xfe>
 8013558:	2300      	movs	r3, #0
 801355a:	3401      	adds	r4, #1
 801355c:	9305      	str	r3, [sp, #20]
 801355e:	4619      	mov	r1, r3
 8013560:	f04f 0c0a 	mov.w	ip, #10
 8013564:	4620      	mov	r0, r4
 8013566:	f810 2b01 	ldrb.w	r2, [r0], #1
 801356a:	3a30      	subs	r2, #48	; 0x30
 801356c:	2a09      	cmp	r2, #9
 801356e:	d903      	bls.n	8013578 <_vfiprintf_r+0x1d0>
 8013570:	2b00      	cmp	r3, #0
 8013572:	d0c6      	beq.n	8013502 <_vfiprintf_r+0x15a>
 8013574:	9105      	str	r1, [sp, #20]
 8013576:	e7c4      	b.n	8013502 <_vfiprintf_r+0x15a>
 8013578:	fb0c 2101 	mla	r1, ip, r1, r2
 801357c:	4604      	mov	r4, r0
 801357e:	2301      	movs	r3, #1
 8013580:	e7f0      	b.n	8013564 <_vfiprintf_r+0x1bc>
 8013582:	ab03      	add	r3, sp, #12
 8013584:	9300      	str	r3, [sp, #0]
 8013586:	462a      	mov	r2, r5
 8013588:	4b12      	ldr	r3, [pc, #72]	; (80135d4 <_vfiprintf_r+0x22c>)
 801358a:	a904      	add	r1, sp, #16
 801358c:	4630      	mov	r0, r6
 801358e:	f3af 8000 	nop.w
 8013592:	4607      	mov	r7, r0
 8013594:	1c78      	adds	r0, r7, #1
 8013596:	d1d6      	bne.n	8013546 <_vfiprintf_r+0x19e>
 8013598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801359a:	07d9      	lsls	r1, r3, #31
 801359c:	d405      	bmi.n	80135aa <_vfiprintf_r+0x202>
 801359e:	89ab      	ldrh	r3, [r5, #12]
 80135a0:	059a      	lsls	r2, r3, #22
 80135a2:	d402      	bmi.n	80135aa <_vfiprintf_r+0x202>
 80135a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135a6:	f7ff fda8 	bl	80130fa <__retarget_lock_release_recursive>
 80135aa:	89ab      	ldrh	r3, [r5, #12]
 80135ac:	065b      	lsls	r3, r3, #25
 80135ae:	f53f af1d 	bmi.w	80133ec <_vfiprintf_r+0x44>
 80135b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135b4:	e71c      	b.n	80133f0 <_vfiprintf_r+0x48>
 80135b6:	ab03      	add	r3, sp, #12
 80135b8:	9300      	str	r3, [sp, #0]
 80135ba:	462a      	mov	r2, r5
 80135bc:	4b05      	ldr	r3, [pc, #20]	; (80135d4 <_vfiprintf_r+0x22c>)
 80135be:	a904      	add	r1, sp, #16
 80135c0:	4630      	mov	r0, r6
 80135c2:	f000 f879 	bl	80136b8 <_printf_i>
 80135c6:	e7e4      	b.n	8013592 <_vfiprintf_r+0x1ea>
 80135c8:	08016ccd 	.word	0x08016ccd
 80135cc:	08016cd7 	.word	0x08016cd7
 80135d0:	00000000 	.word	0x00000000
 80135d4:	08013383 	.word	0x08013383
 80135d8:	08016cd3 	.word	0x08016cd3

080135dc <_printf_common>:
 80135dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135e0:	4616      	mov	r6, r2
 80135e2:	4699      	mov	r9, r3
 80135e4:	688a      	ldr	r2, [r1, #8]
 80135e6:	690b      	ldr	r3, [r1, #16]
 80135e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80135ec:	4293      	cmp	r3, r2
 80135ee:	bfb8      	it	lt
 80135f0:	4613      	movlt	r3, r2
 80135f2:	6033      	str	r3, [r6, #0]
 80135f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80135f8:	4607      	mov	r7, r0
 80135fa:	460c      	mov	r4, r1
 80135fc:	b10a      	cbz	r2, 8013602 <_printf_common+0x26>
 80135fe:	3301      	adds	r3, #1
 8013600:	6033      	str	r3, [r6, #0]
 8013602:	6823      	ldr	r3, [r4, #0]
 8013604:	0699      	lsls	r1, r3, #26
 8013606:	bf42      	ittt	mi
 8013608:	6833      	ldrmi	r3, [r6, #0]
 801360a:	3302      	addmi	r3, #2
 801360c:	6033      	strmi	r3, [r6, #0]
 801360e:	6825      	ldr	r5, [r4, #0]
 8013610:	f015 0506 	ands.w	r5, r5, #6
 8013614:	d106      	bne.n	8013624 <_printf_common+0x48>
 8013616:	f104 0a19 	add.w	sl, r4, #25
 801361a:	68e3      	ldr	r3, [r4, #12]
 801361c:	6832      	ldr	r2, [r6, #0]
 801361e:	1a9b      	subs	r3, r3, r2
 8013620:	42ab      	cmp	r3, r5
 8013622:	dc26      	bgt.n	8013672 <_printf_common+0x96>
 8013624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013628:	1e13      	subs	r3, r2, #0
 801362a:	6822      	ldr	r2, [r4, #0]
 801362c:	bf18      	it	ne
 801362e:	2301      	movne	r3, #1
 8013630:	0692      	lsls	r2, r2, #26
 8013632:	d42b      	bmi.n	801368c <_printf_common+0xb0>
 8013634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013638:	4649      	mov	r1, r9
 801363a:	4638      	mov	r0, r7
 801363c:	47c0      	blx	r8
 801363e:	3001      	adds	r0, #1
 8013640:	d01e      	beq.n	8013680 <_printf_common+0xa4>
 8013642:	6823      	ldr	r3, [r4, #0]
 8013644:	6922      	ldr	r2, [r4, #16]
 8013646:	f003 0306 	and.w	r3, r3, #6
 801364a:	2b04      	cmp	r3, #4
 801364c:	bf02      	ittt	eq
 801364e:	68e5      	ldreq	r5, [r4, #12]
 8013650:	6833      	ldreq	r3, [r6, #0]
 8013652:	1aed      	subeq	r5, r5, r3
 8013654:	68a3      	ldr	r3, [r4, #8]
 8013656:	bf0c      	ite	eq
 8013658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801365c:	2500      	movne	r5, #0
 801365e:	4293      	cmp	r3, r2
 8013660:	bfc4      	itt	gt
 8013662:	1a9b      	subgt	r3, r3, r2
 8013664:	18ed      	addgt	r5, r5, r3
 8013666:	2600      	movs	r6, #0
 8013668:	341a      	adds	r4, #26
 801366a:	42b5      	cmp	r5, r6
 801366c:	d11a      	bne.n	80136a4 <_printf_common+0xc8>
 801366e:	2000      	movs	r0, #0
 8013670:	e008      	b.n	8013684 <_printf_common+0xa8>
 8013672:	2301      	movs	r3, #1
 8013674:	4652      	mov	r2, sl
 8013676:	4649      	mov	r1, r9
 8013678:	4638      	mov	r0, r7
 801367a:	47c0      	blx	r8
 801367c:	3001      	adds	r0, #1
 801367e:	d103      	bne.n	8013688 <_printf_common+0xac>
 8013680:	f04f 30ff 	mov.w	r0, #4294967295
 8013684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013688:	3501      	adds	r5, #1
 801368a:	e7c6      	b.n	801361a <_printf_common+0x3e>
 801368c:	18e1      	adds	r1, r4, r3
 801368e:	1c5a      	adds	r2, r3, #1
 8013690:	2030      	movs	r0, #48	; 0x30
 8013692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013696:	4422      	add	r2, r4
 8013698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801369c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80136a0:	3302      	adds	r3, #2
 80136a2:	e7c7      	b.n	8013634 <_printf_common+0x58>
 80136a4:	2301      	movs	r3, #1
 80136a6:	4622      	mov	r2, r4
 80136a8:	4649      	mov	r1, r9
 80136aa:	4638      	mov	r0, r7
 80136ac:	47c0      	blx	r8
 80136ae:	3001      	adds	r0, #1
 80136b0:	d0e6      	beq.n	8013680 <_printf_common+0xa4>
 80136b2:	3601      	adds	r6, #1
 80136b4:	e7d9      	b.n	801366a <_printf_common+0x8e>
	...

080136b8 <_printf_i>:
 80136b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80136bc:	7e0f      	ldrb	r7, [r1, #24]
 80136be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80136c0:	2f78      	cmp	r7, #120	; 0x78
 80136c2:	4691      	mov	r9, r2
 80136c4:	4680      	mov	r8, r0
 80136c6:	460c      	mov	r4, r1
 80136c8:	469a      	mov	sl, r3
 80136ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80136ce:	d807      	bhi.n	80136e0 <_printf_i+0x28>
 80136d0:	2f62      	cmp	r7, #98	; 0x62
 80136d2:	d80a      	bhi.n	80136ea <_printf_i+0x32>
 80136d4:	2f00      	cmp	r7, #0
 80136d6:	f000 80d4 	beq.w	8013882 <_printf_i+0x1ca>
 80136da:	2f58      	cmp	r7, #88	; 0x58
 80136dc:	f000 80c0 	beq.w	8013860 <_printf_i+0x1a8>
 80136e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80136e8:	e03a      	b.n	8013760 <_printf_i+0xa8>
 80136ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80136ee:	2b15      	cmp	r3, #21
 80136f0:	d8f6      	bhi.n	80136e0 <_printf_i+0x28>
 80136f2:	a101      	add	r1, pc, #4	; (adr r1, 80136f8 <_printf_i+0x40>)
 80136f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80136f8:	08013751 	.word	0x08013751
 80136fc:	08013765 	.word	0x08013765
 8013700:	080136e1 	.word	0x080136e1
 8013704:	080136e1 	.word	0x080136e1
 8013708:	080136e1 	.word	0x080136e1
 801370c:	080136e1 	.word	0x080136e1
 8013710:	08013765 	.word	0x08013765
 8013714:	080136e1 	.word	0x080136e1
 8013718:	080136e1 	.word	0x080136e1
 801371c:	080136e1 	.word	0x080136e1
 8013720:	080136e1 	.word	0x080136e1
 8013724:	08013869 	.word	0x08013869
 8013728:	08013791 	.word	0x08013791
 801372c:	08013823 	.word	0x08013823
 8013730:	080136e1 	.word	0x080136e1
 8013734:	080136e1 	.word	0x080136e1
 8013738:	0801388b 	.word	0x0801388b
 801373c:	080136e1 	.word	0x080136e1
 8013740:	08013791 	.word	0x08013791
 8013744:	080136e1 	.word	0x080136e1
 8013748:	080136e1 	.word	0x080136e1
 801374c:	0801382b 	.word	0x0801382b
 8013750:	682b      	ldr	r3, [r5, #0]
 8013752:	1d1a      	adds	r2, r3, #4
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	602a      	str	r2, [r5, #0]
 8013758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801375c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013760:	2301      	movs	r3, #1
 8013762:	e09f      	b.n	80138a4 <_printf_i+0x1ec>
 8013764:	6820      	ldr	r0, [r4, #0]
 8013766:	682b      	ldr	r3, [r5, #0]
 8013768:	0607      	lsls	r7, r0, #24
 801376a:	f103 0104 	add.w	r1, r3, #4
 801376e:	6029      	str	r1, [r5, #0]
 8013770:	d501      	bpl.n	8013776 <_printf_i+0xbe>
 8013772:	681e      	ldr	r6, [r3, #0]
 8013774:	e003      	b.n	801377e <_printf_i+0xc6>
 8013776:	0646      	lsls	r6, r0, #25
 8013778:	d5fb      	bpl.n	8013772 <_printf_i+0xba>
 801377a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801377e:	2e00      	cmp	r6, #0
 8013780:	da03      	bge.n	801378a <_printf_i+0xd2>
 8013782:	232d      	movs	r3, #45	; 0x2d
 8013784:	4276      	negs	r6, r6
 8013786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801378a:	485a      	ldr	r0, [pc, #360]	; (80138f4 <_printf_i+0x23c>)
 801378c:	230a      	movs	r3, #10
 801378e:	e012      	b.n	80137b6 <_printf_i+0xfe>
 8013790:	682b      	ldr	r3, [r5, #0]
 8013792:	6820      	ldr	r0, [r4, #0]
 8013794:	1d19      	adds	r1, r3, #4
 8013796:	6029      	str	r1, [r5, #0]
 8013798:	0605      	lsls	r5, r0, #24
 801379a:	d501      	bpl.n	80137a0 <_printf_i+0xe8>
 801379c:	681e      	ldr	r6, [r3, #0]
 801379e:	e002      	b.n	80137a6 <_printf_i+0xee>
 80137a0:	0641      	lsls	r1, r0, #25
 80137a2:	d5fb      	bpl.n	801379c <_printf_i+0xe4>
 80137a4:	881e      	ldrh	r6, [r3, #0]
 80137a6:	4853      	ldr	r0, [pc, #332]	; (80138f4 <_printf_i+0x23c>)
 80137a8:	2f6f      	cmp	r7, #111	; 0x6f
 80137aa:	bf0c      	ite	eq
 80137ac:	2308      	moveq	r3, #8
 80137ae:	230a      	movne	r3, #10
 80137b0:	2100      	movs	r1, #0
 80137b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80137b6:	6865      	ldr	r5, [r4, #4]
 80137b8:	60a5      	str	r5, [r4, #8]
 80137ba:	2d00      	cmp	r5, #0
 80137bc:	bfa2      	ittt	ge
 80137be:	6821      	ldrge	r1, [r4, #0]
 80137c0:	f021 0104 	bicge.w	r1, r1, #4
 80137c4:	6021      	strge	r1, [r4, #0]
 80137c6:	b90e      	cbnz	r6, 80137cc <_printf_i+0x114>
 80137c8:	2d00      	cmp	r5, #0
 80137ca:	d04b      	beq.n	8013864 <_printf_i+0x1ac>
 80137cc:	4615      	mov	r5, r2
 80137ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80137d2:	fb03 6711 	mls	r7, r3, r1, r6
 80137d6:	5dc7      	ldrb	r7, [r0, r7]
 80137d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80137dc:	4637      	mov	r7, r6
 80137de:	42bb      	cmp	r3, r7
 80137e0:	460e      	mov	r6, r1
 80137e2:	d9f4      	bls.n	80137ce <_printf_i+0x116>
 80137e4:	2b08      	cmp	r3, #8
 80137e6:	d10b      	bne.n	8013800 <_printf_i+0x148>
 80137e8:	6823      	ldr	r3, [r4, #0]
 80137ea:	07de      	lsls	r6, r3, #31
 80137ec:	d508      	bpl.n	8013800 <_printf_i+0x148>
 80137ee:	6923      	ldr	r3, [r4, #16]
 80137f0:	6861      	ldr	r1, [r4, #4]
 80137f2:	4299      	cmp	r1, r3
 80137f4:	bfde      	ittt	le
 80137f6:	2330      	movle	r3, #48	; 0x30
 80137f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80137fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013800:	1b52      	subs	r2, r2, r5
 8013802:	6122      	str	r2, [r4, #16]
 8013804:	f8cd a000 	str.w	sl, [sp]
 8013808:	464b      	mov	r3, r9
 801380a:	aa03      	add	r2, sp, #12
 801380c:	4621      	mov	r1, r4
 801380e:	4640      	mov	r0, r8
 8013810:	f7ff fee4 	bl	80135dc <_printf_common>
 8013814:	3001      	adds	r0, #1
 8013816:	d14a      	bne.n	80138ae <_printf_i+0x1f6>
 8013818:	f04f 30ff 	mov.w	r0, #4294967295
 801381c:	b004      	add	sp, #16
 801381e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013822:	6823      	ldr	r3, [r4, #0]
 8013824:	f043 0320 	orr.w	r3, r3, #32
 8013828:	6023      	str	r3, [r4, #0]
 801382a:	4833      	ldr	r0, [pc, #204]	; (80138f8 <_printf_i+0x240>)
 801382c:	2778      	movs	r7, #120	; 0x78
 801382e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013832:	6823      	ldr	r3, [r4, #0]
 8013834:	6829      	ldr	r1, [r5, #0]
 8013836:	061f      	lsls	r7, r3, #24
 8013838:	f851 6b04 	ldr.w	r6, [r1], #4
 801383c:	d402      	bmi.n	8013844 <_printf_i+0x18c>
 801383e:	065f      	lsls	r7, r3, #25
 8013840:	bf48      	it	mi
 8013842:	b2b6      	uxthmi	r6, r6
 8013844:	07df      	lsls	r7, r3, #31
 8013846:	bf48      	it	mi
 8013848:	f043 0320 	orrmi.w	r3, r3, #32
 801384c:	6029      	str	r1, [r5, #0]
 801384e:	bf48      	it	mi
 8013850:	6023      	strmi	r3, [r4, #0]
 8013852:	b91e      	cbnz	r6, 801385c <_printf_i+0x1a4>
 8013854:	6823      	ldr	r3, [r4, #0]
 8013856:	f023 0320 	bic.w	r3, r3, #32
 801385a:	6023      	str	r3, [r4, #0]
 801385c:	2310      	movs	r3, #16
 801385e:	e7a7      	b.n	80137b0 <_printf_i+0xf8>
 8013860:	4824      	ldr	r0, [pc, #144]	; (80138f4 <_printf_i+0x23c>)
 8013862:	e7e4      	b.n	801382e <_printf_i+0x176>
 8013864:	4615      	mov	r5, r2
 8013866:	e7bd      	b.n	80137e4 <_printf_i+0x12c>
 8013868:	682b      	ldr	r3, [r5, #0]
 801386a:	6826      	ldr	r6, [r4, #0]
 801386c:	6961      	ldr	r1, [r4, #20]
 801386e:	1d18      	adds	r0, r3, #4
 8013870:	6028      	str	r0, [r5, #0]
 8013872:	0635      	lsls	r5, r6, #24
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	d501      	bpl.n	801387c <_printf_i+0x1c4>
 8013878:	6019      	str	r1, [r3, #0]
 801387a:	e002      	b.n	8013882 <_printf_i+0x1ca>
 801387c:	0670      	lsls	r0, r6, #25
 801387e:	d5fb      	bpl.n	8013878 <_printf_i+0x1c0>
 8013880:	8019      	strh	r1, [r3, #0]
 8013882:	2300      	movs	r3, #0
 8013884:	6123      	str	r3, [r4, #16]
 8013886:	4615      	mov	r5, r2
 8013888:	e7bc      	b.n	8013804 <_printf_i+0x14c>
 801388a:	682b      	ldr	r3, [r5, #0]
 801388c:	1d1a      	adds	r2, r3, #4
 801388e:	602a      	str	r2, [r5, #0]
 8013890:	681d      	ldr	r5, [r3, #0]
 8013892:	6862      	ldr	r2, [r4, #4]
 8013894:	2100      	movs	r1, #0
 8013896:	4628      	mov	r0, r5
 8013898:	f7ec fcba 	bl	8000210 <memchr>
 801389c:	b108      	cbz	r0, 80138a2 <_printf_i+0x1ea>
 801389e:	1b40      	subs	r0, r0, r5
 80138a0:	6060      	str	r0, [r4, #4]
 80138a2:	6863      	ldr	r3, [r4, #4]
 80138a4:	6123      	str	r3, [r4, #16]
 80138a6:	2300      	movs	r3, #0
 80138a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138ac:	e7aa      	b.n	8013804 <_printf_i+0x14c>
 80138ae:	6923      	ldr	r3, [r4, #16]
 80138b0:	462a      	mov	r2, r5
 80138b2:	4649      	mov	r1, r9
 80138b4:	4640      	mov	r0, r8
 80138b6:	47d0      	blx	sl
 80138b8:	3001      	adds	r0, #1
 80138ba:	d0ad      	beq.n	8013818 <_printf_i+0x160>
 80138bc:	6823      	ldr	r3, [r4, #0]
 80138be:	079b      	lsls	r3, r3, #30
 80138c0:	d413      	bmi.n	80138ea <_printf_i+0x232>
 80138c2:	68e0      	ldr	r0, [r4, #12]
 80138c4:	9b03      	ldr	r3, [sp, #12]
 80138c6:	4298      	cmp	r0, r3
 80138c8:	bfb8      	it	lt
 80138ca:	4618      	movlt	r0, r3
 80138cc:	e7a6      	b.n	801381c <_printf_i+0x164>
 80138ce:	2301      	movs	r3, #1
 80138d0:	4632      	mov	r2, r6
 80138d2:	4649      	mov	r1, r9
 80138d4:	4640      	mov	r0, r8
 80138d6:	47d0      	blx	sl
 80138d8:	3001      	adds	r0, #1
 80138da:	d09d      	beq.n	8013818 <_printf_i+0x160>
 80138dc:	3501      	adds	r5, #1
 80138de:	68e3      	ldr	r3, [r4, #12]
 80138e0:	9903      	ldr	r1, [sp, #12]
 80138e2:	1a5b      	subs	r3, r3, r1
 80138e4:	42ab      	cmp	r3, r5
 80138e6:	dcf2      	bgt.n	80138ce <_printf_i+0x216>
 80138e8:	e7eb      	b.n	80138c2 <_printf_i+0x20a>
 80138ea:	2500      	movs	r5, #0
 80138ec:	f104 0619 	add.w	r6, r4, #25
 80138f0:	e7f5      	b.n	80138de <_printf_i+0x226>
 80138f2:	bf00      	nop
 80138f4:	08016cde 	.word	0x08016cde
 80138f8:	08016cef 	.word	0x08016cef

080138fc <__sflush_r>:
 80138fc:	898a      	ldrh	r2, [r1, #12]
 80138fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013902:	4605      	mov	r5, r0
 8013904:	0710      	lsls	r0, r2, #28
 8013906:	460c      	mov	r4, r1
 8013908:	d458      	bmi.n	80139bc <__sflush_r+0xc0>
 801390a:	684b      	ldr	r3, [r1, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	dc05      	bgt.n	801391c <__sflush_r+0x20>
 8013910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013912:	2b00      	cmp	r3, #0
 8013914:	dc02      	bgt.n	801391c <__sflush_r+0x20>
 8013916:	2000      	movs	r0, #0
 8013918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801391c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801391e:	2e00      	cmp	r6, #0
 8013920:	d0f9      	beq.n	8013916 <__sflush_r+0x1a>
 8013922:	2300      	movs	r3, #0
 8013924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013928:	682f      	ldr	r7, [r5, #0]
 801392a:	6a21      	ldr	r1, [r4, #32]
 801392c:	602b      	str	r3, [r5, #0]
 801392e:	d032      	beq.n	8013996 <__sflush_r+0x9a>
 8013930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013932:	89a3      	ldrh	r3, [r4, #12]
 8013934:	075a      	lsls	r2, r3, #29
 8013936:	d505      	bpl.n	8013944 <__sflush_r+0x48>
 8013938:	6863      	ldr	r3, [r4, #4]
 801393a:	1ac0      	subs	r0, r0, r3
 801393c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801393e:	b10b      	cbz	r3, 8013944 <__sflush_r+0x48>
 8013940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013942:	1ac0      	subs	r0, r0, r3
 8013944:	2300      	movs	r3, #0
 8013946:	4602      	mov	r2, r0
 8013948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801394a:	6a21      	ldr	r1, [r4, #32]
 801394c:	4628      	mov	r0, r5
 801394e:	47b0      	blx	r6
 8013950:	1c43      	adds	r3, r0, #1
 8013952:	89a3      	ldrh	r3, [r4, #12]
 8013954:	d106      	bne.n	8013964 <__sflush_r+0x68>
 8013956:	6829      	ldr	r1, [r5, #0]
 8013958:	291d      	cmp	r1, #29
 801395a:	d82b      	bhi.n	80139b4 <__sflush_r+0xb8>
 801395c:	4a29      	ldr	r2, [pc, #164]	; (8013a04 <__sflush_r+0x108>)
 801395e:	410a      	asrs	r2, r1
 8013960:	07d6      	lsls	r6, r2, #31
 8013962:	d427      	bmi.n	80139b4 <__sflush_r+0xb8>
 8013964:	2200      	movs	r2, #0
 8013966:	6062      	str	r2, [r4, #4]
 8013968:	04d9      	lsls	r1, r3, #19
 801396a:	6922      	ldr	r2, [r4, #16]
 801396c:	6022      	str	r2, [r4, #0]
 801396e:	d504      	bpl.n	801397a <__sflush_r+0x7e>
 8013970:	1c42      	adds	r2, r0, #1
 8013972:	d101      	bne.n	8013978 <__sflush_r+0x7c>
 8013974:	682b      	ldr	r3, [r5, #0]
 8013976:	b903      	cbnz	r3, 801397a <__sflush_r+0x7e>
 8013978:	6560      	str	r0, [r4, #84]	; 0x54
 801397a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801397c:	602f      	str	r7, [r5, #0]
 801397e:	2900      	cmp	r1, #0
 8013980:	d0c9      	beq.n	8013916 <__sflush_r+0x1a>
 8013982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013986:	4299      	cmp	r1, r3
 8013988:	d002      	beq.n	8013990 <__sflush_r+0x94>
 801398a:	4628      	mov	r0, r5
 801398c:	f7ff fbe2 	bl	8013154 <_free_r>
 8013990:	2000      	movs	r0, #0
 8013992:	6360      	str	r0, [r4, #52]	; 0x34
 8013994:	e7c0      	b.n	8013918 <__sflush_r+0x1c>
 8013996:	2301      	movs	r3, #1
 8013998:	4628      	mov	r0, r5
 801399a:	47b0      	blx	r6
 801399c:	1c41      	adds	r1, r0, #1
 801399e:	d1c8      	bne.n	8013932 <__sflush_r+0x36>
 80139a0:	682b      	ldr	r3, [r5, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d0c5      	beq.n	8013932 <__sflush_r+0x36>
 80139a6:	2b1d      	cmp	r3, #29
 80139a8:	d001      	beq.n	80139ae <__sflush_r+0xb2>
 80139aa:	2b16      	cmp	r3, #22
 80139ac:	d101      	bne.n	80139b2 <__sflush_r+0xb6>
 80139ae:	602f      	str	r7, [r5, #0]
 80139b0:	e7b1      	b.n	8013916 <__sflush_r+0x1a>
 80139b2:	89a3      	ldrh	r3, [r4, #12]
 80139b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139b8:	81a3      	strh	r3, [r4, #12]
 80139ba:	e7ad      	b.n	8013918 <__sflush_r+0x1c>
 80139bc:	690f      	ldr	r7, [r1, #16]
 80139be:	2f00      	cmp	r7, #0
 80139c0:	d0a9      	beq.n	8013916 <__sflush_r+0x1a>
 80139c2:	0793      	lsls	r3, r2, #30
 80139c4:	680e      	ldr	r6, [r1, #0]
 80139c6:	bf08      	it	eq
 80139c8:	694b      	ldreq	r3, [r1, #20]
 80139ca:	600f      	str	r7, [r1, #0]
 80139cc:	bf18      	it	ne
 80139ce:	2300      	movne	r3, #0
 80139d0:	eba6 0807 	sub.w	r8, r6, r7
 80139d4:	608b      	str	r3, [r1, #8]
 80139d6:	f1b8 0f00 	cmp.w	r8, #0
 80139da:	dd9c      	ble.n	8013916 <__sflush_r+0x1a>
 80139dc:	6a21      	ldr	r1, [r4, #32]
 80139de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139e0:	4643      	mov	r3, r8
 80139e2:	463a      	mov	r2, r7
 80139e4:	4628      	mov	r0, r5
 80139e6:	47b0      	blx	r6
 80139e8:	2800      	cmp	r0, #0
 80139ea:	dc06      	bgt.n	80139fa <__sflush_r+0xfe>
 80139ec:	89a3      	ldrh	r3, [r4, #12]
 80139ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139f2:	81a3      	strh	r3, [r4, #12]
 80139f4:	f04f 30ff 	mov.w	r0, #4294967295
 80139f8:	e78e      	b.n	8013918 <__sflush_r+0x1c>
 80139fa:	4407      	add	r7, r0
 80139fc:	eba8 0800 	sub.w	r8, r8, r0
 8013a00:	e7e9      	b.n	80139d6 <__sflush_r+0xda>
 8013a02:	bf00      	nop
 8013a04:	dfbffffe 	.word	0xdfbffffe

08013a08 <_fflush_r>:
 8013a08:	b538      	push	{r3, r4, r5, lr}
 8013a0a:	690b      	ldr	r3, [r1, #16]
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	460c      	mov	r4, r1
 8013a10:	b913      	cbnz	r3, 8013a18 <_fflush_r+0x10>
 8013a12:	2500      	movs	r5, #0
 8013a14:	4628      	mov	r0, r5
 8013a16:	bd38      	pop	{r3, r4, r5, pc}
 8013a18:	b118      	cbz	r0, 8013a22 <_fflush_r+0x1a>
 8013a1a:	6a03      	ldr	r3, [r0, #32]
 8013a1c:	b90b      	cbnz	r3, 8013a22 <_fflush_r+0x1a>
 8013a1e:	f7ff fa5d 	bl	8012edc <__sinit>
 8013a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d0f3      	beq.n	8013a12 <_fflush_r+0xa>
 8013a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a2c:	07d0      	lsls	r0, r2, #31
 8013a2e:	d404      	bmi.n	8013a3a <_fflush_r+0x32>
 8013a30:	0599      	lsls	r1, r3, #22
 8013a32:	d402      	bmi.n	8013a3a <_fflush_r+0x32>
 8013a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a36:	f7ff fb5f 	bl	80130f8 <__retarget_lock_acquire_recursive>
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	4621      	mov	r1, r4
 8013a3e:	f7ff ff5d 	bl	80138fc <__sflush_r>
 8013a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a44:	07da      	lsls	r2, r3, #31
 8013a46:	4605      	mov	r5, r0
 8013a48:	d4e4      	bmi.n	8013a14 <_fflush_r+0xc>
 8013a4a:	89a3      	ldrh	r3, [r4, #12]
 8013a4c:	059b      	lsls	r3, r3, #22
 8013a4e:	d4e1      	bmi.n	8013a14 <_fflush_r+0xc>
 8013a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a52:	f7ff fb52 	bl	80130fa <__retarget_lock_release_recursive>
 8013a56:	e7dd      	b.n	8013a14 <_fflush_r+0xc>

08013a58 <fiprintf>:
 8013a58:	b40e      	push	{r1, r2, r3}
 8013a5a:	b503      	push	{r0, r1, lr}
 8013a5c:	4601      	mov	r1, r0
 8013a5e:	ab03      	add	r3, sp, #12
 8013a60:	4805      	ldr	r0, [pc, #20]	; (8013a78 <fiprintf+0x20>)
 8013a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a66:	6800      	ldr	r0, [r0, #0]
 8013a68:	9301      	str	r3, [sp, #4]
 8013a6a:	f7ff fc9d 	bl	80133a8 <_vfiprintf_r>
 8013a6e:	b002      	add	sp, #8
 8013a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a74:	b003      	add	sp, #12
 8013a76:	4770      	bx	lr
 8013a78:	20000070 	.word	0x20000070

08013a7c <__swbuf_r>:
 8013a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a7e:	460e      	mov	r6, r1
 8013a80:	4614      	mov	r4, r2
 8013a82:	4605      	mov	r5, r0
 8013a84:	b118      	cbz	r0, 8013a8e <__swbuf_r+0x12>
 8013a86:	6a03      	ldr	r3, [r0, #32]
 8013a88:	b90b      	cbnz	r3, 8013a8e <__swbuf_r+0x12>
 8013a8a:	f7ff fa27 	bl	8012edc <__sinit>
 8013a8e:	69a3      	ldr	r3, [r4, #24]
 8013a90:	60a3      	str	r3, [r4, #8]
 8013a92:	89a3      	ldrh	r3, [r4, #12]
 8013a94:	071a      	lsls	r2, r3, #28
 8013a96:	d525      	bpl.n	8013ae4 <__swbuf_r+0x68>
 8013a98:	6923      	ldr	r3, [r4, #16]
 8013a9a:	b31b      	cbz	r3, 8013ae4 <__swbuf_r+0x68>
 8013a9c:	6823      	ldr	r3, [r4, #0]
 8013a9e:	6922      	ldr	r2, [r4, #16]
 8013aa0:	1a98      	subs	r0, r3, r2
 8013aa2:	6963      	ldr	r3, [r4, #20]
 8013aa4:	b2f6      	uxtb	r6, r6
 8013aa6:	4283      	cmp	r3, r0
 8013aa8:	4637      	mov	r7, r6
 8013aaa:	dc04      	bgt.n	8013ab6 <__swbuf_r+0x3a>
 8013aac:	4621      	mov	r1, r4
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f7ff ffaa 	bl	8013a08 <_fflush_r>
 8013ab4:	b9e0      	cbnz	r0, 8013af0 <__swbuf_r+0x74>
 8013ab6:	68a3      	ldr	r3, [r4, #8]
 8013ab8:	3b01      	subs	r3, #1
 8013aba:	60a3      	str	r3, [r4, #8]
 8013abc:	6823      	ldr	r3, [r4, #0]
 8013abe:	1c5a      	adds	r2, r3, #1
 8013ac0:	6022      	str	r2, [r4, #0]
 8013ac2:	701e      	strb	r6, [r3, #0]
 8013ac4:	6962      	ldr	r2, [r4, #20]
 8013ac6:	1c43      	adds	r3, r0, #1
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d004      	beq.n	8013ad6 <__swbuf_r+0x5a>
 8013acc:	89a3      	ldrh	r3, [r4, #12]
 8013ace:	07db      	lsls	r3, r3, #31
 8013ad0:	d506      	bpl.n	8013ae0 <__swbuf_r+0x64>
 8013ad2:	2e0a      	cmp	r6, #10
 8013ad4:	d104      	bne.n	8013ae0 <__swbuf_r+0x64>
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	4628      	mov	r0, r5
 8013ada:	f7ff ff95 	bl	8013a08 <_fflush_r>
 8013ade:	b938      	cbnz	r0, 8013af0 <__swbuf_r+0x74>
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae4:	4621      	mov	r1, r4
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	f000 f806 	bl	8013af8 <__swsetup_r>
 8013aec:	2800      	cmp	r0, #0
 8013aee:	d0d5      	beq.n	8013a9c <__swbuf_r+0x20>
 8013af0:	f04f 37ff 	mov.w	r7, #4294967295
 8013af4:	e7f4      	b.n	8013ae0 <__swbuf_r+0x64>
	...

08013af8 <__swsetup_r>:
 8013af8:	b538      	push	{r3, r4, r5, lr}
 8013afa:	4b2a      	ldr	r3, [pc, #168]	; (8013ba4 <__swsetup_r+0xac>)
 8013afc:	4605      	mov	r5, r0
 8013afe:	6818      	ldr	r0, [r3, #0]
 8013b00:	460c      	mov	r4, r1
 8013b02:	b118      	cbz	r0, 8013b0c <__swsetup_r+0x14>
 8013b04:	6a03      	ldr	r3, [r0, #32]
 8013b06:	b90b      	cbnz	r3, 8013b0c <__swsetup_r+0x14>
 8013b08:	f7ff f9e8 	bl	8012edc <__sinit>
 8013b0c:	89a3      	ldrh	r3, [r4, #12]
 8013b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b12:	0718      	lsls	r0, r3, #28
 8013b14:	d422      	bmi.n	8013b5c <__swsetup_r+0x64>
 8013b16:	06d9      	lsls	r1, r3, #27
 8013b18:	d407      	bmi.n	8013b2a <__swsetup_r+0x32>
 8013b1a:	2309      	movs	r3, #9
 8013b1c:	602b      	str	r3, [r5, #0]
 8013b1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013b22:	81a3      	strh	r3, [r4, #12]
 8013b24:	f04f 30ff 	mov.w	r0, #4294967295
 8013b28:	e034      	b.n	8013b94 <__swsetup_r+0x9c>
 8013b2a:	0758      	lsls	r0, r3, #29
 8013b2c:	d512      	bpl.n	8013b54 <__swsetup_r+0x5c>
 8013b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b30:	b141      	cbz	r1, 8013b44 <__swsetup_r+0x4c>
 8013b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b36:	4299      	cmp	r1, r3
 8013b38:	d002      	beq.n	8013b40 <__swsetup_r+0x48>
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	f7ff fb0a 	bl	8013154 <_free_r>
 8013b40:	2300      	movs	r3, #0
 8013b42:	6363      	str	r3, [r4, #52]	; 0x34
 8013b44:	89a3      	ldrh	r3, [r4, #12]
 8013b46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013b4a:	81a3      	strh	r3, [r4, #12]
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	6063      	str	r3, [r4, #4]
 8013b50:	6923      	ldr	r3, [r4, #16]
 8013b52:	6023      	str	r3, [r4, #0]
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	f043 0308 	orr.w	r3, r3, #8
 8013b5a:	81a3      	strh	r3, [r4, #12]
 8013b5c:	6923      	ldr	r3, [r4, #16]
 8013b5e:	b94b      	cbnz	r3, 8013b74 <__swsetup_r+0x7c>
 8013b60:	89a3      	ldrh	r3, [r4, #12]
 8013b62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b6a:	d003      	beq.n	8013b74 <__swsetup_r+0x7c>
 8013b6c:	4621      	mov	r1, r4
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f000 f857 	bl	8013c22 <__smakebuf_r>
 8013b74:	89a0      	ldrh	r0, [r4, #12]
 8013b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b7a:	f010 0301 	ands.w	r3, r0, #1
 8013b7e:	d00a      	beq.n	8013b96 <__swsetup_r+0x9e>
 8013b80:	2300      	movs	r3, #0
 8013b82:	60a3      	str	r3, [r4, #8]
 8013b84:	6963      	ldr	r3, [r4, #20]
 8013b86:	425b      	negs	r3, r3
 8013b88:	61a3      	str	r3, [r4, #24]
 8013b8a:	6923      	ldr	r3, [r4, #16]
 8013b8c:	b943      	cbnz	r3, 8013ba0 <__swsetup_r+0xa8>
 8013b8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b92:	d1c4      	bne.n	8013b1e <__swsetup_r+0x26>
 8013b94:	bd38      	pop	{r3, r4, r5, pc}
 8013b96:	0781      	lsls	r1, r0, #30
 8013b98:	bf58      	it	pl
 8013b9a:	6963      	ldrpl	r3, [r4, #20]
 8013b9c:	60a3      	str	r3, [r4, #8]
 8013b9e:	e7f4      	b.n	8013b8a <__swsetup_r+0x92>
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	e7f7      	b.n	8013b94 <__swsetup_r+0x9c>
 8013ba4:	20000070 	.word	0x20000070

08013ba8 <_sbrk_r>:
 8013ba8:	b538      	push	{r3, r4, r5, lr}
 8013baa:	4d06      	ldr	r5, [pc, #24]	; (8013bc4 <_sbrk_r+0x1c>)
 8013bac:	2300      	movs	r3, #0
 8013bae:	4604      	mov	r4, r0
 8013bb0:	4608      	mov	r0, r1
 8013bb2:	602b      	str	r3, [r5, #0]
 8013bb4:	f7ed ff00 	bl	80019b8 <_sbrk>
 8013bb8:	1c43      	adds	r3, r0, #1
 8013bba:	d102      	bne.n	8013bc2 <_sbrk_r+0x1a>
 8013bbc:	682b      	ldr	r3, [r5, #0]
 8013bbe:	b103      	cbz	r3, 8013bc2 <_sbrk_r+0x1a>
 8013bc0:	6023      	str	r3, [r4, #0]
 8013bc2:	bd38      	pop	{r3, r4, r5, pc}
 8013bc4:	20008a98 	.word	0x20008a98

08013bc8 <abort>:
 8013bc8:	b508      	push	{r3, lr}
 8013bca:	2006      	movs	r0, #6
 8013bcc:	f000 f88e 	bl	8013cec <raise>
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	f7ed fe79 	bl	80018c8 <_exit>

08013bd6 <__swhatbuf_r>:
 8013bd6:	b570      	push	{r4, r5, r6, lr}
 8013bd8:	460c      	mov	r4, r1
 8013bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bde:	2900      	cmp	r1, #0
 8013be0:	b096      	sub	sp, #88	; 0x58
 8013be2:	4615      	mov	r5, r2
 8013be4:	461e      	mov	r6, r3
 8013be6:	da0d      	bge.n	8013c04 <__swhatbuf_r+0x2e>
 8013be8:	89a3      	ldrh	r3, [r4, #12]
 8013bea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013bee:	f04f 0100 	mov.w	r1, #0
 8013bf2:	bf0c      	ite	eq
 8013bf4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013bf8:	2340      	movne	r3, #64	; 0x40
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	6031      	str	r1, [r6, #0]
 8013bfe:	602b      	str	r3, [r5, #0]
 8013c00:	b016      	add	sp, #88	; 0x58
 8013c02:	bd70      	pop	{r4, r5, r6, pc}
 8013c04:	466a      	mov	r2, sp
 8013c06:	f000 f879 	bl	8013cfc <_fstat_r>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	dbec      	blt.n	8013be8 <__swhatbuf_r+0x12>
 8013c0e:	9901      	ldr	r1, [sp, #4]
 8013c10:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013c14:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013c18:	4259      	negs	r1, r3
 8013c1a:	4159      	adcs	r1, r3
 8013c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c20:	e7eb      	b.n	8013bfa <__swhatbuf_r+0x24>

08013c22 <__smakebuf_r>:
 8013c22:	898b      	ldrh	r3, [r1, #12]
 8013c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c26:	079d      	lsls	r5, r3, #30
 8013c28:	4606      	mov	r6, r0
 8013c2a:	460c      	mov	r4, r1
 8013c2c:	d507      	bpl.n	8013c3e <__smakebuf_r+0x1c>
 8013c2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013c32:	6023      	str	r3, [r4, #0]
 8013c34:	6123      	str	r3, [r4, #16]
 8013c36:	2301      	movs	r3, #1
 8013c38:	6163      	str	r3, [r4, #20]
 8013c3a:	b002      	add	sp, #8
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	ab01      	add	r3, sp, #4
 8013c40:	466a      	mov	r2, sp
 8013c42:	f7ff ffc8 	bl	8013bd6 <__swhatbuf_r>
 8013c46:	9900      	ldr	r1, [sp, #0]
 8013c48:	4605      	mov	r5, r0
 8013c4a:	4630      	mov	r0, r6
 8013c4c:	f7ff faf6 	bl	801323c <_malloc_r>
 8013c50:	b948      	cbnz	r0, 8013c66 <__smakebuf_r+0x44>
 8013c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c56:	059a      	lsls	r2, r3, #22
 8013c58:	d4ef      	bmi.n	8013c3a <__smakebuf_r+0x18>
 8013c5a:	f023 0303 	bic.w	r3, r3, #3
 8013c5e:	f043 0302 	orr.w	r3, r3, #2
 8013c62:	81a3      	strh	r3, [r4, #12]
 8013c64:	e7e3      	b.n	8013c2e <__smakebuf_r+0xc>
 8013c66:	89a3      	ldrh	r3, [r4, #12]
 8013c68:	6020      	str	r0, [r4, #0]
 8013c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c6e:	81a3      	strh	r3, [r4, #12]
 8013c70:	9b00      	ldr	r3, [sp, #0]
 8013c72:	6163      	str	r3, [r4, #20]
 8013c74:	9b01      	ldr	r3, [sp, #4]
 8013c76:	6120      	str	r0, [r4, #16]
 8013c78:	b15b      	cbz	r3, 8013c92 <__smakebuf_r+0x70>
 8013c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c7e:	4630      	mov	r0, r6
 8013c80:	f000 f84e 	bl	8013d20 <_isatty_r>
 8013c84:	b128      	cbz	r0, 8013c92 <__smakebuf_r+0x70>
 8013c86:	89a3      	ldrh	r3, [r4, #12]
 8013c88:	f023 0303 	bic.w	r3, r3, #3
 8013c8c:	f043 0301 	orr.w	r3, r3, #1
 8013c90:	81a3      	strh	r3, [r4, #12]
 8013c92:	89a3      	ldrh	r3, [r4, #12]
 8013c94:	431d      	orrs	r5, r3
 8013c96:	81a5      	strh	r5, [r4, #12]
 8013c98:	e7cf      	b.n	8013c3a <__smakebuf_r+0x18>

08013c9a <_raise_r>:
 8013c9a:	291f      	cmp	r1, #31
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	460d      	mov	r5, r1
 8013ca2:	d904      	bls.n	8013cae <_raise_r+0x14>
 8013ca4:	2316      	movs	r3, #22
 8013ca6:	6003      	str	r3, [r0, #0]
 8013ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cac:	bd38      	pop	{r3, r4, r5, pc}
 8013cae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013cb0:	b112      	cbz	r2, 8013cb8 <_raise_r+0x1e>
 8013cb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013cb6:	b94b      	cbnz	r3, 8013ccc <_raise_r+0x32>
 8013cb8:	4620      	mov	r0, r4
 8013cba:	f000 f853 	bl	8013d64 <_getpid_r>
 8013cbe:	462a      	mov	r2, r5
 8013cc0:	4601      	mov	r1, r0
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cc8:	f000 b83a 	b.w	8013d40 <_kill_r>
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d00a      	beq.n	8013ce6 <_raise_r+0x4c>
 8013cd0:	1c59      	adds	r1, r3, #1
 8013cd2:	d103      	bne.n	8013cdc <_raise_r+0x42>
 8013cd4:	2316      	movs	r3, #22
 8013cd6:	6003      	str	r3, [r0, #0]
 8013cd8:	2001      	movs	r0, #1
 8013cda:	e7e7      	b.n	8013cac <_raise_r+0x12>
 8013cdc:	2400      	movs	r4, #0
 8013cde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	4798      	blx	r3
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	e7e0      	b.n	8013cac <_raise_r+0x12>
	...

08013cec <raise>:
 8013cec:	4b02      	ldr	r3, [pc, #8]	; (8013cf8 <raise+0xc>)
 8013cee:	4601      	mov	r1, r0
 8013cf0:	6818      	ldr	r0, [r3, #0]
 8013cf2:	f7ff bfd2 	b.w	8013c9a <_raise_r>
 8013cf6:	bf00      	nop
 8013cf8:	20000070 	.word	0x20000070

08013cfc <_fstat_r>:
 8013cfc:	b538      	push	{r3, r4, r5, lr}
 8013cfe:	4d07      	ldr	r5, [pc, #28]	; (8013d1c <_fstat_r+0x20>)
 8013d00:	2300      	movs	r3, #0
 8013d02:	4604      	mov	r4, r0
 8013d04:	4608      	mov	r0, r1
 8013d06:	4611      	mov	r1, r2
 8013d08:	602b      	str	r3, [r5, #0]
 8013d0a:	f7ed fe2c 	bl	8001966 <_fstat>
 8013d0e:	1c43      	adds	r3, r0, #1
 8013d10:	d102      	bne.n	8013d18 <_fstat_r+0x1c>
 8013d12:	682b      	ldr	r3, [r5, #0]
 8013d14:	b103      	cbz	r3, 8013d18 <_fstat_r+0x1c>
 8013d16:	6023      	str	r3, [r4, #0]
 8013d18:	bd38      	pop	{r3, r4, r5, pc}
 8013d1a:	bf00      	nop
 8013d1c:	20008a98 	.word	0x20008a98

08013d20 <_isatty_r>:
 8013d20:	b538      	push	{r3, r4, r5, lr}
 8013d22:	4d06      	ldr	r5, [pc, #24]	; (8013d3c <_isatty_r+0x1c>)
 8013d24:	2300      	movs	r3, #0
 8013d26:	4604      	mov	r4, r0
 8013d28:	4608      	mov	r0, r1
 8013d2a:	602b      	str	r3, [r5, #0]
 8013d2c:	f7ed fe2b 	bl	8001986 <_isatty>
 8013d30:	1c43      	adds	r3, r0, #1
 8013d32:	d102      	bne.n	8013d3a <_isatty_r+0x1a>
 8013d34:	682b      	ldr	r3, [r5, #0]
 8013d36:	b103      	cbz	r3, 8013d3a <_isatty_r+0x1a>
 8013d38:	6023      	str	r3, [r4, #0]
 8013d3a:	bd38      	pop	{r3, r4, r5, pc}
 8013d3c:	20008a98 	.word	0x20008a98

08013d40 <_kill_r>:
 8013d40:	b538      	push	{r3, r4, r5, lr}
 8013d42:	4d07      	ldr	r5, [pc, #28]	; (8013d60 <_kill_r+0x20>)
 8013d44:	2300      	movs	r3, #0
 8013d46:	4604      	mov	r4, r0
 8013d48:	4608      	mov	r0, r1
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	602b      	str	r3, [r5, #0]
 8013d4e:	f7ed fda9 	bl	80018a4 <_kill>
 8013d52:	1c43      	adds	r3, r0, #1
 8013d54:	d102      	bne.n	8013d5c <_kill_r+0x1c>
 8013d56:	682b      	ldr	r3, [r5, #0]
 8013d58:	b103      	cbz	r3, 8013d5c <_kill_r+0x1c>
 8013d5a:	6023      	str	r3, [r4, #0]
 8013d5c:	bd38      	pop	{r3, r4, r5, pc}
 8013d5e:	bf00      	nop
 8013d60:	20008a98 	.word	0x20008a98

08013d64 <_getpid_r>:
 8013d64:	f7ed bd96 	b.w	8001894 <_getpid>

08013d68 <_init>:
 8013d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d6a:	bf00      	nop
 8013d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d6e:	bc08      	pop	{r3}
 8013d70:	469e      	mov	lr, r3
 8013d72:	4770      	bx	lr

08013d74 <_fini>:
 8013d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d76:	bf00      	nop
 8013d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d7a:	bc08      	pop	{r3}
 8013d7c:	469e      	mov	lr, r3
 8013d7e:	4770      	bx	lr
