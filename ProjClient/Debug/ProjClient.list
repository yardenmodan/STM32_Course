
ProjClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f5c  0801898c  0801898c  0002898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8e8  0801b8e8  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8e8  0801b8e8  0002b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8f0  0801b8f0  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8f0  0801b8f0  0002b8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8f4  0801b8f4  0002b8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801b8f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0801b980  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0801ba20  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008bac  200001c8  0801bac0  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008d74  0801bac0  00038d74  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 15 .debug_info   000353d8  00000000  00000000  0003023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000814d  00000000  00000000  00065613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000027a0  00000000  00000000  0006d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001fb9  00000000  00000000  0006ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a561  00000000  00000000  00071eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004522b  00000000  00000000  000ac41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011c34b  00000000  00000000  000f1645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000af48  00000000  00000000  0020d990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  002188d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018974 	.word	0x08018974

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08018974 	.word	0x08018974

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fd5a 	bl	8002098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f822 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fbb6 	bl	8000d58 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fb4a 	bl	8000c84 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 fb18 	bl	8000c24 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 fae6 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005f8:	f000 fa04 	bl	8000a04 <MX_SPI1_Init>
  MX_I2C2_Init();
 80005fc:	f000 f91e 	bl	800083c <MX_I2C2_Init>
  MX_DAC_Init();
 8000600:	f000 f8f2 	bl	80007e8 <MX_DAC_Init>
  MX_I2C4_Init();
 8000604:	f000 f95a 	bl	80008bc <MX_I2C4_Init>
  MX_UART5_Init();
 8000608:	f000 faac 	bl	8000b64 <MX_UART5_Init>
  MX_LWIP_Init();
 800060c:	f00b fa0e 	bl	800ba2c <MX_LWIP_Init>
  MX_CRC_Init();
 8000610:	f000 f8c8 	bl	80007a4 <MX_CRC_Init>
  MX_ADC1_Init();
 8000614:	f000 f874 	bl	8000700 <MX_ADC1_Init>
  MX_TIM7_Init();
 8000618:	f000 fa6c 	bl	8000af4 <MX_TIM7_Init>
  MX_SPI2_Init();
 800061c:	f000 fa30 	bl	8000a80 <MX_SPI2_Init>
  MX_RTC_Init();
 8000620:	f000 f98c 	bl	800093c <MX_RTC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Testing_Program();
 8000624:	f015 ff70 	bl	8016508 <Testing_Program>
 8000628:	e7fc      	b.n	8000624 <main+0x48>
	...

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f017 f9f0 	bl	8017a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000650:	f006 fde2 	bl	8007218 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000688:	2309      	movs	r3, #9
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006a4:	2348      	movs	r3, #72	; 0x48
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f006 fdbf 	bl	8007238 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 fbf0 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 f84d 	bl	8007780 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 fbda 	bl	8000ea4 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0x98>)
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_ADC1_Init+0x9c>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_ADC1_Init+0x98>)
 800072c:	2201      	movs	r2, #1
 800072e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_ADC1_Init+0x98>)
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_ADC1_Init+0xa0>)
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_ADC1_Init+0x98>)
 800074c:	2201      	movs	r2, #1
 800074e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC1_Init+0x98>)
 8000752:	2201      	movs	r2, #1
 8000754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075e:	480e      	ldr	r0, [pc, #56]	; (8000798 <MX_ADC1_Init+0x98>)
 8000760:	f001 fd1c 	bl	800219c <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 fb9b 	bl	8000ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076e:	2303      	movs	r3, #3
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000772:	2301      	movs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_ADC1_Init+0x98>)
 8000780:	f001 ff86 	bl	8002690 <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800078a:	f000 fb8b 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001e4 	.word	0x200001e4
 800079c:	40012000 	.word	0x40012000
 80007a0:	0f000001 	.word	0x0f000001

080007a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <MX_CRC_Init+0x40>)
 80007ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_CRC_Init+0x3c>)
 80007ce:	f002 fb4d 	bl	8002e6c <HAL_CRC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007d8:	f000 fb64 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000028c 	.word	0x2000028c
 80007e4:	40023000 	.word	0x40023000

080007e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_DAC_Init+0x4c>)
 80007f8:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <MX_DAC_Init+0x50>)
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_DAC_Init+0x4c>)
 80007fe:	f002 fd33 	bl	8003268 <HAL_DAC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000808:	f000 fb4c 	bl	8000ea4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800080c:	233c      	movs	r3, #60	; 0x3c
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_DAC_Init+0x4c>)
 800081c:	f002 fe21 	bl	8003462 <HAL_DAC_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000826:	f000 fb3d 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200002b0 	.word	0x200002b0
 8000838:	40007400 	.word	0x40007400

0800083c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_I2C2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <MX_I2C2_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 2;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_I2C2_Init+0x74>)
 800084e:	2202      	movs	r2, #2
 8000850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <MX_I2C2_Init+0x74>)
 8000878:	f004 fe10 	bl	800549c <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 fb0f 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_I2C2_Init+0x74>)
 800088a:	f006 fc2d 	bl	80070e8 <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 fb06 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_I2C2_Init+0x74>)
 800089c:	f006 fc6f 	bl	800717e <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 fafd 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200002c4 	.word	0x200002c4
 80008b4:	40005800 	.word	0x40005800
 80008b8:	00808cd2 	.word	0x00808cd2

080008bc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C4_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C4_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C4_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C4_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C4_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C4_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C4_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C4_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C4_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C4_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C4_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <MX_I2C4_Init+0x74>)
 80008f8:	f004 fdd0 	bl	800549c <HAL_I2C_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 facf 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_I2C4_Init+0x74>)
 800090a:	f006 fbed 	bl	80070e8 <HAL_I2CEx_ConfigAnalogFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 fac6 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_I2C4_Init+0x74>)
 800091c:	f006 fc2f 	bl	800717e <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 fabd 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000318 	.word	0x20000318
 8000934:	40006000 	.word	0x40006000
 8000938:	00808cd2 	.word	0x00808cd2

0800093c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000950:	2300      	movs	r3, #0
 8000952:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_RTC_Init+0xc0>)
 8000956:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <MX_RTC_Init+0xc4>)
 8000958:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_RTC_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_RTC_Init+0xc0>)
 8000962:	227f      	movs	r2, #127	; 0x7f
 8000964:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_RTC_Init+0xc0>)
 8000968:	22ff      	movs	r2, #255	; 0xff
 800096a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_RTC_Init+0xc0>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_RTC_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_RTC_Init+0xc0>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800097e:	481f      	ldr	r0, [pc, #124]	; (80009fc <MX_RTC_Init+0xc0>)
 8000980:	f007 fd14 	bl	80083ac <HAL_RTC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800098a:	f000 fa8b 	bl	8000ea4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800098e:	2300      	movs	r3, #0
 8000990:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000992:	2300      	movs	r3, #0
 8000994:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000996:	2300      	movs	r3, #0
 8000998:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2201      	movs	r2, #1
 80009a6:	4619      	mov	r1, r3
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <MX_RTC_Init+0xc0>)
 80009aa:	f007 fd83 	bl	80084b4 <HAL_RTC_SetTime>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80009b4:	f000 fa76 	bl	8000ea4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009b8:	2301      	movs	r3, #1
 80009ba:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009bc:	2301      	movs	r3, #1
 80009be:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_RTC_Init+0xc0>)
 80009d0:	f007 fe68 	bl	80086a4 <HAL_RTC_SetDate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80009da:	f000 fa63 	bl	8000ea4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_RTC_Init+0xc0>)
 80009e4:	f007 ffa2 	bl	800892c <HAL_RTCEx_SetWakeUpTimer>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80009ee:	f000 fa59 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000042c 	.word	0x2000042c
 8000a00:	40002800 	.word	0x40002800

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_SPI1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a1c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a60:	2208      	movs	r2, #8
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a66:	f007 fffe 	bl	8008a66 <HAL_SPI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000a70:	f000 fa18 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000044c 	.word	0x2000044c
 8000a7c:	40013000 	.word	0x40013000

08000a80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <MX_SPI2_Init+0x70>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000a92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000a9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000ac6:	2207      	movs	r2, #7
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_SPI2_Init+0x6c>)
 8000ad8:	f007 ffc5 	bl	8008a66 <HAL_SPI_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000ae2:	f000 f9df 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200004b0 	.word	0x200004b0
 8000af0:	40003800 	.word	0x40003800

08000af4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <MX_TIM7_Init+0x6c>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000-1;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b0c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000b10:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b28:	f009 f96f 	bl	8009e0a <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000b32:	f000 f9b7 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b44:	f009 fc46 	bl	800a3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000b4e:	f000 f9a9 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000694 	.word	0x20000694
 8000b60:	40001400 	.word	0x40001400

08000b64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_UART5_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_UART5_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_UART5_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_UART5_Init+0x58>)
 8000ba8:	f009 fcc0 	bl	800a52c <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f000 f977 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200006e0 	.word	0x200006e0
 8000bc0:	40005000 	.word	0x40005000

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <MX_USART2_UART_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c08:	f009 fc90 	bl	800a52c <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f947 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000768 	.word	0x20000768
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <MX_USART3_UART_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c68:	f009 fc60 	bl	800a52c <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f917 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200007f0 	.word	0x200007f0
 8000c80:	40004800 	.word	0x40004800

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8a:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <MX_DMA_Init+0xd0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <MX_DMA_Init+0xd0>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <MX_DMA_Init+0xd0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <MX_DMA_Init+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <MX_DMA_Init+0xd0>)
 8000ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <MX_DMA_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	200b      	movs	r0, #11
 8000cc0:	f002 f89d 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cc4:	200b      	movs	r0, #11
 8000cc6:	f002 f8b6 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	200d      	movs	r0, #13
 8000cd0:	f002 f895 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cd4:	200d      	movs	r0, #13
 8000cd6:	f002 f8ae 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200e      	movs	r0, #14
 8000ce0:	f002 f88d 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ce4:	200e      	movs	r0, #14
 8000ce6:	f002 f8a6 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f002 f885 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000cf4:	200f      	movs	r0, #15
 8000cf6:	f002 f89e 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2010      	movs	r0, #16
 8000d00:	f002 f87d 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d04:	2010      	movs	r0, #16
 8000d06:	f002 f896 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	202f      	movs	r0, #47	; 0x2f
 8000d10:	f002 f875 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d14:	202f      	movs	r0, #47	; 0x2f
 8000d16:	f002 f88e 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2038      	movs	r0, #56	; 0x38
 8000d20:	f002 f86d 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d24:	2038      	movs	r0, #56	; 0x38
 8000d26:	f002 f886 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	203a      	movs	r0, #58	; 0x3a
 8000d30:	f002 f865 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d34:	203a      	movs	r0, #58	; 0x3a
 8000d36:	f002 f87e 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	203b      	movs	r0, #59	; 0x3b
 8000d40:	f002 f85d 	bl	8002dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d44:	203b      	movs	r0, #59	; 0x3b
 8000d46:	f002 f876 	bl	8002e36 <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a49      	ldr	r2, [pc, #292]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b3e      	ldr	r3, [pc, #248]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3d      	ldr	r2, [pc, #244]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a37      	ldr	r2, [pc, #220]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a25      	ldr	r2, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <MX_GPIO_Init+0x140>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2140      	movs	r1, #64	; 0x40
 8000e1a:	4820      	ldr	r0, [pc, #128]	; (8000e9c <MX_GPIO_Init+0x144>)
 8000e1c:	f004 fb24 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e20:	2340      	movs	r3, #64	; 0x40
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4819      	ldr	r0, [pc, #100]	; (8000e9c <MX_GPIO_Init+0x144>)
 8000e38:	f004 f96a 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_GPIO_Init+0x144>)
 8000e50:	f004 f95e 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e66:	230a      	movs	r3, #10
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <MX_GPIO_Init+0x148>)
 8000e72:	f004 f94d 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_GPIO_Init+0x148>)
 8000e8c:	f004 f940 	bl	8005110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	; 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x44>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_MspInit+0x44>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <HAL_ADC_MspInit+0xe0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d15a      	bne.n	8000fd0 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <HAL_ADC_MspInit+0xe4>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <HAL_ADC_MspInit+0xe4>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_ADC_MspInit+0xe4>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_ADC_MspInit+0xe4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <HAL_ADC_MspInit+0xe4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_ADC_MspInit+0xe4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f5e:	f004 f8d7 	bl	8005110 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f64:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <HAL_ADC_MspInit+0xf0>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000fa6:	f002 fab5 	bl	8003514 <HAL_DMA_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000fb0:	f7ff ff78 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2012      	movs	r0, #18
 8000fc6:	f001 ff1a 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fca:	2012      	movs	r0, #18
 8000fcc:	f001 ff33 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40012000 	.word	0x40012000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	2000022c 	.word	0x2000022c
 8000fe8:	40026410 	.word	0x40026410

08000fec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_CRC_MspInit+0x38>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10b      	bne.n	8001016 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_CRC_MspInit+0x3c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <HAL_CRC_MspInit+0x3c>)
 8001004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_CRC_MspInit+0x3c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023000 	.word	0x40023000
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_DAC_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12b      	bne.n	80010a6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 8001054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_DAC_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800107e:	2310      	movs	r3, #16
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_DAC_MspInit+0x8c>)
 8001092:	f004 f83d 	bl	8005110 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2036      	movs	r0, #54	; 0x36
 800109c:	f001 feaf 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a0:	2036      	movs	r0, #54	; 0x36
 80010a2:	f001 fec8 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40007400 	.word	0x40007400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ac      	sub	sp, #176	; 0xb0
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	2284      	movs	r2, #132	; 0x84
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f016 fc9f 	bl	8017a20 <memset>
  if(hi2c->Instance==I2C2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a82      	ldr	r2, [pc, #520]	; (80012f0 <HAL_I2C_MspInit+0x234>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	f040 80aa 	bne.w	8001242 <HAL_I2C_MspInit+0x186>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4618      	mov	r0, r3
 8001100:	f006 fd64 	bl	8007bcc <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800110a:	f7ff fecb 	bl	8000ea4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800110e:	4b79      	ldr	r3, [pc, #484]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a78      	ldr	r2, [pc, #480]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 8001114:	f043 0320 	orr.w	r3, r3, #32
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b76      	ldr	r3, [pc, #472]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800113e:	2304      	movs	r3, #4
 8001140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001144:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001148:	4619      	mov	r1, r3
 800114a:	486b      	ldr	r0, [pc, #428]	; (80012f8 <HAL_I2C_MspInit+0x23c>)
 800114c:	f003 ffe0 	bl	8005110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001150:	4b68      	ldr	r3, [pc, #416]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a67      	ldr	r2, [pc, #412]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 8001156:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b65      	ldr	r3, [pc, #404]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_I2C_MspInit+0x240>)
 800116a:	4a65      	ldr	r2, [pc, #404]	; (8001300 <HAL_I2C_MspInit+0x244>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800116e:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_I2C_MspInit+0x240>)
 8001170:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001174:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001176:	4b61      	ldr	r3, [pc, #388]	; (80012fc <HAL_I2C_MspInit+0x240>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117c:	4b5f      	ldr	r3, [pc, #380]	; (80012fc <HAL_I2C_MspInit+0x240>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001182:	4b5e      	ldr	r3, [pc, #376]	; (80012fc <HAL_I2C_MspInit+0x240>)
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118a:	4b5c      	ldr	r3, [pc, #368]	; (80012fc <HAL_I2C_MspInit+0x240>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001190:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <HAL_I2C_MspInit+0x240>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001196:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_I2C_MspInit+0x240>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b57      	ldr	r3, [pc, #348]	; (80012fc <HAL_I2C_MspInit+0x240>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a2:	4b56      	ldr	r3, [pc, #344]	; (80012fc <HAL_I2C_MspInit+0x240>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80011a8:	4854      	ldr	r0, [pc, #336]	; (80012fc <HAL_I2C_MspInit+0x240>)
 80011aa:	f002 f9b3 	bl	8003514 <HAL_DMA_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80011b4:	f7ff fe76 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_I2C_MspInit+0x240>)
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80011be:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_I2C_MspInit+0x240>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80011c4:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011c6:	4a50      	ldr	r2, [pc, #320]	; (8001308 <HAL_I2C_MspInit+0x24c>)
 80011c8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80011ca:	4b4e      	ldr	r3, [pc, #312]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011cc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011d0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d2:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d8:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011de:	4b49      	ldr	r3, [pc, #292]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ec:	4b45      	ldr	r3, [pc, #276]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011f2:	4b44      	ldr	r3, [pc, #272]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f8:	4b42      	ldr	r3, [pc, #264]	; (8001304 <HAL_I2C_MspInit+0x248>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fe:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_I2C_MspInit+0x248>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001204:	483f      	ldr	r0, [pc, #252]	; (8001304 <HAL_I2C_MspInit+0x248>)
 8001206:	f002 f985 	bl	8003514 <HAL_DMA_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001210:	f7ff fe48 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <HAL_I2C_MspInit+0x248>)
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
 800121a:	4a3a      	ldr	r2, [pc, #232]	; (8001304 <HAL_I2C_MspInit+0x248>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2021      	movs	r0, #33	; 0x21
 8001226:	f001 fdea 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800122a:	2021      	movs	r0, #33	; 0x21
 800122c:	f001 fe03 	bl	8002e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2022      	movs	r0, #34	; 0x22
 8001236:	f001 fde2 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800123a:	2022      	movs	r0, #34	; 0x22
 800123c:	f001 fdfb 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001240:	e052      	b.n	80012e8 <HAL_I2C_MspInit+0x22c>
  else if(hi2c->Instance==I2C4)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_I2C_MspInit+0x250>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d14d      	bne.n	80012e8 <HAL_I2C_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800124c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001250:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4618      	mov	r0, r3
 800125e:	f006 fcb5 	bl	8007bcc <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_I2C_MspInit+0x1b0>
      Error_Handler();
 8001268:	f7ff fe1c 	bl	8000ea4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 8001272:	f043 0320 	orr.w	r3, r3, #32
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001284:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	2312      	movs	r3, #18
 800128e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800129e:	2304      	movs	r3, #4
 80012a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a8:	4619      	mov	r1, r3
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <HAL_I2C_MspInit+0x23c>)
 80012ac:	f003 ff30 	bl	8005110 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 80012b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_I2C_MspInit+0x238>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	205f      	movs	r0, #95	; 0x5f
 80012ce:	f001 fd96 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80012d2:	205f      	movs	r0, #95	; 0x5f
 80012d4:	f001 fdaf 	bl	8002e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2060      	movs	r0, #96	; 0x60
 80012de:	f001 fd8e 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80012e2:	2060      	movs	r0, #96	; 0x60
 80012e4:	f001 fda7 	bl	8002e36 <HAL_NVIC_EnableIRQ>
}
 80012e8:	bf00      	nop
 80012ea:	37b0      	adds	r7, #176	; 0xb0
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005800 	.word	0x40005800
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40021400 	.word	0x40021400
 80012fc:	2000036c 	.word	0x2000036c
 8001300:	40026040 	.word	0x40026040
 8001304:	200003cc 	.word	0x200003cc
 8001308:	400260b8 	.word	0x400260b8
 800130c:	40006000 	.word	0x40006000

08001310 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0a4      	sub	sp, #144	; 0x90
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2284      	movs	r2, #132	; 0x84
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f016 fb7d 	bl	8017a20 <memset>
  if(hrtc->Instance==RTC)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_RTC_MspInit+0x54>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d114      	bne.n	800135a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001330:	2320      	movs	r3, #32
 8001332:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4618      	mov	r0, r3
 8001340:	f006 fc44 	bl	8007bcc <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800134a:	f7ff fdab 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_RTC_MspInit+0x58>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_RTC_MspInit+0x58>)
 8001354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3790      	adds	r7, #144	; 0x90
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40002800 	.word	0x40002800
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a56      	ldr	r2, [pc, #344]	; (80014e4 <HAL_SPI_MspInit+0x178>)
 800138a:	4293      	cmp	r3, r2
 800138c:	f040 80ba 	bne.w	8001504 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001390:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 8001396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800139a:	6453      	str	r3, [r2, #68]	; 0x44
 800139c:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a4:	623b      	str	r3, [r7, #32]
 80013a6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
 80013b4:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <HAL_SPI_MspInit+0x17c>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80013d8:	f248 0320 	movw	r3, #32800	; 0x8020
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ea:	2305      	movs	r3, #5
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	483d      	ldr	r0, [pc, #244]	; (80014ec <HAL_SPI_MspInit+0x180>)
 80013f6:	f003 fe8b 	bl	8005110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013fa:	2320      	movs	r3, #32
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001402:	2301      	movs	r3, #1
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140a:	2305      	movs	r3, #5
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4836      	ldr	r0, [pc, #216]	; (80014f0 <HAL_SPI_MspInit+0x184>)
 8001416:	f003 fe7b 	bl	8005110 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800141a:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 800141c:	4a36      	ldr	r2, [pc, #216]	; (80014f8 <HAL_SPI_MspInit+0x18c>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 8001422:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001426:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 8001436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800145a:	4826      	ldr	r0, [pc, #152]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 800145c:	f002 f85a 	bl	8003514 <HAL_DMA_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8001466:	f7ff fd1d 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 800146e:	659a      	str	r2, [r3, #88]	; 0x58
 8001470:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <HAL_SPI_MspInit+0x188>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_SPI_MspInit+0x190>)
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <HAL_SPI_MspInit+0x194>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_SPI_MspInit+0x190>)
 800147e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001482:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_SPI_MspInit+0x190>)
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_SPI_MspInit+0x190>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_SPI_MspInit+0x190>)
 8001492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001496:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_SPI_MspInit+0x190>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_SPI_MspInit+0x190>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_SPI_MspInit+0x190>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_SPI_MspInit+0x190>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_SPI_MspInit+0x190>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <HAL_SPI_MspInit+0x190>)
 80014b8:	f002 f82c 	bl	8003514 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 80014c2:	f7ff fcef 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <HAL_SPI_MspInit+0x190>)
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_SPI_MspInit+0x190>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2023      	movs	r0, #35	; 0x23
 80014d8:	f001 fc91 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014dc:	2023      	movs	r0, #35	; 0x23
 80014de:	f001 fcaa 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014e2:	e0bc      	b.n	800165e <HAL_SPI_MspInit+0x2f2>
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	20000514 	.word	0x20000514
 80014f8:	40026440 	.word	0x40026440
 80014fc:	20000574 	.word	0x20000574
 8001500:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_SPI_MspInit+0x2fc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 80a7 	bne.w	800165e <HAL_SPI_MspInit+0x2f2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001510:	4b56      	ldr	r3, [pc, #344]	; (800166c <HAL_SPI_MspInit+0x300>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a55      	ldr	r2, [pc, #340]	; (800166c <HAL_SPI_MspInit+0x300>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <HAL_SPI_MspInit+0x300>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_SPI_MspInit+0x300>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_SPI_MspInit+0x300>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_SPI_MspInit+0x300>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_SPI_MspInit+0x300>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a49      	ldr	r2, [pc, #292]	; (800166c <HAL_SPI_MspInit+0x300>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_SPI_MspInit+0x300>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001558:	2304      	movs	r3, #4
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001560:	2301      	movs	r3, #1
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001568:	2305      	movs	r3, #5
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	483f      	ldr	r0, [pc, #252]	; (8001670 <HAL_SPI_MspInit+0x304>)
 8001574:	f003 fdcc 	bl	8005110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001578:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001582:	2301      	movs	r3, #1
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158a:	2305      	movs	r3, #5
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4837      	ldr	r0, [pc, #220]	; (8001674 <HAL_SPI_MspInit+0x308>)
 8001596:	f003 fdbb 	bl	8005110 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800159a:	4b37      	ldr	r3, [pc, #220]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 800159c:	4a37      	ldr	r2, [pc, #220]	; (800167c <HAL_SPI_MspInit+0x310>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80015d8:	4827      	ldr	r0, [pc, #156]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015da:	f001 ff9b 	bl	8003514 <HAL_DMA_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_SPI_MspInit+0x27c>
      Error_Handler();
 80015e4:	f7ff fc5e 	bl	8000ea4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015ec:	659a      	str	r2, [r3, #88]	; 0x58
 80015ee:	4a22      	ldr	r2, [pc, #136]	; (8001678 <HAL_SPI_MspInit+0x30c>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_SPI_MspInit+0x314>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_SPI_MspInit+0x318>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_SPI_MspInit+0x314>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_SPI_MspInit+0x314>)
 8001602:	2240      	movs	r2, #64	; 0x40
 8001604:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_SPI_MspInit+0x314>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_SPI_MspInit+0x314>)
 800160e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001612:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_SPI_MspInit+0x314>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_SPI_MspInit+0x314>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_SPI_MspInit+0x314>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_SPI_MspInit+0x314>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_SPI_MspInit+0x314>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001632:	4813      	ldr	r0, [pc, #76]	; (8001680 <HAL_SPI_MspInit+0x314>)
 8001634:	f001 ff6e 	bl	8003514 <HAL_DMA_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_SPI_MspInit+0x2d6>
      Error_Handler();
 800163e:	f7ff fc31 	bl	8000ea4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_SPI_MspInit+0x314>)
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_SPI_MspInit+0x314>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2101      	movs	r1, #1
 8001652:	2024      	movs	r0, #36	; 0x24
 8001654:	f001 fbd3 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001658:	2024      	movs	r0, #36	; 0x24
 800165a:	f001 fbec 	bl	8002e36 <HAL_NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3738      	adds	r7, #56	; 0x38
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40003800 	.word	0x40003800
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020400 	.word	0x40020400
 8001678:	200005d4 	.word	0x200005d4
 800167c:	40026058 	.word	0x40026058
 8001680:	20000634 	.word	0x20000634
 8001684:	40026070 	.word	0x40026070

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_TIM_Base_MspInit+0x44>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d113      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 80016a0:	f043 0320 	orr.w	r3, r3, #32
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_TIM_Base_MspInit+0x48>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2037      	movs	r0, #55	; 0x37
 80016b8:	f001 fba1 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016bc:	2037      	movs	r0, #55	; 0x37
 80016be:	f001 fbba 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40001400 	.word	0x40001400
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0b0      	sub	sp, #192	; 0xc0
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f0:	2284      	movs	r2, #132	; 0x84
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f016 f993 	bl	8017a20 <memset>
  if(huart->Instance==UART5)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4aab      	ldr	r2, [pc, #684]	; (80019ac <HAL_UART_MspInit+0x2d8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	f040 8096 	bne.w	8001832 <HAL_UART_MspInit+0x15e>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001714:	4618      	mov	r0, r3
 8001716:	f006 fa59 	bl	8007bcc <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001720:	f7ff fbc0 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001724:	4ba2      	ldr	r3, [pc, #648]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4aa1      	ldr	r2, [pc, #644]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800172a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b9f      	ldr	r3, [pc, #636]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	4b9c      	ldr	r3, [pc, #624]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4a9b      	ldr	r2, [pc, #620]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6313      	str	r3, [r2, #48]	; 0x30
 8001748:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001754:	4b96      	ldr	r3, [pc, #600]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	4a95      	ldr	r2, [pc, #596]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6313      	str	r3, [r2, #48]	; 0x30
 8001760:	4b93      	ldr	r3, [pc, #588]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	2301      	movs	r3, #1
 800177c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001786:	2308      	movs	r3, #8
 8001788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001790:	4619      	mov	r1, r3
 8001792:	4888      	ldr	r0, [pc, #544]	; (80019b4 <HAL_UART_MspInit+0x2e0>)
 8001794:	f003 fcbc 	bl	8005110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001798:	2304      	movs	r3, #4
 800179a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017b0:	2308      	movs	r3, #8
 80017b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017ba:	4619      	mov	r1, r3
 80017bc:	487e      	ldr	r0, [pc, #504]	; (80019b8 <HAL_UART_MspInit+0x2e4>)
 80017be:	f003 fca7 	bl	8005110 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80017c2:	4b7e      	ldr	r3, [pc, #504]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017c4:	4a7e      	ldr	r2, [pc, #504]	; (80019c0 <HAL_UART_MspInit+0x2ec>)
 80017c6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80017c8:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ce:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d0:	4b7a      	ldr	r3, [pc, #488]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d6:	4b79      	ldr	r3, [pc, #484]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017dc:	4b77      	ldr	r3, [pc, #476]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e4:	4b75      	ldr	r3, [pc, #468]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ea:	4b74      	ldr	r3, [pc, #464]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80017f0:	4b72      	ldr	r3, [pc, #456]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017f8:	4b70      	ldr	r3, [pc, #448]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001804:	486d      	ldr	r0, [pc, #436]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 8001806:	f001 fe85 	bl	8003514 <HAL_DMA_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001810:	f7ff fb48 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a69      	ldr	r2, [pc, #420]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 8001818:	675a      	str	r2, [r3, #116]	; 0x74
 800181a:	4a68      	ldr	r2, [pc, #416]	; (80019bc <HAL_UART_MspInit+0x2e8>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2035      	movs	r0, #53	; 0x35
 8001826:	f001 faea 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800182a:	2035      	movs	r0, #53	; 0x35
 800182c:	f001 fb03 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001830:	e0b8      	b.n	80019a4 <HAL_UART_MspInit+0x2d0>
  else if(huart->Instance==USART2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_UART_MspInit+0x2f0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d171      	bne.n	8001920 <HAL_UART_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001840:	2300      	movs	r3, #0
 8001842:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001848:	4618      	mov	r0, r3
 800184a:	f006 f9bf 	bl	8007bcc <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8001854:	f7ff fb26 	bl	8000ea4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a54      	ldr	r2, [pc, #336]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800185e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001888:	2360      	movs	r3, #96	; 0x60
 800188a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a0:	2307      	movs	r3, #7
 80018a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018aa:	4619      	mov	r1, r3
 80018ac:	4842      	ldr	r0, [pc, #264]	; (80019b8 <HAL_UART_MspInit+0x2e4>)
 80018ae:	f003 fc2f 	bl	8005110 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80018b2:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018b4:	4a45      	ldr	r2, [pc, #276]	; (80019cc <HAL_UART_MspInit+0x2f8>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c0:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c6:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018cc:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d4:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018f2:	4835      	ldr	r0, [pc, #212]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 80018f4:	f001 fe0e 	bl	8003514 <HAL_DMA_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80018fe:	f7ff fad1 	bl	8000ea4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 8001906:	675a      	str	r2, [r3, #116]	; 0x74
 8001908:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <HAL_UART_MspInit+0x2f4>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2026      	movs	r0, #38	; 0x26
 8001914:	f001 fa73 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001918:	2026      	movs	r0, #38	; 0x26
 800191a:	f001 fa8c 	bl	8002e36 <HAL_NVIC_EnableIRQ>
}
 800191e:	e041      	b.n	80019a4 <HAL_UART_MspInit+0x2d0>
  else if(huart->Instance==USART3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2a      	ldr	r2, [pc, #168]	; (80019d0 <HAL_UART_MspInit+0x2fc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d13c      	bne.n	80019a4 <HAL_UART_MspInit+0x2d0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800192a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001930:	2300      	movs	r3, #0
 8001932:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001938:	4618      	mov	r0, r3
 800193a:	f006 f947 	bl	8007bcc <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8001944:	f7ff faae 	bl	8000ea4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800194e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_UART_MspInit+0x2dc>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001978:	f44f 7340 	mov.w	r3, #768	; 0x300
 800197c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001992:	2307      	movs	r3, #7
 8001994:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_UART_MspInit+0x2e4>)
 80019a0:	f003 fbb6 	bl	8005110 <HAL_GPIO_Init>
}
 80019a4:	bf00      	nop
 80019a6:	37c0      	adds	r7, #192	; 0xc0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40005000 	.word	0x40005000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	20000878 	.word	0x20000878
 80019c0:	40026010 	.word	0x40026010
 80019c4:	40004400 	.word	0x40004400
 80019c8:	200008d8 	.word	0x200008d8
 80019cc:	40026088 	.word	0x40026088
 80019d0:	40004800 	.word	0x40004800

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f000 fb78 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <DMA1_Stream0_IRQHandler+0x10>)
 8001a2e:	f001 ff11 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000878 	.word	0x20000878

08001a3c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <DMA1_Stream2_IRQHandler+0x10>)
 8001a42:	f001 ff07 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000036c 	.word	0x2000036c

08001a50 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA1_Stream3_IRQHandler+0x10>)
 8001a56:	f001 fefd 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200005d4 	.word	0x200005d4

08001a64 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA1_Stream4_IRQHandler+0x10>)
 8001a6a:	f001 fef3 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000634 	.word	0x20000634

08001a78 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <DMA1_Stream5_IRQHandler+0x10>)
 8001a7e:	f001 fee9 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200008d8 	.word	0x200008d8

08001a8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <ADC_IRQHandler+0x10>)
 8001a92:	f000 fbc7 	bl	8002224 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200001e4 	.word	0x200001e4

08001aa0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <I2C2_EV_IRQHandler+0x10>)
 8001aa6:	f004 f813 	bl	8005ad0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002c4 	.word	0x200002c4

08001ab4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <I2C2_ER_IRQHandler+0x10>)
 8001aba:	f004 f823 	bl	8005b04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200002c4 	.word	0x200002c4

08001ac8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <SPI1_IRQHandler+0x10>)
 8001ace:	f007 fca7 	bl	8009420 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000044c 	.word	0x2000044c

08001adc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <SPI2_IRQHandler+0x10>)
 8001ae2:	f007 fc9d 	bl	8009420 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200004b0 	.word	0x200004b0

08001af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <USART2_IRQHandler+0x10>)
 8001af6:	f008 fdeb 	bl	800a6d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000768 	.word	0x20000768

08001b04 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <DMA1_Stream7_IRQHandler+0x10>)
 8001b0a:	f001 fea3 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200003cc 	.word	0x200003cc

08001b18 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <UART5_IRQHandler+0x10>)
 8001b1e:	f008 fdd7 	bl	800a6d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200006e0 	.word	0x200006e0

08001b2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <TIM6_DAC_IRQHandler+0x10>)
 8001b32:	f001 fc0d 	bl	8003350 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200002b0 	.word	0x200002b0

08001b40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <TIM7_IRQHandler+0x10>)
 8001b46:	f008 fa5e 	bl	800a006 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000694 	.word	0x20000694

08001b54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA2_Stream0_IRQHandler+0x10>)
 8001b5a:	f001 fe7b 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000022c 	.word	0x2000022c

08001b68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <DMA2_Stream2_IRQHandler+0x10>)
 8001b6e:	f001 fe71 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000514 	.word	0x20000514

08001b7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA2_Stream3_IRQHandler+0x10>)
 8001b82:	f001 fe67 	bl	8003854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000574 	.word	0x20000574

08001b90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <ETH_IRQHandler+0x10>)
 8001b96:	f002 fbd5 	bl	8004344 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000531c 	.word	0x2000531c

08001ba4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <I2C4_EV_IRQHandler+0x10>)
 8001baa:	f003 ff91 	bl	8005ad0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000318 	.word	0x20000318

08001bb8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <I2C4_ER_IRQHandler+0x10>)
 8001bbe:	f003 ffa1 	bl	8005b04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000318 	.word	0x20000318

08001bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_kill>:

int _kill(int pid, int sig)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <_kill+0x20>)
 8001be8:	2216      	movs	r2, #22
 8001bea:	601a      	str	r2, [r3, #0]
  return -1;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	20008d64 	.word	0x20008d64

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe5 	bl	8001bdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c12:	e7fe      	b.n	8001c12 <_exit+0x12>

08001c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
  }

  return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e009      	b.n	8001c74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbf1      	blt.n	8001c60 <_write+0x12>
  }
  return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_close>:

int _close(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_isatty>:

int _isatty(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d205      	bcs.n	8001d2c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <_sbrk+0x6c>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20050000 	.word	0x20050000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20000938 	.word	0x20000938
 8001d58:	20008d78 	.word	0x20008d78
 8001d5c:	20008d64 	.word	0x20008d64

08001d60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <SystemInit+0x20>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <SystemInit+0x20>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d88:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d8a:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d8c:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da0:	4c0b      	ldr	r4, [pc, #44]	; (8001dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dae:	f7ff ffd7 	bl	8001d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db2:	f015 fe89 	bl	8017ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db6:	f7fe fc11 	bl	80005dc <main>
  bx  lr    
 8001dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001dc8:	0801b8f8 	.word	0x0801b8f8
  ldr r2, =_sbss
 8001dcc:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001dd0:	20008d74 	.word	0x20008d74

08001dd4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <CAN1_RX0_IRQHandler>

08001dd6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <LAN8742_RegisterBusIO+0x28>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <LAN8742_RegisterBusIO+0x28>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <LAN8742_RegisterBusIO+0x28>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e014      	b.n	8001e2e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d17c      	bne.n	8001f54 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e01c      	b.n	8001eae <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	2112      	movs	r1, #18
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	4798      	blx	r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da03      	bge.n	8001e90 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001e88:	f06f 0304 	mvn.w	r3, #4
 8001e8c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001e8e:	e00b      	b.n	8001ea8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d105      	bne.n	8001ea8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
         break;
 8001ea6:	e005      	b.n	8001eb4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b1f      	cmp	r3, #31
 8001eb2:	d9df      	bls.n	8001e74 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b1f      	cmp	r3, #31
 8001eba:	d902      	bls.n	8001ec2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ebc:	f06f 0302 	mvn.w	r3, #2
 8001ec0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d145      	bne.n	8001f54 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6810      	ldr	r0, [r2, #0]
 8001ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4798      	blx	r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db37      	blt.n	8001f4e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6810      	ldr	r0, [r2, #0]
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	2100      	movs	r1, #0
 8001eec:	4798      	blx	r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db28      	blt.n	8001f46 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4798      	blx	r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001efe:	e01c      	b.n	8001f3a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4798      	blx	r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f12:	d80e      	bhi.n	8001f32 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6810      	ldr	r0, [r2, #0]
 8001f1c:	f107 0208 	add.w	r2, r7, #8
 8001f20:	2100      	movs	r1, #0
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da07      	bge.n	8001f3a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001f2a:	f06f 0304 	mvn.w	r3, #4
 8001f2e:	613b      	str	r3, [r7, #16]
                 break;
 8001f30:	e010      	b.n	8001f54 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001f32:	f06f 0301 	mvn.w	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
               break;
 8001f38:	e00c      	b.n	8001f54 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1dd      	bne.n	8001f00 <LAN8742_Init+0xc6>
 8001f44:	e006      	b.n	8001f54 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001f46:	f06f 0304 	mvn.w	r3, #4
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	e002      	b.n	8001f54 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001f4e:	f06f 0303 	mvn.w	r3, #3
 8001f52:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d112      	bne.n	8001f80 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4798      	blx	r3
 8001f60:	4603      	mov	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001f64:	bf00      	nop
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	4798      	blx	r3
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f78:	d9f5      	bls.n	8001f66 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001f80:	693b      	ldr	r3, [r7, #16]
 }
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6810      	ldr	r0, [r2, #0]
 8001f9e:	f107 020c 	add.w	r2, r7, #12
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	4798      	blx	r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da02      	bge.n	8001fb2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fac:	f06f 0304 	mvn.w	r3, #4
 8001fb0:	e06e      	b.n	8002090 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6810      	ldr	r0, [r2, #0]
 8001fba:	f107 020c 	add.w	r2, r7, #12
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4798      	blx	r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da02      	bge.n	8001fce <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fc8:	f06f 0304 	mvn.w	r3, #4
 8001fcc:	e060      	b.n	8002090 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e059      	b.n	8002090 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6810      	ldr	r0, [r2, #0]
 8001fe4:	f107 020c 	add.w	r2, r7, #12
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4798      	blx	r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da02      	bge.n	8001ff8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ff2:	f06f 0304 	mvn.w	r3, #4
 8001ff6:	e04b      	b.n	8002090 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d11b      	bne.n	800203a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <LAN8742_GetLinkState+0x90>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002016:	2302      	movs	r3, #2
 8002018:	e03a      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002024:	2303      	movs	r3, #3
 8002026:	e033      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002032:	2304      	movs	r3, #4
 8002034:	e02c      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002036:	2305      	movs	r3, #5
 8002038:	e02a      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6810      	ldr	r0, [r2, #0]
 8002042:	f107 020c 	add.w	r2, r7, #12
 8002046:	211f      	movs	r1, #31
 8002048:	4798      	blx	r3
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	da02      	bge.n	8002056 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002050:	f06f 0304 	mvn.w	r3, #4
 8002054:	e01c      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002060:	2306      	movs	r3, #6
 8002062:	e015      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 031c 	and.w	r3, r3, #28
 800206a:	2b18      	cmp	r3, #24
 800206c:	d101      	bne.n	8002072 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800206e:	2302      	movs	r3, #2
 8002070:	e00e      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 031c 	and.w	r3, r3, #28
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800207c:	2303      	movs	r3, #3
 800207e:	e007      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 031c 	and.w	r3, r3, #28
 8002086:	2b14      	cmp	r3, #20
 8002088:	d101      	bne.n	800208e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800208a:	2304      	movs	r3, #4
 800208c:	e000      	b.n	8002090 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800208e:	2305      	movs	r3, #5
    }				
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 fea3 	bl	8002de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f000 f806 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7fe ff02 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x54>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x58>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 febd 	bl	8002e52 <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f000 fe85 	bl	8002dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x5c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000000 	.word	0x20000000
 800210c:	20000008 	.word	0x20000008
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008
 8002138:	2000093c 	.word	0x2000093c

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	2000093c 	.word	0x2000093c

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e031      	b.n	8002216 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fe9c 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_ADC_Init+0x84>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	f043 0202 	orr.w	r2, r3, #2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fba6 	bl	800293c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
 8002206:	e001      	b.n	800220c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	ffffeefd 	.word	0xffffeefd

08002224 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d049      	beq.n	80022ee <HAL_ADC_IRQHandler+0xca>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d046      	beq.n	80022ee <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d12b      	bne.n	80022de <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d127      	bne.n	80022de <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d119      	bne.n	80022de <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0220 	bic.w	r2, r2, #32
 80022b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f014 fc78 	bl	8016bd4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0212 	mvn.w	r2, #18
 80022ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d057      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x190>
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d054      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d139      	bne.n	80023a4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002348:	2b00      	cmp	r3, #0
 800234a:	d12b      	bne.n	80023a4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002356:	2b00      	cmp	r3, #0
 8002358:	d124      	bne.n	80023a4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11d      	bne.n	80023a4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800236c:	2b00      	cmp	r3, #0
 800236e:	d119      	bne.n	80023a4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800237e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fc45 	bl	8002c34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f06f 020c 	mvn.w	r2, #12
 80023b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d017      	beq.n	80023fa <HAL_ADC_IRQHandler+0x1d6>
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d014      	beq.n	80023fa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10d      	bne.n	80023fa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f93b 	bl	8002666 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0201 	mvn.w	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002408:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_ADC_IRQHandler+0x218>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d012      	beq.n	800243c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f043 0202 	orr.w	r2, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f06f 0220 	mvn.w	r2, #32
 800242a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f924 	bl	800267a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0220 	mvn.w	r2, #32
 800243a:	601a      	str	r2, [r3, #0]
  }
}
 800243c:	bf00      	nop
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_ADC_Start_DMA+0x1e>
 800245e:	2302      	movs	r3, #2
 8002460:	e0d4      	b.n	800260c <HAL_ADC_Start_DMA+0x1c8>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d018      	beq.n	80024aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002488:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_ADC_Start_DMA+0x1d0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a62      	ldr	r2, [pc, #392]	; (8002618 <HAL_ADC_Start_DMA+0x1d4>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9a      	lsrs	r2, r3, #18
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	f040 809c 	bne.w	80025f2 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024be:	4b57      	ldr	r3, [pc, #348]	; (800261c <HAL_ADC_Start_DMA+0x1d8>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f4:	d106      	bne.n	8002504 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f023 0206 	bic.w	r2, r3, #6
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
 8002502:	e002      	b.n	800250a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_ADC_Start_DMA+0x1dc>)
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	4a41      	ldr	r2, [pc, #260]	; (8002624 <HAL_ADC_Start_DMA+0x1e0>)
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_ADC_Start_DMA+0x1e4>)
 8002528:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002532:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002542:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002552:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	334c      	adds	r3, #76	; 0x4c
 800255e:	4619      	mov	r1, r3
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f001 f884 	bl	8003670 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_ADC_Start_DMA+0x1e8>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d143      	bne.n	800260a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	e03a      	b.n	800260a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a25      	ldr	r2, [pc, #148]	; (8002630 <HAL_ADC_Start_DMA+0x1ec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_ADC_Start_DMA+0x178>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025ba:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_ADC_Start_DMA+0x1e8>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d120      	bne.n	800260a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_ADC_Start_DMA+0x1f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d11b      	bne.n	800260a <HAL_ADC_Start_DMA+0x1c6>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d114      	bne.n	800260a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	e00b      	b.n	800260a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f043 0210 	orr.w	r2, r3, #16
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000000 	.word	0x20000000
 8002618:	431bde83 	.word	0x431bde83
 800261c:	fffff8fe 	.word	0xfffff8fe
 8002620:	08002b31 	.word	0x08002b31
 8002624:	08002beb 	.word	0x08002beb
 8002628:	08002c07 	.word	0x08002c07
 800262c:	40012300 	.word	0x40012300
 8002630:	40012000 	.word	0x40012000
 8002634:	40012200 	.word	0x40012200

08002638 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1c>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e136      	b.n	800291a <HAL_ADC_ConfigChannel+0x28a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	d93a      	bls.n	8002732 <HAL_ADC_ConfigChannel+0xa2>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c4:	d035      	beq.n	8002732 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	3b1e      	subs	r3, #30
 80026dc:	2207      	movs	r2, #7
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	400a      	ands	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a8d      	ldr	r2, [pc, #564]	; (8002928 <HAL_ADC_ConfigChannel+0x298>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10a      	bne.n	800270c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68d9      	ldr	r1, [r3, #12]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	061a      	lsls	r2, r3, #24
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270a:	e035      	b.n	8002778 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	4603      	mov	r3, r0
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4403      	add	r3, r0
 8002724:	3b1e      	subs	r3, #30
 8002726:	409a      	lsls	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002730:	e022      	b.n	8002778 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6919      	ldr	r1, [r3, #16]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	2207      	movs	r2, #7
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43da      	mvns	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	400a      	ands	r2, r1
 8002754:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	4603      	mov	r3, r0
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4403      	add	r3, r0
 800276e:	409a      	lsls	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d824      	bhi.n	80027ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b05      	subs	r3, #5
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b05      	subs	r3, #5
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	635a      	str	r2, [r3, #52]	; 0x34
 80027c8:	e04c      	b.n	8002864 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d824      	bhi.n	800281c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3b23      	subs	r3, #35	; 0x23
 80027e4:	221f      	movs	r2, #31
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	400a      	ands	r2, r1
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	3b23      	subs	r3, #35	; 0x23
 800280e:	fa00 f203 	lsl.w	r2, r0, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
 800281a:	e023      	b.n	8002864 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3b41      	subs	r3, #65	; 0x41
 800282e:	221f      	movs	r2, #31
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43da      	mvns	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	400a      	ands	r2, r1
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3b41      	subs	r3, #65	; 0x41
 8002858:	fa00 f203 	lsl.w	r2, r0, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_ADC_ConfigChannel+0x29c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10a      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1f4>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002876:	d105      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 800287e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002882:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a28      	ldr	r2, [pc, #160]	; (800292c <HAL_ADC_ConfigChannel+0x29c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10f      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x21e>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b12      	cmp	r3, #18
 8002894:	d10b      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a25      	ldr	r2, [pc, #148]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 800289c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 80028a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_ADC_ConfigChannel+0x29c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d12b      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x280>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_ADC_ConfigChannel+0x298>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x23a>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b11      	cmp	r3, #17
 80028c8:	d122      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_ADC_ConfigChannel+0x2a0>)
 80028dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_ADC_ConfigChannel+0x298>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d111      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_ADC_ConfigChannel+0x2a4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_ADC_ConfigChannel+0x2a8>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0c9a      	lsrs	r2, r3, #18
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002902:	e002      	b.n	800290a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3b01      	subs	r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f9      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	10000012 	.word	0x10000012
 800292c:	40012000 	.word	0x40012000
 8002930:	40012300 	.word	0x40012300
 8002934:	20000000 	.word	0x20000000
 8002938:	431bde83 	.word	0x431bde83

0800293c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002944:	4b78      	ldr	r3, [pc, #480]	; (8002b28 <ADC_Init+0x1ec>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a77      	ldr	r2, [pc, #476]	; (8002b28 <ADC_Init+0x1ec>)
 800294a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800294e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002950:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <ADC_Init+0x1ec>)
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4973      	ldr	r1, [pc, #460]	; (8002b28 <ADC_Init+0x1ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <ADC_Init+0x1f0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00f      	b.n	8002a36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0202 	bic.w	r2, r2, #2
 8002a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	035a      	lsls	r2, r3, #13
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	051a      	lsls	r2, r3, #20
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aee:	025a      	lsls	r2, r3, #9
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	029a      	lsls	r2, r3, #10
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	0f000001 	.word	0x0f000001

08002b30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d13c      	bne.n	8002bc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d12b      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d127      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d119      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f014 f809 	bl	8016bd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bc2:	e00e      	b.n	8002be2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fd52 	bl	800267a <HAL_ADC_ErrorCallback>
}
 8002bd6:	e004      	b.n	8002be2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fd2a 	bl	8002652 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff fd27 	bl	800267a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <__NVIC_SetPriorityGrouping+0x40>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c64:	4013      	ands	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c76:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <__NVIC_SetPriorityGrouping+0x40>)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	60d3      	str	r3, [r2, #12]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00
 8002c8c:	05fa0000 	.word	0x05fa0000

08002c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 0307 	and.w	r3, r3, #7
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db0b      	blt.n	8002cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	4907      	ldr	r1, [pc, #28]	; (8002ce4 <__NVIC_EnableIRQ+0x38>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2001      	movs	r0, #1
 8002cce:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000e100 	.word	0xe000e100

08002ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	db0a      	blt.n	8002d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	490c      	ldr	r1, [pc, #48]	; (8002d34 <__NVIC_SetPriority+0x4c>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	0112      	lsls	r2, r2, #4
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d10:	e00a      	b.n	8002d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <__NVIC_SetPriority+0x50>)
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	3b04      	subs	r3, #4
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	440b      	add	r3, r1
 8002d26:	761a      	strb	r2, [r3, #24]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000e100 	.word	0xe000e100
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f1c3 0307 	rsb	r3, r3, #7
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	bf28      	it	cs
 8002d5a:	2304      	movcs	r3, #4
 8002d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d902      	bls.n	8002d6c <NVIC_EncodePriority+0x30>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3b03      	subs	r3, #3
 8002d6a:	e000      	b.n	8002d6e <NVIC_EncodePriority+0x32>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	401a      	ands	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d84:	f04f 31ff 	mov.w	r1, #4294967295
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43d9      	mvns	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	4313      	orrs	r3, r2
         );
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3724      	adds	r7, #36	; 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db4:	d301      	bcc.n	8002dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00f      	b.n	8002dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <SysTick_Config+0x40>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f7ff ff8e 	bl	8002ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <SysTick_Config+0x40>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <SysTick_Config+0x40>)
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	e000e010 	.word	0xe000e010

08002de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ff29 	bl	8002c48 <__NVIC_SetPriorityGrouping>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e10:	f7ff ff3e 	bl	8002c90 <__NVIC_GetPriorityGrouping>
 8002e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f7ff ff8e 	bl	8002d3c <NVIC_EncodePriority>
 8002e20:	4602      	mov	r2, r0
 8002e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff5d 	bl	8002ce8 <__NVIC_SetPriority>
}
 8002e2e:	bf00      	nop
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff31 	bl	8002cac <__NVIC_EnableIRQ>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffa2 	bl	8002da4 <SysTick_Config>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e054      	b.n	8002f28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7f5b      	ldrb	r3, [r3, #29]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe f8ac 	bl	8000fec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_CRC_Init+0xc4>)
 8002ea8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0218 	bic.w	r2, r2, #24
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	e00c      	b.n	8002ed6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f948 	bl	800315c <HAL_CRCEx_Polynomial_Set>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e028      	b.n	8002f28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	795b      	ldrb	r3, [r3, #5]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	e004      	b.n	8002ef4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6912      	ldr	r2, [r2, #16]
 8002ef2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	04c11db7 	.word	0x04c11db7

08002f34 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2202      	movs	r2, #2
 8002f48:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d006      	beq.n	8002f70 <HAL_CRC_Calculate+0x3c>
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d829      	bhi.n	8002fba <HAL_CRC_Calculate+0x86>
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d019      	beq.n	8002f9e <HAL_CRC_Calculate+0x6a>
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d01e      	beq.n	8002fac <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002f6e:	e024      	b.n	8002fba <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e00a      	b.n	8002f8c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3f0      	bcc.n	8002f76 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	613b      	str	r3, [r7, #16]
      break;
 8002f9c:	e00e      	b.n	8002fbc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f812 	bl	8002fcc <CRC_Handle_8>
 8002fa8:	6138      	str	r0, [r7, #16]
      break;
 8002faa:	e007      	b.n	8002fbc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f899 	bl	80030e8 <CRC_Handle_16>
 8002fb6:	6138      	str	r0, [r7, #16]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_CRC_Calculate+0x88>
      break;
 8002fba:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002fc2:	693b      	ldr	r3, [r7, #16]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e023      	b.n	8003026 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3301      	adds	r3, #1
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	440b      	add	r3, r1
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002ff8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	440b      	add	r3, r1
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003008:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3303      	adds	r3, #3
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	440b      	add	r3, r1
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800301c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800301e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3301      	adds	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	429a      	cmp	r2, r3
 800302e:	d3d6      	bcc.n	8002fde <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d04d      	beq.n	80030d6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	4413      	add	r3, r2
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d116      	bne.n	800308c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4413      	add	r3, r2
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	b21a      	sxth	r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	3301      	adds	r3, #1
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	440b      	add	r3, r1
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b21b      	sxth	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b21b      	sxth	r3, r3
 800307e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	8b7a      	ldrh	r2, [r7, #26]
 800308a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b03      	cmp	r3, #3
 8003094:	d11f      	bne.n	80030d6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	b21a      	sxth	r2, r3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	3301      	adds	r3, #1
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	440b      	add	r3, r1
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	8b7a      	ldrh	r2, [r7, #26]
 80030c2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	4413      	add	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3724      	adds	r7, #36	; 0x24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e013      	b.n	8003122 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4413      	add	r3, r2
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	041a      	lsls	r2, r3, #16
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	440b      	add	r3, r1
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d3e6      	bcc.n	80030fa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4413      	add	r3, r2
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800316c:	231f      	movs	r3, #31
 800316e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003170:	bf00      	nop
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1e5a      	subs	r2, r3, #1
 8003176:	613a      	str	r2, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_CRCEx_Polynomial_Set+0x34>
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b18      	cmp	r3, #24
 8003194:	d846      	bhi.n	8003224 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	0800322b 	.word	0x0800322b
 80031a0:	08003225 	.word	0x08003225
 80031a4:	08003225 	.word	0x08003225
 80031a8:	08003225 	.word	0x08003225
 80031ac:	08003225 	.word	0x08003225
 80031b0:	08003225 	.word	0x08003225
 80031b4:	08003225 	.word	0x08003225
 80031b8:	08003225 	.word	0x08003225
 80031bc:	08003219 	.word	0x08003219
 80031c0:	08003225 	.word	0x08003225
 80031c4:	08003225 	.word	0x08003225
 80031c8:	08003225 	.word	0x08003225
 80031cc:	08003225 	.word	0x08003225
 80031d0:	08003225 	.word	0x08003225
 80031d4:	08003225 	.word	0x08003225
 80031d8:	08003225 	.word	0x08003225
 80031dc:	0800320d 	.word	0x0800320d
 80031e0:	08003225 	.word	0x08003225
 80031e4:	08003225 	.word	0x08003225
 80031e8:	08003225 	.word	0x08003225
 80031ec:	08003225 	.word	0x08003225
 80031f0:	08003225 	.word	0x08003225
 80031f4:	08003225 	.word	0x08003225
 80031f8:	08003225 	.word	0x08003225
 80031fc:	08003201 	.word	0x08003201
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b06      	cmp	r3, #6
 8003204:	d913      	bls.n	800322e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800320a:	e010      	b.n	800322e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b07      	cmp	r3, #7
 8003210:	d90f      	bls.n	8003232 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003216:	e00c      	b.n	8003232 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	d90b      	bls.n	8003236 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003222:	e008      	b.n	8003236 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
      break;
 8003228:	e006      	b.n	8003238 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003236:	bf00      	nop
  }
  if (status == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 0118 	bic.w	r1, r3, #24
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e014      	b.n	80032a4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	791b      	ldrb	r3, [r3, #4]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fece 	bl	800102c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	795b      	ldrb	r3, [r3, #5]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_DAC_Start+0x16>
 80032be:	2302      	movs	r3, #2
 80032c0:	e040      	b.n	8003344 <HAL_DAC_Start+0x98>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2201      	movs	r2, #1
 80032dc:	409a      	lsls	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032f6:	2b3c      	cmp	r3, #60	; 0x3c
 80032f8:	d11d      	bne.n	8003336 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	e014      	b.n	8003336 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	213c      	movs	r1, #60	; 0x3c
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	429a      	cmp	r2, r3
 8003324:	d107      	bne.n	8003336 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0202 	orr.w	r2, r2, #2
 8003334:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003366:	d120      	bne.n	80033aa <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003376:	d118      	bne.n	80033aa <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2204      	movs	r2, #4
 800337c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033a2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f852 	bl	800344e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b8:	d120      	bne.n	80033fc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033c8:	d118      	bne.n	80033fc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f043 0202 	orr.w	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80033f4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f882 	bl	8003500 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	3308      	adds	r3, #8
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e004      	b.n	8003438 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	3314      	adds	r3, #20
 8003436:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	461a      	mov	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003462:	b480      	push	{r7}
 8003464:	b087      	sub	sp, #28
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	795b      	ldrb	r3, [r3, #5]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_DAC_ConfigChannel+0x18>
 8003476:	2302      	movs	r3, #2
 8003478:	e03c      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x92>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2202      	movs	r2, #2
 8003484:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	22c0      	movs	r2, #192	; 0xc0
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43da      	mvns	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	400a      	ands	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7fe fe0c 	bl	800213c <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e099      	b.n	8003664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003550:	e00f      	b.n	8003572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003552:	f7fe fdf3 	bl	800213c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b05      	cmp	r3, #5
 800355e:	d908      	bls.n	8003572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2203      	movs	r2, #3
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e078      	b.n	8003664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e8      	bne.n	8003552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_DMA_Init+0x158>)
 800358c:	4013      	ands	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	4313      	orrs	r3, r2
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0307 	bic.w	r3, r3, #7
 80035f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b04      	cmp	r3, #4
 8003604:	d117      	bne.n	8003636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fb17 	bl	8003c4c <DMA_CheckFifoParam>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003632:	2301      	movs	r3, #1
 8003634:	e016      	b.n	8003664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 face 	bl	8003be0 <DMA_CalcBaseAndBitshift>
 8003644:	4603      	mov	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	f010803f 	.word	0xf010803f

08003670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_DMA_Start_IT+0x26>
 8003692:	2302      	movs	r3, #2
 8003694:	e048      	b.n	8003728 <HAL_DMA_Start_IT+0xb8>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d137      	bne.n	800371a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa60 	bl	8003b84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	223f      	movs	r2, #63	; 0x3f
 80036ca:	409a      	lsls	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0216 	orr.w	r2, r2, #22
 80036de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e005      	b.n	8003726 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003726:	7dfb      	ldrb	r3, [r7, #23]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800373e:	f7fe fcfd 	bl	800213c <HAL_GetTick>
 8003742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d008      	beq.n	8003762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e052      	b.n	8003808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0216 	bic.w	r2, r2, #22
 8003770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <HAL_DMA_Abort+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0208 	bic.w	r2, r2, #8
 80037a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b2:	e013      	b.n	80037dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037b4:	f7fe fcc2 	bl	800213c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d90c      	bls.n	80037dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2203      	movs	r2, #3
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e015      	b.n	8003808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e4      	bne.n	80037b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	223f      	movs	r2, #63	; 0x3f
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d004      	beq.n	800382e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00c      	b.n	8003848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2205      	movs	r2, #5
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003860:	4b8e      	ldr	r3, [pc, #568]	; (8003a9c <HAL_DMA_IRQHandler+0x248>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a8e      	ldr	r2, [pc, #568]	; (8003aa0 <HAL_DMA_IRQHandler+0x24c>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0a9b      	lsrs	r3, r3, #10
 800386c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	2208      	movs	r2, #8
 8003880:	409a      	lsls	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01a      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	2208      	movs	r2, #8
 80038ae:	409a      	lsls	r2, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	2201      	movs	r2, #1
 80038c6:	409a      	lsls	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	2201      	movs	r2, #1
 80038e4:	409a      	lsls	r2, r3
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	f043 0202 	orr.w	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	2204      	movs	r2, #4
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	2204      	movs	r2, #4
 800391a:	409a      	lsls	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	f043 0204 	orr.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2210      	movs	r2, #16
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d043      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03c      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	2210      	movs	r2, #16
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d018      	beq.n	8003996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d108      	bne.n	8003984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d024      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
 8003982:	e01f      	b.n	80039c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
 8003994:	e016      	b.n	80039c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0208 	bic.w	r2, r2, #8
 80039b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2220      	movs	r2, #32
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 808f 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8087 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	2220      	movs	r2, #32
 80039ec:	409a      	lsls	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d136      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0216 	bic.w	r2, r2, #22
 8003a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x1da>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0208 	bic.w	r2, r2, #8
 8003a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	223f      	movs	r2, #63	; 0x3f
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d07e      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
        }
        return;
 8003a6a:	e079      	b.n	8003b60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01d      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d031      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e02c      	b.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
 8003a9a:	bf00      	nop
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d023      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
 8003ab4:	e01e      	b.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0210 	bic.w	r2, r2, #16
 8003ad2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d032      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d307      	bcc.n	8003b3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f2      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x2cc>
 8003b3a:	e000      	b.n	8003b3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
 8003b5e:	e000      	b.n	8003b62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b60:	bf00      	nop
    }
  }
}
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b76:	b2db      	uxtb	r3, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d108      	bne.n	8003bc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bc2:	e007      	b.n	8003bd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	3b10      	subs	r3, #16
 8003bf0:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <DMA_CalcBaseAndBitshift+0x60>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <DMA_CalcBaseAndBitshift+0x64>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d908      	bls.n	8003c20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <DMA_CalcBaseAndBitshift+0x68>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	1d1a      	adds	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c1e:	e006      	b.n	8003c2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <DMA_CalcBaseAndBitshift+0x68>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	aaaaaaab 	.word	0xaaaaaaab
 8003c44:	0801b610 	.word	0x0801b610
 8003c48:	fffffc00 	.word	0xfffffc00

08003c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11f      	bne.n	8003ca6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d856      	bhi.n	8003d1a <DMA_CheckFifoParam+0xce>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <DMA_CheckFifoParam+0x28>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003c85 	.word	0x08003c85
 8003c80:	08003d1b 	.word	0x08003d1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d046      	beq.n	8003d1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c94:	e043      	b.n	8003d1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c9e:	d140      	bne.n	8003d22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca4:	e03d      	b.n	8003d22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cae:	d121      	bne.n	8003cf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d837      	bhi.n	8003d26 <DMA_CheckFifoParam+0xda>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <DMA_CheckFifoParam+0x70>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003ccd 	.word	0x08003ccd
 8003cc0:	08003cd3 	.word	0x08003cd3
 8003cc4:	08003ccd 	.word	0x08003ccd
 8003cc8:	08003ce5 	.word	0x08003ce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e030      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d025      	beq.n	8003d2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce2:	e022      	b.n	8003d2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cec:	d11f      	bne.n	8003d2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cf2:	e01c      	b.n	8003d2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d903      	bls.n	8003d02 <DMA_CheckFifoParam+0xb6>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d003      	beq.n	8003d08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d00:	e018      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
      break;
 8003d06:	e015      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	e00b      	b.n	8003d32 <DMA_CheckFifoParam+0xe6>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e00a      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e008      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      break;
 8003d22:	bf00      	nop
 8003d24:	e006      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      break;
 8003d26:	bf00      	nop
 8003d28:	e004      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <DMA_CheckFifoParam+0xe8>
      break;
 8003d32:	bf00      	nop
    }
  } 
  
  return status; 
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop

08003d44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e06a      	b.n	8003e2c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2223      	movs	r2, #35	; 0x23
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f008 f987 	bl	800c07c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_ETH_Init+0xf0>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <HAL_ETH_Init+0xf0>)
 8003d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d78:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_ETH_Init+0xf0>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <HAL_ETH_Init+0xf4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <HAL_ETH_Init+0xf4>)
 8003d8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d90:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_ETH_Init+0xf4>)
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4927      	ldr	r1, [pc, #156]	; (8003e38 <HAL_ETH_Init+0xf4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_ETH_Init+0xf4>)
 8003da2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dbc:	f7fe f9be 	bl	800213c <HAL_GetTick>
 8003dc0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003dc2:	e011      	b.n	8003de8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dc4:	f7fe f9ba 	bl	800213c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dd2:	d909      	bls.n	8003de8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	22e0      	movs	r2, #224	; 0xe0
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e021      	b.n	8003e2c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e4      	bne.n	8003dc4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fee4 	bl	8004bc8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 ff8b 	bl	8004d1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 ffe1 	bl	8004dce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	461a      	mov	r2, r3
 8003e12:	2100      	movs	r1, #0
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 ff49 	bl	8004cac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2210      	movs	r2, #16
 8003e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40013800 	.word	0x40013800

08003e3c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d150      	bne.n	8003ef0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2223      	movs	r2, #35	; 0x23
 8003e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f9fd 	bl	800425c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0208 	orr.w	r2, r2, #8
 8003e70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fe f96a 	bl	8002154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0204 	orr.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	f7fe f957 	bl	8002154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fd2a 	bl	8004908 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ec6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ee2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2223      	movs	r2, #35	; 0x23
 8003ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f08:	2b23      	cmp	r3, #35	; 0x23
 8003f0a:	d14a      	bne.n	8003fa2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2223      	movs	r2, #35	; 0x23
 8003f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f2a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	f023 0302 	bic.w	r3, r3, #2
 8003f3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f42:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f7fe f8f9 	bl	8002154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fccc 	bl	8004908 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0208 	bic.w	r2, r2, #8
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f7fe f8e3 	bl	8002154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07c      	b.n	80040cc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd8:	2b23      	cmp	r3, #35	; 0x23
 8003fda:	d176      	bne.n	80040ca <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 ff61 	bl	8004ea8 <ETH_Prepare_Tx_Descriptors>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f043 0202 	orr.w	r2, r3, #2
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e065      	b.n	80040cc <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004000:	f3bf 8f4f 	dsb	sy
}
 8004004:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3206      	adds	r2, #6
 800400e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004012:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	629a      	str	r2, [r3, #40]	; 0x28
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	2b03      	cmp	r3, #3
 8004024:	d904      	bls.n	8004030 <HAL_ETH_Transmit+0x84>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	1f1a      	subs	r2, r3, #4
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3106      	adds	r1, #6
 800403c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004040:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004044:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8004046:	f7fe f879 	bl	800213c <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800404c:	e037      	b.n	80040be <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d011      	beq.n	8004084 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f043 0208 	orr.w	r2, r3, #8
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e023      	b.n	80040cc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d018      	beq.n	80040be <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800408c:	f7fe f856 	bl	800213c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <HAL_ETH_Transmit+0xf6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	f043 0204 	orr.w	r2, r3, #4
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80040b8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e006      	b.n	80040cc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dbc3      	blt.n	800404e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0a8      	b.n	8004252 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004106:	2b23      	cmp	r3, #35	; 0x23
 8004108:	d001      	beq.n	800410e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0a1      	b.n	8004252 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	3212      	adds	r2, #18
 800411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004124:	f1c3 0304 	rsb	r3, r3, #4
 8004128:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800412a:	e06a      	b.n	8004202 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <HAL_ETH_ReadData+0x88>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d040      	beq.n	80041de <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004190:	3b04      	subs	r3, #4
 8004192:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80041b8:	461a      	mov	r2, r3
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f008 f927 	bl	800c410 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	441a      	add	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2200      	movs	r2, #0
 80041dc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d902      	bls.n	80041f0 <HAL_ETH_ReadData+0x11c>
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3b04      	subs	r3, #4
 80041ee:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	3212      	adds	r2, #18
 80041f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3301      	adds	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004206:	2b00      	cmp	r3, #0
 8004208:	db06      	blt.n	8004218 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	429a      	cmp	r2, r3
 8004210:	d202      	bcs.n	8004218 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d089      	beq.n	800412c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f815 	bl	800425c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d108      	bne.n	8004250 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004268:	2301      	movs	r3, #1
 800426a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004270:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	3212      	adds	r2, #18
 8004278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004282:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004284:	e040      	b.n	8004308 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d112      	bne.n	80042b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800428e:	f107 030c 	add.w	r3, r7, #12
 8004292:	4618      	mov	r0, r3
 8004294:	f008 f88c 	bl	800c3b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	74fb      	strb	r3, [r7, #19]
 80042a2:	e007      	b.n	80042b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	461a      	mov	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	461a      	mov	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d026      	beq.n	8004308 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <ETH_UpdateDescriptor+0xe4>)
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	e003      	b.n	80042d2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80042d0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80042d2:	f3bf 8f5f 	dmb	sy
}
 80042d6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3301      	adds	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d902      	bls.n	80042f6 <ETH_UpdateDescriptor+0x9a>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	3b04      	subs	r3, #4
 80042f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	3212      	adds	r2, #18
 80042fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004300:	617b      	str	r3, [r7, #20]
      desccount--;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3b01      	subs	r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <ETH_UpdateDescriptor+0xb8>
 800430e:	7cfb      	ldrb	r3, [r7, #19]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1b8      	bne.n	8004286 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	d00c      	beq.n	8004338 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004326:	461a      	mov	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004338:	bf00      	nop
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	80004600 	.word	0x80004600

08004344 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d112      	bne.n	8004384 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d109      	bne.n	8004384 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004378:	461a      	mov	r2, r3
 800437a:	4b50      	ldr	r3, [pc, #320]	; (80044bc <HAL_ETH_IRQHandler+0x178>)
 800437c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8ac 	bl	80044dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d113      	bne.n	80043be <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d10a      	bne.n	80043be <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b0:	461a      	mov	r2, r3
 80043b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80043b6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f885 	bl	80044c8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d0:	d14c      	bne.n	800446c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e4:	d142      	bne.n	800446c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f043 0208 	orr.w	r2, r3, #8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004408:	d11a      	bne.n	8004440 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <HAL_ETH_IRQHandler+0x17c>)
 8004416:	4013      	ands	r3, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004434:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	22e0      	movs	r2, #224	; 0xe0
 800443a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800443e:	e012      	b.n	8004466 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	f248 6380 	movw	r3, #34432	; 0x8680
 800444e:	4013      	ands	r3, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445e:	461a      	mov	r2, r3
 8004460:	f248 6380 	movw	r3, #34432	; 0x8680
 8004464:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f842 	bl	80044f0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b08      	cmp	r3, #8
 8004478:	d10e      	bne.n	8004498 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f83a 	bl	8004504 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_ETH_IRQHandler+0x180>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_ETH_IRQHandler+0x180>)
 80044a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044aa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f833 	bl	8004518 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	00010040 	.word	0x00010040
 80044c0:	007e2000 	.word	0x007e2000
 80044c4:	40013c00 	.word	0x40013c00

080044c8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 031c 	and.w	r3, r3, #28
 8004548:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	02db      	lsls	r3, r3, #11
 800454e:	b29b      	uxth	r3, r3
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0302 	bic.w	r3, r3, #2
 800456a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800457c:	f7fd fdde 	bl	800213c <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004582:	e00d      	b.n	80045a0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004584:	f7fd fdda 	bl	800213c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d301      	bcc.n	8004598 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e010      	b.n	80045ba <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ec      	bne.n	8004584 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 031c 	and.w	r3, r3, #28
 80045de:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	02db      	lsls	r3, r3, #11
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800461c:	f7fd fd8e 	bl	800213c <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004622:	e00d      	b.n	8004640 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004624:	f7fd fd8a 	bl	800213c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d301      	bcc.n	8004638 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e009      	b.n	800464c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ec      	bne.n	8004624 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0d9      	b.n	800481c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf14      	ite	ne
 8004676:	2301      	movne	r3, #1
 8004678:	2300      	moveq	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	bf14      	ite	ne
 800475a:	2301      	movne	r3, #1
 800475c:	2300      	moveq	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	b29a      	uxth	r2, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e00b      	b.n	8004854 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004842:	2b10      	cmp	r3, #16
 8004844:	d105      	bne.n	8004852 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f883 	bl	8004954 <ETH_SetMACConfig>

    return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e000      	b.n	8004854 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 031c 	bic.w	r3, r3, #28
 8004872:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004874:	f003 f976 	bl	8007b64 <HAL_RCC_GetHCLKFreq>
 8004878:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d908      	bls.n	8004894 <HAL_ETH_SetMDIOClockRange+0x38>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d804      	bhi.n	8004894 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f043 0308 	orr.w	r3, r3, #8
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e027      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d908      	bls.n	80048ae <HAL_ETH_SetMDIOClockRange+0x52>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d204      	bcs.n	80048ae <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f043 030c 	orr.w	r3, r3, #12
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e01a      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4a12      	ldr	r2, [pc, #72]	; (80048fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d303      	bcc.n	80048be <HAL_ETH_SetMDIOClockRange+0x62>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a11      	ldr	r2, [pc, #68]	; (8004900 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d911      	bls.n	80048e2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d908      	bls.n	80048d8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d804      	bhi.n	80048d8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	e005      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f043 0310 	orr.w	r3, r3, #16
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e000      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80048e2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	611a      	str	r2, [r3, #16]
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	01312cff 	.word	0x01312cff
 80048f8:	02160ebf 	.word	0x02160ebf
 80048fc:	03938700 	.word	0x03938700
 8004900:	05f5e0ff 	.word	0x05f5e0ff
 8004904:	08f0d17f 	.word	0x08f0d17f

08004908 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004926:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800492a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004938:	2001      	movs	r0, #1
 800493a:	f7fd fc0b 	bl	8002154 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004948:	6193      	str	r3, [r2, #24]
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4b51      	ldr	r3, [pc, #324]	; (8004ab0 <ETH_SetMACConfig+0x15c>)
 800496a:	4013      	ands	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	7c1b      	ldrb	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <ETH_SetMACConfig+0x28>
 8004976:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800497a:	e000      	b.n	800497e <ETH_SetMACConfig+0x2a>
 800497c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	7c5b      	ldrb	r3, [r3, #17]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <ETH_SetMACConfig+0x38>
 8004986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800498a:	e000      	b.n	800498e <ETH_SetMACConfig+0x3a>
 800498c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800498e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004994:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	7fdb      	ldrb	r3, [r3, #31]
 800499a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800499c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	7f92      	ldrb	r2, [r2, #30]
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	d102      	bne.n	80049b2 <ETH_SetMACConfig+0x5e>
 80049ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049b0:	e000      	b.n	80049b4 <ETH_SetMACConfig+0x60>
 80049b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80049b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	7f1b      	ldrb	r3, [r3, #28]
 80049ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	791b      	ldrb	r3, [r3, #4]
 80049c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80049ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d102      	bne.n	80049dc <ETH_SetMACConfig+0x88>
 80049d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049da:	e000      	b.n	80049de <ETH_SetMACConfig+0x8a>
 80049dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	7bdb      	ldrb	r3, [r3, #15]
 80049e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049f6:	4313      	orrs	r3, r2
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f7fd fba0 	bl	8002154 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	d101      	bne.n	8004a42 <ETH_SetMACConfig+0xee>
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	e000      	b.n	8004a44 <ETH_SetMACConfig+0xf0>
 8004a42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004a52:	2a01      	cmp	r2, #1
 8004a54:	d101      	bne.n	8004a5a <ETH_SetMACConfig+0x106>
 8004a56:	2208      	movs	r2, #8
 8004a58:	e000      	b.n	8004a5c <ETH_SetMACConfig+0x108>
 8004a5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004a64:	2a01      	cmp	r2, #1
 8004a66:	d101      	bne.n	8004a6c <ETH_SetMACConfig+0x118>
 8004a68:	2204      	movs	r2, #4
 8004a6a:	e000      	b.n	8004a6e <ETH_SetMACConfig+0x11a>
 8004a6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004a76:	2a01      	cmp	r2, #1
 8004a78:	d101      	bne.n	8004a7e <ETH_SetMACConfig+0x12a>
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	e000      	b.n	8004a80 <ETH_SetMACConfig+0x12c>
 8004a7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a80:	4313      	orrs	r3, r2
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f7fd fb5b 	bl	8002154 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	619a      	str	r2, [r3, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	ff20810f 	.word	0xff20810f

08004ab4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <ETH_SetDMAConfig+0x110>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	7b1b      	ldrb	r3, [r3, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <ETH_SetDMAConfig+0x2c>
 8004ada:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ade:	e000      	b.n	8004ae2 <ETH_SetDMAConfig+0x2e>
 8004ae0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	7b5b      	ldrb	r3, [r3, #13]
 8004ae6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ae8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	7f52      	ldrb	r2, [r2, #29]
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	d102      	bne.n	8004af8 <ETH_SetDMAConfig+0x44>
 8004af2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004af6:	e000      	b.n	8004afa <ETH_SetDMAConfig+0x46>
 8004af8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004afa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	7b9b      	ldrb	r3, [r3, #14]
 8004b00:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b02:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	7f1b      	ldrb	r3, [r3, #28]
 8004b0e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004b10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	7f9b      	ldrb	r3, [r3, #30]
 8004b16:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b18:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b26:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	f7fd fb02 	bl	8002154 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	791b      	ldrb	r3, [r3, #4]
 8004b62:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b68:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b6e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b74:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b7c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b7e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b86:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b8c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b9a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ba8:	2001      	movs	r0, #1
 8004baa:	f7fd fad3 	bl	8002154 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	f8de3f23 	.word	0xf8de3f23

08004bc8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b0a6      	sub	sp, #152	; 0x98
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c04:	2300      	movs	r3, #0
 8004c06:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fe86 	bl	8004954 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c7c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c82:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c88:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c98:	f107 0308 	add.w	r3, r7, #8
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff08 	bl	8004ab4 <ETH_SetDMAConfig>
}
 8004ca4:	bf00      	nop
 8004ca6:	3798      	adds	r7, #152	; 0x98
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3305      	adds	r3, #5
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	3204      	adds	r2, #4
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <ETH_MACAddressConfig+0x68>)
 8004cce:	4413      	add	r3, r2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3303      	adds	r3, #3
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	061a      	lsls	r2, r3, #24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3301      	adds	r3, #1
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <ETH_MACAddressConfig+0x6c>)
 8004cfe:	4413      	add	r3, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6013      	str	r3, [r2, #0]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40028040 	.word	0x40028040
 8004d18:	40028044 	.word	0x40028044

08004d1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e03e      	b.n	8004da8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68d9      	ldr	r1, [r3, #12]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	440b      	add	r3, r1
 8004d3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	3206      	adds	r2, #6
 8004d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d80c      	bhi.n	8004d8c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68d9      	ldr	r1, [r3, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	440b      	add	r3, r1
 8004d84:	461a      	mov	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	e004      	b.n	8004d96 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	461a      	mov	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3301      	adds	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d9bd      	bls.n	8004d2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc0:	611a      	str	r2, [r3, #16]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e046      	b.n	8004e6a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6919      	ldr	r1, [r3, #16]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e18:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004e20:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	3212      	adds	r2, #18
 8004e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d80c      	bhi.n	8004e5a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6919      	ldr	r1, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	440b      	add	r3, r1
 8004e52:	461a      	mov	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	e004      	b.n	8004e64 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d9b5      	bls.n	8004ddc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9a:	60da      	str	r2, [r3, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b08d      	sub	sp, #52	; 0x34
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3318      	adds	r3, #24
 8004eb8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eea:	d007      	beq.n	8004efc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004efc:	2302      	movs	r3, #2
 8004efe:	e0ff      	b.n	8005100 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	3301      	adds	r3, #1
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4b7d      	ldr	r3, [pc, #500]	; (800510c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	6852      	ldr	r2, [r2, #4]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f82:	f3bf 8f5f 	dmb	sy
}
 8004f86:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f94:	e082      	b.n	800509c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e005      	b.n	8004fc2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d902      	bls.n	8004fd4 <ETH_Prepare_Tx_Descriptors+0x12c>
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	3b04      	subs	r3, #4
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fdc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff6:	d007      	beq.n	8005008 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d029      	beq.n	800505c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005014:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005016:	2300      	movs	r3, #0
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
 800501a:	e019      	b.n	8005050 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800501c:	f3bf 8f5f 	dmb	sy
}
 8005020:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	3301      	adds	r3, #1
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b03      	cmp	r3, #3
 8005038:	d902      	bls.n	8005040 <ETH_Prepare_Tx_Descriptors+0x198>
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	3b04      	subs	r3, #4
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	3301      	adds	r3, #1
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	429a      	cmp	r2, r3
 8005056:	d3e1      	bcc.n	800501c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005058:	2302      	movs	r3, #2
 800505a:	e051      	b.n	8005100 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	3301      	adds	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	4b25      	ldr	r3, [pc, #148]	; (800510c <ETH_Prepare_Tx_Descriptors+0x264>)
 8005078:	4013      	ands	r3, r2
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	6852      	ldr	r2, [r2, #4]
 800507e:	431a      	orrs	r2, r3
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	3301      	adds	r3, #1
 8005088:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800508a:	f3bf 8f5f 	dmb	sy
}
 800508e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f47f af78 	bne.w	8004f96 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d006      	beq.n	80050ba <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e005      	b.n	80050c6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d6:	6979      	ldr	r1, [r7, #20]
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	3304      	adds	r3, #4
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80050e8:	b672      	cpsid	i
}
 80050ea:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80050fa:	b662      	cpsie	i
}
 80050fc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3734      	adds	r7, #52	; 0x34
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	ffffe000 	.word	0xffffe000

08005110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e175      	b.n	800541c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005130:	2201      	movs	r2, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4013      	ands	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	f040 8164 	bne.w	8005416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d005      	beq.n	8005166 <HAL_GPIO_Init+0x56>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d130      	bne.n	80051c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	2203      	movs	r2, #3
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800519c:	2201      	movs	r2, #1
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 0201 	and.w	r2, r3, #1
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d017      	beq.n	8005204 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d123      	bne.n	8005258 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	08da      	lsrs	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3208      	adds	r2, #8
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	220f      	movs	r2, #15
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	08da      	lsrs	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3208      	adds	r2, #8
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	2203      	movs	r2, #3
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0203 	and.w	r2, r3, #3
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80be 	beq.w	8005416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529a:	4b66      	ldr	r3, [pc, #408]	; (8005434 <HAL_GPIO_Init+0x324>)
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	4a65      	ldr	r2, [pc, #404]	; (8005434 <HAL_GPIO_Init+0x324>)
 80052a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a4:	6453      	str	r3, [r2, #68]	; 0x44
 80052a6:	4b63      	ldr	r3, [pc, #396]	; (8005434 <HAL_GPIO_Init+0x324>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80052b2:	4a61      	ldr	r2, [pc, #388]	; (8005438 <HAL_GPIO_Init+0x328>)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	3302      	adds	r3, #2
 80052ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	220f      	movs	r2, #15
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a58      	ldr	r2, [pc, #352]	; (800543c <HAL_GPIO_Init+0x32c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d037      	beq.n	800534e <HAL_GPIO_Init+0x23e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a57      	ldr	r2, [pc, #348]	; (8005440 <HAL_GPIO_Init+0x330>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d031      	beq.n	800534a <HAL_GPIO_Init+0x23a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a56      	ldr	r2, [pc, #344]	; (8005444 <HAL_GPIO_Init+0x334>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d02b      	beq.n	8005346 <HAL_GPIO_Init+0x236>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a55      	ldr	r2, [pc, #340]	; (8005448 <HAL_GPIO_Init+0x338>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d025      	beq.n	8005342 <HAL_GPIO_Init+0x232>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a54      	ldr	r2, [pc, #336]	; (800544c <HAL_GPIO_Init+0x33c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01f      	beq.n	800533e <HAL_GPIO_Init+0x22e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a53      	ldr	r2, [pc, #332]	; (8005450 <HAL_GPIO_Init+0x340>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d019      	beq.n	800533a <HAL_GPIO_Init+0x22a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a52      	ldr	r2, [pc, #328]	; (8005454 <HAL_GPIO_Init+0x344>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_GPIO_Init+0x226>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a51      	ldr	r2, [pc, #324]	; (8005458 <HAL_GPIO_Init+0x348>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00d      	beq.n	8005332 <HAL_GPIO_Init+0x222>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a50      	ldr	r2, [pc, #320]	; (800545c <HAL_GPIO_Init+0x34c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <HAL_GPIO_Init+0x21e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a4f      	ldr	r2, [pc, #316]	; (8005460 <HAL_GPIO_Init+0x350>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_GPIO_Init+0x21a>
 8005326:	2309      	movs	r3, #9
 8005328:	e012      	b.n	8005350 <HAL_GPIO_Init+0x240>
 800532a:	230a      	movs	r3, #10
 800532c:	e010      	b.n	8005350 <HAL_GPIO_Init+0x240>
 800532e:	2308      	movs	r3, #8
 8005330:	e00e      	b.n	8005350 <HAL_GPIO_Init+0x240>
 8005332:	2307      	movs	r3, #7
 8005334:	e00c      	b.n	8005350 <HAL_GPIO_Init+0x240>
 8005336:	2306      	movs	r3, #6
 8005338:	e00a      	b.n	8005350 <HAL_GPIO_Init+0x240>
 800533a:	2305      	movs	r3, #5
 800533c:	e008      	b.n	8005350 <HAL_GPIO_Init+0x240>
 800533e:	2304      	movs	r3, #4
 8005340:	e006      	b.n	8005350 <HAL_GPIO_Init+0x240>
 8005342:	2303      	movs	r3, #3
 8005344:	e004      	b.n	8005350 <HAL_GPIO_Init+0x240>
 8005346:	2302      	movs	r3, #2
 8005348:	e002      	b.n	8005350 <HAL_GPIO_Init+0x240>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_GPIO_Init+0x240>
 800534e:	2300      	movs	r3, #0
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	f002 0203 	and.w	r2, r2, #3
 8005356:	0092      	lsls	r2, r2, #2
 8005358:	4093      	lsls	r3, r2
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005360:	4935      	ldr	r1, [pc, #212]	; (8005438 <HAL_GPIO_Init+0x328>)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	3302      	adds	r3, #2
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800536e:	4b3d      	ldr	r3, [pc, #244]	; (8005464 <HAL_GPIO_Init+0x354>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005392:	4a34      	ldr	r2, [pc, #208]	; (8005464 <HAL_GPIO_Init+0x354>)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005398:	4b32      	ldr	r3, [pc, #200]	; (8005464 <HAL_GPIO_Init+0x354>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053bc:	4a29      	ldr	r2, [pc, #164]	; (8005464 <HAL_GPIO_Init+0x354>)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053c2:	4b28      	ldr	r3, [pc, #160]	; (8005464 <HAL_GPIO_Init+0x354>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053e6:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_GPIO_Init+0x354>)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <HAL_GPIO_Init+0x354>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005410:	4a14      	ldr	r2, [pc, #80]	; (8005464 <HAL_GPIO_Init+0x354>)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	f67f ae86 	bls.w	8005130 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3724      	adds	r7, #36	; 0x24
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800
 8005438:	40013800 	.word	0x40013800
 800543c:	40020000 	.word	0x40020000
 8005440:	40020400 	.word	0x40020400
 8005444:	40020800 	.word	0x40020800
 8005448:	40020c00 	.word	0x40020c00
 800544c:	40021000 	.word	0x40021000
 8005450:	40021400 	.word	0x40021400
 8005454:	40021800 	.word	0x40021800
 8005458:	40021c00 	.word	0x40021c00
 800545c:	40022000 	.word	0x40022000
 8005460:	40022400 	.word	0x40022400
 8005464:	40013c00 	.word	0x40013c00

08005468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005478:	787b      	ldrb	r3, [r7, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005484:	e003      	b.n	800548e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	041a      	lsls	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	619a      	str	r2, [r3, #24]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e07f      	b.n	80055ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fdfa 	bl	80010bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	; 0x24
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	e006      	b.n	8005524 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005522:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d104      	bne.n	8005536 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_I2C_Init+0x11c>)
 8005542:	430b      	orrs	r3, r1
 8005544:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005554:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	02008000 	.word	0x02008000

080055bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	461a      	mov	r2, r3
 80055c8:	460b      	mov	r3, r1
 80055ca:	817b      	strh	r3, [r7, #10]
 80055cc:	4613      	mov	r3, r2
 80055ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b20      	cmp	r3, #32
 80055da:	f040 80da 	bne.w	8005792 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_I2C_Master_Transmit+0x30>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0d3      	b.n	8005794 <HAL_I2C_Master_Transmit+0x1d8>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055f4:	f7fc fda2 	bl	800213c <HAL_GetTick>
 80055f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2319      	movs	r3, #25
 8005600:	2201      	movs	r2, #1
 8005602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f001 fa5d 	bl	8006ac6 <I2C_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0be      	b.n	8005794 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2221      	movs	r2, #33	; 0x21
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2210      	movs	r2, #16
 8005622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	893a      	ldrh	r2, [r7, #8]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	2bff      	cmp	r3, #255	; 0xff
 8005646:	d90e      	bls.n	8005666 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	22ff      	movs	r2, #255	; 0xff
 800564c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005652:	b2da      	uxtb	r2, r3
 8005654:	8979      	ldrh	r1, [r7, #10]
 8005656:	4b51      	ldr	r3, [pc, #324]	; (800579c <HAL_I2C_Master_Transmit+0x1e0>)
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f001 fc48 	bl	8006ef4 <I2C_TransferConfig>
 8005664:	e06c      	b.n	8005740 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	b2da      	uxtb	r2, r3
 8005676:	8979      	ldrh	r1, [r7, #10]
 8005678:	4b48      	ldr	r3, [pc, #288]	; (800579c <HAL_I2C_Master_Transmit+0x1e0>)
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f001 fc37 	bl	8006ef4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005686:	e05b      	b.n	8005740 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	6a39      	ldr	r1, [r7, #32]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f001 fa5a 	bl	8006b46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e07b      	b.n	8005794 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d034      	beq.n	8005740 <HAL_I2C_Master_Transmit+0x184>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d130      	bne.n	8005740 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2200      	movs	r2, #0
 80056e6:	2180      	movs	r1, #128	; 0x80
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f001 f9ec 	bl	8006ac6 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e04d      	b.n	8005794 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2bff      	cmp	r3, #255	; 0xff
 8005700:	d90e      	bls.n	8005720 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	b2da      	uxtb	r2, r3
 800570e:	8979      	ldrh	r1, [r7, #10]
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f001 fbeb 	bl	8006ef4 <I2C_TransferConfig>
 800571e:	e00f      	b.n	8005740 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572e:	b2da      	uxtb	r2, r3
 8005730:	8979      	ldrh	r1, [r7, #10]
 8005732:	2300      	movs	r3, #0
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f001 fbda 	bl	8006ef4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d19e      	bne.n	8005688 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	6a39      	ldr	r1, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 fa39 	bl	8006bc6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e01a      	b.n	8005794 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2220      	movs	r2, #32
 8005764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005772:	400b      	ands	r3, r1
 8005774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	e000      	b.n	8005794 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005792:	2302      	movs	r3, #2
  }
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	80002000 	.word	0x80002000
 80057a0:	fe00e800 	.word	0xfe00e800

080057a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	461a      	mov	r2, r3
 80057b0:	460b      	mov	r3, r1
 80057b2:	817b      	strh	r3, [r7, #10]
 80057b4:	4613      	mov	r3, r2
 80057b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	f040 80db 	bne.w	800597c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_I2C_Master_Receive+0x30>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e0d4      	b.n	800597e <HAL_I2C_Master_Receive+0x1da>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057dc:	f7fc fcae 	bl	800213c <HAL_GetTick>
 80057e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2319      	movs	r3, #25
 80057e8:	2201      	movs	r2, #1
 80057ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f001 f969 	bl	8006ac6 <I2C_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e0bf      	b.n	800597e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2222      	movs	r2, #34	; 0x22
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2210      	movs	r2, #16
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	893a      	ldrh	r2, [r7, #8]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	2bff      	cmp	r3, #255	; 0xff
 800582e:	d90e      	bls.n	800584e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	22ff      	movs	r2, #255	; 0xff
 8005834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583a:	b2da      	uxtb	r2, r3
 800583c:	8979      	ldrh	r1, [r7, #10]
 800583e:	4b52      	ldr	r3, [pc, #328]	; (8005988 <HAL_I2C_Master_Receive+0x1e4>)
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 fb54 	bl	8006ef4 <I2C_TransferConfig>
 800584c:	e06d      	b.n	800592a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585c:	b2da      	uxtb	r2, r3
 800585e:	8979      	ldrh	r1, [r7, #10]
 8005860:	4b49      	ldr	r3, [pc, #292]	; (8005988 <HAL_I2C_Master_Receive+0x1e4>)
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f001 fb43 	bl	8006ef4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800586e:	e05c      	b.n	800592a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	6a39      	ldr	r1, [r7, #32]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f001 f9e3 	bl	8006c40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e07c      	b.n	800597e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d034      	beq.n	800592a <HAL_I2C_Master_Receive+0x186>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d130      	bne.n	800592a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2200      	movs	r2, #0
 80058d0:	2180      	movs	r1, #128	; 0x80
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f001 f8f7 	bl	8006ac6 <I2C_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e04d      	b.n	800597e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2bff      	cmp	r3, #255	; 0xff
 80058ea:	d90e      	bls.n	800590a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	22ff      	movs	r2, #255	; 0xff
 80058f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	8979      	ldrh	r1, [r7, #10]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f001 faf6 	bl	8006ef4 <I2C_TransferConfig>
 8005908:	e00f      	b.n	800592a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005918:	b2da      	uxtb	r2, r3
 800591a:	8979      	ldrh	r1, [r7, #10]
 800591c:	2300      	movs	r3, #0
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f001 fae5 	bl	8006ef4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d19d      	bne.n	8005870 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	6a39      	ldr	r1, [r7, #32]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f001 f944 	bl	8006bc6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e01a      	b.n	800597e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2220      	movs	r2, #32
 800594e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <HAL_I2C_Master_Receive+0x1e8>)
 800595c:	400b      	ands	r3, r1
 800595e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	e000      	b.n	800597e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800597c:	2302      	movs	r3, #2
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	80002400 	.word	0x80002400
 800598c:	fe00e800 	.word	0xfe00e800

08005990 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d139      	bne.n	8005a1e <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_I2C_Slave_Transmit_IT+0x28>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e033      	b.n	8005a20 <HAL_I2C_Slave_Transmit_IT+0x90>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2221      	movs	r2, #33	; 0x21
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059e4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <HAL_I2C_Slave_Transmit_IT+0x98>)
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <HAL_I2C_Slave_Transmit_IT+0x9c>)
 8005a06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005a10:	f248 0101 	movw	r1, #32769	; 0x8001
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f001 fa9f 	bl	8006f58 <I2C_Enable_IRQ>

    return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e000      	b.n	8005a20 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8005a1e:	2302      	movs	r3, #2
  }
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	ffff0000 	.word	0xffff0000
 8005a2c:	08005c63 	.word	0x08005c63

08005a30 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d139      	bne.n	8005abe <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_I2C_Slave_Receive_IT+0x28>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e033      	b.n	8005ac0 <HAL_I2C_Slave_Receive_IT+0x90>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2222      	movs	r2, #34	; 0x22
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a84:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <HAL_I2C_Slave_Receive_IT+0x98>)
 8005aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <HAL_I2C_Slave_Receive_IT+0x9c>)
 8005aa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005ab0:	f248 0102 	movw	r1, #32770	; 0x8002
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f001 fa4f 	bl	8006f58 <I2C_Enable_IRQ>

    return HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e000      	b.n	8005ac0 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	ffff0000 	.word	0xffff0000
 8005acc:	08005c63 	.word	0x08005c63

08005ad0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
  }
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00f      	beq.n	8005b46 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b34:	f043 0201 	orr.w	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00f      	beq.n	8005b70 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	f043 0208 	orr.w	r2, r3, #8
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00f      	beq.n	8005b9a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	f043 0202 	orr.w	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b98:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 030b 	and.w	r3, r3, #11
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fe51 	bl	8006854 <I2C_ITError>
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
 8005c02:	4613      	mov	r3, r2
 8005c04:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <I2C_Slave_ISR_IT+0x24>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e0e1      	b.n	8005e4a <I2C_Slave_ISR_IT+0x1e8>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ca2:	6939      	ldr	r1, [r7, #16]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fc7b 	bl	80065a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d04b      	beq.n	8005d4c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d046      	beq.n	8005d4c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d128      	bne.n	8005d1a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b28      	cmp	r3, #40	; 0x28
 8005cd2:	d108      	bne.n	8005ce6 <I2C_Slave_ISR_IT+0x84>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cda:	d104      	bne.n	8005ce6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cdc:	6939      	ldr	r1, [r7, #16]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fd64 	bl	80067ac <I2C_ITListenCplt>
 8005ce4:	e031      	b.n	8005d4a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b29      	cmp	r3, #41	; 0x29
 8005cf0:	d10e      	bne.n	8005d10 <I2C_Slave_ISR_IT+0xae>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cf8:	d00a      	beq.n	8005d10 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fe9d 	bl	8006a42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fb24 	bl	8006356 <I2C_ITSlaveSeqCplt>
 8005d0e:	e01c      	b.n	8005d4a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2210      	movs	r2, #16
 8005d16:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d18:	e08f      	b.n	8005e3a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2210      	movs	r2, #16
 8005d20:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	f043 0204 	orr.w	r2, r3, #4
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <I2C_Slave_ISR_IT+0xda>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d3a:	d17e      	bne.n	8005e3a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	4619      	mov	r1, r3
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fd86 	bl	8006854 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d48:	e077      	b.n	8005e3a <I2C_Slave_ISR_IT+0x1d8>
 8005d4a:	e076      	b.n	8005e3a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d02f      	beq.n	8005db6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d02a      	beq.n	8005db6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d018      	beq.n	8005d9c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d14b      	bne.n	8005e3e <I2C_Slave_ISR_IT+0x1dc>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dac:	d047      	beq.n	8005e3e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fad1 	bl	8006356 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005db4:	e043      	b.n	8005e3e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dca:	6939      	ldr	r1, [r7, #16]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fa01 	bl	80061d4 <I2C_ITAddrCplt>
 8005dd2:	e035      	b.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d030      	beq.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02b      	beq.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d018      	beq.n	8005e24 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	851a      	strh	r2, [r3, #40]	; 0x28
 8005e22:	e00d      	b.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e2a:	d002      	beq.n	8005e32 <I2C_Slave_ISR_IT+0x1d0>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fa8f 	bl	8006356 <I2C_ITSlaveSeqCplt>
 8005e38:	e002      	b.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005e3e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b088      	sub	sp, #32
 8005e56:	af02      	add	r7, sp, #8
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <I2C_Master_ISR_DMA+0x1a>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0d9      	b.n	8006020 <I2C_Master_ISR_DMA+0x1ce>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	f043 0204 	orr.w	r2, r3, #4
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e9c:	2120      	movs	r1, #32
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 f85a 	bl	8006f58 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fdcc 	bl	8006a42 <I2C_Flush_TXDR>
 8005eaa:	e0b4      	b.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d071      	beq.n	8005f9a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d06c      	beq.n	8005f9a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ece:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d04e      	beq.n	8005f78 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2bff      	cmp	r3, #255	; 0xff
 8005ef0:	d906      	bls.n	8005f00 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	22ff      	movs	r2, #255	; 0xff
 8005ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	e010      	b.n	8005f22 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f12:	d003      	beq.n	8005f1c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e002      	b.n	8005f22 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f20:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	8a79      	ldrh	r1, [r7, #18]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 ffdf 	bl	8006ef4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b22      	cmp	r3, #34	; 0x22
 8005f52:	d108      	bne.n	8005f66 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f64:	e057      	b.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f76:	e04e      	b.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f86:	d003      	beq.n	8005f90 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f9a7 	bl	80062dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005f8e:	e042      	b.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f90:	2140      	movs	r1, #64	; 0x40
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fc5e 	bl	8006854 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f98:	e03d      	b.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d028      	beq.n	8005ff6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d023      	beq.n	8005ff6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d119      	bne.n	8005fec <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fc6:	d025      	beq.n	8006014 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fd0:	d108      	bne.n	8005fe4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005fe2:	e017      	b.n	8006014 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f979 	bl	80062dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005fea:	e013      	b.n	8006014 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fec:	2140      	movs	r1, #64	; 0x40
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fc30 	bl	8006854 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ff4:	e00e      	b.n	8006014 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f9ff 	bl	8006410 <I2C_ITMasterCplt>
 8006012:	e000      	b.n	8006016 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006014:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <I2C_Slave_ISR_DMA+0x24>
 8006048:	2302      	movs	r3, #2
 800604a:	e0bf      	b.n	80061cc <I2C_Slave_ISR_DMA+0x1a4>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d008      	beq.n	8006070 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 fa98 	bl	80065a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0310 	and.w	r3, r3, #16
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8095 	beq.w	80061a6 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 808f 	beq.w	80061a6 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006098:	2b00      	cmp	r3, #0
 800609a:	d07d      	beq.n	8006198 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00c      	beq.n	80060e0 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80060dc:	2301      	movs	r3, #1
 80060de:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d128      	bne.n	8006138 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b28      	cmp	r3, #40	; 0x28
 80060f0:	d108      	bne.n	8006104 <I2C_Slave_ISR_DMA+0xdc>
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f8:	d104      	bne.n	8006104 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 fb55 	bl	80067ac <I2C_ITListenCplt>
 8006102:	e048      	b.n	8006196 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b29      	cmp	r3, #41	; 0x29
 800610e:	d10e      	bne.n	800612e <I2C_Slave_ISR_DMA+0x106>
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006116:	d00a      	beq.n	800612e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2210      	movs	r2, #16
 800611e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fc8e 	bl	8006a42 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f915 	bl	8006356 <I2C_ITSlaveSeqCplt>
 800612c:	e033      	b.n	8006196 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2210      	movs	r2, #16
 8006134:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006136:	e034      	b.n	80061a2 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2210      	movs	r2, #16
 800613e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	f043 0204 	orr.w	r2, r3, #4
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006152:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <I2C_Slave_ISR_DMA+0x13a>
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006160:	d11f      	bne.n	80061a2 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b21      	cmp	r3, #33	; 0x21
 8006166:	d002      	beq.n	800616e <I2C_Slave_ISR_DMA+0x146>
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b29      	cmp	r3, #41	; 0x29
 800616c:	d103      	bne.n	8006176 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2221      	movs	r2, #33	; 0x21
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
 8006174:	e008      	b.n	8006188 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	2b22      	cmp	r3, #34	; 0x22
 800617a:	d002      	beq.n	8006182 <I2C_Slave_ISR_DMA+0x15a>
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	2b2a      	cmp	r3, #42	; 0x2a
 8006180:	d102      	bne.n	8006188 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2222      	movs	r2, #34	; 0x22
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fb60 	bl	8006854 <I2C_ITError>
      if (treatdmanack == 1U)
 8006194:	e005      	b.n	80061a2 <I2C_Slave_ISR_DMA+0x17a>
 8006196:	e004      	b.n	80061a2 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2210      	movs	r2, #16
 800619e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061a0:	e00f      	b.n	80061c2 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80061a2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061a4:	e00d      	b.n	80061c2 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f809 	bl	80061d4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061ea:	2b28      	cmp	r3, #40	; 0x28
 80061ec:	d16a      	bne.n	80062c4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	b29b      	uxth	r3, r3
 8006208:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800620c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800621a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006228:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d138      	bne.n	80062a4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006232:	897b      	ldrh	r3, [r7, #10]
 8006234:	09db      	lsrs	r3, r3, #7
 8006236:	b29a      	uxth	r2, r3
 8006238:	89bb      	ldrh	r3, [r7, #12]
 800623a:	4053      	eors	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	f003 0306 	and.w	r3, r3, #6
 8006242:	2b00      	cmp	r3, #0
 8006244:	d11c      	bne.n	8006280 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006246:	897b      	ldrh	r3, [r7, #10]
 8006248:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006258:	2b02      	cmp	r3, #2
 800625a:	d13b      	bne.n	80062d4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2208      	movs	r2, #8
 8006268:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006272:	89ba      	ldrh	r2, [r7, #12]
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff fcbc 	bl	8005bf6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800627e:	e029      	b.n	80062d4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006280:	893b      	ldrh	r3, [r7, #8]
 8006282:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fecf 	bl	800702c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006296:	89ba      	ldrh	r2, [r7, #12]
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff fcaa 	bl	8005bf6 <HAL_I2C_AddrCallback>
}
 80062a2:	e017      	b.n	80062d4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 febf 	bl	800702c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062b6:	89ba      	ldrh	r2, [r7, #12]
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fc9a 	bl	8005bf6 <HAL_I2C_AddrCallback>
}
 80062c2:	e007      	b.n	80062d4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2208      	movs	r2, #8
 80062ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b21      	cmp	r3, #33	; 0x21
 80062f6:	d115      	bne.n	8006324 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2211      	movs	r2, #17
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800630c:	2101      	movs	r1, #1
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fe8c 	bl	800702c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff fc4c 	bl	8005bba <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006322:	e014      	b.n	800634e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2212      	movs	r2, #18
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006338:	2102      	movs	r1, #2
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fe76 	bl	800702c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fc40 	bl	8005bce <HAL_I2C_MasterRxCpltCallback>
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e00c      	b.n	80063a4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b29      	cmp	r3, #41	; 0x29
 80063ae:	d112      	bne.n	80063d6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2228      	movs	r2, #40	; 0x28
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2221      	movs	r2, #33	; 0x21
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063be:	2101      	movs	r1, #1
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fe33 	bl	800702c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fc07 	bl	8005be2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063d4:	e017      	b.n	8006406 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b2a      	cmp	r3, #42	; 0x2a
 80063e0:	d111      	bne.n	8006406 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2228      	movs	r2, #40	; 0x28
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2222      	movs	r2, #34	; 0x22
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063f0:	2102      	movs	r1, #2
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fe1a 	bl	800702c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f010 fc97 	bl	8016d34 <HAL_I2C_SlaveRxCpltCallback>
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2220      	movs	r2, #32
 8006424:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b21      	cmp	r3, #33	; 0x21
 8006430:	d107      	bne.n	8006442 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006432:	2101      	movs	r1, #1
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fdf9 	bl	800702c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2211      	movs	r2, #17
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
 8006440:	e00c      	b.n	800645c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b22      	cmp	r3, #34	; 0x22
 800644c:	d106      	bne.n	800645c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800644e:	2102      	movs	r1, #2
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fdeb 	bl	800702c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2212      	movs	r2, #18
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b4c      	ldr	r3, [pc, #304]	; (8006598 <I2C_ITMasterCplt+0x188>)
 8006468:	400b      	ands	r3, r1
 800646a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a49      	ldr	r2, [pc, #292]	; (800659c <I2C_ITMasterCplt+0x18c>)
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2210      	movs	r2, #16
 8006488:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648e:	f043 0204 	orr.w	r2, r3, #4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b60      	cmp	r3, #96	; 0x60
 80064a0:	d10a      	bne.n	80064b8 <I2C_ITMasterCplt+0xa8>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80064b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fac2 	bl	8006a42 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b60      	cmp	r3, #96	; 0x60
 80064ce:	d002      	beq.n	80064d6 <I2C_ITMasterCplt+0xc6>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9b9 	bl	8006854 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80064e2:	e054      	b.n	800658e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b21      	cmp	r3, #33	; 0x21
 80064ee:	d124      	bne.n	800653a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d10b      	bne.n	8006522 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fb83 	bl	8005c26 <HAL_I2C_MemTxCpltCallback>
}
 8006520:	e035      	b.n	800658e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fb41 	bl	8005bba <HAL_I2C_MasterTxCpltCallback>
}
 8006538:	e029      	b.n	800658e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b22      	cmp	r3, #34	; 0x22
 8006544:	d123      	bne.n	800658e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	d10b      	bne.n	8006578 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fb62 	bl	8005c3a <HAL_I2C_MemRxCpltCallback>
}
 8006576:	e00a      	b.n	800658e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff fb20 	bl	8005bce <HAL_I2C_MasterRxCpltCallback>
}
 800658e:	bf00      	nop
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	fe00e800 	.word	0xfe00e800
 800659c:	ffff0000 	.word	0xffff0000

080065a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2220      	movs	r2, #32
 80065c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b21      	cmp	r3, #33	; 0x21
 80065ca:	d002      	beq.n	80065d2 <I2C_ITSlaveCplt+0x32>
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b29      	cmp	r3, #41	; 0x29
 80065d0:	d108      	bne.n	80065e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80065d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fd28 	bl	800702c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2221      	movs	r2, #33	; 0x21
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
 80065e2:	e00d      	b.n	8006600 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b22      	cmp	r3, #34	; 0x22
 80065e8:	d002      	beq.n	80065f0 <I2C_ITSlaveCplt+0x50>
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	2b2a      	cmp	r3, #42	; 0x2a
 80065ee:	d107      	bne.n	8006600 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80065f0:	f248 0102 	movw	r1, #32770	; 0x8002
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fd19 	bl	800702c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2222      	movs	r2, #34	; 0x22
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800660e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b62      	ldr	r3, [pc, #392]	; (80067a4 <I2C_ITSlaveCplt+0x204>)
 800661c:	400b      	ands	r3, r1
 800661e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa0e 	bl	8006a42 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800663e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01f      	beq.n	8006688 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	b29a      	uxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006656:	e017      	b.n	8006688 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d012      	beq.n	8006688 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006670:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b29a      	uxth	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d020      	beq.n	80066d4 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 0304 	bic.w	r3, r3, #4
 8006698:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d010      	beq.n	8006722 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8a4 	bl	8006854 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b28      	cmp	r3, #40	; 0x28
 8006716:	d141      	bne.n	800679c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006718:	6979      	ldr	r1, [r7, #20]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f846 	bl	80067ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006720:	e03c      	b.n	800679c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800672a:	d014      	beq.n	8006756 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fe12 	bl	8006356 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <I2C_ITSlaveCplt+0x208>)
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fa5f 	bl	8005c12 <HAL_I2C_ListenCpltCallback>
}
 8006754:	e022      	b.n	800679c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b22      	cmp	r3, #34	; 0x22
 8006760:	d10e      	bne.n	8006780 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f010 fadb 	bl	8016d34 <HAL_I2C_SlaveRxCpltCallback>
}
 800677e:	e00d      	b.n	800679c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fa23 	bl	8005be2 <HAL_I2C_SlaveTxCpltCallback>
}
 800679c:	bf00      	nop
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	fe00e800 	.word	0xfe00e800
 80067a8:	ffff0000 	.word	0xffff0000

080067ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a25      	ldr	r2, [pc, #148]	; (8006850 <I2C_ITListenCplt+0xa4>)
 80067ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d022      	beq.n	8006828 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d012      	beq.n	8006828 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	f043 0204 	orr.w	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006828:	f248 0103 	movw	r1, #32771	; 0x8003
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fbfd 	bl	800702c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2210      	movs	r2, #16
 8006838:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff f9e5 	bl	8005c12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006848:	bf00      	nop
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	ffff0000 	.word	0xffff0000

08006854 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a5d      	ldr	r2, [pc, #372]	; (80069e8 <I2C_ITError+0x194>)
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b28      	cmp	r3, #40	; 0x28
 800688a:	d005      	beq.n	8006898 <I2C_ITError+0x44>
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b29      	cmp	r3, #41	; 0x29
 8006890:	d002      	beq.n	8006898 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b2a      	cmp	r3, #42	; 0x2a
 8006896:	d10b      	bne.n	80068b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006898:	2103      	movs	r1, #3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fbc6 	bl	800702c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2228      	movs	r2, #40	; 0x28
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a50      	ldr	r2, [pc, #320]	; (80069ec <I2C_ITError+0x198>)
 80068ac:	635a      	str	r2, [r3, #52]	; 0x34
 80068ae:	e011      	b.n	80068d4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80068b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fbb9 	bl	800702c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b60      	cmp	r3, #96	; 0x60
 80068c4:	d003      	beq.n	80068ce <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d039      	beq.n	8006956 <I2C_ITError+0x102>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b11      	cmp	r3, #17
 80068e6:	d002      	beq.n	80068ee <I2C_ITError+0x9a>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b21      	cmp	r3, #33	; 0x21
 80068ec:	d133      	bne.n	8006956 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fc:	d107      	bne.n	800690e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800690c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	4618      	mov	r0, r3
 8006914:	f7fd f928 	bl	8003b68 <HAL_DMA_GetState>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d017      	beq.n	800694e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	4a33      	ldr	r2, [pc, #204]	; (80069f0 <I2C_ITError+0x19c>)
 8006924:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	4618      	mov	r0, r3
 8006934:	f7fc ff6c 	bl	8003810 <HAL_DMA_Abort_IT>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d04d      	beq.n	80069da <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800694c:	e045      	b.n	80069da <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f850 	bl	80069f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006954:	e041      	b.n	80069da <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d039      	beq.n	80069d2 <I2C_ITError+0x17e>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b12      	cmp	r3, #18
 8006962:	d002      	beq.n	800696a <I2C_ITError+0x116>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b22      	cmp	r3, #34	; 0x22
 8006968:	d133      	bne.n	80069d2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	d107      	bne.n	800698a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006988:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	4618      	mov	r0, r3
 8006990:	f7fd f8ea 	bl	8003b68 <HAL_DMA_GetState>
 8006994:	4603      	mov	r3, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	d017      	beq.n	80069ca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <I2C_ITError+0x19c>)
 80069a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fc ff2e 	bl	8003810 <HAL_DMA_Abort_IT>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d011      	beq.n	80069de <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069c8:	e009      	b.n	80069de <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f812 	bl	80069f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069d0:	e005      	b.n	80069de <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f80e 	bl	80069f4 <I2C_TreatErrorCallback>
  }
}
 80069d8:	e002      	b.n	80069e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069de:	bf00      	nop
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	ffff0000 	.word	0xffff0000
 80069ec:	08005c63 	.word	0x08005c63
 80069f0:	08006a8b 	.word	0x08006a8b

080069f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b60      	cmp	r3, #96	; 0x60
 8006a06:	d10e      	bne.n	8006a26 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff f915 	bl	8005c4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a24:	e009      	b.n	8006a3a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f010 f99d 	bl	8016d74 <HAL_I2C_ErrorCallback>
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d103      	bne.n	8006a60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d007      	beq.n	8006a7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0201 	orr.w	r2, r2, #1
 8006a7c:	619a      	str	r2, [r3, #24]
  }
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff ff9b 	bl	80069f4 <I2C_TreatErrorCallback>
}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ad6:	e022      	b.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ade:	d01e      	beq.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae0:	f7fb fb2c 	bl	800213c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d302      	bcc.n	8006af6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d113      	bne.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	f043 0220 	orr.w	r2, r3, #32
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e00f      	b.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	bf0c      	ite	eq
 8006b2e:	2301      	moveq	r3, #1
 8006b30:	2300      	movne	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d0cd      	beq.n	8006ad8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b52:	e02c      	b.n	8006bae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f8eb 	bl	8006d34 <I2C_IsErrorOccurred>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e02a      	b.n	8006bbe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d01e      	beq.n	8006bae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b70:	f7fb fae4 	bl	800213c <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d113      	bne.n	8006bae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	f043 0220 	orr.w	r2, r3, #32
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e007      	b.n	8006bbe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d1cb      	bne.n	8006b54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bd2:	e028      	b.n	8006c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f8ab 	bl	8006d34 <I2C_IsErrorOccurred>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e026      	b.n	8006c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be8:	f7fb faa8 	bl	800213c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d302      	bcc.n	8006bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d113      	bne.n	8006c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	f043 0220 	orr.w	r2, r3, #32
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e007      	b.n	8006c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d1cf      	bne.n	8006bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c4c:	e064      	b.n	8006d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f86e 	bl	8006d34 <I2C_IsErrorOccurred>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e062      	b.n	8006d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d138      	bne.n	8006ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d105      	bne.n	8006c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e04e      	b.n	8006d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d107      	bne.n	8006ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2210      	movs	r2, #16
 8006c9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ca6:	e002      	b.n	8006cae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6859      	ldr	r1, [r3, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	4b1b      	ldr	r3, [pc, #108]	; (8006d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006cc2:	400b      	ands	r3, r1
 8006cc4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e022      	b.n	8006d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce2:	f7fb fa2b 	bl	800213c <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d302      	bcc.n	8006cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10f      	bne.n	8006d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfc:	f043 0220 	orr.w	r2, r3, #32
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e007      	b.n	8006d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d193      	bne.n	8006c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	fe00e800 	.word	0xfe00e800

08006d34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d068      	beq.n	8006e32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2210      	movs	r2, #16
 8006d66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d68:	e049      	b.n	8006dfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d045      	beq.n	8006dfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fb f9e3 	bl	800213c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <I2C_IsErrorOccurred+0x54>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13a      	bne.n	8006dfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006daa:	d121      	bne.n	8006df0 <I2C_IsErrorOccurred+0xbc>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db2:	d01d      	beq.n	8006df0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006db4:	7cfb      	ldrb	r3, [r7, #19]
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d01a      	beq.n	8006df0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006dca:	f7fb f9b7 	bl	800213c <HAL_GetTick>
 8006dce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dd0:	e00e      	b.n	8006df0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006dd2:	f7fb f9b3 	bl	800213c <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b19      	cmp	r3, #25
 8006dde:	d907      	bls.n	8006df0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	f043 0320 	orr.w	r3, r3, #32
 8006de6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006dee:	e006      	b.n	8006dfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d1e9      	bne.n	8006dd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d003      	beq.n	8006e14 <I2C_IsErrorOccurred+0xe0>
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0aa      	beq.n	8006d6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d103      	bne.n	8006e24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2220      	movs	r2, #32
 8006e22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	f043 0304 	orr.w	r3, r3, #4
 8006e2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f043 0308 	orr.w	r3, r3, #8
 8006e6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01c      	beq.n	8006ee2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff fdca 	bl	8006a42 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <I2C_IsErrorOccurred+0x1bc>)
 8006eba:	400b      	ands	r3, r1
 8006ebc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3728      	adds	r7, #40	; 0x28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	fe00e800 	.word	0xfe00e800

08006ef4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	817b      	strh	r3, [r7, #10]
 8006f02:	4613      	mov	r3, r2
 8006f04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f06:	897b      	ldrh	r3, [r7, #10]
 8006f08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f0c:	7a7b      	ldrb	r3, [r7, #9]
 8006f0e:	041b      	lsls	r3, r3, #16
 8006f10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	0d5b      	lsrs	r3, r3, #21
 8006f2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f32:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <I2C_TransferConfig+0x60>)
 8006f34:	430b      	orrs	r3, r1
 8006f36:	43db      	mvns	r3, r3
 8006f38:	ea02 0103 	and.w	r1, r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	03ff63ff 	.word	0x03ff63ff

08006f58 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	4a2d      	ldr	r2, [pc, #180]	; (8007024 <I2C_Enable_IRQ+0xcc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006f76:	4a2c      	ldr	r2, [pc, #176]	; (8007028 <I2C_Enable_IRQ+0xd0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d11d      	bne.n	8006fb8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da03      	bge.n	8006f8c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006f8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006f8c:	887b      	ldrh	r3, [r7, #2]
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d103      	bne.n	8006f9a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006f98:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006f9a:	887b      	ldrh	r3, [r7, #2]
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d103      	bne.n	8006fa8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fa6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006fa8:	887b      	ldrh	r3, [r7, #2]
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	d12c      	bne.n	8007008 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006fb6:	e027      	b.n	8007008 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	da03      	bge.n	8006fc8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006fc6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006fc8:	887b      	ldrh	r3, [r7, #2]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006fd8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006fda:	887b      	ldrh	r3, [r7, #2]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006fea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006fec:	887b      	ldrh	r3, [r7, #2]
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d103      	bne.n	8006ffa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006ff8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006ffa:	887b      	ldrh	r3, [r7, #2]
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d103      	bne.n	8007008 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f043 0320 	orr.w	r3, r3, #32
 8007006:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6819      	ldr	r1, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	430a      	orrs	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	08005e53 	.word	0x08005e53
 8007028:	08006029 	.word	0x08006029

0800702c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800703c:	887b      	ldrh	r3, [r7, #2]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00f      	beq.n	8007066 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800704c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800705a:	2b28      	cmp	r3, #40	; 0x28
 800705c:	d003      	beq.n	8007066 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007064:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007066:	887b      	ldrh	r3, [r7, #2]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00f      	beq.n	8007090 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007076:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007084:	2b28      	cmp	r3, #40	; 0x28
 8007086:	d003      	beq.n	8007090 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800708e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007090:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007094:	2b00      	cmp	r3, #0
 8007096:	da03      	bge.n	80070a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800709e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80070a0:	887b      	ldrh	r3, [r7, #2]
 80070a2:	2b10      	cmp	r3, #16
 80070a4:	d103      	bne.n	80070ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80070ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80070ae:	887b      	ldrh	r3, [r7, #2]
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d103      	bne.n	80070bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f043 0320 	orr.w	r3, r3, #32
 80070ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80070bc:	887b      	ldrh	r3, [r7, #2]
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d103      	bne.n	80070ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	43da      	mvns	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	400a      	ands	r2, r1
 80070da:	601a      	str	r2, [r3, #0]
}
 80070dc:	bf00      	nop
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d138      	bne.n	8007170 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007108:	2302      	movs	r3, #2
 800710a:	e032      	b.n	8007172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2224      	movs	r2, #36	; 0x24
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800713a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6819      	ldr	r1, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	e000      	b.n	8007172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007170:	2302      	movs	r3, #2
  }
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b20      	cmp	r3, #32
 8007192:	d139      	bne.n	8007208 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800719e:	2302      	movs	r3, #2
 80071a0:	e033      	b.n	800720a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2224      	movs	r2, #36	; 0x24
 80071ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e000      	b.n	800720a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
	...

08007218 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a04      	ldr	r2, [pc, #16]	; (8007234 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007226:	6013      	str	r3, [r2, #0]
}
 8007228:	bf00      	nop
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40007000 	.word	0x40007000

08007238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e291      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8087 	beq.w	800736a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800725c:	4b96      	ldr	r3, [pc, #600]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f003 030c 	and.w	r3, r3, #12
 8007264:	2b04      	cmp	r3, #4
 8007266:	d00c      	beq.n	8007282 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007268:	4b93      	ldr	r3, [pc, #588]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f003 030c 	and.w	r3, r3, #12
 8007270:	2b08      	cmp	r3, #8
 8007272:	d112      	bne.n	800729a <HAL_RCC_OscConfig+0x62>
 8007274:	4b90      	ldr	r3, [pc, #576]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800727c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007280:	d10b      	bne.n	800729a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007282:	4b8d      	ldr	r3, [pc, #564]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d06c      	beq.n	8007368 <HAL_RCC_OscConfig+0x130>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d168      	bne.n	8007368 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e26b      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a2:	d106      	bne.n	80072b2 <HAL_RCC_OscConfig+0x7a>
 80072a4:	4b84      	ldr	r3, [pc, #528]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a83      	ldr	r2, [pc, #524]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	e02e      	b.n	8007310 <HAL_RCC_OscConfig+0xd8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCC_OscConfig+0x9c>
 80072ba:	4b7f      	ldr	r3, [pc, #508]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a7e      	ldr	r2, [pc, #504]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b7c      	ldr	r3, [pc, #496]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a7b      	ldr	r2, [pc, #492]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e01d      	b.n	8007310 <HAL_RCC_OscConfig+0xd8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072dc:	d10c      	bne.n	80072f8 <HAL_RCC_OscConfig+0xc0>
 80072de:	4b76      	ldr	r3, [pc, #472]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a75      	ldr	r2, [pc, #468]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4b73      	ldr	r3, [pc, #460]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a72      	ldr	r2, [pc, #456]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e00b      	b.n	8007310 <HAL_RCC_OscConfig+0xd8>
 80072f8:	4b6f      	ldr	r3, [pc, #444]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a6e      	ldr	r2, [pc, #440]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80072fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4b6c      	ldr	r3, [pc, #432]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a6b      	ldr	r2, [pc, #428]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 800730a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800730e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fa ff10 	bl	800213c <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007320:	f7fa ff0c 	bl	800213c <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b64      	cmp	r3, #100	; 0x64
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e21f      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007332:	4b61      	ldr	r3, [pc, #388]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0xe8>
 800733e:	e014      	b.n	800736a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007340:	f7fa fefc 	bl	800213c <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007346:	e008      	b.n	800735a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007348:	f7fa fef8 	bl	800213c <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b64      	cmp	r3, #100	; 0x64
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e20b      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800735a:	4b57      	ldr	r3, [pc, #348]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1f0      	bne.n	8007348 <HAL_RCC_OscConfig+0x110>
 8007366:	e000      	b.n	800736a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d069      	beq.n	800744a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007376:	4b50      	ldr	r3, [pc, #320]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 030c 	and.w	r3, r3, #12
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007382:	4b4d      	ldr	r3, [pc, #308]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 030c 	and.w	r3, r3, #12
 800738a:	2b08      	cmp	r3, #8
 800738c:	d11c      	bne.n	80073c8 <HAL_RCC_OscConfig+0x190>
 800738e:	4b4a      	ldr	r3, [pc, #296]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d116      	bne.n	80073c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800739a:	4b47      	ldr	r3, [pc, #284]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_RCC_OscConfig+0x17a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d001      	beq.n	80073b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e1df      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073b2:	4b41      	ldr	r3, [pc, #260]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	493d      	ldr	r1, [pc, #244]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073c6:	e040      	b.n	800744a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d023      	beq.n	8007418 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073d0:	4b39      	ldr	r3, [pc, #228]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a38      	ldr	r2, [pc, #224]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073dc:	f7fa feae 	bl	800213c <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073e4:	f7fa feaa 	bl	800213c <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e1bd      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f6:	4b30      	ldr	r3, [pc, #192]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007402:	4b2d      	ldr	r3, [pc, #180]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	4929      	ldr	r1, [pc, #164]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007412:	4313      	orrs	r3, r2
 8007414:	600b      	str	r3, [r1, #0]
 8007416:	e018      	b.n	800744a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007418:	4b27      	ldr	r3, [pc, #156]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007424:	f7fa fe8a 	bl	800213c <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800742c:	f7fa fe86 	bl	800213c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e199      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800743e:	4b1e      	ldr	r3, [pc, #120]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f0      	bne.n	800742c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d038      	beq.n	80074c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d019      	beq.n	8007492 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800745e:	4b16      	ldr	r3, [pc, #88]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007464:	f043 0301 	orr.w	r3, r3, #1
 8007468:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746a:	f7fa fe67 	bl	800213c <HAL_GetTick>
 800746e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007470:	e008      	b.n	8007484 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007472:	f7fa fe63 	bl	800213c <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e176      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f0      	beq.n	8007472 <HAL_RCC_OscConfig+0x23a>
 8007490:	e01a      	b.n	80074c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007492:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007496:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <HAL_RCC_OscConfig+0x280>)
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749e:	f7fa fe4d 	bl	800213c <HAL_GetTick>
 80074a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074a4:	e00a      	b.n	80074bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074a6:	f7fa fe49 	bl	800213c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d903      	bls.n	80074bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e15c      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
 80074b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074bc:	4b91      	ldr	r3, [pc, #580]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80074be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1ee      	bne.n	80074a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80a4 	beq.w	800761e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074d6:	4b8b      	ldr	r3, [pc, #556]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10d      	bne.n	80074fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80074e2:	4b88      	ldr	r3, [pc, #544]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	4a87      	ldr	r2, [pc, #540]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80074e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ec:	6413      	str	r3, [r2, #64]	; 0x40
 80074ee:	4b85      	ldr	r3, [pc, #532]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074fe:	4b82      	ldr	r3, [pc, #520]	; (8007708 <HAL_RCC_OscConfig+0x4d0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d118      	bne.n	800753c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800750a:	4b7f      	ldr	r3, [pc, #508]	; (8007708 <HAL_RCC_OscConfig+0x4d0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a7e      	ldr	r2, [pc, #504]	; (8007708 <HAL_RCC_OscConfig+0x4d0>)
 8007510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007516:	f7fa fe11 	bl	800213c <HAL_GetTick>
 800751a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800751c:	e008      	b.n	8007530 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800751e:	f7fa fe0d 	bl	800213c <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b64      	cmp	r3, #100	; 0x64
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e120      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007530:	4b75      	ldr	r3, [pc, #468]	; (8007708 <HAL_RCC_OscConfig+0x4d0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0f0      	beq.n	800751e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d106      	bne.n	8007552 <HAL_RCC_OscConfig+0x31a>
 8007544:	4b6f      	ldr	r3, [pc, #444]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	4a6e      	ldr	r2, [pc, #440]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800754a:	f043 0301 	orr.w	r3, r3, #1
 800754e:	6713      	str	r3, [r2, #112]	; 0x70
 8007550:	e02d      	b.n	80075ae <HAL_RCC_OscConfig+0x376>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10c      	bne.n	8007574 <HAL_RCC_OscConfig+0x33c>
 800755a:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800755c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755e:	4a69      	ldr	r2, [pc, #420]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	6713      	str	r3, [r2, #112]	; 0x70
 8007566:	4b67      	ldr	r3, [pc, #412]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	4a66      	ldr	r2, [pc, #408]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800756c:	f023 0304 	bic.w	r3, r3, #4
 8007570:	6713      	str	r3, [r2, #112]	; 0x70
 8007572:	e01c      	b.n	80075ae <HAL_RCC_OscConfig+0x376>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b05      	cmp	r3, #5
 800757a:	d10c      	bne.n	8007596 <HAL_RCC_OscConfig+0x35e>
 800757c:	4b61      	ldr	r3, [pc, #388]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	4a60      	ldr	r2, [pc, #384]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007582:	f043 0304 	orr.w	r3, r3, #4
 8007586:	6713      	str	r3, [r2, #112]	; 0x70
 8007588:	4b5e      	ldr	r3, [pc, #376]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758c:	4a5d      	ldr	r2, [pc, #372]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	6713      	str	r3, [r2, #112]	; 0x70
 8007594:	e00b      	b.n	80075ae <HAL_RCC_OscConfig+0x376>
 8007596:	4b5b      	ldr	r3, [pc, #364]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	4a5a      	ldr	r2, [pc, #360]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	6713      	str	r3, [r2, #112]	; 0x70
 80075a2:	4b58      	ldr	r3, [pc, #352]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	4a57      	ldr	r2, [pc, #348]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80075a8:	f023 0304 	bic.w	r3, r3, #4
 80075ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d015      	beq.n	80075e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b6:	f7fa fdc1 	bl	800213c <HAL_GetTick>
 80075ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075bc:	e00a      	b.n	80075d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075be:	f7fa fdbd 	bl	800213c <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d901      	bls.n	80075d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e0ce      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d4:	4b4b      	ldr	r3, [pc, #300]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80075d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0ee      	beq.n	80075be <HAL_RCC_OscConfig+0x386>
 80075e0:	e014      	b.n	800760c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e2:	f7fa fdab 	bl	800213c <HAL_GetTick>
 80075e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e8:	e00a      	b.n	8007600 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ea:	f7fa fda7 	bl	800213c <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e0b8      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007600:	4b40      	ldr	r3, [pc, #256]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1ee      	bne.n	80075ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d105      	bne.n	800761e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007612:	4b3c      	ldr	r3, [pc, #240]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	4a3b      	ldr	r2, [pc, #236]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800761c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 80a4 	beq.w	8007770 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 030c 	and.w	r3, r3, #12
 8007630:	2b08      	cmp	r3, #8
 8007632:	d06b      	beq.n	800770c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d149      	bne.n	80076d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800763c:	4b31      	ldr	r3, [pc, #196]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a30      	ldr	r2, [pc, #192]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007648:	f7fa fd78 	bl	800213c <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007650:	f7fa fd74 	bl	800213c <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e087      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007662:	4b28      	ldr	r3, [pc, #160]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	019b      	lsls	r3, r3, #6
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	3b01      	subs	r3, #1
 8007688:	041b      	lsls	r3, r3, #16
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	061b      	lsls	r3, r3, #24
 8007692:	4313      	orrs	r3, r2
 8007694:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 8007696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800769a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800769c:	4b19      	ldr	r3, [pc, #100]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a18      	ldr	r2, [pc, #96]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80076a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a8:	f7fa fd48 	bl	800213c <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b0:	f7fa fd44 	bl	800213c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e057      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c2:	4b10      	ldr	r3, [pc, #64]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0f0      	beq.n	80076b0 <HAL_RCC_OscConfig+0x478>
 80076ce:	e04f      	b.n	8007770 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a0b      	ldr	r2, [pc, #44]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80076d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076dc:	f7fa fd2e 	bl	800213c <HAL_GetTick>
 80076e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e4:	f7fa fd2a 	bl	800213c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e03d      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f6:	4b03      	ldr	r3, [pc, #12]	; (8007704 <HAL_RCC_OscConfig+0x4cc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f0      	bne.n	80076e4 <HAL_RCC_OscConfig+0x4ac>
 8007702:	e035      	b.n	8007770 <HAL_RCC_OscConfig+0x538>
 8007704:	40023800 	.word	0x40023800
 8007708:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800770c:	4b1b      	ldr	r3, [pc, #108]	; (800777c <HAL_RCC_OscConfig+0x544>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d028      	beq.n	800776c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007724:	429a      	cmp	r2, r3
 8007726:	d121      	bne.n	800776c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007732:	429a      	cmp	r2, r3
 8007734:	d11a      	bne.n	800776c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800773c:	4013      	ands	r3, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007742:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007744:	4293      	cmp	r3, r2
 8007746:	d111      	bne.n	800776c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	3b01      	subs	r3, #1
 8007756:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007758:	429a      	cmp	r2, r3
 800775a:	d107      	bne.n	800776c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007768:	429a      	cmp	r2, r3
 800776a:	d001      	beq.n	8007770 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e000      	b.n	8007772 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40023800 	.word	0x40023800

08007780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e0d0      	b.n	800793a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007798:	4b6a      	ldr	r3, [pc, #424]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d910      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077a6:	4b67      	ldr	r3, [pc, #412]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 020f 	bic.w	r2, r3, #15
 80077ae:	4965      	ldr	r1, [pc, #404]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077b6:	4b63      	ldr	r3, [pc, #396]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d001      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0b8      	b.n	800793a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077e0:	4b59      	ldr	r3, [pc, #356]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	4a58      	ldr	r2, [pc, #352]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 80077e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077f8:	4b53      	ldr	r3, [pc, #332]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	4a52      	ldr	r2, [pc, #328]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 80077fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007802:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007804:	4b50      	ldr	r3, [pc, #320]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	494d      	ldr	r1, [pc, #308]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007812:	4313      	orrs	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d040      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d107      	bne.n	800783a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800782a:	4b47      	ldr	r3, [pc, #284]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d115      	bne.n	8007862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e07f      	b.n	800793a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d107      	bne.n	8007852 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007842:	4b41      	ldr	r3, [pc, #260]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d109      	bne.n	8007862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e073      	b.n	800793a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007852:	4b3d      	ldr	r3, [pc, #244]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e06b      	b.n	800793a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007862:	4b39      	ldr	r3, [pc, #228]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f023 0203 	bic.w	r2, r3, #3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	4936      	ldr	r1, [pc, #216]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007870:	4313      	orrs	r3, r2
 8007872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007874:	f7fa fc62 	bl	800213c <HAL_GetTick>
 8007878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800787a:	e00a      	b.n	8007892 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800787c:	f7fa fc5e 	bl	800213c <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	f241 3288 	movw	r2, #5000	; 0x1388
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e053      	b.n	800793a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007892:	4b2d      	ldr	r3, [pc, #180]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 020c 	and.w	r2, r3, #12
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d1eb      	bne.n	800787c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a4:	4b27      	ldr	r3, [pc, #156]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d210      	bcs.n	80078d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f023 020f 	bic.w	r2, r3, #15
 80078ba:	4922      	ldr	r1, [pc, #136]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	4313      	orrs	r3, r2
 80078c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c2:	4b20      	ldr	r3, [pc, #128]	; (8007944 <HAL_RCC_ClockConfig+0x1c4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d001      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e032      	b.n	800793a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078e0:	4b19      	ldr	r3, [pc, #100]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4916      	ldr	r1, [pc, #88]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	490e      	ldr	r1, [pc, #56]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007912:	f000 f821 	bl	8007958 <HAL_RCC_GetSysClockFreq>
 8007916:	4602      	mov	r2, r0
 8007918:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <HAL_RCC_ClockConfig+0x1c8>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	091b      	lsrs	r3, r3, #4
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	490a      	ldr	r1, [pc, #40]	; (800794c <HAL_RCC_ClockConfig+0x1cc>)
 8007924:	5ccb      	ldrb	r3, [r1, r3]
 8007926:	fa22 f303 	lsr.w	r3, r2, r3
 800792a:	4a09      	ldr	r2, [pc, #36]	; (8007950 <HAL_RCC_ClockConfig+0x1d0>)
 800792c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800792e:	4b09      	ldr	r3, [pc, #36]	; (8007954 <HAL_RCC_ClockConfig+0x1d4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fa fbbe 	bl	80020b4 <HAL_InitTick>

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40023c00 	.word	0x40023c00
 8007948:	40023800 	.word	0x40023800
 800794c:	0801b5f8 	.word	0x0801b5f8
 8007950:	20000000 	.word	0x20000000
 8007954:	20000004 	.word	0x20000004

08007958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800795c:	b094      	sub	sp, #80	; 0x50
 800795e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	647b      	str	r3, [r7, #68]	; 0x44
 8007964:	2300      	movs	r3, #0
 8007966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007968:	2300      	movs	r3, #0
 800796a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007970:	4b79      	ldr	r3, [pc, #484]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 030c 	and.w	r3, r3, #12
 8007978:	2b08      	cmp	r3, #8
 800797a:	d00d      	beq.n	8007998 <HAL_RCC_GetSysClockFreq+0x40>
 800797c:	2b08      	cmp	r3, #8
 800797e:	f200 80e1 	bhi.w	8007b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_RCC_GetSysClockFreq+0x34>
 8007986:	2b04      	cmp	r3, #4
 8007988:	d003      	beq.n	8007992 <HAL_RCC_GetSysClockFreq+0x3a>
 800798a:	e0db      	b.n	8007b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800798c:	4b73      	ldr	r3, [pc, #460]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x204>)
 800798e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007990:	e0db      	b.n	8007b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007992:	4b73      	ldr	r3, [pc, #460]	; (8007b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8007994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007996:	e0d8      	b.n	8007b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007998:	4b6f      	ldr	r3, [pc, #444]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x200>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079a2:	4b6d      	ldr	r3, [pc, #436]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d063      	beq.n	8007a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ae:	4b6a      	ldr	r3, [pc, #424]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	099b      	lsrs	r3, r3, #6
 80079b4:	2200      	movs	r2, #0
 80079b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c0:	633b      	str	r3, [r7, #48]	; 0x30
 80079c2:	2300      	movs	r3, #0
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
 80079c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80079ca:	4622      	mov	r2, r4
 80079cc:	462b      	mov	r3, r5
 80079ce:	f04f 0000 	mov.w	r0, #0
 80079d2:	f04f 0100 	mov.w	r1, #0
 80079d6:	0159      	lsls	r1, r3, #5
 80079d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079dc:	0150      	lsls	r0, r2, #5
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4621      	mov	r1, r4
 80079e4:	1a51      	subs	r1, r2, r1
 80079e6:	6139      	str	r1, [r7, #16]
 80079e8:	4629      	mov	r1, r5
 80079ea:	eb63 0301 	sbc.w	r3, r3, r1
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079fc:	4659      	mov	r1, fp
 80079fe:	018b      	lsls	r3, r1, #6
 8007a00:	4651      	mov	r1, sl
 8007a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a06:	4651      	mov	r1, sl
 8007a08:	018a      	lsls	r2, r1, #6
 8007a0a:	4651      	mov	r1, sl
 8007a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8007a10:	4659      	mov	r1, fp
 8007a12:	eb63 0901 	sbc.w	r9, r3, r1
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a2a:	4690      	mov	r8, r2
 8007a2c:	4699      	mov	r9, r3
 8007a2e:	4623      	mov	r3, r4
 8007a30:	eb18 0303 	adds.w	r3, r8, r3
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	462b      	mov	r3, r5
 8007a38:	eb49 0303 	adc.w	r3, r9, r3
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	024b      	lsls	r3, r1, #9
 8007a4e:	4621      	mov	r1, r4
 8007a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a54:	4621      	mov	r1, r4
 8007a56:	024a      	lsls	r2, r1, #9
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a5e:	2200      	movs	r2, #0
 8007a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a68:	f7f8 fc3a 	bl	80002e0 <__aeabi_uldivmod>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4613      	mov	r3, r2
 8007a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a74:	e058      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a76:	4b38      	ldr	r3, [pc, #224]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	099b      	lsrs	r3, r3, #6
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4618      	mov	r0, r3
 8007a80:	4611      	mov	r1, r2
 8007a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a86:	623b      	str	r3, [r7, #32]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a90:	4642      	mov	r2, r8
 8007a92:	464b      	mov	r3, r9
 8007a94:	f04f 0000 	mov.w	r0, #0
 8007a98:	f04f 0100 	mov.w	r1, #0
 8007a9c:	0159      	lsls	r1, r3, #5
 8007a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007aa2:	0150      	lsls	r0, r2, #5
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8007aae:	4649      	mov	r1, r9
 8007ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8007acc:	eb63 050b 	sbc.w	r5, r3, fp
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	00eb      	lsls	r3, r5, #3
 8007ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ade:	00e2      	lsls	r2, r4, #3
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	461d      	mov	r5, r3
 8007ae4:	4643      	mov	r3, r8
 8007ae6:	18e3      	adds	r3, r4, r3
 8007ae8:	603b      	str	r3, [r7, #0]
 8007aea:	464b      	mov	r3, r9
 8007aec:	eb45 0303 	adc.w	r3, r5, r3
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007afe:	4629      	mov	r1, r5
 8007b00:	028b      	lsls	r3, r1, #10
 8007b02:	4621      	mov	r1, r4
 8007b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b08:	4621      	mov	r1, r4
 8007b0a:	028a      	lsls	r2, r1, #10
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b12:	2200      	movs	r2, #0
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	61fa      	str	r2, [r7, #28]
 8007b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b1c:	f7f8 fbe0 	bl	80002e0 <__aeabi_uldivmod>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4613      	mov	r3, r2
 8007b26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	0c1b      	lsrs	r3, r3, #16
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	3301      	adds	r3, #1
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b42:	e002      	b.n	8007b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8007b46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3750      	adds	r7, #80	; 0x50
 8007b50:	46bd      	mov	sp, r7
 8007b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b56:	bf00      	nop
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	00f42400 	.word	0x00f42400
 8007b60:	007a1200 	.word	0x007a1200

08007b64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b68:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20000000 	.word	0x20000000

08007b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b80:	f7ff fff0 	bl	8007b64 <HAL_RCC_GetHCLKFreq>
 8007b84:	4602      	mov	r2, r0
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	0a9b      	lsrs	r3, r3, #10
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	4903      	ldr	r1, [pc, #12]	; (8007ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b92:	5ccb      	ldrb	r3, [r1, r3]
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	0801b608 	.word	0x0801b608

08007ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ba8:	f7ff ffdc 	bl	8007b64 <HAL_RCC_GetHCLKFreq>
 8007bac:	4602      	mov	r2, r0
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	0b5b      	lsrs	r3, r3, #13
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	4903      	ldr	r1, [pc, #12]	; (8007bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bba:	5ccb      	ldrb	r3, [r1, r3]
 8007bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	0801b608 	.word	0x0801b608

08007bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d012      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bf4:	4b69      	ldr	r3, [pc, #420]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	4a68      	ldr	r2, [pc, #416]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007bfe:	6093      	str	r3, [r2, #8]
 8007c00:	4b66      	ldr	r3, [pc, #408]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c08:	4964      	ldr	r1, [pc, #400]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c16:	2301      	movs	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d017      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c26:	4b5d      	ldr	r3, [pc, #372]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c34:	4959      	ldr	r1, [pc, #356]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c44:	d101      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c46:	2301      	movs	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007c52:	2301      	movs	r3, #1
 8007c54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d017      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c62:	4b4e      	ldr	r3, [pc, #312]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	494a      	ldr	r1, [pc, #296]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c80:	d101      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 808b 	beq.w	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cb0:	4b3a      	ldr	r3, [pc, #232]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	4a39      	ldr	r2, [pc, #228]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cba:	6413      	str	r3, [r2, #64]	; 0x40
 8007cbc:	4b37      	ldr	r3, [pc, #220]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cc8:	4b35      	ldr	r3, [pc, #212]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a34      	ldr	r2, [pc, #208]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cd4:	f7fa fa32 	bl	800213c <HAL_GetTick>
 8007cd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cdc:	f7fa fa2e 	bl	800213c <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b64      	cmp	r3, #100	; 0x64
 8007ce8:	d901      	bls.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e357      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cee:	4b2c      	ldr	r3, [pc, #176]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0f0      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cfa:	4b28      	ldr	r3, [pc, #160]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d035      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d02e      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d18:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d22:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d26:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d2e:	4b1b      	ldr	r3, [pc, #108]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	4a1a      	ldr	r2, [pc, #104]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d3a:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d40:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d114      	bne.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4c:	f7fa f9f6 	bl	800213c <HAL_GetTick>
 8007d50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d52:	e00a      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d54:	f7fa f9f2 	bl	800213c <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e319      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0ee      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d82:	d111      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	4901      	ldr	r1, [pc, #4]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]
 8007d9a:	e00b      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	40007000 	.word	0x40007000
 8007da4:	0ffffcff 	.word	0x0ffffcff
 8007da8:	4baa      	ldr	r3, [pc, #680]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4aa9      	ldr	r2, [pc, #676]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007db2:	6093      	str	r3, [r2, #8]
 8007db4:	4ba7      	ldr	r3, [pc, #668]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc0:	49a4      	ldr	r1, [pc, #656]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0310 	and.w	r3, r3, #16
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d010      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dd2:	4ba0      	ldr	r3, [pc, #640]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd8:	4a9e      	ldr	r2, [pc, #632]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007de2:	4b9c      	ldr	r3, [pc, #624]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	4999      	ldr	r1, [pc, #612]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e00:	4b94      	ldr	r3, [pc, #592]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e0e:	4991      	ldr	r1, [pc, #580]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e22:	4b8c      	ldr	r3, [pc, #560]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e30:	4988      	ldr	r1, [pc, #544]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e44:	4b83      	ldr	r3, [pc, #524]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e52:	4980      	ldr	r1, [pc, #512]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e66:	4b7b      	ldr	r3, [pc, #492]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e74:	4977      	ldr	r1, [pc, #476]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e88:	4b72      	ldr	r3, [pc, #456]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8e:	f023 0203 	bic.w	r2, r3, #3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	496f      	ldr	r1, [pc, #444]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007eaa:	4b6a      	ldr	r3, [pc, #424]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb0:	f023 020c 	bic.w	r2, r3, #12
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb8:	4966      	ldr	r1, [pc, #408]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ecc:	4b61      	ldr	r3, [pc, #388]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eda:	495e      	ldr	r1, [pc, #376]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007eee:	4b59      	ldr	r3, [pc, #356]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efc:	4955      	ldr	r1, [pc, #340]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f10:	4b50      	ldr	r3, [pc, #320]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	494d      	ldr	r1, [pc, #308]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f32:	4b48      	ldr	r3, [pc, #288]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f40:	4944      	ldr	r1, [pc, #272]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f54:	4b3f      	ldr	r3, [pc, #252]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f62:	493c      	ldr	r1, [pc, #240]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007f76:	4b37      	ldr	r3, [pc, #220]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f84:	4933      	ldr	r1, [pc, #204]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f98:	4b2e      	ldr	r3, [pc, #184]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa6:	492b      	ldr	r1, [pc, #172]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d011      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007fba:	4b26      	ldr	r3, [pc, #152]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fc8:	4922      	ldr	r1, [pc, #136]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd8:	d101      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007fea:	2301      	movs	r3, #1
 8007fec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ffa:	4b16      	ldr	r3, [pc, #88]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008000:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008008:	4912      	ldr	r1, [pc, #72]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800800a:	4313      	orrs	r3, r2
 800800c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800801c:	4b0d      	ldr	r3, [pc, #52]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800801e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008022:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800802c:	4909      	ldr	r1, [pc, #36]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800802e:	4313      	orrs	r3, r2
 8008030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d006      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80d9 	beq.w	80081fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a01      	ldr	r2, [pc, #4]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008052:	e001      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008054:	40023800 	.word	0x40023800
 8008058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800805a:	f7fa f86f 	bl	800213c <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008060:	e008      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008062:	f7fa f86b 	bl	800213c <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b64      	cmp	r3, #100	; 0x64
 800806e:	d901      	bls.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e194      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008074:	4b6c      	ldr	r3, [pc, #432]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f0      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d021      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008090:	2b00      	cmp	r3, #0
 8008092:	d11d      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008094:	4b64      	ldr	r3, [pc, #400]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080a2:	4b61      	ldr	r3, [pc, #388]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080a8:	0e1b      	lsrs	r3, r3, #24
 80080aa:	f003 030f 	and.w	r3, r3, #15
 80080ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	019a      	lsls	r2, r3, #6
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	431a      	orrs	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	061b      	lsls	r3, r3, #24
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	071b      	lsls	r3, r3, #28
 80080c8:	4957      	ldr	r1, [pc, #348]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e4:	d00a      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d02e      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080fa:	d129      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080fc:	4b4a      	ldr	r3, [pc, #296]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800810a:	4b47      	ldr	r3, [pc, #284]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800810c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008110:	0f1b      	lsrs	r3, r3, #28
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	019a      	lsls	r2, r3, #6
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	061b      	lsls	r3, r3, #24
 800812a:	431a      	orrs	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	071b      	lsls	r3, r3, #28
 8008130:	493d      	ldr	r1, [pc, #244]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008138:	4b3b      	ldr	r3, [pc, #236]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800813a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800813e:	f023 021f 	bic.w	r2, r3, #31
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	3b01      	subs	r3, #1
 8008148:	4937      	ldr	r1, [pc, #220]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01d      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800815e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008162:	0e1b      	lsrs	r3, r3, #24
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800816a:	4b2f      	ldr	r3, [pc, #188]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800816c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008170:	0f1b      	lsrs	r3, r3, #28
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	019a      	lsls	r2, r3, #6
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	431a      	orrs	r2, r3
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	061b      	lsls	r3, r3, #24
 800818a:	431a      	orrs	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	071b      	lsls	r3, r3, #28
 8008190:	4925      	ldr	r1, [pc, #148]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d011      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	019a      	lsls	r2, r3, #6
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	041b      	lsls	r3, r3, #16
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	071b      	lsls	r3, r3, #28
 80081c0:	4919      	ldr	r1, [pc, #100]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081c8:	4b17      	ldr	r3, [pc, #92]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a16      	ldr	r2, [pc, #88]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081d4:	f7f9 ffb2 	bl	800213c <HAL_GetTick>
 80081d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081da:	e008      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081dc:	f7f9 ffae 	bl	800213c <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b64      	cmp	r3, #100	; 0x64
 80081e8:	d901      	bls.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e0d7      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	f040 80cd 	bne.w	800839c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008202:	4b09      	ldr	r3, [pc, #36]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a08      	ldr	r2, [pc, #32]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800820c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800820e:	f7f9 ff95 	bl	800213c <HAL_GetTick>
 8008212:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008214:	e00a      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008216:	f7f9 ff91 	bl	800213c <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b64      	cmp	r3, #100	; 0x64
 8008222:	d903      	bls.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e0ba      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008228:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800822c:	4b5e      	ldr	r3, [pc, #376]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008238:	d0ed      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008256:	2b00      	cmp	r3, #0
 8008258:	d02e      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d12a      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008262:	4b51      	ldr	r3, [pc, #324]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008268:	0c1b      	lsrs	r3, r3, #16
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008270:	4b4d      	ldr	r3, [pc, #308]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008276:	0f1b      	lsrs	r3, r3, #28
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	019a      	lsls	r2, r3, #6
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	431a      	orrs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	061b      	lsls	r3, r3, #24
 8008290:	431a      	orrs	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	071b      	lsls	r3, r3, #28
 8008296:	4944      	ldr	r1, [pc, #272]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008298:	4313      	orrs	r3, r2
 800829a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800829e:	4b42      	ldr	r3, [pc, #264]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	3b01      	subs	r3, #1
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	493d      	ldr	r1, [pc, #244]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d022      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082cc:	d11d      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082ce:	4b36      	ldr	r3, [pc, #216]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d4:	0e1b      	lsrs	r3, r3, #24
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082dc:	4b32      	ldr	r3, [pc, #200]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e2:	0f1b      	lsrs	r3, r3, #28
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	019a      	lsls	r2, r3, #6
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	041b      	lsls	r3, r3, #16
 80082f6:	431a      	orrs	r2, r3
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	061b      	lsls	r3, r3, #24
 80082fc:	431a      	orrs	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	071b      	lsls	r3, r3, #28
 8008302:	4929      	ldr	r1, [pc, #164]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008304:	4313      	orrs	r3, r2
 8008306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0308 	and.w	r3, r3, #8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d028      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831c:	0e1b      	lsrs	r3, r3, #24
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008324:	4b20      	ldr	r3, [pc, #128]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832a:	0c1b      	lsrs	r3, r3, #16
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	019a      	lsls	r2, r3, #6
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	041b      	lsls	r3, r3, #16
 800833c:	431a      	orrs	r2, r3
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	071b      	lsls	r3, r3, #28
 800834a:	4917      	ldr	r1, [pc, #92]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800834c:	4313      	orrs	r3, r2
 800834e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	4911      	ldr	r1, [pc, #68]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a0e      	ldr	r2, [pc, #56]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800836e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008374:	f7f9 fee2 	bl	800213c <HAL_GetTick>
 8008378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800837a:	e008      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800837c:	f7f9 fede 	bl	800213c <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b64      	cmp	r3, #100	; 0x64
 8008388:	d901      	bls.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e007      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800838e:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800839a:	d1ef      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	40023800 	.word	0x40023800

080083ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e071      	b.n	80084a6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	7f5b      	ldrb	r3, [r3, #29]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d105      	bne.n	80083d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7f8 ff9c 	bl	8001310 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b10      	cmp	r3, #16
 80083ea:	d053      	beq.n	8008494 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	22ca      	movs	r2, #202	; 0xca
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2253      	movs	r2, #83	; 0x53
 80083fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f9fd 	bl	80087fc <RTC_EnterInitMode>
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d12a      	bne.n	8008462 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <HAL_RTC_Init+0x104>)
 8008418:	400b      	ands	r3, r1
 800841a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6899      	ldr	r1, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	68d2      	ldr	r2, [r2, #12]
 8008442:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6919      	ldr	r1, [r3, #16]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	041a      	lsls	r2, r3, #16
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa06 	bl	800886a <RTC_ExitInitMode>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d110      	bne.n	800848a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0208 	bic.w	r2, r2, #8
 8008476:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	22ff      	movs	r2, #255	; 0xff
 8008490:	625a      	str	r2, [r3, #36]	; 0x24
 8008492:	e001      	b.n	8008498 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d102      	bne.n	80084a4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	ff8fffbf 	.word	0xff8fffbf

080084b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	7f1b      	ldrb	r3, [r3, #28]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_RTC_SetTime+0x1c>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e085      	b.n	80085dc <HAL_RTC_SetTime+0x128>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2202      	movs	r2, #2
 80084da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d126      	bne.n	8008530 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2200      	movs	r2, #0
 80084f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f9da 	bl	80088b4 <RTC_ByteToBcd2>
 8008500:	4603      	mov	r3, r0
 8008502:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 f9d3 	bl	80088b4 <RTC_ByteToBcd2>
 800850e:	4603      	mov	r3, r0
 8008510:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008512:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	789b      	ldrb	r3, [r3, #2]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f9cb 	bl	80088b4 <RTC_ByteToBcd2>
 800851e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008520:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	e018      	b.n	8008562 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d102      	bne.n	8008544 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008550:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008556:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	78db      	ldrb	r3, [r3, #3]
 800855c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	22ca      	movs	r2, #202	; 0xca
 8008568:	625a      	str	r2, [r3, #36]	; 0x24
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2253      	movs	r2, #83	; 0x53
 8008570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f942 	bl	80087fc <RTC_EnterInitMode>
 8008578:	4603      	mov	r3, r0
 800857a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800857c:	7cfb      	ldrb	r3, [r7, #19]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d11e      	bne.n	80085c0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	6979      	ldr	r1, [r7, #20]
 8008588:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <HAL_RTC_SetTime+0x130>)
 800858a:	400b      	ands	r3, r1
 800858c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800859c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6899      	ldr	r1, [r3, #8]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	431a      	orrs	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 f957 	bl	800886a <RTC_ExitInitMode>
 80085bc:	4603      	mov	r3, r0
 80085be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80085c0:	7cfb      	ldrb	r3, [r7, #19]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	22ff      	movs	r2, #255	; 0xff
 80085d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	771a      	strb	r2, [r3, #28]

  return status;
 80085da:	7cfb      	ldrb	r3, [r7, #19]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd90      	pop	{r4, r7, pc}
 80085e4:	007f7f7f 	.word	0x007f7f7f

080085e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b22      	ldr	r3, [pc, #136]	; (80086a0 <HAL_RTC_GetTime+0xb8>)
 8008618:	4013      	ands	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008636:	b2da      	uxtb	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	0d9b      	lsrs	r3, r3, #22
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11a      	bne.n	8008696 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f943 	bl	80088f0 <RTC_Bcd2ToByte>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f93a 	bl	80088f0 <RTC_Bcd2ToByte>
 800867c:	4603      	mov	r3, r0
 800867e:	461a      	mov	r2, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	789b      	ldrb	r3, [r3, #2]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 f931 	bl	80088f0 <RTC_Bcd2ToByte>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	007f7f7f 	.word	0x007f7f7f

080086a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80086a4:	b590      	push	{r4, r7, lr}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	7f1b      	ldrb	r3, [r3, #28]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_RTC_SetDate+0x1c>
 80086bc:	2302      	movs	r3, #2
 80086be:	e06f      	b.n	80087a0 <HAL_RTC_SetDate+0xfc>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2202      	movs	r2, #2
 80086ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10e      	bne.n	80086f0 <HAL_RTC_SetDate+0x4c>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d008      	beq.n	80086f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	f023 0310 	bic.w	r3, r3, #16
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	330a      	adds	r3, #10
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d11c      	bne.n	8008730 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	78db      	ldrb	r3, [r3, #3]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f8da 	bl	80088b4 <RTC_ByteToBcd2>
 8008700:	4603      	mov	r3, r0
 8008702:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 f8d3 	bl	80088b4 <RTC_ByteToBcd2>
 800870e:	4603      	mov	r3, r0
 8008710:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008712:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	789b      	ldrb	r3, [r3, #2]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 f8cb 	bl	80088b4 <RTC_ByteToBcd2>
 800871e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008720:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	e00e      	b.n	800874e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	78db      	ldrb	r3, [r3, #3]
 8008734:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800873c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008742:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	22ca      	movs	r2, #202	; 0xca
 8008754:	625a      	str	r2, [r3, #36]	; 0x24
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2253      	movs	r2, #83	; 0x53
 800875c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f84c 	bl	80087fc <RTC_EnterInitMode>
 8008764:	4603      	mov	r3, r0
 8008766:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008768:	7cfb      	ldrb	r3, [r7, #19]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10a      	bne.n	8008784 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	6979      	ldr	r1, [r7, #20]
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <HAL_RTC_SetDate+0x104>)
 8008776:	400b      	ands	r3, r1
 8008778:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 f875 	bl	800886a <RTC_ExitInitMode>
 8008780:	4603      	mov	r3, r0
 8008782:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008784:	7cfb      	ldrb	r3, [r7, #19]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	22ff      	movs	r2, #255	; 0xff
 8008796:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	771a      	strb	r2, [r3, #28]

  return status;
 800879e:	7cfb      	ldrb	r3, [r7, #19]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	371c      	adds	r7, #28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd90      	pop	{r4, r7, pc}
 80087a8:	00ffff3f 	.word	0x00ffff3f

080087ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80087c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087c8:	f7f9 fcb8 	bl	800213c <HAL_GetTick>
 80087cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80087ce:	e009      	b.n	80087e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80087d0:	f7f9 fcb4 	bl	800213c <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087de:	d901      	bls.n	80087e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e007      	b.n	80087f4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0ee      	beq.n	80087d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d122      	bne.n	8008860 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008828:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800882a:	f7f9 fc87 	bl	800213c <HAL_GetTick>
 800882e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008830:	e00c      	b.n	800884c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008832:	f7f9 fc83 	bl	800213c <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008840:	d904      	bls.n	800884c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2204      	movs	r2, #4
 8008846:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d102      	bne.n	8008860 <RTC_EnterInitMode+0x64>
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d1e8      	bne.n	8008832 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68da      	ldr	r2, [r3, #12]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008884:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff ff89 	bl	80087ac <HAL_RTC_WaitForSynchro>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2204      	movs	r2, #4
 80088a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80088c2:	e005      	b.n	80088d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	3b0a      	subs	r3, #10
 80088ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b09      	cmp	r3, #9
 80088d4:	d8f6      	bhi.n	80088c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	b2db      	uxtb	r3, r3
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	091b      	lsrs	r3, r3, #4
 8008902:	b2db      	uxtb	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	b2da      	uxtb	r2, r3
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	b2db      	uxtb	r3, r3
 800891c:	4413      	add	r3, r2
 800891e:	b2db      	uxtb	r3, r3
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	7f1b      	ldrb	r3, [r3, #28]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8008944:	2302      	movs	r3, #2
 8008946:	e08a      	b.n	8008a5e <HAL_RTCEx_SetWakeUpTimer+0x132>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2202      	movs	r2, #2
 8008952:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	22ca      	movs	r2, #202	; 0xca
 800895a:	625a      	str	r2, [r3, #36]	; 0x24
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2253      	movs	r2, #83	; 0x53
 8008962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01e      	beq.n	80089b0 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8008972:	f7f9 fbe3 	bl	800213c <HAL_GetTick>
 8008976:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8008978:	e013      	b.n	80089a2 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800897a:	f7f9 fbdf 	bl	800213c <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008988:	d90b      	bls.n	80089a2 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	22ff      	movs	r2, #255	; 0xff
 8008990:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2203      	movs	r2, #3
 8008996:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e05d      	b.n	8008a5e <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e4      	bne.n	800897a <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089be:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80089d0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089d2:	f7f9 fbb3 	bl	800213c <HAL_GetTick>
 80089d6:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80089d8:	e013      	b.n	8008a02 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089da:	f7f9 fbaf 	bl	800213c <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089e8:	d90b      	bls.n	8008a02 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	22ff      	movs	r2, #255	; 0xff
 80089f0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2203      	movs	r2, #3
 80089f6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e02d      	b.n	8008a5e <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0e4      	beq.n	80089da <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0207 	bic.w	r2, r2, #7
 8008a1e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6899      	ldr	r1, [r3, #8]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a46:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	22ff      	movs	r2, #255	; 0xff
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e09d      	b.n	8008bb4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d108      	bne.n	8008a92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a88:	d009      	beq.n	8008a9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	61da      	str	r2, [r3, #28]
 8008a90:	e005      	b.n	8008a9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d106      	bne.n	8008abe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7f8 fc57 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ad4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ade:	d902      	bls.n	8008ae6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e002      	b.n	8008aec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008af4:	d007      	beq.n	8008b06 <HAL_SPI_Init+0xa0>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008afe:	d002      	beq.n	8008b06 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b48:	ea42 0103 	orr.w	r1, r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	f003 0204 	and.w	r2, r3, #4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	f003 0310 	and.w	r3, r3, #16
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b82:	ea42 0103 	orr.w	r1, r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69da      	ldr	r2, [r3, #28]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <HAL_SPI_Transmit_IT+0x20>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e072      	b.n	8008cc2 <HAL_SPI_Transmit_IT+0x106>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <HAL_SPI_Transmit_IT+0x34>
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bf4:	e060      	b.n	8008cb8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d002      	beq.n	8008c08 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8008c02:	2302      	movs	r3, #2
 8008c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c06:	e057      	b.n	8008cb8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	88fa      	ldrh	r2, [r7, #6]
 8008c20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	88fa      	ldrh	r2, [r7, #6]
 8008c26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c4c:	d903      	bls.n	8008c56 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4a1f      	ldr	r2, [pc, #124]	; (8008cd0 <HAL_SPI_Transmit_IT+0x114>)
 8008c52:	651a      	str	r2, [r3, #80]	; 0x50
 8008c54:	e002      	b.n	8008c5c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a1e      	ldr	r2, [pc, #120]	; (8008cd4 <HAL_SPI_Transmit_IT+0x118>)
 8008c5a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c64:	d10f      	bne.n	8008c86 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8008c94:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca0:	2b40      	cmp	r3, #64	; 0x40
 8008ca2:	d008      	beq.n	8008cb6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	e000      	b.n	8008cb8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8008cb6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	08009941 	.word	0x08009941
 8008cd4:	080098fb 	.word	0x080098fb

08008cd8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_SPI_Transmit_DMA+0x20>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e0d8      	b.n	8008eaa <HAL_SPI_Transmit_DMA+0x1d2>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d002      	beq.n	8008d12 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d10:	e0c6      	b.n	8008ea0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <HAL_SPI_Transmit_DMA+0x46>
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d102      	bne.n	8008d24 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d22:	e0bd      	b.n	8008ea0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2203      	movs	r2, #3
 8008d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	88fa      	ldrh	r2, [r7, #6]
 8008d3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	88fa      	ldrh	r2, [r7, #6]
 8008d42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6e:	d10f      	bne.n	8008d90 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d94:	4a47      	ldr	r2, [pc, #284]	; (8008eb4 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9c:	4a46      	ldr	r2, [pc, #280]	; (8008eb8 <HAL_SPI_Transmit_DMA+0x1e0>)
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da4:	4a45      	ldr	r2, [pc, #276]	; (8008ebc <HAL_SPI_Transmit_DMA+0x1e4>)
 8008da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dac:	2200      	movs	r2, #0
 8008dae:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008dbe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008dc8:	d82d      	bhi.n	8008e26 <HAL_SPI_Transmit_DMA+0x14e>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd4:	d127      	bne.n	8008e26 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10f      	bne.n	8008e04 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008df2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e02:	e010      	b.n	8008e26 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e12:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	3301      	adds	r3, #1
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2e:	4619      	mov	r1, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	330c      	adds	r3, #12
 8008e36:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e3e:	f7fa fc17 	bl	8003670 <HAL_DMA_Start_IT>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00c      	beq.n	8008e62 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e4c:	f043 0210 	orr.w	r2, r3, #16
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008e60:	e01e      	b.n	8008ea0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6c:	2b40      	cmp	r3, #64	; 0x40
 8008e6e:	d007      	beq.n	8008e80 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e7e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0220 	orr.w	r2, r2, #32
 8008e8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0202 	orr.w	r2, r2, #2
 8008e9e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0800983d 	.word	0x0800983d
 8008eb8:	08009659 	.word	0x08009659
 8008ebc:	08009891 	.word	0x08009891

08008ec0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d110      	bne.n	8008efc <HAL_SPI_Receive_DMA+0x3c>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ee2:	d10b      	bne.n	8008efc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008eec:	88fb      	ldrh	r3, [r7, #6]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	68b9      	ldr	r1, [r7, #8]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 f908 	bl	8009108 <HAL_SPI_TransmitReceive_DMA>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e0fb      	b.n	80090f4 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_SPI_Receive_DMA+0x4a>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e0f4      	b.n	80090f4 <HAL_SPI_Receive_DMA+0x234>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d002      	beq.n	8008f24 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f22:	e0e2      	b.n	80090ea <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <HAL_SPI_Receive_DMA+0x70>
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f34:	e0d9      	b.n	80090ea <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2204      	movs	r2, #4
 8008f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	88fa      	ldrh	r2, [r7, #6]
 8008f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	88fa      	ldrh	r2, [r7, #6]
 8008f56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f7a:	d10f      	bne.n	8008f9c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008faa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fb4:	d908      	bls.n	8008fc8 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fc4:	605a      	str	r2, [r3, #4]
 8008fc6:	e042      	b.n	800904e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fd6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe2:	d134      	bne.n	800904e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ff2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d111      	bne.n	8009028 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009012:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800901a:	b29b      	uxth	r3, r3
 800901c:	085b      	lsrs	r3, r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009026:	e012      	b.n	800904e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009036:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800903e:	b29b      	uxth	r3, r3
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	b29b      	uxth	r3, r3
 8009044:	3301      	adds	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009052:	4a2a      	ldr	r2, [pc, #168]	; (80090fc <HAL_SPI_Receive_DMA+0x23c>)
 8009054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905a:	4a29      	ldr	r2, [pc, #164]	; (8009100 <HAL_SPI_Receive_DMA+0x240>)
 800905c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	4a28      	ldr	r2, [pc, #160]	; (8009104 <HAL_SPI_Receive_DMA+0x244>)
 8009064:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906a:	2200      	movs	r2, #0
 800906c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	4619      	mov	r1, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009086:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009088:	f7fa faf2 	bl	8003670 <HAL_DMA_Start_IT>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00c      	beq.n	80090ac <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009096:	f043 0210 	orr.w	r2, r3, #16
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80090aa:	e01e      	b.n	80090ea <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d007      	beq.n	80090ca <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f042 0220 	orr.w	r2, r2, #32
 80090d8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0201 	orr.w	r2, r2, #1
 80090e8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	08009859 	.word	0x08009859
 8009100:	08009701 	.word	0x08009701
 8009104:	08009891 	.word	0x08009891

08009108 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009124:	2302      	movs	r3, #2
 8009126:	e16c      	b.n	8009402 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009136:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800913e:	7dbb      	ldrb	r3, [r7, #22]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d00d      	beq.n	8009160 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800914a:	d106      	bne.n	800915a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <HAL_SPI_TransmitReceive_DMA+0x52>
 8009154:	7dbb      	ldrb	r3, [r7, #22]
 8009156:	2b04      	cmp	r3, #4
 8009158:	d002      	beq.n	8009160 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800915a:	2302      	movs	r3, #2
 800915c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800915e:	e14b      	b.n	80093f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800916c:	887b      	ldrh	r3, [r7, #2]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d102      	bne.n	8009178 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009176:	e13f      	b.n	80093f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b04      	cmp	r3, #4
 8009182:	d003      	beq.n	800918c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2205      	movs	r2, #5
 8009188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	887a      	ldrh	r2, [r7, #2]
 800919c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	887a      	ldrh	r2, [r7, #2]
 80091a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	887a      	ldrh	r2, [r7, #2]
 80091ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	887a      	ldrh	r2, [r7, #2]
 80091b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80091d4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091de:	d908      	bls.n	80091f2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091ee:	605a      	str	r2, [r3, #4]
 80091f0:	e06f      	b.n	80092d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009200:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800920c:	d126      	bne.n	800925c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10f      	bne.n	800923a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009228:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800922e:	b29b      	uxth	r3, r3
 8009230:	085b      	lsrs	r3, r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009238:	e010      	b.n	800925c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009248:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800924e:	b29b      	uxth	r3, r3
 8009250:	085b      	lsrs	r3, r3, #1
 8009252:	b29b      	uxth	r3, r3
 8009254:	3301      	adds	r3, #1
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009266:	d134      	bne.n	80092d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009276:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800927e:	b29b      	uxth	r3, r3
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d111      	bne.n	80092ac <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009296:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800929e:	b29b      	uxth	r3, r3
 80092a0:	085b      	lsrs	r3, r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80092aa:	e012      	b.n	80092d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3301      	adds	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d108      	bne.n	80092f0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e2:	4a4a      	ldr	r2, [pc, #296]	; (800940c <HAL_SPI_TransmitReceive_DMA+0x304>)
 80092e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ea:	4a49      	ldr	r2, [pc, #292]	; (8009410 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80092ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80092ee:	e007      	b.n	8009300 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	4a47      	ldr	r2, [pc, #284]	; (8009414 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80092f6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092fc:	4a46      	ldr	r2, [pc, #280]	; (8009418 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80092fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009304:	4a45      	ldr	r2, [pc, #276]	; (800941c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8009306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800930c:	2200      	movs	r2, #0
 800930e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	330c      	adds	r3, #12
 800931a:	4619      	mov	r1, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009320:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009328:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800932a:	f7fa f9a1 	bl	8003670 <HAL_DMA_Start_IT>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009338:	f043 0210 	orr.w	r2, r3, #16
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800934c:	e054      	b.n	80093f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f042 0201 	orr.w	r2, r2, #1
 800935c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009362:	2200      	movs	r2, #0
 8009364:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800936a:	2200      	movs	r2, #0
 800936c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009372:	2200      	movs	r2, #0
 8009374:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937a:	2200      	movs	r2, #0
 800937c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	4619      	mov	r1, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	330c      	adds	r3, #12
 800938e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009394:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009396:	f7fa f96b 	bl	8003670 <HAL_DMA_Start_IT>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00c      	beq.n	80093ba <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a4:	f043 0210 	orr.w	r2, r3, #16
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80093b8:	e01e      	b.n	80093f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c4:	2b40      	cmp	r3, #64	; 0x40
 80093c6:	d007      	beq.n	80093d8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093d6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0220 	orr.w	r2, r2, #32
 80093e6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0202 	orr.w	r2, r2, #2
 80093f6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	08009859 	.word	0x08009859
 8009410:	08009701 	.word	0x08009701
 8009414:	08009875 	.word	0x08009875
 8009418:	080097ab 	.word	0x080097ab
 800941c:	08009891 	.word	0x08009891

08009420 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10e      	bne.n	8009460 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
    return;
 800945e:	e0ce      	b.n	80095fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <HAL_SPI_IRQHandler+0x5e>
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
    return;
 800947c:	e0bf      	b.n	80095fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <HAL_SPI_IRQHandler+0x7e>
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 80b0 	beq.w	80095fe <HAL_SPI_IRQHandler+0x1de>
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80aa 	beq.w	80095fe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d023      	beq.n	80094fc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d011      	beq.n	80094e4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094c4:	f043 0204 	orr.w	r2, r3, #4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	e00b      	b.n	80094fc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094e4:	2300      	movs	r3, #0
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	613b      	str	r3, [r7, #16]
 80094f8:	693b      	ldr	r3, [r7, #16]
        return;
 80094fa:	e080      	b.n	80095fe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d014      	beq.n	8009530 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800950a:	f043 0201 	orr.w	r2, r3, #1
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00c      	beq.n	8009554 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800953e:	f043 0208 	orr.w	r2, r3, #8
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009546:	2300      	movs	r3, #0
 8009548:	60bb      	str	r3, [r7, #8]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	60bb      	str	r3, [r7, #8]
 8009552:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009558:	2b00      	cmp	r3, #0
 800955a:	d04f      	beq.n	80095fc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800956a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <HAL_SPI_IRQHandler+0x168>
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	d034      	beq.n	80095f2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0203 	bic.w	r2, r2, #3
 8009596:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959c:	2b00      	cmp	r3, #0
 800959e:	d011      	beq.n	80095c4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a4:	4a17      	ldr	r2, [pc, #92]	; (8009604 <HAL_SPI_IRQHandler+0x1e4>)
 80095a6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fa f92f 	bl	8003810 <HAL_DMA_Abort_IT>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d005      	beq.n	80095c4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d016      	beq.n	80095fa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	4a0c      	ldr	r2, [pc, #48]	; (8009604 <HAL_SPI_IRQHandler+0x1e4>)
 80095d2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fa f919 	bl	8003810 <HAL_DMA_Abort_IT>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80095f0:	e003      	b.n	80095fa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f00d fd1a 	bl	801702c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80095f8:	e000      	b.n	80095fc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80095fa:	bf00      	nop
    return;
 80095fc:	bf00      	nop
  }
}
 80095fe:	3720      	adds	r7, #32
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	080098d1 	.word	0x080098d1

08009608 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009666:	f7f8 fd69 	bl	800213c <HAL_GetTick>
 800966a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800967a:	d03b      	beq.n	80096f4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0220 	bic.w	r2, r2, #32
 800968a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0202 	bic.w	r2, r2, #2
 800969a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	2164      	movs	r1, #100	; 0x64
 80096a0:	6978      	ldr	r0, [r7, #20]
 80096a2:	f000 fb09 	bl	8009cb8 <SPI_EndRxTxTransaction>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b0:	f043 0220 	orr.w	r2, r3, #32
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2200      	movs	r2, #0
 80096da:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096ec:	6978      	ldr	r0, [r7, #20]
 80096ee:	f00d fc9d 	bl	801702c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096f2:	e002      	b.n	80096fa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80096f4:	6978      	ldr	r0, [r7, #20]
 80096f6:	f00d fc5b 	bl	8016fb0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800970e:	f7f8 fd15 	bl	800213c <HAL_GetTick>
 8009712:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009722:	d03c      	beq.n	800979e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0220 	bic.w	r2, r2, #32
 8009732:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10d      	bne.n	8009758 <SPI_DMAReceiveCplt+0x58>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009744:	d108      	bne.n	8009758 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0203 	bic.w	r2, r2, #3
 8009754:	605a      	str	r2, [r3, #4]
 8009756:	e007      	b.n	8009768 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0201 	bic.w	r2, r2, #1
 8009766:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	2164      	movs	r1, #100	; 0x64
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 fa27 	bl	8009bc0 <SPI_EndRxTransaction>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f00d fc48 	bl	801702c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800979c:	e002      	b.n	80097a4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f00d fc24 	bl	8016fec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b084      	sub	sp, #16
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097b8:	f7f8 fcc0 	bl	800213c <HAL_GetTick>
 80097bc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097cc:	d030      	beq.n	8009830 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0220 	bic.w	r2, r2, #32
 80097dc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	2164      	movs	r1, #100	; 0x64
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 fa68 	bl	8009cb8 <SPI_EndRxTxTransaction>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f2:	f043 0220 	orr.w	r2, r3, #32
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0203 	bic.w	r2, r2, #3
 8009808:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f00d fbff 	bl	801702c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800982e:	e002      	b.n	8009836 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff fee9 	bl	8009608 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff fee6 	bl	800961c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009850:	bf00      	nop
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff fee2 	bl	8009630 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800986c:	bf00      	nop
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f7ff fede 	bl	8009644 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0203 	bic.w	r2, r2, #3
 80098ac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b2:	f043 0210 	orr.w	r2, r3, #16
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f00d fbb2 	bl	801702c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098c8:	bf00      	nop
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f00d fb9d 	bl	801702c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	330c      	adds	r3, #12
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fa2a 	bl	8009d8c <SPI_CloseTx_ISR>
  }
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994c:	881a      	ldrh	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009958:	1c9a      	adds	r2, r3, #2
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009962:	b29b      	uxth	r3, r3
 8009964:	3b01      	subs	r3, #1
 8009966:	b29a      	uxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009970:	b29b      	uxth	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d102      	bne.n	800997c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa08 	bl	8009d8c <SPI_CloseTx_ISR>
  }
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009994:	f7f8 fbd2 	bl	800213c <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099a4:	f7f8 fbca 	bl	800213c <HAL_GetTick>
 80099a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099aa:	4b39      	ldr	r3, [pc, #228]	; (8009a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	015b      	lsls	r3, r3, #5
 80099b0:	0d1b      	lsrs	r3, r3, #20
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	fb02 f303 	mul.w	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099ba:	e054      	b.n	8009a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d050      	beq.n	8009a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099c4:	f7f8 fbba 	bl	800213c <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d902      	bls.n	80099da <SPI_WaitFlagStateUntilTimeout+0x56>
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d13d      	bne.n	8009a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f2:	d111      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099fc:	d004      	beq.n	8009a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a06:	d107      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a20:	d10f      	bne.n	8009a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e017      	b.n	8009a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	bf0c      	ite	eq
 8009a76:	2301      	moveq	r3, #1
 8009a78:	2300      	movne	r3, #0
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d19b      	bne.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3720      	adds	r7, #32
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000000 	.word	0x20000000

08009a94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	; 0x28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009aa6:	f7f8 fb49 	bl	800213c <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009ab6:	f7f8 fb41 	bl	800213c <HAL_GetTick>
 8009aba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009ac4:	4b3d      	ldr	r3, [pc, #244]	; (8009bbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	00da      	lsls	r2, r3, #3
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	0d1b      	lsrs	r3, r3, #20
 8009ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad6:	fb02 f303 	mul.w	r3, r2, r3
 8009ada:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009adc:	e060      	b.n	8009ba0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ae4:	d107      	bne.n	8009af6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d104      	bne.n	8009af6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afc:	d050      	beq.n	8009ba0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009afe:	f7f8 fb1d 	bl	800213c <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d902      	bls.n	8009b14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d13d      	bne.n	8009b90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b2c:	d111      	bne.n	8009b52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b36:	d004      	beq.n	8009b42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b40:	d107      	bne.n	8009b52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5a:	d10f      	bne.n	8009b7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e010      	b.n	8009bb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d196      	bne.n	8009ade <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3728      	adds	r7, #40	; 0x28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000000 	.word	0x20000000

08009bc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bd4:	d111      	bne.n	8009bfa <SPI_EndRxTransaction+0x3a>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bde:	d004      	beq.n	8009bea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be8:	d107      	bne.n	8009bfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c02:	d112      	bne.n	8009c2a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2180      	movs	r1, #128	; 0x80
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff feb8 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d021      	beq.n	8009c5e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c1e:	f043 0220 	orr.w	r2, r3, #32
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e03d      	b.n	8009ca6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c2a:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <SPI_EndRxTransaction+0xf0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a21      	ldr	r2, [pc, #132]	; (8009cb4 <SPI_EndRxTransaction+0xf4>)
 8009c30:	fba2 2303 	umull	r2, r3, r2, r3
 8009c34:	0d5b      	lsrs	r3, r3, #21
 8009c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c3a:	fb02 f303 	mul.w	r3, r2, r3
 8009c3e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c56:	2b80      	cmp	r3, #128	; 0x80
 8009c58:	d0f2      	beq.n	8009c40 <SPI_EndRxTransaction+0x80>
 8009c5a:	e000      	b.n	8009c5e <SPI_EndRxTransaction+0x9e>
        break;
 8009c5c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c66:	d11d      	bne.n	8009ca4 <SPI_EndRxTransaction+0xe4>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c70:	d004      	beq.n	8009c7c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c7a:	d113      	bne.n	8009ca4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f7ff ff03 	bl	8009a94 <SPI_WaitFifoStateUntilTimeout>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c98:	f043 0220 	orr.w	r2, r3, #32
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e000      	b.n	8009ca6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000000 	.word	0x20000000
 8009cb4:	165e9f81 	.word	0x165e9f81

08009cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff fedf 	bl	8009a94 <SPI_WaitFifoStateUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d007      	beq.n	8009cec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce0:	f043 0220 	orr.w	r2, r3, #32
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e046      	b.n	8009d7a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009cec:	4b25      	ldr	r3, [pc, #148]	; (8009d84 <SPI_EndRxTxTransaction+0xcc>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a25      	ldr	r2, [pc, #148]	; (8009d88 <SPI_EndRxTxTransaction+0xd0>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	0d5b      	lsrs	r3, r3, #21
 8009cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cfc:	fb02 f303 	mul.w	r3, r2, r3
 8009d00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d0a:	d112      	bne.n	8009d32 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2200      	movs	r2, #0
 8009d14:	2180      	movs	r1, #128	; 0x80
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff fe34 	bl	8009984 <SPI_WaitFlagStateUntilTimeout>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d016      	beq.n	8009d50 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d26:	f043 0220 	orr.w	r2, r3, #32
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e023      	b.n	8009d7a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d48:	2b80      	cmp	r3, #128	; 0x80
 8009d4a:	d0f2      	beq.n	8009d32 <SPI_EndRxTxTransaction+0x7a>
 8009d4c:	e000      	b.n	8009d50 <SPI_EndRxTxTransaction+0x98>
        break;
 8009d4e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fe99 	bl	8009a94 <SPI_WaitFifoStateUntilTimeout>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d007      	beq.n	8009d78 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d6c:	f043 0220 	orr.w	r2, r3, #32
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e000      	b.n	8009d7a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000000 	.word	0x20000000
 8009d88:	165e9f81 	.word	0x165e9f81

08009d8c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d94:	f7f8 f9d2 	bl	800213c <HAL_GetTick>
 8009d98:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009da8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	2164      	movs	r1, #100	; 0x64
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff ff82 	bl	8009cb8 <SPI_EndRxTxTransaction>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dbe:	f043 0220 	orr.w	r2, r3, #32
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60bb      	str	r3, [r7, #8]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	60bb      	str	r3, [r7, #8]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	60bb      	str	r3, [r7, #8]
 8009de2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f00d f919 	bl	801702c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009dfa:	e002      	b.n	8009e02 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f00d f8d7 	bl	8016fb0 <HAL_SPI_TxCpltCallback>
}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e049      	b.n	8009eb0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d106      	bne.n	8009e36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7f7 fc29 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2202      	movs	r2, #2
 8009e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4619      	mov	r1, r3
 8009e48:	4610      	mov	r0, r2
 8009e4a:	f000 fa23 	bl	800a294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d001      	beq.n	8009ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e054      	b.n	8009f7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f042 0201 	orr.w	r2, r2, #1
 8009ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a26      	ldr	r2, [pc, #152]	; (8009f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d022      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009efa:	d01d      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a22      	ldr	r2, [pc, #136]	; (8009f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d018      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a21      	ldr	r2, [pc, #132]	; (8009f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d013      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1f      	ldr	r2, [pc, #124]	; (8009f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00e      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1e      	ldr	r2, [pc, #120]	; (8009f98 <HAL_TIM_Base_Start_IT+0xe0>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d009      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a1c      	ldr	r2, [pc, #112]	; (8009f9c <HAL_TIM_Base_Start_IT+0xe4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d004      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a1b      	ldr	r2, [pc, #108]	; (8009fa0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d115      	bne.n	8009f64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	4b19      	ldr	r3, [pc, #100]	; (8009fa4 <HAL_TIM_Base_Start_IT+0xec>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b06      	cmp	r3, #6
 8009f48:	d015      	beq.n	8009f76 <HAL_TIM_Base_Start_IT+0xbe>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f50:	d011      	beq.n	8009f76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f042 0201 	orr.w	r2, r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f62:	e008      	b.n	8009f76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f042 0201 	orr.w	r2, r2, #1
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	e000      	b.n	8009f78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	40010400 	.word	0x40010400
 8009f9c:	40014000 	.word	0x40014000
 8009fa0:	40001800 	.word	0x40001800
 8009fa4:	00010007 	.word	0x00010007

08009fa8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0201 	bic.w	r2, r2, #1
 8009fbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6a1a      	ldr	r2, [r3, #32]
 8009fc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10f      	bne.n	8009ff0 <HAL_TIM_Base_Stop_IT+0x48>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6a1a      	ldr	r2, [r3, #32]
 8009fd6:	f240 4344 	movw	r3, #1092	; 0x444
 8009fda:	4013      	ands	r3, r2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d107      	bne.n	8009ff0 <HAL_TIM_Base_Stop_IT+0x48>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0201 	bic.w	r2, r2, #1
 8009fee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d122      	bne.n	800a062 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b02      	cmp	r3, #2
 800a028:	d11b      	bne.n	800a062 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f06f 0202 	mvn.w	r2, #2
 800a032:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	f003 0303 	and.w	r3, r3, #3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f905 	bl	800a258 <HAL_TIM_IC_CaptureCallback>
 800a04e:	e005      	b.n	800a05c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f8f7 	bl	800a244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f908 	bl	800a26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d122      	bne.n	800a0b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d11b      	bne.n	800a0b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f06f 0204 	mvn.w	r2, #4
 800a086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f8db 	bl	800a258 <HAL_TIM_IC_CaptureCallback>
 800a0a2:	e005      	b.n	800a0b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f8cd 	bl	800a244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f8de 	bl	800a26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f003 0308 	and.w	r3, r3, #8
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d122      	bne.n	800a10a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f003 0308 	and.w	r3, r3, #8
 800a0ce:	2b08      	cmp	r3, #8
 800a0d0:	d11b      	bne.n	800a10a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f06f 0208 	mvn.w	r2, #8
 800a0da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2204      	movs	r2, #4
 800a0e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f8b1 	bl	800a258 <HAL_TIM_IC_CaptureCallback>
 800a0f6:	e005      	b.n	800a104 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f8a3 	bl	800a244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f8b4 	bl	800a26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f003 0310 	and.w	r3, r3, #16
 800a114:	2b10      	cmp	r3, #16
 800a116:	d122      	bne.n	800a15e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	f003 0310 	and.w	r3, r3, #16
 800a122:	2b10      	cmp	r3, #16
 800a124:	d11b      	bne.n	800a15e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f06f 0210 	mvn.w	r2, #16
 800a12e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2208      	movs	r2, #8
 800a134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a140:	2b00      	cmp	r3, #0
 800a142:	d003      	beq.n	800a14c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f887 	bl	800a258 <HAL_TIM_IC_CaptureCallback>
 800a14a:	e005      	b.n	800a158 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f879 	bl	800a244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f88a 	bl	800a26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d10e      	bne.n	800a18a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b01      	cmp	r3, #1
 800a178:	d107      	bne.n	800a18a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f06f 0201 	mvn.w	r2, #1
 800a182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f00d f809 	bl	801719c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a194:	2b80      	cmp	r3, #128	; 0x80
 800a196:	d10e      	bne.n	800a1b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a2:	2b80      	cmp	r3, #128	; 0x80
 800a1a4:	d107      	bne.n	800a1b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f9a7 	bl	800a504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c4:	d10e      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d0:	2b80      	cmp	r3, #128	; 0x80
 800a1d2:	d107      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f99a 	bl	800a518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d10e      	bne.n	800a210 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fc:	2b40      	cmp	r3, #64	; 0x40
 800a1fe:	d107      	bne.n	800a210 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f838 	bl	800a280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	2b20      	cmp	r3, #32
 800a21c:	d10e      	bne.n	800a23c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f003 0320 	and.w	r3, r3, #32
 800a228:	2b20      	cmp	r3, #32
 800a22a:	d107      	bne.n	800a23c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f06f 0220 	mvn.w	r2, #32
 800a234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f95a 	bl	800a4f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a40      	ldr	r2, [pc, #256]	; (800a3a8 <TIM_Base_SetConfig+0x114>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d013      	beq.n	800a2d4 <TIM_Base_SetConfig+0x40>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b2:	d00f      	beq.n	800a2d4 <TIM_Base_SetConfig+0x40>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a3d      	ldr	r2, [pc, #244]	; (800a3ac <TIM_Base_SetConfig+0x118>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d00b      	beq.n	800a2d4 <TIM_Base_SetConfig+0x40>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a3c      	ldr	r2, [pc, #240]	; (800a3b0 <TIM_Base_SetConfig+0x11c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d007      	beq.n	800a2d4 <TIM_Base_SetConfig+0x40>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a3b      	ldr	r2, [pc, #236]	; (800a3b4 <TIM_Base_SetConfig+0x120>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d003      	beq.n	800a2d4 <TIM_Base_SetConfig+0x40>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a3a      	ldr	r2, [pc, #232]	; (800a3b8 <TIM_Base_SetConfig+0x124>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d108      	bne.n	800a2e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a2f      	ldr	r2, [pc, #188]	; (800a3a8 <TIM_Base_SetConfig+0x114>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d02b      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f4:	d027      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a2c      	ldr	r2, [pc, #176]	; (800a3ac <TIM_Base_SetConfig+0x118>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d023      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a2b      	ldr	r2, [pc, #172]	; (800a3b0 <TIM_Base_SetConfig+0x11c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d01f      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a2a      	ldr	r2, [pc, #168]	; (800a3b4 <TIM_Base_SetConfig+0x120>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d01b      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a29      	ldr	r2, [pc, #164]	; (800a3b8 <TIM_Base_SetConfig+0x124>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d017      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a28      	ldr	r2, [pc, #160]	; (800a3bc <TIM_Base_SetConfig+0x128>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d013      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a27      	ldr	r2, [pc, #156]	; (800a3c0 <TIM_Base_SetConfig+0x12c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00f      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a26      	ldr	r2, [pc, #152]	; (800a3c4 <TIM_Base_SetConfig+0x130>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d00b      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a25      	ldr	r2, [pc, #148]	; (800a3c8 <TIM_Base_SetConfig+0x134>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d007      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a24      	ldr	r2, [pc, #144]	; (800a3cc <TIM_Base_SetConfig+0x138>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d003      	beq.n	800a346 <TIM_Base_SetConfig+0xb2>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a23      	ldr	r2, [pc, #140]	; (800a3d0 <TIM_Base_SetConfig+0x13c>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d108      	bne.n	800a358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a0a      	ldr	r2, [pc, #40]	; (800a3a8 <TIM_Base_SetConfig+0x114>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d003      	beq.n	800a38c <TIM_Base_SetConfig+0xf8>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a0c      	ldr	r2, [pc, #48]	; (800a3b8 <TIM_Base_SetConfig+0x124>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d103      	bne.n	800a394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	615a      	str	r2, [r3, #20]
}
 800a39a:	bf00      	nop
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	40010000 	.word	0x40010000
 800a3ac:	40000400 	.word	0x40000400
 800a3b0:	40000800 	.word	0x40000800
 800a3b4:	40000c00 	.word	0x40000c00
 800a3b8:	40010400 	.word	0x40010400
 800a3bc:	40014000 	.word	0x40014000
 800a3c0:	40014400 	.word	0x40014400
 800a3c4:	40014800 	.word	0x40014800
 800a3c8:	40001800 	.word	0x40001800
 800a3cc:	40001c00 	.word	0x40001c00
 800a3d0:	40002000 	.word	0x40002000

0800a3d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e06d      	b.n	800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a30      	ldr	r2, [pc, #192]	; (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d004      	beq.n	800a420 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a2f      	ldr	r2, [pc, #188]	; (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d108      	bne.n	800a432 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a426:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	4313      	orrs	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a438:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4313      	orrs	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a20      	ldr	r2, [pc, #128]	; (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d022      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a45e:	d01d      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1d      	ldr	r2, [pc, #116]	; (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d018      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1c      	ldr	r2, [pc, #112]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1a      	ldr	r2, [pc, #104]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d00e      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a15      	ldr	r2, [pc, #84]	; (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d009      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a16      	ldr	r2, [pc, #88]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d004      	beq.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a15      	ldr	r2, [pc, #84]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d10c      	bne.n	800a4b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	40010000 	.word	0x40010000
 800a4d8:	40010400 	.word	0x40010400
 800a4dc:	40000400 	.word	0x40000400
 800a4e0:	40000800 	.word	0x40000800
 800a4e4:	40000c00 	.word	0x40000c00
 800a4e8:	40014000 	.word	0x40014000
 800a4ec:	40001800 	.word	0x40001800

0800a4f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e040      	b.n	800a5c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7f7 f8c0 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2224      	movs	r2, #36	; 0x24
 800a558:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0201 	bic.w	r2, r2, #1
 800a568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fbaa 	bl	800acc4 <UART_SetConfig>
 800a570:	4603      	mov	r3, r0
 800a572:	2b01      	cmp	r3, #1
 800a574:	d101      	bne.n	800a57a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e022      	b.n	800a5c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fe02 	bl	800b18c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689a      	ldr	r2, [r3, #8]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f042 0201 	orr.w	r2, r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fe89 	bl	800b2d0 <UART_CheckIdleState>
 800a5be:	4603      	mov	r3, r0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d171      	bne.n	800a6c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <HAL_UART_Transmit+0x24>
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e06a      	b.n	800a6c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2221      	movs	r2, #33	; 0x21
 800a5fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5fe:	f7f7 fd9d 	bl	800213c <HAL_GetTick>
 800a602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	88fa      	ldrh	r2, [r7, #6]
 800a608:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	88fa      	ldrh	r2, [r7, #6]
 800a610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a61c:	d108      	bne.n	800a630 <HAL_UART_Transmit+0x68>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d104      	bne.n	800a630 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	61bb      	str	r3, [r7, #24]
 800a62e:	e003      	b.n	800a638 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a638:	e02c      	b.n	800a694 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2200      	movs	r2, #0
 800a642:	2180      	movs	r1, #128	; 0x80
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 fe7a 	bl	800b33e <UART_WaitOnFlagUntilTimeout>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e038      	b.n	800a6c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	3302      	adds	r3, #2
 800a66e:	61bb      	str	r3, [r7, #24]
 800a670:	e007      	b.n	800a682 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	781a      	ldrb	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	3301      	adds	r3, #1
 800a680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a688:	b29b      	uxth	r3, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1cc      	bne.n	800a63a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2140      	movs	r1, #64	; 0x40
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 fe47 	bl	800b33e <UART_WaitOnFlagUntilTimeout>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e005      	b.n	800a6c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e000      	b.n	800a6c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a6c4:	2302      	movs	r3, #2
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b0ba      	sub	sp, #232	; 0xe8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a6fa:	f640 030f 	movw	r3, #2063	; 0x80f
 800a6fe:	4013      	ands	r3, r2
 800a700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d115      	bne.n	800a738 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a710:	f003 0320 	and.w	r3, r3, #32
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00f      	beq.n	800a738 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 8297 	beq.w	800ac5c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4798      	blx	r3
      }
      return;
 800a736:	e291      	b.n	800ac5c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 8117 	beq.w	800a970 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a74e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a752:	4b85      	ldr	r3, [pc, #532]	; (800a968 <HAL_UART_IRQHandler+0x298>)
 800a754:	4013      	ands	r3, r2
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 810a 	beq.w	800a970 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d011      	beq.n	800a78c <HAL_UART_IRQHandler+0xbc>
 800a768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00b      	beq.n	800a78c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2201      	movs	r2, #1
 800a77a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a782:	f043 0201 	orr.w	r2, r3, #1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d011      	beq.n	800a7bc <HAL_UART_IRQHandler+0xec>
 800a798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00b      	beq.n	800a7bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7b2:	f043 0204 	orr.w	r2, r3, #4
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d011      	beq.n	800a7ec <HAL_UART_IRQHandler+0x11c>
 800a7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00b      	beq.n	800a7ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2204      	movs	r2, #4
 800a7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7e2:	f043 0202 	orr.w	r2, r3, #2
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d017      	beq.n	800a828 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7fc:	f003 0320 	and.w	r3, r3, #32
 800a800:	2b00      	cmp	r3, #0
 800a802:	d105      	bne.n	800a810 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a808:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00b      	beq.n	800a828 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2208      	movs	r2, #8
 800a816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a81e:	f043 0208 	orr.w	r2, r3, #8
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a82c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a830:	2b00      	cmp	r3, #0
 800a832:	d012      	beq.n	800a85a <HAL_UART_IRQHandler+0x18a>
 800a834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00c      	beq.n	800a85a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a850:	f043 0220 	orr.w	r2, r3, #32
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 81fd 	beq.w	800ac60 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00d      	beq.n	800a88e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a876:	f003 0320 	and.w	r3, r3, #32
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a2:	2b40      	cmp	r3, #64	; 0x40
 800a8a4:	d005      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d04f      	beq.n	800a952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fed0 	bl	800b658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c2:	2b40      	cmp	r3, #64	; 0x40
 800a8c4:	d141      	bne.n	800a94a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a8f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a8f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a8fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a902:	e841 2300 	strex	r3, r2, [r1]
 800a906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1d9      	bne.n	800a8c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a916:	2b00      	cmp	r3, #0
 800a918:	d013      	beq.n	800a942 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a91e:	4a13      	ldr	r2, [pc, #76]	; (800a96c <HAL_UART_IRQHandler+0x29c>)
 800a920:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a926:	4618      	mov	r0, r3
 800a928:	f7f8 ff72 	bl	8003810 <HAL_DMA_Abort_IT>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d017      	beq.n	800a962 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a940:	e00f      	b.n	800a962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f9b4 	bl	800acb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a948:	e00b      	b.n	800a962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f9b0 	bl	800acb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a950:	e007      	b.n	800a962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f9ac 	bl	800acb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a960:	e17e      	b.n	800ac60 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a962:	bf00      	nop
    return;
 800a964:	e17c      	b.n	800ac60 <HAL_UART_IRQHandler+0x590>
 800a966:	bf00      	nop
 800a968:	04000120 	.word	0x04000120
 800a96c:	0800b905 	.word	0x0800b905

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a974:	2b01      	cmp	r3, #1
 800a976:	f040 814c 	bne.w	800ac12 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a97e:	f003 0310 	and.w	r3, r3, #16
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 8145 	beq.w	800ac12 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a98c:	f003 0310 	and.w	r3, r3, #16
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 813e 	beq.w	800ac12 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2210      	movs	r2, #16
 800a99c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a8:	2b40      	cmp	r3, #64	; 0x40
 800a9aa:	f040 80b6 	bne.w	800ab1a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 8150 	beq.w	800ac64 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a9ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	f080 8148 	bcs.w	800ac64 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9e8:	f000 8086 	beq.w	800aaf8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9f8:	e853 3f00 	ldrex	r3, [r3]
 800a9fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1da      	bne.n	800a9ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa40:	e853 3f00 	ldrex	r3, [r3]
 800aa44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa48:	f023 0301 	bic.w	r3, r3, #1
 800aa4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3308      	adds	r3, #8
 800aa56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e1      	bne.n	800aa36 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3308      	adds	r3, #8
 800aa78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3308      	adds	r3, #8
 800aa92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa96:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aaa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e3      	bne.n	800aa72 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac8:	f023 0310 	bic.w	r3, r3, #16
 800aacc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aada:	65bb      	str	r3, [r7, #88]	; 0x58
 800aadc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e4      	bne.n	800aab8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7f8 fe1c 	bl	8003730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f00c fc0e 	bl	8017334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab18:	e0a4      	b.n	800ac64 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 8096 	beq.w	800ac68 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800ab3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 8091 	beq.w	800ac68 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	e853 3f00 	ldrex	r3, [r3]
 800ab52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab68:	647b      	str	r3, [r7, #68]	; 0x44
 800ab6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab70:	e841 2300 	strex	r3, r2, [r1]
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e4      	bne.n	800ab46 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3308      	adds	r3, #8
 800ab82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	e853 3f00 	ldrex	r3, [r3]
 800ab8a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	f023 0301 	bic.w	r3, r3, #1
 800ab92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aba0:	633a      	str	r2, [r7, #48]	; 0x30
 800aba2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba8:	e841 2300 	strex	r3, r2, [r1]
 800abac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1e3      	bne.n	800ab7c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	e853 3f00 	ldrex	r3, [r3]
 800abd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f023 0310 	bic.w	r3, r3, #16
 800abdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abea:	61fb      	str	r3, [r7, #28]
 800abec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	69b9      	ldr	r1, [r7, #24]
 800abf0:	69fa      	ldr	r2, [r7, #28]
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	617b      	str	r3, [r7, #20]
   return(result);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e4      	bne.n	800abc8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f00c fb92 	bl	8017334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac10:	e02a      	b.n	800ac68 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ac12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ac1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d008      	beq.n	800ac3c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d01c      	beq.n	800ac6c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
    }
    return;
 800ac3a:	e017      	b.n	800ac6c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d012      	beq.n	800ac6e <HAL_UART_IRQHandler+0x59e>
 800ac48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00c      	beq.n	800ac6e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fe6b 	bl	800b930 <UART_EndTransmit_IT>
    return;
 800ac5a:	e008      	b.n	800ac6e <HAL_UART_IRQHandler+0x59e>
      return;
 800ac5c:	bf00      	nop
 800ac5e:	e006      	b.n	800ac6e <HAL_UART_IRQHandler+0x59e>
    return;
 800ac60:	bf00      	nop
 800ac62:	e004      	b.n	800ac6e <HAL_UART_IRQHandler+0x59e>
      return;
 800ac64:	bf00      	nop
 800ac66:	e002      	b.n	800ac6e <HAL_UART_IRQHandler+0x59e>
      return;
 800ac68:	bf00      	nop
 800ac6a:	e000      	b.n	800ac6e <HAL_UART_IRQHandler+0x59e>
    return;
 800ac6c:	bf00      	nop
  }

}
 800ac6e:	37e8      	adds	r7, #232	; 0xe8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	431a      	orrs	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	4ba6      	ldr	r3, [pc, #664]	; (800af88 <UART_SetConfig+0x2c4>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	6812      	ldr	r2, [r2, #0]
 800acf6:	6979      	ldr	r1, [r7, #20]
 800acf8:	430b      	orrs	r3, r1
 800acfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a94      	ldr	r2, [pc, #592]	; (800af8c <UART_SetConfig+0x2c8>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d120      	bne.n	800ad82 <UART_SetConfig+0xbe>
 800ad40:	4b93      	ldr	r3, [pc, #588]	; (800af90 <UART_SetConfig+0x2cc>)
 800ad42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d816      	bhi.n	800ad7c <UART_SetConfig+0xb8>
 800ad4e:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <UART_SetConfig+0x90>)
 800ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad54:	0800ad65 	.word	0x0800ad65
 800ad58:	0800ad71 	.word	0x0800ad71
 800ad5c:	0800ad6b 	.word	0x0800ad6b
 800ad60:	0800ad77 	.word	0x0800ad77
 800ad64:	2301      	movs	r3, #1
 800ad66:	77fb      	strb	r3, [r7, #31]
 800ad68:	e150      	b.n	800b00c <UART_SetConfig+0x348>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	77fb      	strb	r3, [r7, #31]
 800ad6e:	e14d      	b.n	800b00c <UART_SetConfig+0x348>
 800ad70:	2304      	movs	r3, #4
 800ad72:	77fb      	strb	r3, [r7, #31]
 800ad74:	e14a      	b.n	800b00c <UART_SetConfig+0x348>
 800ad76:	2308      	movs	r3, #8
 800ad78:	77fb      	strb	r3, [r7, #31]
 800ad7a:	e147      	b.n	800b00c <UART_SetConfig+0x348>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	77fb      	strb	r3, [r7, #31]
 800ad80:	e144      	b.n	800b00c <UART_SetConfig+0x348>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a83      	ldr	r2, [pc, #524]	; (800af94 <UART_SetConfig+0x2d0>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d132      	bne.n	800adf2 <UART_SetConfig+0x12e>
 800ad8c:	4b80      	ldr	r3, [pc, #512]	; (800af90 <UART_SetConfig+0x2cc>)
 800ad8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad92:	f003 030c 	and.w	r3, r3, #12
 800ad96:	2b0c      	cmp	r3, #12
 800ad98:	d828      	bhi.n	800adec <UART_SetConfig+0x128>
 800ad9a:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <UART_SetConfig+0xdc>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800add5 	.word	0x0800add5
 800ada4:	0800aded 	.word	0x0800aded
 800ada8:	0800aded 	.word	0x0800aded
 800adac:	0800aded 	.word	0x0800aded
 800adb0:	0800ade1 	.word	0x0800ade1
 800adb4:	0800aded 	.word	0x0800aded
 800adb8:	0800aded 	.word	0x0800aded
 800adbc:	0800aded 	.word	0x0800aded
 800adc0:	0800addb 	.word	0x0800addb
 800adc4:	0800aded 	.word	0x0800aded
 800adc8:	0800aded 	.word	0x0800aded
 800adcc:	0800aded 	.word	0x0800aded
 800add0:	0800ade7 	.word	0x0800ade7
 800add4:	2300      	movs	r3, #0
 800add6:	77fb      	strb	r3, [r7, #31]
 800add8:	e118      	b.n	800b00c <UART_SetConfig+0x348>
 800adda:	2302      	movs	r3, #2
 800addc:	77fb      	strb	r3, [r7, #31]
 800adde:	e115      	b.n	800b00c <UART_SetConfig+0x348>
 800ade0:	2304      	movs	r3, #4
 800ade2:	77fb      	strb	r3, [r7, #31]
 800ade4:	e112      	b.n	800b00c <UART_SetConfig+0x348>
 800ade6:	2308      	movs	r3, #8
 800ade8:	77fb      	strb	r3, [r7, #31]
 800adea:	e10f      	b.n	800b00c <UART_SetConfig+0x348>
 800adec:	2310      	movs	r3, #16
 800adee:	77fb      	strb	r3, [r7, #31]
 800adf0:	e10c      	b.n	800b00c <UART_SetConfig+0x348>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a68      	ldr	r2, [pc, #416]	; (800af98 <UART_SetConfig+0x2d4>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d120      	bne.n	800ae3e <UART_SetConfig+0x17a>
 800adfc:	4b64      	ldr	r3, [pc, #400]	; (800af90 <UART_SetConfig+0x2cc>)
 800adfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae06:	2b30      	cmp	r3, #48	; 0x30
 800ae08:	d013      	beq.n	800ae32 <UART_SetConfig+0x16e>
 800ae0a:	2b30      	cmp	r3, #48	; 0x30
 800ae0c:	d814      	bhi.n	800ae38 <UART_SetConfig+0x174>
 800ae0e:	2b20      	cmp	r3, #32
 800ae10:	d009      	beq.n	800ae26 <UART_SetConfig+0x162>
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d810      	bhi.n	800ae38 <UART_SetConfig+0x174>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <UART_SetConfig+0x15c>
 800ae1a:	2b10      	cmp	r3, #16
 800ae1c:	d006      	beq.n	800ae2c <UART_SetConfig+0x168>
 800ae1e:	e00b      	b.n	800ae38 <UART_SetConfig+0x174>
 800ae20:	2300      	movs	r3, #0
 800ae22:	77fb      	strb	r3, [r7, #31]
 800ae24:	e0f2      	b.n	800b00c <UART_SetConfig+0x348>
 800ae26:	2302      	movs	r3, #2
 800ae28:	77fb      	strb	r3, [r7, #31]
 800ae2a:	e0ef      	b.n	800b00c <UART_SetConfig+0x348>
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	77fb      	strb	r3, [r7, #31]
 800ae30:	e0ec      	b.n	800b00c <UART_SetConfig+0x348>
 800ae32:	2308      	movs	r3, #8
 800ae34:	77fb      	strb	r3, [r7, #31]
 800ae36:	e0e9      	b.n	800b00c <UART_SetConfig+0x348>
 800ae38:	2310      	movs	r3, #16
 800ae3a:	77fb      	strb	r3, [r7, #31]
 800ae3c:	e0e6      	b.n	800b00c <UART_SetConfig+0x348>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a56      	ldr	r2, [pc, #344]	; (800af9c <UART_SetConfig+0x2d8>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d120      	bne.n	800ae8a <UART_SetConfig+0x1c6>
 800ae48:	4b51      	ldr	r3, [pc, #324]	; (800af90 <UART_SetConfig+0x2cc>)
 800ae4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae52:	2bc0      	cmp	r3, #192	; 0xc0
 800ae54:	d013      	beq.n	800ae7e <UART_SetConfig+0x1ba>
 800ae56:	2bc0      	cmp	r3, #192	; 0xc0
 800ae58:	d814      	bhi.n	800ae84 <UART_SetConfig+0x1c0>
 800ae5a:	2b80      	cmp	r3, #128	; 0x80
 800ae5c:	d009      	beq.n	800ae72 <UART_SetConfig+0x1ae>
 800ae5e:	2b80      	cmp	r3, #128	; 0x80
 800ae60:	d810      	bhi.n	800ae84 <UART_SetConfig+0x1c0>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <UART_SetConfig+0x1a8>
 800ae66:	2b40      	cmp	r3, #64	; 0x40
 800ae68:	d006      	beq.n	800ae78 <UART_SetConfig+0x1b4>
 800ae6a:	e00b      	b.n	800ae84 <UART_SetConfig+0x1c0>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	77fb      	strb	r3, [r7, #31]
 800ae70:	e0cc      	b.n	800b00c <UART_SetConfig+0x348>
 800ae72:	2302      	movs	r3, #2
 800ae74:	77fb      	strb	r3, [r7, #31]
 800ae76:	e0c9      	b.n	800b00c <UART_SetConfig+0x348>
 800ae78:	2304      	movs	r3, #4
 800ae7a:	77fb      	strb	r3, [r7, #31]
 800ae7c:	e0c6      	b.n	800b00c <UART_SetConfig+0x348>
 800ae7e:	2308      	movs	r3, #8
 800ae80:	77fb      	strb	r3, [r7, #31]
 800ae82:	e0c3      	b.n	800b00c <UART_SetConfig+0x348>
 800ae84:	2310      	movs	r3, #16
 800ae86:	77fb      	strb	r3, [r7, #31]
 800ae88:	e0c0      	b.n	800b00c <UART_SetConfig+0x348>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a44      	ldr	r2, [pc, #272]	; (800afa0 <UART_SetConfig+0x2dc>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d125      	bne.n	800aee0 <UART_SetConfig+0x21c>
 800ae94:	4b3e      	ldr	r3, [pc, #248]	; (800af90 <UART_SetConfig+0x2cc>)
 800ae96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aea2:	d017      	beq.n	800aed4 <UART_SetConfig+0x210>
 800aea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aea8:	d817      	bhi.n	800aeda <UART_SetConfig+0x216>
 800aeaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeae:	d00b      	beq.n	800aec8 <UART_SetConfig+0x204>
 800aeb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeb4:	d811      	bhi.n	800aeda <UART_SetConfig+0x216>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <UART_SetConfig+0x1fe>
 800aeba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aebe:	d006      	beq.n	800aece <UART_SetConfig+0x20a>
 800aec0:	e00b      	b.n	800aeda <UART_SetConfig+0x216>
 800aec2:	2300      	movs	r3, #0
 800aec4:	77fb      	strb	r3, [r7, #31]
 800aec6:	e0a1      	b.n	800b00c <UART_SetConfig+0x348>
 800aec8:	2302      	movs	r3, #2
 800aeca:	77fb      	strb	r3, [r7, #31]
 800aecc:	e09e      	b.n	800b00c <UART_SetConfig+0x348>
 800aece:	2304      	movs	r3, #4
 800aed0:	77fb      	strb	r3, [r7, #31]
 800aed2:	e09b      	b.n	800b00c <UART_SetConfig+0x348>
 800aed4:	2308      	movs	r3, #8
 800aed6:	77fb      	strb	r3, [r7, #31]
 800aed8:	e098      	b.n	800b00c <UART_SetConfig+0x348>
 800aeda:	2310      	movs	r3, #16
 800aedc:	77fb      	strb	r3, [r7, #31]
 800aede:	e095      	b.n	800b00c <UART_SetConfig+0x348>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a2f      	ldr	r2, [pc, #188]	; (800afa4 <UART_SetConfig+0x2e0>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d125      	bne.n	800af36 <UART_SetConfig+0x272>
 800aeea:	4b29      	ldr	r3, [pc, #164]	; (800af90 <UART_SetConfig+0x2cc>)
 800aeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aef8:	d017      	beq.n	800af2a <UART_SetConfig+0x266>
 800aefa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aefe:	d817      	bhi.n	800af30 <UART_SetConfig+0x26c>
 800af00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af04:	d00b      	beq.n	800af1e <UART_SetConfig+0x25a>
 800af06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af0a:	d811      	bhi.n	800af30 <UART_SetConfig+0x26c>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d003      	beq.n	800af18 <UART_SetConfig+0x254>
 800af10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af14:	d006      	beq.n	800af24 <UART_SetConfig+0x260>
 800af16:	e00b      	b.n	800af30 <UART_SetConfig+0x26c>
 800af18:	2301      	movs	r3, #1
 800af1a:	77fb      	strb	r3, [r7, #31]
 800af1c:	e076      	b.n	800b00c <UART_SetConfig+0x348>
 800af1e:	2302      	movs	r3, #2
 800af20:	77fb      	strb	r3, [r7, #31]
 800af22:	e073      	b.n	800b00c <UART_SetConfig+0x348>
 800af24:	2304      	movs	r3, #4
 800af26:	77fb      	strb	r3, [r7, #31]
 800af28:	e070      	b.n	800b00c <UART_SetConfig+0x348>
 800af2a:	2308      	movs	r3, #8
 800af2c:	77fb      	strb	r3, [r7, #31]
 800af2e:	e06d      	b.n	800b00c <UART_SetConfig+0x348>
 800af30:	2310      	movs	r3, #16
 800af32:	77fb      	strb	r3, [r7, #31]
 800af34:	e06a      	b.n	800b00c <UART_SetConfig+0x348>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a1b      	ldr	r2, [pc, #108]	; (800afa8 <UART_SetConfig+0x2e4>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d138      	bne.n	800afb2 <UART_SetConfig+0x2ee>
 800af40:	4b13      	ldr	r3, [pc, #76]	; (800af90 <UART_SetConfig+0x2cc>)
 800af42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800af4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af4e:	d017      	beq.n	800af80 <UART_SetConfig+0x2bc>
 800af50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af54:	d82a      	bhi.n	800afac <UART_SetConfig+0x2e8>
 800af56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af5a:	d00b      	beq.n	800af74 <UART_SetConfig+0x2b0>
 800af5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af60:	d824      	bhi.n	800afac <UART_SetConfig+0x2e8>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <UART_SetConfig+0x2aa>
 800af66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af6a:	d006      	beq.n	800af7a <UART_SetConfig+0x2b6>
 800af6c:	e01e      	b.n	800afac <UART_SetConfig+0x2e8>
 800af6e:	2300      	movs	r3, #0
 800af70:	77fb      	strb	r3, [r7, #31]
 800af72:	e04b      	b.n	800b00c <UART_SetConfig+0x348>
 800af74:	2302      	movs	r3, #2
 800af76:	77fb      	strb	r3, [r7, #31]
 800af78:	e048      	b.n	800b00c <UART_SetConfig+0x348>
 800af7a:	2304      	movs	r3, #4
 800af7c:	77fb      	strb	r3, [r7, #31]
 800af7e:	e045      	b.n	800b00c <UART_SetConfig+0x348>
 800af80:	2308      	movs	r3, #8
 800af82:	77fb      	strb	r3, [r7, #31]
 800af84:	e042      	b.n	800b00c <UART_SetConfig+0x348>
 800af86:	bf00      	nop
 800af88:	efff69f3 	.word	0xefff69f3
 800af8c:	40011000 	.word	0x40011000
 800af90:	40023800 	.word	0x40023800
 800af94:	40004400 	.word	0x40004400
 800af98:	40004800 	.word	0x40004800
 800af9c:	40004c00 	.word	0x40004c00
 800afa0:	40005000 	.word	0x40005000
 800afa4:	40011400 	.word	0x40011400
 800afa8:	40007800 	.word	0x40007800
 800afac:	2310      	movs	r3, #16
 800afae:	77fb      	strb	r3, [r7, #31]
 800afb0:	e02c      	b.n	800b00c <UART_SetConfig+0x348>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a72      	ldr	r2, [pc, #456]	; (800b180 <UART_SetConfig+0x4bc>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d125      	bne.n	800b008 <UART_SetConfig+0x344>
 800afbc:	4b71      	ldr	r3, [pc, #452]	; (800b184 <UART_SetConfig+0x4c0>)
 800afbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800afc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800afca:	d017      	beq.n	800affc <UART_SetConfig+0x338>
 800afcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800afd0:	d817      	bhi.n	800b002 <UART_SetConfig+0x33e>
 800afd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afd6:	d00b      	beq.n	800aff0 <UART_SetConfig+0x32c>
 800afd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afdc:	d811      	bhi.n	800b002 <UART_SetConfig+0x33e>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <UART_SetConfig+0x326>
 800afe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afe6:	d006      	beq.n	800aff6 <UART_SetConfig+0x332>
 800afe8:	e00b      	b.n	800b002 <UART_SetConfig+0x33e>
 800afea:	2300      	movs	r3, #0
 800afec:	77fb      	strb	r3, [r7, #31]
 800afee:	e00d      	b.n	800b00c <UART_SetConfig+0x348>
 800aff0:	2302      	movs	r3, #2
 800aff2:	77fb      	strb	r3, [r7, #31]
 800aff4:	e00a      	b.n	800b00c <UART_SetConfig+0x348>
 800aff6:	2304      	movs	r3, #4
 800aff8:	77fb      	strb	r3, [r7, #31]
 800affa:	e007      	b.n	800b00c <UART_SetConfig+0x348>
 800affc:	2308      	movs	r3, #8
 800affe:	77fb      	strb	r3, [r7, #31]
 800b000:	e004      	b.n	800b00c <UART_SetConfig+0x348>
 800b002:	2310      	movs	r3, #16
 800b004:	77fb      	strb	r3, [r7, #31]
 800b006:	e001      	b.n	800b00c <UART_SetConfig+0x348>
 800b008:	2310      	movs	r3, #16
 800b00a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b014:	d15b      	bne.n	800b0ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b016:	7ffb      	ldrb	r3, [r7, #31]
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d828      	bhi.n	800b06e <UART_SetConfig+0x3aa>
 800b01c:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <UART_SetConfig+0x360>)
 800b01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b022:	bf00      	nop
 800b024:	0800b049 	.word	0x0800b049
 800b028:	0800b051 	.word	0x0800b051
 800b02c:	0800b059 	.word	0x0800b059
 800b030:	0800b06f 	.word	0x0800b06f
 800b034:	0800b05f 	.word	0x0800b05f
 800b038:	0800b06f 	.word	0x0800b06f
 800b03c:	0800b06f 	.word	0x0800b06f
 800b040:	0800b06f 	.word	0x0800b06f
 800b044:	0800b067 	.word	0x0800b067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b048:	f7fc fd98 	bl	8007b7c <HAL_RCC_GetPCLK1Freq>
 800b04c:	61b8      	str	r0, [r7, #24]
        break;
 800b04e:	e013      	b.n	800b078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b050:	f7fc fda8 	bl	8007ba4 <HAL_RCC_GetPCLK2Freq>
 800b054:	61b8      	str	r0, [r7, #24]
        break;
 800b056:	e00f      	b.n	800b078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b058:	4b4b      	ldr	r3, [pc, #300]	; (800b188 <UART_SetConfig+0x4c4>)
 800b05a:	61bb      	str	r3, [r7, #24]
        break;
 800b05c:	e00c      	b.n	800b078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b05e:	f7fc fc7b 	bl	8007958 <HAL_RCC_GetSysClockFreq>
 800b062:	61b8      	str	r0, [r7, #24]
        break;
 800b064:	e008      	b.n	800b078 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b06a:	61bb      	str	r3, [r7, #24]
        break;
 800b06c:	e004      	b.n	800b078 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	77bb      	strb	r3, [r7, #30]
        break;
 800b076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d074      	beq.n	800b168 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	005a      	lsls	r2, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	085b      	lsrs	r3, r3, #1
 800b088:	441a      	add	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b092:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	2b0f      	cmp	r3, #15
 800b098:	d916      	bls.n	800b0c8 <UART_SetConfig+0x404>
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a0:	d212      	bcs.n	800b0c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	f023 030f 	bic.w	r3, r3, #15
 800b0aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	085b      	lsrs	r3, r3, #1
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	89fb      	ldrh	r3, [r7, #14]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	89fa      	ldrh	r2, [r7, #14]
 800b0c4:	60da      	str	r2, [r3, #12]
 800b0c6:	e04f      	b.n	800b168 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	77bb      	strb	r3, [r7, #30]
 800b0cc:	e04c      	b.n	800b168 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0ce:	7ffb      	ldrb	r3, [r7, #31]
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	d828      	bhi.n	800b126 <UART_SetConfig+0x462>
 800b0d4:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <UART_SetConfig+0x418>)
 800b0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0da:	bf00      	nop
 800b0dc:	0800b101 	.word	0x0800b101
 800b0e0:	0800b109 	.word	0x0800b109
 800b0e4:	0800b111 	.word	0x0800b111
 800b0e8:	0800b127 	.word	0x0800b127
 800b0ec:	0800b117 	.word	0x0800b117
 800b0f0:	0800b127 	.word	0x0800b127
 800b0f4:	0800b127 	.word	0x0800b127
 800b0f8:	0800b127 	.word	0x0800b127
 800b0fc:	0800b11f 	.word	0x0800b11f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b100:	f7fc fd3c 	bl	8007b7c <HAL_RCC_GetPCLK1Freq>
 800b104:	61b8      	str	r0, [r7, #24]
        break;
 800b106:	e013      	b.n	800b130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b108:	f7fc fd4c 	bl	8007ba4 <HAL_RCC_GetPCLK2Freq>
 800b10c:	61b8      	str	r0, [r7, #24]
        break;
 800b10e:	e00f      	b.n	800b130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b110:	4b1d      	ldr	r3, [pc, #116]	; (800b188 <UART_SetConfig+0x4c4>)
 800b112:	61bb      	str	r3, [r7, #24]
        break;
 800b114:	e00c      	b.n	800b130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b116:	f7fc fc1f 	bl	8007958 <HAL_RCC_GetSysClockFreq>
 800b11a:	61b8      	str	r0, [r7, #24]
        break;
 800b11c:	e008      	b.n	800b130 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b11e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b122:	61bb      	str	r3, [r7, #24]
        break;
 800b124:	e004      	b.n	800b130 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	77bb      	strb	r3, [r7, #30]
        break;
 800b12e:	bf00      	nop
    }

    if (pclk != 0U)
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d018      	beq.n	800b168 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	085a      	lsrs	r2, r3, #1
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	441a      	add	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	fbb2 f3f3 	udiv	r3, r2, r3
 800b148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b0f      	cmp	r3, #15
 800b14e:	d909      	bls.n	800b164 <UART_SetConfig+0x4a0>
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b156:	d205      	bcs.n	800b164 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	60da      	str	r2, [r3, #12]
 800b162:	e001      	b.n	800b168 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b174:	7fbb      	ldrb	r3, [r7, #30]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3720      	adds	r7, #32
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	40007c00 	.word	0x40007c00
 800b184:	40023800 	.word	0x40023800
 800b188:	00f42400 	.word	0x00f42400

0800b18c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	f003 0302 	and.w	r3, r3, #2
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	f003 0304 	and.w	r3, r3, #4
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00a      	beq.n	800b1fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	f003 0308 	and.w	r3, r3, #8
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00a      	beq.n	800b21c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	430a      	orrs	r2, r1
 800b21a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	f003 0310 	and.w	r3, r3, #16
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00a      	beq.n	800b23e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	430a      	orrs	r2, r1
 800b23c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	430a      	orrs	r2, r1
 800b25e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01a      	beq.n	800b2a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b28a:	d10a      	bne.n	800b2a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00a      	beq.n	800b2c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	605a      	str	r2, [r3, #4]
  }
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af02      	add	r7, sp, #8
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2e0:	f7f6 ff2c 	bl	800213c <HAL_GetTick>
 800b2e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0308 	and.w	r3, r3, #8
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d10e      	bne.n	800b312 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f81b 	bl	800b33e <UART_WaitOnFlagUntilTimeout>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e011      	b.n	800b336 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2220      	movs	r2, #32
 800b316:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2220      	movs	r2, #32
 800b31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b09c      	sub	sp, #112	; 0x70
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	603b      	str	r3, [r7, #0]
 800b34a:	4613      	mov	r3, r2
 800b34c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b34e:	e0a7      	b.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b356:	f000 80a3 	beq.w	800b4a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b35a:	f7f6 feef 	bl	800213c <HAL_GetTick>
 800b35e:	4602      	mov	r2, r0
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b366:	429a      	cmp	r2, r3
 800b368:	d302      	bcc.n	800b370 <UART_WaitOnFlagUntilTimeout+0x32>
 800b36a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d13f      	bne.n	800b3f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b384:	667b      	str	r3, [r7, #100]	; 0x64
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	461a      	mov	r2, r3
 800b38c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b38e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b390:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b396:	e841 2300 	strex	r3, r2, [r1]
 800b39a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1e6      	bne.n	800b370 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	f023 0301 	bic.w	r3, r3, #1
 800b3b8:	663b      	str	r3, [r7, #96]	; 0x60
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3308      	adds	r3, #8
 800b3c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e5      	bne.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e068      	b.n	800b4c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 0304 	and.w	r3, r3, #4
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d050      	beq.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b40c:	d148      	bne.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b416:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b42c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b436:	637b      	str	r3, [r7, #52]	; 0x34
 800b438:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b43c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e6      	bne.n	800b418 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3308      	adds	r3, #8
 800b450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	613b      	str	r3, [r7, #16]
   return(result);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f023 0301 	bic.w	r3, r3, #1
 800b460:	66bb      	str	r3, [r7, #104]	; 0x68
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3308      	adds	r3, #8
 800b468:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b46a:	623a      	str	r2, [r7, #32]
 800b46c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46e:	69f9      	ldr	r1, [r7, #28]
 800b470:	6a3a      	ldr	r2, [r7, #32]
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	61bb      	str	r3, [r7, #24]
   return(result);
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e5      	bne.n	800b44a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2220      	movs	r2, #32
 800b482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2220      	movs	r2, #32
 800b488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2220      	movs	r2, #32
 800b490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e010      	b.n	800b4c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	69da      	ldr	r2, [r3, #28]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	bf0c      	ite	eq
 800b4b0:	2301      	moveq	r3, #1
 800b4b2:	2300      	movne	r3, #0
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	f43f af48 	beq.w	800b350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3770      	adds	r7, #112	; 0x70
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
	...

0800b4cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b096      	sub	sp, #88	; 0x58
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	88fa      	ldrh	r2, [r7, #6]
 800b4e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2222      	movs	r2, #34	; 0x22
 800b4f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d028      	beq.n	800b552 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b504:	4a3e      	ldr	r2, [pc, #248]	; (800b600 <UART_Start_Receive_DMA+0x134>)
 800b506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b50c:	4a3d      	ldr	r2, [pc, #244]	; (800b604 <UART_Start_Receive_DMA+0x138>)
 800b50e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b514:	4a3c      	ldr	r2, [pc, #240]	; (800b608 <UART_Start_Receive_DMA+0x13c>)
 800b516:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b51c:	2200      	movs	r2, #0
 800b51e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3324      	adds	r3, #36	; 0x24
 800b52a:	4619      	mov	r1, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b530:	461a      	mov	r2, r3
 800b532:	88fb      	ldrh	r3, [r7, #6]
 800b534:	f7f8 f89c 	bl	8003670 <HAL_DMA_Start_IT>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2210      	movs	r2, #16
 800b542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e051      	b.n	800b5f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d018      	beq.n	800b58c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b562:	e853 3f00 	ldrex	r3, [r3]
 800b566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b56e:	657b      	str	r3, [r7, #84]	; 0x54
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	461a      	mov	r2, r3
 800b576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b578:	64bb      	str	r3, [r7, #72]	; 0x48
 800b57a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b57e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b580:	e841 2300 	strex	r3, r2, [r1]
 800b584:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e6      	bne.n	800b55a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3308      	adds	r3, #8
 800b592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	e853 3f00 	ldrex	r3, [r3]
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	f043 0301 	orr.w	r3, r3, #1
 800b5a2:	653b      	str	r3, [r7, #80]	; 0x50
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5ac:	637a      	str	r2, [r7, #52]	; 0x34
 800b5ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5b4:	e841 2300 	strex	r3, r2, [r1]
 800b5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1e5      	bne.n	800b58c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	e853 3f00 	ldrex	r3, [r3]
 800b5ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3308      	adds	r3, #8
 800b5de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5e0:	623a      	str	r2, [r7, #32]
 800b5e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e4:	69f9      	ldr	r1, [r7, #28]
 800b5e6:	6a3a      	ldr	r2, [r7, #32]
 800b5e8:	e841 2300 	strex	r3, r2, [r1]
 800b5ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e5      	bne.n	800b5c0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3758      	adds	r7, #88	; 0x58
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	0800b721 	.word	0x0800b721
 800b604:	0800b849 	.word	0x0800b849
 800b608:	0800b887 	.word	0x0800b887

0800b60c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b089      	sub	sp, #36	; 0x24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	e853 3f00 	ldrex	r3, [r3]
 800b620:	60bb      	str	r3, [r7, #8]
   return(result);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	61bb      	str	r3, [r7, #24]
 800b634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6979      	ldr	r1, [r7, #20]
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	613b      	str	r3, [r7, #16]
   return(result);
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e6      	bne.n	800b614 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b64c:	bf00      	nop
 800b64e:	3724      	adds	r7, #36	; 0x24
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b658:	b480      	push	{r7}
 800b65a:	b095      	sub	sp, #84	; 0x54
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b674:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67e:	643b      	str	r3, [r7, #64]	; 0x40
 800b680:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e6      	bne.n	800b660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3308      	adds	r3, #8
 800b698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	e853 3f00 	ldrex	r3, [r3]
 800b6a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	f023 0301 	bic.w	r3, r3, #1
 800b6a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e5      	bne.n	800b692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d118      	bne.n	800b700 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	e853 3f00 	ldrex	r3, [r3]
 800b6da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f023 0310 	bic.w	r3, r3, #16
 800b6e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ec:	61bb      	str	r3, [r7, #24]
 800b6ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f0:	6979      	ldr	r1, [r7, #20]
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	e841 2300 	strex	r3, r2, [r1]
 800b6f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e6      	bne.n	800b6ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2220      	movs	r2, #32
 800b704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b714:	bf00      	nop
 800b716:	3754      	adds	r7, #84	; 0x54
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b09c      	sub	sp, #112	; 0x70
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b736:	d071      	beq.n	800b81c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b748:	e853 3f00 	ldrex	r3, [r3]
 800b74c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b74e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b754:	66bb      	str	r3, [r7, #104]	; 0x68
 800b756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	461a      	mov	r2, r3
 800b75c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b75e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b760:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b766:	e841 2300 	strex	r3, r2, [r1]
 800b76a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1e6      	bne.n	800b740 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3308      	adds	r3, #8
 800b778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b784:	f023 0301 	bic.w	r3, r3, #1
 800b788:	667b      	str	r3, [r7, #100]	; 0x64
 800b78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3308      	adds	r3, #8
 800b790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b792:	647a      	str	r2, [r7, #68]	; 0x44
 800b794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e5      	bne.n	800b772 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7bc:	663b      	str	r3, [r7, #96]	; 0x60
 800b7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7c6:	633a      	str	r2, [r7, #48]	; 0x30
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e5      	bne.n	800b7a6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7dc:	2220      	movs	r2, #32
 800b7de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d118      	bne.n	800b81c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 0310 	bic.w	r3, r3, #16
 800b7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b808:	61fb      	str	r3, [r7, #28]
 800b80a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	69b9      	ldr	r1, [r7, #24]
 800b80e:	69fa      	ldr	r2, [r7, #28]
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	617b      	str	r3, [r7, #20]
   return(result);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e6      	bne.n	800b7ea <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b81c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b81e:	2200      	movs	r2, #0
 800b820:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b826:	2b01      	cmp	r3, #1
 800b828:	d107      	bne.n	800b83a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b82c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b830:	4619      	mov	r1, r3
 800b832:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b834:	f00b fd7e 	bl	8017334 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b838:	e002      	b.n	800b840 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b83a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b83c:	f7ff fa24 	bl	800ac88 <HAL_UART_RxCpltCallback>
}
 800b840:	bf00      	nop
 800b842:	3770      	adds	r7, #112	; 0x70
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b860:	2b01      	cmp	r3, #1
 800b862:	d109      	bne.n	800b878 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b86a:	085b      	lsrs	r3, r3, #1
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	4619      	mov	r1, r3
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f00b fd5f 	bl	8017334 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b876:	e002      	b.n	800b87e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7ff fa0f 	bl	800ac9c <HAL_UART_RxHalfCpltCallback>
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b892:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b898:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ac:	2b80      	cmp	r3, #128	; 0x80
 800b8ae:	d109      	bne.n	800b8c4 <UART_DMAError+0x3e>
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	2b21      	cmp	r3, #33	; 0x21
 800b8b4:	d106      	bne.n	800b8c4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b8be:	6978      	ldr	r0, [r7, #20]
 800b8c0:	f7ff fea4 	bl	800b60c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ce:	2b40      	cmp	r3, #64	; 0x40
 800b8d0:	d109      	bne.n	800b8e6 <UART_DMAError+0x60>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b22      	cmp	r3, #34	; 0x22
 800b8d6:	d106      	bne.n	800b8e6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b8e0:	6978      	ldr	r0, [r7, #20]
 800b8e2:	f7ff feb9 	bl	800b658 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ec:	f043 0210 	orr.w	r2, r3, #16
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8f6:	6978      	ldr	r0, [r7, #20]
 800b8f8:	f7ff f9da 	bl	800acb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8fc:	bf00      	nop
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b910:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f7ff f9c4 	bl	800acb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b928:	bf00      	nop
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b088      	sub	sp, #32
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	e853 3f00 	ldrex	r3, [r3]
 800b944:	60bb      	str	r3, [r7, #8]
   return(result);
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b94c:	61fb      	str	r3, [r7, #28]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	61bb      	str	r3, [r7, #24]
 800b958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95a:	6979      	ldr	r1, [r7, #20]
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	e841 2300 	strex	r3, r2, [r1]
 800b962:	613b      	str	r3, [r7, #16]
   return(result);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e6      	bne.n	800b938 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2220      	movs	r2, #32
 800b96e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff f97c 	bl	800ac74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b97c:	bf00      	nop
 800b97e:	3720      	adds	r7, #32
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b08c      	sub	sp, #48	; 0x30
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b998:	2b20      	cmp	r3, #32
 800b99a:	d142      	bne.n	800ba22 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d002      	beq.n	800b9a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b9a2:	88fb      	ldrh	r3, [r7, #6]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e03b      	b.n	800ba24 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b9b8:	88fb      	ldrh	r3, [r7, #6]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	68b9      	ldr	r1, [r7, #8]
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7ff fd84 	bl	800b4cc <UART_Start_Receive_DMA>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b9ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d124      	bne.n	800ba1c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d11d      	bne.n	800ba16 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2210      	movs	r2, #16
 800b9e0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	617b      	str	r3, [r7, #20]
   return(result);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f043 0310 	orr.w	r3, r3, #16
 800b9f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
 800ba02:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	6a39      	ldr	r1, [r7, #32]
 800ba06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba08:	e841 2300 	strex	r3, r2, [r1]
 800ba0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e6      	bne.n	800b9e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ba14:	e002      	b.n	800ba1c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ba1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba20:	e000      	b.n	800ba24 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ba22:	2302      	movs	r3, #2
  }
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3730      	adds	r7, #48	; 0x30
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ba32:	4b87      	ldr	r3, [pc, #540]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba34:	22c0      	movs	r2, #192	; 0xc0
 800ba36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ba38:	4b85      	ldr	r3, [pc, #532]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba3a:	22a8      	movs	r2, #168	; 0xa8
 800ba3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 800ba3e:	4b84      	ldr	r3, [pc, #528]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba40:	2207      	movs	r2, #7
 800ba42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800ba44:	4b82      	ldr	r3, [pc, #520]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba46:	2202      	movs	r2, #2
 800ba48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ba4a:	4b82      	ldr	r3, [pc, #520]	; (800bc54 <MX_LWIP_Init+0x228>)
 800ba4c:	22ff      	movs	r2, #255	; 0xff
 800ba4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ba50:	4b80      	ldr	r3, [pc, #512]	; (800bc54 <MX_LWIP_Init+0x228>)
 800ba52:	22ff      	movs	r2, #255	; 0xff
 800ba54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ba56:	4b7f      	ldr	r3, [pc, #508]	; (800bc54 <MX_LWIP_Init+0x228>)
 800ba58:	22ff      	movs	r2, #255	; 0xff
 800ba5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ba5c:	4b7d      	ldr	r3, [pc, #500]	; (800bc54 <MX_LWIP_Init+0x228>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800ba62:	4b7d      	ldr	r3, [pc, #500]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800ba68:	4b7b      	ldr	r3, [pc, #492]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ba6e:	4b7a      	ldr	r3, [pc, #488]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800ba74:	4b78      	ldr	r3, [pc, #480]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ba7a:	f000 fd39 	bl	800c4f0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ba7e:	4b74      	ldr	r3, [pc, #464]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	061a      	lsls	r2, r3, #24
 800ba84:	4b72      	ldr	r3, [pc, #456]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba86:	785b      	ldrb	r3, [r3, #1]
 800ba88:	041b      	lsls	r3, r3, #16
 800ba8a:	431a      	orrs	r2, r3
 800ba8c:	4b70      	ldr	r3, [pc, #448]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba8e:	789b      	ldrb	r3, [r3, #2]
 800ba90:	021b      	lsls	r3, r3, #8
 800ba92:	4313      	orrs	r3, r2
 800ba94:	4a6e      	ldr	r2, [pc, #440]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba96:	78d2      	ldrb	r2, [r2, #3]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	061a      	lsls	r2, r3, #24
 800ba9c:	4b6c      	ldr	r3, [pc, #432]	; (800bc50 <MX_LWIP_Init+0x224>)
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	0619      	lsls	r1, r3, #24
 800baa2:	4b6b      	ldr	r3, [pc, #428]	; (800bc50 <MX_LWIP_Init+0x224>)
 800baa4:	785b      	ldrb	r3, [r3, #1]
 800baa6:	041b      	lsls	r3, r3, #16
 800baa8:	4319      	orrs	r1, r3
 800baaa:	4b69      	ldr	r3, [pc, #420]	; (800bc50 <MX_LWIP_Init+0x224>)
 800baac:	789b      	ldrb	r3, [r3, #2]
 800baae:	021b      	lsls	r3, r3, #8
 800bab0:	430b      	orrs	r3, r1
 800bab2:	4967      	ldr	r1, [pc, #412]	; (800bc50 <MX_LWIP_Init+0x224>)
 800bab4:	78c9      	ldrb	r1, [r1, #3]
 800bab6:	430b      	orrs	r3, r1
 800bab8:	021b      	lsls	r3, r3, #8
 800baba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800babe:	431a      	orrs	r2, r3
 800bac0:	4b63      	ldr	r3, [pc, #396]	; (800bc50 <MX_LWIP_Init+0x224>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	0619      	lsls	r1, r3, #24
 800bac6:	4b62      	ldr	r3, [pc, #392]	; (800bc50 <MX_LWIP_Init+0x224>)
 800bac8:	785b      	ldrb	r3, [r3, #1]
 800baca:	041b      	lsls	r3, r3, #16
 800bacc:	4319      	orrs	r1, r3
 800bace:	4b60      	ldr	r3, [pc, #384]	; (800bc50 <MX_LWIP_Init+0x224>)
 800bad0:	789b      	ldrb	r3, [r3, #2]
 800bad2:	021b      	lsls	r3, r3, #8
 800bad4:	430b      	orrs	r3, r1
 800bad6:	495e      	ldr	r1, [pc, #376]	; (800bc50 <MX_LWIP_Init+0x224>)
 800bad8:	78c9      	ldrb	r1, [r1, #3]
 800bada:	430b      	orrs	r3, r1
 800badc:	0a1b      	lsrs	r3, r3, #8
 800bade:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bae2:	431a      	orrs	r2, r3
 800bae4:	4b5a      	ldr	r3, [pc, #360]	; (800bc50 <MX_LWIP_Init+0x224>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	0619      	lsls	r1, r3, #24
 800baea:	4b59      	ldr	r3, [pc, #356]	; (800bc50 <MX_LWIP_Init+0x224>)
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	041b      	lsls	r3, r3, #16
 800baf0:	4319      	orrs	r1, r3
 800baf2:	4b57      	ldr	r3, [pc, #348]	; (800bc50 <MX_LWIP_Init+0x224>)
 800baf4:	789b      	ldrb	r3, [r3, #2]
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	430b      	orrs	r3, r1
 800bafa:	4955      	ldr	r1, [pc, #340]	; (800bc50 <MX_LWIP_Init+0x224>)
 800bafc:	78c9      	ldrb	r1, [r1, #3]
 800bafe:	430b      	orrs	r3, r1
 800bb00:	0e1b      	lsrs	r3, r3, #24
 800bb02:	4313      	orrs	r3, r2
 800bb04:	4a55      	ldr	r2, [pc, #340]	; (800bc5c <MX_LWIP_Init+0x230>)
 800bb06:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bb08:	4b52      	ldr	r3, [pc, #328]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	061a      	lsls	r2, r3, #24
 800bb0e:	4b51      	ldr	r3, [pc, #324]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	041b      	lsls	r3, r3, #16
 800bb14:	431a      	orrs	r2, r3
 800bb16:	4b4f      	ldr	r3, [pc, #316]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb18:	789b      	ldrb	r3, [r3, #2]
 800bb1a:	021b      	lsls	r3, r3, #8
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	4a4d      	ldr	r2, [pc, #308]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb20:	78d2      	ldrb	r2, [r2, #3]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	061a      	lsls	r2, r3, #24
 800bb26:	4b4b      	ldr	r3, [pc, #300]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	0619      	lsls	r1, r3, #24
 800bb2c:	4b49      	ldr	r3, [pc, #292]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb2e:	785b      	ldrb	r3, [r3, #1]
 800bb30:	041b      	lsls	r3, r3, #16
 800bb32:	4319      	orrs	r1, r3
 800bb34:	4b47      	ldr	r3, [pc, #284]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb36:	789b      	ldrb	r3, [r3, #2]
 800bb38:	021b      	lsls	r3, r3, #8
 800bb3a:	430b      	orrs	r3, r1
 800bb3c:	4945      	ldr	r1, [pc, #276]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb3e:	78c9      	ldrb	r1, [r1, #3]
 800bb40:	430b      	orrs	r3, r1
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	4b42      	ldr	r3, [pc, #264]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	0619      	lsls	r1, r3, #24
 800bb50:	4b40      	ldr	r3, [pc, #256]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	041b      	lsls	r3, r3, #16
 800bb56:	4319      	orrs	r1, r3
 800bb58:	4b3e      	ldr	r3, [pc, #248]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb5a:	789b      	ldrb	r3, [r3, #2]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	430b      	orrs	r3, r1
 800bb60:	493c      	ldr	r1, [pc, #240]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb62:	78c9      	ldrb	r1, [r1, #3]
 800bb64:	430b      	orrs	r3, r1
 800bb66:	0a1b      	lsrs	r3, r3, #8
 800bb68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	4b39      	ldr	r3, [pc, #228]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	0619      	lsls	r1, r3, #24
 800bb74:	4b37      	ldr	r3, [pc, #220]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb76:	785b      	ldrb	r3, [r3, #1]
 800bb78:	041b      	lsls	r3, r3, #16
 800bb7a:	4319      	orrs	r1, r3
 800bb7c:	4b35      	ldr	r3, [pc, #212]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb7e:	789b      	ldrb	r3, [r3, #2]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	430b      	orrs	r3, r1
 800bb84:	4933      	ldr	r1, [pc, #204]	; (800bc54 <MX_LWIP_Init+0x228>)
 800bb86:	78c9      	ldrb	r1, [r1, #3]
 800bb88:	430b      	orrs	r3, r1
 800bb8a:	0e1b      	lsrs	r3, r3, #24
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	4a34      	ldr	r2, [pc, #208]	; (800bc60 <MX_LWIP_Init+0x234>)
 800bb90:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bb92:	4b31      	ldr	r3, [pc, #196]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	061a      	lsls	r2, r3, #24
 800bb98:	4b2f      	ldr	r3, [pc, #188]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bb9a:	785b      	ldrb	r3, [r3, #1]
 800bb9c:	041b      	lsls	r3, r3, #16
 800bb9e:	431a      	orrs	r2, r3
 800bba0:	4b2d      	ldr	r3, [pc, #180]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bba2:	789b      	ldrb	r3, [r3, #2]
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	4313      	orrs	r3, r2
 800bba8:	4a2b      	ldr	r2, [pc, #172]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbaa:	78d2      	ldrb	r2, [r2, #3]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	061a      	lsls	r2, r3, #24
 800bbb0:	4b29      	ldr	r3, [pc, #164]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	0619      	lsls	r1, r3, #24
 800bbb6:	4b28      	ldr	r3, [pc, #160]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbb8:	785b      	ldrb	r3, [r3, #1]
 800bbba:	041b      	lsls	r3, r3, #16
 800bbbc:	4319      	orrs	r1, r3
 800bbbe:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbc0:	789b      	ldrb	r3, [r3, #2]
 800bbc2:	021b      	lsls	r3, r3, #8
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	4924      	ldr	r1, [pc, #144]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbc8:	78c9      	ldrb	r1, [r1, #3]
 800bbca:	430b      	orrs	r3, r1
 800bbcc:	021b      	lsls	r3, r3, #8
 800bbce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	4b20      	ldr	r3, [pc, #128]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	0619      	lsls	r1, r3, #24
 800bbda:	4b1f      	ldr	r3, [pc, #124]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	041b      	lsls	r3, r3, #16
 800bbe0:	4319      	orrs	r1, r3
 800bbe2:	4b1d      	ldr	r3, [pc, #116]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbe4:	789b      	ldrb	r3, [r3, #2]
 800bbe6:	021b      	lsls	r3, r3, #8
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	491b      	ldr	r1, [pc, #108]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbec:	78c9      	ldrb	r1, [r1, #3]
 800bbee:	430b      	orrs	r3, r1
 800bbf0:	0a1b      	lsrs	r3, r3, #8
 800bbf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bbf6:	431a      	orrs	r2, r3
 800bbf8:	4b17      	ldr	r3, [pc, #92]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	0619      	lsls	r1, r3, #24
 800bbfe:	4b16      	ldr	r3, [pc, #88]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	041b      	lsls	r3, r3, #16
 800bc04:	4319      	orrs	r1, r3
 800bc06:	4b14      	ldr	r3, [pc, #80]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bc08:	789b      	ldrb	r3, [r3, #2]
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	4912      	ldr	r1, [pc, #72]	; (800bc58 <MX_LWIP_Init+0x22c>)
 800bc10:	78c9      	ldrb	r1, [r1, #3]
 800bc12:	430b      	orrs	r3, r1
 800bc14:	0e1b      	lsrs	r3, r3, #24
 800bc16:	4313      	orrs	r3, r2
 800bc18:	4a12      	ldr	r2, [pc, #72]	; (800bc64 <MX_LWIP_Init+0x238>)
 800bc1a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bc1c:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <MX_LWIP_Init+0x23c>)
 800bc1e:	9302      	str	r3, [sp, #8]
 800bc20:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <MX_LWIP_Init+0x240>)
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	2300      	movs	r3, #0
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	4b0e      	ldr	r3, [pc, #56]	; (800bc64 <MX_LWIP_Init+0x238>)
 800bc2a:	4a0d      	ldr	r2, [pc, #52]	; (800bc60 <MX_LWIP_Init+0x234>)
 800bc2c:	490b      	ldr	r1, [pc, #44]	; (800bc5c <MX_LWIP_Init+0x230>)
 800bc2e:	4810      	ldr	r0, [pc, #64]	; (800bc70 <MX_LWIP_Init+0x244>)
 800bc30:	f001 f94a 	bl	800cec8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bc34:	480e      	ldr	r0, [pc, #56]	; (800bc70 <MX_LWIP_Init+0x244>)
 800bc36:	f001 faf9 	bl	800d22c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bc3a:	480d      	ldr	r0, [pc, #52]	; (800bc70 <MX_LWIP_Init+0x244>)
 800bc3c:	f001 fb06 	bl	800d24c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bc40:	490c      	ldr	r1, [pc, #48]	; (800bc74 <MX_LWIP_Init+0x248>)
 800bc42:	480b      	ldr	r0, [pc, #44]	; (800bc70 <MX_LWIP_Init+0x244>)
 800bc44:	f001 fc04 	bl	800d450 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bc48:	bf00      	nop
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000984 	.word	0x20000984
 800bc54:	20000988 	.word	0x20000988
 800bc58:	2000098c 	.word	0x2000098c
 800bc5c:	20000978 	.word	0x20000978
 800bc60:	2000097c 	.word	0x2000097c
 800bc64:	20000980 	.word	0x20000980
 800bc68:	0801630d 	.word	0x0801630d
 800bc6c:	0800bfdd 	.word	0x0800bfdd
 800bc70:	20000944 	.word	0x20000944
 800bc74:	0800bcc9 	.word	0x0800bcc9

0800bc78 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800bc80:	f7f6 fa5c 	bl	800213c <HAL_GetTick>
 800bc84:	4602      	mov	r2, r0
 800bc86:	4b08      	ldr	r3, [pc, #32]	; (800bca8 <Ethernet_Link_Periodic_Handle+0x30>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	2b63      	cmp	r3, #99	; 0x63
 800bc8e:	d907      	bls.n	800bca0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800bc90:	f7f6 fa54 	bl	800213c <HAL_GetTick>
 800bc94:	4603      	mov	r3, r0
 800bc96:	4a04      	ldr	r2, [pc, #16]	; (800bca8 <Ethernet_Link_Periodic_Handle+0x30>)
 800bc98:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fafc 	bl	800c298 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20000940 	.word	0x20000940

0800bcac <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800bcb0:	4804      	ldr	r0, [pc, #16]	; (800bcc4 <MX_LWIP_Process+0x18>)
 800bcb2:	f000 f973 	bl	800bf9c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800bcb6:	f007 fc4d 	bl	8013554 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800bcba:	4802      	ldr	r0, [pc, #8]	; (800bcc4 <MX_LWIP_Process+0x18>)
 800bcbc:	f7ff ffdc 	bl	800bc78 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800bcc0:	bf00      	nop
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	20000944 	.word	0x20000944

0800bcc8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <SCB_InvalidateDCache_by_Addr>:
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bcee:	2320      	movs	r3, #32
 800bcf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bcf2:	f3bf 8f4f 	dsb	sy
}
 800bcf6:	bf00      	nop
    while (op_size > 0) {
 800bcf8:	e00b      	b.n	800bd12 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800bcfa:	4a0d      	ldr	r2, [pc, #52]	; (800bd30 <SCB_InvalidateDCache_by_Addr+0x54>)
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	4413      	add	r3, r2
 800bd08:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dcf0      	bgt.n	800bcfa <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800bd18:	f3bf 8f4f 	dsb	sy
}
 800bd1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bd1e:	f3bf 8f6f 	isb	sy
}
 800bd22:	bf00      	nop
}
 800bd24:	bf00      	nop
 800bd26:	371c      	adds	r7, #28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	e000ed00 	.word	0xe000ed00

0800bd34 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bd40:	4b40      	ldr	r3, [pc, #256]	; (800be44 <low_level_init+0x110>)
 800bd42:	4a41      	ldr	r2, [pc, #260]	; (800be48 <low_level_init+0x114>)
 800bd44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bd46:	2300      	movs	r3, #0
 800bd48:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bd4a:	2380      	movs	r3, #128	; 0x80
 800bd4c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bd4e:	23e1      	movs	r3, #225	; 0xe1
 800bd50:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bd52:	2300      	movs	r3, #0
 800bd54:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bd56:	2300      	movs	r3, #0
 800bd58:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bd5e:	4a39      	ldr	r2, [pc, #228]	; (800be44 <low_level_init+0x110>)
 800bd60:	f107 0308 	add.w	r3, r7, #8
 800bd64:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bd66:	4b37      	ldr	r3, [pc, #220]	; (800be44 <low_level_init+0x110>)
 800bd68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bd6c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bd6e:	4b35      	ldr	r3, [pc, #212]	; (800be44 <low_level_init+0x110>)
 800bd70:	4a36      	ldr	r2, [pc, #216]	; (800be4c <low_level_init+0x118>)
 800bd72:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bd74:	4b33      	ldr	r3, [pc, #204]	; (800be44 <low_level_init+0x110>)
 800bd76:	4a36      	ldr	r2, [pc, #216]	; (800be50 <low_level_init+0x11c>)
 800bd78:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bd7a:	4b32      	ldr	r3, [pc, #200]	; (800be44 <low_level_init+0x110>)
 800bd7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bd80:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bd82:	4830      	ldr	r0, [pc, #192]	; (800be44 <low_level_init+0x110>)
 800bd84:	f7f7 ffde 	bl	8003d44 <HAL_ETH_Init>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bd8c:	2238      	movs	r2, #56	; 0x38
 800bd8e:	2100      	movs	r1, #0
 800bd90:	4830      	ldr	r0, [pc, #192]	; (800be54 <low_level_init+0x120>)
 800bd92:	f00b fe45 	bl	8017a20 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bd96:	4b2f      	ldr	r3, [pc, #188]	; (800be54 <low_level_init+0x120>)
 800bd98:	2221      	movs	r2, #33	; 0x21
 800bd9a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bd9c:	4b2d      	ldr	r3, [pc, #180]	; (800be54 <low_level_init+0x120>)
 800bd9e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800bda2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bda4:	4b2b      	ldr	r3, [pc, #172]	; (800be54 <low_level_init+0x120>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bdaa:	482b      	ldr	r0, [pc, #172]	; (800be58 <low_level_init+0x124>)
 800bdac:	f000 ff54 	bl	800cc58 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2206      	movs	r2, #6
 800bdb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bdb8:	4b22      	ldr	r3, [pc, #136]	; (800be44 <low_level_init+0x110>)
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	781a      	ldrb	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bdc4:	4b1f      	ldr	r3, [pc, #124]	; (800be44 <low_level_init+0x110>)
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	785a      	ldrb	r2, [r3, #1]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bdd0:	4b1c      	ldr	r3, [pc, #112]	; (800be44 <low_level_init+0x110>)
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	789a      	ldrb	r2, [r3, #2]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bddc:	4b19      	ldr	r3, [pc, #100]	; (800be44 <low_level_init+0x110>)
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	78da      	ldrb	r2, [r3, #3]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bde8:	4b16      	ldr	r3, [pc, #88]	; (800be44 <low_level_init+0x110>)
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	791a      	ldrb	r2, [r3, #4]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bdf4:	4b13      	ldr	r3, [pc, #76]	; (800be44 <low_level_init+0x110>)
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	795a      	ldrb	r2, [r3, #5]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800be06:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be0e:	f043 030a 	orr.w	r3, r3, #10
 800be12:	b2da      	uxtb	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800be1a:	4910      	ldr	r1, [pc, #64]	; (800be5c <low_level_init+0x128>)
 800be1c:	4810      	ldr	r0, [pc, #64]	; (800be60 <low_level_init+0x12c>)
 800be1e:	f7f5 ffda 	bl	8001dd6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800be22:	480f      	ldr	r0, [pc, #60]	; (800be60 <low_level_init+0x12c>)
 800be24:	f7f6 f809 	bl	8001e3a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d103      	bne.n	800be36 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fa32 	bl	800c298 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800be34:	e001      	b.n	800be3a <low_level_init+0x106>
    Error_Handler();
 800be36:	f7f5 f835 	bl	8000ea4 <Error_Handler>
}
 800be3a:	bf00      	nop
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	2000531c 	.word	0x2000531c
 800be48:	40028000 	.word	0x40028000
 800be4c:	20000128 	.word	0x20000128
 800be50:	20000088 	.word	0x20000088
 800be54:	200053cc 	.word	0x200053cc
 800be58:	0801b618 	.word	0x0801b618
 800be5c:	2000000c 	.word	0x2000000c
 800be60:	20005404 	.word	0x20005404

0800be64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b092      	sub	sp, #72	; 0x48
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800be72:	2300      	movs	r3, #0
 800be74:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800be7c:	f107 030c 	add.w	r3, r7, #12
 800be80:	2230      	movs	r2, #48	; 0x30
 800be82:	2100      	movs	r1, #0
 800be84:	4618      	mov	r0, r3
 800be86:	f00b fdcb 	bl	8017a20 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800be8a:	f107 030c 	add.w	r3, r7, #12
 800be8e:	2230      	movs	r2, #48	; 0x30
 800be90:	2100      	movs	r1, #0
 800be92:	4618      	mov	r0, r3
 800be94:	f00b fdc4 	bl	8017a20 <memset>

  for(q = p; q != NULL; q = q->next)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	643b      	str	r3, [r7, #64]	; 0x40
 800be9c:	e045      	b.n	800bf2a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800be9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d902      	bls.n	800beaa <low_level_output+0x46>
      return ERR_IF;
 800bea4:	f06f 030b 	mvn.w	r3, #11
 800bea8:	e055      	b.n	800bf56 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800beaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beac:	6859      	ldr	r1, [r3, #4]
 800beae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beb0:	4613      	mov	r3, r2
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	4413      	add	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	3348      	adds	r3, #72	; 0x48
 800beba:	443b      	add	r3, r7
 800bebc:	3b3c      	subs	r3, #60	; 0x3c
 800bebe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec2:	895b      	ldrh	r3, [r3, #10]
 800bec4:	4619      	mov	r1, r3
 800bec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bec8:	4613      	mov	r3, r2
 800beca:	005b      	lsls	r3, r3, #1
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	3348      	adds	r3, #72	; 0x48
 800bed2:	443b      	add	r3, r7
 800bed4:	3b38      	subs	r3, #56	; 0x38
 800bed6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d011      	beq.n	800bf02 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee0:	1e5a      	subs	r2, r3, #1
 800bee2:	f107 000c 	add.w	r0, r7, #12
 800bee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bee8:	460b      	mov	r3, r1
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	440b      	add	r3, r1
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	18c1      	adds	r1, r0, r3
 800bef2:	4613      	mov	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	3348      	adds	r3, #72	; 0x48
 800befc:	443b      	add	r3, r7
 800befe:	3b34      	subs	r3, #52	; 0x34
 800bf00:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bf02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d109      	bne.n	800bf1e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bf0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	3348      	adds	r3, #72	; 0x48
 800bf16:	443b      	add	r3, r7
 800bf18:	3b34      	subs	r3, #52	; 0x34
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bf1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf20:	3301      	adds	r3, #1
 800bf22:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800bf24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	643b      	str	r3, [r7, #64]	; 0x40
 800bf2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1b6      	bne.n	800be9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	891b      	ldrh	r3, [r3, #8]
 800bf34:	461a      	mov	r2, r3
 800bf36:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <low_level_output+0xfc>)
 800bf38:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bf3a:	4a09      	ldr	r2, [pc, #36]	; (800bf60 <low_level_output+0xfc>)
 800bf3c:	f107 030c 	add.w	r3, r7, #12
 800bf40:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bf42:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <low_level_output+0xfc>)
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800bf48:	2214      	movs	r2, #20
 800bf4a:	4905      	ldr	r1, [pc, #20]	; (800bf60 <low_level_output+0xfc>)
 800bf4c:	4805      	ldr	r0, [pc, #20]	; (800bf64 <low_level_output+0x100>)
 800bf4e:	f7f8 f82d 	bl	8003fac <HAL_ETH_Transmit>

  return errval;
 800bf52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3748      	adds	r7, #72	; 0x48
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	200053cc 	.word	0x200053cc
 800bf64:	2000531c 	.word	0x2000531c

0800bf68 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bf74:	4b07      	ldr	r3, [pc, #28]	; (800bf94 <low_level_input+0x2c>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d105      	bne.n	800bf88 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bf7c:	f107 030c 	add.w	r3, r7, #12
 800bf80:	4619      	mov	r1, r3
 800bf82:	4805      	ldr	r0, [pc, #20]	; (800bf98 <low_level_input+0x30>)
 800bf84:	f7f8 f8a6 	bl	80040d4 <HAL_ETH_ReadData>
  }

  return p;
 800bf88:	68fb      	ldr	r3, [r7, #12]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	20005318 	.word	0x20005318
 800bf98:	2000531c 	.word	0x2000531c

0800bf9c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff ffdd 	bl	800bf68 <low_level_input>
 800bfae:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00a      	beq.n	800bfcc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	6879      	ldr	r1, [r7, #4]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	4798      	blx	r3
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f001 fdc2 	bl	800db50 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1ea      	bne.n	800bfa8 <ethernetif_input+0xc>
}
 800bfd2:	bf00      	nop
 800bfd4:	bf00      	nop
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <ethernetif_init+0x1c>
 800bfea:	4b0e      	ldr	r3, [pc, #56]	; (800c024 <ethernetif_init+0x48>)
 800bfec:	f240 127b 	movw	r2, #379	; 0x17b
 800bff0:	490d      	ldr	r1, [pc, #52]	; (800c028 <ethernetif_init+0x4c>)
 800bff2:	480e      	ldr	r0, [pc, #56]	; (800c02c <ethernetif_init+0x50>)
 800bff4:	f00b fb50 	bl	8017698 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2273      	movs	r2, #115	; 0x73
 800bffc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2274      	movs	r2, #116	; 0x74
 800c004:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a09      	ldr	r2, [pc, #36]	; (800c030 <ethernetif_init+0x54>)
 800c00c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a08      	ldr	r2, [pc, #32]	; (800c034 <ethernetif_init+0x58>)
 800c012:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff fe8d 	bl	800bd34 <low_level_init>

  return ERR_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	0801898c 	.word	0x0801898c
 800c028:	080189a8 	.word	0x080189a8
 800c02c:	080189b8 	.word	0x080189b8
 800c030:	080147c5 	.word	0x080147c5
 800c034:	0800be65 	.word	0x0800be65

0800c038 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c044:	68f9      	ldr	r1, [r7, #12]
 800c046:	4807      	ldr	r0, [pc, #28]	; (800c064 <pbuf_free_custom+0x2c>)
 800c048:	f000 fee8 	bl	800ce1c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <pbuf_free_custom+0x30>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d102      	bne.n	800c05a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c054:	4b04      	ldr	r3, [pc, #16]	; (800c068 <pbuf_free_custom+0x30>)
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
  }
}
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	0801b618 	.word	0x0801b618
 800c068:	20005318 	.word	0x20005318

0800c06c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c070:	f7f6 f864 	bl	800213c <HAL_GetTick>
 800c074:	4603      	mov	r3, r0
}
 800c076:	4618      	mov	r0, r3
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08e      	sub	sp, #56	; 0x38
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	605a      	str	r2, [r3, #4]
 800c08e:	609a      	str	r2, [r3, #8]
 800c090:	60da      	str	r2, [r3, #12]
 800c092:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a52      	ldr	r2, [pc, #328]	; (800c1e4 <HAL_ETH_MspInit+0x168>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	f040 809e 	bne.w	800c1dc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c0a0:	4b51      	ldr	r3, [pc, #324]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a4:	4a50      	ldr	r2, [pc, #320]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c0aa:	6313      	str	r3, [r2, #48]	; 0x30
 800c0ac:	4b4e      	ldr	r3, [pc, #312]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0b4:	623b      	str	r3, [r7, #32]
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	4b4b      	ldr	r3, [pc, #300]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	4a4a      	ldr	r2, [pc, #296]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0c2:	6313      	str	r3, [r2, #48]	; 0x30
 800c0c4:	4b48      	ldr	r3, [pc, #288]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0cc:	61fb      	str	r3, [r7, #28]
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	4b45      	ldr	r3, [pc, #276]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d4:	4a44      	ldr	r2, [pc, #272]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0da:	6313      	str	r3, [r2, #48]	; 0x30
 800c0dc:	4b42      	ldr	r3, [pc, #264]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0e4:	61bb      	str	r3, [r7, #24]
 800c0e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c0e8:	4b3f      	ldr	r3, [pc, #252]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ec:	4a3e      	ldr	r2, [pc, #248]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0ee:	f043 0304 	orr.w	r3, r3, #4
 800c0f2:	6313      	str	r3, [r2, #48]	; 0x30
 800c0f4:	4b3c      	ldr	r3, [pc, #240]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f8:	f003 0304 	and.w	r3, r3, #4
 800c0fc:	617b      	str	r3, [r7, #20]
 800c0fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c100:	4b39      	ldr	r3, [pc, #228]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c104:	4a38      	ldr	r2, [pc, #224]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c106:	f043 0301 	orr.w	r3, r3, #1
 800c10a:	6313      	str	r3, [r2, #48]	; 0x30
 800c10c:	4b36      	ldr	r3, [pc, #216]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	613b      	str	r3, [r7, #16]
 800c116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c118:	4b33      	ldr	r3, [pc, #204]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11c:	4a32      	ldr	r2, [pc, #200]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c11e:	f043 0302 	orr.w	r3, r3, #2
 800c122:	6313      	str	r3, [r2, #48]	; 0x30
 800c124:	4b30      	ldr	r3, [pc, #192]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c130:	4b2d      	ldr	r3, [pc, #180]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c134:	4a2c      	ldr	r2, [pc, #176]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c13a:	6313      	str	r3, [r2, #48]	; 0x30
 800c13c:	4b2a      	ldr	r3, [pc, #168]	; (800c1e8 <HAL_ETH_MspInit+0x16c>)
 800c13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c144:	60bb      	str	r3, [r7, #8]
 800c146:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c148:	2332      	movs	r3, #50	; 0x32
 800c14a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c14c:	2302      	movs	r3, #2
 800c14e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c150:	2300      	movs	r3, #0
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c154:	2303      	movs	r3, #3
 800c156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c158:	230b      	movs	r3, #11
 800c15a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c15c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c160:	4619      	mov	r1, r3
 800c162:	4822      	ldr	r0, [pc, #136]	; (800c1ec <HAL_ETH_MspInit+0x170>)
 800c164:	f7f8 ffd4 	bl	8005110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c168:	2386      	movs	r3, #134	; 0x86
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c16c:	2302      	movs	r3, #2
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c170:	2300      	movs	r3, #0
 800c172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c174:	2303      	movs	r3, #3
 800c176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c178:	230b      	movs	r3, #11
 800c17a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c17c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c180:	4619      	mov	r1, r3
 800c182:	481b      	ldr	r0, [pc, #108]	; (800c1f0 <HAL_ETH_MspInit+0x174>)
 800c184:	f7f8 ffc4 	bl	8005110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c18c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c18e:	2302      	movs	r3, #2
 800c190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c192:	2300      	movs	r3, #0
 800c194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c196:	2303      	movs	r3, #3
 800c198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c19a:	230b      	movs	r3, #11
 800c19c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c19e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	4813      	ldr	r0, [pc, #76]	; (800c1f4 <HAL_ETH_MspInit+0x178>)
 800c1a6:	f7f8 ffb3 	bl	8005110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c1aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c1ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c1bc:	230b      	movs	r3, #11
 800c1be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c1c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	480c      	ldr	r0, [pc, #48]	; (800c1f8 <HAL_ETH_MspInit+0x17c>)
 800c1c8:	f7f8 ffa2 	bl	8005110 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	203d      	movs	r0, #61	; 0x3d
 800c1d2:	f7f6 fe14 	bl	8002dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c1d6:	203d      	movs	r0, #61	; 0x3d
 800c1d8:	f7f6 fe2d 	bl	8002e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c1dc:	bf00      	nop
 800c1de:	3738      	adds	r7, #56	; 0x38
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	40028000 	.word	0x40028000
 800c1e8:	40023800 	.word	0x40023800
 800c1ec:	40020800 	.word	0x40020800
 800c1f0:	40020000 	.word	0x40020000
 800c1f4:	40020400 	.word	0x40020400
 800c1f8:	40021800 	.word	0x40021800

0800c1fc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c200:	4802      	ldr	r0, [pc, #8]	; (800c20c <ETH_PHY_IO_Init+0x10>)
 800c202:	f7f8 fb2b 	bl	800485c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	2000531c 	.word	0x2000531c

0800c210 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c210:	b480      	push	{r7}
 800c212:	af00      	add	r7, sp, #0
  return 0;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	68f9      	ldr	r1, [r7, #12]
 800c232:	4807      	ldr	r0, [pc, #28]	; (800c250 <ETH_PHY_IO_ReadReg+0x30>)
 800c234:	f7f8 f97a 	bl	800452c <HAL_ETH_ReadPHYRegister>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d002      	beq.n	800c244 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c23e:	f04f 33ff 	mov.w	r3, #4294967295
 800c242:	e000      	b.n	800c246 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	2000531c 	.word	0x2000531c

0800c254 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	68f9      	ldr	r1, [r7, #12]
 800c266:	4807      	ldr	r0, [pc, #28]	; (800c284 <ETH_PHY_IO_WriteReg+0x30>)
 800c268:	f7f8 f9ab 	bl	80045c2 <HAL_ETH_WritePHYRegister>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c272:	f04f 33ff 	mov.w	r3, #4294967295
 800c276:	e000      	b.n	800c27a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	2000531c 	.word	0x2000531c

0800c288 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c28c:	f7f5 ff56 	bl	800213c <HAL_GetTick>
 800c290:	4603      	mov	r3, r0
}
 800c292:	4618      	mov	r0, r3
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b0a0      	sub	sp, #128	; 0x80
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c2a0:	f107 030c 	add.w	r3, r7, #12
 800c2a4:	2264      	movs	r2, #100	; 0x64
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f00b fbb9 	bl	8017a20 <memset>
  int32_t PHYLinkState = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c2be:	483a      	ldr	r0, [pc, #232]	; (800c3a8 <ethernet_link_check_state+0x110>)
 800c2c0:	f7f5 fe63 	bl	8001f8a <LAN8742_GetLinkState>
 800c2c4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2cc:	089b      	lsrs	r3, r3, #2
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00c      	beq.n	800c2f2 <ethernet_link_check_state+0x5a>
 800c2d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	dc09      	bgt.n	800c2f2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800c2de:	4833      	ldr	r0, [pc, #204]	; (800c3ac <ethernet_link_check_state+0x114>)
 800c2e0:	f7f7 fe0b 	bl	8003efa <HAL_ETH_Stop>
    netif_set_down(netif);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f001 f81d 	bl	800d324 <netif_set_down>
    netif_set_link_down(netif);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f001 f880 	bl	800d3f0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c2f0:	e055      	b.n	800c39e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2f8:	f003 0304 	and.w	r3, r3, #4
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d14e      	bne.n	800c39e <ethernet_link_check_state+0x106>
 800c300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c302:	2b01      	cmp	r3, #1
 800c304:	dd4b      	ble.n	800c39e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c308:	3b02      	subs	r3, #2
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d82a      	bhi.n	800c364 <ethernet_link_check_state+0xcc>
 800c30e:	a201      	add	r2, pc, #4	; (adr r2, 800c314 <ethernet_link_check_state+0x7c>)
 800c310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c314:	0800c325 	.word	0x0800c325
 800c318:	0800c337 	.word	0x0800c337
 800c31c:	0800c347 	.word	0x0800c347
 800c320:	0800c357 	.word	0x0800c357
      duplex = ETH_FULLDUPLEX_MODE;
 800c324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c328:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c32a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c32e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c330:	2301      	movs	r3, #1
 800c332:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c334:	e017      	b.n	800c366 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c336:	2300      	movs	r3, #0
 800c338:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c33a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c33e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c340:	2301      	movs	r3, #1
 800c342:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c344:	e00f      	b.n	800c366 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c34a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c34c:	2300      	movs	r3, #0
 800c34e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c350:	2301      	movs	r3, #1
 800c352:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c354:	e007      	b.n	800c366 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c356:	2300      	movs	r3, #0
 800c358:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c35a:	2300      	movs	r3, #0
 800c35c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c35e:	2301      	movs	r3, #1
 800c360:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c362:	e000      	b.n	800c366 <ethernet_link_check_state+0xce>
      break;
 800c364:	bf00      	nop
    if(linkchanged)
 800c366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d018      	beq.n	800c39e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c36c:	f107 030c 	add.w	r3, r7, #12
 800c370:	4619      	mov	r1, r3
 800c372:	480e      	ldr	r0, [pc, #56]	; (800c3ac <ethernet_link_check_state+0x114>)
 800c374:	f7f8 f96e 	bl	8004654 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c37a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800c37c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c37e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c380:	f107 030c 	add.w	r3, r7, #12
 800c384:	4619      	mov	r1, r3
 800c386:	4809      	ldr	r0, [pc, #36]	; (800c3ac <ethernet_link_check_state+0x114>)
 800c388:	f7f8 fa4e 	bl	8004828 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c38c:	4807      	ldr	r0, [pc, #28]	; (800c3ac <ethernet_link_check_state+0x114>)
 800c38e:	f7f7 fd55 	bl	8003e3c <HAL_ETH_Start>
      netif_set_up(netif);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 ff5a 	bl	800d24c <netif_set_up>
      netif_set_link_up(netif);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fff5 	bl	800d388 <netif_set_link_up>
}
 800c39e:	bf00      	nop
 800c3a0:	3780      	adds	r7, #128	; 0x80
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20005404 	.word	0x20005404
 800c3ac:	2000531c 	.word	0x2000531c

0800c3b0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c3b8:	4812      	ldr	r0, [pc, #72]	; (800c404 <HAL_ETH_RxAllocateCallback+0x54>)
 800c3ba:	f000 fcc1 	bl	800cd40 <memp_malloc_pool>
 800c3be:	60f8      	str	r0, [r7, #12]
  if (p)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d014      	beq.n	800c3f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f103 0220 	add.w	r2, r3, #32
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4a0d      	ldr	r2, [pc, #52]	; (800c408 <HAL_ETH_RxAllocateCallback+0x58>)
 800c3d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c3de:	9201      	str	r2, [sp, #4]
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2241      	movs	r2, #65	; 0x41
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	f001 f9f7 	bl	800d7dc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c3ee:	e005      	b.n	800c3fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c3f0:	4b06      	ldr	r3, [pc, #24]	; (800c40c <HAL_ETH_RxAllocateCallback+0x5c>)
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]
}
 800c3fc:	bf00      	nop
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	0801b618 	.word	0x0801b618
 800c408:	0800c039 	.word	0x0800c039
 800c40c:	20005318 	.word	0x20005318

0800c410 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c426:	2300      	movs	r3, #0
 800c428:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3b20      	subs	r3, #32
 800c42e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	2200      	movs	r2, #0
 800c43a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	887a      	ldrh	r2, [r7, #2]
 800c440:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d103      	bne.n	800c452 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	601a      	str	r2, [r3, #0]
 800c450:	e003      	b.n	800c45a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69fa      	ldr	r2, [r7, #28]
 800c458:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	69fa      	ldr	r2, [r7, #28]
 800c45e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	61fb      	str	r3, [r7, #28]
 800c466:	e009      	b.n	800c47c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	891a      	ldrh	r2, [r3, #8]
 800c46c:	887b      	ldrh	r3, [r7, #2]
 800c46e:	4413      	add	r3, r2
 800c470:	b29a      	uxth	r2, r3
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	61fb      	str	r3, [r7, #28]
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f2      	bne.n	800c468 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c482:	887b      	ldrh	r3, [r7, #2]
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff fc28 	bl	800bcdc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c48c:	bf00      	nop
 800c48e:	3720      	adds	r7, #32
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c49e:	88fb      	ldrh	r3, [r7, #6]
 800c4a0:	021b      	lsls	r3, r3, #8
 800c4a2:	b21a      	sxth	r2, r3
 800c4a4:	88fb      	ldrh	r3, [r7, #6]
 800c4a6:	0a1b      	lsrs	r3, r3, #8
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	b21b      	sxth	r3, r3
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	b21b      	sxth	r3, r3
 800c4b0:	b29b      	uxth	r3, r3
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	061a      	lsls	r2, r3, #24
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	021b      	lsls	r3, r3, #8
 800c4ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4d2:	431a      	orrs	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	0a1b      	lsrs	r3, r3, #8
 800c4d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	0e1b      	lsrs	r3, r3, #24
 800c4e2:	4313      	orrs	r3, r2
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c4fa:	f000 f8d5 	bl	800c6a8 <mem_init>
  memp_init();
 800c4fe:	f000 fbdb 	bl	800ccb8 <memp_init>
  pbuf_init();
  netif_init();
 800c502:	f000 fcd9 	bl	800ceb8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c506:	f007 f867 	bl	80135d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c50a:	f001 fdbf 	bl	800e08c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c50e:	f006 ffd9 	bl	80134c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
	...

0800c51c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c526:	4b05      	ldr	r3, [pc, #20]	; (800c53c <ptr_to_mem+0x20>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	88fb      	ldrh	r3, [r7, #6]
 800c52c:	4413      	add	r3, r2
}
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	20005a90 	.word	0x20005a90

0800c540 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c548:	4b05      	ldr	r3, [pc, #20]	; (800c560 <mem_to_ptr+0x20>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	b29b      	uxth	r3, r3
}
 800c552:	4618      	mov	r0, r3
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	20005a90 	.word	0x20005a90

0800c564 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c564:	b590      	push	{r4, r7, lr}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c56c:	4b45      	ldr	r3, [pc, #276]	; (800c684 <plug_holes+0x120>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	429a      	cmp	r2, r3
 800c574:	d206      	bcs.n	800c584 <plug_holes+0x20>
 800c576:	4b44      	ldr	r3, [pc, #272]	; (800c688 <plug_holes+0x124>)
 800c578:	f240 12df 	movw	r2, #479	; 0x1df
 800c57c:	4943      	ldr	r1, [pc, #268]	; (800c68c <plug_holes+0x128>)
 800c57e:	4844      	ldr	r0, [pc, #272]	; (800c690 <plug_holes+0x12c>)
 800c580:	f00b f88a 	bl	8017698 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c584:	4b43      	ldr	r3, [pc, #268]	; (800c694 <plug_holes+0x130>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d306      	bcc.n	800c59c <plug_holes+0x38>
 800c58e:	4b3e      	ldr	r3, [pc, #248]	; (800c688 <plug_holes+0x124>)
 800c590:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c594:	4940      	ldr	r1, [pc, #256]	; (800c698 <plug_holes+0x134>)
 800c596:	483e      	ldr	r0, [pc, #248]	; (800c690 <plug_holes+0x12c>)
 800c598:	f00b f87e 	bl	8017698 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	791b      	ldrb	r3, [r3, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d006      	beq.n	800c5b2 <plug_holes+0x4e>
 800c5a4:	4b38      	ldr	r3, [pc, #224]	; (800c688 <plug_holes+0x124>)
 800c5a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c5aa:	493c      	ldr	r1, [pc, #240]	; (800c69c <plug_holes+0x138>)
 800c5ac:	4838      	ldr	r0, [pc, #224]	; (800c690 <plug_holes+0x12c>)
 800c5ae:	f00b f873 	bl	8017698 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	881b      	ldrh	r3, [r3, #0]
 800c5b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5ba:	d906      	bls.n	800c5ca <plug_holes+0x66>
 800c5bc:	4b32      	ldr	r3, [pc, #200]	; (800c688 <plug_holes+0x124>)
 800c5be:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c5c2:	4937      	ldr	r1, [pc, #220]	; (800c6a0 <plug_holes+0x13c>)
 800c5c4:	4832      	ldr	r0, [pc, #200]	; (800c690 <plug_holes+0x12c>)
 800c5c6:	f00b f867 	bl	8017698 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff ffa4 	bl	800c51c <ptr_to_mem>
 800c5d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d024      	beq.n	800c628 <plug_holes+0xc4>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	791b      	ldrb	r3, [r3, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d120      	bne.n	800c628 <plug_holes+0xc4>
 800c5e6:	4b2b      	ldr	r3, [pc, #172]	; (800c694 <plug_holes+0x130>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d01b      	beq.n	800c628 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c5f0:	4b2c      	ldr	r3, [pc, #176]	; (800c6a4 <plug_holes+0x140>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d102      	bne.n	800c600 <plug_holes+0x9c>
      lfree = mem;
 800c5fa:	4a2a      	ldr	r2, [pc, #168]	; (800c6a4 <plug_holes+0x140>)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	881a      	ldrh	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c610:	d00a      	beq.n	800c628 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ff80 	bl	800c51c <ptr_to_mem>
 800c61c:	4604      	mov	r4, r0
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff ff8e 	bl	800c540 <mem_to_ptr>
 800c624:	4603      	mov	r3, r0
 800c626:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	885b      	ldrh	r3, [r3, #2]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7ff ff75 	bl	800c51c <ptr_to_mem>
 800c632:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d01f      	beq.n	800c67c <plug_holes+0x118>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	791b      	ldrb	r3, [r3, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d11b      	bne.n	800c67c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c644:	4b17      	ldr	r3, [pc, #92]	; (800c6a4 <plug_holes+0x140>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d102      	bne.n	800c654 <plug_holes+0xf0>
      lfree = pmem;
 800c64e:	4a15      	ldr	r2, [pc, #84]	; (800c6a4 <plug_holes+0x140>)
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	881a      	ldrh	r2, [r3, #0]
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	881b      	ldrh	r3, [r3, #0]
 800c660:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c664:	d00a      	beq.n	800c67c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff ff56 	bl	800c51c <ptr_to_mem>
 800c670:	4604      	mov	r4, r0
 800c672:	68b8      	ldr	r0, [r7, #8]
 800c674:	f7ff ff64 	bl	800c540 <mem_to_ptr>
 800c678:	4603      	mov	r3, r0
 800c67a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c67c:	bf00      	nop
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	bd90      	pop	{r4, r7, pc}
 800c684:	20005a90 	.word	0x20005a90
 800c688:	080189e0 	.word	0x080189e0
 800c68c:	08018a10 	.word	0x08018a10
 800c690:	08018a28 	.word	0x08018a28
 800c694:	20005a94 	.word	0x20005a94
 800c698:	08018a50 	.word	0x08018a50
 800c69c:	08018a6c 	.word	0x08018a6c
 800c6a0:	08018a88 	.word	0x08018a88
 800c6a4:	20005a98 	.word	0x20005a98

0800c6a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c6ae:	4b18      	ldr	r3, [pc, #96]	; (800c710 <mem_init+0x68>)
 800c6b0:	3303      	adds	r3, #3
 800c6b2:	f023 0303 	bic.w	r3, r3, #3
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4b16      	ldr	r3, [pc, #88]	; (800c714 <mem_init+0x6c>)
 800c6ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c6bc:	4b15      	ldr	r3, [pc, #84]	; (800c714 <mem_init+0x6c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c6c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c6d6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c6da:	f7ff ff1f 	bl	800c51c <ptr_to_mem>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	4a0d      	ldr	r2, [pc, #52]	; (800c718 <mem_init+0x70>)
 800c6e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <mem_init+0x70>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c6ec:	4b0a      	ldr	r3, [pc, #40]	; (800c718 <mem_init+0x70>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c6f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c6f6:	4b08      	ldr	r3, [pc, #32]	; (800c718 <mem_init+0x70>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c6fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c700:	4b04      	ldr	r3, [pc, #16]	; (800c714 <mem_init+0x6c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a05      	ldr	r2, [pc, #20]	; (800c71c <mem_init+0x74>)
 800c706:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	2000543c 	.word	0x2000543c
 800c714:	20005a90 	.word	0x20005a90
 800c718:	20005a94 	.word	0x20005a94
 800c71c:	20005a98 	.word	0x20005a98

0800c720 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff ff09 	bl	800c540 <mem_to_ptr>
 800c72e:	4603      	mov	r3, r0
 800c730:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff fef0 	bl	800c51c <ptr_to_mem>
 800c73c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	885b      	ldrh	r3, [r3, #2]
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff feea 	bl	800c51c <ptr_to_mem>
 800c748:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c752:	d818      	bhi.n	800c786 <mem_link_valid+0x66>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	885b      	ldrh	r3, [r3, #2]
 800c758:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c75c:	d813      	bhi.n	800c786 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c762:	8afa      	ldrh	r2, [r7, #22]
 800c764:	429a      	cmp	r2, r3
 800c766:	d004      	beq.n	800c772 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	8afa      	ldrh	r2, [r7, #22]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d109      	bne.n	800c786 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c772:	4b08      	ldr	r3, [pc, #32]	; (800c794 <mem_link_valid+0x74>)
 800c774:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d006      	beq.n	800c78a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	885b      	ldrh	r3, [r3, #2]
 800c780:	8afa      	ldrh	r2, [r7, #22]
 800c782:	429a      	cmp	r2, r3
 800c784:	d001      	beq.n	800c78a <mem_link_valid+0x6a>
    return 0;
 800c786:	2300      	movs	r3, #0
 800c788:	e000      	b.n	800c78c <mem_link_valid+0x6c>
  }
  return 1;
 800c78a:	2301      	movs	r3, #1
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	20005a94 	.word	0x20005a94

0800c798 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d04c      	beq.n	800c840 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f003 0303 	and.w	r3, r3, #3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d007      	beq.n	800c7c0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c7b0:	4b25      	ldr	r3, [pc, #148]	; (800c848 <mem_free+0xb0>)
 800c7b2:	f240 2273 	movw	r2, #627	; 0x273
 800c7b6:	4925      	ldr	r1, [pc, #148]	; (800c84c <mem_free+0xb4>)
 800c7b8:	4825      	ldr	r0, [pc, #148]	; (800c850 <mem_free+0xb8>)
 800c7ba:	f00a ff6d 	bl	8017698 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c7be:	e040      	b.n	800c842 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3b08      	subs	r3, #8
 800c7c4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c7c6:	4b23      	ldr	r3, [pc, #140]	; (800c854 <mem_free+0xbc>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d306      	bcc.n	800c7de <mem_free+0x46>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f103 020c 	add.w	r2, r3, #12
 800c7d6:	4b20      	ldr	r3, [pc, #128]	; (800c858 <mem_free+0xc0>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d907      	bls.n	800c7ee <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c7de:	4b1a      	ldr	r3, [pc, #104]	; (800c848 <mem_free+0xb0>)
 800c7e0:	f240 227f 	movw	r2, #639	; 0x27f
 800c7e4:	491d      	ldr	r1, [pc, #116]	; (800c85c <mem_free+0xc4>)
 800c7e6:	481a      	ldr	r0, [pc, #104]	; (800c850 <mem_free+0xb8>)
 800c7e8:	f00a ff56 	bl	8017698 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c7ec:	e029      	b.n	800c842 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	791b      	ldrb	r3, [r3, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d107      	bne.n	800c806 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <mem_free+0xb0>)
 800c7f8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c7fc:	4918      	ldr	r1, [pc, #96]	; (800c860 <mem_free+0xc8>)
 800c7fe:	4814      	ldr	r0, [pc, #80]	; (800c850 <mem_free+0xb8>)
 800c800:	f00a ff4a 	bl	8017698 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c804:	e01d      	b.n	800c842 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f7ff ff8a 	bl	800c720 <mem_link_valid>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d107      	bne.n	800c822 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c812:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <mem_free+0xb0>)
 800c814:	f240 2295 	movw	r2, #661	; 0x295
 800c818:	4912      	ldr	r1, [pc, #72]	; (800c864 <mem_free+0xcc>)
 800c81a:	480d      	ldr	r0, [pc, #52]	; (800c850 <mem_free+0xb8>)
 800c81c:	f00a ff3c 	bl	8017698 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c820:	e00f      	b.n	800c842 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c828:	4b0f      	ldr	r3, [pc, #60]	; (800c868 <mem_free+0xd0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d202      	bcs.n	800c838 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c832:	4a0d      	ldr	r2, [pc, #52]	; (800c868 <mem_free+0xd0>)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff fe93 	bl	800c564 <plug_holes>
 800c83e:	e000      	b.n	800c842 <mem_free+0xaa>
    return;
 800c840:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	080189e0 	.word	0x080189e0
 800c84c:	08018ab4 	.word	0x08018ab4
 800c850:	08018a28 	.word	0x08018a28
 800c854:	20005a90 	.word	0x20005a90
 800c858:	20005a94 	.word	0x20005a94
 800c85c:	08018ad8 	.word	0x08018ad8
 800c860:	08018af4 	.word	0x08018af4
 800c864:	08018b1c 	.word	0x08018b1c
 800c868:	20005a98 	.word	0x20005a98

0800c86c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c878:	887b      	ldrh	r3, [r7, #2]
 800c87a:	3303      	adds	r3, #3
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	f023 0303 	bic.w	r3, r3, #3
 800c882:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c884:	8bfb      	ldrh	r3, [r7, #30]
 800c886:	2b0b      	cmp	r3, #11
 800c888:	d801      	bhi.n	800c88e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c88a:	230c      	movs	r3, #12
 800c88c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c88e:	8bfb      	ldrh	r3, [r7, #30]
 800c890:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c894:	d803      	bhi.n	800c89e <mem_trim+0x32>
 800c896:	8bfa      	ldrh	r2, [r7, #30]
 800c898:	887b      	ldrh	r3, [r7, #2]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d201      	bcs.n	800c8a2 <mem_trim+0x36>
    return NULL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e0cc      	b.n	800ca3c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c8a2:	4b68      	ldr	r3, [pc, #416]	; (800ca44 <mem_trim+0x1d8>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d304      	bcc.n	800c8b6 <mem_trim+0x4a>
 800c8ac:	4b66      	ldr	r3, [pc, #408]	; (800ca48 <mem_trim+0x1dc>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d306      	bcc.n	800c8c4 <mem_trim+0x58>
 800c8b6:	4b65      	ldr	r3, [pc, #404]	; (800ca4c <mem_trim+0x1e0>)
 800c8b8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c8bc:	4964      	ldr	r1, [pc, #400]	; (800ca50 <mem_trim+0x1e4>)
 800c8be:	4865      	ldr	r0, [pc, #404]	; (800ca54 <mem_trim+0x1e8>)
 800c8c0:	f00a feea 	bl	8017698 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c8c4:	4b5f      	ldr	r3, [pc, #380]	; (800ca44 <mem_trim+0x1d8>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d304      	bcc.n	800c8d8 <mem_trim+0x6c>
 800c8ce:	4b5e      	ldr	r3, [pc, #376]	; (800ca48 <mem_trim+0x1dc>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d301      	bcc.n	800c8dc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	e0af      	b.n	800ca3c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3b08      	subs	r3, #8
 800c8e0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c8e2:	69b8      	ldr	r0, [r7, #24]
 800c8e4:	f7ff fe2c 	bl	800c540 <mem_to_ptr>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	881a      	ldrh	r2, [r3, #0]
 800c8f0:	8afb      	ldrh	r3, [r7, #22]
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	3b08      	subs	r3, #8
 800c8f8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c8fa:	8bfa      	ldrh	r2, [r7, #30]
 800c8fc:	8abb      	ldrh	r3, [r7, #20]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d906      	bls.n	800c910 <mem_trim+0xa4>
 800c902:	4b52      	ldr	r3, [pc, #328]	; (800ca4c <mem_trim+0x1e0>)
 800c904:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c908:	4953      	ldr	r1, [pc, #332]	; (800ca58 <mem_trim+0x1ec>)
 800c90a:	4852      	ldr	r0, [pc, #328]	; (800ca54 <mem_trim+0x1e8>)
 800c90c:	f00a fec4 	bl	8017698 <iprintf>
  if (newsize > size) {
 800c910:	8bfa      	ldrh	r2, [r7, #30]
 800c912:	8abb      	ldrh	r3, [r7, #20]
 800c914:	429a      	cmp	r2, r3
 800c916:	d901      	bls.n	800c91c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c918:	2300      	movs	r3, #0
 800c91a:	e08f      	b.n	800ca3c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c91c:	8bfa      	ldrh	r2, [r7, #30]
 800c91e:	8abb      	ldrh	r3, [r7, #20]
 800c920:	429a      	cmp	r2, r3
 800c922:	d101      	bne.n	800c928 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	e089      	b.n	800ca3c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7ff fdf5 	bl	800c51c <ptr_to_mem>
 800c932:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	791b      	ldrb	r3, [r3, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d13f      	bne.n	800c9bc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c944:	d106      	bne.n	800c954 <mem_trim+0xe8>
 800c946:	4b41      	ldr	r3, [pc, #260]	; (800ca4c <mem_trim+0x1e0>)
 800c948:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c94c:	4943      	ldr	r1, [pc, #268]	; (800ca5c <mem_trim+0x1f0>)
 800c94e:	4841      	ldr	r0, [pc, #260]	; (800ca54 <mem_trim+0x1e8>)
 800c950:	f00a fea2 	bl	8017698 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c95a:	8afa      	ldrh	r2, [r7, #22]
 800c95c:	8bfb      	ldrh	r3, [r7, #30]
 800c95e:	4413      	add	r3, r2
 800c960:	b29b      	uxth	r3, r3
 800c962:	3308      	adds	r3, #8
 800c964:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c966:	4b3e      	ldr	r3, [pc, #248]	; (800ca60 <mem_trim+0x1f4>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d106      	bne.n	800c97e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c970:	89fb      	ldrh	r3, [r7, #14]
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff fdd2 	bl	800c51c <ptr_to_mem>
 800c978:	4603      	mov	r3, r0
 800c97a:	4a39      	ldr	r2, [pc, #228]	; (800ca60 <mem_trim+0x1f4>)
 800c97c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c97e:	89fb      	ldrh	r3, [r7, #14]
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff fdcb 	bl	800c51c <ptr_to_mem>
 800c986:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2200      	movs	r2, #0
 800c98c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	89ba      	ldrh	r2, [r7, #12]
 800c992:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	8afa      	ldrh	r2, [r7, #22]
 800c998:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	89fa      	ldrh	r2, [r7, #14]
 800c99e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	881b      	ldrh	r3, [r3, #0]
 800c9a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9a8:	d047      	beq.n	800ca3a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7ff fdb4 	bl	800c51c <ptr_to_mem>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	89fb      	ldrh	r3, [r7, #14]
 800c9b8:	8053      	strh	r3, [r2, #2]
 800c9ba:	e03e      	b.n	800ca3a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c9bc:	8bfb      	ldrh	r3, [r7, #30]
 800c9be:	f103 0214 	add.w	r2, r3, #20
 800c9c2:	8abb      	ldrh	r3, [r7, #20]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d838      	bhi.n	800ca3a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c9c8:	8afa      	ldrh	r2, [r7, #22]
 800c9ca:	8bfb      	ldrh	r3, [r7, #30]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9dc:	d106      	bne.n	800c9ec <mem_trim+0x180>
 800c9de:	4b1b      	ldr	r3, [pc, #108]	; (800ca4c <mem_trim+0x1e0>)
 800c9e0:	f240 3216 	movw	r2, #790	; 0x316
 800c9e4:	491d      	ldr	r1, [pc, #116]	; (800ca5c <mem_trim+0x1f0>)
 800c9e6:	481b      	ldr	r0, [pc, #108]	; (800ca54 <mem_trim+0x1e8>)
 800c9e8:	f00a fe56 	bl	8017698 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c9ec:	89fb      	ldrh	r3, [r7, #14]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fd94 	bl	800c51c <ptr_to_mem>
 800c9f4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c9f6:	4b1a      	ldr	r3, [pc, #104]	; (800ca60 <mem_trim+0x1f4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d202      	bcs.n	800ca06 <mem_trim+0x19a>
      lfree = mem2;
 800ca00:	4a17      	ldr	r2, [pc, #92]	; (800ca60 <mem_trim+0x1f4>)
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	881a      	ldrh	r2, [r3, #0]
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	8afa      	ldrh	r2, [r7, #22]
 800ca18:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	89fa      	ldrh	r2, [r7, #14]
 800ca1e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca28:	d007      	beq.n	800ca3a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7ff fd74 	bl	800c51c <ptr_to_mem>
 800ca34:	4602      	mov	r2, r0
 800ca36:	89fb      	ldrh	r3, [r7, #14]
 800ca38:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ca3a:	687b      	ldr	r3, [r7, #4]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20005a90 	.word	0x20005a90
 800ca48:	20005a94 	.word	0x20005a94
 800ca4c:	080189e0 	.word	0x080189e0
 800ca50:	08018b50 	.word	0x08018b50
 800ca54:	08018a28 	.word	0x08018a28
 800ca58:	08018b68 	.word	0x08018b68
 800ca5c:	08018b88 	.word	0x08018b88
 800ca60:	20005a98 	.word	0x20005a98

0800ca64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ca6e:	88fb      	ldrh	r3, [r7, #6]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <mem_malloc+0x14>
    return NULL;
 800ca74:	2300      	movs	r3, #0
 800ca76:	e0d9      	b.n	800cc2c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ca78:	88fb      	ldrh	r3, [r7, #6]
 800ca7a:	3303      	adds	r3, #3
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	f023 0303 	bic.w	r3, r3, #3
 800ca82:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ca84:	8bbb      	ldrh	r3, [r7, #28]
 800ca86:	2b0b      	cmp	r3, #11
 800ca88:	d801      	bhi.n	800ca8e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ca8a:	230c      	movs	r3, #12
 800ca8c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ca8e:	8bbb      	ldrh	r3, [r7, #28]
 800ca90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca94:	d803      	bhi.n	800ca9e <mem_malloc+0x3a>
 800ca96:	8bba      	ldrh	r2, [r7, #28]
 800ca98:	88fb      	ldrh	r3, [r7, #6]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d201      	bcs.n	800caa2 <mem_malloc+0x3e>
    return NULL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e0c4      	b.n	800cc2c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800caa2:	4b64      	ldr	r3, [pc, #400]	; (800cc34 <mem_malloc+0x1d0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fd4a 	bl	800c540 <mem_to_ptr>
 800caac:	4603      	mov	r3, r0
 800caae:	83fb      	strh	r3, [r7, #30]
 800cab0:	e0b4      	b.n	800cc1c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cab2:	8bfb      	ldrh	r3, [r7, #30]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7ff fd31 	bl	800c51c <ptr_to_mem>
 800caba:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	791b      	ldrb	r3, [r3, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f040 80a4 	bne.w	800cc0e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	8bfb      	ldrh	r3, [r7, #30]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	f1a3 0208 	sub.w	r2, r3, #8
 800cad4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cad6:	429a      	cmp	r2, r3
 800cad8:	f0c0 8099 	bcc.w	800cc0e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	461a      	mov	r2, r3
 800cae2:	8bfb      	ldrh	r3, [r7, #30]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	f1a3 0208 	sub.w	r2, r3, #8
 800caea:	8bbb      	ldrh	r3, [r7, #28]
 800caec:	3314      	adds	r3, #20
 800caee:	429a      	cmp	r2, r3
 800caf0:	d333      	bcc.n	800cb5a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800caf2:	8bfa      	ldrh	r2, [r7, #30]
 800caf4:	8bbb      	ldrh	r3, [r7, #28]
 800caf6:	4413      	add	r3, r2
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	3308      	adds	r3, #8
 800cafc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cafe:	8a7b      	ldrh	r3, [r7, #18]
 800cb00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb04:	d106      	bne.n	800cb14 <mem_malloc+0xb0>
 800cb06:	4b4c      	ldr	r3, [pc, #304]	; (800cc38 <mem_malloc+0x1d4>)
 800cb08:	f240 3287 	movw	r2, #903	; 0x387
 800cb0c:	494b      	ldr	r1, [pc, #300]	; (800cc3c <mem_malloc+0x1d8>)
 800cb0e:	484c      	ldr	r0, [pc, #304]	; (800cc40 <mem_malloc+0x1dc>)
 800cb10:	f00a fdc2 	bl	8017698 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cb14:	8a7b      	ldrh	r3, [r7, #18]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff fd00 	bl	800c51c <ptr_to_mem>
 800cb1c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	881a      	ldrh	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	8bfa      	ldrh	r2, [r7, #30]
 800cb30:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	8a7a      	ldrh	r2, [r7, #18]
 800cb36:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb46:	d00b      	beq.n	800cb60 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff fce5 	bl	800c51c <ptr_to_mem>
 800cb52:	4602      	mov	r2, r0
 800cb54:	8a7b      	ldrh	r3, [r7, #18]
 800cb56:	8053      	strh	r3, [r2, #2]
 800cb58:	e002      	b.n	800cb60 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cb60:	4b34      	ldr	r3, [pc, #208]	; (800cc34 <mem_malloc+0x1d0>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d127      	bne.n	800cbba <mem_malloc+0x156>
          struct mem *cur = lfree;
 800cb6a:	4b32      	ldr	r3, [pc, #200]	; (800cc34 <mem_malloc+0x1d0>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cb70:	e005      	b.n	800cb7e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7ff fcd0 	bl	800c51c <ptr_to_mem>
 800cb7c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	791b      	ldrb	r3, [r3, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <mem_malloc+0x12c>
 800cb86:	4b2f      	ldr	r3, [pc, #188]	; (800cc44 <mem_malloc+0x1e0>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d1f0      	bne.n	800cb72 <mem_malloc+0x10e>
          }
          lfree = cur;
 800cb90:	4a28      	ldr	r2, [pc, #160]	; (800cc34 <mem_malloc+0x1d0>)
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cb96:	4b27      	ldr	r3, [pc, #156]	; (800cc34 <mem_malloc+0x1d0>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	4b2a      	ldr	r3, [pc, #168]	; (800cc44 <mem_malloc+0x1e0>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d00b      	beq.n	800cbba <mem_malloc+0x156>
 800cba2:	4b24      	ldr	r3, [pc, #144]	; (800cc34 <mem_malloc+0x1d0>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	791b      	ldrb	r3, [r3, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d006      	beq.n	800cbba <mem_malloc+0x156>
 800cbac:	4b22      	ldr	r3, [pc, #136]	; (800cc38 <mem_malloc+0x1d4>)
 800cbae:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cbb2:	4925      	ldr	r1, [pc, #148]	; (800cc48 <mem_malloc+0x1e4>)
 800cbb4:	4822      	ldr	r0, [pc, #136]	; (800cc40 <mem_malloc+0x1dc>)
 800cbb6:	f00a fd6f 	bl	8017698 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cbba:	8bba      	ldrh	r2, [r7, #28]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	4a20      	ldr	r2, [pc, #128]	; (800cc44 <mem_malloc+0x1e0>)
 800cbc4:	6812      	ldr	r2, [r2, #0]
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d906      	bls.n	800cbd8 <mem_malloc+0x174>
 800cbca:	4b1b      	ldr	r3, [pc, #108]	; (800cc38 <mem_malloc+0x1d4>)
 800cbcc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cbd0:	491e      	ldr	r1, [pc, #120]	; (800cc4c <mem_malloc+0x1e8>)
 800cbd2:	481b      	ldr	r0, [pc, #108]	; (800cc40 <mem_malloc+0x1dc>)
 800cbd4:	f00a fd60 	bl	8017698 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f003 0303 	and.w	r3, r3, #3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d006      	beq.n	800cbf0 <mem_malloc+0x18c>
 800cbe2:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <mem_malloc+0x1d4>)
 800cbe4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cbe8:	4919      	ldr	r1, [pc, #100]	; (800cc50 <mem_malloc+0x1ec>)
 800cbea:	4815      	ldr	r0, [pc, #84]	; (800cc40 <mem_malloc+0x1dc>)
 800cbec:	f00a fd54 	bl	8017698 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d006      	beq.n	800cc08 <mem_malloc+0x1a4>
 800cbfa:	4b0f      	ldr	r3, [pc, #60]	; (800cc38 <mem_malloc+0x1d4>)
 800cbfc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cc00:	4914      	ldr	r1, [pc, #80]	; (800cc54 <mem_malloc+0x1f0>)
 800cc02:	480f      	ldr	r0, [pc, #60]	; (800cc40 <mem_malloc+0x1dc>)
 800cc04:	f00a fd48 	bl	8017698 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	e00e      	b.n	800cc2c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cc0e:	8bfb      	ldrh	r3, [r7, #30]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff fc83 	bl	800c51c <ptr_to_mem>
 800cc16:	4603      	mov	r3, r0
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cc1c:	8bfa      	ldrh	r2, [r7, #30]
 800cc1e:	8bbb      	ldrh	r3, [r7, #28]
 800cc20:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cc24:	429a      	cmp	r2, r3
 800cc26:	f4ff af44 	bcc.w	800cab2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3720      	adds	r7, #32
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20005a98 	.word	0x20005a98
 800cc38:	080189e0 	.word	0x080189e0
 800cc3c:	08018b88 	.word	0x08018b88
 800cc40:	08018a28 	.word	0x08018a28
 800cc44:	20005a94 	.word	0x20005a94
 800cc48:	08018b9c 	.word	0x08018b9c
 800cc4c:	08018bb8 	.word	0x08018bb8
 800cc50:	08018be8 	.word	0x08018be8
 800cc54:	08018c18 	.word	0x08018c18

0800cc58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	2200      	movs	r2, #0
 800cc66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	3303      	adds	r3, #3
 800cc6e:	f023 0303 	bic.w	r3, r3, #3
 800cc72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cc74:	2300      	movs	r3, #0
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	e011      	b.n	800cc9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	881b      	ldrh	r3, [r3, #0]
 800cc90:	461a      	mov	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4413      	add	r3, r2
 800cc96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	885b      	ldrh	r3, [r3, #2]
 800cca2:	461a      	mov	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	4293      	cmp	r3, r2
 800cca8:	dbe7      	blt.n	800cc7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ccaa:	bf00      	nop
 800ccac:	bf00      	nop
 800ccae:	3714      	adds	r7, #20
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	80fb      	strh	r3, [r7, #6]
 800ccc2:	e009      	b.n	800ccd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ccc4:	88fb      	ldrh	r3, [r7, #6]
 800ccc6:	4a08      	ldr	r2, [pc, #32]	; (800cce8 <memp_init+0x30>)
 800ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff ffc3 	bl	800cc58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ccd2:	88fb      	ldrh	r3, [r7, #6]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	80fb      	strh	r3, [r7, #6]
 800ccd8:	88fb      	ldrh	r3, [r7, #6]
 800ccda:	2b08      	cmp	r3, #8
 800ccdc:	d9f2      	bls.n	800ccc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ccde:	bf00      	nop
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	0801b690 	.word	0x0801b690

0800ccec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d012      	beq.n	800cd28 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	6812      	ldr	r2, [r2, #0]
 800cd0a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f003 0303 	and.w	r3, r3, #3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d006      	beq.n	800cd24 <do_memp_malloc_pool+0x38>
 800cd16:	4b07      	ldr	r3, [pc, #28]	; (800cd34 <do_memp_malloc_pool+0x48>)
 800cd18:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cd1c:	4906      	ldr	r1, [pc, #24]	; (800cd38 <do_memp_malloc_pool+0x4c>)
 800cd1e:	4807      	ldr	r0, [pc, #28]	; (800cd3c <do_memp_malloc_pool+0x50>)
 800cd20:	f00a fcba 	bl	8017698 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	e000      	b.n	800cd2a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	08018c3c 	.word	0x08018c3c
 800cd38:	08018c6c 	.word	0x08018c6c
 800cd3c:	08018c90 	.word	0x08018c90

0800cd40 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d106      	bne.n	800cd5c <memp_malloc_pool+0x1c>
 800cd4e:	4b0a      	ldr	r3, [pc, #40]	; (800cd78 <memp_malloc_pool+0x38>)
 800cd50:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800cd54:	4909      	ldr	r1, [pc, #36]	; (800cd7c <memp_malloc_pool+0x3c>)
 800cd56:	480a      	ldr	r0, [pc, #40]	; (800cd80 <memp_malloc_pool+0x40>)
 800cd58:	f00a fc9e 	bl	8017698 <iprintf>
  if (desc == NULL) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <memp_malloc_pool+0x26>
    return NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e003      	b.n	800cd6e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff ffc0 	bl	800ccec <do_memp_malloc_pool>
 800cd6c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	08018c3c 	.word	0x08018c3c
 800cd7c:	08018cb8 	.word	0x08018cb8
 800cd80:	08018c90 	.word	0x08018c90

0800cd84 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cd8e:	79fb      	ldrb	r3, [r7, #7]
 800cd90:	2b08      	cmp	r3, #8
 800cd92:	d908      	bls.n	800cda6 <memp_malloc+0x22>
 800cd94:	4b0a      	ldr	r3, [pc, #40]	; (800cdc0 <memp_malloc+0x3c>)
 800cd96:	f240 1257 	movw	r2, #343	; 0x157
 800cd9a:	490a      	ldr	r1, [pc, #40]	; (800cdc4 <memp_malloc+0x40>)
 800cd9c:	480a      	ldr	r0, [pc, #40]	; (800cdc8 <memp_malloc+0x44>)
 800cd9e:	f00a fc7b 	bl	8017698 <iprintf>
 800cda2:	2300      	movs	r3, #0
 800cda4:	e008      	b.n	800cdb8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	4a08      	ldr	r2, [pc, #32]	; (800cdcc <memp_malloc+0x48>)
 800cdaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff ff9c 	bl	800ccec <do_memp_malloc_pool>
 800cdb4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	08018c3c 	.word	0x08018c3c
 800cdc4:	08018ccc 	.word	0x08018ccc
 800cdc8:	08018c90 	.word	0x08018c90
 800cdcc:	0801b690 	.word	0x0801b690

0800cdd0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	f003 0303 	and.w	r3, r3, #3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d006      	beq.n	800cdf2 <do_memp_free_pool+0x22>
 800cde4:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <do_memp_free_pool+0x40>)
 800cde6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cdea:	490a      	ldr	r1, [pc, #40]	; (800ce14 <do_memp_free_pool+0x44>)
 800cdec:	480a      	ldr	r0, [pc, #40]	; (800ce18 <do_memp_free_pool+0x48>)
 800cdee:	f00a fc53 	bl	8017698 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ce08:	bf00      	nop
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	08018c3c 	.word	0x08018c3c
 800ce14:	08018cec 	.word	0x08018cec
 800ce18:	08018c90 	.word	0x08018c90

0800ce1c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d106      	bne.n	800ce3a <memp_free_pool+0x1e>
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <memp_free_pool+0x3c>)
 800ce2e:	f240 1295 	movw	r2, #405	; 0x195
 800ce32:	490a      	ldr	r1, [pc, #40]	; (800ce5c <memp_free_pool+0x40>)
 800ce34:	480a      	ldr	r0, [pc, #40]	; (800ce60 <memp_free_pool+0x44>)
 800ce36:	f00a fc2f 	bl	8017698 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d007      	beq.n	800ce50 <memp_free_pool+0x34>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d004      	beq.n	800ce50 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ffc1 	bl	800cdd0 <do_memp_free_pool>
 800ce4e:	e000      	b.n	800ce52 <memp_free_pool+0x36>
    return;
 800ce50:	bf00      	nop
}
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	08018c3c 	.word	0x08018c3c
 800ce5c:	08018cb8 	.word	0x08018cb8
 800ce60:	08018c90 	.word	0x08018c90

0800ce64 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	6039      	str	r1, [r7, #0]
 800ce6e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ce70:	79fb      	ldrb	r3, [r7, #7]
 800ce72:	2b08      	cmp	r3, #8
 800ce74:	d907      	bls.n	800ce86 <memp_free+0x22>
 800ce76:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <memp_free+0x44>)
 800ce78:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ce7c:	490b      	ldr	r1, [pc, #44]	; (800ceac <memp_free+0x48>)
 800ce7e:	480c      	ldr	r0, [pc, #48]	; (800ceb0 <memp_free+0x4c>)
 800ce80:	f00a fc0a 	bl	8017698 <iprintf>
 800ce84:	e00c      	b.n	800cea0 <memp_free+0x3c>

  if (mem == NULL) {
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d008      	beq.n	800ce9e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	4a09      	ldr	r2, [pc, #36]	; (800ceb4 <memp_free+0x50>)
 800ce90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff ff9a 	bl	800cdd0 <do_memp_free_pool>
 800ce9c:	e000      	b.n	800cea0 <memp_free+0x3c>
    return;
 800ce9e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	08018c3c 	.word	0x08018c3c
 800ceac:	08018d0c 	.word	0x08018d0c
 800ceb0:	08018c90 	.word	0x08018c90
 800ceb4:	0801b690 	.word	0x0801b690

0800ceb8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cebc:	bf00      	nop
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
	...

0800cec8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d108      	bne.n	800ceee <netif_add+0x26>
 800cedc:	4b57      	ldr	r3, [pc, #348]	; (800d03c <netif_add+0x174>)
 800cede:	f240 1227 	movw	r2, #295	; 0x127
 800cee2:	4957      	ldr	r1, [pc, #348]	; (800d040 <netif_add+0x178>)
 800cee4:	4857      	ldr	r0, [pc, #348]	; (800d044 <netif_add+0x17c>)
 800cee6:	f00a fbd7 	bl	8017698 <iprintf>
 800ceea:	2300      	movs	r3, #0
 800ceec:	e0a2      	b.n	800d034 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ceee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d108      	bne.n	800cf06 <netif_add+0x3e>
 800cef4:	4b51      	ldr	r3, [pc, #324]	; (800d03c <netif_add+0x174>)
 800cef6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cefa:	4953      	ldr	r1, [pc, #332]	; (800d048 <netif_add+0x180>)
 800cefc:	4851      	ldr	r0, [pc, #324]	; (800d044 <netif_add+0x17c>)
 800cefe:	f00a fbcb 	bl	8017698 <iprintf>
 800cf02:	2300      	movs	r3, #0
 800cf04:	e096      	b.n	800d034 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cf0c:	4b4f      	ldr	r3, [pc, #316]	; (800d04c <netif_add+0x184>)
 800cf0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cf16:	4b4d      	ldr	r3, [pc, #308]	; (800d04c <netif_add+0x184>)
 800cf18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cf20:	4b4a      	ldr	r3, [pc, #296]	; (800d04c <netif_add+0x184>)
 800cf22:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	4a45      	ldr	r2, [pc, #276]	; (800d050 <netif_add+0x188>)
 800cf3a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6a3a      	ldr	r2, [r7, #32]
 800cf54:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cf56:	4b3f      	ldr	r3, [pc, #252]	; (800d054 <netif_add+0x18c>)
 800cf58:	781a      	ldrb	r2, [r3, #0]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf64:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	68b9      	ldr	r1, [r7, #8]
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f000 f913 	bl	800d198 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	4798      	blx	r3
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <netif_add+0xba>
    return NULL;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	e058      	b.n	800d034 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf88:	2bff      	cmp	r3, #255	; 0xff
 800cf8a:	d103      	bne.n	800cf94 <netif_add+0xcc>
        netif->num = 0;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf98:	4b2f      	ldr	r3, [pc, #188]	; (800d058 <netif_add+0x190>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	617b      	str	r3, [r7, #20]
 800cf9e:	e02b      	b.n	800cff8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cfa0:	697a      	ldr	r2, [r7, #20]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d106      	bne.n	800cfb6 <netif_add+0xee>
 800cfa8:	4b24      	ldr	r3, [pc, #144]	; (800d03c <netif_add+0x174>)
 800cfaa:	f240 128b 	movw	r2, #395	; 0x18b
 800cfae:	492b      	ldr	r1, [pc, #172]	; (800d05c <netif_add+0x194>)
 800cfb0:	4824      	ldr	r0, [pc, #144]	; (800d044 <netif_add+0x17c>)
 800cfb2:	f00a fb71 	bl	8017698 <iprintf>
        num_netifs++;
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	2bff      	cmp	r3, #255	; 0xff
 800cfc0:	dd06      	ble.n	800cfd0 <netif_add+0x108>
 800cfc2:	4b1e      	ldr	r3, [pc, #120]	; (800d03c <netif_add+0x174>)
 800cfc4:	f240 128d 	movw	r2, #397	; 0x18d
 800cfc8:	4925      	ldr	r1, [pc, #148]	; (800d060 <netif_add+0x198>)
 800cfca:	481e      	ldr	r0, [pc, #120]	; (800d044 <netif_add+0x17c>)
 800cfcc:	f00a fb64 	bl	8017698 <iprintf>
        if (netif2->num == netif->num) {
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d108      	bne.n	800cff2 <netif_add+0x12a>
          netif->num++;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cff0:	e005      	b.n	800cffe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	617b      	str	r3, [r7, #20]
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1d0      	bne.n	800cfa0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1be      	bne.n	800cf82 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d00a:	2bfe      	cmp	r3, #254	; 0xfe
 800d00c:	d103      	bne.n	800d016 <netif_add+0x14e>
    netif_num = 0;
 800d00e:	4b11      	ldr	r3, [pc, #68]	; (800d054 <netif_add+0x18c>)
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	e006      	b.n	800d024 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d01c:	3301      	adds	r3, #1
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	4b0c      	ldr	r3, [pc, #48]	; (800d054 <netif_add+0x18c>)
 800d022:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d024:	4b0c      	ldr	r3, [pc, #48]	; (800d058 <netif_add+0x190>)
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d02c:	4a0a      	ldr	r2, [pc, #40]	; (800d058 <netif_add+0x190>)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d032:	68fb      	ldr	r3, [r7, #12]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	08018d28 	.word	0x08018d28
 800d040:	08018dbc 	.word	0x08018dbc
 800d044:	08018d78 	.word	0x08018d78
 800d048:	08018dd8 	.word	0x08018dd8
 800d04c:	0801b6f4 	.word	0x0801b6f4
 800d050:	0800d473 	.word	0x0800d473
 800d054:	20008990 	.word	0x20008990
 800d058:	20008988 	.word	0x20008988
 800d05c:	08018dfc 	.word	0x08018dfc
 800d060:	08018e10 	.word	0x08018e10

0800d064 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f002 fb53 	bl	800f71c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f006 ff27 	bl	8013ecc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
	...

0800d088 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d106      	bne.n	800d0a8 <netif_do_set_ipaddr+0x20>
 800d09a:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <netif_do_set_ipaddr+0x88>)
 800d09c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d0a0:	491c      	ldr	r1, [pc, #112]	; (800d114 <netif_do_set_ipaddr+0x8c>)
 800d0a2:	481d      	ldr	r0, [pc, #116]	; (800d118 <netif_do_set_ipaddr+0x90>)
 800d0a4:	f00a faf8 	bl	8017698 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <netif_do_set_ipaddr+0x34>
 800d0ae:	4b18      	ldr	r3, [pc, #96]	; (800d110 <netif_do_set_ipaddr+0x88>)
 800d0b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d0b4:	4917      	ldr	r1, [pc, #92]	; (800d114 <netif_do_set_ipaddr+0x8c>)
 800d0b6:	4818      	ldr	r0, [pc, #96]	; (800d118 <netif_do_set_ipaddr+0x90>)
 800d0b8:	f00a faee 	bl	8017698 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d01c      	beq.n	800d104 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d0da:	f107 0314 	add.w	r3, r7, #20
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ffbf 	bl	800d064 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <netif_do_set_ipaddr+0x6a>
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	e000      	b.n	800d0f4 <netif_do_set_ipaddr+0x6c>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f000 f8d2 	bl	800d2a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d100:	2301      	movs	r3, #1
 800d102:	e000      	b.n	800d106 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	08018d28 	.word	0x08018d28
 800d114:	08018e40 	.word	0x08018e40
 800d118:	08018d78 	.word	0x08018d78

0800d11c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3308      	adds	r3, #8
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	429a      	cmp	r2, r3
 800d134:	d00a      	beq.n	800d14c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <netif_do_set_netmask+0x26>
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	e000      	b.n	800d144 <netif_do_set_netmask+0x28>
 800d142:	2300      	movs	r3, #0
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d148:	2301      	movs	r3, #1
 800d14a:	e000      	b.n	800d14e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3714      	adds	r7, #20
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b085      	sub	sp, #20
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	330c      	adds	r3, #12
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d00a      	beq.n	800d18a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <netif_do_set_gw+0x26>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	e000      	b.n	800d182 <netif_do_set_gw+0x28>
 800d180:	2300      	movs	r3, #0
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d101      	bne.n	800d1b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d1b4:	4b1c      	ldr	r3, [pc, #112]	; (800d228 <netif_set_addr+0x90>)
 800d1b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d101      	bne.n	800d1c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d1be:	4b1a      	ldr	r3, [pc, #104]	; (800d228 <netif_set_addr+0x90>)
 800d1c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d1c8:	4b17      	ldr	r3, [pc, #92]	; (800d228 <netif_set_addr+0x90>)
 800d1ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <netif_set_addr+0x42>
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d101      	bne.n	800d1de <netif_set_addr+0x46>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e000      	b.n	800d1e0 <netif_set_addr+0x48>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d006      	beq.n	800d1f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d1e8:	f107 0310 	add.w	r3, r7, #16
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f7ff ff49 	bl	800d088 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d1f6:	69fa      	ldr	r2, [r7, #28]
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f7ff ff8e 	bl	800d11c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d200:	69ba      	ldr	r2, [r7, #24]
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f7ff ffa8 	bl	800d15a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d106      	bne.n	800d21e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d210:	f107 0310 	add.w	r3, r7, #16
 800d214:	461a      	mov	r2, r3
 800d216:	68b9      	ldr	r1, [r7, #8]
 800d218:	68f8      	ldr	r0, [r7, #12]
 800d21a:	f7ff ff35 	bl	800d088 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d21e:	bf00      	nop
 800d220:	3720      	adds	r7, #32
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	0801b6f4 	.word	0x0801b6f4

0800d22c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d234:	4a04      	ldr	r2, [pc, #16]	; (800d248 <netif_set_default+0x1c>)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d23a:	bf00      	nop
 800d23c:	370c      	adds	r7, #12
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	2000898c 	.word	0x2000898c

0800d24c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d107      	bne.n	800d26a <netif_set_up+0x1e>
 800d25a:	4b0f      	ldr	r3, [pc, #60]	; (800d298 <netif_set_up+0x4c>)
 800d25c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d260:	490e      	ldr	r1, [pc, #56]	; (800d29c <netif_set_up+0x50>)
 800d262:	480f      	ldr	r0, [pc, #60]	; (800d2a0 <netif_set_up+0x54>)
 800d264:	f00a fa18 	bl	8017698 <iprintf>
 800d268:	e013      	b.n	800d292 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d270:	f003 0301 	and.w	r3, r3, #1
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10c      	bne.n	800d292 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d27e:	f043 0301 	orr.w	r3, r3, #1
 800d282:	b2da      	uxtb	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d28a:	2103      	movs	r1, #3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f809 	bl	800d2a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	08018d28 	.word	0x08018d28
 800d29c:	08018eb0 	.word	0x08018eb0
 800d2a0:	08018d78 	.word	0x08018d78

0800d2a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d106      	bne.n	800d2c4 <netif_issue_reports+0x20>
 800d2b6:	4b18      	ldr	r3, [pc, #96]	; (800d318 <netif_issue_reports+0x74>)
 800d2b8:	f240 326d 	movw	r2, #877	; 0x36d
 800d2bc:	4917      	ldr	r1, [pc, #92]	; (800d31c <netif_issue_reports+0x78>)
 800d2be:	4818      	ldr	r0, [pc, #96]	; (800d320 <netif_issue_reports+0x7c>)
 800d2c0:	f00a f9ea 	bl	8017698 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2ca:	f003 0304 	and.w	r3, r3, #4
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d01e      	beq.n	800d310 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d017      	beq.n	800d310 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d013      	beq.n	800d312 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00e      	beq.n	800d312 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2fa:	f003 0308 	and.w	r3, r3, #8
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d007      	beq.n	800d312 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	3304      	adds	r3, #4
 800d306:	4619      	mov	r1, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f007 fd49 	bl	8014da0 <etharp_request>
 800d30e:	e000      	b.n	800d312 <netif_issue_reports+0x6e>
    return;
 800d310:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	08018d28 	.word	0x08018d28
 800d31c:	08018ecc 	.word	0x08018ecc
 800d320:	08018d78 	.word	0x08018d78

0800d324 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d107      	bne.n	800d342 <netif_set_down+0x1e>
 800d332:	4b12      	ldr	r3, [pc, #72]	; (800d37c <netif_set_down+0x58>)
 800d334:	f240 329b 	movw	r2, #923	; 0x39b
 800d338:	4911      	ldr	r1, [pc, #68]	; (800d380 <netif_set_down+0x5c>)
 800d33a:	4812      	ldr	r0, [pc, #72]	; (800d384 <netif_set_down+0x60>)
 800d33c:	f00a f9ac 	bl	8017698 <iprintf>
 800d340:	e019      	b.n	800d376 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d012      	beq.n	800d376 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d356:	f023 0301 	bic.w	r3, r3, #1
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d368:	f003 0308 	and.w	r3, r3, #8
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d002      	beq.n	800d376 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f007 f8d3 	bl	801451c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	08018d28 	.word	0x08018d28
 800d380:	08018ef0 	.word	0x08018ef0
 800d384:	08018d78 	.word	0x08018d78

0800d388 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d107      	bne.n	800d3a6 <netif_set_link_up+0x1e>
 800d396:	4b13      	ldr	r3, [pc, #76]	; (800d3e4 <netif_set_link_up+0x5c>)
 800d398:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d39c:	4912      	ldr	r1, [pc, #72]	; (800d3e8 <netif_set_link_up+0x60>)
 800d39e:	4813      	ldr	r0, [pc, #76]	; (800d3ec <netif_set_link_up+0x64>)
 800d3a0:	f00a f97a 	bl	8017698 <iprintf>
 800d3a4:	e01b      	b.n	800d3de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3ac:	f003 0304 	and.w	r3, r3, #4
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d114      	bne.n	800d3de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3ba:	f043 0304 	orr.w	r3, r3, #4
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d3c6:	2103      	movs	r1, #3
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7ff ff6b 	bl	800d2a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	69db      	ldr	r3, [r3, #28]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <netif_set_link_up+0x56>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	69db      	ldr	r3, [r3, #28]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	08018d28 	.word	0x08018d28
 800d3e8:	08018f10 	.word	0x08018f10
 800d3ec:	08018d78 	.word	0x08018d78

0800d3f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d107      	bne.n	800d40e <netif_set_link_down+0x1e>
 800d3fe:	4b11      	ldr	r3, [pc, #68]	; (800d444 <netif_set_link_down+0x54>)
 800d400:	f240 4206 	movw	r2, #1030	; 0x406
 800d404:	4910      	ldr	r1, [pc, #64]	; (800d448 <netif_set_link_down+0x58>)
 800d406:	4811      	ldr	r0, [pc, #68]	; (800d44c <netif_set_link_down+0x5c>)
 800d408:	f00a f946 	bl	8017698 <iprintf>
 800d40c:	e017      	b.n	800d43e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d414:	f003 0304 	and.w	r3, r3, #4
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d010      	beq.n	800d43e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d422:	f023 0304 	bic.w	r3, r3, #4
 800d426:	b2da      	uxtb	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <netif_set_link_down+0x4e>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	08018d28 	.word	0x08018d28
 800d448:	08018f34 	.word	0x08018f34
 800d44c:	08018d78 	.word	0x08018d78

0800d450 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	61da      	str	r2, [r3, #28]
  }
}
 800d466:	bf00      	nop
 800d468:	370c      	adds	r7, #12
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr

0800d472 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d472:	b480      	push	{r7}
 800d474:	b085      	sub	sp, #20
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d47e:	f06f 030b 	mvn.w	r3, #11
}
 800d482:	4618      	mov	r0, r3
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
	...

0800d490 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d490:	b480      	push	{r7}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d013      	beq.n	800d4c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d4a0:	4b0d      	ldr	r3, [pc, #52]	; (800d4d8 <netif_get_by_index+0x48>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	60fb      	str	r3, [r7, #12]
 800d4a6:	e00c      	b.n	800d4c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	79fa      	ldrb	r2, [r7, #7]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d101      	bne.n	800d4bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	e006      	b.n	800d4ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1ef      	bne.n	800d4a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3714      	adds	r7, #20
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	20008988 	.word	0x20008988

0800d4dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d4e2:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <pbuf_free_ooseq+0x38>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d4e8:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <pbuf_free_ooseq+0x3c>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	607b      	str	r3, [r7, #4]
 800d4ee:	e00a      	b.n	800d506 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d003      	beq.n	800d500 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f002 f94d 	bl	800f798 <tcp_free_ooseq>
      return;
 800d4fe:	e005      	b.n	800d50c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	607b      	str	r3, [r7, #4]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1f1      	bne.n	800d4f0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	20008991 	.word	0x20008991
 800d518:	200089a0 	.word	0x200089a0

0800d51c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d51c:	b480      	push	{r7}
 800d51e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d520:	4b03      	ldr	r3, [pc, #12]	; (800d530 <pbuf_pool_is_empty+0x14>)
 800d522:	2201      	movs	r2, #1
 800d524:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d526:	bf00      	nop
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	20008991 	.word	0x20008991

0800d534 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	4611      	mov	r1, r2
 800d540:	461a      	mov	r2, r3
 800d542:	460b      	mov	r3, r1
 800d544:	80fb      	strh	r3, [r7, #6]
 800d546:	4613      	mov	r3, r2
 800d548:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	88fa      	ldrh	r2, [r7, #6]
 800d55a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	88ba      	ldrh	r2, [r7, #4]
 800d560:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d562:	8b3b      	ldrh	r3, [r7, #24]
 800d564:	b2da      	uxtb	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	7f3a      	ldrb	r2, [r7, #28]
 800d56e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2201      	movs	r2, #1
 800d574:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2200      	movs	r2, #0
 800d57a:	73da      	strb	r2, [r3, #15]
}
 800d57c:	bf00      	nop
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08c      	sub	sp, #48	; 0x30
 800d58c:	af02      	add	r7, sp, #8
 800d58e:	4603      	mov	r3, r0
 800d590:	71fb      	strb	r3, [r7, #7]
 800d592:	460b      	mov	r3, r1
 800d594:	80bb      	strh	r3, [r7, #4]
 800d596:	4613      	mov	r3, r2
 800d598:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d59a:	79fb      	ldrb	r3, [r7, #7]
 800d59c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d59e:	887b      	ldrh	r3, [r7, #2]
 800d5a0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d5a4:	d07f      	beq.n	800d6a6 <pbuf_alloc+0x11e>
 800d5a6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d5aa:	f300 80c8 	bgt.w	800d73e <pbuf_alloc+0x1b6>
 800d5ae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d5b2:	d010      	beq.n	800d5d6 <pbuf_alloc+0x4e>
 800d5b4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d5b8:	f300 80c1 	bgt.w	800d73e <pbuf_alloc+0x1b6>
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d002      	beq.n	800d5c6 <pbuf_alloc+0x3e>
 800d5c0:	2b41      	cmp	r3, #65	; 0x41
 800d5c2:	f040 80bc 	bne.w	800d73e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d5c6:	887a      	ldrh	r2, [r7, #2]
 800d5c8:	88bb      	ldrh	r3, [r7, #4]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	f000 f8d1 	bl	800d774 <pbuf_alloc_reference>
 800d5d2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d5d4:	e0bd      	b.n	800d752 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d5de:	88bb      	ldrh	r3, [r7, #4]
 800d5e0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d5e2:	2008      	movs	r0, #8
 800d5e4:	f7ff fbce 	bl	800cd84 <memp_malloc>
 800d5e8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d109      	bne.n	800d604 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d5f0:	f7ff ff94 	bl	800d51c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d002      	beq.n	800d600 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d5fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5fc:	f000 faa8 	bl	800db50 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d600:	2300      	movs	r3, #0
 800d602:	e0a7      	b.n	800d754 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d606:	3303      	adds	r3, #3
 800d608:	b29b      	uxth	r3, r3
 800d60a:	f023 0303 	bic.w	r3, r3, #3
 800d60e:	b29b      	uxth	r3, r3
 800d610:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d614:	b29b      	uxth	r3, r3
 800d616:	8b7a      	ldrh	r2, [r7, #26]
 800d618:	4293      	cmp	r3, r2
 800d61a:	bf28      	it	cs
 800d61c:	4613      	movcs	r3, r2
 800d61e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d622:	3310      	adds	r3, #16
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	4413      	add	r3, r2
 800d628:	3303      	adds	r3, #3
 800d62a:	f023 0303 	bic.w	r3, r3, #3
 800d62e:	4618      	mov	r0, r3
 800d630:	89f9      	ldrh	r1, [r7, #14]
 800d632:	8b7a      	ldrh	r2, [r7, #26]
 800d634:	2300      	movs	r3, #0
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	887b      	ldrh	r3, [r7, #2]
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	460b      	mov	r3, r1
 800d63e:	4601      	mov	r1, r0
 800d640:	6938      	ldr	r0, [r7, #16]
 800d642:	f7ff ff77 	bl	800d534 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	f003 0303 	and.w	r3, r3, #3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d006      	beq.n	800d660 <pbuf_alloc+0xd8>
 800d652:	4b42      	ldr	r3, [pc, #264]	; (800d75c <pbuf_alloc+0x1d4>)
 800d654:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d658:	4941      	ldr	r1, [pc, #260]	; (800d760 <pbuf_alloc+0x1d8>)
 800d65a:	4842      	ldr	r0, [pc, #264]	; (800d764 <pbuf_alloc+0x1dc>)
 800d65c:	f00a f81c 	bl	8017698 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d662:	3303      	adds	r3, #3
 800d664:	f023 0303 	bic.w	r3, r3, #3
 800d668:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d66c:	d106      	bne.n	800d67c <pbuf_alloc+0xf4>
 800d66e:	4b3b      	ldr	r3, [pc, #236]	; (800d75c <pbuf_alloc+0x1d4>)
 800d670:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d674:	493c      	ldr	r1, [pc, #240]	; (800d768 <pbuf_alloc+0x1e0>)
 800d676:	483b      	ldr	r0, [pc, #236]	; (800d764 <pbuf_alloc+0x1dc>)
 800d678:	f00a f80e 	bl	8017698 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d102      	bne.n	800d688 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	627b      	str	r3, [r7, #36]	; 0x24
 800d686:	e002      	b.n	800d68e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d692:	8b7a      	ldrh	r2, [r7, #26]
 800d694:	89fb      	ldrh	r3, [r7, #14]
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d69e:	8b7b      	ldrh	r3, [r7, #26]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d19e      	bne.n	800d5e2 <pbuf_alloc+0x5a>
      break;
 800d6a4:	e055      	b.n	800d752 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d6a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6a8:	3303      	adds	r3, #3
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	f023 0303 	bic.w	r3, r3, #3
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	88bb      	ldrh	r3, [r7, #4]
 800d6b4:	3303      	adds	r3, #3
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	f023 0303 	bic.w	r3, r3, #3
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	4413      	add	r3, r2
 800d6c0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d6c2:	8b3b      	ldrh	r3, [r7, #24]
 800d6c4:	3310      	adds	r3, #16
 800d6c6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d6c8:	8b3a      	ldrh	r2, [r7, #24]
 800d6ca:	88bb      	ldrh	r3, [r7, #4]
 800d6cc:	3303      	adds	r3, #3
 800d6ce:	f023 0303 	bic.w	r3, r3, #3
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d306      	bcc.n	800d6e4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d6d6:	8afa      	ldrh	r2, [r7, #22]
 800d6d8:	88bb      	ldrh	r3, [r7, #4]
 800d6da:	3303      	adds	r3, #3
 800d6dc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d201      	bcs.n	800d6e8 <pbuf_alloc+0x160>
        return NULL;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e035      	b.n	800d754 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d6e8:	8afb      	ldrh	r3, [r7, #22]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7ff f9ba 	bl	800ca64 <mem_malloc>
 800d6f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d101      	bne.n	800d6fc <pbuf_alloc+0x174>
        return NULL;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	e02b      	b.n	800d754 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d6fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6fe:	3310      	adds	r3, #16
 800d700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d702:	4413      	add	r3, r2
 800d704:	3303      	adds	r3, #3
 800d706:	f023 0303 	bic.w	r3, r3, #3
 800d70a:	4618      	mov	r0, r3
 800d70c:	88b9      	ldrh	r1, [r7, #4]
 800d70e:	88ba      	ldrh	r2, [r7, #4]
 800d710:	2300      	movs	r3, #0
 800d712:	9301      	str	r3, [sp, #4]
 800d714:	887b      	ldrh	r3, [r7, #2]
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	460b      	mov	r3, r1
 800d71a:	4601      	mov	r1, r0
 800d71c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d71e:	f7ff ff09 	bl	800d534 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	f003 0303 	and.w	r3, r3, #3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d010      	beq.n	800d750 <pbuf_alloc+0x1c8>
 800d72e:	4b0b      	ldr	r3, [pc, #44]	; (800d75c <pbuf_alloc+0x1d4>)
 800d730:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d734:	490d      	ldr	r1, [pc, #52]	; (800d76c <pbuf_alloc+0x1e4>)
 800d736:	480b      	ldr	r0, [pc, #44]	; (800d764 <pbuf_alloc+0x1dc>)
 800d738:	f009 ffae 	bl	8017698 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d73c:	e008      	b.n	800d750 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d73e:	4b07      	ldr	r3, [pc, #28]	; (800d75c <pbuf_alloc+0x1d4>)
 800d740:	f240 1227 	movw	r2, #295	; 0x127
 800d744:	490a      	ldr	r1, [pc, #40]	; (800d770 <pbuf_alloc+0x1e8>)
 800d746:	4807      	ldr	r0, [pc, #28]	; (800d764 <pbuf_alloc+0x1dc>)
 800d748:	f009 ffa6 	bl	8017698 <iprintf>
      return NULL;
 800d74c:	2300      	movs	r3, #0
 800d74e:	e001      	b.n	800d754 <pbuf_alloc+0x1cc>
      break;
 800d750:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d754:	4618      	mov	r0, r3
 800d756:	3728      	adds	r7, #40	; 0x28
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	08018f58 	.word	0x08018f58
 800d760:	08018f88 	.word	0x08018f88
 800d764:	08018fb8 	.word	0x08018fb8
 800d768:	08018fe0 	.word	0x08018fe0
 800d76c:	08019014 	.word	0x08019014
 800d770:	08019040 	.word	0x08019040

0800d774 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af02      	add	r7, sp, #8
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	460b      	mov	r3, r1
 800d77e:	807b      	strh	r3, [r7, #2]
 800d780:	4613      	mov	r3, r2
 800d782:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d784:	883b      	ldrh	r3, [r7, #0]
 800d786:	2b41      	cmp	r3, #65	; 0x41
 800d788:	d009      	beq.n	800d79e <pbuf_alloc_reference+0x2a>
 800d78a:	883b      	ldrh	r3, [r7, #0]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d006      	beq.n	800d79e <pbuf_alloc_reference+0x2a>
 800d790:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <pbuf_alloc_reference+0x5c>)
 800d792:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d796:	490f      	ldr	r1, [pc, #60]	; (800d7d4 <pbuf_alloc_reference+0x60>)
 800d798:	480f      	ldr	r0, [pc, #60]	; (800d7d8 <pbuf_alloc_reference+0x64>)
 800d79a:	f009 ff7d 	bl	8017698 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d79e:	2007      	movs	r0, #7
 800d7a0:	f7ff faf0 	bl	800cd84 <memp_malloc>
 800d7a4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e00b      	b.n	800d7c8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d7b0:	8879      	ldrh	r1, [r7, #2]
 800d7b2:	887a      	ldrh	r2, [r7, #2]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	9301      	str	r3, [sp, #4]
 800d7b8:	883b      	ldrh	r3, [r7, #0]
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	6879      	ldr	r1, [r7, #4]
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f7ff feb7 	bl	800d534 <pbuf_init_alloced_pbuf>
  return p;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	08018f58 	.word	0x08018f58
 800d7d4:	0801905c 	.word	0x0801905c
 800d7d8:	08018fb8 	.word	0x08018fb8

0800d7dc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	607b      	str	r3, [r7, #4]
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73fb      	strb	r3, [r7, #15]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	81bb      	strh	r3, [r7, #12]
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d7f4:	8a7b      	ldrh	r3, [r7, #18]
 800d7f6:	3303      	adds	r3, #3
 800d7f8:	f023 0203 	bic.w	r2, r3, #3
 800d7fc:	89bb      	ldrh	r3, [r7, #12]
 800d7fe:	441a      	add	r2, r3
 800d800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d802:	429a      	cmp	r2, r3
 800d804:	d901      	bls.n	800d80a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d806:	2300      	movs	r3, #0
 800d808:	e018      	b.n	800d83c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d007      	beq.n	800d820 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d810:	8a7b      	ldrh	r3, [r7, #18]
 800d812:	3303      	adds	r3, #3
 800d814:	f023 0303 	bic.w	r3, r3, #3
 800d818:	6a3a      	ldr	r2, [r7, #32]
 800d81a:	4413      	add	r3, r2
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	e001      	b.n	800d824 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d820:	2300      	movs	r3, #0
 800d822:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	89b9      	ldrh	r1, [r7, #12]
 800d828:	89ba      	ldrh	r2, [r7, #12]
 800d82a:	2302      	movs	r3, #2
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	897b      	ldrh	r3, [r7, #10]
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	460b      	mov	r3, r1
 800d834:	6979      	ldr	r1, [r7, #20]
 800d836:	f7ff fe7d 	bl	800d534 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d83a:	687b      	ldr	r3, [r7, #4]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	460b      	mov	r3, r1
 800d84e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d106      	bne.n	800d864 <pbuf_realloc+0x20>
 800d856:	4b3a      	ldr	r3, [pc, #232]	; (800d940 <pbuf_realloc+0xfc>)
 800d858:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d85c:	4939      	ldr	r1, [pc, #228]	; (800d944 <pbuf_realloc+0x100>)
 800d85e:	483a      	ldr	r0, [pc, #232]	; (800d948 <pbuf_realloc+0x104>)
 800d860:	f009 ff1a 	bl	8017698 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	891b      	ldrh	r3, [r3, #8]
 800d868:	887a      	ldrh	r2, [r7, #2]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d263      	bcs.n	800d936 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	891a      	ldrh	r2, [r3, #8]
 800d872:	887b      	ldrh	r3, [r7, #2]
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d878:	887b      	ldrh	r3, [r7, #2]
 800d87a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d880:	e018      	b.n	800d8b4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	895b      	ldrh	r3, [r3, #10]
 800d886:	897a      	ldrh	r2, [r7, #10]
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	891a      	ldrh	r2, [r3, #8]
 800d890:	893b      	ldrh	r3, [r7, #8]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	b29a      	uxth	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d106      	bne.n	800d8b4 <pbuf_realloc+0x70>
 800d8a6:	4b26      	ldr	r3, [pc, #152]	; (800d940 <pbuf_realloc+0xfc>)
 800d8a8:	f240 12af 	movw	r2, #431	; 0x1af
 800d8ac:	4927      	ldr	r1, [pc, #156]	; (800d94c <pbuf_realloc+0x108>)
 800d8ae:	4826      	ldr	r0, [pc, #152]	; (800d948 <pbuf_realloc+0x104>)
 800d8b0:	f009 fef2 	bl	8017698 <iprintf>
  while (rem_len > q->len) {
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	895b      	ldrh	r3, [r3, #10]
 800d8b8:	897a      	ldrh	r2, [r7, #10]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d8e1      	bhi.n	800d882 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	7b1b      	ldrb	r3, [r3, #12]
 800d8c2:	f003 030f 	and.w	r3, r3, #15
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d121      	bne.n	800d90e <pbuf_realloc+0xca>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	895b      	ldrh	r3, [r3, #10]
 800d8ce:	897a      	ldrh	r2, [r7, #10]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d01c      	beq.n	800d90e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	7b5b      	ldrb	r3, [r3, #13]
 800d8d8:	f003 0302 	and.w	r3, r3, #2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d116      	bne.n	800d90e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	685a      	ldr	r2, [r3, #4]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	897b      	ldrh	r3, [r7, #10]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f7fe ffba 	bl	800c86c <mem_trim>
 800d8f8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d106      	bne.n	800d90e <pbuf_realloc+0xca>
 800d900:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <pbuf_realloc+0xfc>)
 800d902:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d906:	4912      	ldr	r1, [pc, #72]	; (800d950 <pbuf_realloc+0x10c>)
 800d908:	480f      	ldr	r0, [pc, #60]	; (800d948 <pbuf_realloc+0x104>)
 800d90a:	f009 fec5 	bl	8017698 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	897a      	ldrh	r2, [r7, #10]
 800d912:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	895a      	ldrh	r2, [r3, #10]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d004      	beq.n	800d92e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 f911 	bl	800db50 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	e000      	b.n	800d938 <pbuf_realloc+0xf4>
    return;
 800d936:	bf00      	nop

}
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	08018f58 	.word	0x08018f58
 800d944:	08019070 	.word	0x08019070
 800d948:	08018fb8 	.word	0x08018fb8
 800d94c:	08019088 	.word	0x08019088
 800d950:	080190a0 	.word	0x080190a0

0800d954 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	4613      	mov	r3, r2
 800d960:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d106      	bne.n	800d976 <pbuf_add_header_impl+0x22>
 800d968:	4b2b      	ldr	r3, [pc, #172]	; (800da18 <pbuf_add_header_impl+0xc4>)
 800d96a:	f240 12df 	movw	r2, #479	; 0x1df
 800d96e:	492b      	ldr	r1, [pc, #172]	; (800da1c <pbuf_add_header_impl+0xc8>)
 800d970:	482b      	ldr	r0, [pc, #172]	; (800da20 <pbuf_add_header_impl+0xcc>)
 800d972:	f009 fe91 	bl	8017698 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <pbuf_add_header_impl+0x30>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d982:	d301      	bcc.n	800d988 <pbuf_add_header_impl+0x34>
    return 1;
 800d984:	2301      	movs	r3, #1
 800d986:	e043      	b.n	800da10 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <pbuf_add_header_impl+0x3e>
    return 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	e03e      	b.n	800da10 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	891a      	ldrh	r2, [r3, #8]
 800d99a:	8a7b      	ldrh	r3, [r7, #18]
 800d99c:	4413      	add	r3, r2
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	8a7a      	ldrh	r2, [r7, #18]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d901      	bls.n	800d9aa <pbuf_add_header_impl+0x56>
    return 1;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e032      	b.n	800da10 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	7b1b      	ldrb	r3, [r3, #12]
 800d9ae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d9b0:	8a3b      	ldrh	r3, [r7, #16]
 800d9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00c      	beq.n	800d9d4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	425b      	negs	r3, r3
 800d9c2:	4413      	add	r3, r2
 800d9c4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	3310      	adds	r3, #16
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d20d      	bcs.n	800d9ec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e01d      	b.n	800da10 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d9d4:	79fb      	ldrb	r3, [r7, #7]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d006      	beq.n	800d9e8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	425b      	negs	r3, r3
 800d9e2:	4413      	add	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]
 800d9e6:	e001      	b.n	800d9ec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e011      	b.n	800da10 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	895a      	ldrh	r2, [r3, #10]
 800d9f6:	8a7b      	ldrh	r3, [r7, #18]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	891a      	ldrh	r2, [r3, #8]
 800da04:	8a7b      	ldrh	r3, [r7, #18]
 800da06:	4413      	add	r3, r2
 800da08:	b29a      	uxth	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	811a      	strh	r2, [r3, #8]


  return 0;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	08018f58 	.word	0x08018f58
 800da1c:	080190bc 	.word	0x080190bc
 800da20:	08018fb8 	.word	0x08018fb8

0800da24 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800da2e:	2200      	movs	r2, #0
 800da30:	6839      	ldr	r1, [r7, #0]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff ff8e 	bl	800d954 <pbuf_add_header_impl>
 800da38:	4603      	mov	r3, r0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
	...

0800da44 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d106      	bne.n	800da62 <pbuf_remove_header+0x1e>
 800da54:	4b20      	ldr	r3, [pc, #128]	; (800dad8 <pbuf_remove_header+0x94>)
 800da56:	f240 224b 	movw	r2, #587	; 0x24b
 800da5a:	4920      	ldr	r1, [pc, #128]	; (800dadc <pbuf_remove_header+0x98>)
 800da5c:	4820      	ldr	r0, [pc, #128]	; (800dae0 <pbuf_remove_header+0x9c>)
 800da5e:	f009 fe1b 	bl	8017698 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d003      	beq.n	800da70 <pbuf_remove_header+0x2c>
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da6e:	d301      	bcc.n	800da74 <pbuf_remove_header+0x30>
    return 1;
 800da70:	2301      	movs	r3, #1
 800da72:	e02c      	b.n	800dace <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d101      	bne.n	800da7e <pbuf_remove_header+0x3a>
    return 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	e027      	b.n	800dace <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	895b      	ldrh	r3, [r3, #10]
 800da86:	89fa      	ldrh	r2, [r7, #14]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d908      	bls.n	800da9e <pbuf_remove_header+0x5a>
 800da8c:	4b12      	ldr	r3, [pc, #72]	; (800dad8 <pbuf_remove_header+0x94>)
 800da8e:	f240 2255 	movw	r2, #597	; 0x255
 800da92:	4914      	ldr	r1, [pc, #80]	; (800dae4 <pbuf_remove_header+0xa0>)
 800da94:	4812      	ldr	r0, [pc, #72]	; (800dae0 <pbuf_remove_header+0x9c>)
 800da96:	f009 fdff 	bl	8017698 <iprintf>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e017      	b.n	800dace <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685a      	ldr	r2, [r3, #4]
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	441a      	add	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	895a      	ldrh	r2, [r3, #10]
 800dab4:	89fb      	ldrh	r3, [r7, #14]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	891a      	ldrh	r2, [r3, #8]
 800dac2:	89fb      	ldrh	r3, [r7, #14]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	08018f58 	.word	0x08018f58
 800dadc:	080190bc 	.word	0x080190bc
 800dae0:	08018fb8 	.word	0x08018fb8
 800dae4:	080190c8 	.word	0x080190c8

0800dae8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	460b      	mov	r3, r1
 800daf2:	807b      	strh	r3, [r7, #2]
 800daf4:	4613      	mov	r3, r2
 800daf6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800daf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	da08      	bge.n	800db12 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800db00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db04:	425b      	negs	r3, r3
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7ff ff9b 	bl	800da44 <pbuf_remove_header>
 800db0e:	4603      	mov	r3, r0
 800db10:	e007      	b.n	800db22 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800db12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db16:	787a      	ldrb	r2, [r7, #1]
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff ff1a 	bl	800d954 <pbuf_add_header_impl>
 800db20:	4603      	mov	r3, r0
  }
}
 800db22:	4618      	mov	r0, r3
 800db24:	3708      	adds	r7, #8
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	460b      	mov	r3, r1
 800db34:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800db36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db3a:	2201      	movs	r2, #1
 800db3c:	4619      	mov	r1, r3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff ffd2 	bl	800dae8 <pbuf_header_impl>
 800db44:	4603      	mov	r3, r0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
	...

0800db50 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10b      	bne.n	800db76 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d106      	bne.n	800db72 <pbuf_free+0x22>
 800db64:	4b38      	ldr	r3, [pc, #224]	; (800dc48 <pbuf_free+0xf8>)
 800db66:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800db6a:	4938      	ldr	r1, [pc, #224]	; (800dc4c <pbuf_free+0xfc>)
 800db6c:	4838      	ldr	r0, [pc, #224]	; (800dc50 <pbuf_free+0x100>)
 800db6e:	f009 fd93 	bl	8017698 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800db72:	2300      	movs	r3, #0
 800db74:	e063      	b.n	800dc3e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800db7a:	e05c      	b.n	800dc36 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7b9b      	ldrb	r3, [r3, #14]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d106      	bne.n	800db92 <pbuf_free+0x42>
 800db84:	4b30      	ldr	r3, [pc, #192]	; (800dc48 <pbuf_free+0xf8>)
 800db86:	f240 22f1 	movw	r2, #753	; 0x2f1
 800db8a:	4932      	ldr	r1, [pc, #200]	; (800dc54 <pbuf_free+0x104>)
 800db8c:	4830      	ldr	r0, [pc, #192]	; (800dc50 <pbuf_free+0x100>)
 800db8e:	f009 fd83 	bl	8017698 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	7b9b      	ldrb	r3, [r3, #14]
 800db96:	3b01      	subs	r3, #1
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	739a      	strb	r2, [r3, #14]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	7b9b      	ldrb	r3, [r3, #14]
 800dba2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dba4:	7dbb      	ldrb	r3, [r7, #22]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d143      	bne.n	800dc32 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	7b1b      	ldrb	r3, [r3, #12]
 800dbb4:	f003 030f 	and.w	r3, r3, #15
 800dbb8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	7b5b      	ldrb	r3, [r3, #13]
 800dbbe:	f003 0302 	and.w	r3, r3, #2
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d011      	beq.n	800dbea <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d106      	bne.n	800dbe0 <pbuf_free+0x90>
 800dbd2:	4b1d      	ldr	r3, [pc, #116]	; (800dc48 <pbuf_free+0xf8>)
 800dbd4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dbd8:	491f      	ldr	r1, [pc, #124]	; (800dc58 <pbuf_free+0x108>)
 800dbda:	481d      	ldr	r0, [pc, #116]	; (800dc50 <pbuf_free+0x100>)
 800dbdc:	f009 fd5c 	bl	8017698 <iprintf>
        pc->custom_free_function(p);
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	4798      	blx	r3
 800dbe8:	e01d      	b.n	800dc26 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d104      	bne.n	800dbfa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800dbf0:	6879      	ldr	r1, [r7, #4]
 800dbf2:	2008      	movs	r0, #8
 800dbf4:	f7ff f936 	bl	800ce64 <memp_free>
 800dbf8:	e015      	b.n	800dc26 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d104      	bne.n	800dc0a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	2007      	movs	r0, #7
 800dc04:	f7ff f92e 	bl	800ce64 <memp_free>
 800dc08:	e00d      	b.n	800dc26 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dc0a:	7bfb      	ldrb	r3, [r7, #15]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d103      	bne.n	800dc18 <pbuf_free+0xc8>
          mem_free(p);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7fe fdc1 	bl	800c798 <mem_free>
 800dc16:	e006      	b.n	800dc26 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dc18:	4b0b      	ldr	r3, [pc, #44]	; (800dc48 <pbuf_free+0xf8>)
 800dc1a:	f240 320f 	movw	r2, #783	; 0x30f
 800dc1e:	490f      	ldr	r1, [pc, #60]	; (800dc5c <pbuf_free+0x10c>)
 800dc20:	480b      	ldr	r0, [pc, #44]	; (800dc50 <pbuf_free+0x100>)
 800dc22:	f009 fd39 	bl	8017698 <iprintf>
        }
      }
      count++;
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	607b      	str	r3, [r7, #4]
 800dc30:	e001      	b.n	800dc36 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d19f      	bne.n	800db7c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	08018f58 	.word	0x08018f58
 800dc4c:	080190bc 	.word	0x080190bc
 800dc50:	08018fb8 	.word	0x08018fb8
 800dc54:	080190e8 	.word	0x080190e8
 800dc58:	08019100 	.word	0x08019100
 800dc5c:	08019124 	.word	0x08019124

0800dc60 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dc6c:	e005      	b.n	800dc7a <pbuf_clen+0x1a>
    ++len;
 800dc6e:	89fb      	ldrh	r3, [r7, #14]
 800dc70:	3301      	adds	r3, #1
 800dc72:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1f6      	bne.n	800dc6e <pbuf_clen+0xe>
  }
  return len;
 800dc80:	89fb      	ldrh	r3, [r7, #14]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3714      	adds	r7, #20
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
	...

0800dc90 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d010      	beq.n	800dcc0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	7b9b      	ldrb	r3, [r3, #14]
 800dca2:	3301      	adds	r3, #1
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7b9b      	ldrb	r3, [r3, #14]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d106      	bne.n	800dcc0 <pbuf_ref+0x30>
 800dcb2:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <pbuf_ref+0x38>)
 800dcb4:	f240 3242 	movw	r2, #834	; 0x342
 800dcb8:	4904      	ldr	r1, [pc, #16]	; (800dccc <pbuf_ref+0x3c>)
 800dcba:	4805      	ldr	r0, [pc, #20]	; (800dcd0 <pbuf_ref+0x40>)
 800dcbc:	f009 fcec 	bl	8017698 <iprintf>
  }
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	08018f58 	.word	0x08018f58
 800dccc:	08019138 	.word	0x08019138
 800dcd0:	08018fb8 	.word	0x08018fb8

0800dcd4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <pbuf_cat+0x16>
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d107      	bne.n	800dcfa <pbuf_cat+0x26>
 800dcea:	4b20      	ldr	r3, [pc, #128]	; (800dd6c <pbuf_cat+0x98>)
 800dcec:	f240 3259 	movw	r2, #857	; 0x359
 800dcf0:	491f      	ldr	r1, [pc, #124]	; (800dd70 <pbuf_cat+0x9c>)
 800dcf2:	4820      	ldr	r0, [pc, #128]	; (800dd74 <pbuf_cat+0xa0>)
 800dcf4:	f009 fcd0 	bl	8017698 <iprintf>
 800dcf8:	e034      	b.n	800dd64 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	e00a      	b.n	800dd16 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	891a      	ldrh	r2, [r3, #8]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	891b      	ldrh	r3, [r3, #8]
 800dd08:	4413      	add	r3, r2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1f0      	bne.n	800dd00 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	891a      	ldrh	r2, [r3, #8]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	895b      	ldrh	r3, [r3, #10]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d006      	beq.n	800dd38 <pbuf_cat+0x64>
 800dd2a:	4b10      	ldr	r3, [pc, #64]	; (800dd6c <pbuf_cat+0x98>)
 800dd2c:	f240 3262 	movw	r2, #866	; 0x362
 800dd30:	4911      	ldr	r1, [pc, #68]	; (800dd78 <pbuf_cat+0xa4>)
 800dd32:	4810      	ldr	r0, [pc, #64]	; (800dd74 <pbuf_cat+0xa0>)
 800dd34:	f009 fcb0 	bl	8017698 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d006      	beq.n	800dd4e <pbuf_cat+0x7a>
 800dd40:	4b0a      	ldr	r3, [pc, #40]	; (800dd6c <pbuf_cat+0x98>)
 800dd42:	f240 3263 	movw	r2, #867	; 0x363
 800dd46:	490d      	ldr	r1, [pc, #52]	; (800dd7c <pbuf_cat+0xa8>)
 800dd48:	480a      	ldr	r0, [pc, #40]	; (800dd74 <pbuf_cat+0xa0>)
 800dd4a:	f009 fca5 	bl	8017698 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	891a      	ldrh	r2, [r3, #8]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	891b      	ldrh	r3, [r3, #8]
 800dd56:	4413      	add	r3, r2
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	08018f58 	.word	0x08018f58
 800dd70:	0801914c 	.word	0x0801914c
 800dd74:	08018fb8 	.word	0x08018fb8
 800dd78:	08019184 	.word	0x08019184
 800dd7c:	080191b4 	.word	0x080191b4

0800dd80 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dd8a:	6839      	ldr	r1, [r7, #0]
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ffa1 	bl	800dcd4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dd92:	6838      	ldr	r0, [r7, #0]
 800dd94:	f7ff ff7c 	bl	800dc90 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d008      	beq.n	800ddca <pbuf_copy+0x2a>
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <pbuf_copy+0x2a>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	891a      	ldrh	r2, [r3, #8]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	891b      	ldrh	r3, [r3, #8]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d209      	bcs.n	800ddde <pbuf_copy+0x3e>
 800ddca:	4b57      	ldr	r3, [pc, #348]	; (800df28 <pbuf_copy+0x188>)
 800ddcc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ddd0:	4956      	ldr	r1, [pc, #344]	; (800df2c <pbuf_copy+0x18c>)
 800ddd2:	4857      	ldr	r0, [pc, #348]	; (800df30 <pbuf_copy+0x190>)
 800ddd4:	f009 fc60 	bl	8017698 <iprintf>
 800ddd8:	f06f 030f 	mvn.w	r3, #15
 800dddc:	e09f      	b.n	800df1e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	461a      	mov	r2, r3
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	1ad2      	subs	r2, r2, r3
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	895b      	ldrh	r3, [r3, #10]
 800ddec:	4619      	mov	r1, r3
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	1acb      	subs	r3, r1, r3
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d306      	bcc.n	800de04 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	895b      	ldrh	r3, [r3, #10]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	e005      	b.n	800de10 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	895b      	ldrh	r3, [r3, #10]
 800de08:	461a      	mov	r2, r3
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685a      	ldr	r2, [r3, #4]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	18d0      	adds	r0, r2, r3
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	4413      	add	r3, r2
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	4619      	mov	r1, r3
 800de24:	f009 fe77 	bl	8017b16 <memcpy>
    offset_to += len;
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	4413      	add	r3, r2
 800de2e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	4413      	add	r3, r2
 800de36:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	895b      	ldrh	r3, [r3, #10]
 800de3c:	461a      	mov	r2, r3
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	4293      	cmp	r3, r2
 800de42:	d906      	bls.n	800de52 <pbuf_copy+0xb2>
 800de44:	4b38      	ldr	r3, [pc, #224]	; (800df28 <pbuf_copy+0x188>)
 800de46:	f240 32d9 	movw	r2, #985	; 0x3d9
 800de4a:	493a      	ldr	r1, [pc, #232]	; (800df34 <pbuf_copy+0x194>)
 800de4c:	4838      	ldr	r0, [pc, #224]	; (800df30 <pbuf_copy+0x190>)
 800de4e:	f009 fc23 	bl	8017698 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	895b      	ldrh	r3, [r3, #10]
 800de56:	461a      	mov	r2, r3
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d906      	bls.n	800de6c <pbuf_copy+0xcc>
 800de5e:	4b32      	ldr	r3, [pc, #200]	; (800df28 <pbuf_copy+0x188>)
 800de60:	f240 32da 	movw	r2, #986	; 0x3da
 800de64:	4934      	ldr	r1, [pc, #208]	; (800df38 <pbuf_copy+0x198>)
 800de66:	4832      	ldr	r0, [pc, #200]	; (800df30 <pbuf_copy+0x190>)
 800de68:	f009 fc16 	bl	8017698 <iprintf>
    if (offset_from >= p_from->len) {
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	895b      	ldrh	r3, [r3, #10]
 800de70:	461a      	mov	r2, r3
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	4293      	cmp	r3, r2
 800de76:	d304      	bcc.n	800de82 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	895b      	ldrh	r3, [r3, #10]
 800de86:	461a      	mov	r2, r3
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d114      	bne.n	800deb8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10c      	bne.n	800deb8 <pbuf_copy+0x118>
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <pbuf_copy+0x118>
 800dea4:	4b20      	ldr	r3, [pc, #128]	; (800df28 <pbuf_copy+0x188>)
 800dea6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800deaa:	4924      	ldr	r1, [pc, #144]	; (800df3c <pbuf_copy+0x19c>)
 800deac:	4820      	ldr	r0, [pc, #128]	; (800df30 <pbuf_copy+0x190>)
 800deae:	f009 fbf3 	bl	8017698 <iprintf>
 800deb2:	f06f 030f 	mvn.w	r3, #15
 800deb6:	e032      	b.n	800df1e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d013      	beq.n	800dee6 <pbuf_copy+0x146>
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	895a      	ldrh	r2, [r3, #10]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	891b      	ldrh	r3, [r3, #8]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d10d      	bne.n	800dee6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d009      	beq.n	800dee6 <pbuf_copy+0x146>
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <pbuf_copy+0x188>)
 800ded4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ded8:	4919      	ldr	r1, [pc, #100]	; (800df40 <pbuf_copy+0x1a0>)
 800deda:	4815      	ldr	r0, [pc, #84]	; (800df30 <pbuf_copy+0x190>)
 800dedc:	f009 fbdc 	bl	8017698 <iprintf>
 800dee0:	f06f 0305 	mvn.w	r3, #5
 800dee4:	e01b      	b.n	800df1e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d013      	beq.n	800df14 <pbuf_copy+0x174>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	895a      	ldrh	r2, [r3, #10]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	891b      	ldrh	r3, [r3, #8]
 800def4:	429a      	cmp	r2, r3
 800def6:	d10d      	bne.n	800df14 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d009      	beq.n	800df14 <pbuf_copy+0x174>
 800df00:	4b09      	ldr	r3, [pc, #36]	; (800df28 <pbuf_copy+0x188>)
 800df02:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800df06:	490e      	ldr	r1, [pc, #56]	; (800df40 <pbuf_copy+0x1a0>)
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <pbuf_copy+0x190>)
 800df0a:	f009 fbc5 	bl	8017698 <iprintf>
 800df0e:	f06f 0305 	mvn.w	r3, #5
 800df12:	e004      	b.n	800df1e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	f47f af61 	bne.w	800ddde <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	08018f58 	.word	0x08018f58
 800df2c:	08019200 	.word	0x08019200
 800df30:	08018fb8 	.word	0x08018fb8
 800df34:	08019230 	.word	0x08019230
 800df38:	08019248 	.word	0x08019248
 800df3c:	08019264 	.word	0x08019264
 800df40:	08019274 	.word	0x08019274

0800df44 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4611      	mov	r1, r2
 800df50:	461a      	mov	r2, r3
 800df52:	460b      	mov	r3, r1
 800df54:	80fb      	strh	r3, [r7, #6]
 800df56:	4613      	mov	r3, r2
 800df58:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d108      	bne.n	800df7a <pbuf_copy_partial+0x36>
 800df68:	4b2b      	ldr	r3, [pc, #172]	; (800e018 <pbuf_copy_partial+0xd4>)
 800df6a:	f240 420a 	movw	r2, #1034	; 0x40a
 800df6e:	492b      	ldr	r1, [pc, #172]	; (800e01c <pbuf_copy_partial+0xd8>)
 800df70:	482b      	ldr	r0, [pc, #172]	; (800e020 <pbuf_copy_partial+0xdc>)
 800df72:	f009 fb91 	bl	8017698 <iprintf>
 800df76:	2300      	movs	r3, #0
 800df78:	e04a      	b.n	800e010 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d108      	bne.n	800df92 <pbuf_copy_partial+0x4e>
 800df80:	4b25      	ldr	r3, [pc, #148]	; (800e018 <pbuf_copy_partial+0xd4>)
 800df82:	f240 420b 	movw	r2, #1035	; 0x40b
 800df86:	4927      	ldr	r1, [pc, #156]	; (800e024 <pbuf_copy_partial+0xe0>)
 800df88:	4825      	ldr	r0, [pc, #148]	; (800e020 <pbuf_copy_partial+0xdc>)
 800df8a:	f009 fb85 	bl	8017698 <iprintf>
 800df8e:	2300      	movs	r3, #0
 800df90:	e03e      	b.n	800e010 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	61fb      	str	r3, [r7, #28]
 800df96:	e034      	b.n	800e002 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800df98:	88bb      	ldrh	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <pbuf_copy_partial+0x70>
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	895b      	ldrh	r3, [r3, #10]
 800dfa2:	88ba      	ldrh	r2, [r7, #4]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d305      	bcc.n	800dfb4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	895b      	ldrh	r3, [r3, #10]
 800dfac:	88ba      	ldrh	r2, [r7, #4]
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	80bb      	strh	r3, [r7, #4]
 800dfb2:	e023      	b.n	800dffc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	895a      	ldrh	r2, [r3, #10]
 800dfb8:	88bb      	ldrh	r3, [r7, #4]
 800dfba:	1ad3      	subs	r3, r2, r3
 800dfbc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dfbe:	8b3a      	ldrh	r2, [r7, #24]
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d901      	bls.n	800dfca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
 800dfc8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dfca:	8b7b      	ldrh	r3, [r7, #26]
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	18d0      	adds	r0, r2, r3
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	88bb      	ldrh	r3, [r7, #4]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	8b3a      	ldrh	r2, [r7, #24]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	f009 fd9b 	bl	8017b16 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dfe0:	8afa      	ldrh	r2, [r7, #22]
 800dfe2:	8b3b      	ldrh	r3, [r7, #24]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dfe8:	8b7a      	ldrh	r2, [r7, #26]
 800dfea:	8b3b      	ldrh	r3, [r7, #24]
 800dfec:	4413      	add	r3, r2
 800dfee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dff0:	88fa      	ldrh	r2, [r7, #6]
 800dff2:	8b3b      	ldrh	r3, [r7, #24]
 800dff4:	1ad3      	subs	r3, r2, r3
 800dff6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	88fb      	ldrh	r3, [r7, #6]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <pbuf_copy_partial+0xca>
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1c4      	bne.n	800df98 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e00e:	8afb      	ldrh	r3, [r7, #22]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3720      	adds	r7, #32
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	08018f58 	.word	0x08018f58
 800e01c:	080192a0 	.word	0x080192a0
 800e020:	08018fb8 	.word	0x08018fb8
 800e024:	080192c0 	.word	0x080192c0

0800e028 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	603a      	str	r2, [r7, #0]
 800e032:	71fb      	strb	r3, [r7, #7]
 800e034:	460b      	mov	r3, r1
 800e036:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	8919      	ldrh	r1, [r3, #8]
 800e03c:	88ba      	ldrh	r2, [r7, #4]
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff faa1 	bl	800d588 <pbuf_alloc>
 800e046:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <pbuf_clone+0x2a>
    return NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	e011      	b.n	800e076 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f7ff fea3 	bl	800dda0 <pbuf_copy>
 800e05a:	4603      	mov	r3, r0
 800e05c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e05e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d006      	beq.n	800e074 <pbuf_clone+0x4c>
 800e066:	4b06      	ldr	r3, [pc, #24]	; (800e080 <pbuf_clone+0x58>)
 800e068:	f240 5224 	movw	r2, #1316	; 0x524
 800e06c:	4905      	ldr	r1, [pc, #20]	; (800e084 <pbuf_clone+0x5c>)
 800e06e:	4806      	ldr	r0, [pc, #24]	; (800e088 <pbuf_clone+0x60>)
 800e070:	f009 fb12 	bl	8017698 <iprintf>
  return q;
 800e074:	68fb      	ldr	r3, [r7, #12]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	08018f58 	.word	0x08018f58
 800e084:	080193cc 	.word	0x080193cc
 800e088:	08018fb8 	.word	0x08018fb8

0800e08c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e090:	f009 f976 	bl	8017380 <rand>
 800e094:	4603      	mov	r3, r0
 800e096:	b29b      	uxth	r3, r3
 800e098:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	4b01      	ldr	r3, [pc, #4]	; (800e0ac <tcp_init+0x20>)
 800e0a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0a8:	bf00      	nop
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20000020 	.word	0x20000020

0800e0b0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	7d1b      	ldrb	r3, [r3, #20]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d105      	bne.n	800e0cc <tcp_free+0x1c>
 800e0c0:	4b06      	ldr	r3, [pc, #24]	; (800e0dc <tcp_free+0x2c>)
 800e0c2:	22d4      	movs	r2, #212	; 0xd4
 800e0c4:	4906      	ldr	r1, [pc, #24]	; (800e0e0 <tcp_free+0x30>)
 800e0c6:	4807      	ldr	r0, [pc, #28]	; (800e0e4 <tcp_free+0x34>)
 800e0c8:	f009 fae6 	bl	8017698 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e0cc:	6879      	ldr	r1, [r7, #4]
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	f7fe fec8 	bl	800ce64 <memp_free>
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	08019458 	.word	0x08019458
 800e0e0:	08019488 	.word	0x08019488
 800e0e4:	0801949c 	.word	0x0801949c

0800e0e8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d105      	bne.n	800e104 <tcp_free_listen+0x1c>
 800e0f8:	4b06      	ldr	r3, [pc, #24]	; (800e114 <tcp_free_listen+0x2c>)
 800e0fa:	22df      	movs	r2, #223	; 0xdf
 800e0fc:	4906      	ldr	r1, [pc, #24]	; (800e118 <tcp_free_listen+0x30>)
 800e0fe:	4807      	ldr	r0, [pc, #28]	; (800e11c <tcp_free_listen+0x34>)
 800e100:	f009 faca 	bl	8017698 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	2002      	movs	r0, #2
 800e108:	f7fe feac 	bl	800ce64 <memp_free>
}
 800e10c:	bf00      	nop
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	08019458 	.word	0x08019458
 800e118:	080194c4 	.word	0x080194c4
 800e11c:	0801949c 	.word	0x0801949c

0800e120 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e124:	f000 fea2 	bl	800ee6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e128:	4b07      	ldr	r3, [pc, #28]	; (800e148 <tcp_tmr+0x28>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	3301      	adds	r3, #1
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	4b05      	ldr	r3, [pc, #20]	; (800e148 <tcp_tmr+0x28>)
 800e132:	701a      	strb	r2, [r3, #0]
 800e134:	4b04      	ldr	r3, [pc, #16]	; (800e148 <tcp_tmr+0x28>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	f003 0301 	and.w	r3, r3, #1
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e140:	f000 fb54 	bl	800e7ec <tcp_slowtmr>
  }
}
 800e144:	bf00      	nop
 800e146:	bd80      	pop	{r7, pc}
 800e148:	200089a9 	.word	0x200089a9

0800e14c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d105      	bne.n	800e168 <tcp_remove_listener+0x1c>
 800e15c:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <tcp_remove_listener+0x48>)
 800e15e:	22ff      	movs	r2, #255	; 0xff
 800e160:	490d      	ldr	r1, [pc, #52]	; (800e198 <tcp_remove_listener+0x4c>)
 800e162:	480e      	ldr	r0, [pc, #56]	; (800e19c <tcp_remove_listener+0x50>)
 800e164:	f009 fa98 	bl	8017698 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	60fb      	str	r3, [r7, #12]
 800e16c:	e00a      	b.n	800e184 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	429a      	cmp	r2, r3
 800e176:	d102      	bne.n	800e17e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1f1      	bne.n	800e16e <tcp_remove_listener+0x22>
    }
  }
}
 800e18a:	bf00      	nop
 800e18c:	bf00      	nop
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	08019458 	.word	0x08019458
 800e198:	080194e0 	.word	0x080194e0
 800e19c:	0801949c 	.word	0x0801949c

0800e1a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d106      	bne.n	800e1bc <tcp_listen_closed+0x1c>
 800e1ae:	4b14      	ldr	r3, [pc, #80]	; (800e200 <tcp_listen_closed+0x60>)
 800e1b0:	f240 1211 	movw	r2, #273	; 0x111
 800e1b4:	4913      	ldr	r1, [pc, #76]	; (800e204 <tcp_listen_closed+0x64>)
 800e1b6:	4814      	ldr	r0, [pc, #80]	; (800e208 <tcp_listen_closed+0x68>)
 800e1b8:	f009 fa6e 	bl	8017698 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7d1b      	ldrb	r3, [r3, #20]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d006      	beq.n	800e1d2 <tcp_listen_closed+0x32>
 800e1c4:	4b0e      	ldr	r3, [pc, #56]	; (800e200 <tcp_listen_closed+0x60>)
 800e1c6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e1ca:	4910      	ldr	r1, [pc, #64]	; (800e20c <tcp_listen_closed+0x6c>)
 800e1cc:	480e      	ldr	r0, [pc, #56]	; (800e208 <tcp_listen_closed+0x68>)
 800e1ce:	f009 fa63 	bl	8017698 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	e00b      	b.n	800e1f0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e1d8:	4a0d      	ldr	r2, [pc, #52]	; (800e210 <tcp_listen_closed+0x70>)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7ff ffb1 	bl	800e14c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	60fb      	str	r3, [r7, #12]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d9f0      	bls.n	800e1d8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e1f6:	bf00      	nop
 800e1f8:	bf00      	nop
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	08019458 	.word	0x08019458
 800e204:	08019508 	.word	0x08019508
 800e208:	0801949c 	.word	0x0801949c
 800e20c:	08019514 	.word	0x08019514
 800e210:	0801b6cc 	.word	0x0801b6cc

0800e214 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e214:	b5b0      	push	{r4, r5, r7, lr}
 800e216:	b088      	sub	sp, #32
 800e218:	af04      	add	r7, sp, #16
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <tcp_close_shutdown+0x20>
 800e226:	4b63      	ldr	r3, [pc, #396]	; (800e3b4 <tcp_close_shutdown+0x1a0>)
 800e228:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e22c:	4962      	ldr	r1, [pc, #392]	; (800e3b8 <tcp_close_shutdown+0x1a4>)
 800e22e:	4863      	ldr	r0, [pc, #396]	; (800e3bc <tcp_close_shutdown+0x1a8>)
 800e230:	f009 fa32 	bl	8017698 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e234:	78fb      	ldrb	r3, [r7, #3]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d066      	beq.n	800e308 <tcp_close_shutdown+0xf4>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	7d1b      	ldrb	r3, [r3, #20]
 800e23e:	2b04      	cmp	r3, #4
 800e240:	d003      	beq.n	800e24a <tcp_close_shutdown+0x36>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7d1b      	ldrb	r3, [r3, #20]
 800e246:	2b07      	cmp	r3, #7
 800e248:	d15e      	bne.n	800e308 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d104      	bne.n	800e25c <tcp_close_shutdown+0x48>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e256:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e25a:	d055      	beq.n	800e308 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8b5b      	ldrh	r3, [r3, #26]
 800e260:	f003 0310 	and.w	r3, r3, #16
 800e264:	2b00      	cmp	r3, #0
 800e266:	d106      	bne.n	800e276 <tcp_close_shutdown+0x62>
 800e268:	4b52      	ldr	r3, [pc, #328]	; (800e3b4 <tcp_close_shutdown+0x1a0>)
 800e26a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e26e:	4954      	ldr	r1, [pc, #336]	; (800e3c0 <tcp_close_shutdown+0x1ac>)
 800e270:	4852      	ldr	r0, [pc, #328]	; (800e3bc <tcp_close_shutdown+0x1a8>)
 800e272:	f009 fa11 	bl	8017698 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e27e:	687d      	ldr	r5, [r7, #4]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3304      	adds	r3, #4
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	8ad2      	ldrh	r2, [r2, #22]
 800e288:	6879      	ldr	r1, [r7, #4]
 800e28a:	8b09      	ldrh	r1, [r1, #24]
 800e28c:	9102      	str	r1, [sp, #8]
 800e28e:	9201      	str	r2, [sp, #4]
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462b      	mov	r3, r5
 800e294:	4622      	mov	r2, r4
 800e296:	4601      	mov	r1, r0
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f004 fe91 	bl	8012fc0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f001 f8c6 	bl	800f430 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e2a4:	4b47      	ldr	r3, [pc, #284]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d105      	bne.n	800e2ba <tcp_close_shutdown+0xa6>
 800e2ae:	4b45      	ldr	r3, [pc, #276]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	4a43      	ldr	r2, [pc, #268]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2b6:	6013      	str	r3, [r2, #0]
 800e2b8:	e013      	b.n	800e2e2 <tcp_close_shutdown+0xce>
 800e2ba:	4b42      	ldr	r3, [pc, #264]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]
 800e2c0:	e00c      	b.n	800e2dc <tcp_close_shutdown+0xc8>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d104      	bne.n	800e2d6 <tcp_close_shutdown+0xc2>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	68da      	ldr	r2, [r3, #12]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	60da      	str	r2, [r3, #12]
 800e2d4:	e005      	b.n	800e2e2 <tcp_close_shutdown+0xce>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1ef      	bne.n	800e2c2 <tcp_close_shutdown+0xae>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	60da      	str	r2, [r3, #12]
 800e2e8:	4b37      	ldr	r3, [pc, #220]	; (800e3c8 <tcp_close_shutdown+0x1b4>)
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e2ee:	4b37      	ldr	r3, [pc, #220]	; (800e3cc <tcp_close_shutdown+0x1b8>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d102      	bne.n	800e2fe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e2f8:	f003 fd5e 	bl	8011db8 <tcp_trigger_input_pcb_close>
 800e2fc:	e002      	b.n	800e304 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff fed6 	bl	800e0b0 <tcp_free>
      }
      return ERR_OK;
 800e304:	2300      	movs	r3, #0
 800e306:	e050      	b.n	800e3aa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d03b      	beq.n	800e388 <tcp_close_shutdown+0x174>
 800e310:	2b02      	cmp	r3, #2
 800e312:	dc44      	bgt.n	800e39e <tcp_close_shutdown+0x18a>
 800e314:	2b00      	cmp	r3, #0
 800e316:	d002      	beq.n	800e31e <tcp_close_shutdown+0x10a>
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d02a      	beq.n	800e372 <tcp_close_shutdown+0x15e>
 800e31c:	e03f      	b.n	800e39e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	8adb      	ldrh	r3, [r3, #22]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d021      	beq.n	800e36a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e326:	4b2a      	ldr	r3, [pc, #168]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d105      	bne.n	800e33c <tcp_close_shutdown+0x128>
 800e330:	4b27      	ldr	r3, [pc, #156]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	4a26      	ldr	r2, [pc, #152]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	e013      	b.n	800e364 <tcp_close_shutdown+0x150>
 800e33c:	4b24      	ldr	r3, [pc, #144]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	60bb      	str	r3, [r7, #8]
 800e342:	e00c      	b.n	800e35e <tcp_close_shutdown+0x14a>
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d104      	bne.n	800e358 <tcp_close_shutdown+0x144>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	60da      	str	r2, [r3, #12]
 800e356:	e005      	b.n	800e364 <tcp_close_shutdown+0x150>
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	60bb      	str	r3, [r7, #8]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1ef      	bne.n	800e344 <tcp_close_shutdown+0x130>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff fea0 	bl	800e0b0 <tcp_free>
      break;
 800e370:	e01a      	b.n	800e3a8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff ff14 	bl	800e1a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e378:	6879      	ldr	r1, [r7, #4]
 800e37a:	4816      	ldr	r0, [pc, #88]	; (800e3d4 <tcp_close_shutdown+0x1c0>)
 800e37c:	f001 f8a8 	bl	800f4d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff feb1 	bl	800e0e8 <tcp_free_listen>
      break;
 800e386:	e00f      	b.n	800e3a8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	480e      	ldr	r0, [pc, #56]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e38c:	f001 f8a0 	bl	800f4d0 <tcp_pcb_remove>
 800e390:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <tcp_close_shutdown+0x1b4>)
 800e392:	2201      	movs	r2, #1
 800e394:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff fe8a 	bl	800e0b0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e39c:	e004      	b.n	800e3a8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 f81a 	bl	800e3d8 <tcp_close_shutdown_fin>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	e000      	b.n	800e3aa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e3a8:	2300      	movs	r3, #0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	08019458 	.word	0x08019458
 800e3b8:	0801952c 	.word	0x0801952c
 800e3bc:	0801949c 	.word	0x0801949c
 800e3c0:	0801954c 	.word	0x0801954c
 800e3c4:	200089a0 	.word	0x200089a0
 800e3c8:	200089a8 	.word	0x200089a8
 800e3cc:	200089e0 	.word	0x200089e0
 800e3d0:	20008998 	.word	0x20008998
 800e3d4:	2000899c 	.word	0x2000899c

0800e3d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_close_shutdown_fin+0x1c>
 800e3e6:	4b2e      	ldr	r3, [pc, #184]	; (800e4a0 <tcp_close_shutdown_fin+0xc8>)
 800e3e8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e3ec:	492d      	ldr	r1, [pc, #180]	; (800e4a4 <tcp_close_shutdown_fin+0xcc>)
 800e3ee:	482e      	ldr	r0, [pc, #184]	; (800e4a8 <tcp_close_shutdown_fin+0xd0>)
 800e3f0:	f009 f952 	bl	8017698 <iprintf>

  switch (pcb->state) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	7d1b      	ldrb	r3, [r3, #20]
 800e3f8:	2b07      	cmp	r3, #7
 800e3fa:	d020      	beq.n	800e43e <tcp_close_shutdown_fin+0x66>
 800e3fc:	2b07      	cmp	r3, #7
 800e3fe:	dc2b      	bgt.n	800e458 <tcp_close_shutdown_fin+0x80>
 800e400:	2b03      	cmp	r3, #3
 800e402:	d002      	beq.n	800e40a <tcp_close_shutdown_fin+0x32>
 800e404:	2b04      	cmp	r3, #4
 800e406:	d00d      	beq.n	800e424 <tcp_close_shutdown_fin+0x4c>
 800e408:	e026      	b.n	800e458 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f003 fee6 	bl	80121dc <tcp_send_fin>
 800e410:	4603      	mov	r3, r0
 800e412:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d11f      	bne.n	800e45c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2205      	movs	r2, #5
 800e420:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e422:	e01b      	b.n	800e45c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f003 fed9 	bl	80121dc <tcp_send_fin>
 800e42a:	4603      	mov	r3, r0
 800e42c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d114      	bne.n	800e460 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2205      	movs	r2, #5
 800e43a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e43c:	e010      	b.n	800e460 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f003 fecc 	bl	80121dc <tcp_send_fin>
 800e444:	4603      	mov	r3, r0
 800e446:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d109      	bne.n	800e464 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2209      	movs	r2, #9
 800e454:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e456:	e005      	b.n	800e464 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	e01c      	b.n	800e496 <tcp_close_shutdown_fin+0xbe>
      break;
 800e45c:	bf00      	nop
 800e45e:	e002      	b.n	800e466 <tcp_close_shutdown_fin+0x8e>
      break;
 800e460:	bf00      	nop
 800e462:	e000      	b.n	800e466 <tcp_close_shutdown_fin+0x8e>
      break;
 800e464:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d103      	bne.n	800e476 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f003 fff2 	bl	8012458 <tcp_output>
 800e474:	e00d      	b.n	800e492 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47e:	d108      	bne.n	800e492 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	8b5b      	ldrh	r3, [r3, #26]
 800e484:	f043 0308 	orr.w	r3, r3, #8
 800e488:	b29a      	uxth	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e48e:	2300      	movs	r3, #0
 800e490:	e001      	b.n	800e496 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e492:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	08019458 	.word	0x08019458
 800e4a4:	08019508 	.word	0x08019508
 800e4a8:	0801949c 	.word	0x0801949c

0800e4ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d109      	bne.n	800e4ce <tcp_close+0x22>
 800e4ba:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <tcp_close+0x4c>)
 800e4bc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e4c0:	490e      	ldr	r1, [pc, #56]	; (800e4fc <tcp_close+0x50>)
 800e4c2:	480f      	ldr	r0, [pc, #60]	; (800e500 <tcp_close+0x54>)
 800e4c4:	f009 f8e8 	bl	8017698 <iprintf>
 800e4c8:	f06f 030f 	mvn.w	r3, #15
 800e4cc:	e00f      	b.n	800e4ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	7d1b      	ldrb	r3, [r3, #20]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d006      	beq.n	800e4e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	8b5b      	ldrh	r3, [r3, #26]
 800e4da:	f043 0310 	orr.w	r3, r3, #16
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e4e4:	2101      	movs	r1, #1
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff fe94 	bl	800e214 <tcp_close_shutdown>
 800e4ec:	4603      	mov	r3, r0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3708      	adds	r7, #8
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	08019458 	.word	0x08019458
 800e4fc:	08019568 	.word	0x08019568
 800e500:	0801949c 	.word	0x0801949c

0800e504 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08e      	sub	sp, #56	; 0x38
 800e508:	af04      	add	r7, sp, #16
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d107      	bne.n	800e524 <tcp_abandon+0x20>
 800e514:	4b52      	ldr	r3, [pc, #328]	; (800e660 <tcp_abandon+0x15c>)
 800e516:	f240 223d 	movw	r2, #573	; 0x23d
 800e51a:	4952      	ldr	r1, [pc, #328]	; (800e664 <tcp_abandon+0x160>)
 800e51c:	4852      	ldr	r0, [pc, #328]	; (800e668 <tcp_abandon+0x164>)
 800e51e:	f009 f8bb 	bl	8017698 <iprintf>
 800e522:	e099      	b.n	800e658 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	7d1b      	ldrb	r3, [r3, #20]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d106      	bne.n	800e53a <tcp_abandon+0x36>
 800e52c:	4b4c      	ldr	r3, [pc, #304]	; (800e660 <tcp_abandon+0x15c>)
 800e52e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e532:	494e      	ldr	r1, [pc, #312]	; (800e66c <tcp_abandon+0x168>)
 800e534:	484c      	ldr	r0, [pc, #304]	; (800e668 <tcp_abandon+0x164>)
 800e536:	f009 f8af 	bl	8017698 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
 800e53e:	2b0a      	cmp	r3, #10
 800e540:	d107      	bne.n	800e552 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e542:	6879      	ldr	r1, [r7, #4]
 800e544:	484a      	ldr	r0, [pc, #296]	; (800e670 <tcp_abandon+0x16c>)
 800e546:	f000 ffc3 	bl	800f4d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7ff fdb0 	bl	800e0b0 <tcp_free>
 800e550:	e082      	b.n	800e658 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e55e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e564:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e56c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	691b      	ldr	r3, [r3, #16]
 800e572:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7d1b      	ldrb	r3, [r3, #20]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d126      	bne.n	800e5ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	8adb      	ldrh	r3, [r3, #22]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d02e      	beq.n	800e5e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e584:	4b3b      	ldr	r3, [pc, #236]	; (800e674 <tcp_abandon+0x170>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d105      	bne.n	800e59a <tcp_abandon+0x96>
 800e58e:	4b39      	ldr	r3, [pc, #228]	; (800e674 <tcp_abandon+0x170>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	4a37      	ldr	r2, [pc, #220]	; (800e674 <tcp_abandon+0x170>)
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	e013      	b.n	800e5c2 <tcp_abandon+0xbe>
 800e59a:	4b36      	ldr	r3, [pc, #216]	; (800e674 <tcp_abandon+0x170>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	61fb      	str	r3, [r7, #28]
 800e5a0:	e00c      	b.n	800e5bc <tcp_abandon+0xb8>
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d104      	bne.n	800e5b6 <tcp_abandon+0xb2>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	68da      	ldr	r2, [r3, #12]
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	60da      	str	r2, [r3, #12]
 800e5b4:	e005      	b.n	800e5c2 <tcp_abandon+0xbe>
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	61fb      	str	r3, [r7, #28]
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1ef      	bne.n	800e5a2 <tcp_abandon+0x9e>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	60da      	str	r2, [r3, #12]
 800e5c8:	e00b      	b.n	800e5e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8adb      	ldrh	r3, [r3, #22]
 800e5d2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5d4:	6879      	ldr	r1, [r7, #4]
 800e5d6:	4828      	ldr	r0, [pc, #160]	; (800e678 <tcp_abandon+0x174>)
 800e5d8:	f000 ff7a 	bl	800f4d0 <tcp_pcb_remove>
 800e5dc:	4b27      	ldr	r3, [pc, #156]	; (800e67c <tcp_abandon+0x178>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f000 fd1c 	bl	800f02c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d004      	beq.n	800e606 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e600:	4618      	mov	r0, r3
 800e602:	f000 fd13 	bl	800f02c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d004      	beq.n	800e618 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e612:	4618      	mov	r0, r3
 800e614:	f000 fd0a 	bl	800f02c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00e      	beq.n	800e63c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e61e:	6879      	ldr	r1, [r7, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3304      	adds	r3, #4
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	8b12      	ldrh	r2, [r2, #24]
 800e628:	9202      	str	r2, [sp, #8]
 800e62a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e62c:	9201      	str	r2, [sp, #4]
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	460b      	mov	r3, r1
 800e632:	697a      	ldr	r2, [r7, #20]
 800e634:	69b9      	ldr	r1, [r7, #24]
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f004 fcc2 	bl	8012fc0 <tcp_rst>
    }
    last_state = pcb->state;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	7d1b      	ldrb	r3, [r3, #20]
 800e640:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7ff fd34 	bl	800e0b0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d004      	beq.n	800e658 <tcp_abandon+0x154>
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	f06f 010c 	mvn.w	r1, #12
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	4798      	blx	r3
  }
}
 800e658:	3728      	adds	r7, #40	; 0x28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	08019458 	.word	0x08019458
 800e664:	0801959c 	.word	0x0801959c
 800e668:	0801949c 	.word	0x0801949c
 800e66c:	080195b8 	.word	0x080195b8
 800e670:	200089a4 	.word	0x200089a4
 800e674:	20008998 	.word	0x20008998
 800e678:	200089a0 	.word	0x200089a0
 800e67c:	200089a8 	.word	0x200089a8

0800e680 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e688:	2101      	movs	r1, #1
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff ff3a 	bl	800e504 <tcp_abandon>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <tcp_update_rcv_ann_wnd+0x1c>
 800e6a6:	4b25      	ldr	r3, [pc, #148]	; (800e73c <tcp_update_rcv_ann_wnd+0xa4>)
 800e6a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e6ac:	4924      	ldr	r1, [pc, #144]	; (800e740 <tcp_update_rcv_ann_wnd+0xa8>)
 800e6ae:	4825      	ldr	r0, [pc, #148]	; (800e744 <tcp_update_rcv_ann_wnd+0xac>)
 800e6b0:	f008 fff2 	bl	8017698 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e6bc:	4413      	add	r3, r2
 800e6be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e6c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e6cc:	bf28      	it	cs
 800e6ce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e6d2:	b292      	uxth	r2, r2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	db08      	blt.n	800e6f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	e020      	b.n	800e732 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	dd03      	ble.n	800e706 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e704:	e014      	b.n	800e730 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e718:	d306      	bcc.n	800e728 <tcp_update_rcv_ann_wnd+0x90>
 800e71a:	4b08      	ldr	r3, [pc, #32]	; (800e73c <tcp_update_rcv_ann_wnd+0xa4>)
 800e71c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e720:	4909      	ldr	r1, [pc, #36]	; (800e748 <tcp_update_rcv_ann_wnd+0xb0>)
 800e722:	4808      	ldr	r0, [pc, #32]	; (800e744 <tcp_update_rcv_ann_wnd+0xac>)
 800e724:	f008 ffb8 	bl	8017698 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e730:	2300      	movs	r3, #0
  }
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	08019458 	.word	0x08019458
 800e740:	080196b4 	.word	0x080196b4
 800e744:	0801949c 	.word	0x0801949c
 800e748:	080196d8 	.word	0x080196d8

0800e74c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d107      	bne.n	800e76e <tcp_recved+0x22>
 800e75e:	4b1f      	ldr	r3, [pc, #124]	; (800e7dc <tcp_recved+0x90>)
 800e760:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e764:	491e      	ldr	r1, [pc, #120]	; (800e7e0 <tcp_recved+0x94>)
 800e766:	481f      	ldr	r0, [pc, #124]	; (800e7e4 <tcp_recved+0x98>)
 800e768:	f008 ff96 	bl	8017698 <iprintf>
 800e76c:	e032      	b.n	800e7d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	7d1b      	ldrb	r3, [r3, #20]
 800e772:	2b01      	cmp	r3, #1
 800e774:	d106      	bne.n	800e784 <tcp_recved+0x38>
 800e776:	4b19      	ldr	r3, [pc, #100]	; (800e7dc <tcp_recved+0x90>)
 800e778:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e77c:	491a      	ldr	r1, [pc, #104]	; (800e7e8 <tcp_recved+0x9c>)
 800e77e:	4819      	ldr	r0, [pc, #100]	; (800e7e4 <tcp_recved+0x98>)
 800e780:	f008 ff8a 	bl	8017698 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e788:	887b      	ldrh	r3, [r7, #2]
 800e78a:	4413      	add	r3, r2
 800e78c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e78e:	89fb      	ldrh	r3, [r7, #14]
 800e790:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e794:	d804      	bhi.n	800e7a0 <tcp_recved+0x54>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e79a:	89fa      	ldrh	r2, [r7, #14]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d204      	bcs.n	800e7aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e7a8:	e002      	b.n	800e7b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	89fa      	ldrh	r2, [r7, #14]
 800e7ae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff ff71 	bl	800e698 <tcp_update_rcv_ann_wnd>
 800e7b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e7be:	d309      	bcc.n	800e7d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	8b5b      	ldrh	r3, [r3, #26]
 800e7c4:	f043 0302 	orr.w	r3, r3, #2
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f003 fe42 	bl	8012458 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	08019458 	.word	0x08019458
 800e7e0:	080196f4 	.word	0x080196f4
 800e7e4:	0801949c 	.word	0x0801949c
 800e7e8:	0801970c 	.word	0x0801970c

0800e7ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e7ec:	b5b0      	push	{r4, r5, r7, lr}
 800e7ee:	b090      	sub	sp, #64	; 0x40
 800e7f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e7f8:	4b94      	ldr	r3, [pc, #592]	; (800ea4c <tcp_slowtmr+0x260>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	4a93      	ldr	r2, [pc, #588]	; (800ea4c <tcp_slowtmr+0x260>)
 800e800:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e802:	4b93      	ldr	r3, [pc, #588]	; (800ea50 <tcp_slowtmr+0x264>)
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	3301      	adds	r3, #1
 800e808:	b2da      	uxtb	r2, r3
 800e80a:	4b91      	ldr	r3, [pc, #580]	; (800ea50 <tcp_slowtmr+0x264>)
 800e80c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e80e:	2300      	movs	r3, #0
 800e810:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e812:	4b90      	ldr	r3, [pc, #576]	; (800ea54 <tcp_slowtmr+0x268>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e818:	e29d      	b.n	800ed56 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	7d1b      	ldrb	r3, [r3, #20]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <tcp_slowtmr+0x44>
 800e822:	4b8d      	ldr	r3, [pc, #564]	; (800ea58 <tcp_slowtmr+0x26c>)
 800e824:	f240 42be 	movw	r2, #1214	; 0x4be
 800e828:	498c      	ldr	r1, [pc, #560]	; (800ea5c <tcp_slowtmr+0x270>)
 800e82a:	488d      	ldr	r0, [pc, #564]	; (800ea60 <tcp_slowtmr+0x274>)
 800e82c:	f008 ff34 	bl	8017698 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d106      	bne.n	800e846 <tcp_slowtmr+0x5a>
 800e838:	4b87      	ldr	r3, [pc, #540]	; (800ea58 <tcp_slowtmr+0x26c>)
 800e83a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e83e:	4989      	ldr	r1, [pc, #548]	; (800ea64 <tcp_slowtmr+0x278>)
 800e840:	4887      	ldr	r0, [pc, #540]	; (800ea60 <tcp_slowtmr+0x274>)
 800e842:	f008 ff29 	bl	8017698 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	7d1b      	ldrb	r3, [r3, #20]
 800e84a:	2b0a      	cmp	r3, #10
 800e84c:	d106      	bne.n	800e85c <tcp_slowtmr+0x70>
 800e84e:	4b82      	ldr	r3, [pc, #520]	; (800ea58 <tcp_slowtmr+0x26c>)
 800e850:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e854:	4984      	ldr	r1, [pc, #528]	; (800ea68 <tcp_slowtmr+0x27c>)
 800e856:	4882      	ldr	r0, [pc, #520]	; (800ea60 <tcp_slowtmr+0x274>)
 800e858:	f008 ff1e 	bl	8017698 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	7f9a      	ldrb	r2, [r3, #30]
 800e860:	4b7b      	ldr	r3, [pc, #492]	; (800ea50 <tcp_slowtmr+0x264>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	429a      	cmp	r2, r3
 800e866:	d105      	bne.n	800e874 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e872:	e270      	b.n	800ed56 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e874:	4b76      	ldr	r3, [pc, #472]	; (800ea50 <tcp_slowtmr+0x264>)
 800e876:	781a      	ldrb	r2, [r3, #0]
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e87c:	2300      	movs	r3, #0
 800e87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	7d1b      	ldrb	r3, [r3, #20]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d10a      	bne.n	800e8a6 <tcp_slowtmr+0xba>
 800e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e896:	2b05      	cmp	r3, #5
 800e898:	d905      	bls.n	800e8a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e89a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e89e:	3301      	adds	r3, #1
 800e8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8a4:	e11e      	b.n	800eae4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ac:	2b0b      	cmp	r3, #11
 800e8ae:	d905      	bls.n	800e8bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8ba:	e113      	b.n	800eae4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d075      	beq.n	800e9b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d006      	beq.n	800e8dc <tcp_slowtmr+0xf0>
 800e8ce:	4b62      	ldr	r3, [pc, #392]	; (800ea58 <tcp_slowtmr+0x26c>)
 800e8d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e8d4:	4965      	ldr	r1, [pc, #404]	; (800ea6c <tcp_slowtmr+0x280>)
 800e8d6:	4862      	ldr	r0, [pc, #392]	; (800ea60 <tcp_slowtmr+0x274>)
 800e8d8:	f008 fede 	bl	8017698 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d106      	bne.n	800e8f2 <tcp_slowtmr+0x106>
 800e8e4:	4b5c      	ldr	r3, [pc, #368]	; (800ea58 <tcp_slowtmr+0x26c>)
 800e8e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e8ea:	4961      	ldr	r1, [pc, #388]	; (800ea70 <tcp_slowtmr+0x284>)
 800e8ec:	485c      	ldr	r0, [pc, #368]	; (800ea60 <tcp_slowtmr+0x274>)
 800e8ee:	f008 fed3 	bl	8017698 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e8f8:	2b0b      	cmp	r3, #11
 800e8fa:	d905      	bls.n	800e908 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e900:	3301      	adds	r3, #1
 800e902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e906:	e0ed      	b.n	800eae4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e90e:	3b01      	subs	r3, #1
 800e910:	4a58      	ldr	r2, [pc, #352]	; (800ea74 <tcp_slowtmr+0x288>)
 800e912:	5cd3      	ldrb	r3, [r2, r3]
 800e914:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e91c:	7c7a      	ldrb	r2, [r7, #17]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d907      	bls.n	800e932 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e928:	3301      	adds	r3, #1
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e938:	7c7a      	ldrb	r2, [r7, #17]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	f200 80d2 	bhi.w	800eae4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e940:	2301      	movs	r3, #1
 800e942:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d108      	bne.n	800e960 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e94e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e950:	f004 fc2a 	bl	80131a8 <tcp_zero_window_probe>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d014      	beq.n	800e984 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e95a:	2300      	movs	r3, #0
 800e95c:	623b      	str	r3, [r7, #32]
 800e95e:	e011      	b.n	800e984 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e966:	4619      	mov	r1, r3
 800e968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e96a:	f003 faef 	bl	8011f4c <tcp_split_unsent_seg>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d107      	bne.n	800e984 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e976:	f003 fd6f 	bl	8012458 <tcp_output>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d101      	bne.n	800e984 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e980:	2300      	movs	r3, #0
 800e982:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	2b00      	cmp	r3, #0
 800e988:	f000 80ac 	beq.w	800eae4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e99a:	2b06      	cmp	r3, #6
 800e99c:	f200 80a2 	bhi.w	800eae4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e9b0:	e098      	b.n	800eae4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	db0f      	blt.n	800e9dc <tcp_slowtmr+0x1f0>
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d008      	beq.n	800e9dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	b21a      	sxth	r2, r3
 800e9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	db7b      	blt.n	800eae4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e9ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9ee:	f004 f827 	bl	8012a40 <tcp_rexmit_rto_prepare>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d007      	beq.n	800ea08 <tcp_slowtmr+0x21c>
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d171      	bne.n	800eae4 <tcp_slowtmr+0x2f8>
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d06d      	beq.n	800eae4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	7d1b      	ldrb	r3, [r3, #20]
 800ea0c:	2b02      	cmp	r3, #2
 800ea0e:	d03a      	beq.n	800ea86 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ea10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea16:	2b0c      	cmp	r3, #12
 800ea18:	bf28      	it	cs
 800ea1a:	230c      	movcs	r3, #12
 800ea1c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea24:	10db      	asrs	r3, r3, #3
 800ea26:	b21b      	sxth	r3, r3
 800ea28:	461a      	mov	r2, r3
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea30:	4413      	add	r3, r2
 800ea32:	7efa      	ldrb	r2, [r7, #27]
 800ea34:	4910      	ldr	r1, [pc, #64]	; (800ea78 <tcp_slowtmr+0x28c>)
 800ea36:	5c8a      	ldrb	r2, [r1, r2]
 800ea38:	4093      	lsls	r3, r2
 800ea3a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ea42:	4293      	cmp	r3, r2
 800ea44:	dc1a      	bgt.n	800ea7c <tcp_slowtmr+0x290>
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	b21a      	sxth	r2, r3
 800ea4a:	e019      	b.n	800ea80 <tcp_slowtmr+0x294>
 800ea4c:	20008994 	.word	0x20008994
 800ea50:	200089aa 	.word	0x200089aa
 800ea54:	200089a0 	.word	0x200089a0
 800ea58:	08019458 	.word	0x08019458
 800ea5c:	0801979c 	.word	0x0801979c
 800ea60:	0801949c 	.word	0x0801949c
 800ea64:	080197c8 	.word	0x080197c8
 800ea68:	080197f4 	.word	0x080197f4
 800ea6c:	08019824 	.word	0x08019824
 800ea70:	08019858 	.word	0x08019858
 800ea74:	0801b6c4 	.word	0x0801b6c4
 800ea78:	0801b6b4 	.word	0x0801b6b4
 800ea7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	2200      	movs	r2, #0
 800ea8a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ea8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	bf28      	it	cs
 800ea9c:	4613      	movcs	r3, r2
 800ea9e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800eaa0:	8a7b      	ldrh	r3, [r7, #18]
 800eaa2:	085b      	lsrs	r3, r3, #1
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d206      	bcs.n	800eacc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ead0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	2200      	movs	r2, #0
 800eada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800eade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eae0:	f004 f81e 	bl	8012b20 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae6:	7d1b      	ldrb	r3, [r3, #20]
 800eae8:	2b06      	cmp	r3, #6
 800eaea:	d111      	bne.n	800eb10 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	8b5b      	ldrh	r3, [r3, #26]
 800eaf0:	f003 0310 	and.w	r3, r3, #16
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00b      	beq.n	800eb10 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eaf8:	4b9c      	ldr	r3, [pc, #624]	; (800ed6c <tcp_slowtmr+0x580>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafe:	6a1b      	ldr	r3, [r3, #32]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	2b28      	cmp	r3, #40	; 0x28
 800eb04:	d904      	bls.n	800eb10 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eb06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb12:	7a5b      	ldrb	r3, [r3, #9]
 800eb14:	f003 0308 	and.w	r3, r3, #8
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d04a      	beq.n	800ebb2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d003      	beq.n	800eb2c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800eb28:	2b07      	cmp	r3, #7
 800eb2a:	d142      	bne.n	800ebb2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb2c:	4b8f      	ldr	r3, [pc, #572]	; (800ed6c <tcp_slowtmr+0x580>)
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb32:	6a1b      	ldr	r3, [r3, #32]
 800eb34:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800eb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb38:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eb3c:	4b8c      	ldr	r3, [pc, #560]	; (800ed70 <tcp_slowtmr+0x584>)
 800eb3e:	440b      	add	r3, r1
 800eb40:	498c      	ldr	r1, [pc, #560]	; (800ed74 <tcp_slowtmr+0x588>)
 800eb42:	fba1 1303 	umull	r1, r3, r1, r3
 800eb46:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d90a      	bls.n	800eb62 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800eb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb50:	3301      	adds	r3, #1
 800eb52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800eb56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb60:	e027      	b.n	800ebb2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb62:	4b82      	ldr	r3, [pc, #520]	; (800ed6c <tcp_slowtmr+0x580>)
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eb78:	4618      	mov	r0, r3
 800eb7a:	4b7f      	ldr	r3, [pc, #508]	; (800ed78 <tcp_slowtmr+0x58c>)
 800eb7c:	fb00 f303 	mul.w	r3, r0, r3
 800eb80:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eb82:	497c      	ldr	r1, [pc, #496]	; (800ed74 <tcp_slowtmr+0x588>)
 800eb84:	fba1 1303 	umull	r1, r3, r1, r3
 800eb88:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d911      	bls.n	800ebb2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800eb8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb90:	f004 faca 	bl	8013128 <tcp_keepalive>
 800eb94:	4603      	mov	r3, r0
 800eb96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800eb9a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d107      	bne.n	800ebb2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eba8:	3301      	adds	r3, #1
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ebb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d011      	beq.n	800ebde <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ebba:	4b6c      	ldr	r3, [pc, #432]	; (800ed6c <tcp_slowtmr+0x580>)
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	6a1b      	ldr	r3, [r3, #32]
 800ebc2:	1ad2      	subs	r2, r2, r3
 800ebc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ebca:	4619      	mov	r1, r3
 800ebcc:	460b      	mov	r3, r1
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	440b      	add	r3, r1
 800ebd2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d302      	bcc.n	800ebde <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ebd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebda:	f000 fddd 	bl	800f798 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	7d1b      	ldrb	r3, [r3, #20]
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d10b      	bne.n	800ebfe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebe6:	4b61      	ldr	r3, [pc, #388]	; (800ed6c <tcp_slowtmr+0x580>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	2b28      	cmp	r3, #40	; 0x28
 800ebf2:	d904      	bls.n	800ebfe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ebf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ebfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec00:	7d1b      	ldrb	r3, [r3, #20]
 800ec02:	2b09      	cmp	r3, #9
 800ec04:	d10b      	bne.n	800ec1e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ec06:	4b59      	ldr	r3, [pc, #356]	; (800ed6c <tcp_slowtmr+0x580>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	2bf0      	cmp	r3, #240	; 0xf0
 800ec12:	d904      	bls.n	800ec1e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ec14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec18:	3301      	adds	r3, #1
 800ec1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ec1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d060      	beq.n	800ece8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec2c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ec2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec30:	f000 fbfe 	bl	800f430 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ec34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d010      	beq.n	800ec5c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ec3a:	4b50      	ldr	r3, [pc, #320]	; (800ed7c <tcp_slowtmr+0x590>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d106      	bne.n	800ec52 <tcp_slowtmr+0x466>
 800ec44:	4b4e      	ldr	r3, [pc, #312]	; (800ed80 <tcp_slowtmr+0x594>)
 800ec46:	f240 526d 	movw	r2, #1389	; 0x56d
 800ec4a:	494e      	ldr	r1, [pc, #312]	; (800ed84 <tcp_slowtmr+0x598>)
 800ec4c:	484e      	ldr	r0, [pc, #312]	; (800ed88 <tcp_slowtmr+0x59c>)
 800ec4e:	f008 fd23 	bl	8017698 <iprintf>
        prev->next = pcb->next;
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	68da      	ldr	r2, [r3, #12]
 800ec56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec58:	60da      	str	r2, [r3, #12]
 800ec5a:	e00f      	b.n	800ec7c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ec5c:	4b47      	ldr	r3, [pc, #284]	; (800ed7c <tcp_slowtmr+0x590>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d006      	beq.n	800ec74 <tcp_slowtmr+0x488>
 800ec66:	4b46      	ldr	r3, [pc, #280]	; (800ed80 <tcp_slowtmr+0x594>)
 800ec68:	f240 5271 	movw	r2, #1393	; 0x571
 800ec6c:	4947      	ldr	r1, [pc, #284]	; (800ed8c <tcp_slowtmr+0x5a0>)
 800ec6e:	4846      	ldr	r0, [pc, #280]	; (800ed88 <tcp_slowtmr+0x59c>)
 800ec70:	f008 fd12 	bl	8017698 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ec74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	4a40      	ldr	r2, [pc, #256]	; (800ed7c <tcp_slowtmr+0x590>)
 800ec7a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ec7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d013      	beq.n	800ecac <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ec88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ec8c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	3304      	adds	r3, #4
 800ec92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec94:	8ad2      	ldrh	r2, [r2, #22]
 800ec96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec98:	8b09      	ldrh	r1, [r1, #24]
 800ec9a:	9102      	str	r1, [sp, #8]
 800ec9c:	9201      	str	r2, [sp, #4]
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	462b      	mov	r3, r5
 800eca2:	4622      	mov	r2, r4
 800eca4:	4601      	mov	r1, r0
 800eca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eca8:	f004 f98a 	bl	8012fc0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	7d1b      	ldrb	r3, [r3, #20]
 800ecb6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ecbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ecc2:	6838      	ldr	r0, [r7, #0]
 800ecc4:	f7ff f9f4 	bl	800e0b0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ecc8:	4b31      	ldr	r3, [pc, #196]	; (800ed90 <tcp_slowtmr+0x5a4>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d004      	beq.n	800ecde <tcp_slowtmr+0x4f2>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f06f 010c 	mvn.w	r1, #12
 800ecda:	68b8      	ldr	r0, [r7, #8]
 800ecdc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ecde:	4b2c      	ldr	r3, [pc, #176]	; (800ed90 <tcp_slowtmr+0x5a4>)
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d037      	beq.n	800ed56 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ece6:	e592      	b.n	800e80e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ece8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ecf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf4:	7f1b      	ldrb	r3, [r3, #28]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	b2da      	uxtb	r2, r3
 800ecfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ecfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed00:	7f1a      	ldrb	r2, [r3, #28]
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	7f5b      	ldrb	r3, [r3, #29]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d325      	bcc.n	800ed56 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ed10:	4b1f      	ldr	r3, [pc, #124]	; (800ed90 <tcp_slowtmr+0x5a4>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ed16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00b      	beq.n	800ed38 <tcp_slowtmr+0x54c>
 800ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed28:	6912      	ldr	r2, [r2, #16]
 800ed2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	4798      	blx	r3
 800ed30:	4603      	mov	r3, r0
 800ed32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ed36:	e002      	b.n	800ed3e <tcp_slowtmr+0x552>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ed3e:	4b14      	ldr	r3, [pc, #80]	; (800ed90 <tcp_slowtmr+0x5a4>)
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d000      	beq.n	800ed48 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ed46:	e562      	b.n	800e80e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ed48:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ed50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed52:	f003 fb81 	bl	8012458 <tcp_output>
  while (pcb != NULL) {
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f47f ad5e 	bne.w	800e81a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ed62:	4b0c      	ldr	r3, [pc, #48]	; (800ed94 <tcp_slowtmr+0x5a8>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ed68:	e069      	b.n	800ee3e <tcp_slowtmr+0x652>
 800ed6a:	bf00      	nop
 800ed6c:	20008994 	.word	0x20008994
 800ed70:	000a4cb8 	.word	0x000a4cb8
 800ed74:	10624dd3 	.word	0x10624dd3
 800ed78:	000124f8 	.word	0x000124f8
 800ed7c:	200089a0 	.word	0x200089a0
 800ed80:	08019458 	.word	0x08019458
 800ed84:	08019890 	.word	0x08019890
 800ed88:	0801949c 	.word	0x0801949c
 800ed8c:	080198bc 	.word	0x080198bc
 800ed90:	200089a8 	.word	0x200089a8
 800ed94:	200089a4 	.word	0x200089a4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9a:	7d1b      	ldrb	r3, [r3, #20]
 800ed9c:	2b0a      	cmp	r3, #10
 800ed9e:	d006      	beq.n	800edae <tcp_slowtmr+0x5c2>
 800eda0:	4b2b      	ldr	r3, [pc, #172]	; (800ee50 <tcp_slowtmr+0x664>)
 800eda2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800eda6:	492b      	ldr	r1, [pc, #172]	; (800ee54 <tcp_slowtmr+0x668>)
 800eda8:	482b      	ldr	r0, [pc, #172]	; (800ee58 <tcp_slowtmr+0x66c>)
 800edaa:	f008 fc75 	bl	8017698 <iprintf>
    pcb_remove = 0;
 800edae:	2300      	movs	r3, #0
 800edb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800edb4:	4b29      	ldr	r3, [pc, #164]	; (800ee5c <tcp_slowtmr+0x670>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	6a1b      	ldr	r3, [r3, #32]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	2bf0      	cmp	r3, #240	; 0xf0
 800edc0:	d904      	bls.n	800edcc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800edc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc6:	3301      	adds	r3, #1
 800edc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800edcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d02f      	beq.n	800ee34 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800edd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd6:	f000 fb2b 	bl	800f430 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800edda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d010      	beq.n	800ee02 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ede0:	4b1f      	ldr	r3, [pc, #124]	; (800ee60 <tcp_slowtmr+0x674>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d106      	bne.n	800edf8 <tcp_slowtmr+0x60c>
 800edea:	4b19      	ldr	r3, [pc, #100]	; (800ee50 <tcp_slowtmr+0x664>)
 800edec:	f240 52af 	movw	r2, #1455	; 0x5af
 800edf0:	491c      	ldr	r1, [pc, #112]	; (800ee64 <tcp_slowtmr+0x678>)
 800edf2:	4819      	ldr	r0, [pc, #100]	; (800ee58 <tcp_slowtmr+0x66c>)
 800edf4:	f008 fc50 	bl	8017698 <iprintf>
        prev->next = pcb->next;
 800edf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfa:	68da      	ldr	r2, [r3, #12]
 800edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfe:	60da      	str	r2, [r3, #12]
 800ee00:	e00f      	b.n	800ee22 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ee02:	4b17      	ldr	r3, [pc, #92]	; (800ee60 <tcp_slowtmr+0x674>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d006      	beq.n	800ee1a <tcp_slowtmr+0x62e>
 800ee0c:	4b10      	ldr	r3, [pc, #64]	; (800ee50 <tcp_slowtmr+0x664>)
 800ee0e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ee12:	4915      	ldr	r1, [pc, #84]	; (800ee68 <tcp_slowtmr+0x67c>)
 800ee14:	4810      	ldr	r0, [pc, #64]	; (800ee58 <tcp_slowtmr+0x66c>)
 800ee16:	f008 fc3f 	bl	8017698 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	4a10      	ldr	r2, [pc, #64]	; (800ee60 <tcp_slowtmr+0x674>)
 800ee20:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ee22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee24:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ee2c:	69f8      	ldr	r0, [r7, #28]
 800ee2e:	f7ff f93f 	bl	800e0b0 <tcp_free>
 800ee32:	e004      	b.n	800ee3e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ee3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1a9      	bne.n	800ed98 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ee44:	bf00      	nop
 800ee46:	bf00      	nop
 800ee48:	3730      	adds	r7, #48	; 0x30
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	08019458 	.word	0x08019458
 800ee54:	080198e8 	.word	0x080198e8
 800ee58:	0801949c 	.word	0x0801949c
 800ee5c:	20008994 	.word	0x20008994
 800ee60:	200089a4 	.word	0x200089a4
 800ee64:	08019918 	.word	0x08019918
 800ee68:	08019940 	.word	0x08019940

0800ee6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ee72:	4b2d      	ldr	r3, [pc, #180]	; (800ef28 <tcp_fasttmr+0xbc>)
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	3301      	adds	r3, #1
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	4b2b      	ldr	r3, [pc, #172]	; (800ef28 <tcp_fasttmr+0xbc>)
 800ee7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ee7e:	4b2b      	ldr	r3, [pc, #172]	; (800ef2c <tcp_fasttmr+0xc0>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ee84:	e048      	b.n	800ef18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	7f9a      	ldrb	r2, [r3, #30]
 800ee8a:	4b27      	ldr	r3, [pc, #156]	; (800ef28 <tcp_fasttmr+0xbc>)
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d03f      	beq.n	800ef12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ee92:	4b25      	ldr	r3, [pc, #148]	; (800ef28 <tcp_fasttmr+0xbc>)
 800ee94:	781a      	ldrb	r2, [r3, #0]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	8b5b      	ldrh	r3, [r3, #26]
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d010      	beq.n	800eec8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	8b5b      	ldrh	r3, [r3, #26]
 800eeaa:	f043 0302 	orr.w	r3, r3, #2
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f003 facf 	bl	8012458 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	8b5b      	ldrh	r3, [r3, #26]
 800eebe:	f023 0303 	bic.w	r3, r3, #3
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	8b5b      	ldrh	r3, [r3, #26]
 800eecc:	f003 0308 	and.w	r3, r3, #8
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d009      	beq.n	800eee8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	8b5b      	ldrh	r3, [r3, #26]
 800eed8:	f023 0308 	bic.w	r3, r3, #8
 800eedc:	b29a      	uxth	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff fa78 	bl	800e3d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00a      	beq.n	800ef0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eef6:	4b0e      	ldr	r3, [pc, #56]	; (800ef30 <tcp_fasttmr+0xc4>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 f819 	bl	800ef34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ef02:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <tcp_fasttmr+0xc4>)
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d000      	beq.n	800ef0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ef0a:	e7b8      	b.n	800ee7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	607b      	str	r3, [r7, #4]
 800ef10:	e002      	b.n	800ef18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1b3      	bne.n	800ee86 <tcp_fasttmr+0x1a>
    }
  }
}
 800ef1e:	bf00      	nop
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	200089aa 	.word	0x200089aa
 800ef2c:	200089a0 	.word	0x200089a0
 800ef30:	200089a8 	.word	0x200089a8

0800ef34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ef34:	b590      	push	{r4, r7, lr}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d109      	bne.n	800ef56 <tcp_process_refused_data+0x22>
 800ef42:	4b37      	ldr	r3, [pc, #220]	; (800f020 <tcp_process_refused_data+0xec>)
 800ef44:	f240 6209 	movw	r2, #1545	; 0x609
 800ef48:	4936      	ldr	r1, [pc, #216]	; (800f024 <tcp_process_refused_data+0xf0>)
 800ef4a:	4837      	ldr	r0, [pc, #220]	; (800f028 <tcp_process_refused_data+0xf4>)
 800ef4c:	f008 fba4 	bl	8017698 <iprintf>
 800ef50:	f06f 030f 	mvn.w	r3, #15
 800ef54:	e060      	b.n	800f018 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef5a:	7b5b      	ldrb	r3, [r3, #13]
 800ef5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00b      	beq.n	800ef8c <tcp_process_refused_data+0x58>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6918      	ldr	r0, [r3, #16]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	6879      	ldr	r1, [r7, #4]
 800ef84:	47a0      	blx	r4
 800ef86:	4603      	mov	r3, r0
 800ef88:	73fb      	strb	r3, [r7, #15]
 800ef8a:	e007      	b.n	800ef9c <tcp_process_refused_data+0x68>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	6879      	ldr	r1, [r7, #4]
 800ef92:	2000      	movs	r0, #0
 800ef94:	f000 f8a4 	bl	800f0e0 <tcp_recv_null>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ef9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d12a      	bne.n	800effa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800efa4:	7bbb      	ldrb	r3, [r7, #14]
 800efa6:	f003 0320 	and.w	r3, r3, #32
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d033      	beq.n	800f016 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800efb6:	d005      	beq.n	800efc4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efbc:	3301      	adds	r3, #1
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00b      	beq.n	800efe6 <tcp_process_refused_data+0xb2>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6918      	ldr	r0, [r3, #16]
 800efd8:	2300      	movs	r3, #0
 800efda:	2200      	movs	r2, #0
 800efdc:	6879      	ldr	r1, [r7, #4]
 800efde:	47a0      	blx	r4
 800efe0:	4603      	mov	r3, r0
 800efe2:	73fb      	strb	r3, [r7, #15]
 800efe4:	e001      	b.n	800efea <tcp_process_refused_data+0xb6>
 800efe6:	2300      	movs	r3, #0
 800efe8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800efea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efee:	f113 0f0d 	cmn.w	r3, #13
 800eff2:	d110      	bne.n	800f016 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800eff4:	f06f 030c 	mvn.w	r3, #12
 800eff8:	e00e      	b.n	800f018 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800effa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800effe:	f113 0f0d 	cmn.w	r3, #13
 800f002:	d102      	bne.n	800f00a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f004:	f06f 030c 	mvn.w	r3, #12
 800f008:	e006      	b.n	800f018 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f010:	f06f 0304 	mvn.w	r3, #4
 800f014:	e000      	b.n	800f018 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3714      	adds	r7, #20
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd90      	pop	{r4, r7, pc}
 800f020:	08019458 	.word	0x08019458
 800f024:	08019968 	.word	0x08019968
 800f028:	0801949c 	.word	0x0801949c

0800f02c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f034:	e007      	b.n	800f046 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 f80a 	bl	800f056 <tcp_seg_free>
    seg = next;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1f4      	bne.n	800f036 <tcp_segs_free+0xa>
  }
}
 800f04c:	bf00      	nop
 800f04e:	bf00      	nop
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b082      	sub	sp, #8
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d00c      	beq.n	800f07e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d004      	beq.n	800f076 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	4618      	mov	r0, r3
 800f072:	f7fe fd6d 	bl	800db50 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f076:	6879      	ldr	r1, [r7, #4]
 800f078:	2003      	movs	r0, #3
 800f07a:	f7fd fef3 	bl	800ce64 <memp_free>
  }
}
 800f07e:	bf00      	nop
 800f080:	3708      	adds	r7, #8
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
	...

0800f088 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <tcp_seg_copy+0x1c>
 800f096:	4b0f      	ldr	r3, [pc, #60]	; (800f0d4 <tcp_seg_copy+0x4c>)
 800f098:	f240 6282 	movw	r2, #1666	; 0x682
 800f09c:	490e      	ldr	r1, [pc, #56]	; (800f0d8 <tcp_seg_copy+0x50>)
 800f09e:	480f      	ldr	r0, [pc, #60]	; (800f0dc <tcp_seg_copy+0x54>)
 800f0a0:	f008 fafa 	bl	8017698 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f0a4:	2003      	movs	r0, #3
 800f0a6:	f7fd fe6d 	bl	800cd84 <memp_malloc>
 800f0aa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <tcp_seg_copy+0x2e>
    return NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e00a      	b.n	800f0cc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f0b6:	2210      	movs	r2, #16
 800f0b8:	6879      	ldr	r1, [r7, #4]
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f008 fd2b 	bl	8017b16 <memcpy>
  pbuf_ref(cseg->p);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fe fde3 	bl	800dc90 <pbuf_ref>
  return cseg;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	08019458 	.word	0x08019458
 800f0d8:	080199ac 	.word	0x080199ac
 800f0dc:	0801949c 	.word	0x0801949c

0800f0e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d109      	bne.n	800f108 <tcp_recv_null+0x28>
 800f0f4:	4b12      	ldr	r3, [pc, #72]	; (800f140 <tcp_recv_null+0x60>)
 800f0f6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f0fa:	4912      	ldr	r1, [pc, #72]	; (800f144 <tcp_recv_null+0x64>)
 800f0fc:	4812      	ldr	r0, [pc, #72]	; (800f148 <tcp_recv_null+0x68>)
 800f0fe:	f008 facb 	bl	8017698 <iprintf>
 800f102:	f06f 030f 	mvn.w	r3, #15
 800f106:	e016      	b.n	800f136 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d009      	beq.n	800f122 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	891b      	ldrh	r3, [r3, #8]
 800f112:	4619      	mov	r1, r3
 800f114:	68b8      	ldr	r0, [r7, #8]
 800f116:	f7ff fb19 	bl	800e74c <tcp_recved>
    pbuf_free(p);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7fe fd18 	bl	800db50 <pbuf_free>
 800f120:	e008      	b.n	800f134 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d104      	bne.n	800f134 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f12a:	68b8      	ldr	r0, [r7, #8]
 800f12c:	f7ff f9be 	bl	800e4ac <tcp_close>
 800f130:	4603      	mov	r3, r0
 800f132:	e000      	b.n	800f136 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	08019458 	.word	0x08019458
 800f144:	080199c8 	.word	0x080199c8
 800f148:	0801949c 	.word	0x0801949c

0800f14c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b086      	sub	sp, #24
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	db01      	blt.n	800f162 <tcp_kill_prio+0x16>
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	e000      	b.n	800f164 <tcp_kill_prio+0x18>
 800f162:	237f      	movs	r3, #127	; 0x7f
 800f164:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f166:	7afb      	ldrb	r3, [r7, #11]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d034      	beq.n	800f1d6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f16c:	7afb      	ldrb	r3, [r7, #11]
 800f16e:	3b01      	subs	r3, #1
 800f170:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f176:	2300      	movs	r3, #0
 800f178:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f17a:	4b19      	ldr	r3, [pc, #100]	; (800f1e0 <tcp_kill_prio+0x94>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	617b      	str	r3, [r7, #20]
 800f180:	e01f      	b.n	800f1c2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	7d5b      	ldrb	r3, [r3, #21]
 800f186:	7afa      	ldrb	r2, [r7, #11]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d80c      	bhi.n	800f1a6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f190:	7afa      	ldrb	r2, [r7, #11]
 800f192:	429a      	cmp	r2, r3
 800f194:	d112      	bne.n	800f1bc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f196:	4b13      	ldr	r3, [pc, #76]	; (800f1e4 <tcp_kill_prio+0x98>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	6a1b      	ldr	r3, [r3, #32]
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	68fa      	ldr	r2, [r7, #12]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d80a      	bhi.n	800f1bc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <tcp_kill_prio+0x98>)
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	6a1b      	ldr	r3, [r3, #32]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	7d5b      	ldrb	r3, [r3, #21]
 800f1ba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	617b      	str	r3, [r7, #20]
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d1dc      	bne.n	800f182 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d004      	beq.n	800f1d8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f1ce:	6938      	ldr	r0, [r7, #16]
 800f1d0:	f7ff fa56 	bl	800e680 <tcp_abort>
 800f1d4:	e000      	b.n	800f1d8 <tcp_kill_prio+0x8c>
    return;
 800f1d6:	bf00      	nop
  }
}
 800f1d8:	3718      	adds	r7, #24
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	200089a0 	.word	0x200089a0
 800f1e4:	20008994 	.word	0x20008994

0800f1e8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f1f2:	79fb      	ldrb	r3, [r7, #7]
 800f1f4:	2b08      	cmp	r3, #8
 800f1f6:	d009      	beq.n	800f20c <tcp_kill_state+0x24>
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	2b09      	cmp	r3, #9
 800f1fc:	d006      	beq.n	800f20c <tcp_kill_state+0x24>
 800f1fe:	4b1a      	ldr	r3, [pc, #104]	; (800f268 <tcp_kill_state+0x80>)
 800f200:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f204:	4919      	ldr	r1, [pc, #100]	; (800f26c <tcp_kill_state+0x84>)
 800f206:	481a      	ldr	r0, [pc, #104]	; (800f270 <tcp_kill_state+0x88>)
 800f208:	f008 fa46 	bl	8017698 <iprintf>

  inactivity = 0;
 800f20c:	2300      	movs	r3, #0
 800f20e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f210:	2300      	movs	r3, #0
 800f212:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f214:	4b17      	ldr	r3, [pc, #92]	; (800f274 <tcp_kill_state+0x8c>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	617b      	str	r3, [r7, #20]
 800f21a:	e017      	b.n	800f24c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	7d1b      	ldrb	r3, [r3, #20]
 800f220:	79fa      	ldrb	r2, [r7, #7]
 800f222:	429a      	cmp	r2, r3
 800f224:	d10f      	bne.n	800f246 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f226:	4b14      	ldr	r3, [pc, #80]	; (800f278 <tcp_kill_state+0x90>)
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	6a1b      	ldr	r3, [r3, #32]
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	429a      	cmp	r2, r3
 800f234:	d807      	bhi.n	800f246 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f236:	4b10      	ldr	r3, [pc, #64]	; (800f278 <tcp_kill_state+0x90>)
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	617b      	str	r3, [r7, #20]
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1e4      	bne.n	800f21c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d003      	beq.n	800f260 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f258:	2100      	movs	r1, #0
 800f25a:	6938      	ldr	r0, [r7, #16]
 800f25c:	f7ff f952 	bl	800e504 <tcp_abandon>
  }
}
 800f260:	bf00      	nop
 800f262:	3718      	adds	r7, #24
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	08019458 	.word	0x08019458
 800f26c:	080199e4 	.word	0x080199e4
 800f270:	0801949c 	.word	0x0801949c
 800f274:	200089a0 	.word	0x200089a0
 800f278:	20008994 	.word	0x20008994

0800f27c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f286:	2300      	movs	r3, #0
 800f288:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f28a:	4b12      	ldr	r3, [pc, #72]	; (800f2d4 <tcp_kill_timewait+0x58>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	e012      	b.n	800f2b8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f292:	4b11      	ldr	r3, [pc, #68]	; (800f2d8 <tcp_kill_timewait+0x5c>)
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	6a1b      	ldr	r3, [r3, #32]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d807      	bhi.n	800f2b2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f2a2:	4b0d      	ldr	r3, [pc, #52]	; (800f2d8 <tcp_kill_timewait+0x5c>)
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	68db      	ldr	r3, [r3, #12]
 800f2b6:	60fb      	str	r3, [r7, #12]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d1e9      	bne.n	800f292 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f2c4:	68b8      	ldr	r0, [r7, #8]
 800f2c6:	f7ff f9db 	bl	800e680 <tcp_abort>
  }
}
 800f2ca:	bf00      	nop
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	200089a4 	.word	0x200089a4
 800f2d8:	20008994 	.word	0x20008994

0800f2dc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f2e2:	4b10      	ldr	r3, [pc, #64]	; (800f324 <tcp_handle_closepend+0x48>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f2e8:	e014      	b.n	800f314 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	8b5b      	ldrh	r3, [r3, #26]
 800f2f4:	f003 0308 	and.w	r3, r3, #8
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d009      	beq.n	800f310 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	8b5b      	ldrh	r3, [r3, #26]
 800f300:	f023 0308 	bic.w	r3, r3, #8
 800f304:	b29a      	uxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff f864 	bl	800e3d8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1e7      	bne.n	800f2ea <tcp_handle_closepend+0xe>
  }
}
 800f31a:	bf00      	nop
 800f31c:	bf00      	nop
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	200089a0 	.word	0x200089a0

0800f328 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4603      	mov	r3, r0
 800f330:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f332:	2001      	movs	r0, #1
 800f334:	f7fd fd26 	bl	800cd84 <memp_malloc>
 800f338:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d126      	bne.n	800f38e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f340:	f7ff ffcc 	bl	800f2dc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f344:	f7ff ff9a 	bl	800f27c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f348:	2001      	movs	r0, #1
 800f34a:	f7fd fd1b 	bl	800cd84 <memp_malloc>
 800f34e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d11b      	bne.n	800f38e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f356:	2009      	movs	r0, #9
 800f358:	f7ff ff46 	bl	800f1e8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f35c:	2001      	movs	r0, #1
 800f35e:	f7fd fd11 	bl	800cd84 <memp_malloc>
 800f362:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d111      	bne.n	800f38e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f36a:	2008      	movs	r0, #8
 800f36c:	f7ff ff3c 	bl	800f1e8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f370:	2001      	movs	r0, #1
 800f372:	f7fd fd07 	bl	800cd84 <memp_malloc>
 800f376:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d107      	bne.n	800f38e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff fee3 	bl	800f14c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f386:	2001      	movs	r0, #1
 800f388:	f7fd fcfc 	bl	800cd84 <memp_malloc>
 800f38c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d03f      	beq.n	800f414 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f394:	229c      	movs	r2, #156	; 0x9c
 800f396:	2100      	movs	r1, #0
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f008 fb41 	bl	8017a20 <memset>
    pcb->prio = prio;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	79fa      	ldrb	r2, [r7, #7]
 800f3a2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f3aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f3b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	22ff      	movs	r2, #255	; 0xff
 800f3c2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f3ca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2206      	movs	r2, #6
 800f3d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2206      	movs	r2, #6
 800f3d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3e0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f3ea:	4b0d      	ldr	r3, [pc, #52]	; (800f420 <tcp_alloc+0xf8>)
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f3f2:	4b0c      	ldr	r3, [pc, #48]	; (800f424 <tcp_alloc+0xfc>)
 800f3f4:	781a      	ldrb	r2, [r3, #0]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f400:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	4a08      	ldr	r2, [pc, #32]	; (800f428 <tcp_alloc+0x100>)
 800f408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	4a07      	ldr	r2, [pc, #28]	; (800f42c <tcp_alloc+0x104>)
 800f410:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f414:	68fb      	ldr	r3, [r7, #12]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	20008994 	.word	0x20008994
 800f424:	200089aa 	.word	0x200089aa
 800f428:	0800f0e1 	.word	0x0800f0e1
 800f42c:	006ddd00 	.word	0x006ddd00

0800f430 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d107      	bne.n	800f44e <tcp_pcb_purge+0x1e>
 800f43e:	4b21      	ldr	r3, [pc, #132]	; (800f4c4 <tcp_pcb_purge+0x94>)
 800f440:	f640 0251 	movw	r2, #2129	; 0x851
 800f444:	4920      	ldr	r1, [pc, #128]	; (800f4c8 <tcp_pcb_purge+0x98>)
 800f446:	4821      	ldr	r0, [pc, #132]	; (800f4cc <tcp_pcb_purge+0x9c>)
 800f448:	f008 f926 	bl	8017698 <iprintf>
 800f44c:	e037      	b.n	800f4be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	7d1b      	ldrb	r3, [r3, #20]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d033      	beq.n	800f4be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f45a:	2b0a      	cmp	r3, #10
 800f45c:	d02f      	beq.n	800f4be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f462:	2b01      	cmp	r3, #1
 800f464:	d02b      	beq.n	800f4be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d007      	beq.n	800f47e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f472:	4618      	mov	r0, r3
 800f474:	f7fe fb6c 	bl	800db50 <pbuf_free>
      pcb->refused_data = NULL;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f482:	2b00      	cmp	r3, #0
 800f484:	d002      	beq.n	800f48c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 f986 	bl	800f798 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f492:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff fdc7 	bl	800f02c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7ff fdc2 	bl	800f02c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	66da      	str	r2, [r3, #108]	; 0x6c
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	08019458 	.word	0x08019458
 800f4c8:	08019aa4 	.word	0x08019aa4
 800f4cc:	0801949c 	.word	0x0801949c

0800f4d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d106      	bne.n	800f4ee <tcp_pcb_remove+0x1e>
 800f4e0:	4b3e      	ldr	r3, [pc, #248]	; (800f5dc <tcp_pcb_remove+0x10c>)
 800f4e2:	f640 0283 	movw	r2, #2179	; 0x883
 800f4e6:	493e      	ldr	r1, [pc, #248]	; (800f5e0 <tcp_pcb_remove+0x110>)
 800f4e8:	483e      	ldr	r0, [pc, #248]	; (800f5e4 <tcp_pcb_remove+0x114>)
 800f4ea:	f008 f8d5 	bl	8017698 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d106      	bne.n	800f502 <tcp_pcb_remove+0x32>
 800f4f4:	4b39      	ldr	r3, [pc, #228]	; (800f5dc <tcp_pcb_remove+0x10c>)
 800f4f6:	f640 0284 	movw	r2, #2180	; 0x884
 800f4fa:	493b      	ldr	r1, [pc, #236]	; (800f5e8 <tcp_pcb_remove+0x118>)
 800f4fc:	4839      	ldr	r0, [pc, #228]	; (800f5e4 <tcp_pcb_remove+0x114>)
 800f4fe:	f008 f8cb 	bl	8017698 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d105      	bne.n	800f518 <tcp_pcb_remove+0x48>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68da      	ldr	r2, [r3, #12]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	e013      	b.n	800f540 <tcp_pcb_remove+0x70>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	60fb      	str	r3, [r7, #12]
 800f51e:	e00c      	b.n	800f53a <tcp_pcb_remove+0x6a>
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	429a      	cmp	r2, r3
 800f528:	d104      	bne.n	800f534 <tcp_pcb_remove+0x64>
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	68da      	ldr	r2, [r3, #12]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	60da      	str	r2, [r3, #12]
 800f532:	e005      	b.n	800f540 <tcp_pcb_remove+0x70>
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	60fb      	str	r3, [r7, #12]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1ef      	bne.n	800f520 <tcp_pcb_remove+0x50>
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	2200      	movs	r2, #0
 800f544:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f546:	6838      	ldr	r0, [r7, #0]
 800f548:	f7ff ff72 	bl	800f430 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	7d1b      	ldrb	r3, [r3, #20]
 800f550:	2b0a      	cmp	r3, #10
 800f552:	d013      	beq.n	800f57c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d00f      	beq.n	800f57c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	8b5b      	ldrh	r3, [r3, #26]
 800f560:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f564:	2b00      	cmp	r3, #0
 800f566:	d009      	beq.n	800f57c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	8b5b      	ldrh	r3, [r3, #26]
 800f56c:	f043 0302 	orr.w	r3, r3, #2
 800f570:	b29a      	uxth	r2, r3
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f576:	6838      	ldr	r0, [r7, #0]
 800f578:	f002 ff6e 	bl	8012458 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	7d1b      	ldrb	r3, [r3, #20]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d020      	beq.n	800f5c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d006      	beq.n	800f59a <tcp_pcb_remove+0xca>
 800f58c:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <tcp_pcb_remove+0x10c>)
 800f58e:	f640 0293 	movw	r2, #2195	; 0x893
 800f592:	4916      	ldr	r1, [pc, #88]	; (800f5ec <tcp_pcb_remove+0x11c>)
 800f594:	4813      	ldr	r0, [pc, #76]	; (800f5e4 <tcp_pcb_remove+0x114>)
 800f596:	f008 f87f 	bl	8017698 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d006      	beq.n	800f5b0 <tcp_pcb_remove+0xe0>
 800f5a2:	4b0e      	ldr	r3, [pc, #56]	; (800f5dc <tcp_pcb_remove+0x10c>)
 800f5a4:	f640 0294 	movw	r2, #2196	; 0x894
 800f5a8:	4911      	ldr	r1, [pc, #68]	; (800f5f0 <tcp_pcb_remove+0x120>)
 800f5aa:	480e      	ldr	r0, [pc, #56]	; (800f5e4 <tcp_pcb_remove+0x114>)
 800f5ac:	f008 f874 	bl	8017698 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d006      	beq.n	800f5c6 <tcp_pcb_remove+0xf6>
 800f5b8:	4b08      	ldr	r3, [pc, #32]	; (800f5dc <tcp_pcb_remove+0x10c>)
 800f5ba:	f640 0296 	movw	r2, #2198	; 0x896
 800f5be:	490d      	ldr	r1, [pc, #52]	; (800f5f4 <tcp_pcb_remove+0x124>)
 800f5c0:	4808      	ldr	r0, [pc, #32]	; (800f5e4 <tcp_pcb_remove+0x114>)
 800f5c2:	f008 f869 	bl	8017698 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f5d2:	bf00      	nop
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	08019458 	.word	0x08019458
 800f5e0:	08019ac0 	.word	0x08019ac0
 800f5e4:	0801949c 	.word	0x0801949c
 800f5e8:	08019adc 	.word	0x08019adc
 800f5ec:	08019afc 	.word	0x08019afc
 800f5f0:	08019b14 	.word	0x08019b14
 800f5f4:	08019b30 	.word	0x08019b30

0800f5f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d106      	bne.n	800f614 <tcp_next_iss+0x1c>
 800f606:	4b0a      	ldr	r3, [pc, #40]	; (800f630 <tcp_next_iss+0x38>)
 800f608:	f640 02af 	movw	r2, #2223	; 0x8af
 800f60c:	4909      	ldr	r1, [pc, #36]	; (800f634 <tcp_next_iss+0x3c>)
 800f60e:	480a      	ldr	r0, [pc, #40]	; (800f638 <tcp_next_iss+0x40>)
 800f610:	f008 f842 	bl	8017698 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f614:	4b09      	ldr	r3, [pc, #36]	; (800f63c <tcp_next_iss+0x44>)
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	4b09      	ldr	r3, [pc, #36]	; (800f640 <tcp_next_iss+0x48>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4413      	add	r3, r2
 800f61e:	4a07      	ldr	r2, [pc, #28]	; (800f63c <tcp_next_iss+0x44>)
 800f620:	6013      	str	r3, [r2, #0]
  return iss;
 800f622:	4b06      	ldr	r3, [pc, #24]	; (800f63c <tcp_next_iss+0x44>)
 800f624:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f626:	4618      	mov	r0, r3
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	08019458 	.word	0x08019458
 800f634:	08019b48 	.word	0x08019b48
 800f638:	0801949c 	.word	0x0801949c
 800f63c:	20000024 	.word	0x20000024
 800f640:	20008994 	.word	0x20008994

0800f644 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d106      	bne.n	800f666 <tcp_eff_send_mss_netif+0x22>
 800f658:	4b14      	ldr	r3, [pc, #80]	; (800f6ac <tcp_eff_send_mss_netif+0x68>)
 800f65a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f65e:	4914      	ldr	r1, [pc, #80]	; (800f6b0 <tcp_eff_send_mss_netif+0x6c>)
 800f660:	4814      	ldr	r0, [pc, #80]	; (800f6b4 <tcp_eff_send_mss_netif+0x70>)
 800f662:	f008 f819 	bl	8017698 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d101      	bne.n	800f670 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f66c:	89fb      	ldrh	r3, [r7, #14]
 800f66e:	e019      	b.n	800f6a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f674:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f676:	8afb      	ldrh	r3, [r7, #22]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d012      	beq.n	800f6a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f67c:	2328      	movs	r3, #40	; 0x28
 800f67e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f680:	8afa      	ldrh	r2, [r7, #22]
 800f682:	8abb      	ldrh	r3, [r7, #20]
 800f684:	429a      	cmp	r2, r3
 800f686:	d904      	bls.n	800f692 <tcp_eff_send_mss_netif+0x4e>
 800f688:	8afa      	ldrh	r2, [r7, #22]
 800f68a:	8abb      	ldrh	r3, [r7, #20]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	b29b      	uxth	r3, r3
 800f690:	e000      	b.n	800f694 <tcp_eff_send_mss_netif+0x50>
 800f692:	2300      	movs	r3, #0
 800f694:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f696:	8a7a      	ldrh	r2, [r7, #18]
 800f698:	89fb      	ldrh	r3, [r7, #14]
 800f69a:	4293      	cmp	r3, r2
 800f69c:	bf28      	it	cs
 800f69e:	4613      	movcs	r3, r2
 800f6a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f6a2:	89fb      	ldrh	r3, [r7, #14]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	08019458 	.word	0x08019458
 800f6b0:	08019b64 	.word	0x08019b64
 800f6b4:	0801949c 	.word	0x0801949c

0800f6b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d119      	bne.n	800f700 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f6cc:	4b10      	ldr	r3, [pc, #64]	; (800f710 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f6ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f6d2:	4910      	ldr	r1, [pc, #64]	; (800f714 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f6d4:	4810      	ldr	r0, [pc, #64]	; (800f718 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f6d6:	f007 ffdf 	bl	8017698 <iprintf>

  while (pcb != NULL) {
 800f6da:	e011      	b.n	800f700 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d108      	bne.n	800f6fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7fe ffc6 	bl	800e680 <tcp_abort>
      pcb = next;
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	60fb      	str	r3, [r7, #12]
 800f6f8:	e002      	b.n	800f700 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1ea      	bne.n	800f6dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f706:	bf00      	nop
 800f708:	bf00      	nop
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	08019458 	.word	0x08019458
 800f714:	08019b8c 	.word	0x08019b8c
 800f718:	0801949c 	.word	0x0801949c

0800f71c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d02a      	beq.n	800f782 <tcp_netif_ip_addr_changed+0x66>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d026      	beq.n	800f782 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f734:	4b15      	ldr	r3, [pc, #84]	; (800f78c <tcp_netif_ip_addr_changed+0x70>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4619      	mov	r1, r3
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7ff ffbc 	bl	800f6b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f740:	4b13      	ldr	r3, [pc, #76]	; (800f790 <tcp_netif_ip_addr_changed+0x74>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4619      	mov	r1, r3
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7ff ffb6 	bl	800f6b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d017      	beq.n	800f782 <tcp_netif_ip_addr_changed+0x66>
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d013      	beq.n	800f782 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f75a:	4b0e      	ldr	r3, [pc, #56]	; (800f794 <tcp_netif_ip_addr_changed+0x78>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	60fb      	str	r3, [r7, #12]
 800f760:	e00c      	b.n	800f77c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d103      	bne.n	800f776 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	60fb      	str	r3, [r7, #12]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1ef      	bne.n	800f762 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f782:	bf00      	nop
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	200089a0 	.word	0x200089a0
 800f790:	20008998 	.word	0x20008998
 800f794:	2000899c 	.word	0x2000899c

0800f798 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d007      	beq.n	800f7b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7ff fc3d 	bl	800f02c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f7c0:	b590      	push	{r4, r7, lr}
 800f7c2:	b08d      	sub	sp, #52	; 0x34
 800f7c4:	af04      	add	r7, sp, #16
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d105      	bne.n	800f7dc <tcp_input+0x1c>
 800f7d0:	4b9b      	ldr	r3, [pc, #620]	; (800fa40 <tcp_input+0x280>)
 800f7d2:	2283      	movs	r2, #131	; 0x83
 800f7d4:	499b      	ldr	r1, [pc, #620]	; (800fa44 <tcp_input+0x284>)
 800f7d6:	489c      	ldr	r0, [pc, #624]	; (800fa48 <tcp_input+0x288>)
 800f7d8:	f007 ff5e 	bl	8017698 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	4a9a      	ldr	r2, [pc, #616]	; (800fa4c <tcp_input+0x28c>)
 800f7e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	895b      	ldrh	r3, [r3, #10]
 800f7e8:	2b13      	cmp	r3, #19
 800f7ea:	f240 83d1 	bls.w	800ff90 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f7ee:	4b98      	ldr	r3, [pc, #608]	; (800fa50 <tcp_input+0x290>)
 800f7f0:	695b      	ldr	r3, [r3, #20]
 800f7f2:	4a97      	ldr	r2, [pc, #604]	; (800fa50 <tcp_input+0x290>)
 800f7f4:	6812      	ldr	r2, [r2, #0]
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f005 ff07 	bl	801560c <ip4_addr_isbroadcast_u32>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	f040 83c7 	bne.w	800ff94 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f806:	4b92      	ldr	r3, [pc, #584]	; (800fa50 <tcp_input+0x290>)
 800f808:	695b      	ldr	r3, [r3, #20]
 800f80a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f80e:	2be0      	cmp	r3, #224	; 0xe0
 800f810:	f000 83c0 	beq.w	800ff94 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f814:	4b8d      	ldr	r3, [pc, #564]	; (800fa4c <tcp_input+0x28c>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	899b      	ldrh	r3, [r3, #12]
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fc fe39 	bl	800c494 <lwip_htons>
 800f822:	4603      	mov	r3, r0
 800f824:	0b1b      	lsrs	r3, r3, #12
 800f826:	b29b      	uxth	r3, r3
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	009b      	lsls	r3, r3, #2
 800f82c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f82e:	7cbb      	ldrb	r3, [r7, #18]
 800f830:	2b13      	cmp	r3, #19
 800f832:	f240 83b1 	bls.w	800ff98 <tcp_input+0x7d8>
 800f836:	7cbb      	ldrb	r3, [r7, #18]
 800f838:	b29a      	uxth	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	891b      	ldrh	r3, [r3, #8]
 800f83e:	429a      	cmp	r2, r3
 800f840:	f200 83aa 	bhi.w	800ff98 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f844:	7cbb      	ldrb	r3, [r7, #18]
 800f846:	b29b      	uxth	r3, r3
 800f848:	3b14      	subs	r3, #20
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	4b81      	ldr	r3, [pc, #516]	; (800fa54 <tcp_input+0x294>)
 800f84e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f850:	4b81      	ldr	r3, [pc, #516]	; (800fa58 <tcp_input+0x298>)
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	895a      	ldrh	r2, [r3, #10]
 800f85a:	7cbb      	ldrb	r3, [r7, #18]
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	429a      	cmp	r2, r3
 800f860:	d309      	bcc.n	800f876 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f862:	4b7c      	ldr	r3, [pc, #496]	; (800fa54 <tcp_input+0x294>)
 800f864:	881a      	ldrh	r2, [r3, #0]
 800f866:	4b7d      	ldr	r3, [pc, #500]	; (800fa5c <tcp_input+0x29c>)
 800f868:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f86a:	7cbb      	ldrb	r3, [r7, #18]
 800f86c:	4619      	mov	r1, r3
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7fe f8e8 	bl	800da44 <pbuf_remove_header>
 800f874:	e04e      	b.n	800f914 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d105      	bne.n	800f88a <tcp_input+0xca>
 800f87e:	4b70      	ldr	r3, [pc, #448]	; (800fa40 <tcp_input+0x280>)
 800f880:	22c2      	movs	r2, #194	; 0xc2
 800f882:	4977      	ldr	r1, [pc, #476]	; (800fa60 <tcp_input+0x2a0>)
 800f884:	4870      	ldr	r0, [pc, #448]	; (800fa48 <tcp_input+0x288>)
 800f886:	f007 ff07 	bl	8017698 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f88a:	2114      	movs	r1, #20
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f7fe f8d9 	bl	800da44 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	895a      	ldrh	r2, [r3, #10]
 800f896:	4b71      	ldr	r3, [pc, #452]	; (800fa5c <tcp_input+0x29c>)
 800f898:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f89a:	4b6e      	ldr	r3, [pc, #440]	; (800fa54 <tcp_input+0x294>)
 800f89c:	881a      	ldrh	r2, [r3, #0]
 800f89e:	4b6f      	ldr	r3, [pc, #444]	; (800fa5c <tcp_input+0x29c>)
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f8a6:	4b6d      	ldr	r3, [pc, #436]	; (800fa5c <tcp_input+0x29c>)
 800f8a8:	881b      	ldrh	r3, [r3, #0]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7fe f8c9 	bl	800da44 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	895b      	ldrh	r3, [r3, #10]
 800f8b8:	8a3a      	ldrh	r2, [r7, #16]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	f200 836e 	bhi.w	800ff9c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	4a64      	ldr	r2, [pc, #400]	; (800fa58 <tcp_input+0x298>)
 800f8c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	8a3a      	ldrh	r2, [r7, #16]
 800f8d0:	4611      	mov	r1, r2
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe f8b6 	bl	800da44 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	891a      	ldrh	r2, [r3, #8]
 800f8dc:	8a3b      	ldrh	r3, [r7, #16]
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	895b      	ldrh	r3, [r3, #10]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d005      	beq.n	800f8fa <tcp_input+0x13a>
 800f8ee:	4b54      	ldr	r3, [pc, #336]	; (800fa40 <tcp_input+0x280>)
 800f8f0:	22df      	movs	r2, #223	; 0xdf
 800f8f2:	495c      	ldr	r1, [pc, #368]	; (800fa64 <tcp_input+0x2a4>)
 800f8f4:	4854      	ldr	r0, [pc, #336]	; (800fa48 <tcp_input+0x288>)
 800f8f6:	f007 fecf 	bl	8017698 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	891a      	ldrh	r2, [r3, #8]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	891b      	ldrh	r3, [r3, #8]
 800f904:	429a      	cmp	r2, r3
 800f906:	d005      	beq.n	800f914 <tcp_input+0x154>
 800f908:	4b4d      	ldr	r3, [pc, #308]	; (800fa40 <tcp_input+0x280>)
 800f90a:	22e0      	movs	r2, #224	; 0xe0
 800f90c:	4956      	ldr	r1, [pc, #344]	; (800fa68 <tcp_input+0x2a8>)
 800f90e:	484e      	ldr	r0, [pc, #312]	; (800fa48 <tcp_input+0x288>)
 800f910:	f007 fec2 	bl	8017698 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f914:	4b4d      	ldr	r3, [pc, #308]	; (800fa4c <tcp_input+0x28c>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	4a4b      	ldr	r2, [pc, #300]	; (800fa4c <tcp_input+0x28c>)
 800f91e:	6814      	ldr	r4, [r2, #0]
 800f920:	4618      	mov	r0, r3
 800f922:	f7fc fdb7 	bl	800c494 <lwip_htons>
 800f926:	4603      	mov	r3, r0
 800f928:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f92a:	4b48      	ldr	r3, [pc, #288]	; (800fa4c <tcp_input+0x28c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	885b      	ldrh	r3, [r3, #2]
 800f930:	b29b      	uxth	r3, r3
 800f932:	4a46      	ldr	r2, [pc, #280]	; (800fa4c <tcp_input+0x28c>)
 800f934:	6814      	ldr	r4, [r2, #0]
 800f936:	4618      	mov	r0, r3
 800f938:	f7fc fdac 	bl	800c494 <lwip_htons>
 800f93c:	4603      	mov	r3, r0
 800f93e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f940:	4b42      	ldr	r3, [pc, #264]	; (800fa4c <tcp_input+0x28c>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	4a41      	ldr	r2, [pc, #260]	; (800fa4c <tcp_input+0x28c>)
 800f948:	6814      	ldr	r4, [r2, #0]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fc fdb7 	bl	800c4be <lwip_htonl>
 800f950:	4603      	mov	r3, r0
 800f952:	6063      	str	r3, [r4, #4]
 800f954:	6863      	ldr	r3, [r4, #4]
 800f956:	4a45      	ldr	r2, [pc, #276]	; (800fa6c <tcp_input+0x2ac>)
 800f958:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f95a:	4b3c      	ldr	r3, [pc, #240]	; (800fa4c <tcp_input+0x28c>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	4a3a      	ldr	r2, [pc, #232]	; (800fa4c <tcp_input+0x28c>)
 800f962:	6814      	ldr	r4, [r2, #0]
 800f964:	4618      	mov	r0, r3
 800f966:	f7fc fdaa 	bl	800c4be <lwip_htonl>
 800f96a:	4603      	mov	r3, r0
 800f96c:	60a3      	str	r3, [r4, #8]
 800f96e:	68a3      	ldr	r3, [r4, #8]
 800f970:	4a3f      	ldr	r2, [pc, #252]	; (800fa70 <tcp_input+0x2b0>)
 800f972:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f974:	4b35      	ldr	r3, [pc, #212]	; (800fa4c <tcp_input+0x28c>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	89db      	ldrh	r3, [r3, #14]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	4a33      	ldr	r2, [pc, #204]	; (800fa4c <tcp_input+0x28c>)
 800f97e:	6814      	ldr	r4, [r2, #0]
 800f980:	4618      	mov	r0, r3
 800f982:	f7fc fd87 	bl	800c494 <lwip_htons>
 800f986:	4603      	mov	r3, r0
 800f988:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f98a:	4b30      	ldr	r3, [pc, #192]	; (800fa4c <tcp_input+0x28c>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	899b      	ldrh	r3, [r3, #12]
 800f990:	b29b      	uxth	r3, r3
 800f992:	4618      	mov	r0, r3
 800f994:	f7fc fd7e 	bl	800c494 <lwip_htons>
 800f998:	4603      	mov	r3, r0
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	4b34      	ldr	r3, [pc, #208]	; (800fa74 <tcp_input+0x2b4>)
 800f9a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	891a      	ldrh	r2, [r3, #8]
 800f9aa:	4b33      	ldr	r3, [pc, #204]	; (800fa78 <tcp_input+0x2b8>)
 800f9ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f9ae:	4b31      	ldr	r3, [pc, #196]	; (800fa74 <tcp_input+0x2b4>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	f003 0303 	and.w	r3, r3, #3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00c      	beq.n	800f9d4 <tcp_input+0x214>
    tcplen++;
 800f9ba:	4b2f      	ldr	r3, [pc, #188]	; (800fa78 <tcp_input+0x2b8>)
 800f9bc:	881b      	ldrh	r3, [r3, #0]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	4b2d      	ldr	r3, [pc, #180]	; (800fa78 <tcp_input+0x2b8>)
 800f9c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	891a      	ldrh	r2, [r3, #8]
 800f9ca:	4b2b      	ldr	r3, [pc, #172]	; (800fa78 <tcp_input+0x2b8>)
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	f200 82e6 	bhi.w	800ffa0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9d8:	4b28      	ldr	r3, [pc, #160]	; (800fa7c <tcp_input+0x2bc>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	61fb      	str	r3, [r7, #28]
 800f9de:	e09d      	b.n	800fb1c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	7d1b      	ldrb	r3, [r3, #20]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d105      	bne.n	800f9f4 <tcp_input+0x234>
 800f9e8:	4b15      	ldr	r3, [pc, #84]	; (800fa40 <tcp_input+0x280>)
 800f9ea:	22fb      	movs	r2, #251	; 0xfb
 800f9ec:	4924      	ldr	r1, [pc, #144]	; (800fa80 <tcp_input+0x2c0>)
 800f9ee:	4816      	ldr	r0, [pc, #88]	; (800fa48 <tcp_input+0x288>)
 800f9f0:	f007 fe52 	bl	8017698 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
 800f9f8:	2b0a      	cmp	r3, #10
 800f9fa:	d105      	bne.n	800fa08 <tcp_input+0x248>
 800f9fc:	4b10      	ldr	r3, [pc, #64]	; (800fa40 <tcp_input+0x280>)
 800f9fe:	22fc      	movs	r2, #252	; 0xfc
 800fa00:	4920      	ldr	r1, [pc, #128]	; (800fa84 <tcp_input+0x2c4>)
 800fa02:	4811      	ldr	r0, [pc, #68]	; (800fa48 <tcp_input+0x288>)
 800fa04:	f007 fe48 	bl	8017698 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	7d1b      	ldrb	r3, [r3, #20]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d105      	bne.n	800fa1c <tcp_input+0x25c>
 800fa10:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <tcp_input+0x280>)
 800fa12:	22fd      	movs	r2, #253	; 0xfd
 800fa14:	491c      	ldr	r1, [pc, #112]	; (800fa88 <tcp_input+0x2c8>)
 800fa16:	480c      	ldr	r0, [pc, #48]	; (800fa48 <tcp_input+0x288>)
 800fa18:	f007 fe3e 	bl	8017698 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	7a1b      	ldrb	r3, [r3, #8]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d033      	beq.n	800fa8c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	7a1a      	ldrb	r2, [r3, #8]
 800fa28:	4b09      	ldr	r3, [pc, #36]	; (800fa50 <tcp_input+0x290>)
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa30:	3301      	adds	r3, #1
 800fa32:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d029      	beq.n	800fa8c <tcp_input+0x2cc>
      prev = pcb;
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	61bb      	str	r3, [r7, #24]
      continue;
 800fa3c:	e06b      	b.n	800fb16 <tcp_input+0x356>
 800fa3e:	bf00      	nop
 800fa40:	08019bc0 	.word	0x08019bc0
 800fa44:	08019bf4 	.word	0x08019bf4
 800fa48:	08019c0c 	.word	0x08019c0c
 800fa4c:	200089bc 	.word	0x200089bc
 800fa50:	20005424 	.word	0x20005424
 800fa54:	200089c0 	.word	0x200089c0
 800fa58:	200089c4 	.word	0x200089c4
 800fa5c:	200089c2 	.word	0x200089c2
 800fa60:	08019c34 	.word	0x08019c34
 800fa64:	08019c44 	.word	0x08019c44
 800fa68:	08019c50 	.word	0x08019c50
 800fa6c:	200089cc 	.word	0x200089cc
 800fa70:	200089d0 	.word	0x200089d0
 800fa74:	200089d8 	.word	0x200089d8
 800fa78:	200089d6 	.word	0x200089d6
 800fa7c:	200089a0 	.word	0x200089a0
 800fa80:	08019c70 	.word	0x08019c70
 800fa84:	08019c98 	.word	0x08019c98
 800fa88:	08019cc4 	.word	0x08019cc4
    }

    if (pcb->remote_port == tcphdr->src &&
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	8b1a      	ldrh	r2, [r3, #24]
 800fa90:	4b72      	ldr	r3, [pc, #456]	; (800fc5c <tcp_input+0x49c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	881b      	ldrh	r3, [r3, #0]
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d13a      	bne.n	800fb12 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	8ada      	ldrh	r2, [r3, #22]
 800faa0:	4b6e      	ldr	r3, [pc, #440]	; (800fc5c <tcp_input+0x49c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	885b      	ldrh	r3, [r3, #2]
 800faa6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d132      	bne.n	800fb12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	685a      	ldr	r2, [r3, #4]
 800fab0:	4b6b      	ldr	r3, [pc, #428]	; (800fc60 <tcp_input+0x4a0>)
 800fab2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d12c      	bne.n	800fb12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	4b68      	ldr	r3, [pc, #416]	; (800fc60 <tcp_input+0x4a0>)
 800fabe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d126      	bne.n	800fb12 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	69fa      	ldr	r2, [r7, #28]
 800faca:	429a      	cmp	r2, r3
 800facc:	d106      	bne.n	800fadc <tcp_input+0x31c>
 800face:	4b65      	ldr	r3, [pc, #404]	; (800fc64 <tcp_input+0x4a4>)
 800fad0:	f240 120d 	movw	r2, #269	; 0x10d
 800fad4:	4964      	ldr	r1, [pc, #400]	; (800fc68 <tcp_input+0x4a8>)
 800fad6:	4865      	ldr	r0, [pc, #404]	; (800fc6c <tcp_input+0x4ac>)
 800fad8:	f007 fdde 	bl	8017698 <iprintf>
      if (prev != NULL) {
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00a      	beq.n	800faf8 <tcp_input+0x338>
        prev->next = pcb->next;
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	68da      	ldr	r2, [r3, #12]
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800faea:	4b61      	ldr	r3, [pc, #388]	; (800fc70 <tcp_input+0x4b0>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800faf2:	4a5f      	ldr	r2, [pc, #380]	; (800fc70 <tcp_input+0x4b0>)
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800faf8:	69fb      	ldr	r3, [r7, #28]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	69fa      	ldr	r2, [r7, #28]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d111      	bne.n	800fb26 <tcp_input+0x366>
 800fb02:	4b58      	ldr	r3, [pc, #352]	; (800fc64 <tcp_input+0x4a4>)
 800fb04:	f240 1215 	movw	r2, #277	; 0x115
 800fb08:	495a      	ldr	r1, [pc, #360]	; (800fc74 <tcp_input+0x4b4>)
 800fb0a:	4858      	ldr	r0, [pc, #352]	; (800fc6c <tcp_input+0x4ac>)
 800fb0c:	f007 fdc4 	bl	8017698 <iprintf>
      break;
 800fb10:	e009      	b.n	800fb26 <tcp_input+0x366>
    }
    prev = pcb;
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	68db      	ldr	r3, [r3, #12]
 800fb1a:	61fb      	str	r3, [r7, #28]
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f47f af5e 	bne.w	800f9e0 <tcp_input+0x220>
 800fb24:	e000      	b.n	800fb28 <tcp_input+0x368>
      break;
 800fb26:	bf00      	nop
  }

  if (pcb == NULL) {
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	f040 80aa 	bne.w	800fc84 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb30:	4b51      	ldr	r3, [pc, #324]	; (800fc78 <tcp_input+0x4b8>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	61fb      	str	r3, [r7, #28]
 800fb36:	e03f      	b.n	800fbb8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	7d1b      	ldrb	r3, [r3, #20]
 800fb3c:	2b0a      	cmp	r3, #10
 800fb3e:	d006      	beq.n	800fb4e <tcp_input+0x38e>
 800fb40:	4b48      	ldr	r3, [pc, #288]	; (800fc64 <tcp_input+0x4a4>)
 800fb42:	f240 121f 	movw	r2, #287	; 0x11f
 800fb46:	494d      	ldr	r1, [pc, #308]	; (800fc7c <tcp_input+0x4bc>)
 800fb48:	4848      	ldr	r0, [pc, #288]	; (800fc6c <tcp_input+0x4ac>)
 800fb4a:	f007 fda5 	bl	8017698 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	7a1b      	ldrb	r3, [r3, #8]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d009      	beq.n	800fb6a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	7a1a      	ldrb	r2, [r3, #8]
 800fb5a:	4b41      	ldr	r3, [pc, #260]	; (800fc60 <tcp_input+0x4a0>)
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb62:	3301      	adds	r3, #1
 800fb64:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d122      	bne.n	800fbb0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	8b1a      	ldrh	r2, [r3, #24]
 800fb6e:	4b3b      	ldr	r3, [pc, #236]	; (800fc5c <tcp_input+0x49c>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d11b      	bne.n	800fbb2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	8ada      	ldrh	r2, [r3, #22]
 800fb7e:	4b37      	ldr	r3, [pc, #220]	; (800fc5c <tcp_input+0x49c>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	885b      	ldrh	r3, [r3, #2]
 800fb84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d113      	bne.n	800fbb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	685a      	ldr	r2, [r3, #4]
 800fb8e:	4b34      	ldr	r3, [pc, #208]	; (800fc60 <tcp_input+0x4a0>)
 800fb90:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d10d      	bne.n	800fbb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	4b31      	ldr	r3, [pc, #196]	; (800fc60 <tcp_input+0x4a0>)
 800fb9c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d107      	bne.n	800fbb2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fba2:	69f8      	ldr	r0, [r7, #28]
 800fba4:	f000 fb56 	bl	8010254 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7fd ffd1 	bl	800db50 <pbuf_free>
        return;
 800fbae:	e1fd      	b.n	800ffac <tcp_input+0x7ec>
        continue;
 800fbb0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	68db      	ldr	r3, [r3, #12]
 800fbb6:	61fb      	str	r3, [r7, #28]
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1bc      	bne.n	800fb38 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fbc2:	4b2f      	ldr	r3, [pc, #188]	; (800fc80 <tcp_input+0x4c0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	617b      	str	r3, [r7, #20]
 800fbc8:	e02a      	b.n	800fc20 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	7a1b      	ldrb	r3, [r3, #8]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00c      	beq.n	800fbec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	7a1a      	ldrb	r2, [r3, #8]
 800fbd6:	4b22      	ldr	r3, [pc, #136]	; (800fc60 <tcp_input+0x4a0>)
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbde:	3301      	adds	r3, #1
 800fbe0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d002      	beq.n	800fbec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	61bb      	str	r3, [r7, #24]
        continue;
 800fbea:	e016      	b.n	800fc1a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	8ada      	ldrh	r2, [r3, #22]
 800fbf0:	4b1a      	ldr	r3, [pc, #104]	; (800fc5c <tcp_input+0x49c>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	885b      	ldrh	r3, [r3, #2]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d10c      	bne.n	800fc16 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	4b17      	ldr	r3, [pc, #92]	; (800fc60 <tcp_input+0x4a0>)
 800fc02:	695b      	ldr	r3, [r3, #20]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d00f      	beq.n	800fc28 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00d      	beq.n	800fc2a <tcp_input+0x46a>
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d009      	beq.n	800fc2a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	617b      	str	r3, [r7, #20]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1d1      	bne.n	800fbca <tcp_input+0x40a>
 800fc26:	e000      	b.n	800fc2a <tcp_input+0x46a>
            break;
 800fc28:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d029      	beq.n	800fc84 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00a      	beq.n	800fc4c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	68da      	ldr	r2, [r3, #12]
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fc3e:	4b10      	ldr	r3, [pc, #64]	; (800fc80 <tcp_input+0x4c0>)
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fc46:	4a0e      	ldr	r2, [pc, #56]	; (800fc80 <tcp_input+0x4c0>)
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fc4c:	6978      	ldr	r0, [r7, #20]
 800fc4e:	f000 fa03 	bl	8010058 <tcp_listen_input>
      }
      pbuf_free(p);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7fd ff7c 	bl	800db50 <pbuf_free>
      return;
 800fc58:	e1a8      	b.n	800ffac <tcp_input+0x7ec>
 800fc5a:	bf00      	nop
 800fc5c:	200089bc 	.word	0x200089bc
 800fc60:	20005424 	.word	0x20005424
 800fc64:	08019bc0 	.word	0x08019bc0
 800fc68:	08019cec 	.word	0x08019cec
 800fc6c:	08019c0c 	.word	0x08019c0c
 800fc70:	200089a0 	.word	0x200089a0
 800fc74:	08019d18 	.word	0x08019d18
 800fc78:	200089a4 	.word	0x200089a4
 800fc7c:	08019d44 	.word	0x08019d44
 800fc80:	2000899c 	.word	0x2000899c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f000 8158 	beq.w	800ff3c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fc8c:	4b95      	ldr	r3, [pc, #596]	; (800fee4 <tcp_input+0x724>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	891a      	ldrh	r2, [r3, #8]
 800fc96:	4b93      	ldr	r3, [pc, #588]	; (800fee4 <tcp_input+0x724>)
 800fc98:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fc9a:	4a92      	ldr	r2, [pc, #584]	; (800fee4 <tcp_input+0x724>)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fca0:	4b91      	ldr	r3, [pc, #580]	; (800fee8 <tcp_input+0x728>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a8f      	ldr	r2, [pc, #572]	; (800fee4 <tcp_input+0x724>)
 800fca6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fca8:	4b90      	ldr	r3, [pc, #576]	; (800feec <tcp_input+0x72c>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fcae:	4b90      	ldr	r3, [pc, #576]	; (800fef0 <tcp_input+0x730>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fcb4:	4b8f      	ldr	r3, [pc, #572]	; (800fef4 <tcp_input+0x734>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fcba:	4b8f      	ldr	r3, [pc, #572]	; (800fef8 <tcp_input+0x738>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	f003 0308 	and.w	r3, r3, #8
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d006      	beq.n	800fcd4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	7b5b      	ldrb	r3, [r3, #13]
 800fcca:	f043 0301 	orr.w	r3, r3, #1
 800fcce:	b2da      	uxtb	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d017      	beq.n	800fd0c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fcdc:	69f8      	ldr	r0, [r7, #28]
 800fcde:	f7ff f929 	bl	800ef34 <tcp_process_refused_data>
 800fce2:	4603      	mov	r3, r0
 800fce4:	f113 0f0d 	cmn.w	r3, #13
 800fce8:	d007      	beq.n	800fcfa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d00c      	beq.n	800fd0c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fcf2:	4b82      	ldr	r3, [pc, #520]	; (800fefc <tcp_input+0x73c>)
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d008      	beq.n	800fd0c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f040 80e3 	bne.w	800feca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fd04:	69f8      	ldr	r0, [r7, #28]
 800fd06:	f003 f9ad 	bl	8013064 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fd0a:	e0de      	b.n	800feca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fd0c:	4a7c      	ldr	r2, [pc, #496]	; (800ff00 <tcp_input+0x740>)
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fd12:	69f8      	ldr	r0, [r7, #28]
 800fd14:	f000 fb18 	bl	8010348 <tcp_process>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fd1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd20:	f113 0f0d 	cmn.w	r3, #13
 800fd24:	f000 80d3 	beq.w	800fece <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fd28:	4b71      	ldr	r3, [pc, #452]	; (800fef0 <tcp_input+0x730>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	f003 0308 	and.w	r3, r3, #8
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d015      	beq.n	800fd60 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d008      	beq.n	800fd50 <tcp_input+0x590>
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd44:	69fa      	ldr	r2, [r7, #28]
 800fd46:	6912      	ldr	r2, [r2, #16]
 800fd48:	f06f 010d 	mvn.w	r1, #13
 800fd4c:	4610      	mov	r0, r2
 800fd4e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd50:	69f9      	ldr	r1, [r7, #28]
 800fd52:	486c      	ldr	r0, [pc, #432]	; (800ff04 <tcp_input+0x744>)
 800fd54:	f7ff fbbc 	bl	800f4d0 <tcp_pcb_remove>
        tcp_free(pcb);
 800fd58:	69f8      	ldr	r0, [r7, #28]
 800fd5a:	f7fe f9a9 	bl	800e0b0 <tcp_free>
 800fd5e:	e0da      	b.n	800ff16 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fd64:	4b63      	ldr	r3, [pc, #396]	; (800fef4 <tcp_input+0x734>)
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d01d      	beq.n	800fda8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fd6c:	4b61      	ldr	r3, [pc, #388]	; (800fef4 <tcp_input+0x734>)
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00a      	beq.n	800fd92 <tcp_input+0x5d2>
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd82:	69fa      	ldr	r2, [r7, #28]
 800fd84:	6910      	ldr	r0, [r2, #16]
 800fd86:	89fa      	ldrh	r2, [r7, #14]
 800fd88:	69f9      	ldr	r1, [r7, #28]
 800fd8a:	4798      	blx	r3
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	74fb      	strb	r3, [r7, #19]
 800fd90:	e001      	b.n	800fd96 <tcp_input+0x5d6>
 800fd92:	2300      	movs	r3, #0
 800fd94:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fd96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd9a:	f113 0f0d 	cmn.w	r3, #13
 800fd9e:	f000 8098 	beq.w	800fed2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fda2:	4b54      	ldr	r3, [pc, #336]	; (800fef4 <tcp_input+0x734>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fda8:	69f8      	ldr	r0, [r7, #28]
 800fdaa:	f000 f915 	bl	800ffd8 <tcp_input_delayed_close>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f040 8090 	bne.w	800fed6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fdb6:	4b4d      	ldr	r3, [pc, #308]	; (800feec <tcp_input+0x72c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d041      	beq.n	800fe42 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d006      	beq.n	800fdd4 <tcp_input+0x614>
 800fdc6:	4b50      	ldr	r3, [pc, #320]	; (800ff08 <tcp_input+0x748>)
 800fdc8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fdcc:	494f      	ldr	r1, [pc, #316]	; (800ff0c <tcp_input+0x74c>)
 800fdce:	4850      	ldr	r0, [pc, #320]	; (800ff10 <tcp_input+0x750>)
 800fdd0:	f007 fc62 	bl	8017698 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	8b5b      	ldrh	r3, [r3, #26]
 800fdd8:	f003 0310 	and.w	r3, r3, #16
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d008      	beq.n	800fdf2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fde0:	4b42      	ldr	r3, [pc, #264]	; (800feec <tcp_input+0x72c>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7fd feb3 	bl	800db50 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fdea:	69f8      	ldr	r0, [r7, #28]
 800fdec:	f7fe fc48 	bl	800e680 <tcp_abort>
            goto aborted;
 800fdf0:	e091      	b.n	800ff16 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d00c      	beq.n	800fe16 <tcp_input+0x656>
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	6918      	ldr	r0, [r3, #16]
 800fe06:	4b39      	ldr	r3, [pc, #228]	; (800feec <tcp_input+0x72c>)
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	69f9      	ldr	r1, [r7, #28]
 800fe0e:	47a0      	blx	r4
 800fe10:	4603      	mov	r3, r0
 800fe12:	74fb      	strb	r3, [r7, #19]
 800fe14:	e008      	b.n	800fe28 <tcp_input+0x668>
 800fe16:	4b35      	ldr	r3, [pc, #212]	; (800feec <tcp_input+0x72c>)
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	69f9      	ldr	r1, [r7, #28]
 800fe1e:	2000      	movs	r0, #0
 800fe20:	f7ff f95e 	bl	800f0e0 <tcp_recv_null>
 800fe24:	4603      	mov	r3, r0
 800fe26:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fe28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe2c:	f113 0f0d 	cmn.w	r3, #13
 800fe30:	d053      	beq.n	800feda <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fe32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d003      	beq.n	800fe42 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fe3a:	4b2c      	ldr	r3, [pc, #176]	; (800feec <tcp_input+0x72c>)
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fe42:	4b2b      	ldr	r3, [pc, #172]	; (800fef0 <tcp_input+0x730>)
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	f003 0320 	and.w	r3, r3, #32
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d030      	beq.n	800feb0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d009      	beq.n	800fe6a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe5a:	7b5a      	ldrb	r2, [r3, #13]
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe60:	f042 0220 	orr.w	r2, r2, #32
 800fe64:	b2d2      	uxtb	r2, r2
 800fe66:	735a      	strb	r2, [r3, #13]
 800fe68:	e022      	b.n	800feb0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fe72:	d005      	beq.n	800fe80 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe78:	3301      	adds	r3, #1
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00b      	beq.n	800fea2 <tcp_input+0x6e2>
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	6918      	ldr	r0, [r3, #16]
 800fe94:	2300      	movs	r3, #0
 800fe96:	2200      	movs	r2, #0
 800fe98:	69f9      	ldr	r1, [r7, #28]
 800fe9a:	47a0      	blx	r4
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	74fb      	strb	r3, [r7, #19]
 800fea0:	e001      	b.n	800fea6 <tcp_input+0x6e6>
 800fea2:	2300      	movs	r3, #0
 800fea4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800feaa:	f113 0f0d 	cmn.w	r3, #13
 800feae:	d016      	beq.n	800fede <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800feb0:	4b13      	ldr	r3, [pc, #76]	; (800ff00 <tcp_input+0x740>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800feb6:	69f8      	ldr	r0, [r7, #28]
 800feb8:	f000 f88e 	bl	800ffd8 <tcp_input_delayed_close>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d128      	bne.n	800ff14 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fec2:	69f8      	ldr	r0, [r7, #28]
 800fec4:	f002 fac8 	bl	8012458 <tcp_output>
 800fec8:	e025      	b.n	800ff16 <tcp_input+0x756>
        goto aborted;
 800feca:	bf00      	nop
 800fecc:	e023      	b.n	800ff16 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fece:	bf00      	nop
 800fed0:	e021      	b.n	800ff16 <tcp_input+0x756>
              goto aborted;
 800fed2:	bf00      	nop
 800fed4:	e01f      	b.n	800ff16 <tcp_input+0x756>
          goto aborted;
 800fed6:	bf00      	nop
 800fed8:	e01d      	b.n	800ff16 <tcp_input+0x756>
            goto aborted;
 800feda:	bf00      	nop
 800fedc:	e01b      	b.n	800ff16 <tcp_input+0x756>
              goto aborted;
 800fede:	bf00      	nop
 800fee0:	e019      	b.n	800ff16 <tcp_input+0x756>
 800fee2:	bf00      	nop
 800fee4:	200089ac 	.word	0x200089ac
 800fee8:	200089bc 	.word	0x200089bc
 800feec:	200089dc 	.word	0x200089dc
 800fef0:	200089d9 	.word	0x200089d9
 800fef4:	200089d4 	.word	0x200089d4
 800fef8:	200089d8 	.word	0x200089d8
 800fefc:	200089d6 	.word	0x200089d6
 800ff00:	200089e0 	.word	0x200089e0
 800ff04:	200089a0 	.word	0x200089a0
 800ff08:	08019bc0 	.word	0x08019bc0
 800ff0c:	08019d74 	.word	0x08019d74
 800ff10:	08019c0c 	.word	0x08019c0c
          goto aborted;
 800ff14:	bf00      	nop
    tcp_input_pcb = NULL;
 800ff16:	4b27      	ldr	r3, [pc, #156]	; (800ffb4 <tcp_input+0x7f4>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ff1c:	4b26      	ldr	r3, [pc, #152]	; (800ffb8 <tcp_input+0x7f8>)
 800ff1e:	2200      	movs	r2, #0
 800ff20:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ff22:	4b26      	ldr	r3, [pc, #152]	; (800ffbc <tcp_input+0x7fc>)
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d03f      	beq.n	800ffaa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ff2a:	4b24      	ldr	r3, [pc, #144]	; (800ffbc <tcp_input+0x7fc>)
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fd fe0e 	bl	800db50 <pbuf_free>
      inseg.p = NULL;
 800ff34:	4b21      	ldr	r3, [pc, #132]	; (800ffbc <tcp_input+0x7fc>)
 800ff36:	2200      	movs	r2, #0
 800ff38:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ff3a:	e036      	b.n	800ffaa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ff3c:	4b20      	ldr	r3, [pc, #128]	; (800ffc0 <tcp_input+0x800>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	899b      	ldrh	r3, [r3, #12]
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fc faa5 	bl	800c494 <lwip_htons>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	f003 0304 	and.w	r3, r3, #4
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d118      	bne.n	800ff88 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff56:	4b1b      	ldr	r3, [pc, #108]	; (800ffc4 <tcp_input+0x804>)
 800ff58:	6819      	ldr	r1, [r3, #0]
 800ff5a:	4b1b      	ldr	r3, [pc, #108]	; (800ffc8 <tcp_input+0x808>)
 800ff5c:	881b      	ldrh	r3, [r3, #0]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4b1a      	ldr	r3, [pc, #104]	; (800ffcc <tcp_input+0x80c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff66:	4b16      	ldr	r3, [pc, #88]	; (800ffc0 <tcp_input+0x800>)
 800ff68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff6a:	885b      	ldrh	r3, [r3, #2]
 800ff6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff6e:	4a14      	ldr	r2, [pc, #80]	; (800ffc0 <tcp_input+0x800>)
 800ff70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff72:	8812      	ldrh	r2, [r2, #0]
 800ff74:	b292      	uxth	r2, r2
 800ff76:	9202      	str	r2, [sp, #8]
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	4b15      	ldr	r3, [pc, #84]	; (800ffd0 <tcp_input+0x810>)
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	4b15      	ldr	r3, [pc, #84]	; (800ffd4 <tcp_input+0x814>)
 800ff80:	4602      	mov	r2, r0
 800ff82:	2000      	movs	r0, #0
 800ff84:	f003 f81c 	bl	8012fc0 <tcp_rst>
    pbuf_free(p);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7fd fde1 	bl	800db50 <pbuf_free>
  return;
 800ff8e:	e00c      	b.n	800ffaa <tcp_input+0x7ea>
    goto dropped;
 800ff90:	bf00      	nop
 800ff92:	e006      	b.n	800ffa2 <tcp_input+0x7e2>
    goto dropped;
 800ff94:	bf00      	nop
 800ff96:	e004      	b.n	800ffa2 <tcp_input+0x7e2>
    goto dropped;
 800ff98:	bf00      	nop
 800ff9a:	e002      	b.n	800ffa2 <tcp_input+0x7e2>
      goto dropped;
 800ff9c:	bf00      	nop
 800ff9e:	e000      	b.n	800ffa2 <tcp_input+0x7e2>
      goto dropped;
 800ffa0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7fd fdd4 	bl	800db50 <pbuf_free>
 800ffa8:	e000      	b.n	800ffac <tcp_input+0x7ec>
  return;
 800ffaa:	bf00      	nop
}
 800ffac:	3724      	adds	r7, #36	; 0x24
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd90      	pop	{r4, r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	200089e0 	.word	0x200089e0
 800ffb8:	200089dc 	.word	0x200089dc
 800ffbc:	200089ac 	.word	0x200089ac
 800ffc0:	200089bc 	.word	0x200089bc
 800ffc4:	200089d0 	.word	0x200089d0
 800ffc8:	200089d6 	.word	0x200089d6
 800ffcc:	200089cc 	.word	0x200089cc
 800ffd0:	20005434 	.word	0x20005434
 800ffd4:	20005438 	.word	0x20005438

0800ffd8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <tcp_input_delayed_close+0x1c>
 800ffe6:	4b17      	ldr	r3, [pc, #92]	; (8010044 <tcp_input_delayed_close+0x6c>)
 800ffe8:	f240 225a 	movw	r2, #602	; 0x25a
 800ffec:	4916      	ldr	r1, [pc, #88]	; (8010048 <tcp_input_delayed_close+0x70>)
 800ffee:	4817      	ldr	r0, [pc, #92]	; (801004c <tcp_input_delayed_close+0x74>)
 800fff0:	f007 fb52 	bl	8017698 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fff4:	4b16      	ldr	r3, [pc, #88]	; (8010050 <tcp_input_delayed_close+0x78>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	f003 0310 	and.w	r3, r3, #16
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d01c      	beq.n	801003a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	8b5b      	ldrh	r3, [r3, #26]
 8010004:	f003 0310 	and.w	r3, r3, #16
 8010008:	2b00      	cmp	r3, #0
 801000a:	d10d      	bne.n	8010028 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010012:	2b00      	cmp	r3, #0
 8010014:	d008      	beq.n	8010028 <tcp_input_delayed_close+0x50>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	6912      	ldr	r2, [r2, #16]
 8010020:	f06f 010e 	mvn.w	r1, #14
 8010024:	4610      	mov	r0, r2
 8010026:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010028:	6879      	ldr	r1, [r7, #4]
 801002a:	480a      	ldr	r0, [pc, #40]	; (8010054 <tcp_input_delayed_close+0x7c>)
 801002c:	f7ff fa50 	bl	800f4d0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f7fe f83d 	bl	800e0b0 <tcp_free>
    return 1;
 8010036:	2301      	movs	r3, #1
 8010038:	e000      	b.n	801003c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801003a:	2300      	movs	r3, #0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	08019bc0 	.word	0x08019bc0
 8010048:	08019d90 	.word	0x08019d90
 801004c:	08019c0c 	.word	0x08019c0c
 8010050:	200089d9 	.word	0x200089d9
 8010054:	200089a0 	.word	0x200089a0

08010058 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010058:	b590      	push	{r4, r7, lr}
 801005a:	b08b      	sub	sp, #44	; 0x2c
 801005c:	af04      	add	r7, sp, #16
 801005e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010060:	4b6f      	ldr	r3, [pc, #444]	; (8010220 <tcp_listen_input+0x1c8>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	f003 0304 	and.w	r3, r3, #4
 8010068:	2b00      	cmp	r3, #0
 801006a:	f040 80d2 	bne.w	8010212 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d106      	bne.n	8010082 <tcp_listen_input+0x2a>
 8010074:	4b6b      	ldr	r3, [pc, #428]	; (8010224 <tcp_listen_input+0x1cc>)
 8010076:	f240 2281 	movw	r2, #641	; 0x281
 801007a:	496b      	ldr	r1, [pc, #428]	; (8010228 <tcp_listen_input+0x1d0>)
 801007c:	486b      	ldr	r0, [pc, #428]	; (801022c <tcp_listen_input+0x1d4>)
 801007e:	f007 fb0b 	bl	8017698 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010082:	4b67      	ldr	r3, [pc, #412]	; (8010220 <tcp_listen_input+0x1c8>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	f003 0310 	and.w	r3, r3, #16
 801008a:	2b00      	cmp	r3, #0
 801008c:	d019      	beq.n	80100c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801008e:	4b68      	ldr	r3, [pc, #416]	; (8010230 <tcp_listen_input+0x1d8>)
 8010090:	6819      	ldr	r1, [r3, #0]
 8010092:	4b68      	ldr	r3, [pc, #416]	; (8010234 <tcp_listen_input+0x1dc>)
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	461a      	mov	r2, r3
 8010098:	4b67      	ldr	r3, [pc, #412]	; (8010238 <tcp_listen_input+0x1e0>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801009e:	4b67      	ldr	r3, [pc, #412]	; (801023c <tcp_listen_input+0x1e4>)
 80100a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100a2:	885b      	ldrh	r3, [r3, #2]
 80100a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100a6:	4a65      	ldr	r2, [pc, #404]	; (801023c <tcp_listen_input+0x1e4>)
 80100a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100aa:	8812      	ldrh	r2, [r2, #0]
 80100ac:	b292      	uxth	r2, r2
 80100ae:	9202      	str	r2, [sp, #8]
 80100b0:	9301      	str	r3, [sp, #4]
 80100b2:	4b63      	ldr	r3, [pc, #396]	; (8010240 <tcp_listen_input+0x1e8>)
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	4b63      	ldr	r3, [pc, #396]	; (8010244 <tcp_listen_input+0x1ec>)
 80100b8:	4602      	mov	r2, r0
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f002 ff80 	bl	8012fc0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80100c0:	e0a9      	b.n	8010216 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80100c2:	4b57      	ldr	r3, [pc, #348]	; (8010220 <tcp_listen_input+0x1c8>)
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	f003 0302 	and.w	r3, r3, #2
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f000 80a3 	beq.w	8010216 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	7d5b      	ldrb	r3, [r3, #21]
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7ff f927 	bl	800f328 <tcp_alloc>
 80100da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d111      	bne.n	8010106 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	699b      	ldr	r3, [r3, #24]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00a      	beq.n	8010100 <tcp_listen_input+0xa8>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	699b      	ldr	r3, [r3, #24]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	6910      	ldr	r0, [r2, #16]
 80100f2:	f04f 32ff 	mov.w	r2, #4294967295
 80100f6:	2100      	movs	r1, #0
 80100f8:	4798      	blx	r3
 80100fa:	4603      	mov	r3, r0
 80100fc:	73bb      	strb	r3, [r7, #14]
      return;
 80100fe:	e08b      	b.n	8010218 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010100:	23f0      	movs	r3, #240	; 0xf0
 8010102:	73bb      	strb	r3, [r7, #14]
      return;
 8010104:	e088      	b.n	8010218 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010106:	4b50      	ldr	r3, [pc, #320]	; (8010248 <tcp_listen_input+0x1f0>)
 8010108:	695a      	ldr	r2, [r3, #20]
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801010e:	4b4e      	ldr	r3, [pc, #312]	; (8010248 <tcp_listen_input+0x1f0>)
 8010110:	691a      	ldr	r2, [r3, #16]
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8ada      	ldrh	r2, [r3, #22]
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801011e:	4b47      	ldr	r3, [pc, #284]	; (801023c <tcp_listen_input+0x1e4>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	b29a      	uxth	r2, r3
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2203      	movs	r2, #3
 801012e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010130:	4b41      	ldr	r3, [pc, #260]	; (8010238 <tcp_listen_input+0x1e0>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010142:	6978      	ldr	r0, [r7, #20]
 8010144:	f7ff fa58 	bl	800f5f8 <tcp_next_iss>
 8010148:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	693a      	ldr	r2, [r7, #16]
 8010154:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	693a      	ldr	r2, [r7, #16]
 801015a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	693a      	ldr	r2, [r7, #16]
 8010160:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010162:	4b35      	ldr	r3, [pc, #212]	; (8010238 <tcp_listen_input+0x1e0>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	1e5a      	subs	r2, r3, #1
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	691a      	ldr	r2, [r3, #16]
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	7a5b      	ldrb	r3, [r3, #9]
 801017e:	f003 030c 	and.w	r3, r3, #12
 8010182:	b2da      	uxtb	r2, r3
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	7a1a      	ldrb	r2, [r3, #8]
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010190:	4b2e      	ldr	r3, [pc, #184]	; (801024c <tcp_listen_input+0x1f4>)
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	60da      	str	r2, [r3, #12]
 8010198:	4a2c      	ldr	r2, [pc, #176]	; (801024c <tcp_listen_input+0x1f4>)
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	6013      	str	r3, [r2, #0]
 801019e:	f003 f8d1 	bl	8013344 <tcp_timer_needed>
 80101a2:	4b2b      	ldr	r3, [pc, #172]	; (8010250 <tcp_listen_input+0x1f8>)
 80101a4:	2201      	movs	r2, #1
 80101a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80101a8:	6978      	ldr	r0, [r7, #20]
 80101aa:	f001 fd8f 	bl	8011ccc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80101ae:	4b23      	ldr	r3, [pc, #140]	; (801023c <tcp_listen_input+0x1e4>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	89db      	ldrh	r3, [r3, #14]
 80101b4:	b29a      	uxth	r2, r3
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	3304      	adds	r3, #4
 80101d0:	4618      	mov	r0, r3
 80101d2:	f004 ff85 	bl	80150e0 <ip4_route>
 80101d6:	4601      	mov	r1, r0
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	3304      	adds	r3, #4
 80101dc:	461a      	mov	r2, r3
 80101de:	4620      	mov	r0, r4
 80101e0:	f7ff fa30 	bl	800f644 <tcp_eff_send_mss_netif>
 80101e4:	4603      	mov	r3, r0
 80101e6:	461a      	mov	r2, r3
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80101ec:	2112      	movs	r1, #18
 80101ee:	6978      	ldr	r0, [r7, #20]
 80101f0:	f002 f844 	bl	801227c <tcp_enqueue_flags>
 80101f4:	4603      	mov	r3, r0
 80101f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80101f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d004      	beq.n	801020a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010200:	2100      	movs	r1, #0
 8010202:	6978      	ldr	r0, [r7, #20]
 8010204:	f7fe f97e 	bl	800e504 <tcp_abandon>
      return;
 8010208:	e006      	b.n	8010218 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801020a:	6978      	ldr	r0, [r7, #20]
 801020c:	f002 f924 	bl	8012458 <tcp_output>
  return;
 8010210:	e001      	b.n	8010216 <tcp_listen_input+0x1be>
    return;
 8010212:	bf00      	nop
 8010214:	e000      	b.n	8010218 <tcp_listen_input+0x1c0>
  return;
 8010216:	bf00      	nop
}
 8010218:	371c      	adds	r7, #28
 801021a:	46bd      	mov	sp, r7
 801021c:	bd90      	pop	{r4, r7, pc}
 801021e:	bf00      	nop
 8010220:	200089d8 	.word	0x200089d8
 8010224:	08019bc0 	.word	0x08019bc0
 8010228:	08019db8 	.word	0x08019db8
 801022c:	08019c0c 	.word	0x08019c0c
 8010230:	200089d0 	.word	0x200089d0
 8010234:	200089d6 	.word	0x200089d6
 8010238:	200089cc 	.word	0x200089cc
 801023c:	200089bc 	.word	0x200089bc
 8010240:	20005434 	.word	0x20005434
 8010244:	20005438 	.word	0x20005438
 8010248:	20005424 	.word	0x20005424
 801024c:	200089a0 	.word	0x200089a0
 8010250:	200089a8 	.word	0x200089a8

08010254 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b086      	sub	sp, #24
 8010258:	af04      	add	r7, sp, #16
 801025a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801025c:	4b2f      	ldr	r3, [pc, #188]	; (801031c <tcp_timewait_input+0xc8>)
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	f003 0304 	and.w	r3, r3, #4
 8010264:	2b00      	cmp	r3, #0
 8010266:	d153      	bne.n	8010310 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d106      	bne.n	801027c <tcp_timewait_input+0x28>
 801026e:	4b2c      	ldr	r3, [pc, #176]	; (8010320 <tcp_timewait_input+0xcc>)
 8010270:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010274:	492b      	ldr	r1, [pc, #172]	; (8010324 <tcp_timewait_input+0xd0>)
 8010276:	482c      	ldr	r0, [pc, #176]	; (8010328 <tcp_timewait_input+0xd4>)
 8010278:	f007 fa0e 	bl	8017698 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801027c:	4b27      	ldr	r3, [pc, #156]	; (801031c <tcp_timewait_input+0xc8>)
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	f003 0302 	and.w	r3, r3, #2
 8010284:	2b00      	cmp	r3, #0
 8010286:	d02a      	beq.n	80102de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010288:	4b28      	ldr	r3, [pc, #160]	; (801032c <tcp_timewait_input+0xd8>)
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	2b00      	cmp	r3, #0
 8010294:	db2d      	blt.n	80102f2 <tcp_timewait_input+0x9e>
 8010296:	4b25      	ldr	r3, [pc, #148]	; (801032c <tcp_timewait_input+0xd8>)
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029e:	6879      	ldr	r1, [r7, #4]
 80102a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102a2:	440b      	add	r3, r1
 80102a4:	1ad3      	subs	r3, r2, r3
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	dc23      	bgt.n	80102f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102aa:	4b21      	ldr	r3, [pc, #132]	; (8010330 <tcp_timewait_input+0xdc>)
 80102ac:	6819      	ldr	r1, [r3, #0]
 80102ae:	4b21      	ldr	r3, [pc, #132]	; (8010334 <tcp_timewait_input+0xe0>)
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	461a      	mov	r2, r3
 80102b4:	4b1d      	ldr	r3, [pc, #116]	; (801032c <tcp_timewait_input+0xd8>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102ba:	4b1f      	ldr	r3, [pc, #124]	; (8010338 <tcp_timewait_input+0xe4>)
 80102bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102be:	885b      	ldrh	r3, [r3, #2]
 80102c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102c2:	4a1d      	ldr	r2, [pc, #116]	; (8010338 <tcp_timewait_input+0xe4>)
 80102c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102c6:	8812      	ldrh	r2, [r2, #0]
 80102c8:	b292      	uxth	r2, r2
 80102ca:	9202      	str	r2, [sp, #8]
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	4b1b      	ldr	r3, [pc, #108]	; (801033c <tcp_timewait_input+0xe8>)
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	4b1b      	ldr	r3, [pc, #108]	; (8010340 <tcp_timewait_input+0xec>)
 80102d4:	4602      	mov	r2, r0
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f002 fe72 	bl	8012fc0 <tcp_rst>
      return;
 80102dc:	e01b      	b.n	8010316 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80102de:	4b0f      	ldr	r3, [pc, #60]	; (801031c <tcp_timewait_input+0xc8>)
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	f003 0301 	and.w	r3, r3, #1
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d003      	beq.n	80102f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80102ea:	4b16      	ldr	r3, [pc, #88]	; (8010344 <tcp_timewait_input+0xf0>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80102f2:	4b10      	ldr	r3, [pc, #64]	; (8010334 <tcp_timewait_input+0xe0>)
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00c      	beq.n	8010314 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	8b5b      	ldrh	r3, [r3, #26]
 80102fe:	f043 0302 	orr.w	r3, r3, #2
 8010302:	b29a      	uxth	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f002 f8a5 	bl	8012458 <tcp_output>
  }
  return;
 801030e:	e001      	b.n	8010314 <tcp_timewait_input+0xc0>
    return;
 8010310:	bf00      	nop
 8010312:	e000      	b.n	8010316 <tcp_timewait_input+0xc2>
  return;
 8010314:	bf00      	nop
}
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	200089d8 	.word	0x200089d8
 8010320:	08019bc0 	.word	0x08019bc0
 8010324:	08019dd8 	.word	0x08019dd8
 8010328:	08019c0c 	.word	0x08019c0c
 801032c:	200089cc 	.word	0x200089cc
 8010330:	200089d0 	.word	0x200089d0
 8010334:	200089d6 	.word	0x200089d6
 8010338:	200089bc 	.word	0x200089bc
 801033c:	20005434 	.word	0x20005434
 8010340:	20005438 	.word	0x20005438
 8010344:	20008994 	.word	0x20008994

08010348 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010348:	b590      	push	{r4, r7, lr}
 801034a:	b08d      	sub	sp, #52	; 0x34
 801034c:	af04      	add	r7, sp, #16
 801034e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010350:	2300      	movs	r3, #0
 8010352:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010354:	2300      	movs	r3, #0
 8010356:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d106      	bne.n	801036c <tcp_process+0x24>
 801035e:	4b9d      	ldr	r3, [pc, #628]	; (80105d4 <tcp_process+0x28c>)
 8010360:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010364:	499c      	ldr	r1, [pc, #624]	; (80105d8 <tcp_process+0x290>)
 8010366:	489d      	ldr	r0, [pc, #628]	; (80105dc <tcp_process+0x294>)
 8010368:	f007 f996 	bl	8017698 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801036c:	4b9c      	ldr	r3, [pc, #624]	; (80105e0 <tcp_process+0x298>)
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	f003 0304 	and.w	r3, r3, #4
 8010374:	2b00      	cmp	r3, #0
 8010376:	d04e      	beq.n	8010416 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	7d1b      	ldrb	r3, [r3, #20]
 801037c:	2b02      	cmp	r3, #2
 801037e:	d108      	bne.n	8010392 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010384:	4b97      	ldr	r3, [pc, #604]	; (80105e4 <tcp_process+0x29c>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	429a      	cmp	r2, r3
 801038a:	d123      	bne.n	80103d4 <tcp_process+0x8c>
        acceptable = 1;
 801038c:	2301      	movs	r3, #1
 801038e:	76fb      	strb	r3, [r7, #27]
 8010390:	e020      	b.n	80103d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010396:	4b94      	ldr	r3, [pc, #592]	; (80105e8 <tcp_process+0x2a0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	429a      	cmp	r2, r3
 801039c:	d102      	bne.n	80103a4 <tcp_process+0x5c>
        acceptable = 1;
 801039e:	2301      	movs	r3, #1
 80103a0:	76fb      	strb	r3, [r7, #27]
 80103a2:	e017      	b.n	80103d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80103a4:	4b90      	ldr	r3, [pc, #576]	; (80105e8 <tcp_process+0x2a0>)
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ac:	1ad3      	subs	r3, r2, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	db10      	blt.n	80103d4 <tcp_process+0x8c>
 80103b2:	4b8d      	ldr	r3, [pc, #564]	; (80105e8 <tcp_process+0x2a0>)
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ba:	6879      	ldr	r1, [r7, #4]
 80103bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103be:	440b      	add	r3, r1
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	dc06      	bgt.n	80103d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	8b5b      	ldrh	r3, [r3, #26]
 80103ca:	f043 0302 	orr.w	r3, r3, #2
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80103d4:	7efb      	ldrb	r3, [r7, #27]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d01b      	beq.n	8010412 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	7d1b      	ldrb	r3, [r3, #20]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d106      	bne.n	80103f0 <tcp_process+0xa8>
 80103e2:	4b7c      	ldr	r3, [pc, #496]	; (80105d4 <tcp_process+0x28c>)
 80103e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80103e8:	4980      	ldr	r1, [pc, #512]	; (80105ec <tcp_process+0x2a4>)
 80103ea:	487c      	ldr	r0, [pc, #496]	; (80105dc <tcp_process+0x294>)
 80103ec:	f007 f954 	bl	8017698 <iprintf>
      recv_flags |= TF_RESET;
 80103f0:	4b7f      	ldr	r3, [pc, #508]	; (80105f0 <tcp_process+0x2a8>)
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	f043 0308 	orr.w	r3, r3, #8
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	4b7d      	ldr	r3, [pc, #500]	; (80105f0 <tcp_process+0x2a8>)
 80103fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	8b5b      	ldrh	r3, [r3, #26]
 8010402:	f023 0301 	bic.w	r3, r3, #1
 8010406:	b29a      	uxth	r2, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801040c:	f06f 030d 	mvn.w	r3, #13
 8010410:	e37a      	b.n	8010b08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010412:	2300      	movs	r3, #0
 8010414:	e378      	b.n	8010b08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010416:	4b72      	ldr	r3, [pc, #456]	; (80105e0 <tcp_process+0x298>)
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	f003 0302 	and.w	r3, r3, #2
 801041e:	2b00      	cmp	r3, #0
 8010420:	d010      	beq.n	8010444 <tcp_process+0xfc>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	7d1b      	ldrb	r3, [r3, #20]
 8010426:	2b02      	cmp	r3, #2
 8010428:	d00c      	beq.n	8010444 <tcp_process+0xfc>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	7d1b      	ldrb	r3, [r3, #20]
 801042e:	2b03      	cmp	r3, #3
 8010430:	d008      	beq.n	8010444 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	8b5b      	ldrh	r3, [r3, #26]
 8010436:	f043 0302 	orr.w	r3, r3, #2
 801043a:	b29a      	uxth	r2, r3
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010440:	2300      	movs	r3, #0
 8010442:	e361      	b.n	8010b08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	8b5b      	ldrh	r3, [r3, #26]
 8010448:	f003 0310 	and.w	r3, r3, #16
 801044c:	2b00      	cmp	r3, #0
 801044e:	d103      	bne.n	8010458 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010450:	4b68      	ldr	r3, [pc, #416]	; (80105f4 <tcp_process+0x2ac>)
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2200      	movs	r2, #0
 8010464:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f001 fc2f 	bl	8011ccc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	7d1b      	ldrb	r3, [r3, #20]
 8010472:	3b02      	subs	r3, #2
 8010474:	2b07      	cmp	r3, #7
 8010476:	f200 8337 	bhi.w	8010ae8 <tcp_process+0x7a0>
 801047a:	a201      	add	r2, pc, #4	; (adr r2, 8010480 <tcp_process+0x138>)
 801047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010480:	080104a1 	.word	0x080104a1
 8010484:	080106d1 	.word	0x080106d1
 8010488:	08010849 	.word	0x08010849
 801048c:	08010873 	.word	0x08010873
 8010490:	08010997 	.word	0x08010997
 8010494:	08010849 	.word	0x08010849
 8010498:	08010a23 	.word	0x08010a23
 801049c:	08010ab3 	.word	0x08010ab3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80104a0:	4b4f      	ldr	r3, [pc, #316]	; (80105e0 <tcp_process+0x298>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	f003 0310 	and.w	r3, r3, #16
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	f000 80e4 	beq.w	8010676 <tcp_process+0x32e>
 80104ae:	4b4c      	ldr	r3, [pc, #304]	; (80105e0 <tcp_process+0x298>)
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	f003 0302 	and.w	r3, r3, #2
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 80dd 	beq.w	8010676 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	4b48      	ldr	r3, [pc, #288]	; (80105e4 <tcp_process+0x29c>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	f040 80d5 	bne.w	8010676 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80104cc:	4b46      	ldr	r3, [pc, #280]	; (80105e8 <tcp_process+0x2a0>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	1c5a      	adds	r2, r3, #1
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80104de:	4b41      	ldr	r3, [pc, #260]	; (80105e4 <tcp_process+0x29c>)
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80104e6:	4b44      	ldr	r3, [pc, #272]	; (80105f8 <tcp_process+0x2b0>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	89db      	ldrh	r3, [r3, #14]
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010500:	4b39      	ldr	r3, [pc, #228]	; (80105e8 <tcp_process+0x2a0>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	1e5a      	subs	r2, r3, #1
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2204      	movs	r2, #4
 801050e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	3304      	adds	r3, #4
 8010518:	4618      	mov	r0, r3
 801051a:	f004 fde1 	bl	80150e0 <ip4_route>
 801051e:	4601      	mov	r1, r0
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	3304      	adds	r3, #4
 8010524:	461a      	mov	r2, r3
 8010526:	4620      	mov	r0, r4
 8010528:	f7ff f88c 	bl	800f644 <tcp_eff_send_mss_netif>
 801052c:	4603      	mov	r3, r0
 801052e:	461a      	mov	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010538:	009a      	lsls	r2, r3, #2
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801053e:	005b      	lsls	r3, r3, #1
 8010540:	f241 111c 	movw	r1, #4380	; 0x111c
 8010544:	428b      	cmp	r3, r1
 8010546:	bf38      	it	cc
 8010548:	460b      	movcc	r3, r1
 801054a:	429a      	cmp	r2, r3
 801054c:	d204      	bcs.n	8010558 <tcp_process+0x210>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	b29b      	uxth	r3, r3
 8010556:	e00d      	b.n	8010574 <tcp_process+0x22c>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801055c:	005b      	lsls	r3, r3, #1
 801055e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010562:	4293      	cmp	r3, r2
 8010564:	d904      	bls.n	8010570 <tcp_process+0x228>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801056a:	005b      	lsls	r3, r3, #1
 801056c:	b29b      	uxth	r3, r3
 801056e:	e001      	b.n	8010574 <tcp_process+0x22c>
 8010570:	f241 131c 	movw	r3, #4380	; 0x111c
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010580:	2b00      	cmp	r3, #0
 8010582:	d106      	bne.n	8010592 <tcp_process+0x24a>
 8010584:	4b13      	ldr	r3, [pc, #76]	; (80105d4 <tcp_process+0x28c>)
 8010586:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801058a:	491c      	ldr	r1, [pc, #112]	; (80105fc <tcp_process+0x2b4>)
 801058c:	4813      	ldr	r0, [pc, #76]	; (80105dc <tcp_process+0x294>)
 801058e:	f007 f883 	bl	8017698 <iprintf>
        --pcb->snd_queuelen;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010598:	3b01      	subs	r3, #1
 801059a:	b29a      	uxth	r2, r3
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d12a      	bne.n	8010604 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d106      	bne.n	80105c8 <tcp_process+0x280>
 80105ba:	4b06      	ldr	r3, [pc, #24]	; (80105d4 <tcp_process+0x28c>)
 80105bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80105c0:	490f      	ldr	r1, [pc, #60]	; (8010600 <tcp_process+0x2b8>)
 80105c2:	4806      	ldr	r0, [pc, #24]	; (80105dc <tcp_process+0x294>)
 80105c4:	f007 f868 	bl	8017698 <iprintf>
          pcb->unsent = rseg->next;
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80105d0:	e01c      	b.n	801060c <tcp_process+0x2c4>
 80105d2:	bf00      	nop
 80105d4:	08019bc0 	.word	0x08019bc0
 80105d8:	08019df8 	.word	0x08019df8
 80105dc:	08019c0c 	.word	0x08019c0c
 80105e0:	200089d8 	.word	0x200089d8
 80105e4:	200089d0 	.word	0x200089d0
 80105e8:	200089cc 	.word	0x200089cc
 80105ec:	08019e14 	.word	0x08019e14
 80105f0:	200089d9 	.word	0x200089d9
 80105f4:	20008994 	.word	0x20008994
 80105f8:	200089bc 	.word	0x200089bc
 80105fc:	08019e34 	.word	0x08019e34
 8010600:	08019e4c 	.word	0x08019e4c
        } else {
          pcb->unacked = rseg->next;
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801060c:	69f8      	ldr	r0, [r7, #28]
 801060e:	f7fe fd22 	bl	800f056 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010616:	2b00      	cmp	r3, #0
 8010618:	d104      	bne.n	8010624 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010620:	861a      	strh	r2, [r3, #48]	; 0x30
 8010622:	e006      	b.n	8010632 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00a      	beq.n	8010652 <tcp_process+0x30a>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	6910      	ldr	r0, [r2, #16]
 8010646:	2200      	movs	r2, #0
 8010648:	6879      	ldr	r1, [r7, #4]
 801064a:	4798      	blx	r3
 801064c:	4603      	mov	r3, r0
 801064e:	76bb      	strb	r3, [r7, #26]
 8010650:	e001      	b.n	8010656 <tcp_process+0x30e>
 8010652:	2300      	movs	r3, #0
 8010654:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010656:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801065a:	f113 0f0d 	cmn.w	r3, #13
 801065e:	d102      	bne.n	8010666 <tcp_process+0x31e>
          return ERR_ABRT;
 8010660:	f06f 030c 	mvn.w	r3, #12
 8010664:	e250      	b.n	8010b08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	8b5b      	ldrh	r3, [r3, #26]
 801066a:	f043 0302 	orr.w	r3, r3, #2
 801066e:	b29a      	uxth	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010674:	e23a      	b.n	8010aec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010676:	4b98      	ldr	r3, [pc, #608]	; (80108d8 <tcp_process+0x590>)
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	f003 0310 	and.w	r3, r3, #16
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 8234 	beq.w	8010aec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010684:	4b95      	ldr	r3, [pc, #596]	; (80108dc <tcp_process+0x594>)
 8010686:	6819      	ldr	r1, [r3, #0]
 8010688:	4b95      	ldr	r3, [pc, #596]	; (80108e0 <tcp_process+0x598>)
 801068a:	881b      	ldrh	r3, [r3, #0]
 801068c:	461a      	mov	r2, r3
 801068e:	4b95      	ldr	r3, [pc, #596]	; (80108e4 <tcp_process+0x59c>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010694:	4b94      	ldr	r3, [pc, #592]	; (80108e8 <tcp_process+0x5a0>)
 8010696:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010698:	885b      	ldrh	r3, [r3, #2]
 801069a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801069c:	4a92      	ldr	r2, [pc, #584]	; (80108e8 <tcp_process+0x5a0>)
 801069e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106a0:	8812      	ldrh	r2, [r2, #0]
 80106a2:	b292      	uxth	r2, r2
 80106a4:	9202      	str	r2, [sp, #8]
 80106a6:	9301      	str	r3, [sp, #4]
 80106a8:	4b90      	ldr	r3, [pc, #576]	; (80108ec <tcp_process+0x5a4>)
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	4b90      	ldr	r3, [pc, #576]	; (80108f0 <tcp_process+0x5a8>)
 80106ae:	4602      	mov	r2, r0
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f002 fc85 	bl	8012fc0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106bc:	2b05      	cmp	r3, #5
 80106be:	f200 8215 	bhi.w	8010aec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f002 fa51 	bl	8012b70 <tcp_rexmit_rto>
      break;
 80106ce:	e20d      	b.n	8010aec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80106d0:	4b81      	ldr	r3, [pc, #516]	; (80108d8 <tcp_process+0x590>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	f003 0310 	and.w	r3, r3, #16
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f000 80a1 	beq.w	8010820 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106de:	4b7f      	ldr	r3, [pc, #508]	; (80108dc <tcp_process+0x594>)
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	3b01      	subs	r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	db7e      	blt.n	80107ec <tcp_process+0x4a4>
 80106ee:	4b7b      	ldr	r3, [pc, #492]	; (80108dc <tcp_process+0x594>)
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	dc77      	bgt.n	80107ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2204      	movs	r2, #4
 8010700:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010706:	2b00      	cmp	r3, #0
 8010708:	d102      	bne.n	8010710 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801070a:	23fa      	movs	r3, #250	; 0xfa
 801070c:	76bb      	strb	r3, [r7, #26]
 801070e:	e01d      	b.n	801074c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010714:	699b      	ldr	r3, [r3, #24]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d106      	bne.n	8010728 <tcp_process+0x3e0>
 801071a:	4b76      	ldr	r3, [pc, #472]	; (80108f4 <tcp_process+0x5ac>)
 801071c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010720:	4975      	ldr	r1, [pc, #468]	; (80108f8 <tcp_process+0x5b0>)
 8010722:	4876      	ldr	r0, [pc, #472]	; (80108fc <tcp_process+0x5b4>)
 8010724:	f006 ffb8 	bl	8017698 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801072c:	699b      	ldr	r3, [r3, #24]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <tcp_process+0x400>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010736:	699b      	ldr	r3, [r3, #24]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	6910      	ldr	r0, [r2, #16]
 801073c:	2200      	movs	r2, #0
 801073e:	6879      	ldr	r1, [r7, #4]
 8010740:	4798      	blx	r3
 8010742:	4603      	mov	r3, r0
 8010744:	76bb      	strb	r3, [r7, #26]
 8010746:	e001      	b.n	801074c <tcp_process+0x404>
 8010748:	23f0      	movs	r3, #240	; 0xf0
 801074a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801074c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00a      	beq.n	801076a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010754:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010758:	f113 0f0d 	cmn.w	r3, #13
 801075c:	d002      	beq.n	8010764 <tcp_process+0x41c>
              tcp_abort(pcb);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7fd ff8e 	bl	800e680 <tcp_abort>
            }
            return ERR_ABRT;
 8010764:	f06f 030c 	mvn.w	r3, #12
 8010768:	e1ce      	b.n	8010b08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 fae0 	bl	8010d30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010770:	4b63      	ldr	r3, [pc, #396]	; (8010900 <tcp_process+0x5b8>)
 8010772:	881b      	ldrh	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d005      	beq.n	8010784 <tcp_process+0x43c>
            recv_acked--;
 8010778:	4b61      	ldr	r3, [pc, #388]	; (8010900 <tcp_process+0x5b8>)
 801077a:	881b      	ldrh	r3, [r3, #0]
 801077c:	3b01      	subs	r3, #1
 801077e:	b29a      	uxth	r2, r3
 8010780:	4b5f      	ldr	r3, [pc, #380]	; (8010900 <tcp_process+0x5b8>)
 8010782:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010788:	009a      	lsls	r2, r3, #2
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801078e:	005b      	lsls	r3, r3, #1
 8010790:	f241 111c 	movw	r1, #4380	; 0x111c
 8010794:	428b      	cmp	r3, r1
 8010796:	bf38      	it	cc
 8010798:	460b      	movcc	r3, r1
 801079a:	429a      	cmp	r2, r3
 801079c:	d204      	bcs.n	80107a8 <tcp_process+0x460>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	e00d      	b.n	80107c4 <tcp_process+0x47c>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ac:	005b      	lsls	r3, r3, #1
 80107ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d904      	bls.n	80107c0 <tcp_process+0x478>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ba:	005b      	lsls	r3, r3, #1
 80107bc:	b29b      	uxth	r3, r3
 80107be:	e001      	b.n	80107c4 <tcp_process+0x47c>
 80107c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80107ca:	4b4e      	ldr	r3, [pc, #312]	; (8010904 <tcp_process+0x5bc>)
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	f003 0320 	and.w	r3, r3, #32
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d037      	beq.n	8010846 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	8b5b      	ldrh	r3, [r3, #26]
 80107da:	f043 0302 	orr.w	r3, r3, #2
 80107de:	b29a      	uxth	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2207      	movs	r2, #7
 80107e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80107ea:	e02c      	b.n	8010846 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107ec:	4b3b      	ldr	r3, [pc, #236]	; (80108dc <tcp_process+0x594>)
 80107ee:	6819      	ldr	r1, [r3, #0]
 80107f0:	4b3b      	ldr	r3, [pc, #236]	; (80108e0 <tcp_process+0x598>)
 80107f2:	881b      	ldrh	r3, [r3, #0]
 80107f4:	461a      	mov	r2, r3
 80107f6:	4b3b      	ldr	r3, [pc, #236]	; (80108e4 <tcp_process+0x59c>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107fc:	4b3a      	ldr	r3, [pc, #232]	; (80108e8 <tcp_process+0x5a0>)
 80107fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010800:	885b      	ldrh	r3, [r3, #2]
 8010802:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010804:	4a38      	ldr	r2, [pc, #224]	; (80108e8 <tcp_process+0x5a0>)
 8010806:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010808:	8812      	ldrh	r2, [r2, #0]
 801080a:	b292      	uxth	r2, r2
 801080c:	9202      	str	r2, [sp, #8]
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	4b36      	ldr	r3, [pc, #216]	; (80108ec <tcp_process+0x5a4>)
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	4b36      	ldr	r3, [pc, #216]	; (80108f0 <tcp_process+0x5a8>)
 8010816:	4602      	mov	r2, r0
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f002 fbd1 	bl	8012fc0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801081e:	e167      	b.n	8010af0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010820:	4b2d      	ldr	r3, [pc, #180]	; (80108d8 <tcp_process+0x590>)
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	f003 0302 	and.w	r3, r3, #2
 8010828:	2b00      	cmp	r3, #0
 801082a:	f000 8161 	beq.w	8010af0 <tcp_process+0x7a8>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010832:	1e5a      	subs	r2, r3, #1
 8010834:	4b2b      	ldr	r3, [pc, #172]	; (80108e4 <tcp_process+0x59c>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	429a      	cmp	r2, r3
 801083a:	f040 8159 	bne.w	8010af0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f002 f9b8 	bl	8012bb4 <tcp_rexmit>
      break;
 8010844:	e154      	b.n	8010af0 <tcp_process+0x7a8>
 8010846:	e153      	b.n	8010af0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f000 fa71 	bl	8010d30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801084e:	4b2d      	ldr	r3, [pc, #180]	; (8010904 <tcp_process+0x5bc>)
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	f003 0320 	and.w	r3, r3, #32
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 814c 	beq.w	8010af4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	8b5b      	ldrh	r3, [r3, #26]
 8010860:	f043 0302 	orr.w	r3, r3, #2
 8010864:	b29a      	uxth	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2207      	movs	r2, #7
 801086e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010870:	e140      	b.n	8010af4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 fa5c 	bl	8010d30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010878:	4b22      	ldr	r3, [pc, #136]	; (8010904 <tcp_process+0x5bc>)
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	f003 0320 	and.w	r3, r3, #32
 8010880:	2b00      	cmp	r3, #0
 8010882:	d071      	beq.n	8010968 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010884:	4b14      	ldr	r3, [pc, #80]	; (80108d8 <tcp_process+0x590>)
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	f003 0310 	and.w	r3, r3, #16
 801088c:	2b00      	cmp	r3, #0
 801088e:	d060      	beq.n	8010952 <tcp_process+0x60a>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010894:	4b11      	ldr	r3, [pc, #68]	; (80108dc <tcp_process+0x594>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	429a      	cmp	r2, r3
 801089a:	d15a      	bne.n	8010952 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d156      	bne.n	8010952 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	8b5b      	ldrh	r3, [r3, #26]
 80108a8:	f043 0302 	orr.w	r3, r3, #2
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f7fe fdbc 	bl	800f430 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80108b8:	4b13      	ldr	r3, [pc, #76]	; (8010908 <tcp_process+0x5c0>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d105      	bne.n	80108ce <tcp_process+0x586>
 80108c2:	4b11      	ldr	r3, [pc, #68]	; (8010908 <tcp_process+0x5c0>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	4a0f      	ldr	r2, [pc, #60]	; (8010908 <tcp_process+0x5c0>)
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	e02e      	b.n	801092c <tcp_process+0x5e4>
 80108ce:	4b0e      	ldr	r3, [pc, #56]	; (8010908 <tcp_process+0x5c0>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	617b      	str	r3, [r7, #20]
 80108d4:	e027      	b.n	8010926 <tcp_process+0x5de>
 80108d6:	bf00      	nop
 80108d8:	200089d8 	.word	0x200089d8
 80108dc:	200089d0 	.word	0x200089d0
 80108e0:	200089d6 	.word	0x200089d6
 80108e4:	200089cc 	.word	0x200089cc
 80108e8:	200089bc 	.word	0x200089bc
 80108ec:	20005434 	.word	0x20005434
 80108f0:	20005438 	.word	0x20005438
 80108f4:	08019bc0 	.word	0x08019bc0
 80108f8:	08019e60 	.word	0x08019e60
 80108fc:	08019c0c 	.word	0x08019c0c
 8010900:	200089d4 	.word	0x200089d4
 8010904:	200089d9 	.word	0x200089d9
 8010908:	200089a0 	.word	0x200089a0
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	429a      	cmp	r2, r3
 8010914:	d104      	bne.n	8010920 <tcp_process+0x5d8>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	68da      	ldr	r2, [r3, #12]
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	60da      	str	r2, [r3, #12]
 801091e:	e005      	b.n	801092c <tcp_process+0x5e4>
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	617b      	str	r3, [r7, #20]
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1ef      	bne.n	801090c <tcp_process+0x5c4>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	60da      	str	r2, [r3, #12]
 8010932:	4b77      	ldr	r3, [pc, #476]	; (8010b10 <tcp_process+0x7c8>)
 8010934:	2201      	movs	r2, #1
 8010936:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	220a      	movs	r2, #10
 801093c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801093e:	4b75      	ldr	r3, [pc, #468]	; (8010b14 <tcp_process+0x7cc>)
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	60da      	str	r2, [r3, #12]
 8010946:	4a73      	ldr	r2, [pc, #460]	; (8010b14 <tcp_process+0x7cc>)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6013      	str	r3, [r2, #0]
 801094c:	f002 fcfa 	bl	8013344 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010950:	e0d2      	b.n	8010af8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	8b5b      	ldrh	r3, [r3, #26]
 8010956:	f043 0302 	orr.w	r3, r3, #2
 801095a:	b29a      	uxth	r2, r3
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2208      	movs	r2, #8
 8010964:	751a      	strb	r2, [r3, #20]
      break;
 8010966:	e0c7      	b.n	8010af8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010968:	4b6b      	ldr	r3, [pc, #428]	; (8010b18 <tcp_process+0x7d0>)
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	f003 0310 	and.w	r3, r3, #16
 8010970:	2b00      	cmp	r3, #0
 8010972:	f000 80c1 	beq.w	8010af8 <tcp_process+0x7b0>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801097a:	4b68      	ldr	r3, [pc, #416]	; (8010b1c <tcp_process+0x7d4>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	f040 80ba 	bne.w	8010af8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010988:	2b00      	cmp	r3, #0
 801098a:	f040 80b5 	bne.w	8010af8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2206      	movs	r2, #6
 8010992:	751a      	strb	r2, [r3, #20]
      break;
 8010994:	e0b0      	b.n	8010af8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 f9ca 	bl	8010d30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801099c:	4b60      	ldr	r3, [pc, #384]	; (8010b20 <tcp_process+0x7d8>)
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	f003 0320 	and.w	r3, r3, #32
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f000 80a9 	beq.w	8010afc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	8b5b      	ldrh	r3, [r3, #26]
 80109ae:	f043 0302 	orr.w	r3, r3, #2
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7fe fd39 	bl	800f430 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80109be:	4b59      	ldr	r3, [pc, #356]	; (8010b24 <tcp_process+0x7dc>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d105      	bne.n	80109d4 <tcp_process+0x68c>
 80109c8:	4b56      	ldr	r3, [pc, #344]	; (8010b24 <tcp_process+0x7dc>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	4a55      	ldr	r2, [pc, #340]	; (8010b24 <tcp_process+0x7dc>)
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	e013      	b.n	80109fc <tcp_process+0x6b4>
 80109d4:	4b53      	ldr	r3, [pc, #332]	; (8010b24 <tcp_process+0x7dc>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	613b      	str	r3, [r7, #16]
 80109da:	e00c      	b.n	80109f6 <tcp_process+0x6ae>
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d104      	bne.n	80109f0 <tcp_process+0x6a8>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	68da      	ldr	r2, [r3, #12]
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	60da      	str	r2, [r3, #12]
 80109ee:	e005      	b.n	80109fc <tcp_process+0x6b4>
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	613b      	str	r3, [r7, #16]
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1ef      	bne.n	80109dc <tcp_process+0x694>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	60da      	str	r2, [r3, #12]
 8010a02:	4b43      	ldr	r3, [pc, #268]	; (8010b10 <tcp_process+0x7c8>)
 8010a04:	2201      	movs	r2, #1
 8010a06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	220a      	movs	r2, #10
 8010a0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a0e:	4b41      	ldr	r3, [pc, #260]	; (8010b14 <tcp_process+0x7cc>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	60da      	str	r2, [r3, #12]
 8010a16:	4a3f      	ldr	r2, [pc, #252]	; (8010b14 <tcp_process+0x7cc>)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6013      	str	r3, [r2, #0]
 8010a1c:	f002 fc92 	bl	8013344 <tcp_timer_needed>
      }
      break;
 8010a20:	e06c      	b.n	8010afc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 f984 	bl	8010d30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010a28:	4b3b      	ldr	r3, [pc, #236]	; (8010b18 <tcp_process+0x7d0>)
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	f003 0310 	and.w	r3, r3, #16
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d065      	beq.n	8010b00 <tcp_process+0x7b8>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a38:	4b38      	ldr	r3, [pc, #224]	; (8010b1c <tcp_process+0x7d4>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d15f      	bne.n	8010b00 <tcp_process+0x7b8>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d15b      	bne.n	8010b00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f7fe fcf1 	bl	800f430 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010a4e:	4b35      	ldr	r3, [pc, #212]	; (8010b24 <tcp_process+0x7dc>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d105      	bne.n	8010a64 <tcp_process+0x71c>
 8010a58:	4b32      	ldr	r3, [pc, #200]	; (8010b24 <tcp_process+0x7dc>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	4a31      	ldr	r2, [pc, #196]	; (8010b24 <tcp_process+0x7dc>)
 8010a60:	6013      	str	r3, [r2, #0]
 8010a62:	e013      	b.n	8010a8c <tcp_process+0x744>
 8010a64:	4b2f      	ldr	r3, [pc, #188]	; (8010b24 <tcp_process+0x7dc>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	60fb      	str	r3, [r7, #12]
 8010a6a:	e00c      	b.n	8010a86 <tcp_process+0x73e>
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d104      	bne.n	8010a80 <tcp_process+0x738>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	68da      	ldr	r2, [r3, #12]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	60da      	str	r2, [r3, #12]
 8010a7e:	e005      	b.n	8010a8c <tcp_process+0x744>
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	60fb      	str	r3, [r7, #12]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1ef      	bne.n	8010a6c <tcp_process+0x724>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	60da      	str	r2, [r3, #12]
 8010a92:	4b1f      	ldr	r3, [pc, #124]	; (8010b10 <tcp_process+0x7c8>)
 8010a94:	2201      	movs	r2, #1
 8010a96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	220a      	movs	r2, #10
 8010a9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a9e:	4b1d      	ldr	r3, [pc, #116]	; (8010b14 <tcp_process+0x7cc>)
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	60da      	str	r2, [r3, #12]
 8010aa6:	4a1b      	ldr	r2, [pc, #108]	; (8010b14 <tcp_process+0x7cc>)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6013      	str	r3, [r2, #0]
 8010aac:	f002 fc4a 	bl	8013344 <tcp_timer_needed>
      }
      break;
 8010ab0:	e026      	b.n	8010b00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f000 f93c 	bl	8010d30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010ab8:	4b17      	ldr	r3, [pc, #92]	; (8010b18 <tcp_process+0x7d0>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	f003 0310 	and.w	r3, r3, #16
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d01f      	beq.n	8010b04 <tcp_process+0x7bc>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ac8:	4b14      	ldr	r3, [pc, #80]	; (8010b1c <tcp_process+0x7d4>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d119      	bne.n	8010b04 <tcp_process+0x7bc>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d115      	bne.n	8010b04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010ad8:	4b11      	ldr	r3, [pc, #68]	; (8010b20 <tcp_process+0x7d8>)
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	f043 0310 	orr.w	r3, r3, #16
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	4b0f      	ldr	r3, [pc, #60]	; (8010b20 <tcp_process+0x7d8>)
 8010ae4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010ae6:	e00d      	b.n	8010b04 <tcp_process+0x7bc>
    default:
      break;
 8010ae8:	bf00      	nop
 8010aea:	e00c      	b.n	8010b06 <tcp_process+0x7be>
      break;
 8010aec:	bf00      	nop
 8010aee:	e00a      	b.n	8010b06 <tcp_process+0x7be>
      break;
 8010af0:	bf00      	nop
 8010af2:	e008      	b.n	8010b06 <tcp_process+0x7be>
      break;
 8010af4:	bf00      	nop
 8010af6:	e006      	b.n	8010b06 <tcp_process+0x7be>
      break;
 8010af8:	bf00      	nop
 8010afa:	e004      	b.n	8010b06 <tcp_process+0x7be>
      break;
 8010afc:	bf00      	nop
 8010afe:	e002      	b.n	8010b06 <tcp_process+0x7be>
      break;
 8010b00:	bf00      	nop
 8010b02:	e000      	b.n	8010b06 <tcp_process+0x7be>
      break;
 8010b04:	bf00      	nop
  }
  return ERR_OK;
 8010b06:	2300      	movs	r3, #0
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3724      	adds	r7, #36	; 0x24
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd90      	pop	{r4, r7, pc}
 8010b10:	200089a8 	.word	0x200089a8
 8010b14:	200089a4 	.word	0x200089a4
 8010b18:	200089d8 	.word	0x200089d8
 8010b1c:	200089d0 	.word	0x200089d0
 8010b20:	200089d9 	.word	0x200089d9
 8010b24:	200089a0 	.word	0x200089a0

08010b28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010b28:	b590      	push	{r4, r7, lr}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d106      	bne.n	8010b46 <tcp_oos_insert_segment+0x1e>
 8010b38:	4b3b      	ldr	r3, [pc, #236]	; (8010c28 <tcp_oos_insert_segment+0x100>)
 8010b3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8010b3e:	493b      	ldr	r1, [pc, #236]	; (8010c2c <tcp_oos_insert_segment+0x104>)
 8010b40:	483b      	ldr	r0, [pc, #236]	; (8010c30 <tcp_oos_insert_segment+0x108>)
 8010b42:	f006 fda9 	bl	8017698 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	68db      	ldr	r3, [r3, #12]
 8010b4a:	899b      	ldrh	r3, [r3, #12]
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fb fca0 	bl	800c494 <lwip_htons>
 8010b54:	4603      	mov	r3, r0
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	f003 0301 	and.w	r3, r3, #1
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d028      	beq.n	8010bb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010b60:	6838      	ldr	r0, [r7, #0]
 8010b62:	f7fe fa63 	bl	800f02c <tcp_segs_free>
    next = NULL;
 8010b66:	2300      	movs	r3, #0
 8010b68:	603b      	str	r3, [r7, #0]
 8010b6a:	e056      	b.n	8010c1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	899b      	ldrh	r3, [r3, #12]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fb fc8d 	bl	800c494 <lwip_htons>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	b2db      	uxtb	r3, r3
 8010b7e:	f003 0301 	and.w	r3, r3, #1
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d00d      	beq.n	8010ba2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	68db      	ldr	r3, [r3, #12]
 8010b8a:	899b      	ldrh	r3, [r3, #12]
 8010b8c:	b29c      	uxth	r4, r3
 8010b8e:	2001      	movs	r0, #1
 8010b90:	f7fb fc80 	bl	800c494 <lwip_htons>
 8010b94:	4603      	mov	r3, r0
 8010b96:	461a      	mov	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	4322      	orrs	r2, r4
 8010b9e:	b292      	uxth	r2, r2
 8010ba0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f7fe fa52 	bl	800f056 <tcp_seg_free>
    while (next &&
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d00e      	beq.n	8010bd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	891b      	ldrh	r3, [r3, #8]
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	4b1d      	ldr	r3, [pc, #116]	; (8010c34 <tcp_oos_insert_segment+0x10c>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	441a      	add	r2, r3
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	6839      	ldr	r1, [r7, #0]
 8010bcc:	8909      	ldrh	r1, [r1, #8]
 8010bce:	440b      	add	r3, r1
 8010bd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	daca      	bge.n	8010b6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d01e      	beq.n	8010c1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	891b      	ldrh	r3, [r3, #8]
 8010be0:	461a      	mov	r2, r3
 8010be2:	4b14      	ldr	r3, [pc, #80]	; (8010c34 <tcp_oos_insert_segment+0x10c>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	441a      	add	r2, r3
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	dd12      	ble.n	8010c1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <tcp_oos_insert_segment+0x10c>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	685a      	ldr	r2, [r3, #4]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	891b      	ldrh	r3, [r3, #8]
 8010c12:	4619      	mov	r1, r3
 8010c14:	4610      	mov	r0, r2
 8010c16:	f7fc fe15 	bl	800d844 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	683a      	ldr	r2, [r7, #0]
 8010c1e:	601a      	str	r2, [r3, #0]
}
 8010c20:	bf00      	nop
 8010c22:	3714      	adds	r7, #20
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd90      	pop	{r4, r7, pc}
 8010c28:	08019bc0 	.word	0x08019bc0
 8010c2c:	08019e80 	.word	0x08019e80
 8010c30:	08019c0c 	.word	0x08019c0c
 8010c34:	200089cc 	.word	0x200089cc

08010c38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010c38:	b5b0      	push	{r4, r5, r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
 8010c44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010c46:	e03e      	b.n	8010cc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fd f802 	bl	800dc60 <pbuf_clen>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c66:	8a7a      	ldrh	r2, [r7, #18]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d906      	bls.n	8010c7a <tcp_free_acked_segments+0x42>
 8010c6c:	4b2a      	ldr	r3, [pc, #168]	; (8010d18 <tcp_free_acked_segments+0xe0>)
 8010c6e:	f240 4257 	movw	r2, #1111	; 0x457
 8010c72:	492a      	ldr	r1, [pc, #168]	; (8010d1c <tcp_free_acked_segments+0xe4>)
 8010c74:	482a      	ldr	r0, [pc, #168]	; (8010d20 <tcp_free_acked_segments+0xe8>)
 8010c76:	f006 fd0f 	bl	8017698 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010c80:	8a7b      	ldrh	r3, [r7, #18]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	891a      	ldrh	r2, [r3, #8]
 8010c90:	4b24      	ldr	r3, [pc, #144]	; (8010d24 <tcp_free_acked_segments+0xec>)
 8010c92:	881b      	ldrh	r3, [r3, #0]
 8010c94:	4413      	add	r3, r2
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	4b22      	ldr	r3, [pc, #136]	; (8010d24 <tcp_free_acked_segments+0xec>)
 8010c9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010c9c:	6978      	ldr	r0, [r7, #20]
 8010c9e:	f7fe f9da 	bl	800f056 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d00c      	beq.n	8010cc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d109      	bne.n	8010cc6 <tcp_free_acked_segments+0x8e>
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d106      	bne.n	8010cc6 <tcp_free_acked_segments+0x8e>
 8010cb8:	4b17      	ldr	r3, [pc, #92]	; (8010d18 <tcp_free_acked_segments+0xe0>)
 8010cba:	f240 4261 	movw	r2, #1121	; 0x461
 8010cbe:	491a      	ldr	r1, [pc, #104]	; (8010d28 <tcp_free_acked_segments+0xf0>)
 8010cc0:	4817      	ldr	r0, [pc, #92]	; (8010d20 <tcp_free_acked_segments+0xe8>)
 8010cc2:	f006 fce9 	bl	8017698 <iprintf>
  while (seg_list != NULL &&
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d020      	beq.n	8010d0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fb fbf3 	bl	800c4be <lwip_htonl>
 8010cd8:	4604      	mov	r4, r0
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	891b      	ldrh	r3, [r3, #8]
 8010cde:	461d      	mov	r5, r3
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	899b      	ldrh	r3, [r3, #12]
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fb fbd3 	bl	800c494 <lwip_htons>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	f003 0303 	and.w	r3, r3, #3
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <tcp_free_acked_segments+0xc6>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e000      	b.n	8010d00 <tcp_free_acked_segments+0xc8>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	442b      	add	r3, r5
 8010d02:	18e2      	adds	r2, r4, r3
 8010d04:	4b09      	ldr	r3, [pc, #36]	; (8010d2c <tcp_free_acked_segments+0xf4>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	dd9c      	ble.n	8010c48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010d0e:	68bb      	ldr	r3, [r7, #8]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3718      	adds	r7, #24
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bdb0      	pop	{r4, r5, r7, pc}
 8010d18:	08019bc0 	.word	0x08019bc0
 8010d1c:	08019ea8 	.word	0x08019ea8
 8010d20:	08019c0c 	.word	0x08019c0c
 8010d24:	200089d4 	.word	0x200089d4
 8010d28:	08019ed0 	.word	0x08019ed0
 8010d2c:	200089d0 	.word	0x200089d0

08010d30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010d30:	b5b0      	push	{r4, r5, r7, lr}
 8010d32:	b094      	sub	sp, #80	; 0x50
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d106      	bne.n	8010d50 <tcp_receive+0x20>
 8010d42:	4b91      	ldr	r3, [pc, #580]	; (8010f88 <tcp_receive+0x258>)
 8010d44:	f240 427b 	movw	r2, #1147	; 0x47b
 8010d48:	4990      	ldr	r1, [pc, #576]	; (8010f8c <tcp_receive+0x25c>)
 8010d4a:	4891      	ldr	r0, [pc, #580]	; (8010f90 <tcp_receive+0x260>)
 8010d4c:	f006 fca4 	bl	8017698 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7d1b      	ldrb	r3, [r3, #20]
 8010d54:	2b03      	cmp	r3, #3
 8010d56:	d806      	bhi.n	8010d66 <tcp_receive+0x36>
 8010d58:	4b8b      	ldr	r3, [pc, #556]	; (8010f88 <tcp_receive+0x258>)
 8010d5a:	f240 427c 	movw	r2, #1148	; 0x47c
 8010d5e:	498d      	ldr	r1, [pc, #564]	; (8010f94 <tcp_receive+0x264>)
 8010d60:	488b      	ldr	r0, [pc, #556]	; (8010f90 <tcp_receive+0x260>)
 8010d62:	f006 fc99 	bl	8017698 <iprintf>

  if (flags & TCP_ACK) {
 8010d66:	4b8c      	ldr	r3, [pc, #560]	; (8010f98 <tcp_receive+0x268>)
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	f003 0310 	and.w	r3, r3, #16
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f000 8264 	beq.w	801123c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d80:	4413      	add	r3, r2
 8010d82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d88:	4b84      	ldr	r3, [pc, #528]	; (8010f9c <tcp_receive+0x26c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	db1b      	blt.n	8010dca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d96:	4b81      	ldr	r3, [pc, #516]	; (8010f9c <tcp_receive+0x26c>)
 8010d98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d106      	bne.n	8010dac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010da2:	4b7f      	ldr	r3, [pc, #508]	; (8010fa0 <tcp_receive+0x270>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	db0e      	blt.n	8010dca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010db0:	4b7b      	ldr	r3, [pc, #492]	; (8010fa0 <tcp_receive+0x270>)
 8010db2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d125      	bne.n	8010e04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010db8:	4b7a      	ldr	r3, [pc, #488]	; (8010fa4 <tcp_receive+0x274>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	89db      	ldrh	r3, [r3, #14]
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d91c      	bls.n	8010e04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010dca:	4b76      	ldr	r3, [pc, #472]	; (8010fa4 <tcp_receive+0x274>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	89db      	ldrh	r3, [r3, #14]
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d205      	bcs.n	8010df4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010df4:	4b69      	ldr	r3, [pc, #420]	; (8010f9c <tcp_receive+0x26c>)
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010dfc:	4b68      	ldr	r3, [pc, #416]	; (8010fa0 <tcp_receive+0x270>)
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010e04:	4b66      	ldr	r3, [pc, #408]	; (8010fa0 <tcp_receive+0x270>)
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	dc58      	bgt.n	8010ec4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010e12:	4b65      	ldr	r3, [pc, #404]	; (8010fa8 <tcp_receive+0x278>)
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d14b      	bne.n	8010eb2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010e24:	4413      	add	r3, r2
 8010e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d142      	bne.n	8010eb2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	db3d      	blt.n	8010eb2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e3a:	4b59      	ldr	r3, [pc, #356]	; (8010fa0 <tcp_receive+0x270>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d137      	bne.n	8010eb2 <tcp_receive+0x182>
              found_dupack = 1;
 8010e42:	2301      	movs	r3, #1
 8010e44:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010e4c:	2bff      	cmp	r3, #255	; 0xff
 8010e4e:	d007      	beq.n	8010e60 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010e56:	3301      	adds	r3, #1
 8010e58:	b2da      	uxtb	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010e66:	2b03      	cmp	r3, #3
 8010e68:	d91b      	bls.n	8010ea2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e74:	4413      	add	r3, r2
 8010e76:	b29a      	uxth	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d30a      	bcc.n	8010e98 <tcp_receive+0x168>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e8c:	4413      	add	r3, r2
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e96:	e004      	b.n	8010ea2 <tcp_receive+0x172>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d902      	bls.n	8010eb2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f001 feed 	bl	8012c8c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f040 8161 	bne.w	801117c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010ec2:	e15b      	b.n	801117c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ec4:	4b36      	ldr	r3, [pc, #216]	; (8010fa0 <tcp_receive+0x270>)
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ecc:	1ad3      	subs	r3, r2, r3
 8010ece:	3b01      	subs	r3, #1
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	f2c0 814e 	blt.w	8011172 <tcp_receive+0x442>
 8010ed6:	4b32      	ldr	r3, [pc, #200]	; (8010fa0 <tcp_receive+0x270>)
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f300 8146 	bgt.w	8011172 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	8b5b      	ldrh	r3, [r3, #26]
 8010eea:	f003 0304 	and.w	r3, r3, #4
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d010      	beq.n	8010f14 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	8b5b      	ldrh	r3, [r3, #26]
 8010ef6:	f023 0304 	bic.w	r3, r3, #4
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f22:	10db      	asrs	r3, r3, #3
 8010f24:	b21b      	sxth	r3, r3
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	4413      	add	r3, r2
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	b21a      	sxth	r2, r3
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010f3c:	4b18      	ldr	r3, [pc, #96]	; (8010fa0 <tcp_receive+0x270>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010f54:	4b12      	ldr	r3, [pc, #72]	; (8010fa0 <tcp_receive+0x270>)
 8010f56:	681a      	ldr	r2, [r3, #0]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	7d1b      	ldrb	r3, [r3, #20]
 8010f60:	2b03      	cmp	r3, #3
 8010f62:	f240 8097 	bls.w	8011094 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d245      	bcs.n	8011002 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	8b5b      	ldrh	r3, [r3, #26]
 8010f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d014      	beq.n	8010fac <tcp_receive+0x27c>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e013      	b.n	8010fae <tcp_receive+0x27e>
 8010f86:	bf00      	nop
 8010f88:	08019bc0 	.word	0x08019bc0
 8010f8c:	08019ef0 	.word	0x08019ef0
 8010f90:	08019c0c 	.word	0x08019c0c
 8010f94:	08019f0c 	.word	0x08019f0c
 8010f98:	200089d8 	.word	0x200089d8
 8010f9c:	200089cc 	.word	0x200089cc
 8010fa0:	200089d0 	.word	0x200089d0
 8010fa4:	200089bc 	.word	0x200089bc
 8010fa8:	200089d6 	.word	0x200089d6
 8010fac:	2302      	movs	r3, #2
 8010fae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010fb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fbc:	fb12 f303 	smulbb	r3, r2, r3
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	bf28      	it	cs
 8010fc8:	4613      	movcs	r3, r2
 8010fca:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010fd4:	4413      	add	r3, r2
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d309      	bcc.n	8010ff6 <tcp_receive+0x2c6>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fe8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010fea:	4413      	add	r3, r2
 8010fec:	b29a      	uxth	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ff4:	e04e      	b.n	8011094 <tcp_receive+0x364>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ffc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011000:	e048      	b.n	8011094 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011008:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801100a:	4413      	add	r3, r2
 801100c:	b29a      	uxth	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011014:	429a      	cmp	r2, r3
 8011016:	d309      	bcc.n	801102c <tcp_receive+0x2fc>
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801101e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011020:	4413      	add	r3, r2
 8011022:	b29a      	uxth	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801102a:	e004      	b.n	8011036 <tcp_receive+0x306>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011032:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011042:	429a      	cmp	r2, r3
 8011044:	d326      	bcc.n	8011094 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	b29a      	uxth	r2, r3
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011066:	4413      	add	r3, r2
 8011068:	b29a      	uxth	r2, r3
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011070:	429a      	cmp	r2, r3
 8011072:	d30a      	bcc.n	801108a <tcp_receive+0x35a>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801107e:	4413      	add	r3, r2
 8011080:	b29a      	uxth	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011088:	e004      	b.n	8011094 <tcp_receive+0x364>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011090:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801109c:	4a98      	ldr	r2, [pc, #608]	; (8011300 <tcp_receive+0x5d0>)
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7ff fdca 	bl	8010c38 <tcp_free_acked_segments>
 80110a4:	4602      	mov	r2, r0
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b2:	4a94      	ldr	r2, [pc, #592]	; (8011304 <tcp_receive+0x5d4>)
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7ff fdbf 	bl	8010c38 <tcp_free_acked_segments>
 80110ba:	4602      	mov	r2, r0
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d104      	bne.n	80110d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110ce:	861a      	strh	r2, [r3, #48]	; 0x30
 80110d0:	e002      	b.n	80110d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2200      	movs	r2, #0
 80110d6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d103      	bne.n	80110ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2200      	movs	r2, #0
 80110ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80110f4:	4b84      	ldr	r3, [pc, #528]	; (8011308 <tcp_receive+0x5d8>)
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	4413      	add	r3, r2
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	8b5b      	ldrh	r3, [r3, #26]
 8011106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801110a:	2b00      	cmp	r3, #0
 801110c:	d035      	beq.n	801117a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011112:	2b00      	cmp	r3, #0
 8011114:	d118      	bne.n	8011148 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00c      	beq.n	8011138 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	4618      	mov	r0, r3
 801112c:	f7fb f9c7 	bl	800c4be <lwip_htonl>
 8011130:	4603      	mov	r3, r0
 8011132:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011134:	2b00      	cmp	r3, #0
 8011136:	dc20      	bgt.n	801117a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	8b5b      	ldrh	r3, [r3, #26]
 801113c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011140:	b29a      	uxth	r2, r3
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011146:	e018      	b.n	801117a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	4618      	mov	r0, r3
 8011156:	f7fb f9b2 	bl	800c4be <lwip_htonl>
 801115a:	4603      	mov	r3, r0
 801115c:	1ae3      	subs	r3, r4, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	dc0b      	bgt.n	801117a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	8b5b      	ldrh	r3, [r3, #26]
 8011166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801116a:	b29a      	uxth	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011170:	e003      	b.n	801117a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f001 ff76 	bl	8013064 <tcp_send_empty_ack>
 8011178:	e000      	b.n	801117c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801117a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011180:	2b00      	cmp	r3, #0
 8011182:	d05b      	beq.n	801123c <tcp_receive+0x50c>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011188:	4b60      	ldr	r3, [pc, #384]	; (801130c <tcp_receive+0x5dc>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	1ad3      	subs	r3, r2, r3
 801118e:	2b00      	cmp	r3, #0
 8011190:	da54      	bge.n	801123c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011192:	4b5f      	ldr	r3, [pc, #380]	; (8011310 <tcp_receive+0x5e0>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	b29a      	uxth	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801119c:	b29b      	uxth	r3, r3
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80111a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80111b0:	10db      	asrs	r3, r3, #3
 80111b2:	b21b      	sxth	r3, r3
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80111ca:	4413      	add	r3, r2
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	b21a      	sxth	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80111d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80111d8:	2b00      	cmp	r3, #0
 80111da:	da05      	bge.n	80111e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80111dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80111e0:	425b      	negs	r3, r3
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80111e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80111f2:	109b      	asrs	r3, r3, #2
 80111f4:	b21b      	sxth	r3, r3
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011206:	b29a      	uxth	r2, r3
 8011208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801120c:	4413      	add	r3, r2
 801120e:	b29b      	uxth	r3, r3
 8011210:	b21a      	sxth	r2, r3
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801121c:	10db      	asrs	r3, r3, #3
 801121e:	b21b      	sxth	r3, r3
 8011220:	b29a      	uxth	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011228:	b29b      	uxth	r3, r3
 801122a:	4413      	add	r3, r2
 801122c:	b29b      	uxth	r3, r3
 801122e:	b21a      	sxth	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2200      	movs	r2, #0
 801123a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801123c:	4b35      	ldr	r3, [pc, #212]	; (8011314 <tcp_receive+0x5e4>)
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 84e2 	beq.w	8011c0a <tcp_receive+0xeda>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	7d1b      	ldrb	r3, [r3, #20]
 801124a:	2b06      	cmp	r3, #6
 801124c:	f200 84dd 	bhi.w	8011c0a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011254:	4b30      	ldr	r3, [pc, #192]	; (8011318 <tcp_receive+0x5e8>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	3b01      	subs	r3, #1
 801125c:	2b00      	cmp	r3, #0
 801125e:	f2c0 808f 	blt.w	8011380 <tcp_receive+0x650>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011266:	4b2b      	ldr	r3, [pc, #172]	; (8011314 <tcp_receive+0x5e4>)
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	4619      	mov	r1, r3
 801126c:	4b2a      	ldr	r3, [pc, #168]	; (8011318 <tcp_receive+0x5e8>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	440b      	add	r3, r1
 8011272:	1ad3      	subs	r3, r2, r3
 8011274:	3301      	adds	r3, #1
 8011276:	2b00      	cmp	r3, #0
 8011278:	f300 8082 	bgt.w	8011380 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801127c:	4b27      	ldr	r3, [pc, #156]	; (801131c <tcp_receive+0x5ec>)
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011286:	4b24      	ldr	r3, [pc, #144]	; (8011318 <tcp_receive+0x5e8>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801128e:	4b23      	ldr	r3, [pc, #140]	; (801131c <tcp_receive+0x5ec>)
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d106      	bne.n	80112a4 <tcp_receive+0x574>
 8011296:	4b22      	ldr	r3, [pc, #136]	; (8011320 <tcp_receive+0x5f0>)
 8011298:	f240 5294 	movw	r2, #1428	; 0x594
 801129c:	4921      	ldr	r1, [pc, #132]	; (8011324 <tcp_receive+0x5f4>)
 801129e:	4822      	ldr	r0, [pc, #136]	; (8011328 <tcp_receive+0x5f8>)
 80112a0:	f006 f9fa 	bl	8017698 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d906      	bls.n	80112bc <tcp_receive+0x58c>
 80112ae:	4b1c      	ldr	r3, [pc, #112]	; (8011320 <tcp_receive+0x5f0>)
 80112b0:	f240 5295 	movw	r2, #1429	; 0x595
 80112b4:	491d      	ldr	r1, [pc, #116]	; (801132c <tcp_receive+0x5fc>)
 80112b6:	481c      	ldr	r0, [pc, #112]	; (8011328 <tcp_receive+0x5f8>)
 80112b8:	f006 f9ee 	bl	8017698 <iprintf>
      off = (u16_t)off32;
 80112bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80112c2:	4b16      	ldr	r3, [pc, #88]	; (801131c <tcp_receive+0x5ec>)
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	891b      	ldrh	r3, [r3, #8]
 80112c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d906      	bls.n	80112de <tcp_receive+0x5ae>
 80112d0:	4b13      	ldr	r3, [pc, #76]	; (8011320 <tcp_receive+0x5f0>)
 80112d2:	f240 5297 	movw	r2, #1431	; 0x597
 80112d6:	4916      	ldr	r1, [pc, #88]	; (8011330 <tcp_receive+0x600>)
 80112d8:	4813      	ldr	r0, [pc, #76]	; (8011328 <tcp_receive+0x5f8>)
 80112da:	f006 f9dd 	bl	8017698 <iprintf>
      inseg.len -= off;
 80112de:	4b0f      	ldr	r3, [pc, #60]	; (801131c <tcp_receive+0x5ec>)
 80112e0:	891a      	ldrh	r2, [r3, #8]
 80112e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112e6:	1ad3      	subs	r3, r2, r3
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	4b0c      	ldr	r3, [pc, #48]	; (801131c <tcp_receive+0x5ec>)
 80112ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80112ee:	4b0b      	ldr	r3, [pc, #44]	; (801131c <tcp_receive+0x5ec>)
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	891a      	ldrh	r2, [r3, #8]
 80112f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80112fc:	e02a      	b.n	8011354 <tcp_receive+0x624>
 80112fe:	bf00      	nop
 8011300:	08019f28 	.word	0x08019f28
 8011304:	08019f30 	.word	0x08019f30
 8011308:	200089d4 	.word	0x200089d4
 801130c:	200089d0 	.word	0x200089d0
 8011310:	20008994 	.word	0x20008994
 8011314:	200089d6 	.word	0x200089d6
 8011318:	200089cc 	.word	0x200089cc
 801131c:	200089ac 	.word	0x200089ac
 8011320:	08019bc0 	.word	0x08019bc0
 8011324:	08019f38 	.word	0x08019f38
 8011328:	08019c0c 	.word	0x08019c0c
 801132c:	08019f48 	.word	0x08019f48
 8011330:	08019f58 	.word	0x08019f58
        off -= p->len;
 8011334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011336:	895b      	ldrh	r3, [r3, #10]
 8011338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011344:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011346:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801134a:	2200      	movs	r2, #0
 801134c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011356:	895b      	ldrh	r3, [r3, #10]
 8011358:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801135c:	429a      	cmp	r2, r3
 801135e:	d8e9      	bhi.n	8011334 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011364:	4619      	mov	r1, r3
 8011366:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011368:	f7fc fb6c 	bl	800da44 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011370:	4a91      	ldr	r2, [pc, #580]	; (80115b8 <tcp_receive+0x888>)
 8011372:	6013      	str	r3, [r2, #0]
 8011374:	4b91      	ldr	r3, [pc, #580]	; (80115bc <tcp_receive+0x88c>)
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	4a8f      	ldr	r2, [pc, #572]	; (80115b8 <tcp_receive+0x888>)
 801137a:	6812      	ldr	r2, [r2, #0]
 801137c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801137e:	e00d      	b.n	801139c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011380:	4b8d      	ldr	r3, [pc, #564]	; (80115b8 <tcp_receive+0x888>)
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011388:	1ad3      	subs	r3, r2, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	da06      	bge.n	801139c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	8b5b      	ldrh	r3, [r3, #26]
 8011392:	f043 0302 	orr.w	r3, r3, #2
 8011396:	b29a      	uxth	r2, r3
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801139c:	4b86      	ldr	r3, [pc, #536]	; (80115b8 <tcp_receive+0x888>)
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f2c0 842a 	blt.w	8011c00 <tcp_receive+0xed0>
 80113ac:	4b82      	ldr	r3, [pc, #520]	; (80115b8 <tcp_receive+0x888>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b4:	6879      	ldr	r1, [r7, #4]
 80113b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113b8:	440b      	add	r3, r1
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	3301      	adds	r3, #1
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f300 841e 	bgt.w	8011c00 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113c8:	4b7b      	ldr	r3, [pc, #492]	; (80115b8 <tcp_receive+0x888>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	f040 829a 	bne.w	8011906 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80113d2:	4b7a      	ldr	r3, [pc, #488]	; (80115bc <tcp_receive+0x88c>)
 80113d4:	891c      	ldrh	r4, [r3, #8]
 80113d6:	4b79      	ldr	r3, [pc, #484]	; (80115bc <tcp_receive+0x88c>)
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	899b      	ldrh	r3, [r3, #12]
 80113dc:	b29b      	uxth	r3, r3
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fb f858 	bl	800c494 <lwip_htons>
 80113e4:	4603      	mov	r3, r0
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	f003 0303 	and.w	r3, r3, #3
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d001      	beq.n	80113f4 <tcp_receive+0x6c4>
 80113f0:	2301      	movs	r3, #1
 80113f2:	e000      	b.n	80113f6 <tcp_receive+0x6c6>
 80113f4:	2300      	movs	r3, #0
 80113f6:	4423      	add	r3, r4
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	4b71      	ldr	r3, [pc, #452]	; (80115c0 <tcp_receive+0x890>)
 80113fc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011402:	4b6f      	ldr	r3, [pc, #444]	; (80115c0 <tcp_receive+0x890>)
 8011404:	881b      	ldrh	r3, [r3, #0]
 8011406:	429a      	cmp	r2, r3
 8011408:	d275      	bcs.n	80114f6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801140a:	4b6c      	ldr	r3, [pc, #432]	; (80115bc <tcp_receive+0x88c>)
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	899b      	ldrh	r3, [r3, #12]
 8011410:	b29b      	uxth	r3, r3
 8011412:	4618      	mov	r0, r3
 8011414:	f7fb f83e 	bl	800c494 <lwip_htons>
 8011418:	4603      	mov	r3, r0
 801141a:	b2db      	uxtb	r3, r3
 801141c:	f003 0301 	and.w	r3, r3, #1
 8011420:	2b00      	cmp	r3, #0
 8011422:	d01f      	beq.n	8011464 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011424:	4b65      	ldr	r3, [pc, #404]	; (80115bc <tcp_receive+0x88c>)
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	899b      	ldrh	r3, [r3, #12]
 801142a:	b29b      	uxth	r3, r3
 801142c:	b21b      	sxth	r3, r3
 801142e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011432:	b21c      	sxth	r4, r3
 8011434:	4b61      	ldr	r3, [pc, #388]	; (80115bc <tcp_receive+0x88c>)
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	899b      	ldrh	r3, [r3, #12]
 801143a:	b29b      	uxth	r3, r3
 801143c:	4618      	mov	r0, r3
 801143e:	f7fb f829 	bl	800c494 <lwip_htons>
 8011442:	4603      	mov	r3, r0
 8011444:	b2db      	uxtb	r3, r3
 8011446:	b29b      	uxth	r3, r3
 8011448:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801144c:	b29b      	uxth	r3, r3
 801144e:	4618      	mov	r0, r3
 8011450:	f7fb f820 	bl	800c494 <lwip_htons>
 8011454:	4603      	mov	r3, r0
 8011456:	b21b      	sxth	r3, r3
 8011458:	4323      	orrs	r3, r4
 801145a:	b21a      	sxth	r2, r3
 801145c:	4b57      	ldr	r3, [pc, #348]	; (80115bc <tcp_receive+0x88c>)
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	b292      	uxth	r2, r2
 8011462:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011468:	4b54      	ldr	r3, [pc, #336]	; (80115bc <tcp_receive+0x88c>)
 801146a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801146c:	4b53      	ldr	r3, [pc, #332]	; (80115bc <tcp_receive+0x88c>)
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	899b      	ldrh	r3, [r3, #12]
 8011472:	b29b      	uxth	r3, r3
 8011474:	4618      	mov	r0, r3
 8011476:	f7fb f80d 	bl	800c494 <lwip_htons>
 801147a:	4603      	mov	r3, r0
 801147c:	b2db      	uxtb	r3, r3
 801147e:	f003 0302 	and.w	r3, r3, #2
 8011482:	2b00      	cmp	r3, #0
 8011484:	d005      	beq.n	8011492 <tcp_receive+0x762>
            inseg.len -= 1;
 8011486:	4b4d      	ldr	r3, [pc, #308]	; (80115bc <tcp_receive+0x88c>)
 8011488:	891b      	ldrh	r3, [r3, #8]
 801148a:	3b01      	subs	r3, #1
 801148c:	b29a      	uxth	r2, r3
 801148e:	4b4b      	ldr	r3, [pc, #300]	; (80115bc <tcp_receive+0x88c>)
 8011490:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011492:	4b4a      	ldr	r3, [pc, #296]	; (80115bc <tcp_receive+0x88c>)
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	4a49      	ldr	r2, [pc, #292]	; (80115bc <tcp_receive+0x88c>)
 8011498:	8912      	ldrh	r2, [r2, #8]
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f7fc f9d1 	bl	800d844 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80114a2:	4b46      	ldr	r3, [pc, #280]	; (80115bc <tcp_receive+0x88c>)
 80114a4:	891c      	ldrh	r4, [r3, #8]
 80114a6:	4b45      	ldr	r3, [pc, #276]	; (80115bc <tcp_receive+0x88c>)
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	899b      	ldrh	r3, [r3, #12]
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fa fff0 	bl	800c494 <lwip_htons>
 80114b4:	4603      	mov	r3, r0
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	f003 0303 	and.w	r3, r3, #3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d001      	beq.n	80114c4 <tcp_receive+0x794>
 80114c0:	2301      	movs	r3, #1
 80114c2:	e000      	b.n	80114c6 <tcp_receive+0x796>
 80114c4:	2300      	movs	r3, #0
 80114c6:	4423      	add	r3, r4
 80114c8:	b29a      	uxth	r2, r3
 80114ca:	4b3d      	ldr	r3, [pc, #244]	; (80115c0 <tcp_receive+0x890>)
 80114cc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80114ce:	4b3c      	ldr	r3, [pc, #240]	; (80115c0 <tcp_receive+0x890>)
 80114d0:	881b      	ldrh	r3, [r3, #0]
 80114d2:	461a      	mov	r2, r3
 80114d4:	4b38      	ldr	r3, [pc, #224]	; (80115b8 <tcp_receive+0x888>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	441a      	add	r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114de:	6879      	ldr	r1, [r7, #4]
 80114e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114e2:	440b      	add	r3, r1
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d006      	beq.n	80114f6 <tcp_receive+0x7c6>
 80114e8:	4b36      	ldr	r3, [pc, #216]	; (80115c4 <tcp_receive+0x894>)
 80114ea:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80114ee:	4936      	ldr	r1, [pc, #216]	; (80115c8 <tcp_receive+0x898>)
 80114f0:	4836      	ldr	r0, [pc, #216]	; (80115cc <tcp_receive+0x89c>)
 80114f2:	f006 f8d1 	bl	8017698 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	f000 80e7 	beq.w	80116ce <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011500:	4b2e      	ldr	r3, [pc, #184]	; (80115bc <tcp_receive+0x88c>)
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	899b      	ldrh	r3, [r3, #12]
 8011506:	b29b      	uxth	r3, r3
 8011508:	4618      	mov	r0, r3
 801150a:	f7fa ffc3 	bl	800c494 <lwip_htons>
 801150e:	4603      	mov	r3, r0
 8011510:	b2db      	uxtb	r3, r3
 8011512:	f003 0301 	and.w	r3, r3, #1
 8011516:	2b00      	cmp	r3, #0
 8011518:	d010      	beq.n	801153c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801151a:	e00a      	b.n	8011532 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011520:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801152c:	68f8      	ldr	r0, [r7, #12]
 801152e:	f7fd fd92 	bl	800f056 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011536:	2b00      	cmp	r3, #0
 8011538:	d1f0      	bne.n	801151c <tcp_receive+0x7ec>
 801153a:	e0c8      	b.n	80116ce <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011540:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011542:	e052      	b.n	80115ea <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	899b      	ldrh	r3, [r3, #12]
 801154a:	b29b      	uxth	r3, r3
 801154c:	4618      	mov	r0, r3
 801154e:	f7fa ffa1 	bl	800c494 <lwip_htons>
 8011552:	4603      	mov	r3, r0
 8011554:	b2db      	uxtb	r3, r3
 8011556:	f003 0301 	and.w	r3, r3, #1
 801155a:	2b00      	cmp	r3, #0
 801155c:	d03d      	beq.n	80115da <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801155e:	4b17      	ldr	r3, [pc, #92]	; (80115bc <tcp_receive+0x88c>)
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	899b      	ldrh	r3, [r3, #12]
 8011564:	b29b      	uxth	r3, r3
 8011566:	4618      	mov	r0, r3
 8011568:	f7fa ff94 	bl	800c494 <lwip_htons>
 801156c:	4603      	mov	r3, r0
 801156e:	b2db      	uxtb	r3, r3
 8011570:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011574:	2b00      	cmp	r3, #0
 8011576:	d130      	bne.n	80115da <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011578:	4b10      	ldr	r3, [pc, #64]	; (80115bc <tcp_receive+0x88c>)
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	899b      	ldrh	r3, [r3, #12]
 801157e:	b29c      	uxth	r4, r3
 8011580:	2001      	movs	r0, #1
 8011582:	f7fa ff87 	bl	800c494 <lwip_htons>
 8011586:	4603      	mov	r3, r0
 8011588:	461a      	mov	r2, r3
 801158a:	4b0c      	ldr	r3, [pc, #48]	; (80115bc <tcp_receive+0x88c>)
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	4322      	orrs	r2, r4
 8011590:	b292      	uxth	r2, r2
 8011592:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011594:	4b09      	ldr	r3, [pc, #36]	; (80115bc <tcp_receive+0x88c>)
 8011596:	891c      	ldrh	r4, [r3, #8]
 8011598:	4b08      	ldr	r3, [pc, #32]	; (80115bc <tcp_receive+0x88c>)
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	899b      	ldrh	r3, [r3, #12]
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fa ff77 	bl	800c494 <lwip_htons>
 80115a6:	4603      	mov	r3, r0
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	f003 0303 	and.w	r3, r3, #3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00e      	beq.n	80115d0 <tcp_receive+0x8a0>
 80115b2:	2301      	movs	r3, #1
 80115b4:	e00d      	b.n	80115d2 <tcp_receive+0x8a2>
 80115b6:	bf00      	nop
 80115b8:	200089cc 	.word	0x200089cc
 80115bc:	200089ac 	.word	0x200089ac
 80115c0:	200089d6 	.word	0x200089d6
 80115c4:	08019bc0 	.word	0x08019bc0
 80115c8:	08019f68 	.word	0x08019f68
 80115cc:	08019c0c 	.word	0x08019c0c
 80115d0:	2300      	movs	r3, #0
 80115d2:	4423      	add	r3, r4
 80115d4:	b29a      	uxth	r2, r3
 80115d6:	4b98      	ldr	r3, [pc, #608]	; (8011838 <tcp_receive+0xb08>)
 80115d8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80115da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115dc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80115de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80115e4:	6938      	ldr	r0, [r7, #16]
 80115e6:	f7fd fd36 	bl	800f056 <tcp_seg_free>
            while (next &&
 80115ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00e      	beq.n	801160e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80115f0:	4b91      	ldr	r3, [pc, #580]	; (8011838 <tcp_receive+0xb08>)
 80115f2:	881b      	ldrh	r3, [r3, #0]
 80115f4:	461a      	mov	r2, r3
 80115f6:	4b91      	ldr	r3, [pc, #580]	; (801183c <tcp_receive+0xb0c>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	441a      	add	r2, r3
 80115fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011604:	8909      	ldrh	r1, [r1, #8]
 8011606:	440b      	add	r3, r1
 8011608:	1ad3      	subs	r3, r2, r3
            while (next &&
 801160a:	2b00      	cmp	r3, #0
 801160c:	da9a      	bge.n	8011544 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801160e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011610:	2b00      	cmp	r3, #0
 8011612:	d059      	beq.n	80116c8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011614:	4b88      	ldr	r3, [pc, #544]	; (8011838 <tcp_receive+0xb08>)
 8011616:	881b      	ldrh	r3, [r3, #0]
 8011618:	461a      	mov	r2, r3
 801161a:	4b88      	ldr	r3, [pc, #544]	; (801183c <tcp_receive+0xb0c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	441a      	add	r2, r3
 8011620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011628:	2b00      	cmp	r3, #0
 801162a:	dd4d      	ble.n	80116c8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801162c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	b29a      	uxth	r2, r3
 8011634:	4b81      	ldr	r3, [pc, #516]	; (801183c <tcp_receive+0xb0c>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	b29b      	uxth	r3, r3
 801163a:	1ad3      	subs	r3, r2, r3
 801163c:	b29a      	uxth	r2, r3
 801163e:	4b80      	ldr	r3, [pc, #512]	; (8011840 <tcp_receive+0xb10>)
 8011640:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011642:	4b7f      	ldr	r3, [pc, #508]	; (8011840 <tcp_receive+0xb10>)
 8011644:	68db      	ldr	r3, [r3, #12]
 8011646:	899b      	ldrh	r3, [r3, #12]
 8011648:	b29b      	uxth	r3, r3
 801164a:	4618      	mov	r0, r3
 801164c:	f7fa ff22 	bl	800c494 <lwip_htons>
 8011650:	4603      	mov	r3, r0
 8011652:	b2db      	uxtb	r3, r3
 8011654:	f003 0302 	and.w	r3, r3, #2
 8011658:	2b00      	cmp	r3, #0
 801165a:	d005      	beq.n	8011668 <tcp_receive+0x938>
                inseg.len -= 1;
 801165c:	4b78      	ldr	r3, [pc, #480]	; (8011840 <tcp_receive+0xb10>)
 801165e:	891b      	ldrh	r3, [r3, #8]
 8011660:	3b01      	subs	r3, #1
 8011662:	b29a      	uxth	r2, r3
 8011664:	4b76      	ldr	r3, [pc, #472]	; (8011840 <tcp_receive+0xb10>)
 8011666:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011668:	4b75      	ldr	r3, [pc, #468]	; (8011840 <tcp_receive+0xb10>)
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	4a74      	ldr	r2, [pc, #464]	; (8011840 <tcp_receive+0xb10>)
 801166e:	8912      	ldrh	r2, [r2, #8]
 8011670:	4611      	mov	r1, r2
 8011672:	4618      	mov	r0, r3
 8011674:	f7fc f8e6 	bl	800d844 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011678:	4b71      	ldr	r3, [pc, #452]	; (8011840 <tcp_receive+0xb10>)
 801167a:	891c      	ldrh	r4, [r3, #8]
 801167c:	4b70      	ldr	r3, [pc, #448]	; (8011840 <tcp_receive+0xb10>)
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	899b      	ldrh	r3, [r3, #12]
 8011682:	b29b      	uxth	r3, r3
 8011684:	4618      	mov	r0, r3
 8011686:	f7fa ff05 	bl	800c494 <lwip_htons>
 801168a:	4603      	mov	r3, r0
 801168c:	b2db      	uxtb	r3, r3
 801168e:	f003 0303 	and.w	r3, r3, #3
 8011692:	2b00      	cmp	r3, #0
 8011694:	d001      	beq.n	801169a <tcp_receive+0x96a>
 8011696:	2301      	movs	r3, #1
 8011698:	e000      	b.n	801169c <tcp_receive+0x96c>
 801169a:	2300      	movs	r3, #0
 801169c:	4423      	add	r3, r4
 801169e:	b29a      	uxth	r2, r3
 80116a0:	4b65      	ldr	r3, [pc, #404]	; (8011838 <tcp_receive+0xb08>)
 80116a2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80116a4:	4b64      	ldr	r3, [pc, #400]	; (8011838 <tcp_receive+0xb08>)
 80116a6:	881b      	ldrh	r3, [r3, #0]
 80116a8:	461a      	mov	r2, r3
 80116aa:	4b64      	ldr	r3, [pc, #400]	; (801183c <tcp_receive+0xb0c>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	441a      	add	r2, r3
 80116b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116b2:	68db      	ldr	r3, [r3, #12]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d006      	beq.n	80116c8 <tcp_receive+0x998>
 80116ba:	4b62      	ldr	r3, [pc, #392]	; (8011844 <tcp_receive+0xb14>)
 80116bc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80116c0:	4961      	ldr	r1, [pc, #388]	; (8011848 <tcp_receive+0xb18>)
 80116c2:	4862      	ldr	r0, [pc, #392]	; (801184c <tcp_receive+0xb1c>)
 80116c4:	f005 ffe8 	bl	8017698 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80116cc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80116ce:	4b5a      	ldr	r3, [pc, #360]	; (8011838 <tcp_receive+0xb08>)
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	461a      	mov	r2, r3
 80116d4:	4b59      	ldr	r3, [pc, #356]	; (801183c <tcp_receive+0xb0c>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	441a      	add	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80116e2:	4b55      	ldr	r3, [pc, #340]	; (8011838 <tcp_receive+0xb08>)
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d206      	bcs.n	80116f8 <tcp_receive+0x9c8>
 80116ea:	4b56      	ldr	r3, [pc, #344]	; (8011844 <tcp_receive+0xb14>)
 80116ec:	f240 6207 	movw	r2, #1543	; 0x607
 80116f0:	4957      	ldr	r1, [pc, #348]	; (8011850 <tcp_receive+0xb20>)
 80116f2:	4856      	ldr	r0, [pc, #344]	; (801184c <tcp_receive+0xb1c>)
 80116f4:	f005 ffd0 	bl	8017698 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80116fc:	4b4e      	ldr	r3, [pc, #312]	; (8011838 <tcp_receive+0xb08>)
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	b29a      	uxth	r2, r3
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f7fc ffc5 	bl	800e698 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801170e:	4b4c      	ldr	r3, [pc, #304]	; (8011840 <tcp_receive+0xb10>)
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	891b      	ldrh	r3, [r3, #8]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d006      	beq.n	8011726 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011718:	4b49      	ldr	r3, [pc, #292]	; (8011840 <tcp_receive+0xb10>)
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	4a4d      	ldr	r2, [pc, #308]	; (8011854 <tcp_receive+0xb24>)
 801171e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011720:	4b47      	ldr	r3, [pc, #284]	; (8011840 <tcp_receive+0xb10>)
 8011722:	2200      	movs	r2, #0
 8011724:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011726:	4b46      	ldr	r3, [pc, #280]	; (8011840 <tcp_receive+0xb10>)
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	899b      	ldrh	r3, [r3, #12]
 801172c:	b29b      	uxth	r3, r3
 801172e:	4618      	mov	r0, r3
 8011730:	f7fa feb0 	bl	800c494 <lwip_htons>
 8011734:	4603      	mov	r3, r0
 8011736:	b2db      	uxtb	r3, r3
 8011738:	f003 0301 	and.w	r3, r3, #1
 801173c:	2b00      	cmp	r3, #0
 801173e:	f000 80b8 	beq.w	80118b2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011742:	4b45      	ldr	r3, [pc, #276]	; (8011858 <tcp_receive+0xb28>)
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	f043 0320 	orr.w	r3, r3, #32
 801174a:	b2da      	uxtb	r2, r3
 801174c:	4b42      	ldr	r3, [pc, #264]	; (8011858 <tcp_receive+0xb28>)
 801174e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011750:	e0af      	b.n	80118b2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011756:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	4a36      	ldr	r2, [pc, #216]	; (801183c <tcp_receive+0xb0c>)
 8011762:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	891b      	ldrh	r3, [r3, #8]
 8011768:	461c      	mov	r4, r3
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	899b      	ldrh	r3, [r3, #12]
 8011770:	b29b      	uxth	r3, r3
 8011772:	4618      	mov	r0, r3
 8011774:	f7fa fe8e 	bl	800c494 <lwip_htons>
 8011778:	4603      	mov	r3, r0
 801177a:	b2db      	uxtb	r3, r3
 801177c:	f003 0303 	and.w	r3, r3, #3
 8011780:	2b00      	cmp	r3, #0
 8011782:	d001      	beq.n	8011788 <tcp_receive+0xa58>
 8011784:	2301      	movs	r3, #1
 8011786:	e000      	b.n	801178a <tcp_receive+0xa5a>
 8011788:	2300      	movs	r3, #0
 801178a:	191a      	adds	r2, r3, r4
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011790:	441a      	add	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801179a:	461c      	mov	r4, r3
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	891b      	ldrh	r3, [r3, #8]
 80117a0:	461d      	mov	r5, r3
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	899b      	ldrh	r3, [r3, #12]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fa fe72 	bl	800c494 <lwip_htons>
 80117b0:	4603      	mov	r3, r0
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	f003 0303 	and.w	r3, r3, #3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <tcp_receive+0xa90>
 80117bc:	2301      	movs	r3, #1
 80117be:	e000      	b.n	80117c2 <tcp_receive+0xa92>
 80117c0:	2300      	movs	r3, #0
 80117c2:	442b      	add	r3, r5
 80117c4:	429c      	cmp	r4, r3
 80117c6:	d206      	bcs.n	80117d6 <tcp_receive+0xaa6>
 80117c8:	4b1e      	ldr	r3, [pc, #120]	; (8011844 <tcp_receive+0xb14>)
 80117ca:	f240 622b 	movw	r2, #1579	; 0x62b
 80117ce:	4923      	ldr	r1, [pc, #140]	; (801185c <tcp_receive+0xb2c>)
 80117d0:	481e      	ldr	r0, [pc, #120]	; (801184c <tcp_receive+0xb1c>)
 80117d2:	f005 ff61 	bl	8017698 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	891b      	ldrh	r3, [r3, #8]
 80117da:	461c      	mov	r4, r3
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	899b      	ldrh	r3, [r3, #12]
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fa fe55 	bl	800c494 <lwip_htons>
 80117ea:	4603      	mov	r3, r0
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	f003 0303 	and.w	r3, r3, #3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d001      	beq.n	80117fa <tcp_receive+0xaca>
 80117f6:	2301      	movs	r3, #1
 80117f8:	e000      	b.n	80117fc <tcp_receive+0xacc>
 80117fa:	2300      	movs	r3, #0
 80117fc:	1919      	adds	r1, r3, r4
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011802:	b28b      	uxth	r3, r1
 8011804:	1ad3      	subs	r3, r2, r3
 8011806:	b29a      	uxth	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7fc ff43 	bl	800e698 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	891b      	ldrh	r3, [r3, #8]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d028      	beq.n	801186e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801181c:	4b0d      	ldr	r3, [pc, #52]	; (8011854 <tcp_receive+0xb24>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d01d      	beq.n	8011860 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011824:	4b0b      	ldr	r3, [pc, #44]	; (8011854 <tcp_receive+0xb24>)
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	4619      	mov	r1, r3
 801182e:	4610      	mov	r0, r2
 8011830:	f7fc fa50 	bl	800dcd4 <pbuf_cat>
 8011834:	e018      	b.n	8011868 <tcp_receive+0xb38>
 8011836:	bf00      	nop
 8011838:	200089d6 	.word	0x200089d6
 801183c:	200089cc 	.word	0x200089cc
 8011840:	200089ac 	.word	0x200089ac
 8011844:	08019bc0 	.word	0x08019bc0
 8011848:	08019fa0 	.word	0x08019fa0
 801184c:	08019c0c 	.word	0x08019c0c
 8011850:	08019fdc 	.word	0x08019fdc
 8011854:	200089dc 	.word	0x200089dc
 8011858:	200089d9 	.word	0x200089d9
 801185c:	08019ffc 	.word	0x08019ffc
            } else {
              recv_data = cseg->p;
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	4a70      	ldr	r2, [pc, #448]	; (8011a28 <tcp_receive+0xcf8>)
 8011866:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2200      	movs	r2, #0
 801186c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	899b      	ldrh	r3, [r3, #12]
 8011874:	b29b      	uxth	r3, r3
 8011876:	4618      	mov	r0, r3
 8011878:	f7fa fe0c 	bl	800c494 <lwip_htons>
 801187c:	4603      	mov	r3, r0
 801187e:	b2db      	uxtb	r3, r3
 8011880:	f003 0301 	and.w	r3, r3, #1
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00d      	beq.n	80118a4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011888:	4b68      	ldr	r3, [pc, #416]	; (8011a2c <tcp_receive+0xcfc>)
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	f043 0320 	orr.w	r3, r3, #32
 8011890:	b2da      	uxtb	r2, r3
 8011892:	4b66      	ldr	r3, [pc, #408]	; (8011a2c <tcp_receive+0xcfc>)
 8011894:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	7d1b      	ldrb	r3, [r3, #20]
 801189a:	2b04      	cmp	r3, #4
 801189c:	d102      	bne.n	80118a4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2207      	movs	r2, #7
 80118a2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80118ac:	68b8      	ldr	r0, [r7, #8]
 80118ae:	f7fd fbd2 	bl	800f056 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d008      	beq.n	80118cc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	685a      	ldr	r2, [r3, #4]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80118c6:	429a      	cmp	r2, r3
 80118c8:	f43f af43 	beq.w	8011752 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	8b5b      	ldrh	r3, [r3, #26]
 80118d0:	f003 0301 	and.w	r3, r3, #1
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00e      	beq.n	80118f6 <tcp_receive+0xbc6>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	8b5b      	ldrh	r3, [r3, #26]
 80118dc:	f023 0301 	bic.w	r3, r3, #1
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	835a      	strh	r2, [r3, #26]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	8b5b      	ldrh	r3, [r3, #26]
 80118ea:	f043 0302 	orr.w	r3, r3, #2
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80118f4:	e188      	b.n	8011c08 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	8b5b      	ldrh	r3, [r3, #26]
 80118fa:	f043 0301 	orr.w	r3, r3, #1
 80118fe:	b29a      	uxth	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011904:	e180      	b.n	8011c08 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801190e:	4848      	ldr	r0, [pc, #288]	; (8011a30 <tcp_receive+0xd00>)
 8011910:	f7fd fbba 	bl	800f088 <tcp_seg_copy>
 8011914:	4602      	mov	r2, r0
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	675a      	str	r2, [r3, #116]	; 0x74
 801191a:	e16d      	b.n	8011bf8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801191c:	2300      	movs	r3, #0
 801191e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011924:	63bb      	str	r3, [r7, #56]	; 0x38
 8011926:	e157      	b.n	8011bd8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	685a      	ldr	r2, [r3, #4]
 801192e:	4b41      	ldr	r3, [pc, #260]	; (8011a34 <tcp_receive+0xd04>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	429a      	cmp	r2, r3
 8011934:	d11d      	bne.n	8011972 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011936:	4b3e      	ldr	r3, [pc, #248]	; (8011a30 <tcp_receive+0xd00>)
 8011938:	891a      	ldrh	r2, [r3, #8]
 801193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193c:	891b      	ldrh	r3, [r3, #8]
 801193e:	429a      	cmp	r2, r3
 8011940:	f240 814f 	bls.w	8011be2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011944:	483a      	ldr	r0, [pc, #232]	; (8011a30 <tcp_receive+0xd00>)
 8011946:	f7fd fb9f 	bl	800f088 <tcp_seg_copy>
 801194a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	2b00      	cmp	r3, #0
 8011950:	f000 8149 	beq.w	8011be6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011956:	2b00      	cmp	r3, #0
 8011958:	d003      	beq.n	8011962 <tcp_receive+0xc32>
                    prev->next = cseg;
 801195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195c:	697a      	ldr	r2, [r7, #20]
 801195e:	601a      	str	r2, [r3, #0]
 8011960:	e002      	b.n	8011968 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	697a      	ldr	r2, [r7, #20]
 8011966:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801196a:	6978      	ldr	r0, [r7, #20]
 801196c:	f7ff f8dc 	bl	8010b28 <tcp_oos_insert_segment>
                }
                break;
 8011970:	e139      	b.n	8011be6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011974:	2b00      	cmp	r3, #0
 8011976:	d117      	bne.n	80119a8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011978:	4b2e      	ldr	r3, [pc, #184]	; (8011a34 <tcp_receive+0xd04>)
 801197a:	681a      	ldr	r2, [r3, #0]
 801197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197e:	68db      	ldr	r3, [r3, #12]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	da57      	bge.n	8011a38 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011988:	4829      	ldr	r0, [pc, #164]	; (8011a30 <tcp_receive+0xd00>)
 801198a:	f7fd fb7d 	bl	800f088 <tcp_seg_copy>
 801198e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	2b00      	cmp	r3, #0
 8011994:	f000 8129 	beq.w	8011bea <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	69ba      	ldr	r2, [r7, #24]
 801199c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801199e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80119a0:	69b8      	ldr	r0, [r7, #24]
 80119a2:	f7ff f8c1 	bl	8010b28 <tcp_oos_insert_segment>
                  }
                  break;
 80119a6:	e120      	b.n	8011bea <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80119a8:	4b22      	ldr	r3, [pc, #136]	; (8011a34 <tcp_receive+0xd04>)
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	1ad3      	subs	r3, r2, r3
 80119b4:	3b01      	subs	r3, #1
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	db3e      	blt.n	8011a38 <tcp_receive+0xd08>
 80119ba:	4b1e      	ldr	r3, [pc, #120]	; (8011a34 <tcp_receive+0xd04>)
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	1ad3      	subs	r3, r2, r3
 80119c6:	3301      	adds	r3, #1
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	dc35      	bgt.n	8011a38 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80119cc:	4818      	ldr	r0, [pc, #96]	; (8011a30 <tcp_receive+0xd00>)
 80119ce:	f7fd fb5b 	bl	800f088 <tcp_seg_copy>
 80119d2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	f000 8109 	beq.w	8011bee <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80119dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119e4:	8912      	ldrh	r2, [r2, #8]
 80119e6:	441a      	add	r2, r3
 80119e8:	4b12      	ldr	r3, [pc, #72]	; (8011a34 <tcp_receive+0xd04>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	dd12      	ble.n	8011a18 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80119f2:	4b10      	ldr	r3, [pc, #64]	; (8011a34 <tcp_receive+0xd04>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	b29a      	uxth	r2, r3
 80119f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a06:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a0a:	685a      	ldr	r2, [r3, #4]
 8011a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a0e:	891b      	ldrh	r3, [r3, #8]
 8011a10:	4619      	mov	r1, r3
 8011a12:	4610      	mov	r0, r2
 8011a14:	f7fb ff16 	bl	800d844 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a1a:	69fa      	ldr	r2, [r7, #28]
 8011a1c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a20:	69f8      	ldr	r0, [r7, #28]
 8011a22:	f7ff f881 	bl	8010b28 <tcp_oos_insert_segment>
                  }
                  break;
 8011a26:	e0e2      	b.n	8011bee <tcp_receive+0xebe>
 8011a28:	200089dc 	.word	0x200089dc
 8011a2c:	200089d9 	.word	0x200089d9
 8011a30:	200089ac 	.word	0x200089ac
 8011a34:	200089cc 	.word	0x200089cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f040 80c6 	bne.w	8011bd2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011a46:	4b80      	ldr	r3, [pc, #512]	; (8011c48 <tcp_receive+0xf18>)
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f340 80bd 	ble.w	8011bd2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	899b      	ldrh	r3, [r3, #12]
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7fa fd17 	bl	800c494 <lwip_htons>
 8011a66:	4603      	mov	r3, r0
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	f003 0301 	and.w	r3, r3, #1
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	f040 80bf 	bne.w	8011bf2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011a74:	4875      	ldr	r0, [pc, #468]	; (8011c4c <tcp_receive+0xf1c>)
 8011a76:	f7fd fb07 	bl	800f088 <tcp_seg_copy>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f000 80b6 	beq.w	8011bf6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a92:	8912      	ldrh	r2, [r2, #8]
 8011a94:	441a      	add	r2, r3
 8011a96:	4b6c      	ldr	r3, [pc, #432]	; (8011c48 <tcp_receive+0xf18>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	dd12      	ble.n	8011ac6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011aa0:	4b69      	ldr	r3, [pc, #420]	; (8011c48 <tcp_receive+0xf18>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	b29a      	uxth	r2, r3
 8011ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab8:	685a      	ldr	r2, [r3, #4]
 8011aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abc:	891b      	ldrh	r3, [r3, #8]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	f7fb febf 	bl	800d844 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011ac6:	4b62      	ldr	r3, [pc, #392]	; (8011c50 <tcp_receive+0xf20>)
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	461a      	mov	r2, r3
 8011acc:	4b5e      	ldr	r3, [pc, #376]	; (8011c48 <tcp_receive+0xf18>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	441a      	add	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad6:	6879      	ldr	r1, [r7, #4]
 8011ad8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ada:	440b      	add	r3, r1
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f340 8089 	ble.w	8011bf6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	899b      	ldrh	r3, [r3, #12]
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7fa fcd0 	bl	800c494 <lwip_htons>
 8011af4:	4603      	mov	r3, r0
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	f003 0301 	and.w	r3, r3, #1
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d022      	beq.n	8011b46 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	899b      	ldrh	r3, [r3, #12]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	b21b      	sxth	r3, r3
 8011b0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011b10:	b21c      	sxth	r4, r3
 8011b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	899b      	ldrh	r3, [r3, #12]
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fa fcb9 	bl	800c494 <lwip_htons>
 8011b22:	4603      	mov	r3, r0
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fa fcb0 	bl	800c494 <lwip_htons>
 8011b34:	4603      	mov	r3, r0
 8011b36:	b21b      	sxth	r3, r3
 8011b38:	4323      	orrs	r3, r4
 8011b3a:	b21a      	sxth	r2, r3
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	b292      	uxth	r2, r2
 8011b44:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4a:	b29a      	uxth	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b50:	4413      	add	r3, r2
 8011b52:	b299      	uxth	r1, r3
 8011b54:	4b3c      	ldr	r3, [pc, #240]	; (8011c48 <tcp_receive+0xf18>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	1a8a      	subs	r2, r1, r2
 8011b60:	b292      	uxth	r2, r2
 8011b62:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	685a      	ldr	r2, [r3, #4]
 8011b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	891b      	ldrh	r3, [r3, #8]
 8011b70:	4619      	mov	r1, r3
 8011b72:	4610      	mov	r0, r2
 8011b74:	f7fb fe66 	bl	800d844 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	891c      	ldrh	r4, [r3, #8]
 8011b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	899b      	ldrh	r3, [r3, #12]
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7fa fc83 	bl	800c494 <lwip_htons>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	f003 0303 	and.w	r3, r3, #3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d001      	beq.n	8011b9e <tcp_receive+0xe6e>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e000      	b.n	8011ba0 <tcp_receive+0xe70>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	4423      	add	r3, r4
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	4b2a      	ldr	r3, [pc, #168]	; (8011c50 <tcp_receive+0xf20>)
 8011ba6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ba8:	4b29      	ldr	r3, [pc, #164]	; (8011c50 <tcp_receive+0xf20>)
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	461a      	mov	r2, r3
 8011bae:	4b26      	ldr	r3, [pc, #152]	; (8011c48 <tcp_receive+0xf18>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	441a      	add	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb8:	6879      	ldr	r1, [r7, #4]
 8011bba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011bbc:	440b      	add	r3, r1
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d019      	beq.n	8011bf6 <tcp_receive+0xec6>
 8011bc2:	4b24      	ldr	r3, [pc, #144]	; (8011c54 <tcp_receive+0xf24>)
 8011bc4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011bc8:	4923      	ldr	r1, [pc, #140]	; (8011c58 <tcp_receive+0xf28>)
 8011bca:	4824      	ldr	r0, [pc, #144]	; (8011c5c <tcp_receive+0xf2c>)
 8011bcc:	f005 fd64 	bl	8017698 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011bd0:	e011      	b.n	8011bf6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f47f aea4 	bne.w	8011928 <tcp_receive+0xbf8>
 8011be0:	e00a      	b.n	8011bf8 <tcp_receive+0xec8>
                break;
 8011be2:	bf00      	nop
 8011be4:	e008      	b.n	8011bf8 <tcp_receive+0xec8>
                break;
 8011be6:	bf00      	nop
 8011be8:	e006      	b.n	8011bf8 <tcp_receive+0xec8>
                  break;
 8011bea:	bf00      	nop
 8011bec:	e004      	b.n	8011bf8 <tcp_receive+0xec8>
                  break;
 8011bee:	bf00      	nop
 8011bf0:	e002      	b.n	8011bf8 <tcp_receive+0xec8>
                  break;
 8011bf2:	bf00      	nop
 8011bf4:	e000      	b.n	8011bf8 <tcp_receive+0xec8>
                break;
 8011bf6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f001 fa33 	bl	8013064 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011bfe:	e003      	b.n	8011c08 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f001 fa2f 	bl	8013064 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c06:	e01a      	b.n	8011c3e <tcp_receive+0xf0e>
 8011c08:	e019      	b.n	8011c3e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011c0a:	4b0f      	ldr	r3, [pc, #60]	; (8011c48 <tcp_receive+0xf18>)
 8011c0c:	681a      	ldr	r2, [r3, #0]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c12:	1ad3      	subs	r3, r2, r3
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	db0a      	blt.n	8011c2e <tcp_receive+0xefe>
 8011c18:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <tcp_receive+0xf18>)
 8011c1a:	681a      	ldr	r2, [r3, #0]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c20:	6879      	ldr	r1, [r7, #4]
 8011c22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c24:	440b      	add	r3, r1
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	3301      	adds	r3, #1
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	dd07      	ble.n	8011c3e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	8b5b      	ldrh	r3, [r3, #26]
 8011c32:	f043 0302 	orr.w	r3, r3, #2
 8011c36:	b29a      	uxth	r2, r3
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011c3c:	e7ff      	b.n	8011c3e <tcp_receive+0xf0e>
 8011c3e:	bf00      	nop
 8011c40:	3750      	adds	r7, #80	; 0x50
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bdb0      	pop	{r4, r5, r7, pc}
 8011c46:	bf00      	nop
 8011c48:	200089cc 	.word	0x200089cc
 8011c4c:	200089ac 	.word	0x200089ac
 8011c50:	200089d6 	.word	0x200089d6
 8011c54:	08019bc0 	.word	0x08019bc0
 8011c58:	08019f68 	.word	0x08019f68
 8011c5c:	08019c0c 	.word	0x08019c0c

08011c60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011c66:	4b15      	ldr	r3, [pc, #84]	; (8011cbc <tcp_get_next_optbyte+0x5c>)
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	b291      	uxth	r1, r2
 8011c6e:	4a13      	ldr	r2, [pc, #76]	; (8011cbc <tcp_get_next_optbyte+0x5c>)
 8011c70:	8011      	strh	r1, [r2, #0]
 8011c72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011c74:	4b12      	ldr	r3, [pc, #72]	; (8011cc0 <tcp_get_next_optbyte+0x60>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d004      	beq.n	8011c86 <tcp_get_next_optbyte+0x26>
 8011c7c:	4b11      	ldr	r3, [pc, #68]	; (8011cc4 <tcp_get_next_optbyte+0x64>)
 8011c7e:	881b      	ldrh	r3, [r3, #0]
 8011c80:	88fa      	ldrh	r2, [r7, #6]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d208      	bcs.n	8011c98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011c86:	4b10      	ldr	r3, [pc, #64]	; (8011cc8 <tcp_get_next_optbyte+0x68>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	3314      	adds	r3, #20
 8011c8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011c8e:	88fb      	ldrh	r3, [r7, #6]
 8011c90:	683a      	ldr	r2, [r7, #0]
 8011c92:	4413      	add	r3, r2
 8011c94:	781b      	ldrb	r3, [r3, #0]
 8011c96:	e00b      	b.n	8011cb0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011c98:	88fb      	ldrh	r3, [r7, #6]
 8011c9a:	b2da      	uxtb	r2, r3
 8011c9c:	4b09      	ldr	r3, [pc, #36]	; (8011cc4 <tcp_get_next_optbyte+0x64>)
 8011c9e:	881b      	ldrh	r3, [r3, #0]
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011ca6:	4b06      	ldr	r3, [pc, #24]	; (8011cc0 <tcp_get_next_optbyte+0x60>)
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	797b      	ldrb	r3, [r7, #5]
 8011cac:	4413      	add	r3, r2
 8011cae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	200089c8 	.word	0x200089c8
 8011cc0:	200089c4 	.word	0x200089c4
 8011cc4:	200089c2 	.word	0x200089c2
 8011cc8:	200089bc 	.word	0x200089bc

08011ccc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d106      	bne.n	8011ce8 <tcp_parseopt+0x1c>
 8011cda:	4b32      	ldr	r3, [pc, #200]	; (8011da4 <tcp_parseopt+0xd8>)
 8011cdc:	f240 727d 	movw	r2, #1917	; 0x77d
 8011ce0:	4931      	ldr	r1, [pc, #196]	; (8011da8 <tcp_parseopt+0xdc>)
 8011ce2:	4832      	ldr	r0, [pc, #200]	; (8011dac <tcp_parseopt+0xe0>)
 8011ce4:	f005 fcd8 	bl	8017698 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011ce8:	4b31      	ldr	r3, [pc, #196]	; (8011db0 <tcp_parseopt+0xe4>)
 8011cea:	881b      	ldrh	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d055      	beq.n	8011d9c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011cf0:	4b30      	ldr	r3, [pc, #192]	; (8011db4 <tcp_parseopt+0xe8>)
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	801a      	strh	r2, [r3, #0]
 8011cf6:	e045      	b.n	8011d84 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011cf8:	f7ff ffb2 	bl	8011c60 <tcp_get_next_optbyte>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011d00:	7bfb      	ldrb	r3, [r7, #15]
 8011d02:	2b02      	cmp	r3, #2
 8011d04:	d006      	beq.n	8011d14 <tcp_parseopt+0x48>
 8011d06:	2b02      	cmp	r3, #2
 8011d08:	dc2b      	bgt.n	8011d62 <tcp_parseopt+0x96>
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d041      	beq.n	8011d92 <tcp_parseopt+0xc6>
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d127      	bne.n	8011d62 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011d12:	e037      	b.n	8011d84 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011d14:	f7ff ffa4 	bl	8011c60 <tcp_get_next_optbyte>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	d13b      	bne.n	8011d96 <tcp_parseopt+0xca>
 8011d1e:	4b25      	ldr	r3, [pc, #148]	; (8011db4 <tcp_parseopt+0xe8>)
 8011d20:	881b      	ldrh	r3, [r3, #0]
 8011d22:	3301      	adds	r3, #1
 8011d24:	4a22      	ldr	r2, [pc, #136]	; (8011db0 <tcp_parseopt+0xe4>)
 8011d26:	8812      	ldrh	r2, [r2, #0]
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	da34      	bge.n	8011d96 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011d2c:	f7ff ff98 	bl	8011c60 <tcp_get_next_optbyte>
 8011d30:	4603      	mov	r3, r0
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	021b      	lsls	r3, r3, #8
 8011d36:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011d38:	f7ff ff92 	bl	8011c60 <tcp_get_next_optbyte>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	89bb      	ldrh	r3, [r7, #12]
 8011d42:	4313      	orrs	r3, r2
 8011d44:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011d46:	89bb      	ldrh	r3, [r7, #12]
 8011d48:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011d4c:	d804      	bhi.n	8011d58 <tcp_parseopt+0x8c>
 8011d4e:	89bb      	ldrh	r3, [r7, #12]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d001      	beq.n	8011d58 <tcp_parseopt+0x8c>
 8011d54:	89ba      	ldrh	r2, [r7, #12]
 8011d56:	e001      	b.n	8011d5c <tcp_parseopt+0x90>
 8011d58:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011d60:	e010      	b.n	8011d84 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011d62:	f7ff ff7d 	bl	8011c60 <tcp_get_next_optbyte>
 8011d66:	4603      	mov	r3, r0
 8011d68:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011d6a:	7afb      	ldrb	r3, [r7, #11]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d914      	bls.n	8011d9a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011d70:	7afb      	ldrb	r3, [r7, #11]
 8011d72:	b29a      	uxth	r2, r3
 8011d74:	4b0f      	ldr	r3, [pc, #60]	; (8011db4 <tcp_parseopt+0xe8>)
 8011d76:	881b      	ldrh	r3, [r3, #0]
 8011d78:	4413      	add	r3, r2
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	3b02      	subs	r3, #2
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	4b0c      	ldr	r3, [pc, #48]	; (8011db4 <tcp_parseopt+0xe8>)
 8011d82:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011d84:	4b0b      	ldr	r3, [pc, #44]	; (8011db4 <tcp_parseopt+0xe8>)
 8011d86:	881a      	ldrh	r2, [r3, #0]
 8011d88:	4b09      	ldr	r3, [pc, #36]	; (8011db0 <tcp_parseopt+0xe4>)
 8011d8a:	881b      	ldrh	r3, [r3, #0]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d3b3      	bcc.n	8011cf8 <tcp_parseopt+0x2c>
 8011d90:	e004      	b.n	8011d9c <tcp_parseopt+0xd0>
          return;
 8011d92:	bf00      	nop
 8011d94:	e002      	b.n	8011d9c <tcp_parseopt+0xd0>
            return;
 8011d96:	bf00      	nop
 8011d98:	e000      	b.n	8011d9c <tcp_parseopt+0xd0>
            return;
 8011d9a:	bf00      	nop
      }
    }
  }
}
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	08019bc0 	.word	0x08019bc0
 8011da8:	0801a024 	.word	0x0801a024
 8011dac:	08019c0c 	.word	0x08019c0c
 8011db0:	200089c0 	.word	0x200089c0
 8011db4:	200089c8 	.word	0x200089c8

08011db8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011db8:	b480      	push	{r7}
 8011dba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011dbc:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <tcp_trigger_input_pcb_close+0x1c>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f043 0310 	orr.w	r3, r3, #16
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	4b03      	ldr	r3, [pc, #12]	; (8011dd4 <tcp_trigger_input_pcb_close+0x1c>)
 8011dc8:	701a      	strb	r2, [r3, #0]
}
 8011dca:	bf00      	nop
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr
 8011dd4:	200089d9 	.word	0x200089d9

08011dd8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d00a      	beq.n	8011e00 <tcp_route+0x28>
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	7a1b      	ldrb	r3, [r3, #8]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d006      	beq.n	8011e00 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	7a1b      	ldrb	r3, [r3, #8]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fb fb4a 	bl	800d490 <netif_get_by_index>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	e003      	b.n	8011e08 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f003 f96d 	bl	80150e0 <ip4_route>
 8011e06:	4603      	mov	r3, r0
  }
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3710      	adds	r7, #16
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011e10:	b590      	push	{r4, r7, lr}
 8011e12:	b087      	sub	sp, #28
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	603b      	str	r3, [r7, #0]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d105      	bne.n	8011e32 <tcp_create_segment+0x22>
 8011e26:	4b44      	ldr	r3, [pc, #272]	; (8011f38 <tcp_create_segment+0x128>)
 8011e28:	22a3      	movs	r2, #163	; 0xa3
 8011e2a:	4944      	ldr	r1, [pc, #272]	; (8011f3c <tcp_create_segment+0x12c>)
 8011e2c:	4844      	ldr	r0, [pc, #272]	; (8011f40 <tcp_create_segment+0x130>)
 8011e2e:	f005 fc33 	bl	8017698 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d105      	bne.n	8011e44 <tcp_create_segment+0x34>
 8011e38:	4b3f      	ldr	r3, [pc, #252]	; (8011f38 <tcp_create_segment+0x128>)
 8011e3a:	22a4      	movs	r2, #164	; 0xa4
 8011e3c:	4941      	ldr	r1, [pc, #260]	; (8011f44 <tcp_create_segment+0x134>)
 8011e3e:	4840      	ldr	r0, [pc, #256]	; (8011f40 <tcp_create_segment+0x130>)
 8011e40:	f005 fc2a 	bl	8017698 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	f003 0304 	and.w	r3, r3, #4
 8011e50:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011e52:	2003      	movs	r0, #3
 8011e54:	f7fa ff96 	bl	800cd84 <memp_malloc>
 8011e58:	6138      	str	r0, [r7, #16]
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d104      	bne.n	8011e6a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011e60:	68b8      	ldr	r0, [r7, #8]
 8011e62:	f7fb fe75 	bl	800db50 <pbuf_free>
    return NULL;
 8011e66:	2300      	movs	r3, #0
 8011e68:	e061      	b.n	8011f2e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011e70:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	2200      	movs	r2, #0
 8011e76:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	68ba      	ldr	r2, [r7, #8]
 8011e7c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	891a      	ldrh	r2, [r3, #8]
 8011e82:	7dfb      	ldrb	r3, [r7, #23]
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d205      	bcs.n	8011e96 <tcp_create_segment+0x86>
 8011e8a:	4b2b      	ldr	r3, [pc, #172]	; (8011f38 <tcp_create_segment+0x128>)
 8011e8c:	22b0      	movs	r2, #176	; 0xb0
 8011e8e:	492e      	ldr	r1, [pc, #184]	; (8011f48 <tcp_create_segment+0x138>)
 8011e90:	482b      	ldr	r0, [pc, #172]	; (8011f40 <tcp_create_segment+0x130>)
 8011e92:	f005 fc01 	bl	8017698 <iprintf>
  seg->len = p->tot_len - optlen;
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	891a      	ldrh	r2, [r3, #8]
 8011e9a:	7dfb      	ldrb	r3, [r7, #23]
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011ea6:	2114      	movs	r1, #20
 8011ea8:	68b8      	ldr	r0, [r7, #8]
 8011eaa:	f7fb fdbb 	bl	800da24 <pbuf_add_header>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d004      	beq.n	8011ebe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011eb4:	6938      	ldr	r0, [r7, #16]
 8011eb6:	f7fd f8ce 	bl	800f056 <tcp_seg_free>
    return NULL;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	e037      	b.n	8011f2e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	685a      	ldr	r2, [r3, #4]
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	8ada      	ldrh	r2, [r3, #22]
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	68dc      	ldr	r4, [r3, #12]
 8011ed0:	4610      	mov	r0, r2
 8011ed2:	f7fa fadf 	bl	800c494 <lwip_htons>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	8b1a      	ldrh	r2, [r3, #24]
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	68dc      	ldr	r4, [r3, #12]
 8011ee2:	4610      	mov	r0, r2
 8011ee4:	f7fa fad6 	bl	800c494 <lwip_htons>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	68dc      	ldr	r4, [r3, #12]
 8011ef0:	6838      	ldr	r0, [r7, #0]
 8011ef2:	f7fa fae4 	bl	800c4be <lwip_htonl>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011efa:	7dfb      	ldrb	r3, [r7, #23]
 8011efc:	089b      	lsrs	r3, r3, #2
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	b29b      	uxth	r3, r3
 8011f02:	3305      	adds	r3, #5
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	031b      	lsls	r3, r3, #12
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	79fb      	ldrb	r3, [r7, #7]
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	68dc      	ldr	r4, [r3, #12]
 8011f16:	4610      	mov	r0, r2
 8011f18:	f7fa fabc 	bl	800c494 <lwip_htons>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	2200      	movs	r2, #0
 8011f26:	749a      	strb	r2, [r3, #18]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	74da      	strb	r2, [r3, #19]
  return seg;
 8011f2c:	693b      	ldr	r3, [r7, #16]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	371c      	adds	r7, #28
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd90      	pop	{r4, r7, pc}
 8011f36:	bf00      	nop
 8011f38:	0801a040 	.word	0x0801a040
 8011f3c:	0801a074 	.word	0x0801a074
 8011f40:	0801a094 	.word	0x0801a094
 8011f44:	0801a0bc 	.word	0x0801a0bc
 8011f48:	0801a0e0 	.word	0x0801a0e0

08011f4c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011f4c:	b590      	push	{r4, r7, lr}
 8011f4e:	b08b      	sub	sp, #44	; 0x2c
 8011f50:	af02      	add	r7, sp, #8
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	460b      	mov	r3, r1
 8011f56:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	61fb      	str	r3, [r7, #28]
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011f60:	2300      	movs	r3, #0
 8011f62:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d106      	bne.n	8011f78 <tcp_split_unsent_seg+0x2c>
 8011f6a:	4b95      	ldr	r3, [pc, #596]	; (80121c0 <tcp_split_unsent_seg+0x274>)
 8011f6c:	f240 324b 	movw	r2, #843	; 0x34b
 8011f70:	4994      	ldr	r1, [pc, #592]	; (80121c4 <tcp_split_unsent_seg+0x278>)
 8011f72:	4895      	ldr	r0, [pc, #596]	; (80121c8 <tcp_split_unsent_seg+0x27c>)
 8011f74:	f005 fb90 	bl	8017698 <iprintf>

  useg = pcb->unsent;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f7c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d102      	bne.n	8011f8a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011f84:	f04f 33ff 	mov.w	r3, #4294967295
 8011f88:	e116      	b.n	80121b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011f8a:	887b      	ldrh	r3, [r7, #2]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d109      	bne.n	8011fa4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011f90:	4b8b      	ldr	r3, [pc, #556]	; (80121c0 <tcp_split_unsent_seg+0x274>)
 8011f92:	f240 3253 	movw	r2, #851	; 0x353
 8011f96:	498d      	ldr	r1, [pc, #564]	; (80121cc <tcp_split_unsent_seg+0x280>)
 8011f98:	488b      	ldr	r0, [pc, #556]	; (80121c8 <tcp_split_unsent_seg+0x27c>)
 8011f9a:	f005 fb7d 	bl	8017698 <iprintf>
    return ERR_VAL;
 8011f9e:	f06f 0305 	mvn.w	r3, #5
 8011fa2:	e109      	b.n	80121b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	891b      	ldrh	r3, [r3, #8]
 8011fa8:	887a      	ldrh	r2, [r7, #2]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d301      	bcc.n	8011fb2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	e102      	b.n	80121b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fb6:	887a      	ldrh	r2, [r7, #2]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d906      	bls.n	8011fca <tcp_split_unsent_seg+0x7e>
 8011fbc:	4b80      	ldr	r3, [pc, #512]	; (80121c0 <tcp_split_unsent_seg+0x274>)
 8011fbe:	f240 325b 	movw	r2, #859	; 0x35b
 8011fc2:	4983      	ldr	r1, [pc, #524]	; (80121d0 <tcp_split_unsent_seg+0x284>)
 8011fc4:	4880      	ldr	r0, [pc, #512]	; (80121c8 <tcp_split_unsent_seg+0x27c>)
 8011fc6:	f005 fb67 	bl	8017698 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	891b      	ldrh	r3, [r3, #8]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d106      	bne.n	8011fe0 <tcp_split_unsent_seg+0x94>
 8011fd2:	4b7b      	ldr	r3, [pc, #492]	; (80121c0 <tcp_split_unsent_seg+0x274>)
 8011fd4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011fd8:	497e      	ldr	r1, [pc, #504]	; (80121d4 <tcp_split_unsent_seg+0x288>)
 8011fda:	487b      	ldr	r0, [pc, #492]	; (80121c8 <tcp_split_unsent_seg+0x27c>)
 8011fdc:	f005 fb5c 	bl	8017698 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	7a9b      	ldrb	r3, [r3, #10]
 8011fe4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011fe6:	7bfb      	ldrb	r3, [r7, #15]
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	f003 0304 	and.w	r3, r3, #4
 8011ff0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	891a      	ldrh	r2, [r3, #8]
 8011ff6:	887b      	ldrh	r3, [r7, #2]
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011ffc:	7bbb      	ldrb	r3, [r7, #14]
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	89bb      	ldrh	r3, [r7, #12]
 8012002:	4413      	add	r3, r2
 8012004:	b29b      	uxth	r3, r3
 8012006:	f44f 7220 	mov.w	r2, #640	; 0x280
 801200a:	4619      	mov	r1, r3
 801200c:	2036      	movs	r0, #54	; 0x36
 801200e:	f7fb fabb 	bl	800d588 <pbuf_alloc>
 8012012:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	2b00      	cmp	r3, #0
 8012018:	f000 80b7 	beq.w	801218a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	891a      	ldrh	r2, [r3, #8]
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	891b      	ldrh	r3, [r3, #8]
 8012026:	1ad3      	subs	r3, r2, r3
 8012028:	b29a      	uxth	r2, r3
 801202a:	887b      	ldrh	r3, [r7, #2]
 801202c:	4413      	add	r3, r2
 801202e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	6858      	ldr	r0, [r3, #4]
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	685a      	ldr	r2, [r3, #4]
 8012038:	7bbb      	ldrb	r3, [r7, #14]
 801203a:	18d1      	adds	r1, r2, r3
 801203c:	897b      	ldrh	r3, [r7, #10]
 801203e:	89ba      	ldrh	r2, [r7, #12]
 8012040:	f7fb ff80 	bl	800df44 <pbuf_copy_partial>
 8012044:	4603      	mov	r3, r0
 8012046:	461a      	mov	r2, r3
 8012048:	89bb      	ldrh	r3, [r7, #12]
 801204a:	4293      	cmp	r3, r2
 801204c:	f040 809f 	bne.w	801218e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	899b      	ldrh	r3, [r3, #12]
 8012056:	b29b      	uxth	r3, r3
 8012058:	4618      	mov	r0, r3
 801205a:	f7fa fa1b 	bl	800c494 <lwip_htons>
 801205e:	4603      	mov	r3, r0
 8012060:	b2db      	uxtb	r3, r3
 8012062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012066:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012068:	2300      	movs	r3, #0
 801206a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801206c:	7efb      	ldrb	r3, [r7, #27]
 801206e:	f003 0308 	and.w	r3, r3, #8
 8012072:	2b00      	cmp	r3, #0
 8012074:	d007      	beq.n	8012086 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012076:	7efb      	ldrb	r3, [r7, #27]
 8012078:	f023 0308 	bic.w	r3, r3, #8
 801207c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801207e:	7ebb      	ldrb	r3, [r7, #26]
 8012080:	f043 0308 	orr.w	r3, r3, #8
 8012084:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012086:	7efb      	ldrb	r3, [r7, #27]
 8012088:	f003 0301 	and.w	r3, r3, #1
 801208c:	2b00      	cmp	r3, #0
 801208e:	d007      	beq.n	80120a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012090:	7efb      	ldrb	r3, [r7, #27]
 8012092:	f023 0301 	bic.w	r3, r3, #1
 8012096:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012098:	7ebb      	ldrb	r3, [r7, #26]
 801209a:	f043 0301 	orr.w	r3, r3, #1
 801209e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fa fa09 	bl	800c4be <lwip_htonl>
 80120ac:	4602      	mov	r2, r0
 80120ae:	887b      	ldrh	r3, [r7, #2]
 80120b0:	18d1      	adds	r1, r2, r3
 80120b2:	7eba      	ldrb	r2, [r7, #26]
 80120b4:	7bfb      	ldrb	r3, [r7, #15]
 80120b6:	9300      	str	r3, [sp, #0]
 80120b8:	460b      	mov	r3, r1
 80120ba:	6939      	ldr	r1, [r7, #16]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7ff fea7 	bl	8011e10 <tcp_create_segment>
 80120c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d063      	beq.n	8012192 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7fb fdc6 	bl	800dc60 <pbuf_clen>
 80120d4:	4603      	mov	r3, r0
 80120d6:	461a      	mov	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120de:	1a9b      	subs	r3, r3, r2
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	6858      	ldr	r0, [r3, #4]
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	891a      	ldrh	r2, [r3, #8]
 80120f2:	89bb      	ldrh	r3, [r7, #12]
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	4619      	mov	r1, r3
 80120fa:	f7fb fba3 	bl	800d844 <pbuf_realloc>
  useg->len -= remainder;
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	891a      	ldrh	r2, [r3, #8]
 8012102:	89bb      	ldrh	r3, [r7, #12]
 8012104:	1ad3      	subs	r3, r2, r3
 8012106:	b29a      	uxth	r2, r3
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	899b      	ldrh	r3, [r3, #12]
 8012112:	b29c      	uxth	r4, r3
 8012114:	7efb      	ldrb	r3, [r7, #27]
 8012116:	b29b      	uxth	r3, r3
 8012118:	4618      	mov	r0, r3
 801211a:	f7fa f9bb 	bl	800c494 <lwip_htons>
 801211e:	4603      	mov	r3, r0
 8012120:	461a      	mov	r2, r3
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	4322      	orrs	r2, r4
 8012128:	b292      	uxth	r2, r2
 801212a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	f7fb fd95 	bl	800dc60 <pbuf_clen>
 8012136:	4603      	mov	r3, r0
 8012138:	461a      	mov	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012140:	4413      	add	r3, r2
 8012142:	b29a      	uxth	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	4618      	mov	r0, r3
 8012150:	f7fb fd86 	bl	800dc60 <pbuf_clen>
 8012154:	4603      	mov	r3, r0
 8012156:	461a      	mov	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801215e:	4413      	add	r3, r2
 8012160:	b29a      	uxth	r2, r3
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	69fa      	ldr	r2, [r7, #28]
 8012174:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d103      	bne.n	8012186 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2200      	movs	r2, #0
 8012182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012186:	2300      	movs	r3, #0
 8012188:	e016      	b.n	80121b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801218a:	bf00      	nop
 801218c:	e002      	b.n	8012194 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801218e:	bf00      	nop
 8012190:	e000      	b.n	8012194 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012192:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d006      	beq.n	80121a8 <tcp_split_unsent_seg+0x25c>
 801219a:	4b09      	ldr	r3, [pc, #36]	; (80121c0 <tcp_split_unsent_seg+0x274>)
 801219c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80121a0:	490d      	ldr	r1, [pc, #52]	; (80121d8 <tcp_split_unsent_seg+0x28c>)
 80121a2:	4809      	ldr	r0, [pc, #36]	; (80121c8 <tcp_split_unsent_seg+0x27c>)
 80121a4:	f005 fa78 	bl	8017698 <iprintf>
  if (p != NULL) {
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d002      	beq.n	80121b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80121ae:	6938      	ldr	r0, [r7, #16]
 80121b0:	f7fb fcce 	bl	800db50 <pbuf_free>
  }

  return ERR_MEM;
 80121b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3724      	adds	r7, #36	; 0x24
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd90      	pop	{r4, r7, pc}
 80121c0:	0801a040 	.word	0x0801a040
 80121c4:	0801a3d4 	.word	0x0801a3d4
 80121c8:	0801a094 	.word	0x0801a094
 80121cc:	0801a3f8 	.word	0x0801a3f8
 80121d0:	0801a41c 	.word	0x0801a41c
 80121d4:	0801a42c 	.word	0x0801a42c
 80121d8:	0801a43c 	.word	0x0801a43c

080121dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80121dc:	b590      	push	{r4, r7, lr}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d106      	bne.n	80121f8 <tcp_send_fin+0x1c>
 80121ea:	4b21      	ldr	r3, [pc, #132]	; (8012270 <tcp_send_fin+0x94>)
 80121ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80121f0:	4920      	ldr	r1, [pc, #128]	; (8012274 <tcp_send_fin+0x98>)
 80121f2:	4821      	ldr	r0, [pc, #132]	; (8012278 <tcp_send_fin+0x9c>)
 80121f4:	f005 fa50 	bl	8017698 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d02e      	beq.n	801225e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012204:	60fb      	str	r3, [r7, #12]
 8012206:	e002      	b.n	801220e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d1f8      	bne.n	8012208 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	899b      	ldrh	r3, [r3, #12]
 801221c:	b29b      	uxth	r3, r3
 801221e:	4618      	mov	r0, r3
 8012220:	f7fa f938 	bl	800c494 <lwip_htons>
 8012224:	4603      	mov	r3, r0
 8012226:	b2db      	uxtb	r3, r3
 8012228:	f003 0307 	and.w	r3, r3, #7
 801222c:	2b00      	cmp	r3, #0
 801222e:	d116      	bne.n	801225e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	899b      	ldrh	r3, [r3, #12]
 8012236:	b29c      	uxth	r4, r3
 8012238:	2001      	movs	r0, #1
 801223a:	f7fa f92b 	bl	800c494 <lwip_htons>
 801223e:	4603      	mov	r3, r0
 8012240:	461a      	mov	r2, r3
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	4322      	orrs	r2, r4
 8012248:	b292      	uxth	r2, r2
 801224a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8b5b      	ldrh	r3, [r3, #26]
 8012250:	f043 0320 	orr.w	r3, r3, #32
 8012254:	b29a      	uxth	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	e004      	b.n	8012268 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801225e:	2101      	movs	r1, #1
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 f80b 	bl	801227c <tcp_enqueue_flags>
 8012266:	4603      	mov	r3, r0
}
 8012268:	4618      	mov	r0, r3
 801226a:	3714      	adds	r7, #20
 801226c:	46bd      	mov	sp, r7
 801226e:	bd90      	pop	{r4, r7, pc}
 8012270:	0801a040 	.word	0x0801a040
 8012274:	0801a448 	.word	0x0801a448
 8012278:	0801a094 	.word	0x0801a094

0801227c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b08a      	sub	sp, #40	; 0x28
 8012280:	af02      	add	r7, sp, #8
 8012282:	6078      	str	r0, [r7, #4]
 8012284:	460b      	mov	r3, r1
 8012286:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012288:	2300      	movs	r3, #0
 801228a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801228c:	2300      	movs	r3, #0
 801228e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012290:	78fb      	ldrb	r3, [r7, #3]
 8012292:	f003 0303 	and.w	r3, r3, #3
 8012296:	2b00      	cmp	r3, #0
 8012298:	d106      	bne.n	80122a8 <tcp_enqueue_flags+0x2c>
 801229a:	4b67      	ldr	r3, [pc, #412]	; (8012438 <tcp_enqueue_flags+0x1bc>)
 801229c:	f240 4211 	movw	r2, #1041	; 0x411
 80122a0:	4966      	ldr	r1, [pc, #408]	; (801243c <tcp_enqueue_flags+0x1c0>)
 80122a2:	4867      	ldr	r0, [pc, #412]	; (8012440 <tcp_enqueue_flags+0x1c4>)
 80122a4:	f005 f9f8 	bl	8017698 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d106      	bne.n	80122bc <tcp_enqueue_flags+0x40>
 80122ae:	4b62      	ldr	r3, [pc, #392]	; (8012438 <tcp_enqueue_flags+0x1bc>)
 80122b0:	f240 4213 	movw	r2, #1043	; 0x413
 80122b4:	4963      	ldr	r1, [pc, #396]	; (8012444 <tcp_enqueue_flags+0x1c8>)
 80122b6:	4862      	ldr	r0, [pc, #392]	; (8012440 <tcp_enqueue_flags+0x1c4>)
 80122b8:	f005 f9ee 	bl	8017698 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80122bc:	78fb      	ldrb	r3, [r7, #3]
 80122be:	f003 0302 	and.w	r3, r3, #2
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80122c6:	2301      	movs	r3, #1
 80122c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80122ca:	7ffb      	ldrb	r3, [r7, #31]
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	f003 0304 	and.w	r3, r3, #4
 80122d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80122d6:	7dfb      	ldrb	r3, [r7, #23]
 80122d8:	b29b      	uxth	r3, r3
 80122da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122de:	4619      	mov	r1, r3
 80122e0:	2036      	movs	r0, #54	; 0x36
 80122e2:	f7fb f951 	bl	800d588 <pbuf_alloc>
 80122e6:	6138      	str	r0, [r7, #16]
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d109      	bne.n	8012302 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	8b5b      	ldrh	r3, [r3, #26]
 80122f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012300:	e095      	b.n	801242e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	895a      	ldrh	r2, [r3, #10]
 8012306:	7dfb      	ldrb	r3, [r7, #23]
 8012308:	b29b      	uxth	r3, r3
 801230a:	429a      	cmp	r2, r3
 801230c:	d206      	bcs.n	801231c <tcp_enqueue_flags+0xa0>
 801230e:	4b4a      	ldr	r3, [pc, #296]	; (8012438 <tcp_enqueue_flags+0x1bc>)
 8012310:	f240 4239 	movw	r2, #1081	; 0x439
 8012314:	494c      	ldr	r1, [pc, #304]	; (8012448 <tcp_enqueue_flags+0x1cc>)
 8012316:	484a      	ldr	r0, [pc, #296]	; (8012440 <tcp_enqueue_flags+0x1c4>)
 8012318:	f005 f9be 	bl	8017698 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012320:	78fa      	ldrb	r2, [r7, #3]
 8012322:	7ffb      	ldrb	r3, [r7, #31]
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	460b      	mov	r3, r1
 8012328:	6939      	ldr	r1, [r7, #16]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7ff fd70 	bl	8011e10 <tcp_create_segment>
 8012330:	60f8      	str	r0, [r7, #12]
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d109      	bne.n	801234c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	8b5b      	ldrh	r3, [r3, #26]
 801233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012340:	b29a      	uxth	r2, r3
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012346:	f04f 33ff 	mov.w	r3, #4294967295
 801234a:	e070      	b.n	801242e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	f003 0303 	and.w	r3, r3, #3
 8012354:	2b00      	cmp	r3, #0
 8012356:	d006      	beq.n	8012366 <tcp_enqueue_flags+0xea>
 8012358:	4b37      	ldr	r3, [pc, #220]	; (8012438 <tcp_enqueue_flags+0x1bc>)
 801235a:	f240 4242 	movw	r2, #1090	; 0x442
 801235e:	493b      	ldr	r1, [pc, #236]	; (801244c <tcp_enqueue_flags+0x1d0>)
 8012360:	4837      	ldr	r0, [pc, #220]	; (8012440 <tcp_enqueue_flags+0x1c4>)
 8012362:	f005 f999 	bl	8017698 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	891b      	ldrh	r3, [r3, #8]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d006      	beq.n	801237c <tcp_enqueue_flags+0x100>
 801236e:	4b32      	ldr	r3, [pc, #200]	; (8012438 <tcp_enqueue_flags+0x1bc>)
 8012370:	f240 4243 	movw	r2, #1091	; 0x443
 8012374:	4936      	ldr	r1, [pc, #216]	; (8012450 <tcp_enqueue_flags+0x1d4>)
 8012376:	4832      	ldr	r0, [pc, #200]	; (8012440 <tcp_enqueue_flags+0x1c4>)
 8012378:	f005 f98e 	bl	8017698 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012380:	2b00      	cmp	r3, #0
 8012382:	d103      	bne.n	801238c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	66da      	str	r2, [r3, #108]	; 0x6c
 801238a:	e00d      	b.n	80123a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012390:	61bb      	str	r3, [r7, #24]
 8012392:	e002      	b.n	801239a <tcp_enqueue_flags+0x11e>
 8012394:	69bb      	ldr	r3, [r7, #24]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	61bb      	str	r3, [r7, #24]
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d1f8      	bne.n	8012394 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80123a2:	69bb      	ldr	r3, [r7, #24]
 80123a4:	68fa      	ldr	r2, [r7, #12]
 80123a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80123b0:	78fb      	ldrb	r3, [r7, #3]
 80123b2:	f003 0302 	and.w	r3, r3, #2
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d104      	bne.n	80123c4 <tcp_enqueue_flags+0x148>
 80123ba:	78fb      	ldrb	r3, [r7, #3]
 80123bc:	f003 0301 	and.w	r3, r3, #1
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d004      	beq.n	80123ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123c8:	1c5a      	adds	r2, r3, #1
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80123ce:	78fb      	ldrb	r3, [r7, #3]
 80123d0:	f003 0301 	and.w	r3, r3, #1
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d006      	beq.n	80123e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	8b5b      	ldrh	r3, [r3, #26]
 80123dc:	f043 0320 	orr.w	r3, r3, #32
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fb fc38 	bl	800dc60 <pbuf_clen>
 80123f0:	4603      	mov	r3, r0
 80123f2:	461a      	mov	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123fa:	4413      	add	r3, r2
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00e      	beq.n	801242c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012412:	2b00      	cmp	r3, #0
 8012414:	d10a      	bne.n	801242c <tcp_enqueue_flags+0x1b0>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801241a:	2b00      	cmp	r3, #0
 801241c:	d106      	bne.n	801242c <tcp_enqueue_flags+0x1b0>
 801241e:	4b06      	ldr	r3, [pc, #24]	; (8012438 <tcp_enqueue_flags+0x1bc>)
 8012420:	f240 4265 	movw	r2, #1125	; 0x465
 8012424:	490b      	ldr	r1, [pc, #44]	; (8012454 <tcp_enqueue_flags+0x1d8>)
 8012426:	4806      	ldr	r0, [pc, #24]	; (8012440 <tcp_enqueue_flags+0x1c4>)
 8012428:	f005 f936 	bl	8017698 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801242c:	2300      	movs	r3, #0
}
 801242e:	4618      	mov	r0, r3
 8012430:	3720      	adds	r7, #32
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	0801a040 	.word	0x0801a040
 801243c:	0801a464 	.word	0x0801a464
 8012440:	0801a094 	.word	0x0801a094
 8012444:	0801a4bc 	.word	0x0801a4bc
 8012448:	0801a4dc 	.word	0x0801a4dc
 801244c:	0801a518 	.word	0x0801a518
 8012450:	0801a530 	.word	0x0801a530
 8012454:	0801a55c 	.word	0x0801a55c

08012458 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012458:	b5b0      	push	{r4, r5, r7, lr}
 801245a:	b08a      	sub	sp, #40	; 0x28
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d106      	bne.n	8012474 <tcp_output+0x1c>
 8012466:	4b8a      	ldr	r3, [pc, #552]	; (8012690 <tcp_output+0x238>)
 8012468:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801246c:	4989      	ldr	r1, [pc, #548]	; (8012694 <tcp_output+0x23c>)
 801246e:	488a      	ldr	r0, [pc, #552]	; (8012698 <tcp_output+0x240>)
 8012470:	f005 f912 	bl	8017698 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	7d1b      	ldrb	r3, [r3, #20]
 8012478:	2b01      	cmp	r3, #1
 801247a:	d106      	bne.n	801248a <tcp_output+0x32>
 801247c:	4b84      	ldr	r3, [pc, #528]	; (8012690 <tcp_output+0x238>)
 801247e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012482:	4986      	ldr	r1, [pc, #536]	; (801269c <tcp_output+0x244>)
 8012484:	4884      	ldr	r0, [pc, #528]	; (8012698 <tcp_output+0x240>)
 8012486:	f005 f907 	bl	8017698 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801248a:	4b85      	ldr	r3, [pc, #532]	; (80126a0 <tcp_output+0x248>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	429a      	cmp	r2, r3
 8012492:	d101      	bne.n	8012498 <tcp_output+0x40>
    return ERR_OK;
 8012494:	2300      	movs	r3, #0
 8012496:	e1ce      	b.n	8012836 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124a4:	4293      	cmp	r3, r2
 80124a6:	bf28      	it	cs
 80124a8:	4613      	movcs	r3, r2
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d10b      	bne.n	80124d2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	8b5b      	ldrh	r3, [r3, #26]
 80124be:	f003 0302 	and.w	r3, r3, #2
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	f000 81aa 	beq.w	801281c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 fdcb 	bl	8013064 <tcp_send_empty_ack>
 80124ce:	4603      	mov	r3, r0
 80124d0:	e1b1      	b.n	8012836 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80124d2:	6879      	ldr	r1, [r7, #4]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	3304      	adds	r3, #4
 80124d8:	461a      	mov	r2, r3
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f7ff fc7c 	bl	8011dd8 <tcp_route>
 80124e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d102      	bne.n	80124ee <tcp_output+0x96>
    return ERR_RTE;
 80124e8:	f06f 0303 	mvn.w	r3, #3
 80124ec:	e1a3      	b.n	8012836 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d003      	beq.n	80124fc <tcp_output+0xa4>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d111      	bne.n	8012520 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d002      	beq.n	8012508 <tcp_output+0xb0>
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	3304      	adds	r3, #4
 8012506:	e000      	b.n	801250a <tcp_output+0xb2>
 8012508:	2300      	movs	r3, #0
 801250a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d102      	bne.n	8012518 <tcp_output+0xc0>
      return ERR_RTE;
 8012512:	f06f 0303 	mvn.w	r3, #3
 8012516:	e18e      	b.n	8012836 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	4618      	mov	r0, r3
 8012528:	f7f9 ffc9 	bl	800c4be <lwip_htonl>
 801252c:	4602      	mov	r2, r0
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012536:	8912      	ldrh	r2, [r2, #8]
 8012538:	4413      	add	r3, r2
 801253a:	69ba      	ldr	r2, [r7, #24]
 801253c:	429a      	cmp	r2, r3
 801253e:	d227      	bcs.n	8012590 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012546:	461a      	mov	r2, r3
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	4293      	cmp	r3, r2
 801254c:	d114      	bne.n	8012578 <tcp_output+0x120>
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012552:	2b00      	cmp	r3, #0
 8012554:	d110      	bne.n	8012578 <tcp_output+0x120>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801255c:	2b00      	cmp	r3, #0
 801255e:	d10b      	bne.n	8012578 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2200      	movs	r2, #0
 8012564:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2201      	movs	r2, #1
 801256c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2200      	movs	r2, #0
 8012574:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	8b5b      	ldrh	r3, [r3, #26]
 801257c:	f003 0302 	and.w	r3, r3, #2
 8012580:	2b00      	cmp	r3, #0
 8012582:	f000 814d 	beq.w	8012820 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f000 fd6c 	bl	8013064 <tcp_send_empty_ack>
 801258c:	4603      	mov	r3, r0
 801258e:	e152      	b.n	8012836 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801259c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801259e:	6a3b      	ldr	r3, [r7, #32]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f000 811c 	beq.w	80127de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80125a6:	e002      	b.n	80125ae <tcp_output+0x156>
 80125a8:	6a3b      	ldr	r3, [r7, #32]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	623b      	str	r3, [r7, #32]
 80125ae:	6a3b      	ldr	r3, [r7, #32]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d1f8      	bne.n	80125a8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80125b6:	e112      	b.n	80127de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80125b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	899b      	ldrh	r3, [r3, #12]
 80125be:	b29b      	uxth	r3, r3
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7f9 ff67 	bl	800c494 <lwip_htons>
 80125c6:	4603      	mov	r3, r0
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	f003 0304 	and.w	r3, r3, #4
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d006      	beq.n	80125e0 <tcp_output+0x188>
 80125d2:	4b2f      	ldr	r3, [pc, #188]	; (8012690 <tcp_output+0x238>)
 80125d4:	f240 5236 	movw	r2, #1334	; 0x536
 80125d8:	4932      	ldr	r1, [pc, #200]	; (80126a4 <tcp_output+0x24c>)
 80125da:	482f      	ldr	r0, [pc, #188]	; (8012698 <tcp_output+0x240>)
 80125dc:	f005 f85c 	bl	8017698 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d01f      	beq.n	8012628 <tcp_output+0x1d0>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	8b5b      	ldrh	r3, [r3, #26]
 80125ec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d119      	bne.n	8012628 <tcp_output+0x1d0>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00b      	beq.n	8012614 <tcp_output+0x1bc>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d110      	bne.n	8012628 <tcp_output+0x1d0>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801260a:	891a      	ldrh	r2, [r3, #8]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012610:	429a      	cmp	r2, r3
 8012612:	d209      	bcs.n	8012628 <tcp_output+0x1d0>
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801261a:	2b00      	cmp	r3, #0
 801261c:	d004      	beq.n	8012628 <tcp_output+0x1d0>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012624:	2b08      	cmp	r3, #8
 8012626:	d901      	bls.n	801262c <tcp_output+0x1d4>
 8012628:	2301      	movs	r3, #1
 801262a:	e000      	b.n	801262e <tcp_output+0x1d6>
 801262c:	2300      	movs	r3, #0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d106      	bne.n	8012640 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	8b5b      	ldrh	r3, [r3, #26]
 8012636:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801263a:	2b00      	cmp	r3, #0
 801263c:	f000 80e4 	beq.w	8012808 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	7d1b      	ldrb	r3, [r3, #20]
 8012644:	2b02      	cmp	r3, #2
 8012646:	d00d      	beq.n	8012664 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264a:	68db      	ldr	r3, [r3, #12]
 801264c:	899b      	ldrh	r3, [r3, #12]
 801264e:	b29c      	uxth	r4, r3
 8012650:	2010      	movs	r0, #16
 8012652:	f7f9 ff1f 	bl	800c494 <lwip_htons>
 8012656:	4603      	mov	r3, r0
 8012658:	461a      	mov	r2, r3
 801265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	4322      	orrs	r2, r4
 8012660:	b292      	uxth	r2, r2
 8012662:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012664:	697a      	ldr	r2, [r7, #20]
 8012666:	6879      	ldr	r1, [r7, #4]
 8012668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801266a:	f000 f909 	bl	8012880 <tcp_output_segment>
 801266e:	4603      	mov	r3, r0
 8012670:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d016      	beq.n	80126a8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	8b5b      	ldrh	r3, [r3, #26]
 801267e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012682:	b29a      	uxth	r2, r3
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	835a      	strh	r2, [r3, #26]
      return err;
 8012688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801268c:	e0d3      	b.n	8012836 <tcp_output+0x3de>
 801268e:	bf00      	nop
 8012690:	0801a040 	.word	0x0801a040
 8012694:	0801a584 	.word	0x0801a584
 8012698:	0801a094 	.word	0x0801a094
 801269c:	0801a59c 	.word	0x0801a59c
 80126a0:	200089e0 	.word	0x200089e0
 80126a4:	0801a5c4 	.word	0x0801a5c4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80126a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	7d1b      	ldrb	r3, [r3, #20]
 80126b4:	2b02      	cmp	r3, #2
 80126b6:	d006      	beq.n	80126c6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	8b5b      	ldrh	r3, [r3, #26]
 80126bc:	f023 0303 	bic.w	r3, r3, #3
 80126c0:	b29a      	uxth	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7f9 fef6 	bl	800c4be <lwip_htonl>
 80126d2:	4604      	mov	r4, r0
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	891b      	ldrh	r3, [r3, #8]
 80126d8:	461d      	mov	r5, r3
 80126da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	899b      	ldrh	r3, [r3, #12]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7f9 fed6 	bl	800c494 <lwip_htons>
 80126e8:	4603      	mov	r3, r0
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	f003 0303 	and.w	r3, r3, #3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d001      	beq.n	80126f8 <tcp_output+0x2a0>
 80126f4:	2301      	movs	r3, #1
 80126f6:	e000      	b.n	80126fa <tcp_output+0x2a2>
 80126f8:	2300      	movs	r3, #0
 80126fa:	442b      	add	r3, r5
 80126fc:	4423      	add	r3, r4
 80126fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	1ad3      	subs	r3, r2, r3
 8012708:	2b00      	cmp	r3, #0
 801270a:	da02      	bge.n	8012712 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	68ba      	ldr	r2, [r7, #8]
 8012710:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012714:	891b      	ldrh	r3, [r3, #8]
 8012716:	461c      	mov	r4, r3
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	899b      	ldrh	r3, [r3, #12]
 801271e:	b29b      	uxth	r3, r3
 8012720:	4618      	mov	r0, r3
 8012722:	f7f9 feb7 	bl	800c494 <lwip_htons>
 8012726:	4603      	mov	r3, r0
 8012728:	b2db      	uxtb	r3, r3
 801272a:	f003 0303 	and.w	r3, r3, #3
 801272e:	2b00      	cmp	r3, #0
 8012730:	d001      	beq.n	8012736 <tcp_output+0x2de>
 8012732:	2301      	movs	r3, #1
 8012734:	e000      	b.n	8012738 <tcp_output+0x2e0>
 8012736:	2300      	movs	r3, #0
 8012738:	4423      	add	r3, r4
 801273a:	2b00      	cmp	r3, #0
 801273c:	d049      	beq.n	80127d2 <tcp_output+0x37a>
      seg->next = NULL;
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	2200      	movs	r2, #0
 8012742:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012748:	2b00      	cmp	r3, #0
 801274a:	d105      	bne.n	8012758 <tcp_output+0x300>
        pcb->unacked = seg;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012750:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012754:	623b      	str	r3, [r7, #32]
 8012756:	e03f      	b.n	80127d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	4618      	mov	r0, r3
 8012760:	f7f9 fead 	bl	800c4be <lwip_htonl>
 8012764:	4604      	mov	r4, r0
 8012766:	6a3b      	ldr	r3, [r7, #32]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	4618      	mov	r0, r3
 801276e:	f7f9 fea6 	bl	800c4be <lwip_htonl>
 8012772:	4603      	mov	r3, r0
 8012774:	1ae3      	subs	r3, r4, r3
 8012776:	2b00      	cmp	r3, #0
 8012778:	da24      	bge.n	80127c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	3370      	adds	r3, #112	; 0x70
 801277e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012780:	e002      	b.n	8012788 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d011      	beq.n	80127b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	68db      	ldr	r3, [r3, #12]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	f7f9 fe90 	bl	800c4be <lwip_htonl>
 801279e:	4604      	mov	r4, r0
 80127a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7f9 fe89 	bl	800c4be <lwip_htonl>
 80127ac:	4603      	mov	r3, r0
 80127ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	dbe6      	blt.n	8012782 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127c0:	601a      	str	r2, [r3, #0]
 80127c2:	e009      	b.n	80127d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80127c4:	6a3b      	ldr	r3, [r7, #32]
 80127c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80127ca:	6a3b      	ldr	r3, [r7, #32]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	623b      	str	r3, [r7, #32]
 80127d0:	e002      	b.n	80127d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80127d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127d4:	f7fc fc3f 	bl	800f056 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80127de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d012      	beq.n	801280a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80127e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f9 fe67 	bl	800c4be <lwip_htonl>
 80127f0:	4602      	mov	r2, r0
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127f6:	1ad3      	subs	r3, r2, r3
 80127f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127fa:	8912      	ldrh	r2, [r2, #8]
 80127fc:	4413      	add	r3, r2
  while (seg != NULL &&
 80127fe:	69ba      	ldr	r2, [r7, #24]
 8012800:	429a      	cmp	r2, r3
 8012802:	f4bf aed9 	bcs.w	80125b8 <tcp_output+0x160>
 8012806:	e000      	b.n	801280a <tcp_output+0x3b2>
      break;
 8012808:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801280e:	2b00      	cmp	r3, #0
 8012810:	d108      	bne.n	8012824 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801281a:	e004      	b.n	8012826 <tcp_output+0x3ce>
    goto output_done;
 801281c:	bf00      	nop
 801281e:	e002      	b.n	8012826 <tcp_output+0x3ce>
    goto output_done;
 8012820:	bf00      	nop
 8012822:	e000      	b.n	8012826 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012824:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	8b5b      	ldrh	r3, [r3, #26]
 801282a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801282e:	b29a      	uxth	r2, r3
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012834:	2300      	movs	r3, #0
}
 8012836:	4618      	mov	r0, r3
 8012838:	3728      	adds	r7, #40	; 0x28
 801283a:	46bd      	mov	sp, r7
 801283c:	bdb0      	pop	{r4, r5, r7, pc}
 801283e:	bf00      	nop

08012840 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d106      	bne.n	801285c <tcp_output_segment_busy+0x1c>
 801284e:	4b09      	ldr	r3, [pc, #36]	; (8012874 <tcp_output_segment_busy+0x34>)
 8012850:	f240 529a 	movw	r2, #1434	; 0x59a
 8012854:	4908      	ldr	r1, [pc, #32]	; (8012878 <tcp_output_segment_busy+0x38>)
 8012856:	4809      	ldr	r0, [pc, #36]	; (801287c <tcp_output_segment_busy+0x3c>)
 8012858:	f004 ff1e 	bl	8017698 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	7b9b      	ldrb	r3, [r3, #14]
 8012862:	2b01      	cmp	r3, #1
 8012864:	d001      	beq.n	801286a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012866:	2301      	movs	r3, #1
 8012868:	e000      	b.n	801286c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801286a:	2300      	movs	r3, #0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	0801a040 	.word	0x0801a040
 8012878:	0801a5dc 	.word	0x0801a5dc
 801287c:	0801a094 	.word	0x0801a094

08012880 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012880:	b5b0      	push	{r4, r5, r7, lr}
 8012882:	b08c      	sub	sp, #48	; 0x30
 8012884:	af04      	add	r7, sp, #16
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <tcp_output_segment+0x20>
 8012892:	4b64      	ldr	r3, [pc, #400]	; (8012a24 <tcp_output_segment+0x1a4>)
 8012894:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012898:	4963      	ldr	r1, [pc, #396]	; (8012a28 <tcp_output_segment+0x1a8>)
 801289a:	4864      	ldr	r0, [pc, #400]	; (8012a2c <tcp_output_segment+0x1ac>)
 801289c:	f004 fefc 	bl	8017698 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d106      	bne.n	80128b4 <tcp_output_segment+0x34>
 80128a6:	4b5f      	ldr	r3, [pc, #380]	; (8012a24 <tcp_output_segment+0x1a4>)
 80128a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80128ac:	4960      	ldr	r1, [pc, #384]	; (8012a30 <tcp_output_segment+0x1b0>)
 80128ae:	485f      	ldr	r0, [pc, #380]	; (8012a2c <tcp_output_segment+0x1ac>)
 80128b0:	f004 fef2 	bl	8017698 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d106      	bne.n	80128c8 <tcp_output_segment+0x48>
 80128ba:	4b5a      	ldr	r3, [pc, #360]	; (8012a24 <tcp_output_segment+0x1a4>)
 80128bc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80128c0:	495c      	ldr	r1, [pc, #368]	; (8012a34 <tcp_output_segment+0x1b4>)
 80128c2:	485a      	ldr	r0, [pc, #360]	; (8012a2c <tcp_output_segment+0x1ac>)
 80128c4:	f004 fee8 	bl	8017698 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80128c8:	68f8      	ldr	r0, [r7, #12]
 80128ca:	f7ff ffb9 	bl	8012840 <tcp_output_segment_busy>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d001      	beq.n	80128d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80128d4:	2300      	movs	r3, #0
 80128d6:	e0a1      	b.n	8012a1c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	68dc      	ldr	r4, [r3, #12]
 80128e0:	4610      	mov	r0, r2
 80128e2:	f7f9 fdec 	bl	800c4be <lwip_htonl>
 80128e6:	4603      	mov	r3, r0
 80128e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	68dc      	ldr	r4, [r3, #12]
 80128f2:	4610      	mov	r0, r2
 80128f4:	f7f9 fdce 	bl	800c494 <lwip_htons>
 80128f8:	4603      	mov	r3, r0
 80128fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012900:	68ba      	ldr	r2, [r7, #8]
 8012902:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012904:	441a      	add	r2, r3
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	3314      	adds	r3, #20
 8012910:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	7a9b      	ldrb	r3, [r3, #10]
 8012916:	f003 0301 	and.w	r3, r3, #1
 801291a:	2b00      	cmp	r3, #0
 801291c:	d015      	beq.n	801294a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	3304      	adds	r3, #4
 8012922:	461a      	mov	r2, r3
 8012924:	6879      	ldr	r1, [r7, #4]
 8012926:	f44f 7006 	mov.w	r0, #536	; 0x218
 801292a:	f7fc fe8b 	bl	800f644 <tcp_eff_send_mss_netif>
 801292e:	4603      	mov	r3, r0
 8012930:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012932:	8b7b      	ldrh	r3, [r7, #26]
 8012934:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012938:	4618      	mov	r0, r3
 801293a:	f7f9 fdc0 	bl	800c4be <lwip_htonl>
 801293e:	4602      	mov	r2, r0
 8012940:	69fb      	ldr	r3, [r7, #28]
 8012942:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	3304      	adds	r3, #4
 8012948:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012950:	2b00      	cmp	r3, #0
 8012952:	da02      	bge.n	801295a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	2200      	movs	r2, #0
 8012958:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10c      	bne.n	801297c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012962:	4b35      	ldr	r3, [pc, #212]	; (8012a38 <tcp_output_segment+0x1b8>)
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	f7f9 fda4 	bl	800c4be <lwip_htonl>
 8012976:	4602      	mov	r2, r0
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	68da      	ldr	r2, [r3, #12]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	1ad3      	subs	r3, r2, r3
 8012988:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	8959      	ldrh	r1, [r3, #10]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	8b3a      	ldrh	r2, [r7, #24]
 8012996:	1a8a      	subs	r2, r1, r2
 8012998:	b292      	uxth	r2, r2
 801299a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	8919      	ldrh	r1, [r3, #8]
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	8b3a      	ldrh	r2, [r7, #24]
 80129a8:	1a8a      	subs	r2, r1, r2
 80129aa:	b292      	uxth	r2, r2
 80129ac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	68fa      	ldr	r2, [r7, #12]
 80129b4:	68d2      	ldr	r2, [r2, #12]
 80129b6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	2200      	movs	r2, #0
 80129be:	741a      	strb	r2, [r3, #16]
 80129c0:	2200      	movs	r2, #0
 80129c2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	68da      	ldr	r2, [r3, #12]
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	7a9b      	ldrb	r3, [r3, #10]
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <tcp_output_segment+0x158>
 80129d4:	2318      	movs	r3, #24
 80129d6:	e000      	b.n	80129da <tcp_output_segment+0x15a>
 80129d8:	2314      	movs	r3, #20
 80129da:	4413      	add	r3, r2
 80129dc:	69fa      	ldr	r2, [r7, #28]
 80129de:	429a      	cmp	r2, r3
 80129e0:	d006      	beq.n	80129f0 <tcp_output_segment+0x170>
 80129e2:	4b10      	ldr	r3, [pc, #64]	; (8012a24 <tcp_output_segment+0x1a4>)
 80129e4:	f240 621c 	movw	r2, #1564	; 0x61c
 80129e8:	4914      	ldr	r1, [pc, #80]	; (8012a3c <tcp_output_segment+0x1bc>)
 80129ea:	4810      	ldr	r0, [pc, #64]	; (8012a2c <tcp_output_segment+0x1ac>)
 80129ec:	f004 fe54 	bl	8017698 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6858      	ldr	r0, [r3, #4]
 80129f4:	68b9      	ldr	r1, [r7, #8]
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	1d1c      	adds	r4, r3, #4
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	7add      	ldrb	r5, [r3, #11]
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	7a9b      	ldrb	r3, [r3, #10]
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	9202      	str	r2, [sp, #8]
 8012a06:	2206      	movs	r2, #6
 8012a08:	9201      	str	r2, [sp, #4]
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	462b      	mov	r3, r5
 8012a0e:	4622      	mov	r2, r4
 8012a10:	f002 fd24 	bl	801545c <ip4_output_if>
 8012a14:	4603      	mov	r3, r0
 8012a16:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3720      	adds	r7, #32
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bdb0      	pop	{r4, r5, r7, pc}
 8012a24:	0801a040 	.word	0x0801a040
 8012a28:	0801a604 	.word	0x0801a604
 8012a2c:	0801a094 	.word	0x0801a094
 8012a30:	0801a624 	.word	0x0801a624
 8012a34:	0801a644 	.word	0x0801a644
 8012a38:	20008994 	.word	0x20008994
 8012a3c:	0801a668 	.word	0x0801a668

08012a40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012a40:	b5b0      	push	{r4, r5, r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d106      	bne.n	8012a5c <tcp_rexmit_rto_prepare+0x1c>
 8012a4e:	4b31      	ldr	r3, [pc, #196]	; (8012b14 <tcp_rexmit_rto_prepare+0xd4>)
 8012a50:	f240 6263 	movw	r2, #1635	; 0x663
 8012a54:	4930      	ldr	r1, [pc, #192]	; (8012b18 <tcp_rexmit_rto_prepare+0xd8>)
 8012a56:	4831      	ldr	r0, [pc, #196]	; (8012b1c <tcp_rexmit_rto_prepare+0xdc>)
 8012a58:	f004 fe1e 	bl	8017698 <iprintf>

  if (pcb->unacked == NULL) {
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d102      	bne.n	8012a6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012a64:	f06f 0305 	mvn.w	r3, #5
 8012a68:	e050      	b.n	8012b0c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a6e:	60fb      	str	r3, [r7, #12]
 8012a70:	e00b      	b.n	8012a8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012a72:	68f8      	ldr	r0, [r7, #12]
 8012a74:	f7ff fee4 	bl	8012840 <tcp_output_segment_busy>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d002      	beq.n	8012a84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012a7e:	f06f 0305 	mvn.w	r3, #5
 8012a82:	e043      	b.n	8012b0c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	60fb      	str	r3, [r7, #12]
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1ef      	bne.n	8012a72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f7ff fed4 	bl	8012840 <tcp_output_segment_busy>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012a9e:	f06f 0305 	mvn.w	r3, #5
 8012aa2:	e033      	b.n	8012b0c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	8b5b      	ldrh	r3, [r3, #26]
 8012abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	68db      	ldr	r3, [r3, #12]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7f9 fcf5 	bl	800c4be <lwip_htonl>
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	891b      	ldrh	r3, [r3, #8]
 8012ada:	461d      	mov	r5, r3
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	899b      	ldrh	r3, [r3, #12]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f9 fcd5 	bl	800c494 <lwip_htons>
 8012aea:	4603      	mov	r3, r0
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	f003 0303 	and.w	r3, r3, #3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d001      	beq.n	8012afa <tcp_rexmit_rto_prepare+0xba>
 8012af6:	2301      	movs	r3, #1
 8012af8:	e000      	b.n	8012afc <tcp_rexmit_rto_prepare+0xbc>
 8012afa:	2300      	movs	r3, #0
 8012afc:	442b      	add	r3, r5
 8012afe:	18e2      	adds	r2, r4, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2200      	movs	r2, #0
 8012b08:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012b0a:	2300      	movs	r3, #0
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bdb0      	pop	{r4, r5, r7, pc}
 8012b14:	0801a040 	.word	0x0801a040
 8012b18:	0801a67c 	.word	0x0801a67c
 8012b1c:	0801a094 	.word	0x0801a094

08012b20 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <tcp_rexmit_rto_commit+0x1c>
 8012b2e:	4b0d      	ldr	r3, [pc, #52]	; (8012b64 <tcp_rexmit_rto_commit+0x44>)
 8012b30:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012b34:	490c      	ldr	r1, [pc, #48]	; (8012b68 <tcp_rexmit_rto_commit+0x48>)
 8012b36:	480d      	ldr	r0, [pc, #52]	; (8012b6c <tcp_rexmit_rto_commit+0x4c>)
 8012b38:	f004 fdae 	bl	8017698 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b42:	2bff      	cmp	r3, #255	; 0xff
 8012b44:	d007      	beq.n	8012b56 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	b2da      	uxtb	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f7ff fc7e 	bl	8012458 <tcp_output>
}
 8012b5c:	bf00      	nop
 8012b5e:	3708      	adds	r7, #8
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	0801a040 	.word	0x0801a040
 8012b68:	0801a6a0 	.word	0x0801a6a0
 8012b6c:	0801a094 	.word	0x0801a094

08012b70 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d106      	bne.n	8012b8c <tcp_rexmit_rto+0x1c>
 8012b7e:	4b0a      	ldr	r3, [pc, #40]	; (8012ba8 <tcp_rexmit_rto+0x38>)
 8012b80:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012b84:	4909      	ldr	r1, [pc, #36]	; (8012bac <tcp_rexmit_rto+0x3c>)
 8012b86:	480a      	ldr	r0, [pc, #40]	; (8012bb0 <tcp_rexmit_rto+0x40>)
 8012b88:	f004 fd86 	bl	8017698 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff ff57 	bl	8012a40 <tcp_rexmit_rto_prepare>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d102      	bne.n	8012b9e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7ff ffc1 	bl	8012b20 <tcp_rexmit_rto_commit>
  }
}
 8012b9e:	bf00      	nop
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	0801a040 	.word	0x0801a040
 8012bac:	0801a6c4 	.word	0x0801a6c4
 8012bb0:	0801a094 	.word	0x0801a094

08012bb4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012bb4:	b590      	push	{r4, r7, lr}
 8012bb6:	b085      	sub	sp, #20
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d106      	bne.n	8012bd0 <tcp_rexmit+0x1c>
 8012bc2:	4b2f      	ldr	r3, [pc, #188]	; (8012c80 <tcp_rexmit+0xcc>)
 8012bc4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012bc8:	492e      	ldr	r1, [pc, #184]	; (8012c84 <tcp_rexmit+0xd0>)
 8012bca:	482f      	ldr	r0, [pc, #188]	; (8012c88 <tcp_rexmit+0xd4>)
 8012bcc:	f004 fd64 	bl	8017698 <iprintf>

  if (pcb->unacked == NULL) {
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d102      	bne.n	8012bde <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012bd8:	f06f 0305 	mvn.w	r3, #5
 8012bdc:	e04c      	b.n	8012c78 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012be2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012be4:	68b8      	ldr	r0, [r7, #8]
 8012be6:	f7ff fe2b 	bl	8012840 <tcp_output_segment_busy>
 8012bea:	4603      	mov	r3, r0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d002      	beq.n	8012bf6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012bf0:	f06f 0305 	mvn.w	r3, #5
 8012bf4:	e040      	b.n	8012c78 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	336c      	adds	r3, #108	; 0x6c
 8012c02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012c04:	e002      	b.n	8012c0c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d011      	beq.n	8012c38 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7f9 fc4e 	bl	800c4be <lwip_htonl>
 8012c22:	4604      	mov	r4, r0
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	68db      	ldr	r3, [r3, #12]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7f9 fc47 	bl	800c4be <lwip_htonl>
 8012c30:	4603      	mov	r3, r0
 8012c32:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	dbe6      	blt.n	8012c06 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	68ba      	ldr	r2, [r7, #8]
 8012c44:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d103      	bne.n	8012c56 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2200      	movs	r2, #0
 8012c52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c5c:	2bff      	cmp	r3, #255	; 0xff
 8012c5e:	d007      	beq.n	8012c70 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c66:	3301      	adds	r3, #1
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3714      	adds	r7, #20
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd90      	pop	{r4, r7, pc}
 8012c80:	0801a040 	.word	0x0801a040
 8012c84:	0801a6e0 	.word	0x0801a6e0
 8012c88:	0801a094 	.word	0x0801a094

08012c8c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d106      	bne.n	8012ca8 <tcp_rexmit_fast+0x1c>
 8012c9a:	4b2a      	ldr	r3, [pc, #168]	; (8012d44 <tcp_rexmit_fast+0xb8>)
 8012c9c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012ca0:	4929      	ldr	r1, [pc, #164]	; (8012d48 <tcp_rexmit_fast+0xbc>)
 8012ca2:	482a      	ldr	r0, [pc, #168]	; (8012d4c <tcp_rexmit_fast+0xc0>)
 8012ca4:	f004 fcf8 	bl	8017698 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d045      	beq.n	8012d3c <tcp_rexmit_fast+0xb0>
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	8b5b      	ldrh	r3, [r3, #26]
 8012cb4:	f003 0304 	and.w	r3, r3, #4
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d13f      	bne.n	8012d3c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7ff ff79 	bl	8012bb4 <tcp_rexmit>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d139      	bne.n	8012d3c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	bf28      	it	cs
 8012cd8:	4613      	movcs	r3, r2
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	da00      	bge.n	8012ce2 <tcp_rexmit_fast+0x56>
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	105b      	asrs	r3, r3, #1
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cf8:	005b      	lsls	r3, r3, #1
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d206      	bcs.n	8012d0c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d02:	005b      	lsls	r3, r3, #1
 8012d04:	b29a      	uxth	r2, r3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d16:	4619      	mov	r1, r3
 8012d18:	0049      	lsls	r1, r1, #1
 8012d1a:	440b      	add	r3, r1
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	4413      	add	r3, r2
 8012d20:	b29a      	uxth	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	8b5b      	ldrh	r3, [r3, #26]
 8012d2c:	f043 0304 	orr.w	r3, r3, #4
 8012d30:	b29a      	uxth	r2, r3
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012d3c:	bf00      	nop
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	0801a040 	.word	0x0801a040
 8012d48:	0801a6f8 	.word	0x0801a6f8
 8012d4c:	0801a094 	.word	0x0801a094

08012d50 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b086      	sub	sp, #24
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	607b      	str	r3, [r7, #4]
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	817b      	strh	r3, [r7, #10]
 8012d5e:	4613      	mov	r3, r2
 8012d60:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012d62:	897a      	ldrh	r2, [r7, #10]
 8012d64:	893b      	ldrh	r3, [r7, #8]
 8012d66:	4413      	add	r3, r2
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	3314      	adds	r3, #20
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d72:	4619      	mov	r1, r3
 8012d74:	2022      	movs	r0, #34	; 0x22
 8012d76:	f7fa fc07 	bl	800d588 <pbuf_alloc>
 8012d7a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d04d      	beq.n	8012e1e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012d82:	897b      	ldrh	r3, [r7, #10]
 8012d84:	3313      	adds	r3, #19
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	8952      	ldrh	r2, [r2, #10]
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	db06      	blt.n	8012d9c <tcp_output_alloc_header_common+0x4c>
 8012d8e:	4b26      	ldr	r3, [pc, #152]	; (8012e28 <tcp_output_alloc_header_common+0xd8>)
 8012d90:	f240 7223 	movw	r2, #1827	; 0x723
 8012d94:	4925      	ldr	r1, [pc, #148]	; (8012e2c <tcp_output_alloc_header_common+0xdc>)
 8012d96:	4826      	ldr	r0, [pc, #152]	; (8012e30 <tcp_output_alloc_header_common+0xe0>)
 8012d98:	f004 fc7e 	bl	8017698 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012da2:	8c3b      	ldrh	r3, [r7, #32]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7f9 fb75 	bl	800c494 <lwip_htons>
 8012daa:	4603      	mov	r3, r0
 8012dac:	461a      	mov	r2, r3
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7f9 fb6d 	bl	800c494 <lwip_htons>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	f7f9 fb78 	bl	800c4be <lwip_htonl>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012dd4:	897b      	ldrh	r3, [r7, #10]
 8012dd6:	089b      	lsrs	r3, r3, #2
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	3305      	adds	r3, #5
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	031b      	lsls	r3, r3, #12
 8012de0:	b29a      	uxth	r2, r3
 8012de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	4313      	orrs	r3, r2
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7f9 fb51 	bl	800c494 <lwip_htons>
 8012df2:	4603      	mov	r3, r0
 8012df4:	461a      	mov	r2, r3
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012dfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7f9 fb49 	bl	800c494 <lwip_htons>
 8012e02:	4603      	mov	r3, r0
 8012e04:	461a      	mov	r2, r3
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	741a      	strb	r2, [r3, #16]
 8012e10:	2200      	movs	r2, #0
 8012e12:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	2200      	movs	r2, #0
 8012e18:	749a      	strb	r2, [r3, #18]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012e1e:	697b      	ldr	r3, [r7, #20]
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3718      	adds	r7, #24
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	0801a040 	.word	0x0801a040
 8012e2c:	0801a718 	.word	0x0801a718
 8012e30:	0801a094 	.word	0x0801a094

08012e34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012e34:	b5b0      	push	{r4, r5, r7, lr}
 8012e36:	b08a      	sub	sp, #40	; 0x28
 8012e38:	af04      	add	r7, sp, #16
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	607b      	str	r3, [r7, #4]
 8012e3e:	460b      	mov	r3, r1
 8012e40:	817b      	strh	r3, [r7, #10]
 8012e42:	4613      	mov	r3, r2
 8012e44:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d106      	bne.n	8012e5a <tcp_output_alloc_header+0x26>
 8012e4c:	4b15      	ldr	r3, [pc, #84]	; (8012ea4 <tcp_output_alloc_header+0x70>)
 8012e4e:	f240 7242 	movw	r2, #1858	; 0x742
 8012e52:	4915      	ldr	r1, [pc, #84]	; (8012ea8 <tcp_output_alloc_header+0x74>)
 8012e54:	4815      	ldr	r0, [pc, #84]	; (8012eac <tcp_output_alloc_header+0x78>)
 8012e56:	f004 fc1f 	bl	8017698 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	8adb      	ldrh	r3, [r3, #22]
 8012e62:	68fa      	ldr	r2, [r7, #12]
 8012e64:	8b12      	ldrh	r2, [r2, #24]
 8012e66:	68f9      	ldr	r1, [r7, #12]
 8012e68:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012e6a:	893d      	ldrh	r5, [r7, #8]
 8012e6c:	897c      	ldrh	r4, [r7, #10]
 8012e6e:	9103      	str	r1, [sp, #12]
 8012e70:	2110      	movs	r1, #16
 8012e72:	9102      	str	r1, [sp, #8]
 8012e74:	9201      	str	r2, [sp, #4]
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	462a      	mov	r2, r5
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	f7ff ff67 	bl	8012d50 <tcp_output_alloc_header_common>
 8012e82:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d006      	beq.n	8012e98 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012e92:	441a      	add	r2, r3
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012e98:	697b      	ldr	r3, [r7, #20]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3718      	adds	r7, #24
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	0801a040 	.word	0x0801a040
 8012ea8:	0801a748 	.word	0x0801a748
 8012eac:	0801a094 	.word	0x0801a094

08012eb0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b088      	sub	sp, #32
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	4611      	mov	r1, r2
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	71fb      	strb	r3, [r7, #7]
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d106      	bne.n	8012ede <tcp_output_fill_options+0x2e>
 8012ed0:	4b12      	ldr	r3, [pc, #72]	; (8012f1c <tcp_output_fill_options+0x6c>)
 8012ed2:	f240 7256 	movw	r2, #1878	; 0x756
 8012ed6:	4912      	ldr	r1, [pc, #72]	; (8012f20 <tcp_output_fill_options+0x70>)
 8012ed8:	4812      	ldr	r0, [pc, #72]	; (8012f24 <tcp_output_fill_options+0x74>)
 8012eda:	f004 fbdd 	bl	8017698 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	3314      	adds	r3, #20
 8012ee8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012eea:	8bfb      	ldrh	r3, [r7, #30]
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	461a      	mov	r2, r3
 8012ef0:	79fb      	ldrb	r3, [r7, #7]
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	f003 0304 	and.w	r3, r3, #4
 8012ef8:	4413      	add	r3, r2
 8012efa:	3314      	adds	r3, #20
 8012efc:	69ba      	ldr	r2, [r7, #24]
 8012efe:	4413      	add	r3, r2
 8012f00:	697a      	ldr	r2, [r7, #20]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d006      	beq.n	8012f14 <tcp_output_fill_options+0x64>
 8012f06:	4b05      	ldr	r3, [pc, #20]	; (8012f1c <tcp_output_fill_options+0x6c>)
 8012f08:	f240 7275 	movw	r2, #1909	; 0x775
 8012f0c:	4906      	ldr	r1, [pc, #24]	; (8012f28 <tcp_output_fill_options+0x78>)
 8012f0e:	4805      	ldr	r0, [pc, #20]	; (8012f24 <tcp_output_fill_options+0x74>)
 8012f10:	f004 fbc2 	bl	8017698 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012f14:	bf00      	nop
 8012f16:	3720      	adds	r7, #32
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	0801a040 	.word	0x0801a040
 8012f20:	0801a770 	.word	0x0801a770
 8012f24:	0801a094 	.word	0x0801a094
 8012f28:	0801a668 	.word	0x0801a668

08012f2c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b08a      	sub	sp, #40	; 0x28
 8012f30:	af04      	add	r7, sp, #16
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	607a      	str	r2, [r7, #4]
 8012f38:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d106      	bne.n	8012f4e <tcp_output_control_segment+0x22>
 8012f40:	4b1c      	ldr	r3, [pc, #112]	; (8012fb4 <tcp_output_control_segment+0x88>)
 8012f42:	f240 7287 	movw	r2, #1927	; 0x787
 8012f46:	491c      	ldr	r1, [pc, #112]	; (8012fb8 <tcp_output_control_segment+0x8c>)
 8012f48:	481c      	ldr	r0, [pc, #112]	; (8012fbc <tcp_output_control_segment+0x90>)
 8012f4a:	f004 fba5 	bl	8017698 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012f4e:	683a      	ldr	r2, [r7, #0]
 8012f50:	6879      	ldr	r1, [r7, #4]
 8012f52:	68f8      	ldr	r0, [r7, #12]
 8012f54:	f7fe ff40 	bl	8011dd8 <tcp_route>
 8012f58:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d102      	bne.n	8012f66 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012f60:	23fc      	movs	r3, #252	; 0xfc
 8012f62:	75fb      	strb	r3, [r7, #23]
 8012f64:	e01c      	b.n	8012fa0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d006      	beq.n	8012f7a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	7adb      	ldrb	r3, [r3, #11]
 8012f70:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	7a9b      	ldrb	r3, [r3, #10]
 8012f76:	757b      	strb	r3, [r7, #21]
 8012f78:	e003      	b.n	8012f82 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012f7a:	23ff      	movs	r3, #255	; 0xff
 8012f7c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012f82:	7dba      	ldrb	r2, [r7, #22]
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	9302      	str	r3, [sp, #8]
 8012f88:	2306      	movs	r3, #6
 8012f8a:	9301      	str	r3, [sp, #4]
 8012f8c:	7d7b      	ldrb	r3, [r7, #21]
 8012f8e:	9300      	str	r3, [sp, #0]
 8012f90:	4613      	mov	r3, r2
 8012f92:	683a      	ldr	r2, [r7, #0]
 8012f94:	6879      	ldr	r1, [r7, #4]
 8012f96:	68b8      	ldr	r0, [r7, #8]
 8012f98:	f002 fa60 	bl	801545c <ip4_output_if>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012fa0:	68b8      	ldr	r0, [r7, #8]
 8012fa2:	f7fa fdd5 	bl	800db50 <pbuf_free>
  return err;
 8012fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3718      	adds	r7, #24
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	0801a040 	.word	0x0801a040
 8012fb8:	0801a798 	.word	0x0801a798
 8012fbc:	0801a094 	.word	0x0801a094

08012fc0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012fc0:	b590      	push	{r4, r7, lr}
 8012fc2:	b08b      	sub	sp, #44	; 0x2c
 8012fc4:	af04      	add	r7, sp, #16
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	607a      	str	r2, [r7, #4]
 8012fcc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d106      	bne.n	8012fe2 <tcp_rst+0x22>
 8012fd4:	4b1f      	ldr	r3, [pc, #124]	; (8013054 <tcp_rst+0x94>)
 8012fd6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012fda:	491f      	ldr	r1, [pc, #124]	; (8013058 <tcp_rst+0x98>)
 8012fdc:	481f      	ldr	r0, [pc, #124]	; (801305c <tcp_rst+0x9c>)
 8012fde:	f004 fb5b 	bl	8017698 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d106      	bne.n	8012ff6 <tcp_rst+0x36>
 8012fe8:	4b1a      	ldr	r3, [pc, #104]	; (8013054 <tcp_rst+0x94>)
 8012fea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012fee:	491c      	ldr	r1, [pc, #112]	; (8013060 <tcp_rst+0xa0>)
 8012ff0:	481a      	ldr	r0, [pc, #104]	; (801305c <tcp_rst+0x9c>)
 8012ff2:	f004 fb51 	bl	8017698 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012ffa:	f246 0308 	movw	r3, #24584	; 0x6008
 8012ffe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013000:	7dfb      	ldrb	r3, [r7, #23]
 8013002:	b29c      	uxth	r4, r3
 8013004:	68b8      	ldr	r0, [r7, #8]
 8013006:	f7f9 fa5a 	bl	800c4be <lwip_htonl>
 801300a:	4602      	mov	r2, r0
 801300c:	8abb      	ldrh	r3, [r7, #20]
 801300e:	9303      	str	r3, [sp, #12]
 8013010:	2314      	movs	r3, #20
 8013012:	9302      	str	r3, [sp, #8]
 8013014:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013016:	9301      	str	r3, [sp, #4]
 8013018:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801301a:	9300      	str	r3, [sp, #0]
 801301c:	4613      	mov	r3, r2
 801301e:	2200      	movs	r2, #0
 8013020:	4621      	mov	r1, r4
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7ff fe94 	bl	8012d50 <tcp_output_alloc_header_common>
 8013028:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d00c      	beq.n	801304a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013030:	7dfb      	ldrb	r3, [r7, #23]
 8013032:	2200      	movs	r2, #0
 8013034:	6939      	ldr	r1, [r7, #16]
 8013036:	68f8      	ldr	r0, [r7, #12]
 8013038:	f7ff ff3a 	bl	8012eb0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801303e:	683a      	ldr	r2, [r7, #0]
 8013040:	6939      	ldr	r1, [r7, #16]
 8013042:	68f8      	ldr	r0, [r7, #12]
 8013044:	f7ff ff72 	bl	8012f2c <tcp_output_control_segment>
 8013048:	e000      	b.n	801304c <tcp_rst+0x8c>
    return;
 801304a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801304c:	371c      	adds	r7, #28
 801304e:	46bd      	mov	sp, r7
 8013050:	bd90      	pop	{r4, r7, pc}
 8013052:	bf00      	nop
 8013054:	0801a040 	.word	0x0801a040
 8013058:	0801a7c4 	.word	0x0801a7c4
 801305c:	0801a094 	.word	0x0801a094
 8013060:	0801a7e0 	.word	0x0801a7e0

08013064 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013064:	b590      	push	{r4, r7, lr}
 8013066:	b087      	sub	sp, #28
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013070:	2300      	movs	r3, #0
 8013072:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d106      	bne.n	8013088 <tcp_send_empty_ack+0x24>
 801307a:	4b28      	ldr	r3, [pc, #160]	; (801311c <tcp_send_empty_ack+0xb8>)
 801307c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013080:	4927      	ldr	r1, [pc, #156]	; (8013120 <tcp_send_empty_ack+0xbc>)
 8013082:	4828      	ldr	r0, [pc, #160]	; (8013124 <tcp_send_empty_ack+0xc0>)
 8013084:	f004 fb08 	bl	8017698 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013088:	7dfb      	ldrb	r3, [r7, #23]
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	b2db      	uxtb	r3, r3
 801308e:	f003 0304 	and.w	r3, r3, #4
 8013092:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013094:	7d7b      	ldrb	r3, [r7, #21]
 8013096:	b29c      	uxth	r4, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801309c:	4618      	mov	r0, r3
 801309e:	f7f9 fa0e 	bl	800c4be <lwip_htonl>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2200      	movs	r2, #0
 80130a6:	4621      	mov	r1, r4
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f7ff fec3 	bl	8012e34 <tcp_output_alloc_header>
 80130ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d109      	bne.n	80130ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	8b5b      	ldrh	r3, [r3, #26]
 80130ba:	f043 0303 	orr.w	r3, r3, #3
 80130be:	b29a      	uxth	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80130c4:	f06f 0301 	mvn.w	r3, #1
 80130c8:	e023      	b.n	8013112 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80130ca:	7dbb      	ldrb	r3, [r7, #22]
 80130cc:	7dfa      	ldrb	r2, [r7, #23]
 80130ce:	6939      	ldr	r1, [r7, #16]
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7ff feed 	bl	8012eb0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	3304      	adds	r3, #4
 80130dc:	6939      	ldr	r1, [r7, #16]
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7ff ff24 	bl	8012f2c <tcp_output_control_segment>
 80130e4:	4603      	mov	r3, r0
 80130e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80130e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d007      	beq.n	8013100 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	8b5b      	ldrh	r3, [r3, #26]
 80130f4:	f043 0303 	orr.w	r3, r3, #3
 80130f8:	b29a      	uxth	r2, r3
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	835a      	strh	r2, [r3, #26]
 80130fe:	e006      	b.n	801310e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	8b5b      	ldrh	r3, [r3, #26]
 8013104:	f023 0303 	bic.w	r3, r3, #3
 8013108:	b29a      	uxth	r2, r3
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801310e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013112:	4618      	mov	r0, r3
 8013114:	371c      	adds	r7, #28
 8013116:	46bd      	mov	sp, r7
 8013118:	bd90      	pop	{r4, r7, pc}
 801311a:	bf00      	nop
 801311c:	0801a040 	.word	0x0801a040
 8013120:	0801a7fc 	.word	0x0801a7fc
 8013124:	0801a094 	.word	0x0801a094

08013128 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013128:	b590      	push	{r4, r7, lr}
 801312a:	b087      	sub	sp, #28
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013130:	2300      	movs	r3, #0
 8013132:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d106      	bne.n	8013148 <tcp_keepalive+0x20>
 801313a:	4b18      	ldr	r3, [pc, #96]	; (801319c <tcp_keepalive+0x74>)
 801313c:	f640 0224 	movw	r2, #2084	; 0x824
 8013140:	4917      	ldr	r1, [pc, #92]	; (80131a0 <tcp_keepalive+0x78>)
 8013142:	4818      	ldr	r0, [pc, #96]	; (80131a4 <tcp_keepalive+0x7c>)
 8013144:	f004 faa8 	bl	8017698 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013148:	7dfb      	ldrb	r3, [r7, #23]
 801314a:	b29c      	uxth	r4, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013150:	3b01      	subs	r3, #1
 8013152:	4618      	mov	r0, r3
 8013154:	f7f9 f9b3 	bl	800c4be <lwip_htonl>
 8013158:	4603      	mov	r3, r0
 801315a:	2200      	movs	r2, #0
 801315c:	4621      	mov	r1, r4
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7ff fe68 	bl	8012e34 <tcp_output_alloc_header>
 8013164:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d102      	bne.n	8013172 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801316c:	f04f 33ff 	mov.w	r3, #4294967295
 8013170:	e010      	b.n	8013194 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013172:	7dfb      	ldrb	r3, [r7, #23]
 8013174:	2200      	movs	r2, #0
 8013176:	6939      	ldr	r1, [r7, #16]
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7ff fe99 	bl	8012eb0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	3304      	adds	r3, #4
 8013184:	6939      	ldr	r1, [r7, #16]
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff fed0 	bl	8012f2c <tcp_output_control_segment>
 801318c:	4603      	mov	r3, r0
 801318e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013194:	4618      	mov	r0, r3
 8013196:	371c      	adds	r7, #28
 8013198:	46bd      	mov	sp, r7
 801319a:	bd90      	pop	{r4, r7, pc}
 801319c:	0801a040 	.word	0x0801a040
 80131a0:	0801a81c 	.word	0x0801a81c
 80131a4:	0801a094 	.word	0x0801a094

080131a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80131a8:	b590      	push	{r4, r7, lr}
 80131aa:	b08b      	sub	sp, #44	; 0x2c
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80131b0:	2300      	movs	r3, #0
 80131b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d106      	bne.n	80131ca <tcp_zero_window_probe+0x22>
 80131bc:	4b4c      	ldr	r3, [pc, #304]	; (80132f0 <tcp_zero_window_probe+0x148>)
 80131be:	f640 024f 	movw	r2, #2127	; 0x84f
 80131c2:	494c      	ldr	r1, [pc, #304]	; (80132f4 <tcp_zero_window_probe+0x14c>)
 80131c4:	484c      	ldr	r0, [pc, #304]	; (80132f8 <tcp_zero_window_probe+0x150>)
 80131c6:	f004 fa67 	bl	8017698 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80131d0:	6a3b      	ldr	r3, [r7, #32]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d101      	bne.n	80131da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80131d6:	2300      	movs	r3, #0
 80131d8:	e086      	b.n	80132e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80131e0:	2bff      	cmp	r3, #255	; 0xff
 80131e2:	d007      	beq.n	80131f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80131ea:	3301      	adds	r3, #1
 80131ec:	b2da      	uxtb	r2, r3
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	68db      	ldr	r3, [r3, #12]
 80131f8:	899b      	ldrh	r3, [r3, #12]
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f9 f949 	bl	800c494 <lwip_htons>
 8013202:	4603      	mov	r3, r0
 8013204:	b2db      	uxtb	r3, r3
 8013206:	f003 0301 	and.w	r3, r3, #1
 801320a:	2b00      	cmp	r3, #0
 801320c:	d005      	beq.n	801321a <tcp_zero_window_probe+0x72>
 801320e:	6a3b      	ldr	r3, [r7, #32]
 8013210:	891b      	ldrh	r3, [r3, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <tcp_zero_window_probe+0x72>
 8013216:	2301      	movs	r3, #1
 8013218:	e000      	b.n	801321c <tcp_zero_window_probe+0x74>
 801321a:	2300      	movs	r3, #0
 801321c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801321e:	7ffb      	ldrb	r3, [r7, #31]
 8013220:	2b00      	cmp	r3, #0
 8013222:	bf0c      	ite	eq
 8013224:	2301      	moveq	r3, #1
 8013226:	2300      	movne	r3, #0
 8013228:	b2db      	uxtb	r3, r3
 801322a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801322c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013230:	b299      	uxth	r1, r3
 8013232:	6a3b      	ldr	r3, [r7, #32]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	8bba      	ldrh	r2, [r7, #28]
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fdfa 	bl	8012e34 <tcp_output_alloc_header>
 8013240:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d102      	bne.n	801324e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013248:	f04f 33ff 	mov.w	r3, #4294967295
 801324c:	e04c      	b.n	80132e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013254:	7ffb      	ldrb	r3, [r7, #31]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d011      	beq.n	801327e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	899b      	ldrh	r3, [r3, #12]
 801325e:	b29b      	uxth	r3, r3
 8013260:	b21b      	sxth	r3, r3
 8013262:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013266:	b21c      	sxth	r4, r3
 8013268:	2011      	movs	r0, #17
 801326a:	f7f9 f913 	bl	800c494 <lwip_htons>
 801326e:	4603      	mov	r3, r0
 8013270:	b21b      	sxth	r3, r3
 8013272:	4323      	orrs	r3, r4
 8013274:	b21b      	sxth	r3, r3
 8013276:	b29a      	uxth	r2, r3
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	819a      	strh	r2, [r3, #12]
 801327c:	e010      	b.n	80132a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	3314      	adds	r3, #20
 8013284:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013286:	6a3b      	ldr	r3, [r7, #32]
 8013288:	6858      	ldr	r0, [r3, #4]
 801328a:	6a3b      	ldr	r3, [r7, #32]
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	891a      	ldrh	r2, [r3, #8]
 8013290:	6a3b      	ldr	r3, [r7, #32]
 8013292:	891b      	ldrh	r3, [r3, #8]
 8013294:	1ad3      	subs	r3, r2, r3
 8013296:	b29b      	uxth	r3, r3
 8013298:	2201      	movs	r2, #1
 801329a:	6939      	ldr	r1, [r7, #16]
 801329c:	f7fa fe52 	bl	800df44 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80132a0:	6a3b      	ldr	r3, [r7, #32]
 80132a2:	68db      	ldr	r3, [r3, #12]
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7f9 f909 	bl	800c4be <lwip_htonl>
 80132ac:	4603      	mov	r3, r0
 80132ae:	3301      	adds	r3, #1
 80132b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	1ad3      	subs	r3, r2, r3
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	da02      	bge.n	80132c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80132c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132c8:	2200      	movs	r2, #0
 80132ca:	69b9      	ldr	r1, [r7, #24]
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7ff fdef 	bl	8012eb0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	3304      	adds	r3, #4
 80132d8:	69b9      	ldr	r1, [r7, #24]
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7ff fe26 	bl	8012f2c <tcp_output_control_segment>
 80132e0:	4603      	mov	r3, r0
 80132e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80132e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	372c      	adds	r7, #44	; 0x2c
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd90      	pop	{r4, r7, pc}
 80132f0:	0801a040 	.word	0x0801a040
 80132f4:	0801a838 	.word	0x0801a838
 80132f8:	0801a094 	.word	0x0801a094

080132fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013304:	f7fa ff0c 	bl	800e120 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013308:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <tcpip_tcp_timer+0x38>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d103      	bne.n	8013318 <tcpip_tcp_timer+0x1c>
 8013310:	4b09      	ldr	r3, [pc, #36]	; (8013338 <tcpip_tcp_timer+0x3c>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d005      	beq.n	8013324 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013318:	2200      	movs	r2, #0
 801331a:	4908      	ldr	r1, [pc, #32]	; (801333c <tcpip_tcp_timer+0x40>)
 801331c:	20fa      	movs	r0, #250	; 0xfa
 801331e:	f000 f8f3 	bl	8013508 <sys_timeout>
 8013322:	e003      	b.n	801332c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013324:	4b06      	ldr	r3, [pc, #24]	; (8013340 <tcpip_tcp_timer+0x44>)
 8013326:	2200      	movs	r2, #0
 8013328:	601a      	str	r2, [r3, #0]
  }
}
 801332a:	bf00      	nop
 801332c:	bf00      	nop
 801332e:	3708      	adds	r7, #8
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	200089a0 	.word	0x200089a0
 8013338:	200089a4 	.word	0x200089a4
 801333c:	080132fd 	.word	0x080132fd
 8013340:	200089ec 	.word	0x200089ec

08013344 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013348:	4b0a      	ldr	r3, [pc, #40]	; (8013374 <tcp_timer_needed+0x30>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d10f      	bne.n	8013370 <tcp_timer_needed+0x2c>
 8013350:	4b09      	ldr	r3, [pc, #36]	; (8013378 <tcp_timer_needed+0x34>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d103      	bne.n	8013360 <tcp_timer_needed+0x1c>
 8013358:	4b08      	ldr	r3, [pc, #32]	; (801337c <tcp_timer_needed+0x38>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d007      	beq.n	8013370 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013360:	4b04      	ldr	r3, [pc, #16]	; (8013374 <tcp_timer_needed+0x30>)
 8013362:	2201      	movs	r2, #1
 8013364:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013366:	2200      	movs	r2, #0
 8013368:	4905      	ldr	r1, [pc, #20]	; (8013380 <tcp_timer_needed+0x3c>)
 801336a:	20fa      	movs	r0, #250	; 0xfa
 801336c:	f000 f8cc 	bl	8013508 <sys_timeout>
  }
}
 8013370:	bf00      	nop
 8013372:	bd80      	pop	{r7, pc}
 8013374:	200089ec 	.word	0x200089ec
 8013378:	200089a0 	.word	0x200089a0
 801337c:	200089a4 	.word	0x200089a4
 8013380:	080132fd 	.word	0x080132fd

08013384 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b086      	sub	sp, #24
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013390:	2006      	movs	r0, #6
 8013392:	f7f9 fcf7 	bl	800cd84 <memp_malloc>
 8013396:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d109      	bne.n	80133b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d151      	bne.n	8013448 <sys_timeout_abs+0xc4>
 80133a4:	4b2a      	ldr	r3, [pc, #168]	; (8013450 <sys_timeout_abs+0xcc>)
 80133a6:	22be      	movs	r2, #190	; 0xbe
 80133a8:	492a      	ldr	r1, [pc, #168]	; (8013454 <sys_timeout_abs+0xd0>)
 80133aa:	482b      	ldr	r0, [pc, #172]	; (8013458 <sys_timeout_abs+0xd4>)
 80133ac:	f004 f974 	bl	8017698 <iprintf>
    return;
 80133b0:	e04a      	b.n	8013448 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	2200      	movs	r2, #0
 80133b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	68ba      	ldr	r2, [r7, #8]
 80133bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	68fa      	ldr	r2, [r7, #12]
 80133c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80133ca:	4b24      	ldr	r3, [pc, #144]	; (801345c <sys_timeout_abs+0xd8>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d103      	bne.n	80133da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80133d2:	4a22      	ldr	r2, [pc, #136]	; (801345c <sys_timeout_abs+0xd8>)
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	6013      	str	r3, [r2, #0]
    return;
 80133d8:	e037      	b.n	801344a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	685a      	ldr	r2, [r3, #4]
 80133de:	4b1f      	ldr	r3, [pc, #124]	; (801345c <sys_timeout_abs+0xd8>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	0fdb      	lsrs	r3, r3, #31
 80133e8:	f003 0301 	and.w	r3, r3, #1
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d007      	beq.n	8013402 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80133f2:	4b1a      	ldr	r3, [pc, #104]	; (801345c <sys_timeout_abs+0xd8>)
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80133fa:	4a18      	ldr	r2, [pc, #96]	; (801345c <sys_timeout_abs+0xd8>)
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	6013      	str	r3, [r2, #0]
 8013400:	e023      	b.n	801344a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013402:	4b16      	ldr	r3, [pc, #88]	; (801345c <sys_timeout_abs+0xd8>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	617b      	str	r3, [r7, #20]
 8013408:	e01a      	b.n	8013440 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00b      	beq.n	801342a <sys_timeout_abs+0xa6>
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	685a      	ldr	r2, [r3, #4]
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	0fdb      	lsrs	r3, r3, #31
 8013420:	f003 0301 	and.w	r3, r3, #1
 8013424:	b2db      	uxtb	r3, r3
 8013426:	2b00      	cmp	r3, #0
 8013428:	d007      	beq.n	801343a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	681a      	ldr	r2, [r3, #0]
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	693a      	ldr	r2, [r7, #16]
 8013436:	601a      	str	r2, [r3, #0]
        break;
 8013438:	e007      	b.n	801344a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d1e1      	bne.n	801340a <sys_timeout_abs+0x86>
 8013446:	e000      	b.n	801344a <sys_timeout_abs+0xc6>
    return;
 8013448:	bf00      	nop
      }
    }
  }
}
 801344a:	3718      	adds	r7, #24
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}
 8013450:	0801a85c 	.word	0x0801a85c
 8013454:	0801a890 	.word	0x0801a890
 8013458:	0801a8d0 	.word	0x0801a8d0
 801345c:	200089e4 	.word	0x200089e4

08013460 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b086      	sub	sp, #24
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	4798      	blx	r3

  now = sys_now();
 8013472:	f7f8 fdfb 	bl	800c06c <sys_now>
 8013476:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	4b0f      	ldr	r3, [pc, #60]	; (80134bc <lwip_cyclic_timer+0x5c>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	4413      	add	r3, r2
 8013482:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	0fdb      	lsrs	r3, r3, #31
 801348c:	f003 0301 	and.w	r3, r3, #1
 8013490:	b2db      	uxtb	r3, r3
 8013492:	2b00      	cmp	r3, #0
 8013494:	d009      	beq.n	80134aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	4413      	add	r3, r2
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	4907      	ldr	r1, [pc, #28]	; (80134c0 <lwip_cyclic_timer+0x60>)
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff ff6e 	bl	8013384 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80134a8:	e004      	b.n	80134b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	4904      	ldr	r1, [pc, #16]	; (80134c0 <lwip_cyclic_timer+0x60>)
 80134ae:	68f8      	ldr	r0, [r7, #12]
 80134b0:	f7ff ff68 	bl	8013384 <sys_timeout_abs>
}
 80134b4:	bf00      	nop
 80134b6:	3718      	adds	r7, #24
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	200089e8 	.word	0x200089e8
 80134c0:	08013461 	.word	0x08013461

080134c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80134ca:	2301      	movs	r3, #1
 80134cc:	607b      	str	r3, [r7, #4]
 80134ce:	e00e      	b.n	80134ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80134d0:	4a0b      	ldr	r2, [pc, #44]	; (8013500 <sys_timeouts_init+0x3c>)
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	00db      	lsls	r3, r3, #3
 80134dc:	4a08      	ldr	r2, [pc, #32]	; (8013500 <sys_timeouts_init+0x3c>)
 80134de:	4413      	add	r3, r2
 80134e0:	461a      	mov	r2, r3
 80134e2:	4908      	ldr	r1, [pc, #32]	; (8013504 <sys_timeouts_init+0x40>)
 80134e4:	f000 f810 	bl	8013508 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	3301      	adds	r3, #1
 80134ec:	607b      	str	r3, [r7, #4]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2b02      	cmp	r3, #2
 80134f2:	d9ed      	bls.n	80134d0 <sys_timeouts_init+0xc>
  }
}
 80134f4:	bf00      	nop
 80134f6:	bf00      	nop
 80134f8:	3708      	adds	r7, #8
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	bf00      	nop
 8013500:	0801b6dc 	.word	0x0801b6dc
 8013504:	08013461 	.word	0x08013461

08013508 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b086      	sub	sp, #24
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801351a:	d306      	bcc.n	801352a <sys_timeout+0x22>
 801351c:	4b0a      	ldr	r3, [pc, #40]	; (8013548 <sys_timeout+0x40>)
 801351e:	f240 1229 	movw	r2, #297	; 0x129
 8013522:	490a      	ldr	r1, [pc, #40]	; (801354c <sys_timeout+0x44>)
 8013524:	480a      	ldr	r0, [pc, #40]	; (8013550 <sys_timeout+0x48>)
 8013526:	f004 f8b7 	bl	8017698 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801352a:	f7f8 fd9f 	bl	800c06c <sys_now>
 801352e:	4602      	mov	r2, r0
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	4413      	add	r3, r2
 8013534:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	68b9      	ldr	r1, [r7, #8]
 801353a:	6978      	ldr	r0, [r7, #20]
 801353c:	f7ff ff22 	bl	8013384 <sys_timeout_abs>
#endif
}
 8013540:	bf00      	nop
 8013542:	3718      	adds	r7, #24
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	0801a85c 	.word	0x0801a85c
 801354c:	0801a8f8 	.word	0x0801a8f8
 8013550:	0801a8d0 	.word	0x0801a8d0

08013554 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801355a:	f7f8 fd87 	bl	800c06c <sys_now>
 801355e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013560:	4b1a      	ldr	r3, [pc, #104]	; (80135cc <sys_check_timeouts+0x78>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	b2db      	uxtb	r3, r3
 8013566:	2b00      	cmp	r3, #0
 8013568:	d001      	beq.n	801356e <sys_check_timeouts+0x1a>
 801356a:	f7f9 ffb7 	bl	800d4dc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801356e:	4b18      	ldr	r3, [pc, #96]	; (80135d0 <sys_check_timeouts+0x7c>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d022      	beq.n	80135c0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	1ad3      	subs	r3, r2, r3
 8013582:	0fdb      	lsrs	r3, r3, #31
 8013584:	f003 0301 	and.w	r3, r3, #1
 8013588:	b2db      	uxtb	r3, r3
 801358a:	2b00      	cmp	r3, #0
 801358c:	d11a      	bne.n	80135c4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	4a0f      	ldr	r2, [pc, #60]	; (80135d0 <sys_check_timeouts+0x7c>)
 8013594:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	689b      	ldr	r3, [r3, #8]
 801359a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	68db      	ldr	r3, [r3, #12]
 80135a0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	4a0b      	ldr	r2, [pc, #44]	; (80135d4 <sys_check_timeouts+0x80>)
 80135a8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80135aa:	68b9      	ldr	r1, [r7, #8]
 80135ac:	2006      	movs	r0, #6
 80135ae:	f7f9 fc59 	bl	800ce64 <memp_free>
    if (handler != NULL) {
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d0d3      	beq.n	8013560 <sys_check_timeouts+0xc>
      handler(arg);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6838      	ldr	r0, [r7, #0]
 80135bc:	4798      	blx	r3
  do {
 80135be:	e7cf      	b.n	8013560 <sys_check_timeouts+0xc>
      return;
 80135c0:	bf00      	nop
 80135c2:	e000      	b.n	80135c6 <sys_check_timeouts+0x72>
      return;
 80135c4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80135c6:	3710      	adds	r7, #16
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	20008991 	.word	0x20008991
 80135d0:	200089e4 	.word	0x200089e4
 80135d4:	200089e8 	.word	0x200089e8

080135d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80135dc:	f003 fed0 	bl	8017380 <rand>
 80135e0:	4603      	mov	r3, r0
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80135ee:	b29a      	uxth	r2, r3
 80135f0:	4b01      	ldr	r3, [pc, #4]	; (80135f8 <udp_init+0x20>)
 80135f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80135f4:	bf00      	nop
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	20000028 	.word	0x20000028

080135fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b083      	sub	sp, #12
 8013600:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013602:	2300      	movs	r3, #0
 8013604:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013606:	4b17      	ldr	r3, [pc, #92]	; (8013664 <udp_new_port+0x68>)
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	1c5a      	adds	r2, r3, #1
 801360c:	b291      	uxth	r1, r2
 801360e:	4a15      	ldr	r2, [pc, #84]	; (8013664 <udp_new_port+0x68>)
 8013610:	8011      	strh	r1, [r2, #0]
 8013612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013616:	4293      	cmp	r3, r2
 8013618:	d103      	bne.n	8013622 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801361a:	4b12      	ldr	r3, [pc, #72]	; (8013664 <udp_new_port+0x68>)
 801361c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013620:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013622:	4b11      	ldr	r3, [pc, #68]	; (8013668 <udp_new_port+0x6c>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	603b      	str	r3, [r7, #0]
 8013628:	e011      	b.n	801364e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	8a5a      	ldrh	r2, [r3, #18]
 801362e:	4b0d      	ldr	r3, [pc, #52]	; (8013664 <udp_new_port+0x68>)
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	429a      	cmp	r2, r3
 8013634:	d108      	bne.n	8013648 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013636:	88fb      	ldrh	r3, [r7, #6]
 8013638:	3301      	adds	r3, #1
 801363a:	80fb      	strh	r3, [r7, #6]
 801363c:	88fb      	ldrh	r3, [r7, #6]
 801363e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013642:	d3e0      	bcc.n	8013606 <udp_new_port+0xa>
        return 0;
 8013644:	2300      	movs	r3, #0
 8013646:	e007      	b.n	8013658 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	603b      	str	r3, [r7, #0]
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d1ea      	bne.n	801362a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013654:	4b03      	ldr	r3, [pc, #12]	; (8013664 <udp_new_port+0x68>)
 8013656:	881b      	ldrh	r3, [r3, #0]
}
 8013658:	4618      	mov	r0, r3
 801365a:	370c      	adds	r7, #12
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr
 8013664:	20000028 	.word	0x20000028
 8013668:	200089f0 	.word	0x200089f0

0801366c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b084      	sub	sp, #16
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	4613      	mov	r3, r2
 8013678:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d105      	bne.n	801368c <udp_input_local_match+0x20>
 8013680:	4b27      	ldr	r3, [pc, #156]	; (8013720 <udp_input_local_match+0xb4>)
 8013682:	2287      	movs	r2, #135	; 0x87
 8013684:	4927      	ldr	r1, [pc, #156]	; (8013724 <udp_input_local_match+0xb8>)
 8013686:	4828      	ldr	r0, [pc, #160]	; (8013728 <udp_input_local_match+0xbc>)
 8013688:	f004 f806 	bl	8017698 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d105      	bne.n	801369e <udp_input_local_match+0x32>
 8013692:	4b23      	ldr	r3, [pc, #140]	; (8013720 <udp_input_local_match+0xb4>)
 8013694:	2288      	movs	r2, #136	; 0x88
 8013696:	4925      	ldr	r1, [pc, #148]	; (801372c <udp_input_local_match+0xc0>)
 8013698:	4823      	ldr	r0, [pc, #140]	; (8013728 <udp_input_local_match+0xbc>)
 801369a:	f003 fffd 	bl	8017698 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	7a1b      	ldrb	r3, [r3, #8]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d00b      	beq.n	80136be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	7a1a      	ldrb	r2, [r3, #8]
 80136aa:	4b21      	ldr	r3, [pc, #132]	; (8013730 <udp_input_local_match+0xc4>)
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136b2:	3301      	adds	r3, #1
 80136b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d001      	beq.n	80136be <udp_input_local_match+0x52>
    return 0;
 80136ba:	2300      	movs	r3, #0
 80136bc:	e02b      	b.n	8013716 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80136be:	79fb      	ldrb	r3, [r7, #7]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d018      	beq.n	80136f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d013      	beq.n	80136f2 <udp_input_local_match+0x86>
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d00f      	beq.n	80136f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80136d2:	4b17      	ldr	r3, [pc, #92]	; (8013730 <udp_input_local_match+0xc4>)
 80136d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136da:	d00a      	beq.n	80136f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681a      	ldr	r2, [r3, #0]
 80136e0:	4b13      	ldr	r3, [pc, #76]	; (8013730 <udp_input_local_match+0xc4>)
 80136e2:	695b      	ldr	r3, [r3, #20]
 80136e4:	405a      	eors	r2, r3
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	3308      	adds	r3, #8
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d110      	bne.n	8013714 <udp_input_local_match+0xa8>
          return 1;
 80136f2:	2301      	movs	r3, #1
 80136f4:	e00f      	b.n	8013716 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d009      	beq.n	8013710 <udp_input_local_match+0xa4>
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d005      	beq.n	8013710 <udp_input_local_match+0xa4>
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	4b09      	ldr	r3, [pc, #36]	; (8013730 <udp_input_local_match+0xc4>)
 801370a:	695b      	ldr	r3, [r3, #20]
 801370c:	429a      	cmp	r2, r3
 801370e:	d101      	bne.n	8013714 <udp_input_local_match+0xa8>
        return 1;
 8013710:	2301      	movs	r3, #1
 8013712:	e000      	b.n	8013716 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013714:	2300      	movs	r3, #0
}
 8013716:	4618      	mov	r0, r3
 8013718:	3710      	adds	r7, #16
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	0801a944 	.word	0x0801a944
 8013724:	0801a974 	.word	0x0801a974
 8013728:	0801a998 	.word	0x0801a998
 801372c:	0801a9c0 	.word	0x0801a9c0
 8013730:	20005424 	.word	0x20005424

08013734 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013734:	b590      	push	{r4, r7, lr}
 8013736:	b08d      	sub	sp, #52	; 0x34
 8013738:	af02      	add	r7, sp, #8
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801373e:	2300      	movs	r3, #0
 8013740:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d105      	bne.n	8013754 <udp_input+0x20>
 8013748:	4b7c      	ldr	r3, [pc, #496]	; (801393c <udp_input+0x208>)
 801374a:	22cf      	movs	r2, #207	; 0xcf
 801374c:	497c      	ldr	r1, [pc, #496]	; (8013940 <udp_input+0x20c>)
 801374e:	487d      	ldr	r0, [pc, #500]	; (8013944 <udp_input+0x210>)
 8013750:	f003 ffa2 	bl	8017698 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d105      	bne.n	8013766 <udp_input+0x32>
 801375a:	4b78      	ldr	r3, [pc, #480]	; (801393c <udp_input+0x208>)
 801375c:	22d0      	movs	r2, #208	; 0xd0
 801375e:	497a      	ldr	r1, [pc, #488]	; (8013948 <udp_input+0x214>)
 8013760:	4878      	ldr	r0, [pc, #480]	; (8013944 <udp_input+0x210>)
 8013762:	f003 ff99 	bl	8017698 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	895b      	ldrh	r3, [r3, #10]
 801376a:	2b07      	cmp	r3, #7
 801376c:	d803      	bhi.n	8013776 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f7fa f9ee 	bl	800db50 <pbuf_free>
    goto end;
 8013774:	e0de      	b.n	8013934 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801377c:	4b73      	ldr	r3, [pc, #460]	; (801394c <udp_input+0x218>)
 801377e:	695b      	ldr	r3, [r3, #20]
 8013780:	4a72      	ldr	r2, [pc, #456]	; (801394c <udp_input+0x218>)
 8013782:	6812      	ldr	r2, [r2, #0]
 8013784:	4611      	mov	r1, r2
 8013786:	4618      	mov	r0, r3
 8013788:	f001 ff40 	bl	801560c <ip4_addr_isbroadcast_u32>
 801378c:	4603      	mov	r3, r0
 801378e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	881b      	ldrh	r3, [r3, #0]
 8013794:	b29b      	uxth	r3, r3
 8013796:	4618      	mov	r0, r3
 8013798:	f7f8 fe7c 	bl	800c494 <lwip_htons>
 801379c:	4603      	mov	r3, r0
 801379e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	885b      	ldrh	r3, [r3, #2]
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7f8 fe74 	bl	800c494 <lwip_htons>
 80137ac:	4603      	mov	r3, r0
 80137ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80137b0:	2300      	movs	r3, #0
 80137b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80137b4:	2300      	movs	r3, #0
 80137b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80137b8:	2300      	movs	r3, #0
 80137ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137bc:	4b64      	ldr	r3, [pc, #400]	; (8013950 <udp_input+0x21c>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	627b      	str	r3, [r7, #36]	; 0x24
 80137c2:	e054      	b.n	801386e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	8a5b      	ldrh	r3, [r3, #18]
 80137c8:	89fa      	ldrh	r2, [r7, #14]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d14a      	bne.n	8013864 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80137ce:	7cfb      	ldrb	r3, [r7, #19]
 80137d0:	461a      	mov	r2, r3
 80137d2:	6839      	ldr	r1, [r7, #0]
 80137d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137d6:	f7ff ff49 	bl	801366c <udp_input_local_match>
 80137da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d041      	beq.n	8013864 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80137e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e2:	7c1b      	ldrb	r3, [r3, #16]
 80137e4:	f003 0304 	and.w	r3, r3, #4
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d11d      	bne.n	8013828 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80137ec:	69fb      	ldr	r3, [r7, #28]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d102      	bne.n	80137f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80137f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f4:	61fb      	str	r3, [r7, #28]
 80137f6:	e017      	b.n	8013828 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80137f8:	7cfb      	ldrb	r3, [r7, #19]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d014      	beq.n	8013828 <udp_input+0xf4>
 80137fe:	4b53      	ldr	r3, [pc, #332]	; (801394c <udp_input+0x218>)
 8013800:	695b      	ldr	r3, [r3, #20]
 8013802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013806:	d10f      	bne.n	8013828 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	681a      	ldr	r2, [r3, #0]
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	3304      	adds	r3, #4
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	429a      	cmp	r2, r3
 8013814:	d008      	beq.n	8013828 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	3304      	adds	r3, #4
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	429a      	cmp	r2, r3
 8013822:	d101      	bne.n	8013828 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013826:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382a:	8a9b      	ldrh	r3, [r3, #20]
 801382c:	8a3a      	ldrh	r2, [r7, #16]
 801382e:	429a      	cmp	r2, r3
 8013830:	d118      	bne.n	8013864 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013834:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013836:	2b00      	cmp	r3, #0
 8013838:	d005      	beq.n	8013846 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	685a      	ldr	r2, [r3, #4]
 801383e:	4b43      	ldr	r3, [pc, #268]	; (801394c <udp_input+0x218>)
 8013840:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013842:	429a      	cmp	r2, r3
 8013844:	d10e      	bne.n	8013864 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013846:	6a3b      	ldr	r3, [r7, #32]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d014      	beq.n	8013876 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	68da      	ldr	r2, [r3, #12]
 8013850:	6a3b      	ldr	r3, [r7, #32]
 8013852:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013854:	4b3e      	ldr	r3, [pc, #248]	; (8013950 <udp_input+0x21c>)
 8013856:	681a      	ldr	r2, [r3, #0]
 8013858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801385c:	4a3c      	ldr	r2, [pc, #240]	; (8013950 <udp_input+0x21c>)
 801385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013860:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013862:	e008      	b.n	8013876 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013866:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	627b      	str	r3, [r7, #36]	; 0x24
 801386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013870:	2b00      	cmp	r3, #0
 8013872:	d1a7      	bne.n	80137c4 <udp_input+0x90>
 8013874:	e000      	b.n	8013878 <udp_input+0x144>
        break;
 8013876:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387a:	2b00      	cmp	r3, #0
 801387c:	d101      	bne.n	8013882 <udp_input+0x14e>
    pcb = uncon_pcb;
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013884:	2b00      	cmp	r3, #0
 8013886:	d002      	beq.n	801388e <udp_input+0x15a>
    for_us = 1;
 8013888:	2301      	movs	r3, #1
 801388a:	76fb      	strb	r3, [r7, #27]
 801388c:	e00a      	b.n	80138a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	3304      	adds	r3, #4
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	4b2d      	ldr	r3, [pc, #180]	; (801394c <udp_input+0x218>)
 8013896:	695b      	ldr	r3, [r3, #20]
 8013898:	429a      	cmp	r2, r3
 801389a:	bf0c      	ite	eq
 801389c:	2301      	moveq	r3, #1
 801389e:	2300      	movne	r3, #0
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80138a4:	7efb      	ldrb	r3, [r7, #27]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d041      	beq.n	801392e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80138aa:	2108      	movs	r1, #8
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f7fa f8c9 	bl	800da44 <pbuf_remove_header>
 80138b2:	4603      	mov	r3, r0
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d00a      	beq.n	80138ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80138b8:	4b20      	ldr	r3, [pc, #128]	; (801393c <udp_input+0x208>)
 80138ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80138be:	4925      	ldr	r1, [pc, #148]	; (8013954 <udp_input+0x220>)
 80138c0:	4820      	ldr	r0, [pc, #128]	; (8013944 <udp_input+0x210>)
 80138c2:	f003 fee9 	bl	8017698 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7fa f942 	bl	800db50 <pbuf_free>
      goto end;
 80138cc:	e032      	b.n	8013934 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80138ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d012      	beq.n	80138fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80138d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d6:	699b      	ldr	r3, [r3, #24]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00a      	beq.n	80138f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80138dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138de:	699c      	ldr	r4, [r3, #24]
 80138e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e2:	69d8      	ldr	r0, [r3, #28]
 80138e4:	8a3b      	ldrh	r3, [r7, #16]
 80138e6:	9300      	str	r3, [sp, #0]
 80138e8:	4b1b      	ldr	r3, [pc, #108]	; (8013958 <udp_input+0x224>)
 80138ea:	687a      	ldr	r2, [r7, #4]
 80138ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80138ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80138f0:	e021      	b.n	8013936 <udp_input+0x202>
        pbuf_free(p);
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7fa f92c 	bl	800db50 <pbuf_free>
        goto end;
 80138f8:	e01c      	b.n	8013934 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80138fa:	7cfb      	ldrb	r3, [r7, #19]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d112      	bne.n	8013926 <udp_input+0x1f2>
 8013900:	4b12      	ldr	r3, [pc, #72]	; (801394c <udp_input+0x218>)
 8013902:	695b      	ldr	r3, [r3, #20]
 8013904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013908:	2be0      	cmp	r3, #224	; 0xe0
 801390a:	d00c      	beq.n	8013926 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801390c:	4b0f      	ldr	r3, [pc, #60]	; (801394c <udp_input+0x218>)
 801390e:	899b      	ldrh	r3, [r3, #12]
 8013910:	3308      	adds	r3, #8
 8013912:	b29b      	uxth	r3, r3
 8013914:	b21b      	sxth	r3, r3
 8013916:	4619      	mov	r1, r3
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f7fa f906 	bl	800db2a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801391e:	2103      	movs	r1, #3
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f001 fb53 	bl	8014fcc <icmp_dest_unreach>
      pbuf_free(p);
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7fa f912 	bl	800db50 <pbuf_free>
  return;
 801392c:	e003      	b.n	8013936 <udp_input+0x202>
    pbuf_free(p);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7fa f90e 	bl	800db50 <pbuf_free>
  return;
 8013934:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013936:	372c      	adds	r7, #44	; 0x2c
 8013938:	46bd      	mov	sp, r7
 801393a:	bd90      	pop	{r4, r7, pc}
 801393c:	0801a944 	.word	0x0801a944
 8013940:	0801a9e8 	.word	0x0801a9e8
 8013944:	0801a998 	.word	0x0801a998
 8013948:	0801aa00 	.word	0x0801aa00
 801394c:	20005424 	.word	0x20005424
 8013950:	200089f0 	.word	0x200089f0
 8013954:	0801aa1c 	.word	0x0801aa1c
 8013958:	20005434 	.word	0x20005434

0801395c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b088      	sub	sp, #32
 8013960:	af02      	add	r7, sp, #8
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	607a      	str	r2, [r7, #4]
 8013968:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d109      	bne.n	8013984 <udp_sendto+0x28>
 8013970:	4b23      	ldr	r3, [pc, #140]	; (8013a00 <udp_sendto+0xa4>)
 8013972:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013976:	4923      	ldr	r1, [pc, #140]	; (8013a04 <udp_sendto+0xa8>)
 8013978:	4823      	ldr	r0, [pc, #140]	; (8013a08 <udp_sendto+0xac>)
 801397a:	f003 fe8d 	bl	8017698 <iprintf>
 801397e:	f06f 030f 	mvn.w	r3, #15
 8013982:	e038      	b.n	80139f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d109      	bne.n	801399e <udp_sendto+0x42>
 801398a:	4b1d      	ldr	r3, [pc, #116]	; (8013a00 <udp_sendto+0xa4>)
 801398c:	f240 2219 	movw	r2, #537	; 0x219
 8013990:	491e      	ldr	r1, [pc, #120]	; (8013a0c <udp_sendto+0xb0>)
 8013992:	481d      	ldr	r0, [pc, #116]	; (8013a08 <udp_sendto+0xac>)
 8013994:	f003 fe80 	bl	8017698 <iprintf>
 8013998:	f06f 030f 	mvn.w	r3, #15
 801399c:	e02b      	b.n	80139f6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d109      	bne.n	80139b8 <udp_sendto+0x5c>
 80139a4:	4b16      	ldr	r3, [pc, #88]	; (8013a00 <udp_sendto+0xa4>)
 80139a6:	f240 221a 	movw	r2, #538	; 0x21a
 80139aa:	4919      	ldr	r1, [pc, #100]	; (8013a10 <udp_sendto+0xb4>)
 80139ac:	4816      	ldr	r0, [pc, #88]	; (8013a08 <udp_sendto+0xac>)
 80139ae:	f003 fe73 	bl	8017698 <iprintf>
 80139b2:	f06f 030f 	mvn.w	r3, #15
 80139b6:	e01e      	b.n	80139f6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	7a1b      	ldrb	r3, [r3, #8]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d006      	beq.n	80139ce <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	7a1b      	ldrb	r3, [r3, #8]
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7f9 fd63 	bl	800d490 <netif_get_by_index>
 80139ca:	6178      	str	r0, [r7, #20]
 80139cc:	e003      	b.n	80139d6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f001 fb86 	bl	80150e0 <ip4_route>
 80139d4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d102      	bne.n	80139e2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80139dc:	f06f 0303 	mvn.w	r3, #3
 80139e0:	e009      	b.n	80139f6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80139e2:	887a      	ldrh	r2, [r7, #2]
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	4613      	mov	r3, r2
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	68b9      	ldr	r1, [r7, #8]
 80139ee:	68f8      	ldr	r0, [r7, #12]
 80139f0:	f000 f810 	bl	8013a14 <udp_sendto_if>
 80139f4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3718      	adds	r7, #24
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
 80139fe:	bf00      	nop
 8013a00:	0801a944 	.word	0x0801a944
 8013a04:	0801aa68 	.word	0x0801aa68
 8013a08:	0801a998 	.word	0x0801a998
 8013a0c:	0801aa80 	.word	0x0801aa80
 8013a10:	0801aa9c 	.word	0x0801aa9c

08013a14 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b088      	sub	sp, #32
 8013a18:	af02      	add	r7, sp, #8
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	607a      	str	r2, [r7, #4]
 8013a20:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d109      	bne.n	8013a3c <udp_sendto_if+0x28>
 8013a28:	4b2e      	ldr	r3, [pc, #184]	; (8013ae4 <udp_sendto_if+0xd0>)
 8013a2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a2e:	492e      	ldr	r1, [pc, #184]	; (8013ae8 <udp_sendto_if+0xd4>)
 8013a30:	482e      	ldr	r0, [pc, #184]	; (8013aec <udp_sendto_if+0xd8>)
 8013a32:	f003 fe31 	bl	8017698 <iprintf>
 8013a36:	f06f 030f 	mvn.w	r3, #15
 8013a3a:	e04f      	b.n	8013adc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d109      	bne.n	8013a56 <udp_sendto_if+0x42>
 8013a42:	4b28      	ldr	r3, [pc, #160]	; (8013ae4 <udp_sendto_if+0xd0>)
 8013a44:	f240 2281 	movw	r2, #641	; 0x281
 8013a48:	4929      	ldr	r1, [pc, #164]	; (8013af0 <udp_sendto_if+0xdc>)
 8013a4a:	4828      	ldr	r0, [pc, #160]	; (8013aec <udp_sendto_if+0xd8>)
 8013a4c:	f003 fe24 	bl	8017698 <iprintf>
 8013a50:	f06f 030f 	mvn.w	r3, #15
 8013a54:	e042      	b.n	8013adc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d109      	bne.n	8013a70 <udp_sendto_if+0x5c>
 8013a5c:	4b21      	ldr	r3, [pc, #132]	; (8013ae4 <udp_sendto_if+0xd0>)
 8013a5e:	f240 2282 	movw	r2, #642	; 0x282
 8013a62:	4924      	ldr	r1, [pc, #144]	; (8013af4 <udp_sendto_if+0xe0>)
 8013a64:	4821      	ldr	r0, [pc, #132]	; (8013aec <udp_sendto_if+0xd8>)
 8013a66:	f003 fe17 	bl	8017698 <iprintf>
 8013a6a:	f06f 030f 	mvn.w	r3, #15
 8013a6e:	e035      	b.n	8013adc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013a70:	6a3b      	ldr	r3, [r7, #32]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d109      	bne.n	8013a8a <udp_sendto_if+0x76>
 8013a76:	4b1b      	ldr	r3, [pc, #108]	; (8013ae4 <udp_sendto_if+0xd0>)
 8013a78:	f240 2283 	movw	r2, #643	; 0x283
 8013a7c:	491e      	ldr	r1, [pc, #120]	; (8013af8 <udp_sendto_if+0xe4>)
 8013a7e:	481b      	ldr	r0, [pc, #108]	; (8013aec <udp_sendto_if+0xd8>)
 8013a80:	f003 fe0a 	bl	8017698 <iprintf>
 8013a84:	f06f 030f 	mvn.w	r3, #15
 8013a88:	e028      	b.n	8013adc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d009      	beq.n	8013aa4 <udp_sendto_if+0x90>
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d005      	beq.n	8013aa4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013aa0:	2be0      	cmp	r3, #224	; 0xe0
 8013aa2:	d103      	bne.n	8013aac <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013aa4:	6a3b      	ldr	r3, [r7, #32]
 8013aa6:	3304      	adds	r3, #4
 8013aa8:	617b      	str	r3, [r7, #20]
 8013aaa:	e00b      	b.n	8013ac4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	6a3b      	ldr	r3, [r7, #32]
 8013ab2:	3304      	adds	r3, #4
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d002      	beq.n	8013ac0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013aba:	f06f 0303 	mvn.w	r3, #3
 8013abe:	e00d      	b.n	8013adc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013ac4:	887a      	ldrh	r2, [r7, #2]
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	9301      	str	r3, [sp, #4]
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	9300      	str	r3, [sp, #0]
 8013ace:	4613      	mov	r3, r2
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	68b9      	ldr	r1, [r7, #8]
 8013ad4:	68f8      	ldr	r0, [r7, #12]
 8013ad6:	f000 f811 	bl	8013afc <udp_sendto_if_src>
 8013ada:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3718      	adds	r7, #24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	0801a944 	.word	0x0801a944
 8013ae8:	0801aab8 	.word	0x0801aab8
 8013aec:	0801a998 	.word	0x0801a998
 8013af0:	0801aad4 	.word	0x0801aad4
 8013af4:	0801aaf0 	.word	0x0801aaf0
 8013af8:	0801ab10 	.word	0x0801ab10

08013afc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b08c      	sub	sp, #48	; 0x30
 8013b00:	af04      	add	r7, sp, #16
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
 8013b08:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d109      	bne.n	8013b24 <udp_sendto_if_src+0x28>
 8013b10:	4b65      	ldr	r3, [pc, #404]	; (8013ca8 <udp_sendto_if_src+0x1ac>)
 8013b12:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013b16:	4965      	ldr	r1, [pc, #404]	; (8013cac <udp_sendto_if_src+0x1b0>)
 8013b18:	4865      	ldr	r0, [pc, #404]	; (8013cb0 <udp_sendto_if_src+0x1b4>)
 8013b1a:	f003 fdbd 	bl	8017698 <iprintf>
 8013b1e:	f06f 030f 	mvn.w	r3, #15
 8013b22:	e0bc      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d109      	bne.n	8013b3e <udp_sendto_if_src+0x42>
 8013b2a:	4b5f      	ldr	r3, [pc, #380]	; (8013ca8 <udp_sendto_if_src+0x1ac>)
 8013b2c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013b30:	4960      	ldr	r1, [pc, #384]	; (8013cb4 <udp_sendto_if_src+0x1b8>)
 8013b32:	485f      	ldr	r0, [pc, #380]	; (8013cb0 <udp_sendto_if_src+0x1b4>)
 8013b34:	f003 fdb0 	bl	8017698 <iprintf>
 8013b38:	f06f 030f 	mvn.w	r3, #15
 8013b3c:	e0af      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d109      	bne.n	8013b58 <udp_sendto_if_src+0x5c>
 8013b44:	4b58      	ldr	r3, [pc, #352]	; (8013ca8 <udp_sendto_if_src+0x1ac>)
 8013b46:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013b4a:	495b      	ldr	r1, [pc, #364]	; (8013cb8 <udp_sendto_if_src+0x1bc>)
 8013b4c:	4858      	ldr	r0, [pc, #352]	; (8013cb0 <udp_sendto_if_src+0x1b4>)
 8013b4e:	f003 fda3 	bl	8017698 <iprintf>
 8013b52:	f06f 030f 	mvn.w	r3, #15
 8013b56:	e0a2      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d109      	bne.n	8013b72 <udp_sendto_if_src+0x76>
 8013b5e:	4b52      	ldr	r3, [pc, #328]	; (8013ca8 <udp_sendto_if_src+0x1ac>)
 8013b60:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013b64:	4955      	ldr	r1, [pc, #340]	; (8013cbc <udp_sendto_if_src+0x1c0>)
 8013b66:	4852      	ldr	r0, [pc, #328]	; (8013cb0 <udp_sendto_if_src+0x1b4>)
 8013b68:	f003 fd96 	bl	8017698 <iprintf>
 8013b6c:	f06f 030f 	mvn.w	r3, #15
 8013b70:	e095      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d109      	bne.n	8013b8c <udp_sendto_if_src+0x90>
 8013b78:	4b4b      	ldr	r3, [pc, #300]	; (8013ca8 <udp_sendto_if_src+0x1ac>)
 8013b7a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013b7e:	4950      	ldr	r1, [pc, #320]	; (8013cc0 <udp_sendto_if_src+0x1c4>)
 8013b80:	484b      	ldr	r0, [pc, #300]	; (8013cb0 <udp_sendto_if_src+0x1b4>)
 8013b82:	f003 fd89 	bl	8017698 <iprintf>
 8013b86:	f06f 030f 	mvn.w	r3, #15
 8013b8a:	e088      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	8a5b      	ldrh	r3, [r3, #18]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d10f      	bne.n	8013bb4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013b94:	68f9      	ldr	r1, [r7, #12]
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	8a5b      	ldrh	r3, [r3, #18]
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	68f8      	ldr	r0, [r7, #12]
 8013b9e:	f000 f893 	bl	8013cc8 <udp_bind>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013ba6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d002      	beq.n	8013bb4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013bae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013bb2:	e074      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	891b      	ldrh	r3, [r3, #8]
 8013bb8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	d902      	bls.n	8013bc6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc4:	e06b      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013bc6:	2108      	movs	r1, #8
 8013bc8:	68b8      	ldr	r0, [r7, #8]
 8013bca:	f7f9 ff2b 	bl	800da24 <pbuf_add_header>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d015      	beq.n	8013c00 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013bd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bd8:	2108      	movs	r1, #8
 8013bda:	2022      	movs	r0, #34	; 0x22
 8013bdc:	f7f9 fcd4 	bl	800d588 <pbuf_alloc>
 8013be0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d102      	bne.n	8013bee <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013be8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bec:	e057      	b.n	8013c9e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	891b      	ldrh	r3, [r3, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d006      	beq.n	8013c04 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013bf6:	68b9      	ldr	r1, [r7, #8]
 8013bf8:	69f8      	ldr	r0, [r7, #28]
 8013bfa:	f7fa f8c1 	bl	800dd80 <pbuf_chain>
 8013bfe:	e001      	b.n	8013c04 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	895b      	ldrh	r3, [r3, #10]
 8013c08:	2b07      	cmp	r3, #7
 8013c0a:	d806      	bhi.n	8013c1a <udp_sendto_if_src+0x11e>
 8013c0c:	4b26      	ldr	r3, [pc, #152]	; (8013ca8 <udp_sendto_if_src+0x1ac>)
 8013c0e:	f240 320d 	movw	r2, #781	; 0x30d
 8013c12:	492c      	ldr	r1, [pc, #176]	; (8013cc4 <udp_sendto_if_src+0x1c8>)
 8013c14:	4826      	ldr	r0, [pc, #152]	; (8013cb0 <udp_sendto_if_src+0x1b4>)
 8013c16:	f003 fd3f 	bl	8017698 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	8a5b      	ldrh	r3, [r3, #18]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7f8 fc35 	bl	800c494 <lwip_htons>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013c32:	887b      	ldrh	r3, [r7, #2]
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7f8 fc2d 	bl	800c494 <lwip_htons>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	2200      	movs	r2, #0
 8013c46:	719a      	strb	r2, [r3, #6]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	891b      	ldrh	r3, [r3, #8]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7f8 fc1f 	bl	800c494 <lwip_htons>
 8013c56:	4603      	mov	r3, r0
 8013c58:	461a      	mov	r2, r3
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013c5e:	2311      	movs	r3, #17
 8013c60:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	7adb      	ldrb	r3, [r3, #11]
 8013c66:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	7a9b      	ldrb	r3, [r3, #10]
 8013c6c:	7cb9      	ldrb	r1, [r7, #18]
 8013c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c70:	9202      	str	r2, [sp, #8]
 8013c72:	7cfa      	ldrb	r2, [r7, #19]
 8013c74:	9201      	str	r2, [sp, #4]
 8013c76:	9300      	str	r3, [sp, #0]
 8013c78:	460b      	mov	r3, r1
 8013c7a:	687a      	ldr	r2, [r7, #4]
 8013c7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c7e:	69f8      	ldr	r0, [r7, #28]
 8013c80:	f001 fc16 	bl	80154b0 <ip4_output_if_src>
 8013c84:	4603      	mov	r3, r0
 8013c86:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013c88:	69fa      	ldr	r2, [r7, #28]
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d004      	beq.n	8013c9a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013c90:	69f8      	ldr	r0, [r7, #28]
 8013c92:	f7f9 ff5d 	bl	800db50 <pbuf_free>
    q = NULL;
 8013c96:	2300      	movs	r3, #0
 8013c98:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013c9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3720      	adds	r7, #32
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	0801a944 	.word	0x0801a944
 8013cac:	0801ab30 	.word	0x0801ab30
 8013cb0:	0801a998 	.word	0x0801a998
 8013cb4:	0801ab50 	.word	0x0801ab50
 8013cb8:	0801ab70 	.word	0x0801ab70
 8013cbc:	0801ab94 	.word	0x0801ab94
 8013cc0:	0801abb8 	.word	0x0801abb8
 8013cc4:	0801abdc 	.word	0x0801abdc

08013cc8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b086      	sub	sp, #24
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d101      	bne.n	8013ce0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013cdc:	4b39      	ldr	r3, [pc, #228]	; (8013dc4 <udp_bind+0xfc>)
 8013cde:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d109      	bne.n	8013cfa <udp_bind+0x32>
 8013ce6:	4b38      	ldr	r3, [pc, #224]	; (8013dc8 <udp_bind+0x100>)
 8013ce8:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013cec:	4937      	ldr	r1, [pc, #220]	; (8013dcc <udp_bind+0x104>)
 8013cee:	4838      	ldr	r0, [pc, #224]	; (8013dd0 <udp_bind+0x108>)
 8013cf0:	f003 fcd2 	bl	8017698 <iprintf>
 8013cf4:	f06f 030f 	mvn.w	r3, #15
 8013cf8:	e060      	b.n	8013dbc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cfe:	4b35      	ldr	r3, [pc, #212]	; (8013dd4 <udp_bind+0x10c>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	617b      	str	r3, [r7, #20]
 8013d04:	e009      	b.n	8013d1a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013d06:	68fa      	ldr	r2, [r7, #12]
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d102      	bne.n	8013d14 <udp_bind+0x4c>
      rebind = 1;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	74fb      	strb	r3, [r7, #19]
      break;
 8013d12:	e005      	b.n	8013d20 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	617b      	str	r3, [r7, #20]
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d1f2      	bne.n	8013d06 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013d20:	88fb      	ldrh	r3, [r7, #6]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d109      	bne.n	8013d3a <udp_bind+0x72>
    port = udp_new_port();
 8013d26:	f7ff fc69 	bl	80135fc <udp_new_port>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013d2e:	88fb      	ldrh	r3, [r7, #6]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d12c      	bne.n	8013d8e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013d34:	f06f 0307 	mvn.w	r3, #7
 8013d38:	e040      	b.n	8013dbc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d3a:	4b26      	ldr	r3, [pc, #152]	; (8013dd4 <udp_bind+0x10c>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	617b      	str	r3, [r7, #20]
 8013d40:	e022      	b.n	8013d88 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d01b      	beq.n	8013d82 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	8a5b      	ldrh	r3, [r3, #18]
 8013d4e:	88fa      	ldrh	r2, [r7, #6]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d116      	bne.n	8013d82 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d00d      	beq.n	8013d7c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00a      	beq.n	8013d7c <udp_bind+0xb4>
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d006      	beq.n	8013d7c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d6e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d003      	beq.n	8013d7c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d102      	bne.n	8013d82 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013d7c:	f06f 0307 	mvn.w	r3, #7
 8013d80:	e01c      	b.n	8013dbc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	617b      	str	r3, [r7, #20]
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d1d9      	bne.n	8013d42 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d002      	beq.n	8013d9a <udp_bind+0xd2>
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	e000      	b.n	8013d9c <udp_bind+0xd4>
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	68fa      	ldr	r2, [r7, #12]
 8013d9e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	88fa      	ldrh	r2, [r7, #6]
 8013da4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013da6:	7cfb      	ldrb	r3, [r7, #19]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d106      	bne.n	8013dba <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013dac:	4b09      	ldr	r3, [pc, #36]	; (8013dd4 <udp_bind+0x10c>)
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013db4:	4a07      	ldr	r2, [pc, #28]	; (8013dd4 <udp_bind+0x10c>)
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013dba:	2300      	movs	r3, #0
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3718      	adds	r7, #24
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}
 8013dc4:	0801b6f4 	.word	0x0801b6f4
 8013dc8:	0801a944 	.word	0x0801a944
 8013dcc:	0801ac0c 	.word	0x0801ac0c
 8013dd0:	0801a998 	.word	0x0801a998
 8013dd4:	200089f0 	.word	0x200089f0

08013dd8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b084      	sub	sp, #16
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	60b9      	str	r1, [r7, #8]
 8013de2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d107      	bne.n	8013dfa <udp_recv+0x22>
 8013dea:	4b08      	ldr	r3, [pc, #32]	; (8013e0c <udp_recv+0x34>)
 8013dec:	f240 428a 	movw	r2, #1162	; 0x48a
 8013df0:	4907      	ldr	r1, [pc, #28]	; (8013e10 <udp_recv+0x38>)
 8013df2:	4808      	ldr	r0, [pc, #32]	; (8013e14 <udp_recv+0x3c>)
 8013df4:	f003 fc50 	bl	8017698 <iprintf>
 8013df8:	e005      	b.n	8013e06 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	68ba      	ldr	r2, [r7, #8]
 8013dfe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	61da      	str	r2, [r3, #28]
}
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	0801a944 	.word	0x0801a944
 8013e10:	0801ac78 	.word	0x0801ac78
 8013e14:	0801a998 	.word	0x0801a998

08013e18 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b084      	sub	sp, #16
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d107      	bne.n	8013e36 <udp_remove+0x1e>
 8013e26:	4b19      	ldr	r3, [pc, #100]	; (8013e8c <udp_remove+0x74>)
 8013e28:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013e2c:	4918      	ldr	r1, [pc, #96]	; (8013e90 <udp_remove+0x78>)
 8013e2e:	4819      	ldr	r0, [pc, #100]	; (8013e94 <udp_remove+0x7c>)
 8013e30:	f003 fc32 	bl	8017698 <iprintf>
 8013e34:	e026      	b.n	8013e84 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013e36:	4b18      	ldr	r3, [pc, #96]	; (8013e98 <udp_remove+0x80>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d105      	bne.n	8013e4c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013e40:	4b15      	ldr	r3, [pc, #84]	; (8013e98 <udp_remove+0x80>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	68db      	ldr	r3, [r3, #12]
 8013e46:	4a14      	ldr	r2, [pc, #80]	; (8013e98 <udp_remove+0x80>)
 8013e48:	6013      	str	r3, [r2, #0]
 8013e4a:	e017      	b.n	8013e7c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013e4c:	4b12      	ldr	r3, [pc, #72]	; (8013e98 <udp_remove+0x80>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	60fb      	str	r3, [r7, #12]
 8013e52:	e010      	b.n	8013e76 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d009      	beq.n	8013e70 <udp_remove+0x58>
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d104      	bne.n	8013e70 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	68da      	ldr	r2, [r3, #12]
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	60da      	str	r2, [r3, #12]
        break;
 8013e6e:	e005      	b.n	8013e7c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	68db      	ldr	r3, [r3, #12]
 8013e74:	60fb      	str	r3, [r7, #12]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d1eb      	bne.n	8013e54 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013e7c:	6879      	ldr	r1, [r7, #4]
 8013e7e:	2000      	movs	r0, #0
 8013e80:	f7f8 fff0 	bl	800ce64 <memp_free>
}
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	0801a944 	.word	0x0801a944
 8013e90:	0801ac90 	.word	0x0801ac90
 8013e94:	0801a998 	.word	0x0801a998
 8013e98:	200089f0 	.word	0x200089f0

08013e9c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013ea2:	2000      	movs	r0, #0
 8013ea4:	f7f8 ff6e 	bl	800cd84 <memp_malloc>
 8013ea8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d007      	beq.n	8013ec0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013eb0:	2220      	movs	r2, #32
 8013eb2:	2100      	movs	r1, #0
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f003 fdb3 	bl	8017a20 <memset>
    pcb->ttl = UDP_TTL;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	22ff      	movs	r2, #255	; 0xff
 8013ebe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013ec0:	687b      	ldr	r3, [r7, #4]
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3708      	adds	r7, #8
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
	...

08013ecc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b085      	sub	sp, #20
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d01e      	beq.n	8013f1a <udp_netif_ip_addr_changed+0x4e>
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d01a      	beq.n	8013f1a <udp_netif_ip_addr_changed+0x4e>
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d017      	beq.n	8013f1a <udp_netif_ip_addr_changed+0x4e>
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d013      	beq.n	8013f1a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013ef2:	4b0d      	ldr	r3, [pc, #52]	; (8013f28 <udp_netif_ip_addr_changed+0x5c>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	60fb      	str	r3, [r7, #12]
 8013ef8:	e00c      	b.n	8013f14 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d103      	bne.n	8013f0e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	68db      	ldr	r3, [r3, #12]
 8013f12:	60fb      	str	r3, [r7, #12]
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d1ef      	bne.n	8013efa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013f1a:	bf00      	nop
 8013f1c:	3714      	adds	r7, #20
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f24:	4770      	bx	lr
 8013f26:	bf00      	nop
 8013f28:	200089f0 	.word	0x200089f0

08013f2c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013f34:	4915      	ldr	r1, [pc, #84]	; (8013f8c <etharp_free_entry+0x60>)
 8013f36:	687a      	ldr	r2, [r7, #4]
 8013f38:	4613      	mov	r3, r2
 8013f3a:	005b      	lsls	r3, r3, #1
 8013f3c:	4413      	add	r3, r2
 8013f3e:	00db      	lsls	r3, r3, #3
 8013f40:	440b      	add	r3, r1
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d013      	beq.n	8013f70 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013f48:	4910      	ldr	r1, [pc, #64]	; (8013f8c <etharp_free_entry+0x60>)
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	005b      	lsls	r3, r3, #1
 8013f50:	4413      	add	r3, r2
 8013f52:	00db      	lsls	r3, r3, #3
 8013f54:	440b      	add	r3, r1
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7f9 fdf9 	bl	800db50 <pbuf_free>
    arp_table[i].q = NULL;
 8013f5e:	490b      	ldr	r1, [pc, #44]	; (8013f8c <etharp_free_entry+0x60>)
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	4613      	mov	r3, r2
 8013f64:	005b      	lsls	r3, r3, #1
 8013f66:	4413      	add	r3, r2
 8013f68:	00db      	lsls	r3, r3, #3
 8013f6a:	440b      	add	r3, r1
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013f70:	4906      	ldr	r1, [pc, #24]	; (8013f8c <etharp_free_entry+0x60>)
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	4613      	mov	r3, r2
 8013f76:	005b      	lsls	r3, r3, #1
 8013f78:	4413      	add	r3, r2
 8013f7a:	00db      	lsls	r3, r3, #3
 8013f7c:	440b      	add	r3, r1
 8013f7e:	3314      	adds	r3, #20
 8013f80:	2200      	movs	r2, #0
 8013f82:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013f84:	bf00      	nop
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	200089f4 	.word	0x200089f4

08013f90 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b082      	sub	sp, #8
 8013f94:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f96:	2300      	movs	r3, #0
 8013f98:	607b      	str	r3, [r7, #4]
 8013f9a:	e096      	b.n	80140ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013f9c:	494f      	ldr	r1, [pc, #316]	; (80140dc <etharp_tmr+0x14c>)
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	005b      	lsls	r3, r3, #1
 8013fa4:	4413      	add	r3, r2
 8013fa6:	00db      	lsls	r3, r3, #3
 8013fa8:	440b      	add	r3, r1
 8013faa:	3314      	adds	r3, #20
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013fb0:	78fb      	ldrb	r3, [r7, #3]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	f000 8086 	beq.w	80140c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013fb8:	4948      	ldr	r1, [pc, #288]	; (80140dc <etharp_tmr+0x14c>)
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	005b      	lsls	r3, r3, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	3312      	adds	r3, #18
 8013fc8:	881b      	ldrh	r3, [r3, #0]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	b298      	uxth	r0, r3
 8013fce:	4943      	ldr	r1, [pc, #268]	; (80140dc <etharp_tmr+0x14c>)
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	005b      	lsls	r3, r3, #1
 8013fd6:	4413      	add	r3, r2
 8013fd8:	00db      	lsls	r3, r3, #3
 8013fda:	440b      	add	r3, r1
 8013fdc:	3312      	adds	r3, #18
 8013fde:	4602      	mov	r2, r0
 8013fe0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013fe2:	493e      	ldr	r1, [pc, #248]	; (80140dc <etharp_tmr+0x14c>)
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	4613      	mov	r3, r2
 8013fe8:	005b      	lsls	r3, r3, #1
 8013fea:	4413      	add	r3, r2
 8013fec:	00db      	lsls	r3, r3, #3
 8013fee:	440b      	add	r3, r1
 8013ff0:	3312      	adds	r3, #18
 8013ff2:	881b      	ldrh	r3, [r3, #0]
 8013ff4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013ff8:	d215      	bcs.n	8014026 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013ffa:	4938      	ldr	r1, [pc, #224]	; (80140dc <etharp_tmr+0x14c>)
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	4613      	mov	r3, r2
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	4413      	add	r3, r2
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	440b      	add	r3, r1
 8014008:	3314      	adds	r3, #20
 801400a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801400c:	2b01      	cmp	r3, #1
 801400e:	d10e      	bne.n	801402e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014010:	4932      	ldr	r1, [pc, #200]	; (80140dc <etharp_tmr+0x14c>)
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	4613      	mov	r3, r2
 8014016:	005b      	lsls	r3, r3, #1
 8014018:	4413      	add	r3, r2
 801401a:	00db      	lsls	r3, r3, #3
 801401c:	440b      	add	r3, r1
 801401e:	3312      	adds	r3, #18
 8014020:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014022:	2b04      	cmp	r3, #4
 8014024:	d903      	bls.n	801402e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f7ff ff80 	bl	8013f2c <etharp_free_entry>
 801402c:	e04a      	b.n	80140c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801402e:	492b      	ldr	r1, [pc, #172]	; (80140dc <etharp_tmr+0x14c>)
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	4613      	mov	r3, r2
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	4413      	add	r3, r2
 8014038:	00db      	lsls	r3, r3, #3
 801403a:	440b      	add	r3, r1
 801403c:	3314      	adds	r3, #20
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	2b03      	cmp	r3, #3
 8014042:	d10a      	bne.n	801405a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014044:	4925      	ldr	r1, [pc, #148]	; (80140dc <etharp_tmr+0x14c>)
 8014046:	687a      	ldr	r2, [r7, #4]
 8014048:	4613      	mov	r3, r2
 801404a:	005b      	lsls	r3, r3, #1
 801404c:	4413      	add	r3, r2
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	440b      	add	r3, r1
 8014052:	3314      	adds	r3, #20
 8014054:	2204      	movs	r2, #4
 8014056:	701a      	strb	r2, [r3, #0]
 8014058:	e034      	b.n	80140c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801405a:	4920      	ldr	r1, [pc, #128]	; (80140dc <etharp_tmr+0x14c>)
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	4613      	mov	r3, r2
 8014060:	005b      	lsls	r3, r3, #1
 8014062:	4413      	add	r3, r2
 8014064:	00db      	lsls	r3, r3, #3
 8014066:	440b      	add	r3, r1
 8014068:	3314      	adds	r3, #20
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	2b04      	cmp	r3, #4
 801406e:	d10a      	bne.n	8014086 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014070:	491a      	ldr	r1, [pc, #104]	; (80140dc <etharp_tmr+0x14c>)
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	4613      	mov	r3, r2
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	4413      	add	r3, r2
 801407a:	00db      	lsls	r3, r3, #3
 801407c:	440b      	add	r3, r1
 801407e:	3314      	adds	r3, #20
 8014080:	2202      	movs	r2, #2
 8014082:	701a      	strb	r2, [r3, #0]
 8014084:	e01e      	b.n	80140c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014086:	4915      	ldr	r1, [pc, #84]	; (80140dc <etharp_tmr+0x14c>)
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	4613      	mov	r3, r2
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	4413      	add	r3, r2
 8014090:	00db      	lsls	r3, r3, #3
 8014092:	440b      	add	r3, r1
 8014094:	3314      	adds	r3, #20
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	2b01      	cmp	r3, #1
 801409a:	d113      	bne.n	80140c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801409c:	490f      	ldr	r1, [pc, #60]	; (80140dc <etharp_tmr+0x14c>)
 801409e:	687a      	ldr	r2, [r7, #4]
 80140a0:	4613      	mov	r3, r2
 80140a2:	005b      	lsls	r3, r3, #1
 80140a4:	4413      	add	r3, r2
 80140a6:	00db      	lsls	r3, r3, #3
 80140a8:	440b      	add	r3, r1
 80140aa:	3308      	adds	r3, #8
 80140ac:	6818      	ldr	r0, [r3, #0]
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	4613      	mov	r3, r2
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	4413      	add	r3, r2
 80140b6:	00db      	lsls	r3, r3, #3
 80140b8:	4a08      	ldr	r2, [pc, #32]	; (80140dc <etharp_tmr+0x14c>)
 80140ba:	4413      	add	r3, r2
 80140bc:	3304      	adds	r3, #4
 80140be:	4619      	mov	r1, r3
 80140c0:	f000 fe6e 	bl	8014da0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	3301      	adds	r3, #1
 80140c8:	607b      	str	r3, [r7, #4]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2b09      	cmp	r3, #9
 80140ce:	f77f af65 	ble.w	8013f9c <etharp_tmr+0xc>
      }
    }
  }
}
 80140d2:	bf00      	nop
 80140d4:	bf00      	nop
 80140d6:	3708      	adds	r7, #8
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	200089f4 	.word	0x200089f4

080140e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b08a      	sub	sp, #40	; 0x28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	460b      	mov	r3, r1
 80140ea:	607a      	str	r2, [r7, #4]
 80140ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80140ee:	230a      	movs	r3, #10
 80140f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80140f2:	230a      	movs	r3, #10
 80140f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80140f6:	230a      	movs	r3, #10
 80140f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80140fa:	2300      	movs	r3, #0
 80140fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80140fe:	230a      	movs	r3, #10
 8014100:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014102:	2300      	movs	r3, #0
 8014104:	83bb      	strh	r3, [r7, #28]
 8014106:	2300      	movs	r3, #0
 8014108:	837b      	strh	r3, [r7, #26]
 801410a:	2300      	movs	r3, #0
 801410c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801410e:	2300      	movs	r3, #0
 8014110:	843b      	strh	r3, [r7, #32]
 8014112:	e0ae      	b.n	8014272 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014114:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014118:	49a6      	ldr	r1, [pc, #664]	; (80143b4 <etharp_find_entry+0x2d4>)
 801411a:	4613      	mov	r3, r2
 801411c:	005b      	lsls	r3, r3, #1
 801411e:	4413      	add	r3, r2
 8014120:	00db      	lsls	r3, r3, #3
 8014122:	440b      	add	r3, r1
 8014124:	3314      	adds	r3, #20
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801412a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801412e:	2b0a      	cmp	r3, #10
 8014130:	d105      	bne.n	801413e <etharp_find_entry+0x5e>
 8014132:	7dfb      	ldrb	r3, [r7, #23]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d102      	bne.n	801413e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014138:	8c3b      	ldrh	r3, [r7, #32]
 801413a:	847b      	strh	r3, [r7, #34]	; 0x22
 801413c:	e095      	b.n	801426a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801413e:	7dfb      	ldrb	r3, [r7, #23]
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 8092 	beq.w	801426a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014146:	7dfb      	ldrb	r3, [r7, #23]
 8014148:	2b01      	cmp	r3, #1
 801414a:	d009      	beq.n	8014160 <etharp_find_entry+0x80>
 801414c:	7dfb      	ldrb	r3, [r7, #23]
 801414e:	2b01      	cmp	r3, #1
 8014150:	d806      	bhi.n	8014160 <etharp_find_entry+0x80>
 8014152:	4b99      	ldr	r3, [pc, #612]	; (80143b8 <etharp_find_entry+0x2d8>)
 8014154:	f240 1223 	movw	r2, #291	; 0x123
 8014158:	4998      	ldr	r1, [pc, #608]	; (80143bc <etharp_find_entry+0x2dc>)
 801415a:	4899      	ldr	r0, [pc, #612]	; (80143c0 <etharp_find_entry+0x2e0>)
 801415c:	f003 fa9c 	bl	8017698 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d020      	beq.n	80141a8 <etharp_find_entry+0xc8>
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	6819      	ldr	r1, [r3, #0]
 801416a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801416e:	4891      	ldr	r0, [pc, #580]	; (80143b4 <etharp_find_entry+0x2d4>)
 8014170:	4613      	mov	r3, r2
 8014172:	005b      	lsls	r3, r3, #1
 8014174:	4413      	add	r3, r2
 8014176:	00db      	lsls	r3, r3, #3
 8014178:	4403      	add	r3, r0
 801417a:	3304      	adds	r3, #4
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	4299      	cmp	r1, r3
 8014180:	d112      	bne.n	80141a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d00c      	beq.n	80141a2 <etharp_find_entry+0xc2>
 8014188:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801418c:	4989      	ldr	r1, [pc, #548]	; (80143b4 <etharp_find_entry+0x2d4>)
 801418e:	4613      	mov	r3, r2
 8014190:	005b      	lsls	r3, r3, #1
 8014192:	4413      	add	r3, r2
 8014194:	00db      	lsls	r3, r3, #3
 8014196:	440b      	add	r3, r1
 8014198:	3308      	adds	r3, #8
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	687a      	ldr	r2, [r7, #4]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d102      	bne.n	80141a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80141a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141a6:	e100      	b.n	80143aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80141a8:	7dfb      	ldrb	r3, [r7, #23]
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d140      	bne.n	8014230 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80141ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141b2:	4980      	ldr	r1, [pc, #512]	; (80143b4 <etharp_find_entry+0x2d4>)
 80141b4:	4613      	mov	r3, r2
 80141b6:	005b      	lsls	r3, r3, #1
 80141b8:	4413      	add	r3, r2
 80141ba:	00db      	lsls	r3, r3, #3
 80141bc:	440b      	add	r3, r1
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d01a      	beq.n	80141fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80141c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141c8:	497a      	ldr	r1, [pc, #488]	; (80143b4 <etharp_find_entry+0x2d4>)
 80141ca:	4613      	mov	r3, r2
 80141cc:	005b      	lsls	r3, r3, #1
 80141ce:	4413      	add	r3, r2
 80141d0:	00db      	lsls	r3, r3, #3
 80141d2:	440b      	add	r3, r1
 80141d4:	3312      	adds	r3, #18
 80141d6:	881b      	ldrh	r3, [r3, #0]
 80141d8:	8bba      	ldrh	r2, [r7, #28]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d845      	bhi.n	801426a <etharp_find_entry+0x18a>
            old_queue = i;
 80141de:	8c3b      	ldrh	r3, [r7, #32]
 80141e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80141e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141e6:	4973      	ldr	r1, [pc, #460]	; (80143b4 <etharp_find_entry+0x2d4>)
 80141e8:	4613      	mov	r3, r2
 80141ea:	005b      	lsls	r3, r3, #1
 80141ec:	4413      	add	r3, r2
 80141ee:	00db      	lsls	r3, r3, #3
 80141f0:	440b      	add	r3, r1
 80141f2:	3312      	adds	r3, #18
 80141f4:	881b      	ldrh	r3, [r3, #0]
 80141f6:	83bb      	strh	r3, [r7, #28]
 80141f8:	e037      	b.n	801426a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80141fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141fe:	496d      	ldr	r1, [pc, #436]	; (80143b4 <etharp_find_entry+0x2d4>)
 8014200:	4613      	mov	r3, r2
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	4413      	add	r3, r2
 8014206:	00db      	lsls	r3, r3, #3
 8014208:	440b      	add	r3, r1
 801420a:	3312      	adds	r3, #18
 801420c:	881b      	ldrh	r3, [r3, #0]
 801420e:	8b7a      	ldrh	r2, [r7, #26]
 8014210:	429a      	cmp	r2, r3
 8014212:	d82a      	bhi.n	801426a <etharp_find_entry+0x18a>
            old_pending = i;
 8014214:	8c3b      	ldrh	r3, [r7, #32]
 8014216:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801421c:	4965      	ldr	r1, [pc, #404]	; (80143b4 <etharp_find_entry+0x2d4>)
 801421e:	4613      	mov	r3, r2
 8014220:	005b      	lsls	r3, r3, #1
 8014222:	4413      	add	r3, r2
 8014224:	00db      	lsls	r3, r3, #3
 8014226:	440b      	add	r3, r1
 8014228:	3312      	adds	r3, #18
 801422a:	881b      	ldrh	r3, [r3, #0]
 801422c:	837b      	strh	r3, [r7, #26]
 801422e:	e01c      	b.n	801426a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014230:	7dfb      	ldrb	r3, [r7, #23]
 8014232:	2b01      	cmp	r3, #1
 8014234:	d919      	bls.n	801426a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014236:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801423a:	495e      	ldr	r1, [pc, #376]	; (80143b4 <etharp_find_entry+0x2d4>)
 801423c:	4613      	mov	r3, r2
 801423e:	005b      	lsls	r3, r3, #1
 8014240:	4413      	add	r3, r2
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	440b      	add	r3, r1
 8014246:	3312      	adds	r3, #18
 8014248:	881b      	ldrh	r3, [r3, #0]
 801424a:	8b3a      	ldrh	r2, [r7, #24]
 801424c:	429a      	cmp	r2, r3
 801424e:	d80c      	bhi.n	801426a <etharp_find_entry+0x18a>
            old_stable = i;
 8014250:	8c3b      	ldrh	r3, [r7, #32]
 8014252:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014254:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014258:	4956      	ldr	r1, [pc, #344]	; (80143b4 <etharp_find_entry+0x2d4>)
 801425a:	4613      	mov	r3, r2
 801425c:	005b      	lsls	r3, r3, #1
 801425e:	4413      	add	r3, r2
 8014260:	00db      	lsls	r3, r3, #3
 8014262:	440b      	add	r3, r1
 8014264:	3312      	adds	r3, #18
 8014266:	881b      	ldrh	r3, [r3, #0]
 8014268:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801426a:	8c3b      	ldrh	r3, [r7, #32]
 801426c:	3301      	adds	r3, #1
 801426e:	b29b      	uxth	r3, r3
 8014270:	843b      	strh	r3, [r7, #32]
 8014272:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014276:	2b09      	cmp	r3, #9
 8014278:	f77f af4c 	ble.w	8014114 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801427c:	7afb      	ldrb	r3, [r7, #11]
 801427e:	f003 0302 	and.w	r3, r3, #2
 8014282:	2b00      	cmp	r3, #0
 8014284:	d108      	bne.n	8014298 <etharp_find_entry+0x1b8>
 8014286:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801428a:	2b0a      	cmp	r3, #10
 801428c:	d107      	bne.n	801429e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801428e:	7afb      	ldrb	r3, [r7, #11]
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	2b00      	cmp	r3, #0
 8014296:	d102      	bne.n	801429e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014298:	f04f 33ff 	mov.w	r3, #4294967295
 801429c:	e085      	b.n	80143aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801429e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142a2:	2b09      	cmp	r3, #9
 80142a4:	dc02      	bgt.n	80142ac <etharp_find_entry+0x1cc>
    i = empty;
 80142a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142a8:	843b      	strh	r3, [r7, #32]
 80142aa:	e039      	b.n	8014320 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80142ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80142b0:	2b09      	cmp	r3, #9
 80142b2:	dc14      	bgt.n	80142de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80142b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80142b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142bc:	493d      	ldr	r1, [pc, #244]	; (80143b4 <etharp_find_entry+0x2d4>)
 80142be:	4613      	mov	r3, r2
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	4413      	add	r3, r2
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	440b      	add	r3, r1
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d018      	beq.n	8014300 <etharp_find_entry+0x220>
 80142ce:	4b3a      	ldr	r3, [pc, #232]	; (80143b8 <etharp_find_entry+0x2d8>)
 80142d0:	f240 126d 	movw	r2, #365	; 0x16d
 80142d4:	493b      	ldr	r1, [pc, #236]	; (80143c4 <etharp_find_entry+0x2e4>)
 80142d6:	483a      	ldr	r0, [pc, #232]	; (80143c0 <etharp_find_entry+0x2e0>)
 80142d8:	f003 f9de 	bl	8017698 <iprintf>
 80142dc:	e010      	b.n	8014300 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80142de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80142e2:	2b09      	cmp	r3, #9
 80142e4:	dc02      	bgt.n	80142ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80142e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80142e8:	843b      	strh	r3, [r7, #32]
 80142ea:	e009      	b.n	8014300 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80142ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80142f0:	2b09      	cmp	r3, #9
 80142f2:	dc02      	bgt.n	80142fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80142f4:	8bfb      	ldrh	r3, [r7, #30]
 80142f6:	843b      	strh	r3, [r7, #32]
 80142f8:	e002      	b.n	8014300 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80142fa:	f04f 33ff 	mov.w	r3, #4294967295
 80142fe:	e054      	b.n	80143aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014300:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014304:	2b09      	cmp	r3, #9
 8014306:	dd06      	ble.n	8014316 <etharp_find_entry+0x236>
 8014308:	4b2b      	ldr	r3, [pc, #172]	; (80143b8 <etharp_find_entry+0x2d8>)
 801430a:	f240 127f 	movw	r2, #383	; 0x17f
 801430e:	492e      	ldr	r1, [pc, #184]	; (80143c8 <etharp_find_entry+0x2e8>)
 8014310:	482b      	ldr	r0, [pc, #172]	; (80143c0 <etharp_find_entry+0x2e0>)
 8014312:	f003 f9c1 	bl	8017698 <iprintf>
    etharp_free_entry(i);
 8014316:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801431a:	4618      	mov	r0, r3
 801431c:	f7ff fe06 	bl	8013f2c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014320:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014324:	2b09      	cmp	r3, #9
 8014326:	dd06      	ble.n	8014336 <etharp_find_entry+0x256>
 8014328:	4b23      	ldr	r3, [pc, #140]	; (80143b8 <etharp_find_entry+0x2d8>)
 801432a:	f240 1283 	movw	r2, #387	; 0x183
 801432e:	4926      	ldr	r1, [pc, #152]	; (80143c8 <etharp_find_entry+0x2e8>)
 8014330:	4823      	ldr	r0, [pc, #140]	; (80143c0 <etharp_find_entry+0x2e0>)
 8014332:	f003 f9b1 	bl	8017698 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014336:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801433a:	491e      	ldr	r1, [pc, #120]	; (80143b4 <etharp_find_entry+0x2d4>)
 801433c:	4613      	mov	r3, r2
 801433e:	005b      	lsls	r3, r3, #1
 8014340:	4413      	add	r3, r2
 8014342:	00db      	lsls	r3, r3, #3
 8014344:	440b      	add	r3, r1
 8014346:	3314      	adds	r3, #20
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d006      	beq.n	801435c <etharp_find_entry+0x27c>
 801434e:	4b1a      	ldr	r3, [pc, #104]	; (80143b8 <etharp_find_entry+0x2d8>)
 8014350:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014354:	491d      	ldr	r1, [pc, #116]	; (80143cc <etharp_find_entry+0x2ec>)
 8014356:	481a      	ldr	r0, [pc, #104]	; (80143c0 <etharp_find_entry+0x2e0>)
 8014358:	f003 f99e 	bl	8017698 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d00b      	beq.n	801437a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	6819      	ldr	r1, [r3, #0]
 801436a:	4812      	ldr	r0, [pc, #72]	; (80143b4 <etharp_find_entry+0x2d4>)
 801436c:	4613      	mov	r3, r2
 801436e:	005b      	lsls	r3, r3, #1
 8014370:	4413      	add	r3, r2
 8014372:	00db      	lsls	r3, r3, #3
 8014374:	4403      	add	r3, r0
 8014376:	3304      	adds	r3, #4
 8014378:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801437a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801437e:	490d      	ldr	r1, [pc, #52]	; (80143b4 <etharp_find_entry+0x2d4>)
 8014380:	4613      	mov	r3, r2
 8014382:	005b      	lsls	r3, r3, #1
 8014384:	4413      	add	r3, r2
 8014386:	00db      	lsls	r3, r3, #3
 8014388:	440b      	add	r3, r1
 801438a:	3312      	adds	r3, #18
 801438c:	2200      	movs	r2, #0
 801438e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014394:	4907      	ldr	r1, [pc, #28]	; (80143b4 <etharp_find_entry+0x2d4>)
 8014396:	4613      	mov	r3, r2
 8014398:	005b      	lsls	r3, r3, #1
 801439a:	4413      	add	r3, r2
 801439c:	00db      	lsls	r3, r3, #3
 801439e:	440b      	add	r3, r1
 80143a0:	3308      	adds	r3, #8
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80143a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3728      	adds	r7, #40	; 0x28
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	200089f4 	.word	0x200089f4
 80143b8:	0801aca8 	.word	0x0801aca8
 80143bc:	0801ace0 	.word	0x0801ace0
 80143c0:	0801ad20 	.word	0x0801ad20
 80143c4:	0801ad48 	.word	0x0801ad48
 80143c8:	0801ad60 	.word	0x0801ad60
 80143cc:	0801ad74 	.word	0x0801ad74

080143d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b088      	sub	sp, #32
 80143d4:	af02      	add	r7, sp, #8
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	607a      	str	r2, [r7, #4]
 80143dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143e4:	2b06      	cmp	r3, #6
 80143e6:	d006      	beq.n	80143f6 <etharp_update_arp_entry+0x26>
 80143e8:	4b48      	ldr	r3, [pc, #288]	; (801450c <etharp_update_arp_entry+0x13c>)
 80143ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 80143ee:	4948      	ldr	r1, [pc, #288]	; (8014510 <etharp_update_arp_entry+0x140>)
 80143f0:	4848      	ldr	r0, [pc, #288]	; (8014514 <etharp_update_arp_entry+0x144>)
 80143f2:	f003 f951 	bl	8017698 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d012      	beq.n	8014422 <etharp_update_arp_entry+0x52>
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d00e      	beq.n	8014422 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	68f9      	ldr	r1, [r7, #12]
 801440a:	4618      	mov	r0, r3
 801440c:	f001 f8fe 	bl	801560c <ip4_addr_isbroadcast_u32>
 8014410:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014412:	2b00      	cmp	r3, #0
 8014414:	d105      	bne.n	8014422 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801441e:	2be0      	cmp	r3, #224	; 0xe0
 8014420:	d102      	bne.n	8014428 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014422:	f06f 030f 	mvn.w	r3, #15
 8014426:	e06c      	b.n	8014502 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014428:	78fb      	ldrb	r3, [r7, #3]
 801442a:	68fa      	ldr	r2, [r7, #12]
 801442c:	4619      	mov	r1, r3
 801442e:	68b8      	ldr	r0, [r7, #8]
 8014430:	f7ff fe56 	bl	80140e0 <etharp_find_entry>
 8014434:	4603      	mov	r3, r0
 8014436:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014438:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801443c:	2b00      	cmp	r3, #0
 801443e:	da02      	bge.n	8014446 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014440:	8afb      	ldrh	r3, [r7, #22]
 8014442:	b25b      	sxtb	r3, r3
 8014444:	e05d      	b.n	8014502 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014446:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801444a:	4933      	ldr	r1, [pc, #204]	; (8014518 <etharp_update_arp_entry+0x148>)
 801444c:	4613      	mov	r3, r2
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	4413      	add	r3, r2
 8014452:	00db      	lsls	r3, r3, #3
 8014454:	440b      	add	r3, r1
 8014456:	3314      	adds	r3, #20
 8014458:	2202      	movs	r2, #2
 801445a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801445c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014460:	492d      	ldr	r1, [pc, #180]	; (8014518 <etharp_update_arp_entry+0x148>)
 8014462:	4613      	mov	r3, r2
 8014464:	005b      	lsls	r3, r3, #1
 8014466:	4413      	add	r3, r2
 8014468:	00db      	lsls	r3, r3, #3
 801446a:	440b      	add	r3, r1
 801446c:	3308      	adds	r3, #8
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014472:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014476:	4613      	mov	r3, r2
 8014478:	005b      	lsls	r3, r3, #1
 801447a:	4413      	add	r3, r2
 801447c:	00db      	lsls	r3, r3, #3
 801447e:	3308      	adds	r3, #8
 8014480:	4a25      	ldr	r2, [pc, #148]	; (8014518 <etharp_update_arp_entry+0x148>)
 8014482:	4413      	add	r3, r2
 8014484:	3304      	adds	r3, #4
 8014486:	2206      	movs	r2, #6
 8014488:	6879      	ldr	r1, [r7, #4]
 801448a:	4618      	mov	r0, r3
 801448c:	f003 fb43 	bl	8017b16 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014490:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014494:	4920      	ldr	r1, [pc, #128]	; (8014518 <etharp_update_arp_entry+0x148>)
 8014496:	4613      	mov	r3, r2
 8014498:	005b      	lsls	r3, r3, #1
 801449a:	4413      	add	r3, r2
 801449c:	00db      	lsls	r3, r3, #3
 801449e:	440b      	add	r3, r1
 80144a0:	3312      	adds	r3, #18
 80144a2:	2200      	movs	r2, #0
 80144a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80144a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144aa:	491b      	ldr	r1, [pc, #108]	; (8014518 <etharp_update_arp_entry+0x148>)
 80144ac:	4613      	mov	r3, r2
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	4413      	add	r3, r2
 80144b2:	00db      	lsls	r3, r3, #3
 80144b4:	440b      	add	r3, r1
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d021      	beq.n	8014500 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80144bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144c0:	4915      	ldr	r1, [pc, #84]	; (8014518 <etharp_update_arp_entry+0x148>)
 80144c2:	4613      	mov	r3, r2
 80144c4:	005b      	lsls	r3, r3, #1
 80144c6:	4413      	add	r3, r2
 80144c8:	00db      	lsls	r3, r3, #3
 80144ca:	440b      	add	r3, r1
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80144d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144d4:	4910      	ldr	r1, [pc, #64]	; (8014518 <etharp_update_arp_entry+0x148>)
 80144d6:	4613      	mov	r3, r2
 80144d8:	005b      	lsls	r3, r3, #1
 80144da:	4413      	add	r3, r2
 80144dc:	00db      	lsls	r3, r3, #3
 80144de:	440b      	add	r3, r1
 80144e0:	2200      	movs	r2, #0
 80144e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80144ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	6939      	ldr	r1, [r7, #16]
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f001 ff97 	bl	8016428 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80144fa:	6938      	ldr	r0, [r7, #16]
 80144fc:	f7f9 fb28 	bl	800db50 <pbuf_free>
  }
  return ERR_OK;
 8014500:	2300      	movs	r3, #0
}
 8014502:	4618      	mov	r0, r3
 8014504:	3718      	adds	r7, #24
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
 801450a:	bf00      	nop
 801450c:	0801aca8 	.word	0x0801aca8
 8014510:	0801ada0 	.word	0x0801ada0
 8014514:	0801ad20 	.word	0x0801ad20
 8014518:	200089f4 	.word	0x200089f4

0801451c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014524:	2300      	movs	r3, #0
 8014526:	60fb      	str	r3, [r7, #12]
 8014528:	e01e      	b.n	8014568 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801452a:	4913      	ldr	r1, [pc, #76]	; (8014578 <etharp_cleanup_netif+0x5c>)
 801452c:	68fa      	ldr	r2, [r7, #12]
 801452e:	4613      	mov	r3, r2
 8014530:	005b      	lsls	r3, r3, #1
 8014532:	4413      	add	r3, r2
 8014534:	00db      	lsls	r3, r3, #3
 8014536:	440b      	add	r3, r1
 8014538:	3314      	adds	r3, #20
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801453e:	7afb      	ldrb	r3, [r7, #11]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d00e      	beq.n	8014562 <etharp_cleanup_netif+0x46>
 8014544:	490c      	ldr	r1, [pc, #48]	; (8014578 <etharp_cleanup_netif+0x5c>)
 8014546:	68fa      	ldr	r2, [r7, #12]
 8014548:	4613      	mov	r3, r2
 801454a:	005b      	lsls	r3, r3, #1
 801454c:	4413      	add	r3, r2
 801454e:	00db      	lsls	r3, r3, #3
 8014550:	440b      	add	r3, r1
 8014552:	3308      	adds	r3, #8
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	429a      	cmp	r2, r3
 801455a:	d102      	bne.n	8014562 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801455c:	68f8      	ldr	r0, [r7, #12]
 801455e:	f7ff fce5 	bl	8013f2c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	3301      	adds	r3, #1
 8014566:	60fb      	str	r3, [r7, #12]
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	2b09      	cmp	r3, #9
 801456c:	dddd      	ble.n	801452a <etharp_cleanup_netif+0xe>
    }
  }
}
 801456e:	bf00      	nop
 8014570:	bf00      	nop
 8014572:	3710      	adds	r7, #16
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}
 8014578:	200089f4 	.word	0x200089f4

0801457c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801457c:	b5b0      	push	{r4, r5, r7, lr}
 801457e:	b08a      	sub	sp, #40	; 0x28
 8014580:	af04      	add	r7, sp, #16
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d107      	bne.n	801459c <etharp_input+0x20>
 801458c:	4b3d      	ldr	r3, [pc, #244]	; (8014684 <etharp_input+0x108>)
 801458e:	f240 228a 	movw	r2, #650	; 0x28a
 8014592:	493d      	ldr	r1, [pc, #244]	; (8014688 <etharp_input+0x10c>)
 8014594:	483d      	ldr	r0, [pc, #244]	; (801468c <etharp_input+0x110>)
 8014596:	f003 f87f 	bl	8017698 <iprintf>
 801459a:	e06f      	b.n	801467c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	881b      	ldrh	r3, [r3, #0]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145ac:	d10c      	bne.n	80145c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145b2:	2b06      	cmp	r3, #6
 80145b4:	d108      	bne.n	80145c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145ba:	2b04      	cmp	r3, #4
 80145bc:	d104      	bne.n	80145c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	885b      	ldrh	r3, [r3, #2]
 80145c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145c4:	2b08      	cmp	r3, #8
 80145c6:	d003      	beq.n	80145d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7f9 fac1 	bl	800db50 <pbuf_free>
    return;
 80145ce:	e055      	b.n	801467c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	330e      	adds	r3, #14
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	3318      	adds	r3, #24
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	3304      	adds	r3, #4
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d102      	bne.n	80145f0 <etharp_input+0x74>
    for_us = 0;
 80145ea:	2300      	movs	r3, #0
 80145ec:	75fb      	strb	r3, [r7, #23]
 80145ee:	e009      	b.n	8014604 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80145f0:	68ba      	ldr	r2, [r7, #8]
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	3304      	adds	r3, #4
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	bf0c      	ite	eq
 80145fc:	2301      	moveq	r3, #1
 80145fe:	2300      	movne	r3, #0
 8014600:	b2db      	uxtb	r3, r3
 8014602:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	f103 0208 	add.w	r2, r3, #8
 801460a:	7dfb      	ldrb	r3, [r7, #23]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d001      	beq.n	8014614 <etharp_input+0x98>
 8014610:	2301      	movs	r3, #1
 8014612:	e000      	b.n	8014616 <etharp_input+0x9a>
 8014614:	2302      	movs	r3, #2
 8014616:	f107 010c 	add.w	r1, r7, #12
 801461a:	6838      	ldr	r0, [r7, #0]
 801461c:	f7ff fed8 	bl	80143d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	88db      	ldrh	r3, [r3, #6]
 8014624:	b29b      	uxth	r3, r3
 8014626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801462a:	d003      	beq.n	8014634 <etharp_input+0xb8>
 801462c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014630:	d01e      	beq.n	8014670 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014632:	e020      	b.n	8014676 <etharp_input+0xfa>
      if (for_us) {
 8014634:	7dfb      	ldrb	r3, [r7, #23]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d01c      	beq.n	8014674 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014650:	693a      	ldr	r2, [r7, #16]
 8014652:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014654:	2102      	movs	r1, #2
 8014656:	9103      	str	r1, [sp, #12]
 8014658:	f107 010c 	add.w	r1, r7, #12
 801465c:	9102      	str	r1, [sp, #8]
 801465e:	9201      	str	r2, [sp, #4]
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	462b      	mov	r3, r5
 8014664:	4622      	mov	r2, r4
 8014666:	4601      	mov	r1, r0
 8014668:	6838      	ldr	r0, [r7, #0]
 801466a:	f000 faeb 	bl	8014c44 <etharp_raw>
      break;
 801466e:	e001      	b.n	8014674 <etharp_input+0xf8>
      break;
 8014670:	bf00      	nop
 8014672:	e000      	b.n	8014676 <etharp_input+0xfa>
      break;
 8014674:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7f9 fa6a 	bl	800db50 <pbuf_free>
}
 801467c:	3718      	adds	r7, #24
 801467e:	46bd      	mov	sp, r7
 8014680:	bdb0      	pop	{r4, r5, r7, pc}
 8014682:	bf00      	nop
 8014684:	0801aca8 	.word	0x0801aca8
 8014688:	0801adf8 	.word	0x0801adf8
 801468c:	0801ad20 	.word	0x0801ad20

08014690 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b086      	sub	sp, #24
 8014694:	af02      	add	r7, sp, #8
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	4613      	mov	r3, r2
 801469c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801469e:	79fa      	ldrb	r2, [r7, #7]
 80146a0:	4944      	ldr	r1, [pc, #272]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 80146a2:	4613      	mov	r3, r2
 80146a4:	005b      	lsls	r3, r3, #1
 80146a6:	4413      	add	r3, r2
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	440b      	add	r3, r1
 80146ac:	3314      	adds	r3, #20
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	d806      	bhi.n	80146c2 <etharp_output_to_arp_index+0x32>
 80146b4:	4b40      	ldr	r3, [pc, #256]	; (80147b8 <etharp_output_to_arp_index+0x128>)
 80146b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80146ba:	4940      	ldr	r1, [pc, #256]	; (80147bc <etharp_output_to_arp_index+0x12c>)
 80146bc:	4840      	ldr	r0, [pc, #256]	; (80147c0 <etharp_output_to_arp_index+0x130>)
 80146be:	f002 ffeb 	bl	8017698 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80146c2:	79fa      	ldrb	r2, [r7, #7]
 80146c4:	493b      	ldr	r1, [pc, #236]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 80146c6:	4613      	mov	r3, r2
 80146c8:	005b      	lsls	r3, r3, #1
 80146ca:	4413      	add	r3, r2
 80146cc:	00db      	lsls	r3, r3, #3
 80146ce:	440b      	add	r3, r1
 80146d0:	3314      	adds	r3, #20
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	2b02      	cmp	r3, #2
 80146d6:	d153      	bne.n	8014780 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80146d8:	79fa      	ldrb	r2, [r7, #7]
 80146da:	4936      	ldr	r1, [pc, #216]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 80146dc:	4613      	mov	r3, r2
 80146de:	005b      	lsls	r3, r3, #1
 80146e0:	4413      	add	r3, r2
 80146e2:	00db      	lsls	r3, r3, #3
 80146e4:	440b      	add	r3, r1
 80146e6:	3312      	adds	r3, #18
 80146e8:	881b      	ldrh	r3, [r3, #0]
 80146ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80146ee:	d919      	bls.n	8014724 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80146f0:	79fa      	ldrb	r2, [r7, #7]
 80146f2:	4613      	mov	r3, r2
 80146f4:	005b      	lsls	r3, r3, #1
 80146f6:	4413      	add	r3, r2
 80146f8:	00db      	lsls	r3, r3, #3
 80146fa:	4a2e      	ldr	r2, [pc, #184]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 80146fc:	4413      	add	r3, r2
 80146fe:	3304      	adds	r3, #4
 8014700:	4619      	mov	r1, r3
 8014702:	68f8      	ldr	r0, [r7, #12]
 8014704:	f000 fb4c 	bl	8014da0 <etharp_request>
 8014708:	4603      	mov	r3, r0
 801470a:	2b00      	cmp	r3, #0
 801470c:	d138      	bne.n	8014780 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801470e:	79fa      	ldrb	r2, [r7, #7]
 8014710:	4928      	ldr	r1, [pc, #160]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 8014712:	4613      	mov	r3, r2
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	4413      	add	r3, r2
 8014718:	00db      	lsls	r3, r3, #3
 801471a:	440b      	add	r3, r1
 801471c:	3314      	adds	r3, #20
 801471e:	2203      	movs	r2, #3
 8014720:	701a      	strb	r2, [r3, #0]
 8014722:	e02d      	b.n	8014780 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014724:	79fa      	ldrb	r2, [r7, #7]
 8014726:	4923      	ldr	r1, [pc, #140]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 8014728:	4613      	mov	r3, r2
 801472a:	005b      	lsls	r3, r3, #1
 801472c:	4413      	add	r3, r2
 801472e:	00db      	lsls	r3, r3, #3
 8014730:	440b      	add	r3, r1
 8014732:	3312      	adds	r3, #18
 8014734:	881b      	ldrh	r3, [r3, #0]
 8014736:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801473a:	d321      	bcc.n	8014780 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801473c:	79fa      	ldrb	r2, [r7, #7]
 801473e:	4613      	mov	r3, r2
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	4413      	add	r3, r2
 8014744:	00db      	lsls	r3, r3, #3
 8014746:	4a1b      	ldr	r2, [pc, #108]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 8014748:	4413      	add	r3, r2
 801474a:	1d19      	adds	r1, r3, #4
 801474c:	79fa      	ldrb	r2, [r7, #7]
 801474e:	4613      	mov	r3, r2
 8014750:	005b      	lsls	r3, r3, #1
 8014752:	4413      	add	r3, r2
 8014754:	00db      	lsls	r3, r3, #3
 8014756:	3308      	adds	r3, #8
 8014758:	4a16      	ldr	r2, [pc, #88]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 801475a:	4413      	add	r3, r2
 801475c:	3304      	adds	r3, #4
 801475e:	461a      	mov	r2, r3
 8014760:	68f8      	ldr	r0, [r7, #12]
 8014762:	f000 fafb 	bl	8014d5c <etharp_request_dst>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d109      	bne.n	8014780 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801476c:	79fa      	ldrb	r2, [r7, #7]
 801476e:	4911      	ldr	r1, [pc, #68]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 8014770:	4613      	mov	r3, r2
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	4413      	add	r3, r2
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	440b      	add	r3, r1
 801477a:	3314      	adds	r3, #20
 801477c:	2203      	movs	r2, #3
 801477e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014786:	79fa      	ldrb	r2, [r7, #7]
 8014788:	4613      	mov	r3, r2
 801478a:	005b      	lsls	r3, r3, #1
 801478c:	4413      	add	r3, r2
 801478e:	00db      	lsls	r3, r3, #3
 8014790:	3308      	adds	r3, #8
 8014792:	4a08      	ldr	r2, [pc, #32]	; (80147b4 <etharp_output_to_arp_index+0x124>)
 8014794:	4413      	add	r3, r2
 8014796:	3304      	adds	r3, #4
 8014798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801479c:	9200      	str	r2, [sp, #0]
 801479e:	460a      	mov	r2, r1
 80147a0:	68b9      	ldr	r1, [r7, #8]
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	f001 fe40 	bl	8016428 <ethernet_output>
 80147a8:	4603      	mov	r3, r0
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3710      	adds	r7, #16
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}
 80147b2:	bf00      	nop
 80147b4:	200089f4 	.word	0x200089f4
 80147b8:	0801aca8 	.word	0x0801aca8
 80147bc:	0801ae18 	.word	0x0801ae18
 80147c0:	0801ad20 	.word	0x0801ad20

080147c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b08a      	sub	sp, #40	; 0x28
 80147c8:	af02      	add	r7, sp, #8
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d106      	bne.n	80147e8 <etharp_output+0x24>
 80147da:	4b73      	ldr	r3, [pc, #460]	; (80149a8 <etharp_output+0x1e4>)
 80147dc:	f240 321e 	movw	r2, #798	; 0x31e
 80147e0:	4972      	ldr	r1, [pc, #456]	; (80149ac <etharp_output+0x1e8>)
 80147e2:	4873      	ldr	r0, [pc, #460]	; (80149b0 <etharp_output+0x1ec>)
 80147e4:	f002 ff58 	bl	8017698 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d106      	bne.n	80147fc <etharp_output+0x38>
 80147ee:	4b6e      	ldr	r3, [pc, #440]	; (80149a8 <etharp_output+0x1e4>)
 80147f0:	f240 321f 	movw	r2, #799	; 0x31f
 80147f4:	496f      	ldr	r1, [pc, #444]	; (80149b4 <etharp_output+0x1f0>)
 80147f6:	486e      	ldr	r0, [pc, #440]	; (80149b0 <etharp_output+0x1ec>)
 80147f8:	f002 ff4e 	bl	8017698 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d106      	bne.n	8014810 <etharp_output+0x4c>
 8014802:	4b69      	ldr	r3, [pc, #420]	; (80149a8 <etharp_output+0x1e4>)
 8014804:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014808:	496b      	ldr	r1, [pc, #428]	; (80149b8 <etharp_output+0x1f4>)
 801480a:	4869      	ldr	r0, [pc, #420]	; (80149b0 <etharp_output+0x1ec>)
 801480c:	f002 ff44 	bl	8017698 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	68f9      	ldr	r1, [r7, #12]
 8014816:	4618      	mov	r0, r3
 8014818:	f000 fef8 	bl	801560c <ip4_addr_isbroadcast_u32>
 801481c:	4603      	mov	r3, r0
 801481e:	2b00      	cmp	r3, #0
 8014820:	d002      	beq.n	8014828 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014822:	4b66      	ldr	r3, [pc, #408]	; (80149bc <etharp_output+0x1f8>)
 8014824:	61fb      	str	r3, [r7, #28]
 8014826:	e0af      	b.n	8014988 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014830:	2be0      	cmp	r3, #224	; 0xe0
 8014832:	d118      	bne.n	8014866 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014834:	2301      	movs	r3, #1
 8014836:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014838:	2300      	movs	r3, #0
 801483a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801483c:	235e      	movs	r3, #94	; 0x5e
 801483e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	3301      	adds	r3, #1
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801484a:	b2db      	uxtb	r3, r3
 801484c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	3302      	adds	r3, #2
 8014852:	781b      	ldrb	r3, [r3, #0]
 8014854:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	3303      	adds	r3, #3
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801485e:	f107 0310 	add.w	r3, r7, #16
 8014862:	61fb      	str	r3, [r7, #28]
 8014864:	e090      	b.n	8014988 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	3304      	adds	r3, #4
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	405a      	eors	r2, r3
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	3308      	adds	r3, #8
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4013      	ands	r3, r2
 801487a:	2b00      	cmp	r3, #0
 801487c:	d012      	beq.n	80148a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014884:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014888:	4293      	cmp	r3, r2
 801488a:	d00b      	beq.n	80148a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	330c      	adds	r3, #12
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d003      	beq.n	801489e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	330c      	adds	r3, #12
 801489a:	61bb      	str	r3, [r7, #24]
 801489c:	e002      	b.n	80148a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801489e:	f06f 0303 	mvn.w	r3, #3
 80148a2:	e07d      	b.n	80149a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80148a4:	4b46      	ldr	r3, [pc, #280]	; (80149c0 <etharp_output+0x1fc>)
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	4619      	mov	r1, r3
 80148aa:	4a46      	ldr	r2, [pc, #280]	; (80149c4 <etharp_output+0x200>)
 80148ac:	460b      	mov	r3, r1
 80148ae:	005b      	lsls	r3, r3, #1
 80148b0:	440b      	add	r3, r1
 80148b2:	00db      	lsls	r3, r3, #3
 80148b4:	4413      	add	r3, r2
 80148b6:	3314      	adds	r3, #20
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d925      	bls.n	801490a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80148be:	4b40      	ldr	r3, [pc, #256]	; (80149c0 <etharp_output+0x1fc>)
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	4619      	mov	r1, r3
 80148c4:	4a3f      	ldr	r2, [pc, #252]	; (80149c4 <etharp_output+0x200>)
 80148c6:	460b      	mov	r3, r1
 80148c8:	005b      	lsls	r3, r3, #1
 80148ca:	440b      	add	r3, r1
 80148cc:	00db      	lsls	r3, r3, #3
 80148ce:	4413      	add	r3, r2
 80148d0:	3308      	adds	r3, #8
 80148d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80148d4:	68fa      	ldr	r2, [r7, #12]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d117      	bne.n	801490a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	4b38      	ldr	r3, [pc, #224]	; (80149c0 <etharp_output+0x1fc>)
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	4618      	mov	r0, r3
 80148e4:	4937      	ldr	r1, [pc, #220]	; (80149c4 <etharp_output+0x200>)
 80148e6:	4603      	mov	r3, r0
 80148e8:	005b      	lsls	r3, r3, #1
 80148ea:	4403      	add	r3, r0
 80148ec:	00db      	lsls	r3, r3, #3
 80148ee:	440b      	add	r3, r1
 80148f0:	3304      	adds	r3, #4
 80148f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d108      	bne.n	801490a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80148f8:	4b31      	ldr	r3, [pc, #196]	; (80149c0 <etharp_output+0x1fc>)
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	461a      	mov	r2, r3
 80148fe:	68b9      	ldr	r1, [r7, #8]
 8014900:	68f8      	ldr	r0, [r7, #12]
 8014902:	f7ff fec5 	bl	8014690 <etharp_output_to_arp_index>
 8014906:	4603      	mov	r3, r0
 8014908:	e04a      	b.n	80149a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801490a:	2300      	movs	r3, #0
 801490c:	75fb      	strb	r3, [r7, #23]
 801490e:	e031      	b.n	8014974 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014910:	7dfa      	ldrb	r2, [r7, #23]
 8014912:	492c      	ldr	r1, [pc, #176]	; (80149c4 <etharp_output+0x200>)
 8014914:	4613      	mov	r3, r2
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	4413      	add	r3, r2
 801491a:	00db      	lsls	r3, r3, #3
 801491c:	440b      	add	r3, r1
 801491e:	3314      	adds	r3, #20
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	2b01      	cmp	r3, #1
 8014924:	d923      	bls.n	801496e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014926:	7dfa      	ldrb	r2, [r7, #23]
 8014928:	4926      	ldr	r1, [pc, #152]	; (80149c4 <etharp_output+0x200>)
 801492a:	4613      	mov	r3, r2
 801492c:	005b      	lsls	r3, r3, #1
 801492e:	4413      	add	r3, r2
 8014930:	00db      	lsls	r3, r3, #3
 8014932:	440b      	add	r3, r1
 8014934:	3308      	adds	r3, #8
 8014936:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014938:	68fa      	ldr	r2, [r7, #12]
 801493a:	429a      	cmp	r2, r3
 801493c:	d117      	bne.n	801496e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	6819      	ldr	r1, [r3, #0]
 8014942:	7dfa      	ldrb	r2, [r7, #23]
 8014944:	481f      	ldr	r0, [pc, #124]	; (80149c4 <etharp_output+0x200>)
 8014946:	4613      	mov	r3, r2
 8014948:	005b      	lsls	r3, r3, #1
 801494a:	4413      	add	r3, r2
 801494c:	00db      	lsls	r3, r3, #3
 801494e:	4403      	add	r3, r0
 8014950:	3304      	adds	r3, #4
 8014952:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014954:	4299      	cmp	r1, r3
 8014956:	d10a      	bne.n	801496e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014958:	4a19      	ldr	r2, [pc, #100]	; (80149c0 <etharp_output+0x1fc>)
 801495a:	7dfb      	ldrb	r3, [r7, #23]
 801495c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801495e:	7dfb      	ldrb	r3, [r7, #23]
 8014960:	461a      	mov	r2, r3
 8014962:	68b9      	ldr	r1, [r7, #8]
 8014964:	68f8      	ldr	r0, [r7, #12]
 8014966:	f7ff fe93 	bl	8014690 <etharp_output_to_arp_index>
 801496a:	4603      	mov	r3, r0
 801496c:	e018      	b.n	80149a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801496e:	7dfb      	ldrb	r3, [r7, #23]
 8014970:	3301      	adds	r3, #1
 8014972:	75fb      	strb	r3, [r7, #23]
 8014974:	7dfb      	ldrb	r3, [r7, #23]
 8014976:	2b09      	cmp	r3, #9
 8014978:	d9ca      	bls.n	8014910 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801497a:	68ba      	ldr	r2, [r7, #8]
 801497c:	69b9      	ldr	r1, [r7, #24]
 801497e:	68f8      	ldr	r0, [r7, #12]
 8014980:	f000 f822 	bl	80149c8 <etharp_query>
 8014984:	4603      	mov	r3, r0
 8014986:	e00b      	b.n	80149a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801498e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014992:	9300      	str	r3, [sp, #0]
 8014994:	69fb      	ldr	r3, [r7, #28]
 8014996:	68b9      	ldr	r1, [r7, #8]
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f001 fd45 	bl	8016428 <ethernet_output>
 801499e:	4603      	mov	r3, r0
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3720      	adds	r7, #32
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	0801aca8 	.word	0x0801aca8
 80149ac:	0801adf8 	.word	0x0801adf8
 80149b0:	0801ad20 	.word	0x0801ad20
 80149b4:	0801ae48 	.word	0x0801ae48
 80149b8:	0801ade8 	.word	0x0801ade8
 80149bc:	0801b6f8 	.word	0x0801b6f8
 80149c0:	20008ae4 	.word	0x20008ae4
 80149c4:	200089f4 	.word	0x200089f4

080149c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b08c      	sub	sp, #48	; 0x30
 80149cc:	af02      	add	r7, sp, #8
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	3326      	adds	r3, #38	; 0x26
 80149d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80149da:	23ff      	movs	r3, #255	; 0xff
 80149dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80149e0:	2300      	movs	r3, #0
 80149e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68f9      	ldr	r1, [r7, #12]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f000 fe0e 	bl	801560c <ip4_addr_isbroadcast_u32>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d10c      	bne.n	8014a10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80149fe:	2be0      	cmp	r3, #224	; 0xe0
 8014a00:	d006      	beq.n	8014a10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d003      	beq.n	8014a10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d102      	bne.n	8014a16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a10:	f06f 030f 	mvn.w	r3, #15
 8014a14:	e101      	b.n	8014c1a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	2101      	movs	r1, #1
 8014a1a:	68b8      	ldr	r0, [r7, #8]
 8014a1c:	f7ff fb60 	bl	80140e0 <etharp_find_entry>
 8014a20:	4603      	mov	r3, r0
 8014a22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014a24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	da02      	bge.n	8014a32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014a2c:	8a7b      	ldrh	r3, [r7, #18]
 8014a2e:	b25b      	sxtb	r3, r3
 8014a30:	e0f3      	b.n	8014c1a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014a32:	8a7b      	ldrh	r3, [r7, #18]
 8014a34:	2b7e      	cmp	r3, #126	; 0x7e
 8014a36:	d906      	bls.n	8014a46 <etharp_query+0x7e>
 8014a38:	4b7a      	ldr	r3, [pc, #488]	; (8014c24 <etharp_query+0x25c>)
 8014a3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014a3e:	497a      	ldr	r1, [pc, #488]	; (8014c28 <etharp_query+0x260>)
 8014a40:	487a      	ldr	r0, [pc, #488]	; (8014c2c <etharp_query+0x264>)
 8014a42:	f002 fe29 	bl	8017698 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014a46:	8a7b      	ldrh	r3, [r7, #18]
 8014a48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014a4a:	7c7a      	ldrb	r2, [r7, #17]
 8014a4c:	4978      	ldr	r1, [pc, #480]	; (8014c30 <etharp_query+0x268>)
 8014a4e:	4613      	mov	r3, r2
 8014a50:	005b      	lsls	r3, r3, #1
 8014a52:	4413      	add	r3, r2
 8014a54:	00db      	lsls	r3, r3, #3
 8014a56:	440b      	add	r3, r1
 8014a58:	3314      	adds	r3, #20
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d115      	bne.n	8014a8c <etharp_query+0xc4>
    is_new_entry = 1;
 8014a60:	2301      	movs	r3, #1
 8014a62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014a64:	7c7a      	ldrb	r2, [r7, #17]
 8014a66:	4972      	ldr	r1, [pc, #456]	; (8014c30 <etharp_query+0x268>)
 8014a68:	4613      	mov	r3, r2
 8014a6a:	005b      	lsls	r3, r3, #1
 8014a6c:	4413      	add	r3, r2
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	440b      	add	r3, r1
 8014a72:	3314      	adds	r3, #20
 8014a74:	2201      	movs	r2, #1
 8014a76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014a78:	7c7a      	ldrb	r2, [r7, #17]
 8014a7a:	496d      	ldr	r1, [pc, #436]	; (8014c30 <etharp_query+0x268>)
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	005b      	lsls	r3, r3, #1
 8014a80:	4413      	add	r3, r2
 8014a82:	00db      	lsls	r3, r3, #3
 8014a84:	440b      	add	r3, r1
 8014a86:	3308      	adds	r3, #8
 8014a88:	68fa      	ldr	r2, [r7, #12]
 8014a8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014a8c:	7c7a      	ldrb	r2, [r7, #17]
 8014a8e:	4968      	ldr	r1, [pc, #416]	; (8014c30 <etharp_query+0x268>)
 8014a90:	4613      	mov	r3, r2
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	4413      	add	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	440b      	add	r3, r1
 8014a9a:	3314      	adds	r3, #20
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d011      	beq.n	8014ac6 <etharp_query+0xfe>
 8014aa2:	7c7a      	ldrb	r2, [r7, #17]
 8014aa4:	4962      	ldr	r1, [pc, #392]	; (8014c30 <etharp_query+0x268>)
 8014aa6:	4613      	mov	r3, r2
 8014aa8:	005b      	lsls	r3, r3, #1
 8014aaa:	4413      	add	r3, r2
 8014aac:	00db      	lsls	r3, r3, #3
 8014aae:	440b      	add	r3, r1
 8014ab0:	3314      	adds	r3, #20
 8014ab2:	781b      	ldrb	r3, [r3, #0]
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d806      	bhi.n	8014ac6 <etharp_query+0xfe>
 8014ab8:	4b5a      	ldr	r3, [pc, #360]	; (8014c24 <etharp_query+0x25c>)
 8014aba:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014abe:	495d      	ldr	r1, [pc, #372]	; (8014c34 <etharp_query+0x26c>)
 8014ac0:	485a      	ldr	r0, [pc, #360]	; (8014c2c <etharp_query+0x264>)
 8014ac2:	f002 fde9 	bl	8017698 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014ac6:	6a3b      	ldr	r3, [r7, #32]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d102      	bne.n	8014ad2 <etharp_query+0x10a>
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d10c      	bne.n	8014aec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014ad2:	68b9      	ldr	r1, [r7, #8]
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	f000 f963 	bl	8014da0 <etharp_request>
 8014ada:	4603      	mov	r3, r0
 8014adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d102      	bne.n	8014aec <etharp_query+0x124>
      return result;
 8014ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014aea:	e096      	b.n	8014c1a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d106      	bne.n	8014b00 <etharp_query+0x138>
 8014af2:	4b4c      	ldr	r3, [pc, #304]	; (8014c24 <etharp_query+0x25c>)
 8014af4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014af8:	494f      	ldr	r1, [pc, #316]	; (8014c38 <etharp_query+0x270>)
 8014afa:	484c      	ldr	r0, [pc, #304]	; (8014c2c <etharp_query+0x264>)
 8014afc:	f002 fdcc 	bl	8017698 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014b00:	7c7a      	ldrb	r2, [r7, #17]
 8014b02:	494b      	ldr	r1, [pc, #300]	; (8014c30 <etharp_query+0x268>)
 8014b04:	4613      	mov	r3, r2
 8014b06:	005b      	lsls	r3, r3, #1
 8014b08:	4413      	add	r3, r2
 8014b0a:	00db      	lsls	r3, r3, #3
 8014b0c:	440b      	add	r3, r1
 8014b0e:	3314      	adds	r3, #20
 8014b10:	781b      	ldrb	r3, [r3, #0]
 8014b12:	2b01      	cmp	r3, #1
 8014b14:	d917      	bls.n	8014b46 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014b16:	4a49      	ldr	r2, [pc, #292]	; (8014c3c <etharp_query+0x274>)
 8014b18:	7c7b      	ldrb	r3, [r7, #17]
 8014b1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014b1c:	7c7a      	ldrb	r2, [r7, #17]
 8014b1e:	4613      	mov	r3, r2
 8014b20:	005b      	lsls	r3, r3, #1
 8014b22:	4413      	add	r3, r2
 8014b24:	00db      	lsls	r3, r3, #3
 8014b26:	3308      	adds	r3, #8
 8014b28:	4a41      	ldr	r2, [pc, #260]	; (8014c30 <etharp_query+0x268>)
 8014b2a:	4413      	add	r3, r2
 8014b2c:	3304      	adds	r3, #4
 8014b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b32:	9200      	str	r2, [sp, #0]
 8014b34:	697a      	ldr	r2, [r7, #20]
 8014b36:	6879      	ldr	r1, [r7, #4]
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	f001 fc75 	bl	8016428 <ethernet_output>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b44:	e067      	b.n	8014c16 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b46:	7c7a      	ldrb	r2, [r7, #17]
 8014b48:	4939      	ldr	r1, [pc, #228]	; (8014c30 <etharp_query+0x268>)
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	005b      	lsls	r3, r3, #1
 8014b4e:	4413      	add	r3, r2
 8014b50:	00db      	lsls	r3, r3, #3
 8014b52:	440b      	add	r3, r1
 8014b54:	3314      	adds	r3, #20
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d15c      	bne.n	8014c16 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b64:	e01c      	b.n	8014ba0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	895a      	ldrh	r2, [r3, #10]
 8014b6a:	69fb      	ldr	r3, [r7, #28]
 8014b6c:	891b      	ldrh	r3, [r3, #8]
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d10a      	bne.n	8014b88 <etharp_query+0x1c0>
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d006      	beq.n	8014b88 <etharp_query+0x1c0>
 8014b7a:	4b2a      	ldr	r3, [pc, #168]	; (8014c24 <etharp_query+0x25c>)
 8014b7c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014b80:	492f      	ldr	r1, [pc, #188]	; (8014c40 <etharp_query+0x278>)
 8014b82:	482a      	ldr	r0, [pc, #168]	; (8014c2c <etharp_query+0x264>)
 8014b84:	f002 fd88 	bl	8017698 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	7b1b      	ldrb	r3, [r3, #12]
 8014b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d002      	beq.n	8014b9a <etharp_query+0x1d2>
        copy_needed = 1;
 8014b94:	2301      	movs	r3, #1
 8014b96:	61bb      	str	r3, [r7, #24]
        break;
 8014b98:	e005      	b.n	8014ba6 <etharp_query+0x1de>
      }
      p = p->next;
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d1df      	bne.n	8014b66 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014ba6:	69bb      	ldr	r3, [r7, #24]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d007      	beq.n	8014bbc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014bb2:	200e      	movs	r0, #14
 8014bb4:	f7f9 fa38 	bl	800e028 <pbuf_clone>
 8014bb8:	61f8      	str	r0, [r7, #28]
 8014bba:	e004      	b.n	8014bc6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014bc0:	69f8      	ldr	r0, [r7, #28]
 8014bc2:	f7f9 f865 	bl	800dc90 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d021      	beq.n	8014c10 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014bcc:	7c7a      	ldrb	r2, [r7, #17]
 8014bce:	4918      	ldr	r1, [pc, #96]	; (8014c30 <etharp_query+0x268>)
 8014bd0:	4613      	mov	r3, r2
 8014bd2:	005b      	lsls	r3, r3, #1
 8014bd4:	4413      	add	r3, r2
 8014bd6:	00db      	lsls	r3, r3, #3
 8014bd8:	440b      	add	r3, r1
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d00a      	beq.n	8014bf6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014be0:	7c7a      	ldrb	r2, [r7, #17]
 8014be2:	4913      	ldr	r1, [pc, #76]	; (8014c30 <etharp_query+0x268>)
 8014be4:	4613      	mov	r3, r2
 8014be6:	005b      	lsls	r3, r3, #1
 8014be8:	4413      	add	r3, r2
 8014bea:	00db      	lsls	r3, r3, #3
 8014bec:	440b      	add	r3, r1
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7f8 ffad 	bl	800db50 <pbuf_free>
      }
      arp_table[i].q = p;
 8014bf6:	7c7a      	ldrb	r2, [r7, #17]
 8014bf8:	490d      	ldr	r1, [pc, #52]	; (8014c30 <etharp_query+0x268>)
 8014bfa:	4613      	mov	r3, r2
 8014bfc:	005b      	lsls	r3, r3, #1
 8014bfe:	4413      	add	r3, r2
 8014c00:	00db      	lsls	r3, r3, #3
 8014c02:	440b      	add	r3, r1
 8014c04:	69fa      	ldr	r2, [r7, #28]
 8014c06:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c0e:	e002      	b.n	8014c16 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014c10:	23ff      	movs	r3, #255	; 0xff
 8014c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014c16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3728      	adds	r7, #40	; 0x28
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop
 8014c24:	0801aca8 	.word	0x0801aca8
 8014c28:	0801ae54 	.word	0x0801ae54
 8014c2c:	0801ad20 	.word	0x0801ad20
 8014c30:	200089f4 	.word	0x200089f4
 8014c34:	0801ae64 	.word	0x0801ae64
 8014c38:	0801ae48 	.word	0x0801ae48
 8014c3c:	20008ae4 	.word	0x20008ae4
 8014c40:	0801ae8c 	.word	0x0801ae8c

08014c44 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b08a      	sub	sp, #40	; 0x28
 8014c48:	af02      	add	r7, sp, #8
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	60b9      	str	r1, [r7, #8]
 8014c4e:	607a      	str	r2, [r7, #4]
 8014c50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014c52:	2300      	movs	r3, #0
 8014c54:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d106      	bne.n	8014c6a <etharp_raw+0x26>
 8014c5c:	4b3a      	ldr	r3, [pc, #232]	; (8014d48 <etharp_raw+0x104>)
 8014c5e:	f240 4257 	movw	r2, #1111	; 0x457
 8014c62:	493a      	ldr	r1, [pc, #232]	; (8014d4c <etharp_raw+0x108>)
 8014c64:	483a      	ldr	r0, [pc, #232]	; (8014d50 <etharp_raw+0x10c>)
 8014c66:	f002 fd17 	bl	8017698 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c6e:	211c      	movs	r1, #28
 8014c70:	200e      	movs	r0, #14
 8014c72:	f7f8 fc89 	bl	800d588 <pbuf_alloc>
 8014c76:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d102      	bne.n	8014c84 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c82:	e05d      	b.n	8014d40 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014c84:	69bb      	ldr	r3, [r7, #24]
 8014c86:	895b      	ldrh	r3, [r3, #10]
 8014c88:	2b1b      	cmp	r3, #27
 8014c8a:	d806      	bhi.n	8014c9a <etharp_raw+0x56>
 8014c8c:	4b2e      	ldr	r3, [pc, #184]	; (8014d48 <etharp_raw+0x104>)
 8014c8e:	f240 4262 	movw	r2, #1122	; 0x462
 8014c92:	4930      	ldr	r1, [pc, #192]	; (8014d54 <etharp_raw+0x110>)
 8014c94:	482e      	ldr	r0, [pc, #184]	; (8014d50 <etharp_raw+0x10c>)
 8014c96:	f002 fcff 	bl	8017698 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014c9a:	69bb      	ldr	r3, [r7, #24]
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014ca0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7f7 fbf6 	bl	800c494 <lwip_htons>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	461a      	mov	r2, r3
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014cb6:	2b06      	cmp	r3, #6
 8014cb8:	d006      	beq.n	8014cc8 <etharp_raw+0x84>
 8014cba:	4b23      	ldr	r3, [pc, #140]	; (8014d48 <etharp_raw+0x104>)
 8014cbc:	f240 4269 	movw	r2, #1129	; 0x469
 8014cc0:	4925      	ldr	r1, [pc, #148]	; (8014d58 <etharp_raw+0x114>)
 8014cc2:	4823      	ldr	r0, [pc, #140]	; (8014d50 <etharp_raw+0x10c>)
 8014cc4:	f002 fce8 	bl	8017698 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	3308      	adds	r3, #8
 8014ccc:	2206      	movs	r2, #6
 8014cce:	6839      	ldr	r1, [r7, #0]
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f002 ff20 	bl	8017b16 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	3312      	adds	r3, #18
 8014cda:	2206      	movs	r2, #6
 8014cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f002 ff19 	bl	8017b16 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	330e      	adds	r3, #14
 8014ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cea:	6812      	ldr	r2, [r2, #0]
 8014cec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	3318      	adds	r3, #24
 8014cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cf4:	6812      	ldr	r2, [r2, #0]
 8014cf6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	701a      	strb	r2, [r3, #0]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f042 0201 	orr.w	r2, r2, #1
 8014d04:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	f042 0208 	orr.w	r2, r2, #8
 8014d0e:	709a      	strb	r2, [r3, #2]
 8014d10:	2200      	movs	r2, #0
 8014d12:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	2206      	movs	r2, #6
 8014d18:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	2204      	movs	r2, #4
 8014d1e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014d20:	f640 0306 	movw	r3, #2054	; 0x806
 8014d24:	9300      	str	r3, [sp, #0]
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	68ba      	ldr	r2, [r7, #8]
 8014d2a:	69b9      	ldr	r1, [r7, #24]
 8014d2c:	68f8      	ldr	r0, [r7, #12]
 8014d2e:	f001 fb7b 	bl	8016428 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d32:	69b8      	ldr	r0, [r7, #24]
 8014d34:	f7f8 ff0c 	bl	800db50 <pbuf_free>
  p = NULL;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014d3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3720      	adds	r7, #32
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}
 8014d48:	0801aca8 	.word	0x0801aca8
 8014d4c:	0801adf8 	.word	0x0801adf8
 8014d50:	0801ad20 	.word	0x0801ad20
 8014d54:	0801aea8 	.word	0x0801aea8
 8014d58:	0801aedc 	.word	0x0801aedc

08014d5c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b088      	sub	sp, #32
 8014d60:	af04      	add	r7, sp, #16
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d78:	2201      	movs	r2, #1
 8014d7a:	9203      	str	r2, [sp, #12]
 8014d7c:	68ba      	ldr	r2, [r7, #8]
 8014d7e:	9202      	str	r2, [sp, #8]
 8014d80:	4a06      	ldr	r2, [pc, #24]	; (8014d9c <etharp_request_dst+0x40>)
 8014d82:	9201      	str	r2, [sp, #4]
 8014d84:	9300      	str	r3, [sp, #0]
 8014d86:	4603      	mov	r3, r0
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	68f8      	ldr	r0, [r7, #12]
 8014d8c:	f7ff ff5a 	bl	8014c44 <etharp_raw>
 8014d90:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	0801b700 	.word	0x0801b700

08014da0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014daa:	4a05      	ldr	r2, [pc, #20]	; (8014dc0 <etharp_request+0x20>)
 8014dac:	6839      	ldr	r1, [r7, #0]
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f7ff ffd4 	bl	8014d5c <etharp_request_dst>
 8014db4:	4603      	mov	r3, r0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3708      	adds	r7, #8
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	0801b6f8 	.word	0x0801b6f8

08014dc4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b08e      	sub	sp, #56	; 0x38
 8014dc8:	af04      	add	r7, sp, #16
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014dce:	4b79      	ldr	r3, [pc, #484]	; (8014fb4 <icmp_input+0x1f0>)
 8014dd0:	689b      	ldr	r3, [r3, #8]
 8014dd2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd6:	781b      	ldrb	r3, [r3, #0]
 8014dd8:	f003 030f 	and.w	r3, r3, #15
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	b2db      	uxtb	r3, r3
 8014de2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014de4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014de6:	2b13      	cmp	r3, #19
 8014de8:	f240 80cd 	bls.w	8014f86 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	895b      	ldrh	r3, [r3, #10]
 8014df0:	2b03      	cmp	r3, #3
 8014df2:	f240 80ca 	bls.w	8014f8a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	685b      	ldr	r3, [r3, #4]
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014e00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f000 80b7 	beq.w	8014f78 <icmp_input+0x1b4>
 8014e0a:	2b08      	cmp	r3, #8
 8014e0c:	f040 80b7 	bne.w	8014f7e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014e10:	4b69      	ldr	r3, [pc, #420]	; (8014fb8 <icmp_input+0x1f4>)
 8014e12:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e14:	4b67      	ldr	r3, [pc, #412]	; (8014fb4 <icmp_input+0x1f0>)
 8014e16:	695b      	ldr	r3, [r3, #20]
 8014e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e1c:	2be0      	cmp	r3, #224	; 0xe0
 8014e1e:	f000 80bb 	beq.w	8014f98 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e22:	4b64      	ldr	r3, [pc, #400]	; (8014fb4 <icmp_input+0x1f0>)
 8014e24:	695b      	ldr	r3, [r3, #20]
 8014e26:	4a63      	ldr	r2, [pc, #396]	; (8014fb4 <icmp_input+0x1f0>)
 8014e28:	6812      	ldr	r2, [r2, #0]
 8014e2a:	4611      	mov	r1, r2
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f000 fbed 	bl	801560c <ip4_addr_isbroadcast_u32>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f040 80b1 	bne.w	8014f9c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	891b      	ldrh	r3, [r3, #8]
 8014e3e:	2b07      	cmp	r3, #7
 8014e40:	f240 80a5 	bls.w	8014f8e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e46:	330e      	adds	r3, #14
 8014e48:	4619      	mov	r1, r3
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f7f8 fdea 	bl	800da24 <pbuf_add_header>
 8014e50:	4603      	mov	r3, r0
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d04b      	beq.n	8014eee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	891a      	ldrh	r2, [r3, #8]
 8014e5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e5c:	4413      	add	r3, r2
 8014e5e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	891b      	ldrh	r3, [r3, #8]
 8014e64:	8b7a      	ldrh	r2, [r7, #26]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	f0c0 809a 	bcc.w	8014fa0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014e6c:	8b7b      	ldrh	r3, [r7, #26]
 8014e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e72:	4619      	mov	r1, r3
 8014e74:	200e      	movs	r0, #14
 8014e76:	f7f8 fb87 	bl	800d588 <pbuf_alloc>
 8014e7a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	f000 8090 	beq.w	8014fa4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	895b      	ldrh	r3, [r3, #10]
 8014e88:	461a      	mov	r2, r3
 8014e8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d203      	bcs.n	8014e9a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014e92:	6978      	ldr	r0, [r7, #20]
 8014e94:	f7f8 fe5c 	bl	800db50 <pbuf_free>
          goto icmperr;
 8014e98:	e085      	b.n	8014fa6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f002 fe37 	bl	8017b16 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014eaa:	4619      	mov	r1, r3
 8014eac:	6978      	ldr	r0, [r7, #20]
 8014eae:	f7f8 fdc9 	bl	800da44 <pbuf_remove_header>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d009      	beq.n	8014ecc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014eb8:	4b40      	ldr	r3, [pc, #256]	; (8014fbc <icmp_input+0x1f8>)
 8014eba:	22b6      	movs	r2, #182	; 0xb6
 8014ebc:	4940      	ldr	r1, [pc, #256]	; (8014fc0 <icmp_input+0x1fc>)
 8014ebe:	4841      	ldr	r0, [pc, #260]	; (8014fc4 <icmp_input+0x200>)
 8014ec0:	f002 fbea 	bl	8017698 <iprintf>
          pbuf_free(r);
 8014ec4:	6978      	ldr	r0, [r7, #20]
 8014ec6:	f7f8 fe43 	bl	800db50 <pbuf_free>
          goto icmperr;
 8014eca:	e06c      	b.n	8014fa6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014ecc:	6879      	ldr	r1, [r7, #4]
 8014ece:	6978      	ldr	r0, [r7, #20]
 8014ed0:	f7f8 ff66 	bl	800dda0 <pbuf_copy>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d003      	beq.n	8014ee2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014eda:	6978      	ldr	r0, [r7, #20]
 8014edc:	f7f8 fe38 	bl	800db50 <pbuf_free>
          goto icmperr;
 8014ee0:	e061      	b.n	8014fa6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7f8 fe34 	bl	800db50 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	607b      	str	r3, [r7, #4]
 8014eec:	e00f      	b.n	8014f0e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ef0:	330e      	adds	r3, #14
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f7f8 fda5 	bl	800da44 <pbuf_remove_header>
 8014efa:	4603      	mov	r3, r0
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d006      	beq.n	8014f0e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014f00:	4b2e      	ldr	r3, [pc, #184]	; (8014fbc <icmp_input+0x1f8>)
 8014f02:	22c7      	movs	r2, #199	; 0xc7
 8014f04:	4930      	ldr	r1, [pc, #192]	; (8014fc8 <icmp_input+0x204>)
 8014f06:	482f      	ldr	r0, [pc, #188]	; (8014fc4 <icmp_input+0x200>)
 8014f08:	f002 fbc6 	bl	8017698 <iprintf>
          goto icmperr;
 8014f0c:	e04b      	b.n	8014fa6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f16:	4619      	mov	r1, r3
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f7f8 fd83 	bl	800da24 <pbuf_add_header>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d12b      	bne.n	8014f7c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f32:	4b20      	ldr	r3, [pc, #128]	; (8014fb4 <icmp_input+0x1f0>)
 8014f34:	691a      	ldr	r2, [r3, #16]
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	2200      	movs	r2, #0
 8014f44:	709a      	strb	r2, [r3, #2]
 8014f46:	2200      	movs	r2, #0
 8014f48:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	22ff      	movs	r2, #255	; 0xff
 8014f4e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2200      	movs	r2, #0
 8014f54:	729a      	strb	r2, [r3, #10]
 8014f56:	2200      	movs	r2, #0
 8014f58:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	9302      	str	r3, [sp, #8]
 8014f5e:	2301      	movs	r3, #1
 8014f60:	9301      	str	r3, [sp, #4]
 8014f62:	2300      	movs	r3, #0
 8014f64:	9300      	str	r3, [sp, #0]
 8014f66:	23ff      	movs	r3, #255	; 0xff
 8014f68:	2200      	movs	r2, #0
 8014f6a:	69f9      	ldr	r1, [r7, #28]
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f000 fa75 	bl	801545c <ip4_output_if>
 8014f72:	4603      	mov	r3, r0
 8014f74:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014f76:	e001      	b.n	8014f7c <icmp_input+0x1b8>
      break;
 8014f78:	bf00      	nop
 8014f7a:	e000      	b.n	8014f7e <icmp_input+0x1ba>
      break;
 8014f7c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f7f8 fde6 	bl	800db50 <pbuf_free>
  return;
 8014f84:	e013      	b.n	8014fae <icmp_input+0x1ea>
    goto lenerr;
 8014f86:	bf00      	nop
 8014f88:	e002      	b.n	8014f90 <icmp_input+0x1cc>
    goto lenerr;
 8014f8a:	bf00      	nop
 8014f8c:	e000      	b.n	8014f90 <icmp_input+0x1cc>
        goto lenerr;
 8014f8e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f7f8 fddd 	bl	800db50 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014f96:	e00a      	b.n	8014fae <icmp_input+0x1ea>
        goto icmperr;
 8014f98:	bf00      	nop
 8014f9a:	e004      	b.n	8014fa6 <icmp_input+0x1e2>
        goto icmperr;
 8014f9c:	bf00      	nop
 8014f9e:	e002      	b.n	8014fa6 <icmp_input+0x1e2>
          goto icmperr;
 8014fa0:	bf00      	nop
 8014fa2:	e000      	b.n	8014fa6 <icmp_input+0x1e2>
          goto icmperr;
 8014fa4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f7f8 fdd2 	bl	800db50 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014fac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014fae:	3728      	adds	r7, #40	; 0x28
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	20005424 	.word	0x20005424
 8014fb8:	20005438 	.word	0x20005438
 8014fbc:	0801af20 	.word	0x0801af20
 8014fc0:	0801af58 	.word	0x0801af58
 8014fc4:	0801af90 	.word	0x0801af90
 8014fc8:	0801afb8 	.word	0x0801afb8

08014fcc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014fd8:	78fb      	ldrb	r3, [r7, #3]
 8014fda:	461a      	mov	r2, r3
 8014fdc:	2103      	movs	r1, #3
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 f814 	bl	801500c <icmp_send_response>
}
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	460b      	mov	r3, r1
 8014ff6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014ff8:	78fb      	ldrb	r3, [r7, #3]
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	210b      	movs	r1, #11
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f000 f804 	bl	801500c <icmp_send_response>
}
 8015004:	bf00      	nop
 8015006:	3708      	adds	r7, #8
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}

0801500c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b08c      	sub	sp, #48	; 0x30
 8015010:	af04      	add	r7, sp, #16
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	460b      	mov	r3, r1
 8015016:	70fb      	strb	r3, [r7, #3]
 8015018:	4613      	mov	r3, r2
 801501a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801501c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015020:	2124      	movs	r1, #36	; 0x24
 8015022:	2022      	movs	r0, #34	; 0x22
 8015024:	f7f8 fab0 	bl	800d588 <pbuf_alloc>
 8015028:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d04c      	beq.n	80150ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	895b      	ldrh	r3, [r3, #10]
 8015034:	2b23      	cmp	r3, #35	; 0x23
 8015036:	d806      	bhi.n	8015046 <icmp_send_response+0x3a>
 8015038:	4b26      	ldr	r3, [pc, #152]	; (80150d4 <icmp_send_response+0xc8>)
 801503a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801503e:	4926      	ldr	r1, [pc, #152]	; (80150d8 <icmp_send_response+0xcc>)
 8015040:	4826      	ldr	r0, [pc, #152]	; (80150dc <icmp_send_response+0xd0>)
 8015042:	f002 fb29 	bl	8017698 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	78fa      	ldrb	r2, [r7, #3]
 8015056:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	78ba      	ldrb	r2, [r7, #2]
 801505c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	2200      	movs	r2, #0
 8015062:	711a      	strb	r2, [r3, #4]
 8015064:	2200      	movs	r2, #0
 8015066:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	2200      	movs	r2, #0
 801506c:	719a      	strb	r2, [r3, #6]
 801506e:	2200      	movs	r2, #0
 8015070:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	f103 0008 	add.w	r0, r3, #8
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	221c      	movs	r2, #28
 8015080:	4619      	mov	r1, r3
 8015082:	f002 fd48 	bl	8017b16 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015086:	69bb      	ldr	r3, [r7, #24]
 8015088:	68db      	ldr	r3, [r3, #12]
 801508a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801508c:	f107 030c 	add.w	r3, r7, #12
 8015090:	4618      	mov	r0, r3
 8015092:	f000 f825 	bl	80150e0 <ip4_route>
 8015096:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d011      	beq.n	80150c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	2200      	movs	r2, #0
 80150a2:	709a      	strb	r2, [r3, #2]
 80150a4:	2200      	movs	r2, #0
 80150a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80150a8:	f107 020c 	add.w	r2, r7, #12
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	9302      	str	r3, [sp, #8]
 80150b0:	2301      	movs	r3, #1
 80150b2:	9301      	str	r3, [sp, #4]
 80150b4:	2300      	movs	r3, #0
 80150b6:	9300      	str	r3, [sp, #0]
 80150b8:	23ff      	movs	r3, #255	; 0xff
 80150ba:	2100      	movs	r1, #0
 80150bc:	69f8      	ldr	r0, [r7, #28]
 80150be:	f000 f9cd 	bl	801545c <ip4_output_if>
  }
  pbuf_free(q);
 80150c2:	69f8      	ldr	r0, [r7, #28]
 80150c4:	f7f8 fd44 	bl	800db50 <pbuf_free>
 80150c8:	e000      	b.n	80150cc <icmp_send_response+0xc0>
    return;
 80150ca:	bf00      	nop
}
 80150cc:	3720      	adds	r7, #32
 80150ce:	46bd      	mov	sp, r7
 80150d0:	bd80      	pop	{r7, pc}
 80150d2:	bf00      	nop
 80150d4:	0801af20 	.word	0x0801af20
 80150d8:	0801afec 	.word	0x0801afec
 80150dc:	0801af90 	.word	0x0801af90

080150e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80150e0:	b480      	push	{r7}
 80150e2:	b085      	sub	sp, #20
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80150e8:	4b33      	ldr	r3, [pc, #204]	; (80151b8 <ip4_route+0xd8>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	60fb      	str	r3, [r7, #12]
 80150ee:	e036      	b.n	801515e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150f6:	f003 0301 	and.w	r3, r3, #1
 80150fa:	b2db      	uxtb	r3, r3
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d02b      	beq.n	8015158 <ip4_route+0x78>
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015106:	089b      	lsrs	r3, r3, #2
 8015108:	f003 0301 	and.w	r3, r3, #1
 801510c:	b2db      	uxtb	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d022      	beq.n	8015158 <ip4_route+0x78>
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	3304      	adds	r3, #4
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d01d      	beq.n	8015158 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	3304      	adds	r3, #4
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	405a      	eors	r2, r3
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	3308      	adds	r3, #8
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	4013      	ands	r3, r2
 8015130:	2b00      	cmp	r3, #0
 8015132:	d101      	bne.n	8015138 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	e038      	b.n	80151aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801513e:	f003 0302 	and.w	r3, r3, #2
 8015142:	2b00      	cmp	r3, #0
 8015144:	d108      	bne.n	8015158 <ip4_route+0x78>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	681a      	ldr	r2, [r3, #0]
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	330c      	adds	r3, #12
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	429a      	cmp	r2, r3
 8015152:	d101      	bne.n	8015158 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	e028      	b.n	80151aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	60fb      	str	r3, [r7, #12]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d1c5      	bne.n	80150f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015164:	4b15      	ldr	r3, [pc, #84]	; (80151bc <ip4_route+0xdc>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d01a      	beq.n	80151a2 <ip4_route+0xc2>
 801516c:	4b13      	ldr	r3, [pc, #76]	; (80151bc <ip4_route+0xdc>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015174:	f003 0301 	and.w	r3, r3, #1
 8015178:	2b00      	cmp	r3, #0
 801517a:	d012      	beq.n	80151a2 <ip4_route+0xc2>
 801517c:	4b0f      	ldr	r3, [pc, #60]	; (80151bc <ip4_route+0xdc>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015184:	f003 0304 	and.w	r3, r3, #4
 8015188:	2b00      	cmp	r3, #0
 801518a:	d00a      	beq.n	80151a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801518c:	4b0b      	ldr	r3, [pc, #44]	; (80151bc <ip4_route+0xdc>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	3304      	adds	r3, #4
 8015192:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015194:	2b00      	cmp	r3, #0
 8015196:	d004      	beq.n	80151a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	b2db      	uxtb	r3, r3
 801519e:	2b7f      	cmp	r3, #127	; 0x7f
 80151a0:	d101      	bne.n	80151a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	e001      	b.n	80151aa <ip4_route+0xca>
  }

  return netif_default;
 80151a6:	4b05      	ldr	r3, [pc, #20]	; (80151bc <ip4_route+0xdc>)
 80151a8:	681b      	ldr	r3, [r3, #0]
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3714      	adds	r7, #20
 80151ae:	46bd      	mov	sp, r7
 80151b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b4:	4770      	bx	lr
 80151b6:	bf00      	nop
 80151b8:	20008988 	.word	0x20008988
 80151bc:	2000898c 	.word	0x2000898c

080151c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b082      	sub	sp, #8
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151ce:	f003 0301 	and.w	r3, r3, #1
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d016      	beq.n	8015206 <ip4_input_accept+0x46>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	3304      	adds	r3, #4
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d011      	beq.n	8015206 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80151e2:	4b0b      	ldr	r3, [pc, #44]	; (8015210 <ip4_input_accept+0x50>)
 80151e4:	695a      	ldr	r2, [r3, #20]
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	3304      	adds	r3, #4
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d008      	beq.n	8015202 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80151f0:	4b07      	ldr	r3, [pc, #28]	; (8015210 <ip4_input_accept+0x50>)
 80151f2:	695b      	ldr	r3, [r3, #20]
 80151f4:	6879      	ldr	r1, [r7, #4]
 80151f6:	4618      	mov	r0, r3
 80151f8:	f000 fa08 	bl	801560c <ip4_addr_isbroadcast_u32>
 80151fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d001      	beq.n	8015206 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015202:	2301      	movs	r3, #1
 8015204:	e000      	b.n	8015208 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015206:	2300      	movs	r3, #0
}
 8015208:	4618      	mov	r0, r3
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}
 8015210:	20005424 	.word	0x20005424

08015214 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b086      	sub	sp, #24
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
 801521c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	091b      	lsrs	r3, r3, #4
 801522a:	b2db      	uxtb	r3, r3
 801522c:	2b04      	cmp	r3, #4
 801522e:	d004      	beq.n	801523a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7f8 fc8d 	bl	800db50 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015236:	2300      	movs	r3, #0
 8015238:	e107      	b.n	801544a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801523a:	697b      	ldr	r3, [r7, #20]
 801523c:	781b      	ldrb	r3, [r3, #0]
 801523e:	f003 030f 	and.w	r3, r3, #15
 8015242:	b2db      	uxtb	r3, r3
 8015244:	009b      	lsls	r3, r3, #2
 8015246:	b2db      	uxtb	r3, r3
 8015248:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	885b      	ldrh	r3, [r3, #2]
 801524e:	b29b      	uxth	r3, r3
 8015250:	4618      	mov	r0, r3
 8015252:	f7f7 f91f 	bl	800c494 <lwip_htons>
 8015256:	4603      	mov	r3, r0
 8015258:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	891b      	ldrh	r3, [r3, #8]
 801525e:	89ba      	ldrh	r2, [r7, #12]
 8015260:	429a      	cmp	r2, r3
 8015262:	d204      	bcs.n	801526e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015264:	89bb      	ldrh	r3, [r7, #12]
 8015266:	4619      	mov	r1, r3
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f7f8 faeb 	bl	800d844 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	895b      	ldrh	r3, [r3, #10]
 8015272:	89fa      	ldrh	r2, [r7, #14]
 8015274:	429a      	cmp	r2, r3
 8015276:	d807      	bhi.n	8015288 <ip4_input+0x74>
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	891b      	ldrh	r3, [r3, #8]
 801527c:	89ba      	ldrh	r2, [r7, #12]
 801527e:	429a      	cmp	r2, r3
 8015280:	d802      	bhi.n	8015288 <ip4_input+0x74>
 8015282:	89fb      	ldrh	r3, [r7, #14]
 8015284:	2b13      	cmp	r3, #19
 8015286:	d804      	bhi.n	8015292 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f7f8 fc61 	bl	800db50 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801528e:	2300      	movs	r3, #0
 8015290:	e0db      	b.n	801544a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015292:	697b      	ldr	r3, [r7, #20]
 8015294:	691b      	ldr	r3, [r3, #16]
 8015296:	4a6f      	ldr	r2, [pc, #444]	; (8015454 <ip4_input+0x240>)
 8015298:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	68db      	ldr	r3, [r3, #12]
 801529e:	4a6d      	ldr	r2, [pc, #436]	; (8015454 <ip4_input+0x240>)
 80152a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152a2:	4b6c      	ldr	r3, [pc, #432]	; (8015454 <ip4_input+0x240>)
 80152a4:	695b      	ldr	r3, [r3, #20]
 80152a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152aa:	2be0      	cmp	r3, #224	; 0xe0
 80152ac:	d112      	bne.n	80152d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152b4:	f003 0301 	and.w	r3, r3, #1
 80152b8:	b2db      	uxtb	r3, r3
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d007      	beq.n	80152ce <ip4_input+0xba>
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	3304      	adds	r3, #4
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d002      	beq.n	80152ce <ip4_input+0xba>
      netif = inp;
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	613b      	str	r3, [r7, #16]
 80152cc:	e02a      	b.n	8015324 <ip4_input+0x110>
    } else {
      netif = NULL;
 80152ce:	2300      	movs	r3, #0
 80152d0:	613b      	str	r3, [r7, #16]
 80152d2:	e027      	b.n	8015324 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80152d4:	6838      	ldr	r0, [r7, #0]
 80152d6:	f7ff ff73 	bl	80151c0 <ip4_input_accept>
 80152da:	4603      	mov	r3, r0
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d002      	beq.n	80152e6 <ip4_input+0xd2>
      netif = inp;
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	613b      	str	r3, [r7, #16]
 80152e4:	e01e      	b.n	8015324 <ip4_input+0x110>
    } else {
      netif = NULL;
 80152e6:	2300      	movs	r3, #0
 80152e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80152ea:	4b5a      	ldr	r3, [pc, #360]	; (8015454 <ip4_input+0x240>)
 80152ec:	695b      	ldr	r3, [r3, #20]
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	2b7f      	cmp	r3, #127	; 0x7f
 80152f2:	d017      	beq.n	8015324 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80152f4:	4b58      	ldr	r3, [pc, #352]	; (8015458 <ip4_input+0x244>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	613b      	str	r3, [r7, #16]
 80152fa:	e00e      	b.n	801531a <ip4_input+0x106>
          if (netif == inp) {
 80152fc:	693a      	ldr	r2, [r7, #16]
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	429a      	cmp	r2, r3
 8015302:	d006      	beq.n	8015312 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015304:	6938      	ldr	r0, [r7, #16]
 8015306:	f7ff ff5b 	bl	80151c0 <ip4_input_accept>
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d108      	bne.n	8015322 <ip4_input+0x10e>
 8015310:	e000      	b.n	8015314 <ip4_input+0x100>
            continue;
 8015312:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	613b      	str	r3, [r7, #16]
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d1ed      	bne.n	80152fc <ip4_input+0xe8>
 8015320:	e000      	b.n	8015324 <ip4_input+0x110>
            break;
 8015322:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015324:	4b4b      	ldr	r3, [pc, #300]	; (8015454 <ip4_input+0x240>)
 8015326:	691b      	ldr	r3, [r3, #16]
 8015328:	6839      	ldr	r1, [r7, #0]
 801532a:	4618      	mov	r0, r3
 801532c:	f000 f96e 	bl	801560c <ip4_addr_isbroadcast_u32>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	d105      	bne.n	8015342 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015336:	4b47      	ldr	r3, [pc, #284]	; (8015454 <ip4_input+0x240>)
 8015338:	691b      	ldr	r3, [r3, #16]
 801533a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801533e:	2be0      	cmp	r3, #224	; 0xe0
 8015340:	d104      	bne.n	801534c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f7f8 fc04 	bl	800db50 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015348:	2300      	movs	r3, #0
 801534a:	e07e      	b.n	801544a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d104      	bne.n	801535c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f7f8 fbfc 	bl	800db50 <pbuf_free>
    return ERR_OK;
 8015358:	2300      	movs	r3, #0
 801535a:	e076      	b.n	801544a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	88db      	ldrh	r3, [r3, #6]
 8015360:	b29b      	uxth	r3, r3
 8015362:	461a      	mov	r2, r3
 8015364:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015368:	4013      	ands	r3, r2
 801536a:	2b00      	cmp	r3, #0
 801536c:	d00b      	beq.n	8015386 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f000 fc92 	bl	8015c98 <ip4_reass>
 8015374:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d101      	bne.n	8015380 <ip4_input+0x16c>
      return ERR_OK;
 801537c:	2300      	movs	r3, #0
 801537e:	e064      	b.n	801544a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	685b      	ldr	r3, [r3, #4]
 8015384:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015386:	4a33      	ldr	r2, [pc, #204]	; (8015454 <ip4_input+0x240>)
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801538c:	4a31      	ldr	r2, [pc, #196]	; (8015454 <ip4_input+0x240>)
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015392:	4a30      	ldr	r2, [pc, #192]	; (8015454 <ip4_input+0x240>)
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	f003 030f 	and.w	r3, r3, #15
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	009b      	lsls	r3, r3, #2
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	b29a      	uxth	r2, r3
 80153a8:	4b2a      	ldr	r3, [pc, #168]	; (8015454 <ip4_input+0x240>)
 80153aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80153ac:	89fb      	ldrh	r3, [r7, #14]
 80153ae:	4619      	mov	r1, r3
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	f7f8 fb47 	bl	800da44 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80153b6:	697b      	ldr	r3, [r7, #20]
 80153b8:	7a5b      	ldrb	r3, [r3, #9]
 80153ba:	2b11      	cmp	r3, #17
 80153bc:	d006      	beq.n	80153cc <ip4_input+0x1b8>
 80153be:	2b11      	cmp	r3, #17
 80153c0:	dc13      	bgt.n	80153ea <ip4_input+0x1d6>
 80153c2:	2b01      	cmp	r3, #1
 80153c4:	d00c      	beq.n	80153e0 <ip4_input+0x1cc>
 80153c6:	2b06      	cmp	r3, #6
 80153c8:	d005      	beq.n	80153d6 <ip4_input+0x1c2>
 80153ca:	e00e      	b.n	80153ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80153cc:	6839      	ldr	r1, [r7, #0]
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f7fe f9b0 	bl	8013734 <udp_input>
        break;
 80153d4:	e026      	b.n	8015424 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80153d6:	6839      	ldr	r1, [r7, #0]
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f7fa f9f1 	bl	800f7c0 <tcp_input>
        break;
 80153de:	e021      	b.n	8015424 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80153e0:	6839      	ldr	r1, [r7, #0]
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f7ff fcee 	bl	8014dc4 <icmp_input>
        break;
 80153e8:	e01c      	b.n	8015424 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80153ea:	4b1a      	ldr	r3, [pc, #104]	; (8015454 <ip4_input+0x240>)
 80153ec:	695b      	ldr	r3, [r3, #20]
 80153ee:	6939      	ldr	r1, [r7, #16]
 80153f0:	4618      	mov	r0, r3
 80153f2:	f000 f90b 	bl	801560c <ip4_addr_isbroadcast_u32>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d10f      	bne.n	801541c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153fc:	4b15      	ldr	r3, [pc, #84]	; (8015454 <ip4_input+0x240>)
 80153fe:	695b      	ldr	r3, [r3, #20]
 8015400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015404:	2be0      	cmp	r3, #224	; 0xe0
 8015406:	d009      	beq.n	801541c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801540c:	4619      	mov	r1, r3
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7f8 fb8b 	bl	800db2a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015414:	2102      	movs	r1, #2
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f7ff fdd8 	bl	8014fcc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f7f8 fb97 	bl	800db50 <pbuf_free>
        break;
 8015422:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015424:	4b0b      	ldr	r3, [pc, #44]	; (8015454 <ip4_input+0x240>)
 8015426:	2200      	movs	r2, #0
 8015428:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801542a:	4b0a      	ldr	r3, [pc, #40]	; (8015454 <ip4_input+0x240>)
 801542c:	2200      	movs	r2, #0
 801542e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015430:	4b08      	ldr	r3, [pc, #32]	; (8015454 <ip4_input+0x240>)
 8015432:	2200      	movs	r2, #0
 8015434:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015436:	4b07      	ldr	r3, [pc, #28]	; (8015454 <ip4_input+0x240>)
 8015438:	2200      	movs	r2, #0
 801543a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801543c:	4b05      	ldr	r3, [pc, #20]	; (8015454 <ip4_input+0x240>)
 801543e:	2200      	movs	r2, #0
 8015440:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015442:	4b04      	ldr	r3, [pc, #16]	; (8015454 <ip4_input+0x240>)
 8015444:	2200      	movs	r2, #0
 8015446:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015448:	2300      	movs	r3, #0
}
 801544a:	4618      	mov	r0, r3
 801544c:	3718      	adds	r7, #24
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}
 8015452:	bf00      	nop
 8015454:	20005424 	.word	0x20005424
 8015458:	20008988 	.word	0x20008988

0801545c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b08a      	sub	sp, #40	; 0x28
 8015460:	af04      	add	r7, sp, #16
 8015462:	60f8      	str	r0, [r7, #12]
 8015464:	60b9      	str	r1, [r7, #8]
 8015466:	607a      	str	r2, [r7, #4]
 8015468:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d009      	beq.n	8015488 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d003      	beq.n	8015482 <ip4_output_if+0x26>
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d102      	bne.n	8015488 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015484:	3304      	adds	r3, #4
 8015486:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015488:	78fa      	ldrb	r2, [r7, #3]
 801548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801548c:	9302      	str	r3, [sp, #8]
 801548e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015492:	9301      	str	r3, [sp, #4]
 8015494:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015498:	9300      	str	r3, [sp, #0]
 801549a:	4613      	mov	r3, r2
 801549c:	687a      	ldr	r2, [r7, #4]
 801549e:	6979      	ldr	r1, [r7, #20]
 80154a0:	68f8      	ldr	r0, [r7, #12]
 80154a2:	f000 f805 	bl	80154b0 <ip4_output_if_src>
 80154a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3718      	adds	r7, #24
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b088      	sub	sp, #32
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
 80154bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	7b9b      	ldrb	r3, [r3, #14]
 80154c2:	2b01      	cmp	r3, #1
 80154c4:	d006      	beq.n	80154d4 <ip4_output_if_src+0x24>
 80154c6:	4b4b      	ldr	r3, [pc, #300]	; (80155f4 <ip4_output_if_src+0x144>)
 80154c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80154cc:	494a      	ldr	r1, [pc, #296]	; (80155f8 <ip4_output_if_src+0x148>)
 80154ce:	484b      	ldr	r0, [pc, #300]	; (80155fc <ip4_output_if_src+0x14c>)
 80154d0:	f002 f8e2 	bl	8017698 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d060      	beq.n	801559c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80154da:	2314      	movs	r3, #20
 80154dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80154de:	2114      	movs	r1, #20
 80154e0:	68f8      	ldr	r0, [r7, #12]
 80154e2:	f7f8 fa9f 	bl	800da24 <pbuf_add_header>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d002      	beq.n	80154f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80154ec:	f06f 0301 	mvn.w	r3, #1
 80154f0:	e07c      	b.n	80155ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	895b      	ldrh	r3, [r3, #10]
 80154fc:	2b13      	cmp	r3, #19
 80154fe:	d806      	bhi.n	801550e <ip4_output_if_src+0x5e>
 8015500:	4b3c      	ldr	r3, [pc, #240]	; (80155f4 <ip4_output_if_src+0x144>)
 8015502:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015506:	493e      	ldr	r1, [pc, #248]	; (8015600 <ip4_output_if_src+0x150>)
 8015508:	483c      	ldr	r0, [pc, #240]	; (80155fc <ip4_output_if_src+0x14c>)
 801550a:	f002 f8c5 	bl	8017698 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801550e:	69fb      	ldr	r3, [r7, #28]
 8015510:	78fa      	ldrb	r2, [r7, #3]
 8015512:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801551a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	69fb      	ldr	r3, [r7, #28]
 8015522:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015524:	8b7b      	ldrh	r3, [r7, #26]
 8015526:	089b      	lsrs	r3, r3, #2
 8015528:	b29b      	uxth	r3, r3
 801552a:	b2db      	uxtb	r3, r3
 801552c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015530:	b2da      	uxtb	r2, r3
 8015532:	69fb      	ldr	r3, [r7, #28]
 8015534:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801553c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	891b      	ldrh	r3, [r3, #8]
 8015542:	4618      	mov	r0, r3
 8015544:	f7f6 ffa6 	bl	800c494 <lwip_htons>
 8015548:	4603      	mov	r3, r0
 801554a:	461a      	mov	r2, r3
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015550:	69fb      	ldr	r3, [r7, #28]
 8015552:	2200      	movs	r2, #0
 8015554:	719a      	strb	r2, [r3, #6]
 8015556:	2200      	movs	r2, #0
 8015558:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801555a:	4b2a      	ldr	r3, [pc, #168]	; (8015604 <ip4_output_if_src+0x154>)
 801555c:	881b      	ldrh	r3, [r3, #0]
 801555e:	4618      	mov	r0, r3
 8015560:	f7f6 ff98 	bl	800c494 <lwip_htons>
 8015564:	4603      	mov	r3, r0
 8015566:	461a      	mov	r2, r3
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801556c:	4b25      	ldr	r3, [pc, #148]	; (8015604 <ip4_output_if_src+0x154>)
 801556e:	881b      	ldrh	r3, [r3, #0]
 8015570:	3301      	adds	r3, #1
 8015572:	b29a      	uxth	r2, r3
 8015574:	4b23      	ldr	r3, [pc, #140]	; (8015604 <ip4_output_if_src+0x154>)
 8015576:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d104      	bne.n	8015588 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801557e:	4b22      	ldr	r3, [pc, #136]	; (8015608 <ip4_output_if_src+0x158>)
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	60da      	str	r2, [r3, #12]
 8015586:	e003      	b.n	8015590 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015590:	69fb      	ldr	r3, [r7, #28]
 8015592:	2200      	movs	r2, #0
 8015594:	729a      	strb	r2, [r3, #10]
 8015596:	2200      	movs	r2, #0
 8015598:	72da      	strb	r2, [r3, #11]
 801559a:	e00f      	b.n	80155bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	895b      	ldrh	r3, [r3, #10]
 80155a0:	2b13      	cmp	r3, #19
 80155a2:	d802      	bhi.n	80155aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80155a4:	f06f 0301 	mvn.w	r3, #1
 80155a8:	e020      	b.n	80155ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80155b0:	69fb      	ldr	r3, [r7, #28]
 80155b2:	691b      	ldr	r3, [r3, #16]
 80155b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80155b6:	f107 0314 	add.w	r3, r7, #20
 80155ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80155bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d00c      	beq.n	80155de <ip4_output_if_src+0x12e>
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	891a      	ldrh	r2, [r3, #8]
 80155c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d906      	bls.n	80155de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80155d0:	687a      	ldr	r2, [r7, #4]
 80155d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80155d4:	68f8      	ldr	r0, [r7, #12]
 80155d6:	f000 fd53 	bl	8016080 <ip4_frag>
 80155da:	4603      	mov	r3, r0
 80155dc:	e006      	b.n	80155ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80155de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e0:	695b      	ldr	r3, [r3, #20]
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	68f9      	ldr	r1, [r7, #12]
 80155e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155e8:	4798      	blx	r3
 80155ea:	4603      	mov	r3, r0
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3720      	adds	r7, #32
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}
 80155f4:	0801b018 	.word	0x0801b018
 80155f8:	0801b04c 	.word	0x0801b04c
 80155fc:	0801b058 	.word	0x0801b058
 8015600:	0801b080 	.word	0x0801b080
 8015604:	20008ae6 	.word	0x20008ae6
 8015608:	0801b6f4 	.word	0x0801b6f4

0801560c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801560c:	b480      	push	{r7}
 801560e:	b085      	sub	sp, #20
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015620:	d002      	beq.n	8015628 <ip4_addr_isbroadcast_u32+0x1c>
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d101      	bne.n	801562c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015628:	2301      	movs	r3, #1
 801562a:	e02a      	b.n	8015682 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015632:	f003 0302 	and.w	r3, r3, #2
 8015636:	2b00      	cmp	r3, #0
 8015638:	d101      	bne.n	801563e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801563a:	2300      	movs	r3, #0
 801563c:	e021      	b.n	8015682 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	3304      	adds	r3, #4
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	429a      	cmp	r2, r3
 8015648:	d101      	bne.n	801564e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801564a:	2300      	movs	r3, #0
 801564c:	e019      	b.n	8015682 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801564e:	68fa      	ldr	r2, [r7, #12]
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	3304      	adds	r3, #4
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	405a      	eors	r2, r3
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	3308      	adds	r3, #8
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	4013      	ands	r3, r2
 8015660:	2b00      	cmp	r3, #0
 8015662:	d10d      	bne.n	8015680 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	3308      	adds	r3, #8
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	43da      	mvns	r2, r3
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	3308      	adds	r3, #8
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015678:	429a      	cmp	r2, r3
 801567a:	d101      	bne.n	8015680 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801567c:	2301      	movs	r3, #1
 801567e:	e000      	b.n	8015682 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015680:	2300      	movs	r3, #0
  }
}
 8015682:	4618      	mov	r0, r3
 8015684:	3714      	adds	r7, #20
 8015686:	46bd      	mov	sp, r7
 8015688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568c:	4770      	bx	lr
	...

08015690 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015696:	2300      	movs	r3, #0
 8015698:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801569a:	4b12      	ldr	r3, [pc, #72]	; (80156e4 <ip_reass_tmr+0x54>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80156a0:	e018      	b.n	80156d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	7fdb      	ldrb	r3, [r3, #31]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d00b      	beq.n	80156c2 <ip_reass_tmr+0x32>
      r->timer--;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	7fdb      	ldrb	r3, [r3, #31]
 80156ae:	3b01      	subs	r3, #1
 80156b0:	b2da      	uxtb	r2, r3
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	60fb      	str	r3, [r7, #12]
 80156c0:	e008      	b.n	80156d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80156cc:	68b9      	ldr	r1, [r7, #8]
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f000 f80a 	bl	80156e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d1e3      	bne.n	80156a2 <ip_reass_tmr+0x12>
    }
  }
}
 80156da:	bf00      	nop
 80156dc:	bf00      	nop
 80156de:	3710      	adds	r7, #16
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}
 80156e4:	20008ae8 	.word	0x20008ae8

080156e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b088      	sub	sp, #32
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80156f2:	2300      	movs	r3, #0
 80156f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80156f6:	683a      	ldr	r2, [r7, #0]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d105      	bne.n	801570a <ip_reass_free_complete_datagram+0x22>
 80156fe:	4b45      	ldr	r3, [pc, #276]	; (8015814 <ip_reass_free_complete_datagram+0x12c>)
 8015700:	22ab      	movs	r2, #171	; 0xab
 8015702:	4945      	ldr	r1, [pc, #276]	; (8015818 <ip_reass_free_complete_datagram+0x130>)
 8015704:	4845      	ldr	r0, [pc, #276]	; (801581c <ip_reass_free_complete_datagram+0x134>)
 8015706:	f001 ffc7 	bl	8017698 <iprintf>
  if (prev != NULL) {
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d00a      	beq.n	8015726 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	429a      	cmp	r2, r3
 8015718:	d005      	beq.n	8015726 <ip_reass_free_complete_datagram+0x3e>
 801571a:	4b3e      	ldr	r3, [pc, #248]	; (8015814 <ip_reass_free_complete_datagram+0x12c>)
 801571c:	22ad      	movs	r2, #173	; 0xad
 801571e:	4940      	ldr	r1, [pc, #256]	; (8015820 <ip_reass_free_complete_datagram+0x138>)
 8015720:	483e      	ldr	r0, [pc, #248]	; (801581c <ip_reass_free_complete_datagram+0x134>)
 8015722:	f001 ffb9 	bl	8017698 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	889b      	ldrh	r3, [r3, #4]
 8015732:	b29b      	uxth	r3, r3
 8015734:	2b00      	cmp	r3, #0
 8015736:	d12a      	bne.n	801578e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	685b      	ldr	r3, [r3, #4]
 801573c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	6858      	ldr	r0, [r3, #4]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	3308      	adds	r3, #8
 801574e:	2214      	movs	r2, #20
 8015750:	4619      	mov	r1, r3
 8015752:	f002 f9e0 	bl	8017b16 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015756:	2101      	movs	r1, #1
 8015758:	69b8      	ldr	r0, [r7, #24]
 801575a:	f7ff fc47 	bl	8014fec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801575e:	69b8      	ldr	r0, [r7, #24]
 8015760:	f7f8 fa7e 	bl	800dc60 <pbuf_clen>
 8015764:	4603      	mov	r3, r0
 8015766:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015768:	8bfa      	ldrh	r2, [r7, #30]
 801576a:	8a7b      	ldrh	r3, [r7, #18]
 801576c:	4413      	add	r3, r2
 801576e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015772:	db05      	blt.n	8015780 <ip_reass_free_complete_datagram+0x98>
 8015774:	4b27      	ldr	r3, [pc, #156]	; (8015814 <ip_reass_free_complete_datagram+0x12c>)
 8015776:	22bc      	movs	r2, #188	; 0xbc
 8015778:	492a      	ldr	r1, [pc, #168]	; (8015824 <ip_reass_free_complete_datagram+0x13c>)
 801577a:	4828      	ldr	r0, [pc, #160]	; (801581c <ip_reass_free_complete_datagram+0x134>)
 801577c:	f001 ff8c 	bl	8017698 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015780:	8bfa      	ldrh	r2, [r7, #30]
 8015782:	8a7b      	ldrh	r3, [r7, #18]
 8015784:	4413      	add	r3, r2
 8015786:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015788:	69b8      	ldr	r0, [r7, #24]
 801578a:	f7f8 f9e1 	bl	800db50 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015794:	e01f      	b.n	80157d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015796:	69bb      	ldr	r3, [r7, #24]
 8015798:	685b      	ldr	r3, [r3, #4]
 801579a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80157a6:	68f8      	ldr	r0, [r7, #12]
 80157a8:	f7f8 fa5a 	bl	800dc60 <pbuf_clen>
 80157ac:	4603      	mov	r3, r0
 80157ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157b0:	8bfa      	ldrh	r2, [r7, #30]
 80157b2:	8a7b      	ldrh	r3, [r7, #18]
 80157b4:	4413      	add	r3, r2
 80157b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157ba:	db05      	blt.n	80157c8 <ip_reass_free_complete_datagram+0xe0>
 80157bc:	4b15      	ldr	r3, [pc, #84]	; (8015814 <ip_reass_free_complete_datagram+0x12c>)
 80157be:	22cc      	movs	r2, #204	; 0xcc
 80157c0:	4918      	ldr	r1, [pc, #96]	; (8015824 <ip_reass_free_complete_datagram+0x13c>)
 80157c2:	4816      	ldr	r0, [pc, #88]	; (801581c <ip_reass_free_complete_datagram+0x134>)
 80157c4:	f001 ff68 	bl	8017698 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80157c8:	8bfa      	ldrh	r2, [r7, #30]
 80157ca:	8a7b      	ldrh	r3, [r7, #18]
 80157cc:	4413      	add	r3, r2
 80157ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80157d0:	68f8      	ldr	r0, [r7, #12]
 80157d2:	f7f8 f9bd 	bl	800db50 <pbuf_free>
  while (p != NULL) {
 80157d6:	69bb      	ldr	r3, [r7, #24]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d1dc      	bne.n	8015796 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80157dc:	6839      	ldr	r1, [r7, #0]
 80157de:	6878      	ldr	r0, [r7, #4]
 80157e0:	f000 f8c2 	bl	8015968 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80157e4:	4b10      	ldr	r3, [pc, #64]	; (8015828 <ip_reass_free_complete_datagram+0x140>)
 80157e6:	881b      	ldrh	r3, [r3, #0]
 80157e8:	8bfa      	ldrh	r2, [r7, #30]
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d905      	bls.n	80157fa <ip_reass_free_complete_datagram+0x112>
 80157ee:	4b09      	ldr	r3, [pc, #36]	; (8015814 <ip_reass_free_complete_datagram+0x12c>)
 80157f0:	22d2      	movs	r2, #210	; 0xd2
 80157f2:	490e      	ldr	r1, [pc, #56]	; (801582c <ip_reass_free_complete_datagram+0x144>)
 80157f4:	4809      	ldr	r0, [pc, #36]	; (801581c <ip_reass_free_complete_datagram+0x134>)
 80157f6:	f001 ff4f 	bl	8017698 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80157fa:	4b0b      	ldr	r3, [pc, #44]	; (8015828 <ip_reass_free_complete_datagram+0x140>)
 80157fc:	881a      	ldrh	r2, [r3, #0]
 80157fe:	8bfb      	ldrh	r3, [r7, #30]
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	b29a      	uxth	r2, r3
 8015804:	4b08      	ldr	r3, [pc, #32]	; (8015828 <ip_reass_free_complete_datagram+0x140>)
 8015806:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015808:	8bfb      	ldrh	r3, [r7, #30]
}
 801580a:	4618      	mov	r0, r3
 801580c:	3720      	adds	r7, #32
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}
 8015812:	bf00      	nop
 8015814:	0801b0b0 	.word	0x0801b0b0
 8015818:	0801b0ec 	.word	0x0801b0ec
 801581c:	0801b0f8 	.word	0x0801b0f8
 8015820:	0801b120 	.word	0x0801b120
 8015824:	0801b134 	.word	0x0801b134
 8015828:	20008aec 	.word	0x20008aec
 801582c:	0801b154 	.word	0x0801b154

08015830 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b08a      	sub	sp, #40	; 0x28
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801583a:	2300      	movs	r3, #0
 801583c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801583e:	2300      	movs	r3, #0
 8015840:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015842:	2300      	movs	r3, #0
 8015844:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015846:	2300      	movs	r3, #0
 8015848:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801584a:	2300      	movs	r3, #0
 801584c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801584e:	4b28      	ldr	r3, [pc, #160]	; (80158f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015854:	e030      	b.n	80158b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015858:	695a      	ldr	r2, [r3, #20]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	68db      	ldr	r3, [r3, #12]
 801585e:	429a      	cmp	r2, r3
 8015860:	d10c      	bne.n	801587c <ip_reass_remove_oldest_datagram+0x4c>
 8015862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015864:	699a      	ldr	r2, [r3, #24]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	691b      	ldr	r3, [r3, #16]
 801586a:	429a      	cmp	r2, r3
 801586c:	d106      	bne.n	801587c <ip_reass_remove_oldest_datagram+0x4c>
 801586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015870:	899a      	ldrh	r2, [r3, #12]
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	889b      	ldrh	r3, [r3, #4]
 8015876:	b29b      	uxth	r3, r3
 8015878:	429a      	cmp	r2, r3
 801587a:	d014      	beq.n	80158a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	3301      	adds	r3, #1
 8015880:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015882:	6a3b      	ldr	r3, [r7, #32]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d104      	bne.n	8015892 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	61bb      	str	r3, [r7, #24]
 8015890:	e009      	b.n	80158a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015894:	7fda      	ldrb	r2, [r3, #31]
 8015896:	6a3b      	ldr	r3, [r7, #32]
 8015898:	7fdb      	ldrb	r3, [r3, #31]
 801589a:	429a      	cmp	r2, r3
 801589c:	d803      	bhi.n	80158a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80158a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d001      	beq.n	80158b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80158ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80158b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80158b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d1cb      	bne.n	8015856 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80158be:	6a3b      	ldr	r3, [r7, #32]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d008      	beq.n	80158d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80158c4:	69b9      	ldr	r1, [r7, #24]
 80158c6:	6a38      	ldr	r0, [r7, #32]
 80158c8:	f7ff ff0e 	bl	80156e8 <ip_reass_free_complete_datagram>
 80158cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80158ce:	697a      	ldr	r2, [r7, #20]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	4413      	add	r3, r2
 80158d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80158d6:	697a      	ldr	r2, [r7, #20]
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	429a      	cmp	r2, r3
 80158dc:	da02      	bge.n	80158e4 <ip_reass_remove_oldest_datagram+0xb4>
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	dcac      	bgt.n	801583e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80158e4:	697b      	ldr	r3, [r7, #20]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3728      	adds	r7, #40	; 0x28
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	20008ae8 	.word	0x20008ae8

080158f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80158fe:	2004      	movs	r0, #4
 8015900:	f7f7 fa40 	bl	800cd84 <memp_malloc>
 8015904:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d110      	bne.n	801592e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801590c:	6839      	ldr	r1, [r7, #0]
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7ff ff8e 	bl	8015830 <ip_reass_remove_oldest_datagram>
 8015914:	4602      	mov	r2, r0
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	4293      	cmp	r3, r2
 801591a:	dc03      	bgt.n	8015924 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801591c:	2004      	movs	r0, #4
 801591e:	f7f7 fa31 	bl	800cd84 <memp_malloc>
 8015922:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d101      	bne.n	801592e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801592a:	2300      	movs	r3, #0
 801592c:	e016      	b.n	801595c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801592e:	2220      	movs	r2, #32
 8015930:	2100      	movs	r1, #0
 8015932:	68f8      	ldr	r0, [r7, #12]
 8015934:	f002 f874 	bl	8017a20 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	220f      	movs	r2, #15
 801593c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801593e:	4b09      	ldr	r3, [pc, #36]	; (8015964 <ip_reass_enqueue_new_datagram+0x70>)
 8015940:	681a      	ldr	r2, [r3, #0]
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015946:	4a07      	ldr	r2, [pc, #28]	; (8015964 <ip_reass_enqueue_new_datagram+0x70>)
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	3308      	adds	r3, #8
 8015950:	2214      	movs	r2, #20
 8015952:	6879      	ldr	r1, [r7, #4]
 8015954:	4618      	mov	r0, r3
 8015956:	f002 f8de 	bl	8017b16 <memcpy>
  return ipr;
 801595a:	68fb      	ldr	r3, [r7, #12]
}
 801595c:	4618      	mov	r0, r3
 801595e:	3710      	adds	r7, #16
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}
 8015964:	20008ae8 	.word	0x20008ae8

08015968 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015972:	4b10      	ldr	r3, [pc, #64]	; (80159b4 <ip_reass_dequeue_datagram+0x4c>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	687a      	ldr	r2, [r7, #4]
 8015978:	429a      	cmp	r2, r3
 801597a:	d104      	bne.n	8015986 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	4a0c      	ldr	r2, [pc, #48]	; (80159b4 <ip_reass_dequeue_datagram+0x4c>)
 8015982:	6013      	str	r3, [r2, #0]
 8015984:	e00d      	b.n	80159a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d106      	bne.n	801599a <ip_reass_dequeue_datagram+0x32>
 801598c:	4b0a      	ldr	r3, [pc, #40]	; (80159b8 <ip_reass_dequeue_datagram+0x50>)
 801598e:	f240 1245 	movw	r2, #325	; 0x145
 8015992:	490a      	ldr	r1, [pc, #40]	; (80159bc <ip_reass_dequeue_datagram+0x54>)
 8015994:	480a      	ldr	r0, [pc, #40]	; (80159c0 <ip_reass_dequeue_datagram+0x58>)
 8015996:	f001 fe7f 	bl	8017698 <iprintf>
    prev->next = ipr->next;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80159a2:	6879      	ldr	r1, [r7, #4]
 80159a4:	2004      	movs	r0, #4
 80159a6:	f7f7 fa5d 	bl	800ce64 <memp_free>
}
 80159aa:	bf00      	nop
 80159ac:	3708      	adds	r7, #8
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	20008ae8 	.word	0x20008ae8
 80159b8:	0801b0b0 	.word	0x0801b0b0
 80159bc:	0801b178 	.word	0x0801b178
 80159c0:	0801b0f8 	.word	0x0801b0f8

080159c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b08c      	sub	sp, #48	; 0x30
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80159d0:	2300      	movs	r3, #0
 80159d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80159d4:	2301      	movs	r3, #1
 80159d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80159de:	69fb      	ldr	r3, [r7, #28]
 80159e0:	885b      	ldrh	r3, [r3, #2]
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f6 fd55 	bl	800c494 <lwip_htons>
 80159ea:	4603      	mov	r3, r0
 80159ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80159ee:	69fb      	ldr	r3, [r7, #28]
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	f003 030f 	and.w	r3, r3, #15
 80159f6:	b2db      	uxtb	r3, r3
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80159fc:	7e7b      	ldrb	r3, [r7, #25]
 80159fe:	b29b      	uxth	r3, r3
 8015a00:	8b7a      	ldrh	r2, [r7, #26]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d202      	bcs.n	8015a0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a06:	f04f 33ff 	mov.w	r3, #4294967295
 8015a0a:	e135      	b.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015a0c:	7e7b      	ldrb	r3, [r7, #25]
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	8b7a      	ldrh	r2, [r7, #26]
 8015a12:	1ad3      	subs	r3, r2, r3
 8015a14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	88db      	ldrh	r3, [r3, #6]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7f6 fd39 	bl	800c494 <lwip_htons>
 8015a22:	4603      	mov	r3, r0
 8015a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a36:	2200      	movs	r2, #0
 8015a38:	701a      	strb	r2, [r3, #0]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	705a      	strb	r2, [r3, #1]
 8015a3e:	2200      	movs	r2, #0
 8015a40:	709a      	strb	r2, [r3, #2]
 8015a42:	2200      	movs	r2, #0
 8015a44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a48:	8afa      	ldrh	r2, [r7, #22]
 8015a4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015a4c:	8afa      	ldrh	r2, [r7, #22]
 8015a4e:	8b7b      	ldrh	r3, [r7, #26]
 8015a50:	4413      	add	r3, r2
 8015a52:	b29a      	uxth	r2, r3
 8015a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5a:	88db      	ldrh	r3, [r3, #6]
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	8afa      	ldrh	r2, [r7, #22]
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d902      	bls.n	8015a6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a64:	f04f 33ff 	mov.w	r3, #4294967295
 8015a68:	e106      	b.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	685b      	ldr	r3, [r3, #4]
 8015a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8015a70:	e068      	b.n	8015b44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7a:	889b      	ldrh	r3, [r3, #4]
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	889b      	ldrh	r3, [r3, #4]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d235      	bcs.n	8015af4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d020      	beq.n	8015ad6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a96:	889b      	ldrh	r3, [r3, #4]
 8015a98:	b29a      	uxth	r2, r3
 8015a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a9c:	88db      	ldrh	r3, [r3, #6]
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d307      	bcc.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa6:	88db      	ldrh	r3, [r3, #6]
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	889b      	ldrh	r3, [r3, #4]
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d902      	bls.n	8015aba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ab8:	e0de      	b.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015abc:	68ba      	ldr	r2, [r7, #8]
 8015abe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac2:	88db      	ldrh	r3, [r3, #6]
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac8:	889b      	ldrh	r3, [r3, #4]
 8015aca:	b29b      	uxth	r3, r3
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d03d      	beq.n	8015b4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015ad4:	e03a      	b.n	8015b4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad8:	88db      	ldrh	r3, [r3, #6]
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	889b      	ldrh	r3, [r3, #4]
 8015ae0:	b29b      	uxth	r3, r3
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d902      	bls.n	8015aec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8015aea:	e0c5      	b.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	68ba      	ldr	r2, [r7, #8]
 8015af0:	605a      	str	r2, [r3, #4]
      break;
 8015af2:	e02b      	b.n	8015b4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015af6:	889b      	ldrh	r3, [r3, #4]
 8015af8:	b29a      	uxth	r2, r3
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	889b      	ldrh	r3, [r3, #4]
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d102      	bne.n	8015b0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b04:	f04f 33ff 	mov.w	r3, #4294967295
 8015b08:	e0b6      	b.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b0c:	889b      	ldrh	r3, [r3, #4]
 8015b0e:	b29a      	uxth	r2, r3
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	88db      	ldrh	r3, [r3, #6]
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d202      	bcs.n	8015b20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b1e:	e0ab      	b.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d009      	beq.n	8015b3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b28:	88db      	ldrh	r3, [r3, #6]
 8015b2a:	b29a      	uxth	r2, r3
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	889b      	ldrh	r3, [r3, #4]
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	429a      	cmp	r2, r3
 8015b34:	d001      	beq.n	8015b3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015b3a:	693b      	ldr	r3, [r7, #16]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015b40:	693b      	ldr	r3, [r7, #16]
 8015b42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d193      	bne.n	8015a72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015b4a:	e000      	b.n	8015b4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015b4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d12d      	bne.n	8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d01c      	beq.n	8015b94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5c:	88db      	ldrh	r3, [r3, #6]
 8015b5e:	b29a      	uxth	r2, r3
 8015b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b62:	889b      	ldrh	r3, [r3, #4]
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d906      	bls.n	8015b78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015b6a:	4b45      	ldr	r3, [pc, #276]	; (8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015b70:	4944      	ldr	r1, [pc, #272]	; (8015c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015b72:	4845      	ldr	r0, [pc, #276]	; (8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b74:	f001 fd90 	bl	8017698 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b7a:	68ba      	ldr	r2, [r7, #8]
 8015b7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b80:	88db      	ldrh	r3, [r3, #6]
 8015b82:	b29a      	uxth	r2, r3
 8015b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b86:	889b      	ldrh	r3, [r3, #4]
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	d010      	beq.n	8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	623b      	str	r3, [r7, #32]
 8015b92:	e00d      	b.n	8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	685b      	ldr	r3, [r3, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d006      	beq.n	8015baa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015b9c:	4b38      	ldr	r3, [pc, #224]	; (8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015ba2:	493a      	ldr	r1, [pc, #232]	; (8015c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015ba4:	4838      	ldr	r0, [pc, #224]	; (8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ba6:	f001 fd77 	bl	8017698 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	68ba      	ldr	r2, [r7, #8]
 8015bae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d105      	bne.n	8015bc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	7f9b      	ldrb	r3, [r3, #30]
 8015bba:	f003 0301 	and.w	r3, r3, #1
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d059      	beq.n	8015c76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015bc2:	6a3b      	ldr	r3, [r7, #32]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d04f      	beq.n	8015c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d006      	beq.n	8015bde <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	685b      	ldr	r3, [r3, #4]
 8015bd6:	889b      	ldrh	r3, [r3, #4]
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d002      	beq.n	8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015bde:	2300      	movs	r3, #0
 8015be0:	623b      	str	r3, [r7, #32]
 8015be2:	e041      	b.n	8015c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015bee:	e012      	b.n	8015c16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf2:	685b      	ldr	r3, [r3, #4]
 8015bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf8:	88db      	ldrh	r3, [r3, #6]
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bfe:	889b      	ldrh	r3, [r3, #4]
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d002      	beq.n	8015c0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015c06:	2300      	movs	r3, #0
 8015c08:	623b      	str	r3, [r7, #32]
            break;
 8015c0a:	e007      	b.n	8015c1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d1e9      	bne.n	8015bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015c1c:	6a3b      	ldr	r3, [r7, #32]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d022      	beq.n	8015c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	685b      	ldr	r3, [r3, #4]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d106      	bne.n	8015c38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015c2a:	4b15      	ldr	r3, [pc, #84]	; (8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c2c:	f240 12df 	movw	r2, #479	; 0x1df
 8015c30:	4917      	ldr	r1, [pc, #92]	; (8015c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c32:	4815      	ldr	r0, [pc, #84]	; (8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c34:	f001 fd30 	bl	8017698 <iprintf>
          LWIP_ASSERT("sanity check",
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	685b      	ldr	r3, [r3, #4]
 8015c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c40:	429a      	cmp	r2, r3
 8015c42:	d106      	bne.n	8015c52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015c44:	4b0e      	ldr	r3, [pc, #56]	; (8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015c4a:	4911      	ldr	r1, [pc, #68]	; (8015c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c4c:	480e      	ldr	r0, [pc, #56]	; (8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c4e:	f001 fd23 	bl	8017698 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d006      	beq.n	8015c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015c5a:	4b09      	ldr	r3, [pc, #36]	; (8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c5c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015c60:	490c      	ldr	r1, [pc, #48]	; (8015c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015c62:	4809      	ldr	r0, [pc, #36]	; (8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c64:	f001 fd18 	bl	8017698 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015c68:	6a3b      	ldr	r3, [r7, #32]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	bf14      	ite	ne
 8015c6e:	2301      	movne	r3, #1
 8015c70:	2300      	moveq	r3, #0
 8015c72:	b2db      	uxtb	r3, r3
 8015c74:	e000      	b.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015c76:	2300      	movs	r3, #0
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3730      	adds	r7, #48	; 0x30
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	0801b0b0 	.word	0x0801b0b0
 8015c84:	0801b194 	.word	0x0801b194
 8015c88:	0801b0f8 	.word	0x0801b0f8
 8015c8c:	0801b1b4 	.word	0x0801b1b4
 8015c90:	0801b1ec 	.word	0x0801b1ec
 8015c94:	0801b1fc 	.word	0x0801b1fc

08015c98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b08e      	sub	sp, #56	; 0x38
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	f003 030f 	and.w	r3, r3, #15
 8015cae:	b2db      	uxtb	r3, r3
 8015cb0:	009b      	lsls	r3, r3, #2
 8015cb2:	b2db      	uxtb	r3, r3
 8015cb4:	2b14      	cmp	r3, #20
 8015cb6:	f040 8171 	bne.w	8015f9c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cbc:	88db      	ldrh	r3, [r3, #6]
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7f6 fbe7 	bl	800c494 <lwip_htons>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	00db      	lsls	r3, r3, #3
 8015cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd4:	885b      	ldrh	r3, [r3, #2]
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7f6 fbdb 	bl	800c494 <lwip_htons>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	f003 030f 	and.w	r3, r3, #15
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015cf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	f0c0 8150 	bcc.w	8015fa0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d08:	1ad3      	subs	r3, r2, r3
 8015d0a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f7f7 ffa7 	bl	800dc60 <pbuf_clen>
 8015d12:	4603      	mov	r3, r0
 8015d14:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015d16:	4b8c      	ldr	r3, [pc, #560]	; (8015f48 <ip4_reass+0x2b0>)
 8015d18:	881b      	ldrh	r3, [r3, #0]
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	8c3b      	ldrh	r3, [r7, #32]
 8015d1e:	4413      	add	r3, r2
 8015d20:	2b0a      	cmp	r3, #10
 8015d22:	dd10      	ble.n	8015d46 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d24:	8c3b      	ldrh	r3, [r7, #32]
 8015d26:	4619      	mov	r1, r3
 8015d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d2a:	f7ff fd81 	bl	8015830 <ip_reass_remove_oldest_datagram>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	f000 8137 	beq.w	8015fa4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015d36:	4b84      	ldr	r3, [pc, #528]	; (8015f48 <ip4_reass+0x2b0>)
 8015d38:	881b      	ldrh	r3, [r3, #0]
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	8c3b      	ldrh	r3, [r7, #32]
 8015d3e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d40:	2b0a      	cmp	r3, #10
 8015d42:	f300 812f 	bgt.w	8015fa4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d46:	4b81      	ldr	r3, [pc, #516]	; (8015f4c <ip4_reass+0x2b4>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8015d4c:	e015      	b.n	8015d7a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d50:	695a      	ldr	r2, [r3, #20]
 8015d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d10c      	bne.n	8015d74 <ip4_reass+0xdc>
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5c:	699a      	ldr	r2, [r3, #24]
 8015d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d60:	691b      	ldr	r3, [r3, #16]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d106      	bne.n	8015d74 <ip4_reass+0xdc>
 8015d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d68:	899a      	ldrh	r2, [r3, #12]
 8015d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d6c:	889b      	ldrh	r3, [r3, #4]
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d006      	beq.n	8015d82 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	633b      	str	r3, [r7, #48]	; 0x30
 8015d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d1e6      	bne.n	8015d4e <ip4_reass+0xb6>
 8015d80:	e000      	b.n	8015d84 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015d82:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d109      	bne.n	8015d9e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015d8a:	8c3b      	ldrh	r3, [r7, #32]
 8015d8c:	4619      	mov	r1, r3
 8015d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d90:	f7ff fdb0 	bl	80158f4 <ip_reass_enqueue_new_datagram>
 8015d94:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d11c      	bne.n	8015dd6 <ip4_reass+0x13e>
      goto nullreturn;
 8015d9c:	e105      	b.n	8015faa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da0:	88db      	ldrh	r3, [r3, #6]
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f6 fb75 	bl	800c494 <lwip_htons>
 8015daa:	4603      	mov	r3, r0
 8015dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d110      	bne.n	8015dd6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db6:	89db      	ldrh	r3, [r3, #14]
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f6 fb6b 	bl	800c494 <lwip_htons>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d006      	beq.n	8015dd6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dca:	3308      	adds	r3, #8
 8015dcc:	2214      	movs	r2, #20
 8015dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f001 fea0 	bl	8017b16 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd8:	88db      	ldrh	r3, [r3, #6]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	f003 0320 	and.w	r3, r3, #32
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	bf0c      	ite	eq
 8015de4:	2301      	moveq	r3, #1
 8015de6:	2300      	movne	r3, #0
 8015de8:	b2db      	uxtb	r3, r3
 8015dea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d00e      	beq.n	8015e10 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015df2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015df6:	4413      	add	r3, r2
 8015df8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015dfa:	8b7a      	ldrh	r2, [r7, #26]
 8015dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	f0c0 80a0 	bcc.w	8015f44 <ip4_reass+0x2ac>
 8015e04:	8b7b      	ldrh	r3, [r7, #26]
 8015e06:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015e0a:	4293      	cmp	r3, r2
 8015e0c:	f200 809a 	bhi.w	8015f44 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015e10:	69fa      	ldr	r2, [r7, #28]
 8015e12:	6879      	ldr	r1, [r7, #4]
 8015e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e16:	f7ff fdd5 	bl	80159c4 <ip_reass_chain_frag_into_datagram_and_validate>
 8015e1a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e22:	f000 809b 	beq.w	8015f5c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015e26:	4b48      	ldr	r3, [pc, #288]	; (8015f48 <ip4_reass+0x2b0>)
 8015e28:	881a      	ldrh	r2, [r3, #0]
 8015e2a:	8c3b      	ldrh	r3, [r7, #32]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	b29a      	uxth	r2, r3
 8015e30:	4b45      	ldr	r3, [pc, #276]	; (8015f48 <ip4_reass+0x2b0>)
 8015e32:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015e34:	69fb      	ldr	r3, [r7, #28]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d00d      	beq.n	8015e56 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e3e:	4413      	add	r3, r2
 8015e40:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e44:	8a7a      	ldrh	r2, [r7, #18]
 8015e46:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4a:	7f9b      	ldrb	r3, [r3, #30]
 8015e4c:	f043 0301 	orr.w	r3, r3, #1
 8015e50:	b2da      	uxtb	r2, r3
 8015e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e54:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	2b01      	cmp	r3, #1
 8015e5a:	d171      	bne.n	8015f40 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5e:	8b9b      	ldrh	r3, [r3, #28]
 8015e60:	3314      	adds	r3, #20
 8015e62:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	685b      	ldr	r3, [r3, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e78:	3308      	adds	r3, #8
 8015e7a:	2214      	movs	r2, #20
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e80:	f001 fe49 	bl	8017b16 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015e84:	8a3b      	ldrh	r3, [r7, #16]
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f6 fb04 	bl	800c494 <lwip_htons>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	461a      	mov	r2, r3
 8015e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e92:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e96:	2200      	movs	r2, #0
 8015e98:	719a      	strb	r2, [r3, #6]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	729a      	strb	r2, [r3, #10]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eaa:	685b      	ldr	r3, [r3, #4]
 8015eac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015eae:	e00d      	b.n	8015ecc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015eb6:	2114      	movs	r1, #20
 8015eb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015eba:	f7f7 fdc3 	bl	800da44 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015ebe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f7f7 ff07 	bl	800dcd4 <pbuf_cat>
      r = iprh->next_pbuf;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d1ee      	bne.n	8015eb0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015ed2:	4b1e      	ldr	r3, [pc, #120]	; (8015f4c <ip4_reass+0x2b4>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d102      	bne.n	8015ee2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015edc:	2300      	movs	r3, #0
 8015ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ee0:	e010      	b.n	8015f04 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ee2:	4b1a      	ldr	r3, [pc, #104]	; (8015f4c <ip4_reass+0x2b4>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ee8:	e007      	b.n	8015efa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d006      	beq.n	8015f02 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d1f4      	bne.n	8015eea <ip4_reass+0x252>
 8015f00:	e000      	b.n	8015f04 <ip4_reass+0x26c>
          break;
 8015f02:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f08:	f7ff fd2e 	bl	8015968 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f7f7 fea7 	bl	800dc60 <pbuf_clen>
 8015f12:	4603      	mov	r3, r0
 8015f14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015f16:	4b0c      	ldr	r3, [pc, #48]	; (8015f48 <ip4_reass+0x2b0>)
 8015f18:	881b      	ldrh	r3, [r3, #0]
 8015f1a:	8c3a      	ldrh	r2, [r7, #32]
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	d906      	bls.n	8015f2e <ip4_reass+0x296>
 8015f20:	4b0b      	ldr	r3, [pc, #44]	; (8015f50 <ip4_reass+0x2b8>)
 8015f22:	f240 229b 	movw	r2, #667	; 0x29b
 8015f26:	490b      	ldr	r1, [pc, #44]	; (8015f54 <ip4_reass+0x2bc>)
 8015f28:	480b      	ldr	r0, [pc, #44]	; (8015f58 <ip4_reass+0x2c0>)
 8015f2a:	f001 fbb5 	bl	8017698 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015f2e:	4b06      	ldr	r3, [pc, #24]	; (8015f48 <ip4_reass+0x2b0>)
 8015f30:	881a      	ldrh	r2, [r3, #0]
 8015f32:	8c3b      	ldrh	r3, [r7, #32]
 8015f34:	1ad3      	subs	r3, r2, r3
 8015f36:	b29a      	uxth	r2, r3
 8015f38:	4b03      	ldr	r3, [pc, #12]	; (8015f48 <ip4_reass+0x2b0>)
 8015f3a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	e038      	b.n	8015fb2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015f40:	2300      	movs	r3, #0
 8015f42:	e036      	b.n	8015fb2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015f44:	bf00      	nop
 8015f46:	e00a      	b.n	8015f5e <ip4_reass+0x2c6>
 8015f48:	20008aec 	.word	0x20008aec
 8015f4c:	20008ae8 	.word	0x20008ae8
 8015f50:	0801b0b0 	.word	0x0801b0b0
 8015f54:	0801b220 	.word	0x0801b220
 8015f58:	0801b0f8 	.word	0x0801b0f8
    goto nullreturn_ipr;
 8015f5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d106      	bne.n	8015f72 <ip4_reass+0x2da>
 8015f64:	4b15      	ldr	r3, [pc, #84]	; (8015fbc <ip4_reass+0x324>)
 8015f66:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015f6a:	4915      	ldr	r1, [pc, #84]	; (8015fc0 <ip4_reass+0x328>)
 8015f6c:	4815      	ldr	r0, [pc, #84]	; (8015fc4 <ip4_reass+0x32c>)
 8015f6e:	f001 fb93 	bl	8017698 <iprintf>
  if (ipr->p == NULL) {
 8015f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f74:	685b      	ldr	r3, [r3, #4]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d116      	bne.n	8015fa8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015f7a:	4b13      	ldr	r3, [pc, #76]	; (8015fc8 <ip4_reass+0x330>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f80:	429a      	cmp	r2, r3
 8015f82:	d006      	beq.n	8015f92 <ip4_reass+0x2fa>
 8015f84:	4b0d      	ldr	r3, [pc, #52]	; (8015fbc <ip4_reass+0x324>)
 8015f86:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015f8a:	4910      	ldr	r1, [pc, #64]	; (8015fcc <ip4_reass+0x334>)
 8015f8c:	480d      	ldr	r0, [pc, #52]	; (8015fc4 <ip4_reass+0x32c>)
 8015f8e:	f001 fb83 	bl	8017698 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015f92:	2100      	movs	r1, #0
 8015f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f96:	f7ff fce7 	bl	8015968 <ip_reass_dequeue_datagram>
 8015f9a:	e006      	b.n	8015faa <ip4_reass+0x312>
    goto nullreturn;
 8015f9c:	bf00      	nop
 8015f9e:	e004      	b.n	8015faa <ip4_reass+0x312>
    goto nullreturn;
 8015fa0:	bf00      	nop
 8015fa2:	e002      	b.n	8015faa <ip4_reass+0x312>
      goto nullreturn;
 8015fa4:	bf00      	nop
 8015fa6:	e000      	b.n	8015faa <ip4_reass+0x312>
  }

nullreturn:
 8015fa8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7f7 fdd0 	bl	800db50 <pbuf_free>
  return NULL;
 8015fb0:	2300      	movs	r3, #0
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3738      	adds	r7, #56	; 0x38
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	0801b0b0 	.word	0x0801b0b0
 8015fc0:	0801b23c 	.word	0x0801b23c
 8015fc4:	0801b0f8 	.word	0x0801b0f8
 8015fc8:	20008ae8 	.word	0x20008ae8
 8015fcc:	0801b248 	.word	0x0801b248

08015fd0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015fd4:	2005      	movs	r0, #5
 8015fd6:	f7f6 fed5 	bl	800cd84 <memp_malloc>
 8015fda:	4603      	mov	r3, r0
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	bd80      	pop	{r7, pc}

08015fe0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d106      	bne.n	8015ffc <ip_frag_free_pbuf_custom_ref+0x1c>
 8015fee:	4b07      	ldr	r3, [pc, #28]	; (801600c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015ff0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015ff4:	4906      	ldr	r1, [pc, #24]	; (8016010 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015ff6:	4807      	ldr	r0, [pc, #28]	; (8016014 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015ff8:	f001 fb4e 	bl	8017698 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015ffc:	6879      	ldr	r1, [r7, #4]
 8015ffe:	2005      	movs	r0, #5
 8016000:	f7f6 ff30 	bl	800ce64 <memp_free>
}
 8016004:	bf00      	nop
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	0801b0b0 	.word	0x0801b0b0
 8016010:	0801b268 	.word	0x0801b268
 8016014:	0801b0f8 	.word	0x0801b0f8

08016018 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b084      	sub	sp, #16
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d106      	bne.n	8016038 <ipfrag_free_pbuf_custom+0x20>
 801602a:	4b11      	ldr	r3, [pc, #68]	; (8016070 <ipfrag_free_pbuf_custom+0x58>)
 801602c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016030:	4910      	ldr	r1, [pc, #64]	; (8016074 <ipfrag_free_pbuf_custom+0x5c>)
 8016032:	4811      	ldr	r0, [pc, #68]	; (8016078 <ipfrag_free_pbuf_custom+0x60>)
 8016034:	f001 fb30 	bl	8017698 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016038:	68fa      	ldr	r2, [r7, #12]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	429a      	cmp	r2, r3
 801603e:	d006      	beq.n	801604e <ipfrag_free_pbuf_custom+0x36>
 8016040:	4b0b      	ldr	r3, [pc, #44]	; (8016070 <ipfrag_free_pbuf_custom+0x58>)
 8016042:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016046:	490d      	ldr	r1, [pc, #52]	; (801607c <ipfrag_free_pbuf_custom+0x64>)
 8016048:	480b      	ldr	r0, [pc, #44]	; (8016078 <ipfrag_free_pbuf_custom+0x60>)
 801604a:	f001 fb25 	bl	8017698 <iprintf>
  if (pcr->original != NULL) {
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	695b      	ldr	r3, [r3, #20]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d004      	beq.n	8016060 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	695b      	ldr	r3, [r3, #20]
 801605a:	4618      	mov	r0, r3
 801605c:	f7f7 fd78 	bl	800db50 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016060:	68f8      	ldr	r0, [r7, #12]
 8016062:	f7ff ffbd 	bl	8015fe0 <ip_frag_free_pbuf_custom_ref>
}
 8016066:	bf00      	nop
 8016068:	3710      	adds	r7, #16
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	0801b0b0 	.word	0x0801b0b0
 8016074:	0801b274 	.word	0x0801b274
 8016078:	0801b0f8 	.word	0x0801b0f8
 801607c:	0801b280 	.word	0x0801b280

08016080 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b094      	sub	sp, #80	; 0x50
 8016084:	af02      	add	r7, sp, #8
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801608c:	2300      	movs	r3, #0
 801608e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016096:	3b14      	subs	r3, #20
 8016098:	2b00      	cmp	r3, #0
 801609a:	da00      	bge.n	801609e <ip4_frag+0x1e>
 801609c:	3307      	adds	r3, #7
 801609e:	10db      	asrs	r3, r3, #3
 80160a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80160a2:	2314      	movs	r3, #20
 80160a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80160ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80160b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	f003 030f 	and.w	r3, r3, #15
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	009b      	lsls	r3, r3, #2
 80160bc:	b2db      	uxtb	r3, r3
 80160be:	2b14      	cmp	r3, #20
 80160c0:	d002      	beq.n	80160c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80160c2:	f06f 0305 	mvn.w	r3, #5
 80160c6:	e110      	b.n	80162ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	895b      	ldrh	r3, [r3, #10]
 80160cc:	2b13      	cmp	r3, #19
 80160ce:	d809      	bhi.n	80160e4 <ip4_frag+0x64>
 80160d0:	4b88      	ldr	r3, [pc, #544]	; (80162f4 <ip4_frag+0x274>)
 80160d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80160d6:	4988      	ldr	r1, [pc, #544]	; (80162f8 <ip4_frag+0x278>)
 80160d8:	4888      	ldr	r0, [pc, #544]	; (80162fc <ip4_frag+0x27c>)
 80160da:	f001 fadd 	bl	8017698 <iprintf>
 80160de:	f06f 0305 	mvn.w	r3, #5
 80160e2:	e102      	b.n	80162ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80160e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e6:	88db      	ldrh	r3, [r3, #6]
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7f6 f9d2 	bl	800c494 <lwip_htons>
 80160f0:	4603      	mov	r3, r0
 80160f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80160f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80160fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016104:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	891b      	ldrh	r3, [r3, #8]
 801610a:	3b14      	subs	r3, #20
 801610c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016110:	e0e1      	b.n	80162d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016112:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016114:	00db      	lsls	r3, r3, #3
 8016116:	b29b      	uxth	r3, r3
 8016118:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801611c:	4293      	cmp	r3, r2
 801611e:	bf28      	it	cs
 8016120:	4613      	movcs	r3, r2
 8016122:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016124:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016128:	2114      	movs	r1, #20
 801612a:	200e      	movs	r0, #14
 801612c:	f7f7 fa2c 	bl	800d588 <pbuf_alloc>
 8016130:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016134:	2b00      	cmp	r3, #0
 8016136:	f000 80d5 	beq.w	80162e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613c:	895b      	ldrh	r3, [r3, #10]
 801613e:	2b13      	cmp	r3, #19
 8016140:	d806      	bhi.n	8016150 <ip4_frag+0xd0>
 8016142:	4b6c      	ldr	r3, [pc, #432]	; (80162f4 <ip4_frag+0x274>)
 8016144:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016148:	496d      	ldr	r1, [pc, #436]	; (8016300 <ip4_frag+0x280>)
 801614a:	486c      	ldr	r0, [pc, #432]	; (80162fc <ip4_frag+0x27c>)
 801614c:	f001 faa4 	bl	8017698 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016152:	685b      	ldr	r3, [r3, #4]
 8016154:	2214      	movs	r2, #20
 8016156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016158:	4618      	mov	r0, r3
 801615a:	f001 fcdc 	bl	8017b16 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016164:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801616a:	e064      	b.n	8016236 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	895a      	ldrh	r2, [r3, #10]
 8016170:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016172:	1ad3      	subs	r3, r2, r3
 8016174:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	895b      	ldrh	r3, [r3, #10]
 801617a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801617c:	429a      	cmp	r2, r3
 801617e:	d906      	bls.n	801618e <ip4_frag+0x10e>
 8016180:	4b5c      	ldr	r3, [pc, #368]	; (80162f4 <ip4_frag+0x274>)
 8016182:	f240 322d 	movw	r2, #813	; 0x32d
 8016186:	495f      	ldr	r1, [pc, #380]	; (8016304 <ip4_frag+0x284>)
 8016188:	485c      	ldr	r0, [pc, #368]	; (80162fc <ip4_frag+0x27c>)
 801618a:	f001 fa85 	bl	8017698 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801618e:	8bfa      	ldrh	r2, [r7, #30]
 8016190:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016194:	4293      	cmp	r3, r2
 8016196:	bf28      	it	cs
 8016198:	4613      	movcs	r3, r2
 801619a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801619e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d105      	bne.n	80161b2 <ip4_frag+0x132>
        poff = 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	60fb      	str	r3, [r7, #12]
        continue;
 80161b0:	e041      	b.n	8016236 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80161b2:	f7ff ff0d 	bl	8015fd0 <ip_frag_alloc_pbuf_custom_ref>
 80161b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80161b8:	69bb      	ldr	r3, [r7, #24]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d103      	bne.n	80161c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80161be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161c0:	f7f7 fcc6 	bl	800db50 <pbuf_free>
        goto memerr;
 80161c4:	e08f      	b.n	80162e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80161c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80161cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161ce:	4413      	add	r3, r2
 80161d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80161d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80161d8:	9201      	str	r2, [sp, #4]
 80161da:	9300      	str	r3, [sp, #0]
 80161dc:	4603      	mov	r3, r0
 80161de:	2241      	movs	r2, #65	; 0x41
 80161e0:	2000      	movs	r0, #0
 80161e2:	f7f7 fafb 	bl	800d7dc <pbuf_alloced_custom>
 80161e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d106      	bne.n	80161fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80161ee:	69b8      	ldr	r0, [r7, #24]
 80161f0:	f7ff fef6 	bl	8015fe0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80161f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161f6:	f7f7 fcab 	bl	800db50 <pbuf_free>
        goto memerr;
 80161fa:	e074      	b.n	80162e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	f7f7 fd47 	bl	800dc90 <pbuf_ref>
      pcr->original = p;
 8016202:	69bb      	ldr	r3, [r7, #24]
 8016204:	68fa      	ldr	r2, [r7, #12]
 8016206:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016208:	69bb      	ldr	r3, [r7, #24]
 801620a:	4a3f      	ldr	r2, [pc, #252]	; (8016308 <ip4_frag+0x288>)
 801620c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801620e:	6979      	ldr	r1, [r7, #20]
 8016210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016212:	f7f7 fd5f 	bl	800dcd4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016216:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801621a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801621e:	1ad3      	subs	r3, r2, r3
 8016220:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016224:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016228:	2b00      	cmp	r3, #0
 801622a:	d004      	beq.n	8016236 <ip4_frag+0x1b6>
        poff = 0;
 801622c:	2300      	movs	r3, #0
 801622e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016236:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801623a:	2b00      	cmp	r3, #0
 801623c:	d196      	bne.n	801616c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801623e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016240:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016244:	4413      	add	r3, r2
 8016246:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801624c:	f1a3 0213 	sub.w	r2, r3, #19
 8016250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016254:	429a      	cmp	r2, r3
 8016256:	bfcc      	ite	gt
 8016258:	2301      	movgt	r3, #1
 801625a:	2300      	movle	r3, #0
 801625c:	b2db      	uxtb	r3, r3
 801625e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016260:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016268:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801626a:	6a3b      	ldr	r3, [r7, #32]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d002      	beq.n	8016276 <ip4_frag+0x1f6>
 8016270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016272:	2b00      	cmp	r3, #0
 8016274:	d003      	beq.n	801627e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016276:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016278:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801627c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801627e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016280:	4618      	mov	r0, r3
 8016282:	f7f6 f907 	bl	800c494 <lwip_htons>
 8016286:	4603      	mov	r3, r0
 8016288:	461a      	mov	r2, r3
 801628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801628e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016290:	3314      	adds	r3, #20
 8016292:	b29b      	uxth	r3, r3
 8016294:	4618      	mov	r0, r3
 8016296:	f7f6 f8fd 	bl	800c494 <lwip_htons>
 801629a:	4603      	mov	r3, r0
 801629c:	461a      	mov	r2, r3
 801629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80162a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a4:	2200      	movs	r2, #0
 80162a6:	729a      	strb	r2, [r3, #10]
 80162a8:	2200      	movs	r2, #0
 80162aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	695b      	ldr	r3, [r3, #20]
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162b4:	68b8      	ldr	r0, [r7, #8]
 80162b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80162b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162ba:	f7f7 fc49 	bl	800db50 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80162be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162c4:	1ad3      	subs	r3, r2, r3
 80162c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80162ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80162ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162d0:	4413      	add	r3, r2
 80162d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80162d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162da:	2b00      	cmp	r3, #0
 80162dc:	f47f af19 	bne.w	8016112 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80162e0:	2300      	movs	r3, #0
 80162e2:	e002      	b.n	80162ea <ip4_frag+0x26a>
      goto memerr;
 80162e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80162e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	3748      	adds	r7, #72	; 0x48
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	bf00      	nop
 80162f4:	0801b0b0 	.word	0x0801b0b0
 80162f8:	0801b28c 	.word	0x0801b28c
 80162fc:	0801b0f8 	.word	0x0801b0f8
 8016300:	0801b2a8 	.word	0x0801b2a8
 8016304:	0801b2c8 	.word	0x0801b2c8
 8016308:	08016019 	.word	0x08016019

0801630c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b086      	sub	sp, #24
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016316:	230e      	movs	r3, #14
 8016318:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	895b      	ldrh	r3, [r3, #10]
 801631e:	2b0e      	cmp	r3, #14
 8016320:	d96e      	bls.n	8016400 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	7bdb      	ldrb	r3, [r3, #15]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d106      	bne.n	8016338 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016330:	3301      	adds	r3, #1
 8016332:	b2da      	uxtb	r2, r3
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801633e:	693b      	ldr	r3, [r7, #16]
 8016340:	7b1a      	ldrb	r2, [r3, #12]
 8016342:	7b5b      	ldrb	r3, [r3, #13]
 8016344:	021b      	lsls	r3, r3, #8
 8016346:	4313      	orrs	r3, r2
 8016348:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	f003 0301 	and.w	r3, r3, #1
 8016352:	2b00      	cmp	r3, #0
 8016354:	d023      	beq.n	801639e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	2b01      	cmp	r3, #1
 801635c:	d10f      	bne.n	801637e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	785b      	ldrb	r3, [r3, #1]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d11b      	bne.n	801639e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801636a:	2b5e      	cmp	r3, #94	; 0x5e
 801636c:	d117      	bne.n	801639e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	7b5b      	ldrb	r3, [r3, #13]
 8016372:	f043 0310 	orr.w	r3, r3, #16
 8016376:	b2da      	uxtb	r2, r3
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	735a      	strb	r2, [r3, #13]
 801637c:	e00f      	b.n	801639e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	2206      	movs	r2, #6
 8016382:	4928      	ldr	r1, [pc, #160]	; (8016424 <ethernet_input+0x118>)
 8016384:	4618      	mov	r0, r3
 8016386:	f001 fb21 	bl	80179cc <memcmp>
 801638a:	4603      	mov	r3, r0
 801638c:	2b00      	cmp	r3, #0
 801638e:	d106      	bne.n	801639e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	7b5b      	ldrb	r3, [r3, #13]
 8016394:	f043 0308 	orr.w	r3, r3, #8
 8016398:	b2da      	uxtb	r2, r3
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801639e:	89fb      	ldrh	r3, [r7, #14]
 80163a0:	2b08      	cmp	r3, #8
 80163a2:	d003      	beq.n	80163ac <ethernet_input+0xa0>
 80163a4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80163a8:	d014      	beq.n	80163d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80163aa:	e032      	b.n	8016412 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163b2:	f003 0308 	and.w	r3, r3, #8
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d024      	beq.n	8016404 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80163ba:	8afb      	ldrh	r3, [r7, #22]
 80163bc:	4619      	mov	r1, r3
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f7f7 fb40 	bl	800da44 <pbuf_remove_header>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d11e      	bne.n	8016408 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80163ca:	6839      	ldr	r1, [r7, #0]
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f7fe ff21 	bl	8015214 <ip4_input>
      break;
 80163d2:	e013      	b.n	80163fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163da:	f003 0308 	and.w	r3, r3, #8
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d014      	beq.n	801640c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80163e2:	8afb      	ldrh	r3, [r7, #22]
 80163e4:	4619      	mov	r1, r3
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f7f7 fb2c 	bl	800da44 <pbuf_remove_header>
 80163ec:	4603      	mov	r3, r0
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d10e      	bne.n	8016410 <ethernet_input+0x104>
        etharp_input(p, netif);
 80163f2:	6839      	ldr	r1, [r7, #0]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f7fe f8c1 	bl	801457c <etharp_input>
      break;
 80163fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80163fc:	2300      	movs	r3, #0
 80163fe:	e00c      	b.n	801641a <ethernet_input+0x10e>
    goto free_and_return;
 8016400:	bf00      	nop
 8016402:	e006      	b.n	8016412 <ethernet_input+0x106>
        goto free_and_return;
 8016404:	bf00      	nop
 8016406:	e004      	b.n	8016412 <ethernet_input+0x106>
        goto free_and_return;
 8016408:	bf00      	nop
 801640a:	e002      	b.n	8016412 <ethernet_input+0x106>
        goto free_and_return;
 801640c:	bf00      	nop
 801640e:	e000      	b.n	8016412 <ethernet_input+0x106>
        goto free_and_return;
 8016410:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	f7f7 fb9c 	bl	800db50 <pbuf_free>
  return ERR_OK;
 8016418:	2300      	movs	r3, #0
}
 801641a:	4618      	mov	r0, r3
 801641c:	3718      	adds	r7, #24
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	0801b6f8 	.word	0x0801b6f8

08016428 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016428:	b580      	push	{r7, lr}
 801642a:	b086      	sub	sp, #24
 801642c:	af00      	add	r7, sp, #0
 801642e:	60f8      	str	r0, [r7, #12]
 8016430:	60b9      	str	r1, [r7, #8]
 8016432:	607a      	str	r2, [r7, #4]
 8016434:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016436:	8c3b      	ldrh	r3, [r7, #32]
 8016438:	4618      	mov	r0, r3
 801643a:	f7f6 f82b 	bl	800c494 <lwip_htons>
 801643e:	4603      	mov	r3, r0
 8016440:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016442:	210e      	movs	r1, #14
 8016444:	68b8      	ldr	r0, [r7, #8]
 8016446:	f7f7 faed 	bl	800da24 <pbuf_add_header>
 801644a:	4603      	mov	r3, r0
 801644c:	2b00      	cmp	r3, #0
 801644e:	d125      	bne.n	801649c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	685b      	ldr	r3, [r3, #4]
 8016454:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016456:	693b      	ldr	r3, [r7, #16]
 8016458:	8afa      	ldrh	r2, [r7, #22]
 801645a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	2206      	movs	r2, #6
 8016460:	6839      	ldr	r1, [r7, #0]
 8016462:	4618      	mov	r0, r3
 8016464:	f001 fb57 	bl	8017b16 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	3306      	adds	r3, #6
 801646c:	2206      	movs	r2, #6
 801646e:	6879      	ldr	r1, [r7, #4]
 8016470:	4618      	mov	r0, r3
 8016472:	f001 fb50 	bl	8017b16 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801647c:	2b06      	cmp	r3, #6
 801647e:	d006      	beq.n	801648e <ethernet_output+0x66>
 8016480:	4b0a      	ldr	r3, [pc, #40]	; (80164ac <ethernet_output+0x84>)
 8016482:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016486:	490a      	ldr	r1, [pc, #40]	; (80164b0 <ethernet_output+0x88>)
 8016488:	480a      	ldr	r0, [pc, #40]	; (80164b4 <ethernet_output+0x8c>)
 801648a:	f001 f905 	bl	8017698 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	699b      	ldr	r3, [r3, #24]
 8016492:	68b9      	ldr	r1, [r7, #8]
 8016494:	68f8      	ldr	r0, [r7, #12]
 8016496:	4798      	blx	r3
 8016498:	4603      	mov	r3, r0
 801649a:	e002      	b.n	80164a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801649c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801649e:	f06f 0301 	mvn.w	r3, #1
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3718      	adds	r7, #24
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
 80164aa:	bf00      	nop
 80164ac:	0801b2d8 	.word	0x0801b2d8
 80164b0:	0801b310 	.word	0x0801b310
 80164b4:	0801b344 	.word	0x0801b344

080164b8 <Parsing>:
#include "Parsing.h"
#include "Testing_Program.h"
#include "string.h"
#include <stdio.h>

void Parsing(packet_from_client * client_to_server_packet, uint8_t * incoming_buf){
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	6039      	str	r1, [r7, #0]
	memcpy((uint32_t*)&client_to_server_packet->TestID,(const uint8_t*)incoming_buf,(size_t)4);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	683a      	ldr	r2, [r7, #0]
 80164c6:	6812      	ldr	r2, [r2, #0]
 80164c8:	601a      	str	r2, [r3, #0]
	memcpy((uint8_t*)&(client_to_server_packet->Peripheral),(const uint8_t*)(incoming_buf+4),(size_t)1);// check if its write to pass Peripheral like this
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	3304      	adds	r3, #4
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	3204      	adds	r2, #4
 80164d2:	7812      	ldrb	r2, [r2, #0]
 80164d4:	701a      	strb	r2, [r3, #0]
	memcpy((uint8_t*)&(client_to_server_packet->iter_num),(const uint8_t*)(incoming_buf+5),(size_t)1);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	3305      	adds	r3, #5
 80164da:	683a      	ldr	r2, [r7, #0]
 80164dc:	3205      	adds	r2, #5
 80164de:	7812      	ldrb	r2, [r2, #0]
 80164e0:	701a      	strb	r2, [r3, #0]
	memcpy((uint8_t*)&(client_to_server_packet->pattern_len),(const uint8_t*)(incoming_buf+6),(size_t)1);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	3306      	adds	r3, #6
 80164e6:	683a      	ldr	r2, [r7, #0]
 80164e8:	3206      	adds	r2, #6
 80164ea:	7812      	ldrb	r2, [r2, #0]
 80164ec:	701a      	strb	r2, [r3, #0]
	memcpy((uint8_t*)&client_to_server_packet->str,(const uint8_t*)(incoming_buf+7),(size_t)MAX_MSG_SIZE); //check again
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	1dd8      	adds	r0, r3, #7
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	3307      	adds	r3, #7
 80164f6:	f240 1201 	movw	r2, #257	; 0x101
 80164fa:	4619      	mov	r1, r3
 80164fc:	f001 fb0b 	bl	8017b16 <memcpy>

}
 8016500:	bf00      	nop
 8016502:	3708      	adds	r7, #8
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}

08016508 <Testing_Program>:
 */




void Testing_Program(void){
 8016508:	b580      	push	{r7, lr}
 801650a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801650e:	af02      	add	r7, sp, #8
	uint8_t outputSerializedPacket[5]={0};
 8016510:	2300      	movs	r3, #0
 8016512:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8016516:	2300      	movs	r3, #0
 8016518:	f887 322c 	strb.w	r3, [r7, #556]	; 0x22c


	memset(incoming_buffer,0,MAX_MSG_SIZE+7); 	// Incoming packet buffer
 801651c:	f44f 7284 	mov.w	r2, #264	; 0x108
 8016520:	2100      	movs	r1, #0
 8016522:	48d1      	ldr	r0, [pc, #836]	; (8016868 <Testing_Program+0x360>)
 8016524:	f001 fa7c 	bl	8017a20 <memset>
	incoming_len=0;
 8016528:	4bd0      	ldr	r3, [pc, #832]	; (801686c <Testing_Program+0x364>)
 801652a:	2200      	movs	r2, #0
 801652c:	801a      	strh	r2, [r3, #0]
	callback_flag=0;
 801652e:	4bd0      	ldr	r3, [pc, #832]	; (8016870 <Testing_Program+0x368>)
 8016530:	2200      	movs	r2, #0
 8016532:	701a      	strb	r2, [r3, #0]
	uint32_t return_from_timer_value=0;
 8016534:	2300      	movs	r3, #0
 8016536:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	packet_to_client server_to_client_packet={0};
 801653a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801653e:	2200      	movs	r2, #0
 8016540:	601a      	str	r2, [r3, #0]
 8016542:	605a      	str	r2, [r3, #4]
 8016544:	609a      	str	r2, [r3, #8]
 8016546:	60da      	str	r2, [r3, #12]
 8016548:	741a      	strb	r2, [r3, #16]
	packet_from_client client_to_server_packet={0};
 801654a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801654e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016552:	4618      	mov	r0, r3
 8016554:	f44f 7384 	mov.w	r3, #264	; 0x108
 8016558:	461a      	mov	r2, r3
 801655a:	2100      	movs	r1, #0
 801655c:	f001 fa60 	bl	8017a20 <memset>
	uint8_t return_from_test_value[MAX_MSG_SIZE]={0}; //returned string from test units
 8016560:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016564:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016568:	2200      	movs	r2, #0
 801656a:	601a      	str	r2, [r3, #0]
 801656c:	3304      	adds	r3, #4
 801656e:	22fd      	movs	r2, #253	; 0xfd
 8016570:	2100      	movs	r1, #0
 8016572:	4618      	mov	r0, r3
 8016574:	f001 fa54 	bl	8017a20 <memset>
	printf("Start of program\r\n");
 8016578:	48be      	ldr	r0, [pc, #760]	; (8016874 <Testing_Program+0x36c>)
 801657a:	f001 f8f3 	bl	8017764 <puts>
	udpServer_init();					//UDP server initialization
 801657e:	f000 fc75 	bl	8016e6c <udpServer_init>
	while (1) {
		uint8_t testing_result= TRUE;
 8016582:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016586:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 801658a:	2201      	movs	r2, #1
 801658c:	701a      	strb	r2, [r3, #0]
		MX_LWIP_Process();
 801658e:	f7f5 fb8d 	bl	800bcac <MX_LWIP_Process>
		//ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
		//sys_check_timeouts();			//Handle which checks timeout expiration
		if(callback_flag == 1){			// got packet
 8016592:	4bb7      	ldr	r3, [pc, #732]	; (8016870 <Testing_Program+0x368>)
 8016594:	781b      	ldrb	r3, [r3, #0]
 8016596:	2b01      	cmp	r3, #1
 8016598:	d1f3      	bne.n	8016582 <Testing_Program+0x7a>
			callback_flag=0;
 801659a:	4bb5      	ldr	r3, [pc, #724]	; (8016870 <Testing_Program+0x368>)
 801659c:	2200      	movs	r2, #0
 801659e:	701a      	strb	r2, [r3, #0]
			Parsing(&client_to_server_packet, incoming_buffer);
 80165a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80165a4:	49b0      	ldr	r1, [pc, #704]	; (8016868 <Testing_Program+0x360>)
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7ff ff86 	bl	80164b8 <Parsing>
			switch ((int)client_to_server_packet.Peripheral){
 80165ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80165b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80165b4:	791b      	ldrb	r3, [r3, #4]
 80165b6:	3b01      	subs	r3, #1
 80165b8:	2b0f      	cmp	r3, #15
 80165ba:	f200 824c 	bhi.w	8016a56 <Testing_Program+0x54e>
 80165be:	a201      	add	r2, pc, #4	; (adr r2, 80165c4 <Testing_Program+0xbc>)
 80165c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165c4:	08016605 	.word	0x08016605
 80165c8:	0801668b 	.word	0x0801668b
 80165cc:	08016a57 	.word	0x08016a57
 80165d0:	0801679d 	.word	0x0801679d
 80165d4:	08016a57 	.word	0x08016a57
 80165d8:	08016a57 	.word	0x08016a57
 80165dc:	08016a57 	.word	0x08016a57
 80165e0:	080168cf 	.word	0x080168cf
 80165e4:	08016a57 	.word	0x08016a57
 80165e8:	08016a57 	.word	0x08016a57
 80165ec:	08016a57 	.word	0x08016a57
 80165f0:	08016a57 	.word	0x08016a57
 80165f4:	08016a57 	.word	0x08016a57
 80165f8:	08016a57 	.word	0x08016a57
 80165fc:	08016a57 	.word	0x08016a57
 8016600:	080169e1 	.word	0x080169e1
				case (TIMER):

					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 8016604:	2300      	movs	r3, #0
 8016606:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801660a:	e030      	b.n	801666e <Testing_Program+0x166>
						timer_testing( client_to_server_packet.str,&return_from_timer_value);
 801660c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8016610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016614:	3307      	adds	r3, #7
 8016616:	4611      	mov	r1, r2
 8016618:	4618      	mov	r0, r3
 801661a:	f000 fd1b 	bl	8017054 <timer_testing>
						int required_time=atoi(client_to_server_packet.str);
 801661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016622:	3307      	adds	r3, #7
 8016624:	4618      	mov	r0, r3
 8016626:	f000 fea7 	bl	8017378 <atoi>
 801662a:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
						testing_result= ((uint32_t)required_time!=return_from_timer_value)? FALSE : TRUE ;
 801662e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8016632:	461a      	mov	r2, r3
 8016634:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8016638:	4293      	cmp	r3, r2
 801663a:	d001      	beq.n	8016640 <Testing_Program+0x138>
 801663c:	22ff      	movs	r2, #255	; 0xff
 801663e:	e000      	b.n	8016642 <Testing_Program+0x13a>
 8016640:	2201      	movs	r2, #1
 8016642:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016646:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 801664a:	701a      	strb	r2, [r3, #0]
						if (testing_result==FALSE){
 801664c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016650:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016654:	781b      	ldrb	r3, [r3, #0]
 8016656:	2bff      	cmp	r3, #255	; 0xff
 8016658:	d104      	bne.n	8016664 <Testing_Program+0x15c>
							printf("TIMER test failed!\n");
 801665a:	4887      	ldr	r0, [pc, #540]	; (8016878 <Testing_Program+0x370>)
 801665c:	f001 f882 	bl	8017764 <puts>
							break;
 8016660:	bf00      	nop
						}
					}
					break;
 8016662:	e1f9      	b.n	8016a58 <Testing_Program+0x550>
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 8016664:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016668:	3301      	adds	r3, #1
 801666a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801666e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016672:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016676:	795b      	ldrb	r3, [r3, #5]
 8016678:	4618      	mov	r0, r3
 801667a:	f000 fe7d 	bl	8017378 <atoi>
 801667e:	4602      	mov	r2, r0
 8016680:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8016684:	4293      	cmp	r3, r2
 8016686:	dbc1      	blt.n	801660c <Testing_Program+0x104>
					break;
 8016688:	e1e6      	b.n	8016a58 <Testing_Program+0x550>

				case (UART):
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 801668a:	2300      	movs	r3, #0
 801668c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8016690:	e073      	b.n	801677a <Testing_Program+0x272>
						uart_testing(client_to_server_packet.str, return_from_test_value);
 8016692:	1d3a      	adds	r2, r7, #4
 8016694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016698:	3307      	adds	r3, #7
 801669a:	4611      	mov	r1, r2
 801669c:	4618      	mov	r0, r3
 801669e:	f000 fd93 	bl	80171c8 <uart_testing>
						if (strlen(client_to_server_packet.str)>100){
 80166a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80166a6:	3307      	adds	r3, #7
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7e9 fdbb 	bl	8000224 <strlen>
 80166ae:	4603      	mov	r3, r0
 80166b0:	2b64      	cmp	r3, #100	; 0x64
 80166b2:	d92a      	bls.n	801670a <Testing_Program+0x202>
							uint32_t crc_val_input=HAL_CRC_Calculate(CRC, client_to_server_packet.str, strlen(client_to_server_packet.str));
 80166b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80166b8:	3307      	adds	r3, #7
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7e9 fdb2 	bl	8000224 <strlen>
 80166c0:	4602      	mov	r2, r0
 80166c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80166c6:	3307      	adds	r3, #7
 80166c8:	4619      	mov	r1, r3
 80166ca:	486c      	ldr	r0, [pc, #432]	; (801687c <Testing_Program+0x374>)
 80166cc:	f7ec fc32 	bl	8002f34 <HAL_CRC_Calculate>
 80166d0:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
							uint32_t crc_val_output=HAL_CRC_Calculate(CRC, return_from_test_value, strlen(return_from_test_value));
 80166d4:	1d3b      	adds	r3, r7, #4
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7e9 fda4 	bl	8000224 <strlen>
 80166dc:	4602      	mov	r2, r0
 80166de:	1d3b      	adds	r3, r7, #4
 80166e0:	4619      	mov	r1, r3
 80166e2:	4866      	ldr	r0, [pc, #408]	; (801687c <Testing_Program+0x374>)
 80166e4:	f7ec fc26 	bl	8002f34 <HAL_CRC_Calculate>
 80166e8:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
							testing_result= (crc_val_input==crc_val_output)? TRUE : FALSE;
 80166ec:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80166f0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d101      	bne.n	80166fc <Testing_Program+0x1f4>
 80166f8:	2201      	movs	r2, #1
 80166fa:	e000      	b.n	80166fe <Testing_Program+0x1f6>
 80166fc:	22ff      	movs	r2, #255	; 0xff
 80166fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016702:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016706:	701a      	strb	r2, [r3, #0]
 8016708:	e02b      	b.n	8016762 <Testing_Program+0x25a>


						}
						else{
							HAL_UART_Transmit(UART_DEBUG, return_from_test_value, sizeof(return_from_test_value),HAL_MAX_DELAY);
 801670a:	1d39      	adds	r1, r7, #4
 801670c:	f04f 33ff 	mov.w	r3, #4294967295
 8016710:	f240 1201 	movw	r2, #257	; 0x101
 8016714:	485a      	ldr	r0, [pc, #360]	; (8016880 <Testing_Program+0x378>)
 8016716:	f7f3 ff57 	bl	800a5c8 <HAL_UART_Transmit>
							HAL_UART_Transmit(UART_DEBUG, "\r\n", sizeof("\r\n"),HAL_MAX_DELAY);
 801671a:	f04f 33ff 	mov.w	r3, #4294967295
 801671e:	2203      	movs	r2, #3
 8016720:	4958      	ldr	r1, [pc, #352]	; (8016884 <Testing_Program+0x37c>)
 8016722:	4857      	ldr	r0, [pc, #348]	; (8016880 <Testing_Program+0x378>)
 8016724:	f7f3 ff50 	bl	800a5c8 <HAL_UART_Transmit>
							HAL_UART_Transmit(UART_DEBUG, client_to_server_packet.str, sizeof(client_to_server_packet.str),HAL_MAX_DELAY);
 8016728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801672c:	1dd9      	adds	r1, r3, #7
 801672e:	f04f 33ff 	mov.w	r3, #4294967295
 8016732:	f240 1201 	movw	r2, #257	; 0x101
 8016736:	4852      	ldr	r0, [pc, #328]	; (8016880 <Testing_Program+0x378>)
 8016738:	f7f3 ff46 	bl	800a5c8 <HAL_UART_Transmit>

							testing_result= (strcmp(return_from_test_value,client_to_server_packet.str)!=0)? FALSE : TRUE ;
 801673c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016740:	1dda      	adds	r2, r3, #7
 8016742:	1d3b      	adds	r3, r7, #4
 8016744:	4611      	mov	r1, r2
 8016746:	4618      	mov	r0, r3
 8016748:	f7e9 fd62 	bl	8000210 <strcmp>
 801674c:	4603      	mov	r3, r0
 801674e:	2b00      	cmp	r3, #0
 8016750:	d001      	beq.n	8016756 <Testing_Program+0x24e>
 8016752:	22ff      	movs	r2, #255	; 0xff
 8016754:	e000      	b.n	8016758 <Testing_Program+0x250>
 8016756:	2201      	movs	r2, #1
 8016758:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801675c:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016760:	701a      	strb	r2, [r3, #0]


						}
						if (testing_result==FALSE){
 8016762:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016766:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 801676a:	781b      	ldrb	r3, [r3, #0]
 801676c:	2bff      	cmp	r3, #255	; 0xff
 801676e:	d013      	beq.n	8016798 <Testing_Program+0x290>
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 8016770:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016774:	3301      	adds	r3, #1
 8016776:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 801677a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801677e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016782:	795b      	ldrb	r3, [r3, #5]
 8016784:	4618      	mov	r0, r3
 8016786:	f000 fdf7 	bl	8017378 <atoi>
 801678a:	4602      	mov	r2, r0
 801678c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016790:	4293      	cmp	r3, r2
 8016792:	f6ff af7e 	blt.w	8016692 <Testing_Program+0x18a>
							break;
						}

					}
					break;
 8016796:	e15f      	b.n	8016a58 <Testing_Program+0x550>
							break;
 8016798:	bf00      	nop
					break;
 801679a:	e15d      	b.n	8016a58 <Testing_Program+0x550>
				case (SPI):
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 801679c:	2300      	movs	r3, #0
 801679e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80167a2:	e083      	b.n	80168ac <Testing_Program+0x3a4>
						spi_testing(client_to_server_packet.str, return_from_test_value);
 80167a4:	1d3a      	adds	r2, r7, #4
 80167a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167aa:	3307      	adds	r3, #7
 80167ac:	4611      	mov	r1, r2
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 fb90 	bl	8016ed4 <spi_testing>
						if (strlen(client_to_server_packet.str)>100){
 80167b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167b8:	3307      	adds	r3, #7
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7e9 fd32 	bl	8000224 <strlen>
 80167c0:	4603      	mov	r3, r0
 80167c2:	2b64      	cmp	r3, #100	; 0x64
 80167c4:	d92a      	bls.n	801681c <Testing_Program+0x314>
							uint32_t crc_val_input=HAL_CRC_Calculate(CRC, client_to_server_packet.str, strlen(client_to_server_packet.str));
 80167c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167ca:	3307      	adds	r3, #7
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7e9 fd29 	bl	8000224 <strlen>
 80167d2:	4602      	mov	r2, r0
 80167d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80167d8:	3307      	adds	r3, #7
 80167da:	4619      	mov	r1, r3
 80167dc:	4827      	ldr	r0, [pc, #156]	; (801687c <Testing_Program+0x374>)
 80167de:	f7ec fba9 	bl	8002f34 <HAL_CRC_Calculate>
 80167e2:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
							uint32_t crc_val_output=HAL_CRC_Calculate(CRC, return_from_test_value, strlen(return_from_test_value));
 80167e6:	1d3b      	adds	r3, r7, #4
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7e9 fd1b 	bl	8000224 <strlen>
 80167ee:	4602      	mov	r2, r0
 80167f0:	1d3b      	adds	r3, r7, #4
 80167f2:	4619      	mov	r1, r3
 80167f4:	4821      	ldr	r0, [pc, #132]	; (801687c <Testing_Program+0x374>)
 80167f6:	f7ec fb9d 	bl	8002f34 <HAL_CRC_Calculate>
 80167fa:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
							testing_result= (crc_val_input==crc_val_output)? TRUE : FALSE;
 80167fe:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8016802:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016806:	429a      	cmp	r2, r3
 8016808:	d101      	bne.n	801680e <Testing_Program+0x306>
 801680a:	2201      	movs	r2, #1
 801680c:	e000      	b.n	8016810 <Testing_Program+0x308>
 801680e:	22ff      	movs	r2, #255	; 0xff
 8016810:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016814:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016818:	701a      	strb	r2, [r3, #0]
 801681a:	e03b      	b.n	8016894 <Testing_Program+0x38c>


						}
						else{
							HAL_UART_Transmit(UART_DEBUG, return_from_test_value, sizeof(return_from_test_value),HAL_MAX_DELAY);
 801681c:	1d39      	adds	r1, r7, #4
 801681e:	f04f 33ff 	mov.w	r3, #4294967295
 8016822:	f240 1201 	movw	r2, #257	; 0x101
 8016826:	4816      	ldr	r0, [pc, #88]	; (8016880 <Testing_Program+0x378>)
 8016828:	f7f3 fece 	bl	800a5c8 <HAL_UART_Transmit>
							HAL_UART_Transmit(UART_DEBUG, "\r\n", sizeof("\r\n"),HAL_MAX_DELAY);
 801682c:	f04f 33ff 	mov.w	r3, #4294967295
 8016830:	2203      	movs	r2, #3
 8016832:	4914      	ldr	r1, [pc, #80]	; (8016884 <Testing_Program+0x37c>)
 8016834:	4812      	ldr	r0, [pc, #72]	; (8016880 <Testing_Program+0x378>)
 8016836:	f7f3 fec7 	bl	800a5c8 <HAL_UART_Transmit>
							HAL_UART_Transmit(UART_DEBUG, client_to_server_packet.str, sizeof(client_to_server_packet.str),HAL_MAX_DELAY);
 801683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801683e:	1dd9      	adds	r1, r3, #7
 8016840:	f04f 33ff 	mov.w	r3, #4294967295
 8016844:	f240 1201 	movw	r2, #257	; 0x101
 8016848:	480d      	ldr	r0, [pc, #52]	; (8016880 <Testing_Program+0x378>)
 801684a:	f7f3 febd 	bl	800a5c8 <HAL_UART_Transmit>

							testing_result= (strcmp(return_from_test_value,client_to_server_packet.str)!=0)? FALSE : TRUE ;
 801684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016852:	1dda      	adds	r2, r3, #7
 8016854:	1d3b      	adds	r3, r7, #4
 8016856:	4611      	mov	r1, r2
 8016858:	4618      	mov	r0, r3
 801685a:	f7e9 fcd9 	bl	8000210 <strcmp>
 801685e:	4603      	mov	r3, r0
 8016860:	2b00      	cmp	r3, #0
 8016862:	d011      	beq.n	8016888 <Testing_Program+0x380>
 8016864:	22ff      	movs	r2, #255	; 0xff
 8016866:	e010      	b.n	801688a <Testing_Program+0x382>
 8016868:	20008af0 	.word	0x20008af0
 801686c:	20008bf8 	.word	0x20008bf8
 8016870:	20008bfa 	.word	0x20008bfa
 8016874:	0801b36c 	.word	0x0801b36c
 8016878:	0801b380 	.word	0x0801b380
 801687c:	2000028c 	.word	0x2000028c
 8016880:	200007f0 	.word	0x200007f0
 8016884:	0801b394 	.word	0x0801b394
 8016888:	2201      	movs	r2, #1
 801688a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801688e:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016892:	701a      	strb	r2, [r3, #0]


						}
						if (testing_result==FALSE){
 8016894:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016898:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	2bff      	cmp	r3, #255	; 0xff
 80168a0:	d013      	beq.n	80168ca <Testing_Program+0x3c2>
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 80168a2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80168a6:	3301      	adds	r3, #1
 80168a8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80168ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80168b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80168b4:	795b      	ldrb	r3, [r3, #5]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f000 fd5e 	bl	8017378 <atoi>
 80168bc:	4602      	mov	r2, r0
 80168be:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80168c2:	4293      	cmp	r3, r2
 80168c4:	f6ff af6e 	blt.w	80167a4 <Testing_Program+0x29c>
							break;
						}

					}
					break;
 80168c8:	e0c6      	b.n	8016a58 <Testing_Program+0x550>
							break;
 80168ca:	bf00      	nop
					break;
 80168cc:	e0c4      	b.n	8016a58 <Testing_Program+0x550>
				case (I2C):
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 80168ce:	2300      	movs	r3, #0
 80168d0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80168d4:	e073      	b.n	80169be <Testing_Program+0x4b6>
						i2c_testing(client_to_server_packet.str, return_from_test_value);
 80168d6:	1d3a      	adds	r2, r7, #4
 80168d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80168dc:	3307      	adds	r3, #7
 80168de:	4611      	mov	r1, r2
 80168e0:	4618      	mov	r0, r3
 80168e2:	f000 f987 	bl	8016bf4 <i2c_testing>
						if (strlen(client_to_server_packet.str)>100){
 80168e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80168ea:	3307      	adds	r3, #7
 80168ec:	4618      	mov	r0, r3
 80168ee:	f7e9 fc99 	bl	8000224 <strlen>
 80168f2:	4603      	mov	r3, r0
 80168f4:	2b64      	cmp	r3, #100	; 0x64
 80168f6:	d92a      	bls.n	801694e <Testing_Program+0x446>
							uint32_t crc_val_input=HAL_CRC_Calculate(CRC, client_to_server_packet.str, strlen(client_to_server_packet.str));
 80168f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80168fc:	3307      	adds	r3, #7
 80168fe:	4618      	mov	r0, r3
 8016900:	f7e9 fc90 	bl	8000224 <strlen>
 8016904:	4602      	mov	r2, r0
 8016906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801690a:	3307      	adds	r3, #7
 801690c:	4619      	mov	r1, r3
 801690e:	487a      	ldr	r0, [pc, #488]	; (8016af8 <Testing_Program+0x5f0>)
 8016910:	f7ec fb10 	bl	8002f34 <HAL_CRC_Calculate>
 8016914:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
							uint32_t crc_val_output=HAL_CRC_Calculate(CRC, return_from_test_value, strlen(return_from_test_value));
 8016918:	1d3b      	adds	r3, r7, #4
 801691a:	4618      	mov	r0, r3
 801691c:	f7e9 fc82 	bl	8000224 <strlen>
 8016920:	4602      	mov	r2, r0
 8016922:	1d3b      	adds	r3, r7, #4
 8016924:	4619      	mov	r1, r3
 8016926:	4874      	ldr	r0, [pc, #464]	; (8016af8 <Testing_Program+0x5f0>)
 8016928:	f7ec fb04 	bl	8002f34 <HAL_CRC_Calculate>
 801692c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
							testing_result= (crc_val_input==crc_val_output)? TRUE : FALSE;
 8016930:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8016934:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8016938:	429a      	cmp	r2, r3
 801693a:	d101      	bne.n	8016940 <Testing_Program+0x438>
 801693c:	2201      	movs	r2, #1
 801693e:	e000      	b.n	8016942 <Testing_Program+0x43a>
 8016940:	22ff      	movs	r2, #255	; 0xff
 8016942:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016946:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 801694a:	701a      	strb	r2, [r3, #0]
 801694c:	e02b      	b.n	80169a6 <Testing_Program+0x49e>


						}
						else{
							HAL_UART_Transmit(UART_DEBUG, return_from_test_value, sizeof(return_from_test_value),HAL_MAX_DELAY);
 801694e:	1d39      	adds	r1, r7, #4
 8016950:	f04f 33ff 	mov.w	r3, #4294967295
 8016954:	f240 1201 	movw	r2, #257	; 0x101
 8016958:	4868      	ldr	r0, [pc, #416]	; (8016afc <Testing_Program+0x5f4>)
 801695a:	f7f3 fe35 	bl	800a5c8 <HAL_UART_Transmit>
							HAL_UART_Transmit(UART_DEBUG, "\r\n", sizeof("\r\n"),HAL_MAX_DELAY);
 801695e:	f04f 33ff 	mov.w	r3, #4294967295
 8016962:	2203      	movs	r2, #3
 8016964:	4966      	ldr	r1, [pc, #408]	; (8016b00 <Testing_Program+0x5f8>)
 8016966:	4865      	ldr	r0, [pc, #404]	; (8016afc <Testing_Program+0x5f4>)
 8016968:	f7f3 fe2e 	bl	800a5c8 <HAL_UART_Transmit>
							HAL_UART_Transmit(UART_DEBUG, client_to_server_packet.str, sizeof(client_to_server_packet.str),HAL_MAX_DELAY);
 801696c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016970:	1dd9      	adds	r1, r3, #7
 8016972:	f04f 33ff 	mov.w	r3, #4294967295
 8016976:	f240 1201 	movw	r2, #257	; 0x101
 801697a:	4860      	ldr	r0, [pc, #384]	; (8016afc <Testing_Program+0x5f4>)
 801697c:	f7f3 fe24 	bl	800a5c8 <HAL_UART_Transmit>

							testing_result= (strcmp(return_from_test_value,client_to_server_packet.str)!=0)? FALSE : TRUE ;
 8016980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016984:	1dda      	adds	r2, r3, #7
 8016986:	1d3b      	adds	r3, r7, #4
 8016988:	4611      	mov	r1, r2
 801698a:	4618      	mov	r0, r3
 801698c:	f7e9 fc40 	bl	8000210 <strcmp>
 8016990:	4603      	mov	r3, r0
 8016992:	2b00      	cmp	r3, #0
 8016994:	d001      	beq.n	801699a <Testing_Program+0x492>
 8016996:	22ff      	movs	r2, #255	; 0xff
 8016998:	e000      	b.n	801699c <Testing_Program+0x494>
 801699a:	2201      	movs	r2, #1
 801699c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80169a0:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 80169a4:	701a      	strb	r2, [r3, #0]


						}
						if (testing_result==FALSE){
 80169a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80169aa:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	2bff      	cmp	r3, #255	; 0xff
 80169b2:	d013      	beq.n	80169dc <Testing_Program+0x4d4>
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
 80169b4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80169b8:	3301      	adds	r3, #1
 80169ba:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80169be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80169c2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80169c6:	795b      	ldrb	r3, [r3, #5]
 80169c8:	4618      	mov	r0, r3
 80169ca:	f000 fcd5 	bl	8017378 <atoi>
 80169ce:	4602      	mov	r2, r0
 80169d0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80169d4:	4293      	cmp	r3, r2
 80169d6:	f6ff af7e 	blt.w	80168d6 <Testing_Program+0x3ce>
							break;
						}

					}
					break;
 80169da:	e03d      	b.n	8016a58 <Testing_Program+0x550>
							break;
 80169dc:	bf00      	nop
					break;
 80169de:	e03b      	b.n	8016a58 <Testing_Program+0x550>
				case (ADC_P):
					for (int iter=0; iter<client_to_server_packet.iter_num;iter++){
 80169e0:	2300      	movs	r3, #0
 80169e2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80169e6:	e02b      	b.n	8016a40 <Testing_Program+0x538>
						adc_testing(client_to_server_packet.str, return_from_test_value);
 80169e8:	1d3a      	adds	r2, r7, #4
 80169ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80169ee:	3307      	adds	r3, #7
 80169f0:	4611      	mov	r1, r2
 80169f2:	4618      	mov	r0, r3
 80169f4:	f000 f890 	bl	8016b18 <adc_testing>
						testing_result= (strcmp(return_from_test_value,client_to_server_packet.str)!=0)? FALSE : TRUE ;
 80169f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80169fc:	1dda      	adds	r2, r3, #7
 80169fe:	1d3b      	adds	r3, r7, #4
 8016a00:	4611      	mov	r1, r2
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7e9 fc04 	bl	8000210 <strcmp>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d001      	beq.n	8016a12 <Testing_Program+0x50a>
 8016a0e:	22ff      	movs	r2, #255	; 0xff
 8016a10:	e000      	b.n	8016a14 <Testing_Program+0x50c>
 8016a12:	2201      	movs	r2, #1
 8016a14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016a18:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016a1c:	701a      	strb	r2, [r3, #0]
						if (testing_result==FALSE){
 8016a1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016a22:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	2bff      	cmp	r3, #255	; 0xff
 8016a2a:	d104      	bne.n	8016a36 <Testing_Program+0x52e>
							printf("ADC test failed!\n");
 8016a2c:	4835      	ldr	r0, [pc, #212]	; (8016b04 <Testing_Program+0x5fc>)
 8016a2e:	f000 fe99 	bl	8017764 <puts>
							break;
 8016a32:	bf00      	nop


						}
//
					}
					break;
 8016a34:	e010      	b.n	8016a58 <Testing_Program+0x550>
					for (int iter=0; iter<client_to_server_packet.iter_num;iter++){
 8016a36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016a3a:	3301      	adds	r3, #1
 8016a3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8016a40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016a44:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016a48:	795b      	ldrb	r3, [r3, #5]
 8016a4a:	461a      	mov	r2, r3
 8016a4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8016a50:	4293      	cmp	r3, r2
 8016a52:	dbc9      	blt.n	80169e8 <Testing_Program+0x4e0>
					break;
 8016a54:	e000      	b.n	8016a58 <Testing_Program+0x550>
				default:
					break;
 8016a56:	bf00      	nop
 8016a58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016a5c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8016a60:	681b      	ldr	r3, [r3, #0]
//
//

			}

			memcpy((uint32_t*)&(server_to_client_packet.TestID),(uint32_t*)&client_to_server_packet.TestID,sizeof(client_to_server_packet.TestID));
 8016a62:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8016a66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8016a6a:	f2a3 235d 	subw	r3, r3, #605	; 0x25d
 8016a6e:	781b      	ldrb	r3, [r3, #0]
			memcpy((uint8_t*)&(server_to_client_packet.TestResult),(uint8_t*)&testing_result ,1);
 8016a70:	f887 3220 	strb.w	r3, [r7, #544]	; 0x220
			memcpy(outputSerializedPacket, &server_to_client_packet.TestID,sizeof(server_to_client_packet.TestID));
 8016a74:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8016a78:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8016a7c:	2210      	movs	r2, #16
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f001 f849 	bl	8017b16 <memcpy>
 8016a84:	f897 3220 	ldrb.w	r3, [r7, #544]	; 0x220
			memcpy(&outputSerializedPacket[4], &server_to_client_packet.TestResult,sizeof(server_to_client_packet.TestResult));
 8016a88:	f887 322c 	strb.w	r3, [r7, #556]	; 0x22c

			HAL_UART_Transmit(UART_DEBUG,outputSerializedPacket,5,HAL_MAX_DELAY);
 8016a8c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8016a90:	f04f 33ff 	mov.w	r3, #4294967295
 8016a94:	2205      	movs	r2, #5
 8016a96:	4819      	ldr	r0, [pc, #100]	; (8016afc <Testing_Program+0x5f4>)
 8016a98:	f7f3 fd96 	bl	800a5c8 <HAL_UART_Transmit>
			err_t error= send_packet( upcb, (const void*)outputSerializedPacket, (u16_t) 5, (const ip_addr_t*)&dest_ipaddr, (u16_t) dest_port);
 8016a9c:	4b1a      	ldr	r3, [pc, #104]	; (8016b08 <Testing_Program+0x600>)
 8016a9e:	6818      	ldr	r0, [r3, #0]
 8016aa0:	4b1a      	ldr	r3, [pc, #104]	; (8016b0c <Testing_Program+0x604>)
 8016aa2:	881b      	ldrh	r3, [r3, #0]
 8016aa4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8016aa8:	9300      	str	r3, [sp, #0]
 8016aaa:	4b19      	ldr	r3, [pc, #100]	; (8016b10 <Testing_Program+0x608>)
 8016aac:	2205      	movs	r2, #5
 8016aae:	f000 f9af 	bl	8016e10 <send_packet>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
			memset((uint8_t*)incoming_buffer,0,sizeof(incoming_buffer)); // incoming buffer. stores bit string from client
 8016ab8:	f44f 7284 	mov.w	r2, #264	; 0x108
 8016abc:	2100      	movs	r1, #0
 8016abe:	4815      	ldr	r0, [pc, #84]	; (8016b14 <Testing_Program+0x60c>)
 8016ac0:	f000 ffae 	bl	8017a20 <memset>
			memset((packet_to_client*)&server_to_client_packet,0,sizeof(&server_to_client_packet));
 8016ac4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016ac8:	2204      	movs	r2, #4
 8016aca:	2100      	movs	r1, #0
 8016acc:	4618      	mov	r0, r3
 8016ace:	f000 ffa7 	bl	8017a20 <memset>
			memset((packet_from_client*)&client_to_server_packet,0,sizeof(&client_to_server_packet));
 8016ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ad6:	2204      	movs	r2, #4
 8016ad8:	2100      	movs	r1, #0
 8016ada:	4618      	mov	r0, r3
 8016adc:	f000 ffa0 	bl	8017a20 <memset>
			memset((uint8_t*)return_from_test_value,0,sizeof(return_from_test_value));
 8016ae0:	1d3b      	adds	r3, r7, #4
 8016ae2:	f240 1201 	movw	r2, #257	; 0x101
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f000 ff99 	bl	8017a20 <memset>
 8016aee:	2300      	movs	r3, #0
 8016af0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	while (1) {
 8016af4:	e545      	b.n	8016582 <Testing_Program+0x7a>
 8016af6:	bf00      	nop
 8016af8:	2000028c 	.word	0x2000028c
 8016afc:	200007f0 	.word	0x200007f0
 8016b00:	0801b394 	.word	0x0801b394
 8016b04:	0801b398 	.word	0x0801b398
 8016b08:	20008c04 	.word	0x20008c04
 8016b0c:	20008c00 	.word	0x20008c00
 8016b10:	20008bfc 	.word	0x20008bfc
 8016b14:	20008af0 	.word	0x20008af0

08016b18 <adc_testing>:

volatile uint32_t adc_converted_value; // Shared variable for storing ADC result



void adc_testing(uint8_t *str_in, uint8_t *return_from_test_value) {
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b086      	sub	sp, #24
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
  uint32_t num = (uint32_t)strtol((const uint8_t *)str_in, NULL, 10);
 8016b22:	220a      	movs	r2, #10
 8016b24:	2100      	movs	r1, #0
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f000 fcea 	bl	8017500 <strtol>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_DAC_SetValue(DAC_1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, num);
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	2200      	movs	r2, #0
 8016b34:	2100      	movs	r1, #0
 8016b36:	481f      	ldr	r0, [pc, #124]	; (8016bb4 <adc_testing+0x9c>)
 8016b38:	f7ec fc64 	bl	8003404 <HAL_DAC_SetValue>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status2 = HAL_DAC_Start(DAC_1, DAC_CHANNEL_1);
 8016b40:	2100      	movs	r1, #0
 8016b42:	481c      	ldr	r0, [pc, #112]	; (8016bb4 <adc_testing+0x9c>)
 8016b44:	f7ec fbb2 	bl	80032ac <HAL_DAC_Start>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	74bb      	strb	r3, [r7, #18]

  if (status != HAL_OK || status2 != HAL_OK) {
 8016b4c:	7cfb      	ldrb	r3, [r7, #19]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d102      	bne.n	8016b58 <adc_testing+0x40>
 8016b52:	7cbb      	ldrb	r3, [r7, #18]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d006      	beq.n	8016b66 <adc_testing+0x4e>
	  HAL_UART_Transmit(UART_DEBUG, "Failed to SetValue and Start DAC!\r\n",
 8016b58:	f04f 33ff 	mov.w	r3, #4294967295
 8016b5c:	2225      	movs	r2, #37	; 0x25
 8016b5e:	4916      	ldr	r1, [pc, #88]	; (8016bb8 <adc_testing+0xa0>)
 8016b60:	4816      	ldr	r0, [pc, #88]	; (8016bbc <adc_testing+0xa4>)
 8016b62:	f7f3 fd31 	bl	800a5c8 <HAL_UART_Transmit>
			  sizeof("Failed to SetValue and Start DAC!\r\n)"), HAL_MAX_DELAY);
  }

  if (HAL_ADC_Start_DMA(ADC_1, &adc_converted_value,sizeof(adc_converted_value) ) != HAL_OK) {
 8016b66:	2204      	movs	r2, #4
 8016b68:	4915      	ldr	r1, [pc, #84]	; (8016bc0 <adc_testing+0xa8>)
 8016b6a:	4816      	ldr	r0, [pc, #88]	; (8016bc4 <adc_testing+0xac>)
 8016b6c:	f7eb fc6a 	bl	8002444 <HAL_ADC_Start_DMA>
 8016b70:	4603      	mov	r3, r0
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d006      	beq.n	8016b84 <adc_testing+0x6c>
	  HAL_UART_Transmit(UART_DEBUG, "Failed to start DAC!\r\n",
 8016b76:	f04f 33ff 	mov.w	r3, #4294967295
 8016b7a:	2218      	movs	r2, #24
 8016b7c:	4912      	ldr	r1, [pc, #72]	; (8016bc8 <adc_testing+0xb0>)
 8016b7e:	480f      	ldr	r0, [pc, #60]	; (8016bbc <adc_testing+0xa4>)
 8016b80:	f7f3 fd22 	bl	800a5c8 <HAL_UART_Transmit>
		  sizeof("Failed to start DAC!\r\n)"), HAL_MAX_DELAY);
  }


  int num_chars = snprintf((char *)return_from_test_value, sizeof(return_from_test_value), "%u", adc_converted_value);
 8016b84:	4b0e      	ldr	r3, [pc, #56]	; (8016bc0 <adc_testing+0xa8>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	4a10      	ldr	r2, [pc, #64]	; (8016bcc <adc_testing+0xb4>)
 8016b8a:	2104      	movs	r1, #4
 8016b8c:	6838      	ldr	r0, [r7, #0]
 8016b8e:	f000 fdf1 	bl	8017774 <sniprintf>
 8016b92:	60f8      	str	r0, [r7, #12]
  if (num_chars >= sizeof(return_from_test_value)) {
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2b03      	cmp	r3, #3
 8016b98:	d907      	bls.n	8016baa <adc_testing+0x92>
  	  HAL_UART_Transmit(UART_DEBUG, "Couldn't fit all characters to array!\r\n",
 8016b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b9e:	2228      	movs	r2, #40	; 0x28
 8016ba0:	490b      	ldr	r1, [pc, #44]	; (8016bd0 <adc_testing+0xb8>)
 8016ba2:	4806      	ldr	r0, [pc, #24]	; (8016bbc <adc_testing+0xa4>)
 8016ba4:	f7f3 fd10 	bl	800a5c8 <HAL_UART_Transmit>
  		  sizeof("Couldn't fit all characters to array!\r\n"), HAL_MAX_DELAY);
  }
  return;
 8016ba8:	bf00      	nop
 8016baa:	bf00      	nop
}
 8016bac:	3718      	adds	r7, #24
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}
 8016bb2:	bf00      	nop
 8016bb4:	200002b0 	.word	0x200002b0
 8016bb8:	0801b3ac 	.word	0x0801b3ac
 8016bbc:	200007f0 	.word	0x200007f0
 8016bc0:	20008c08 	.word	0x20008c08
 8016bc4:	200001e4 	.word	0x200001e4
 8016bc8:	0801b3d0 	.word	0x0801b3d0
 8016bcc:	0801b3e8 	.word	0x0801b3e8
 8016bd0:	0801b3ec 	.word	0x0801b3ec

08016bd4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
  // This function is called when the ADC conversion is complete
  adc_converted_value = HAL_ADC_GetValue(hadc); // Read the converted value
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f7eb fd2b 	bl	8002638 <HAL_ADC_GetValue>
 8016be2:	4603      	mov	r3, r0
 8016be4:	4a02      	ldr	r2, [pc, #8]	; (8016bf0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8016be6:	6013      	str	r3, [r2, #0]
}
 8016be8:	bf00      	nop
 8016bea:	3708      	adds	r7, #8
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}
 8016bf0:	20008c08 	.word	0x20008c08

08016bf4 <i2c_testing>:
int i2c_slave_callback;
#define I2C_MASTER &hi2c2
#define I2C_SLAVE &hi2c4

void i2c_testing(uint8_t * str_in, uint8_t* return_from_test_value)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b0c8      	sub	sp, #288	; 0x120
 8016bf8:	af02      	add	r7, sp, #8
 8016bfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016bfe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8016c02:	6018      	str	r0, [r3, #0]
 8016c04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016c08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016c0c:	6019      	str	r1, [r3, #0]

	int i2c_slave_callback=0;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int i2c_master_callback=0;
 8016c14:	2300      	movs	r3, #0
 8016c16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t buff_5[BUFF_SIZE]={0};
 8016c1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016c1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016c22:	2200      	movs	r2, #0
 8016c24:	601a      	str	r2, [r3, #0]
 8016c26:	3304      	adds	r3, #4
 8016c28:	22fc      	movs	r2, #252	; 0xfc
 8016c2a:	2100      	movs	r1, #0
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f000 fef7 	bl	8017a20 <memset>
	HAL_StatusTypeDef status= HAL_I2C_Slave_Receive_IT(I2C_SLAVE, buff_5, BUFF_SIZE);
 8016c32:	f107 030c 	add.w	r3, r7, #12
 8016c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	4837      	ldr	r0, [pc, #220]	; (8016d1c <i2c_testing+0x128>)
 8016c3e:	f7ee fef7 	bl	8005a30 <HAL_I2C_Slave_Receive_IT>
 8016c42:	4603      	mov	r3, r0
 8016c44:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if(status != HAL_OK)
 8016c48:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d006      	beq.n	8016c5e <i2c_testing+0x6a>
	{
		printf("I2C_SLAVE Receive failed with status: %d", status);
 8016c50:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016c54:	4619      	mov	r1, r3
 8016c56:	4832      	ldr	r0, [pc, #200]	; (8016d20 <i2c_testing+0x12c>)
 8016c58:	f000 fd1e 	bl	8017698 <iprintf>
		return;
 8016c5c:	e059      	b.n	8016d12 <i2c_testing+0x11e>
	}
	status= HAL_I2C_Master_Transmit(I2C_MASTER, 0, str_in, BUFF_SIZE, HAL_MAX_DELAY);
 8016c5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016c62:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8016c66:	f04f 33ff 	mov.w	r3, #4294967295
 8016c6a:	9300      	str	r3, [sp, #0]
 8016c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016c70:	6812      	ldr	r2, [r2, #0]
 8016c72:	2100      	movs	r1, #0
 8016c74:	482b      	ldr	r0, [pc, #172]	; (8016d24 <i2c_testing+0x130>)
 8016c76:	f7ee fca1 	bl	80055bc <HAL_I2C_Master_Transmit>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if(status != HAL_OK)
 8016c80:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d006      	beq.n	8016c96 <i2c_testing+0xa2>
	{
		printf("I2C_MASTER Transmit failed with status: %d", status);
 8016c88:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	4826      	ldr	r0, [pc, #152]	; (8016d28 <i2c_testing+0x134>)
 8016c90:	f000 fd02 	bl	8017698 <iprintf>
		return;
 8016c94:	e03d      	b.n	8016d12 <i2c_testing+0x11e>
	}
// I2C2 ADDRESS 1

	while(1){
		if(i2c_slave_callback)
 8016c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d033      	beq.n	8016d06 <i2c_testing+0x112>
		{
			i2c_slave_callback = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

			status = HAL_I2C_Slave_Transmit_IT(I2C_SLAVE, buff_5, BUFF_SIZE);
 8016ca4:	f107 030c 	add.w	r3, r7, #12
 8016ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016cac:	4619      	mov	r1, r3
 8016cae:	481b      	ldr	r0, [pc, #108]	; (8016d1c <i2c_testing+0x128>)
 8016cb0:	f7ee fe6e 	bl	8005990 <HAL_I2C_Slave_Transmit_IT>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			if(status != HAL_OK)
 8016cba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d005      	beq.n	8016cce <i2c_testing+0xda>
			{
				printf("I2C SLAVE failed with status: %d", status);
 8016cc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016cc6:	4619      	mov	r1, r3
 8016cc8:	4818      	ldr	r0, [pc, #96]	; (8016d2c <i2c_testing+0x138>)
 8016cca:	f000 fce5 	bl	8017698 <iprintf>
			}
			status= HAL_I2C_Master_Receive(I2C_MASTER, 1, return_from_test_value, BUFF_SIZE, HAL_MAX_DELAY);
 8016cce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016cd2:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8016cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8016cda:	9300      	str	r3, [sp, #0]
 8016cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016ce0:	6812      	ldr	r2, [r2, #0]
 8016ce2:	2101      	movs	r1, #1
 8016ce4:	480f      	ldr	r0, [pc, #60]	; (8016d24 <i2c_testing+0x130>)
 8016ce6:	f7ee fd5d 	bl	80057a4 <HAL_I2C_Master_Receive>
 8016cea:	4603      	mov	r3, r0
 8016cec:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			if(status != HAL_OK)
 8016cf0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d006      	beq.n	8016d06 <i2c_testing+0x112>
			{
				printf("I2C_MASTER Receive failed with status: %d", status);
 8016cf8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016cfc:	4619      	mov	r1, r3
 8016cfe:	480c      	ldr	r0, [pc, #48]	; (8016d30 <i2c_testing+0x13c>)
 8016d00:	f000 fcca 	bl	8017698 <iprintf>
				return;
 8016d04:	e005      	b.n	8016d12 <i2c_testing+0x11e>
			}


		}
		if(i2c_master_callback)
 8016d06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d100      	bne.n	8016d10 <i2c_testing+0x11c>
		if(i2c_slave_callback)
 8016d0e:	e7c2      	b.n	8016c96 <i2c_testing+0xa2>
		{
			return;
 8016d10:	bf00      	nop
		}

	}


}
 8016d12:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd80      	pop	{r7, pc}
 8016d1a:	bf00      	nop
 8016d1c:	20000318 	.word	0x20000318
 8016d20:	0801b414 	.word	0x0801b414
 8016d24:	200002c4 	.word	0x200002c4
 8016d28:	0801b440 	.word	0x0801b440
 8016d2c:	0801b46c 	.word	0x0801b46c
 8016d30:	0801b490 	.word	0x0801b490

08016d34 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)

{
 8016d34:	b480      	push	{r7}
 8016d36:	b083      	sub	sp, #12
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]


	if (hi2c==I2C_SLAVE){
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	4a09      	ldr	r2, [pc, #36]	; (8016d64 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8016d40:	4293      	cmp	r3, r2
 8016d42:	d102      	bne.n	8016d4a <HAL_I2C_SlaveRxCpltCallback+0x16>
		i2c_slave_callback=1;
 8016d44:	4b08      	ldr	r3, [pc, #32]	; (8016d68 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8016d46:	2201      	movs	r2, #1
 8016d48:	601a      	str	r2, [r3, #0]
	}

	if (hi2c==I2C_MASTER){
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	4a07      	ldr	r2, [pc, #28]	; (8016d6c <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	d102      	bne.n	8016d58 <HAL_I2C_SlaveRxCpltCallback+0x24>
		i2c_master_callback=1;
 8016d52:	4b07      	ldr	r3, [pc, #28]	; (8016d70 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8016d54:	2201      	movs	r2, #1
 8016d56:	601a      	str	r2, [r3, #0]

	}

}
 8016d58:	bf00      	nop
 8016d5a:	370c      	adds	r7, #12
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d62:	4770      	bx	lr
 8016d64:	20000318 	.word	0x20000318
 8016d68:	20008c10 	.word	0x20008c10
 8016d6c:	200002c4 	.word	0x200002c4
 8016d70:	20008c0c 	.word	0x20008c0c

08016d74 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, "there was error in spi ! \r\n", sizeof("there was error in spi ! \r\n"),HAL_MAX_DELAY);
 8016d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d80:	221c      	movs	r2, #28
 8016d82:	4904      	ldr	r1, [pc, #16]	; (8016d94 <HAL_I2C_ErrorCallback+0x20>)
 8016d84:	4804      	ldr	r0, [pc, #16]	; (8016d98 <HAL_I2C_ErrorCallback+0x24>)
 8016d86:	f7f3 fc1f 	bl	800a5c8 <HAL_UART_Transmit>


}
 8016d8a:	bf00      	nop
 8016d8c:	3708      	adds	r7, #8
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	0801b4bc 	.word	0x0801b4bc
 8016d98:	200007f0 	.word	0x200007f0

08016d9c <udp_receive_callback>:
extern uint16_t dest_port ;
extern struct udp_pcb *upcb;


void udp_receive_callback(void* arg, struct udp_pcb* upcb, struct pbuf* p, const ip_addr_t* addr, u16_t port)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	60f8      	str	r0, [r7, #12]
 8016da4:	60b9      	str	r1, [r7, #8]
 8016da6:	607a      	str	r2, [r7, #4]
 8016da8:	603b      	str	r3, [r7, #0]

	// Check if we finished with the last packet
	if(callback_flag == 1 || p->len > MAX_BUF_LEN)
 8016daa:	4b14      	ldr	r3, [pc, #80]	; (8016dfc <udp_receive_callback+0x60>)
 8016dac:	781b      	ldrb	r3, [r3, #0]
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	d004      	beq.n	8016dbc <udp_receive_callback+0x20>
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	895b      	ldrh	r3, [r3, #10]
 8016db6:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8016dba:	d903      	bls.n	8016dc4 <udp_receive_callback+0x28>
	{
		// Drop the packet
		pbuf_free(p);
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f7f6 fec7 	bl	800db50 <pbuf_free>
		return;
 8016dc2:	e018      	b.n	8016df6 <udp_receive_callback+0x5a>
	}
	// Store the sender information
	ip_addr_copy(dest_ipaddr, *addr);
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	4a0d      	ldr	r2, [pc, #52]	; (8016e00 <udp_receive_callback+0x64>)
 8016dca:	6013      	str	r3, [r2, #0]
	dest_port = port;
 8016dcc:	4a0d      	ldr	r2, [pc, #52]	; (8016e04 <udp_receive_callback+0x68>)
 8016dce:	8b3b      	ldrh	r3, [r7, #24]
 8016dd0:	8013      	strh	r3, [r2, #0]
	memcpy(incoming_buffer, p->payload, p->len);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6859      	ldr	r1, [r3, #4]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	895b      	ldrh	r3, [r3, #10]
 8016dda:	461a      	mov	r2, r3
 8016ddc:	480a      	ldr	r0, [pc, #40]	; (8016e08 <udp_receive_callback+0x6c>)
 8016dde:	f000 fe9a 	bl	8017b16 <memcpy>
	incoming_len = p->len;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	895a      	ldrh	r2, [r3, #10]
 8016de6:	4b09      	ldr	r3, [pc, #36]	; (8016e0c <udp_receive_callback+0x70>)
 8016de8:	801a      	strh	r2, [r3, #0]

	callback_flag = 1;
 8016dea:	4b04      	ldr	r3, [pc, #16]	; (8016dfc <udp_receive_callback+0x60>)
 8016dec:	2201      	movs	r2, #1
 8016dee:	701a      	strb	r2, [r3, #0]
	// free the pbuf
	pbuf_free(p);
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f7f6 fead 	bl	800db50 <pbuf_free>
}
 8016df6:	3710      	adds	r7, #16
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}
 8016dfc:	20008bfa 	.word	0x20008bfa
 8016e00:	20008bfc 	.word	0x20008bfc
 8016e04:	20008c00 	.word	0x20008c00
 8016e08:	20008af0 	.word	0x20008af0
 8016e0c:	20008bf8 	.word	0x20008bf8

08016e10 <send_packet>:

err_t send_packet(struct udp_pcb* pcb, const void* payload, u16_t payload_len, const ip_addr_t* ipaddr, u16_t port)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	60f8      	str	r0, [r7, #12]
 8016e18:	60b9      	str	r1, [r7, #8]
 8016e1a:	603b      	str	r3, [r7, #0]
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	80fb      	strh	r3, [r7, #6]
    err_t err;
    struct pbuf* p;
    // allocate a pbuf for the payload
    p = pbuf_alloc(PBUF_TRANSPORT, payload_len, PBUF_RAM);
 8016e20:	88fb      	ldrh	r3, [r7, #6]
 8016e22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e26:	4619      	mov	r1, r3
 8016e28:	2036      	movs	r0, #54	; 0x36
 8016e2a:	f7f6 fbad 	bl	800d588 <pbuf_alloc>
 8016e2e:	6178      	str	r0, [r7, #20]
    if (!p) {
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d102      	bne.n	8016e3c <send_packet+0x2c>
        // failed to allocate pbuf
        return ERR_MEM;
 8016e36:	f04f 33ff 	mov.w	r3, #4294967295
 8016e3a:	e013      	b.n	8016e64 <send_packet+0x54>
    }

    // copy the payload into the pbuf
    memcpy(p->payload, payload, payload_len);
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	88fa      	ldrh	r2, [r7, #6]
 8016e42:	68b9      	ldr	r1, [r7, #8]
 8016e44:	4618      	mov	r0, r3
 8016e46:	f000 fe66 	bl	8017b16 <memcpy>

    // send the packet
    err = udp_sendto(pcb, p, ipaddr, port);
 8016e4a:	8c3b      	ldrh	r3, [r7, #32]
 8016e4c:	683a      	ldr	r2, [r7, #0]
 8016e4e:	6979      	ldr	r1, [r7, #20]
 8016e50:	68f8      	ldr	r0, [r7, #12]
 8016e52:	f7fc fd83 	bl	801395c <udp_sendto>
 8016e56:	4603      	mov	r3, r0
 8016e58:	74fb      	strb	r3, [r7, #19]

    // free the pbuf
    pbuf_free(p);
 8016e5a:	6978      	ldr	r0, [r7, #20]
 8016e5c:	f7f6 fe78 	bl	800db50 <pbuf_free>

    return err;
 8016e60:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3718      	adds	r7, #24
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <udpServer_init>:


void udpServer_init(void) {
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
	// UDP Control Block structure

	upcb=udp_new();         			// UDP protocol control block
 8016e72:	f7fd f813 	bl	8013e9c <udp_new>
 8016e76:	4603      	mov	r3, r0
 8016e78:	4a12      	ldr	r2, [pc, #72]	; (8016ec4 <udpServer_init+0x58>)
 8016e7a:	6013      	str	r3, [r2, #0]

	u16_t server_port = SERVER_PORT;
 8016e7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8016e80:	80fb      	strh	r3, [r7, #6]
	callback_flag = 0;
 8016e82:	4b11      	ldr	r3, [pc, #68]	; (8016ec8 <udpServer_init+0x5c>)
 8016e84:	2200      	movs	r2, #0
 8016e86:	701a      	strb	r2, [r3, #0]
	err_t err = udp_bind(upcb, IP_ADDR_ANY, server_port);  // 50,007 is the server UDP port
 8016e88:	4b0e      	ldr	r3, [pc, #56]	; (8016ec4 <udpServer_init+0x58>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	88fa      	ldrh	r2, [r7, #6]
 8016e8e:	490f      	ldr	r1, [pc, #60]	; (8016ecc <udpServer_init+0x60>)
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7fc ff19 	bl	8013cc8 <udp_bind>
 8016e96:	4603      	mov	r3, r0
 8016e98:	717b      	strb	r3, [r7, #5]

	/* 3. Set a receive callback for the upcb */
	if (err == ERR_OK) {
 8016e9a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d107      	bne.n	8016eb2 <udpServer_init+0x46>

	   udp_recv(upcb, udp_receive_callback,NULL);
 8016ea2:	4b08      	ldr	r3, [pc, #32]	; (8016ec4 <udpServer_init+0x58>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	4909      	ldr	r1, [pc, #36]	; (8016ed0 <udpServer_init+0x64>)
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7fc ff94 	bl	8013dd8 <udp_recv>

   }
   else {
	   udp_remove(upcb);
   }
}
 8016eb0:	e004      	b.n	8016ebc <udpServer_init+0x50>
	   udp_remove(upcb);
 8016eb2:	4b04      	ldr	r3, [pc, #16]	; (8016ec4 <udpServer_init+0x58>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fc ffae 	bl	8013e18 <udp_remove>
}
 8016ebc:	bf00      	nop
 8016ebe:	3708      	adds	r7, #8
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}
 8016ec4:	20008c04 	.word	0x20008c04
 8016ec8:	20008bfa 	.word	0x20008bfa
 8016ecc:	0801b6f4 	.word	0x0801b6f4
 8016ed0:	08016d9d 	.word	0x08016d9d

08016ed4 <spi_testing>:
#define SPI_SLAVE &hspi2
#define UART_DEBUG &huart3
int spi_master_callback=0;
int spi_slave_callback=0;
void spi_testing(uint8_t * str_in, uint8_t* return_from_test_value)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b0c4      	sub	sp, #272	; 0x110
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016ede:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016ee2:	6018      	str	r0, [r3, #0]
 8016ee4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016ee8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016eec:	6019      	str	r1, [r3, #0]
	HAL_StatusTypeDef status;
	uint8_t buff[BUFF_SIZE]={0};
 8016eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	601a      	str	r2, [r3, #0]
 8016efa:	3304      	adds	r3, #4
 8016efc:	22fc      	movs	r2, #252	; 0xfc
 8016efe:	2100      	movs	r1, #0
 8016f00:	4618      	mov	r0, r3
 8016f02:	f000 fd8d 	bl	8017a20 <memset>
	status= HAL_SPI_Receive_DMA(SPI_SLAVE ,buff , BUFF_SIZE);
 8016f06:	f107 030c 	add.w	r3, r7, #12
 8016f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016f0e:	4619      	mov	r1, r3
 8016f10:	4823      	ldr	r0, [pc, #140]	; (8016fa0 <spi_testing+0xcc>)
 8016f12:	f7f1 ffd5 	bl	8008ec0 <HAL_SPI_Receive_DMA>
 8016f16:	4603      	mov	r3, r0
 8016f18:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if(status != HAL_OK){
 8016f1c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d134      	bne.n	8016f8e <spi_testing+0xba>
		//printf("SPI Receive failed with status: %d", status);
		return;
	}
	status= HAL_SPI_Transmit_IT(SPI_MASTER, str_in,BUFF_SIZE);
 8016f24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016f28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016f30:	6819      	ldr	r1, [r3, #0]
 8016f32:	481c      	ldr	r0, [pc, #112]	; (8016fa4 <spi_testing+0xd0>)
 8016f34:	f7f1 fe42 	bl	8008bbc <HAL_SPI_Transmit_IT>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if(status != HAL_OK)
 8016f3e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d125      	bne.n	8016f92 <spi_testing+0xbe>
		return;
	}


	while(1){
		if(spi_slave_callback)
 8016f46:	4b18      	ldr	r3, [pc, #96]	; (8016fa8 <spi_testing+0xd4>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d01a      	beq.n	8016f84 <spi_testing+0xb0>
		{

			spi_slave_callback = 0;
 8016f4e:	4b16      	ldr	r3, [pc, #88]	; (8016fa8 <spi_testing+0xd4>)
 8016f50:	2200      	movs	r2, #0
 8016f52:	601a      	str	r2, [r3, #0]
			//hspi1.Instance->SR &=~(((uint32_t)0x01)<<6);
			//hspi1.ErrorCode=0x00UL;
			//uint32_t dummy = 0;
			//HAL_SPI_Receive(&hspi1, &dummy, 4, HAL_MAX_DELAY);

			status=HAL_SPI_Transmit_DMA(SPI_SLAVE,buff,BUFF_SIZE);
 8016f54:	f107 030c 	add.w	r3, r7, #12
 8016f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	4810      	ldr	r0, [pc, #64]	; (8016fa0 <spi_testing+0xcc>)
 8016f60:	f7f1 feba 	bl	8008cd8 <HAL_SPI_Transmit_DMA>
 8016f64:	4603      	mov	r3, r0
 8016f66:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			if(status != HAL_OK)
				{
					//printf("SPI_MASTER Receive failed with status: %d", status);
				}
			status = HAL_SPI_Receive_DMA(SPI_MASTER, return_from_test_value, BUFF_SIZE);
 8016f6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016f6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016f76:	6819      	ldr	r1, [r3, #0]
 8016f78:	480a      	ldr	r0, [pc, #40]	; (8016fa4 <spi_testing+0xd0>)
 8016f7a:	f7f1 ffa1 	bl	8008ec0 <HAL_SPI_Receive_DMA>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			//{
				//printf("SPI_SLAVE TRANSMIT failed with status: %d", status);
		//	}

		}
		if(spi_master_callback)
 8016f84:	4b09      	ldr	r3, [pc, #36]	; (8016fac <spi_testing+0xd8>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d104      	bne.n	8016f96 <spi_testing+0xc2>
		if(spi_slave_callback)
 8016f8c:	e7db      	b.n	8016f46 <spi_testing+0x72>
		return;
 8016f8e:	bf00      	nop
 8016f90:	e002      	b.n	8016f98 <spi_testing+0xc4>
		return;
 8016f92:	bf00      	nop
 8016f94:	e000      	b.n	8016f98 <spi_testing+0xc4>
		{
			return return_from_test_value;
 8016f96:	bf00      	nop
		}

	}


}
 8016f98:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}
 8016fa0:	200004b0 	.word	0x200004b0
 8016fa4:	2000044c 	.word	0x2000044c
 8016fa8:	20008c18 	.word	0x20008c18
 8016fac:	20008c14 	.word	0x20008c14

08016fb0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)

{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]



	if (hspi==SPI_SLAVE){
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	4a08      	ldr	r2, [pc, #32]	; (8016fdc <HAL_SPI_TxCpltCallback+0x2c>)
 8016fbc:	4293      	cmp	r3, r2
 8016fbe:	d109      	bne.n	8016fd4 <HAL_SPI_TxCpltCallback+0x24>
		HAL_UART_Transmit(UART_DEBUG, "slave completed transaction!\r\n" ,sizeof("slave completed transaction!\r\n"),HAL_MAX_DELAY);
 8016fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8016fc4:	221f      	movs	r2, #31
 8016fc6:	4906      	ldr	r1, [pc, #24]	; (8016fe0 <HAL_SPI_TxCpltCallback+0x30>)
 8016fc8:	4806      	ldr	r0, [pc, #24]	; (8016fe4 <HAL_SPI_TxCpltCallback+0x34>)
 8016fca:	f7f3 fafd 	bl	800a5c8 <HAL_UART_Transmit>
		spi_master_callback=1;
 8016fce:	4b06      	ldr	r3, [pc, #24]	; (8016fe8 <HAL_SPI_TxCpltCallback+0x38>)
 8016fd0:	2201      	movs	r2, #1
 8016fd2:	601a      	str	r2, [r3, #0]


	}


}
 8016fd4:	bf00      	nop
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}
 8016fdc:	200004b0 	.word	0x200004b0
 8016fe0:	0801b4d8 	.word	0x0801b4d8
 8016fe4:	200007f0 	.word	0x200007f0
 8016fe8:	20008c14 	.word	0x20008c14

08016fec <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)

{
 8016fec:	b480      	push	{r7}
 8016fee:	b083      	sub	sp, #12
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]


	if (hspi==SPI_MASTER){
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	4a09      	ldr	r2, [pc, #36]	; (801701c <HAL_SPI_RxCpltCallback+0x30>)
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	d102      	bne.n	8017002 <HAL_SPI_RxCpltCallback+0x16>

		spi_master_callback=1;
 8016ffc:	4b08      	ldr	r3, [pc, #32]	; (8017020 <HAL_SPI_RxCpltCallback+0x34>)
 8016ffe:	2201      	movs	r2, #1
 8017000:	601a      	str	r2, [r3, #0]
	}

	if (hspi==SPI_SLAVE){
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	4a07      	ldr	r2, [pc, #28]	; (8017024 <HAL_SPI_RxCpltCallback+0x38>)
 8017006:	4293      	cmp	r3, r2
 8017008:	d102      	bne.n	8017010 <HAL_SPI_RxCpltCallback+0x24>
		spi_slave_callback=1;
 801700a:	4b07      	ldr	r3, [pc, #28]	; (8017028 <HAL_SPI_RxCpltCallback+0x3c>)
 801700c:	2201      	movs	r2, #1
 801700e:	601a      	str	r2, [r3, #0]

	}


}
 8017010:	bf00      	nop
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701a:	4770      	bx	lr
 801701c:	2000044c 	.word	0x2000044c
 8017020:	20008c14 	.word	0x20008c14
 8017024:	200004b0 	.word	0x200004b0
 8017028:	20008c18 	.word	0x20008c18

0801702c <HAL_SPI_ErrorCallback>:

HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 801702c:	b580      	push	{r7, lr}
 801702e:	b082      	sub	sp, #8
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
	//printf("there was spi fault. please check ErrorCode register in hspi");
	HAL_UART_Transmit(UART_DEBUG, "there was error in spi ! \r\n", sizeof("there was error in spi ! \r\n"),HAL_MAX_DELAY);
 8017034:	f04f 33ff 	mov.w	r3, #4294967295
 8017038:	221c      	movs	r2, #28
 801703a:	4904      	ldr	r1, [pc, #16]	; (801704c <HAL_SPI_ErrorCallback+0x20>)
 801703c:	4804      	ldr	r0, [pc, #16]	; (8017050 <HAL_SPI_ErrorCallback+0x24>)
 801703e:	f7f3 fac3 	bl	800a5c8 <HAL_UART_Transmit>
}
 8017042:	bf00      	nop
 8017044:	3708      	adds	r7, #8
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	0801b4f8 	.word	0x0801b4f8
 8017050:	200007f0 	.word	0x200007f0

08017054 <timer_testing>:
#define UART_DEBUG &huart3
#define TIME &htim7
#define RT &hrtc
int flag=0;

void timer_testing(uint8_t* new_interval, uint32_t* return_from_test_value){
 8017054:	b580      	push	{r7, lr}
 8017056:	b090      	sub	sp, #64	; 0x40
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef Time;
	int interval_sec=atoi((const char*)new_interval);
 801705e:	6878      	ldr	r0, [r7, #4]
 8017060:	f000 f98a 	bl	8017378 <atoi>
 8017064:	63f8      	str	r0, [r7, #60]	; 0x3c
	char buffer[20]={0};
 8017066:	2300      	movs	r3, #0
 8017068:	60bb      	str	r3, [r7, #8]
 801706a:	f107 030c 	add.w	r3, r7, #12
 801706e:	2200      	movs	r2, #0
 8017070:	601a      	str	r2, [r3, #0]
 8017072:	605a      	str	r2, [r3, #4]
 8017074:	609a      	str	r2, [r3, #8]
 8017076:	60da      	str	r2, [r3, #12]

	// Update current_interval and recalculate auto-reload value
	__HAL_TIM_SET_AUTORELOAD(TIME,  (500/*interval_sec*72*10^6/(htim7.Init.Prescaler+1))-1*/));
 8017078:	4b40      	ldr	r3, [pc, #256]	; (801717c <timer_testing+0x128>)
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017080:	62da      	str	r2, [r3, #44]	; 0x2c
 8017082:	4b3e      	ldr	r3, [pc, #248]	; (801717c <timer_testing+0x128>)
 8017084:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017088:	60da      	str	r2, [r3, #12]
	//htim7.Instance->ARR = ; // SET TIMER ACCORDING TO USER SECONDS INPUT INTERVAL
	 /* Get the current Time */
	HAL_RTC_GetTime(RT, &Time, RTC_FORMAT_BIN);
 801708a:	f107 031c 	add.w	r3, r7, #28
 801708e:	2200      	movs	r2, #0
 8017090:	4619      	mov	r1, r3
 8017092:	483b      	ldr	r0, [pc, #236]	; (8017180 <timer_testing+0x12c>)
 8017094:	f7f1 faa8 	bl	80085e8 <HAL_RTC_GetTime>

	  /* Get the current Date */

	/* Process the date and time values (e.g., print to console, store in variables) */
	//printf("first sample current Time: %02d:%02d:%02d\n", Time.Hours, Time.Minutes, Time.Seconds);
	uint32_t first_sample_time=Time.Hours*3600+Time.Minutes*60+Time.Seconds;
 8017098:	7f3b      	ldrb	r3, [r7, #28]
 801709a:	461a      	mov	r2, r3
 801709c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80170a0:	fb03 f202 	mul.w	r2, r3, r2
 80170a4:	7f7b      	ldrb	r3, [r7, #29]
 80170a6:	4619      	mov	r1, r3
 80170a8:	460b      	mov	r3, r1
 80170aa:	011b      	lsls	r3, r3, #4
 80170ac:	1a5b      	subs	r3, r3, r1
 80170ae:	009b      	lsls	r3, r3, #2
 80170b0:	4413      	add	r3, r2
 80170b2:	7fba      	ldrb	r2, [r7, #30]
 80170b4:	4413      	add	r3, r2
 80170b6:	63bb      	str	r3, [r7, #56]	; 0x38
	*(TIME.Instance->SR)&= (uint32_t)0;
 80170b8:	4b30      	ldr	r3, [pc, #192]	; (801717c <timer_testing+0x128>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	691b      	ldr	r3, [r3, #16]
 80170be:	4b2f      	ldr	r3, [pc, #188]	; (801717c <timer_testing+0x128>)
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	2200      	movs	r2, #0
 80170c4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(TIME);
 80170c6:	482d      	ldr	r0, [pc, #180]	; (801717c <timer_testing+0x128>)
 80170c8:	f7f2 fef6 	bl	8009eb8 <HAL_TIM_Base_Start_IT>

	while (1){

		sprintf(buffer, "%d",htim7.Instance->CNT );
 80170cc:	4b2b      	ldr	r3, [pc, #172]	; (801717c <timer_testing+0x128>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170d2:	f107 0308 	add.w	r3, r7, #8
 80170d6:	492b      	ldr	r1, [pc, #172]	; (8017184 <timer_testing+0x130>)
 80170d8:	4618      	mov	r0, r3
 80170da:	f000 fb7f 	bl	80177dc <siprintf>
		HAL_UART_Transmit(UART_DEBUG, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80170de:	f107 0108 	add.w	r1, r7, #8
 80170e2:	f04f 33ff 	mov.w	r3, #4294967295
 80170e6:	2214      	movs	r2, #20
 80170e8:	4827      	ldr	r0, [pc, #156]	; (8017188 <timer_testing+0x134>)
 80170ea:	f7f3 fa6d 	bl	800a5c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(UART_DEBUG,"\n\r",sizeof("\n\r"),HAL_MAX_DELAY);
 80170ee:	f04f 33ff 	mov.w	r3, #4294967295
 80170f2:	2203      	movs	r2, #3
 80170f4:	4925      	ldr	r1, [pc, #148]	; (801718c <timer_testing+0x138>)
 80170f6:	4824      	ldr	r0, [pc, #144]	; (8017188 <timer_testing+0x134>)
 80170f8:	f7f3 fa66 	bl	800a5c8 <HAL_UART_Transmit>
		memset(buffer,0,sizeof(buffer));
 80170fc:	f107 0308 	add.w	r3, r7, #8
 8017100:	2214      	movs	r2, #20
 8017102:	2100      	movs	r1, #0
 8017104:	4618      	mov	r0, r3
 8017106:	f000 fc8b 	bl	8017a20 <memset>
		if (flag){ //sample time again
 801710a:	4b21      	ldr	r3, [pc, #132]	; (8017190 <timer_testing+0x13c>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d0dc      	beq.n	80170cc <timer_testing+0x78>
			HAL_TIM_Base_Stop_IT(TIME);
 8017112:	481a      	ldr	r0, [pc, #104]	; (801717c <timer_testing+0x128>)
 8017114:	f7f2 ff48 	bl	8009fa8 <HAL_TIM_Base_Stop_IT>

			HAL_RTC_GetTime(RT, &Time, RTC_FORMAT_BIN);
 8017118:	f107 031c 	add.w	r3, r7, #28
 801711c:	2200      	movs	r2, #0
 801711e:	4619      	mov	r1, r3
 8017120:	4817      	ldr	r0, [pc, #92]	; (8017180 <timer_testing+0x12c>)
 8017122:	f7f1 fa61 	bl	80085e8 <HAL_RTC_GetTime>
			printf("second sample current Time: %02d:%02d:%02d\n", Time.Hours, Time.Minutes, Time.Seconds);
 8017126:	7f3b      	ldrb	r3, [r7, #28]
 8017128:	4619      	mov	r1, r3
 801712a:	7f7b      	ldrb	r3, [r7, #29]
 801712c:	461a      	mov	r2, r3
 801712e:	7fbb      	ldrb	r3, [r7, #30]
 8017130:	4818      	ldr	r0, [pc, #96]	; (8017194 <timer_testing+0x140>)
 8017132:	f000 fab1 	bl	8017698 <iprintf>

			uint32_t second_sample_time=Time.Hours*3600+Time.Minutes*60+Time.Seconds;
 8017136:	7f3b      	ldrb	r3, [r7, #28]
 8017138:	461a      	mov	r2, r3
 801713a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801713e:	fb03 f202 	mul.w	r2, r3, r2
 8017142:	7f7b      	ldrb	r3, [r7, #29]
 8017144:	4619      	mov	r1, r3
 8017146:	460b      	mov	r3, r1
 8017148:	011b      	lsls	r3, r3, #4
 801714a:	1a5b      	subs	r3, r3, r1
 801714c:	009b      	lsls	r3, r3, #2
 801714e:	4413      	add	r3, r2
 8017150:	7fba      	ldrb	r2, [r7, #30]
 8017152:	4413      	add	r3, r2
 8017154:	637b      	str	r3, [r7, #52]	; 0x34
			uint32_t delta=second_sample_time-first_sample_time;
 8017156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801715a:	1ad3      	subs	r3, r2, r3
 801715c:	633b      	str	r3, [r7, #48]	; 0x30
			printf("interval: %d\n",delta);
 801715e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017160:	480d      	ldr	r0, [pc, #52]	; (8017198 <timer_testing+0x144>)
 8017162:	f000 fa99 	bl	8017698 <iprintf>
			flag=0;
 8017166:	4b0a      	ldr	r3, [pc, #40]	; (8017190 <timer_testing+0x13c>)
 8017168:	2200      	movs	r2, #0
 801716a:	601a      	str	r2, [r3, #0]
			*return_from_test_value=delta;
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017170:	601a      	str	r2, [r3, #0]
			break;
 8017172:	bf00      	nop
		}
	}



}
 8017174:	bf00      	nop
 8017176:	3740      	adds	r7, #64	; 0x40
 8017178:	46bd      	mov	sp, r7
 801717a:	bd80      	pop	{r7, pc}
 801717c:	20000694 	.word	0x20000694
 8017180:	2000042c 	.word	0x2000042c
 8017184:	0801b514 	.word	0x0801b514
 8017188:	200007f0 	.word	0x200007f0
 801718c:	0801b518 	.word	0x0801b518
 8017190:	20008c1c 	.word	0x20008c1c
 8017194:	0801b51c 	.word	0x0801b51c
 8017198:	0801b548 	.word	0x0801b548

0801719c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801719c:	b480      	push	{r7}
 801719e:	b083      	sub	sp, #12
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
	if (htim==TIME){
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	4a06      	ldr	r2, [pc, #24]	; (80171c0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80171a8:	4293      	cmp	r3, r2
 80171aa:	d102      	bne.n	80171b2 <HAL_TIM_PeriodElapsedCallback+0x16>
		flag=1;
 80171ac:	4b05      	ldr	r3, [pc, #20]	; (80171c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80171ae:	2201      	movs	r2, #1
 80171b0:	601a      	str	r2, [r3, #0]

	}

}
 80171b2:	bf00      	nop
 80171b4:	370c      	adds	r7, #12
 80171b6:	46bd      	mov	sp, r7
 80171b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171bc:	4770      	bx	lr
 80171be:	bf00      	nop
 80171c0:	20000694 	.word	0x20000694
 80171c4:	20008c1c 	.word	0x20008c1c

080171c8 <uart_testing>:
uint16_t Size=BUFF_SIZE;
int uart2_flag_callback=0;
int uart5_flag_callback=0;

void uart_testing(uint8_t * str_in, uint8_t* return_from_test_value)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80171ce:	af00      	add	r7, sp, #0
 80171d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80171d4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80171d8:	6018      	str	r0, [r3, #0]
 80171da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80171de:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80171e2:	6019      	str	r1, [r3, #0]
	HAL_StatusTypeDef status;
	uint8_t buff_5[BUFF_SIZE]={0};
 80171e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80171e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80171ec:	2200      	movs	r2, #0
 80171ee:	601a      	str	r2, [r3, #0]
 80171f0:	3304      	adds	r3, #4
 80171f2:	22fc      	movs	r2, #252	; 0xfc
 80171f4:	2100      	movs	r1, #0
 80171f6:	4618      	mov	r0, r3
 80171f8:	f000 fc12 	bl	8017a20 <memset>
	uint8_t buff_2[BUFF_SIZE]={0};
 80171fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017200:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8017204:	2200      	movs	r2, #0
 8017206:	601a      	str	r2, [r3, #0]
 8017208:	3304      	adds	r3, #4
 801720a:	22fc      	movs	r2, #252	; 0xfc
 801720c:	2100      	movs	r1, #0
 801720e:	4618      	mov	r0, r3
 8017210:	f000 fc06 	bl	8017a20 <memset>
	status = HAL_UARTEx_ReceiveToIdle_DMA(UART_5, buff_5, Size);
 8017214:	4b3e      	ldr	r3, [pc, #248]	; (8017310 <uart_testing+0x148>)
 8017216:	881a      	ldrh	r2, [r3, #0]
 8017218:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801721c:	4619      	mov	r1, r3
 801721e:	483d      	ldr	r0, [pc, #244]	; (8017314 <uart_testing+0x14c>)
 8017220:	f7f4 fbb0 	bl	800b984 <HAL_UARTEx_ReceiveToIdle_DMA>
 8017224:	4603      	mov	r3, r0
 8017226:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if(status != HAL_OK)
 801722a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 801722e:	2b00      	cmp	r3, #0
 8017230:	d006      	beq.n	8017240 <uart_testing+0x78>
	{
		printf("UART_5 Transmit failed with status: %d", status);
 8017232:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8017236:	4619      	mov	r1, r3
 8017238:	4837      	ldr	r0, [pc, #220]	; (8017318 <uart_testing+0x150>)
 801723a:	f000 fa2d 	bl	8017698 <iprintf>
		return;
 801723e:	e062      	b.n	8017306 <uart_testing+0x13e>
	}
	status= HAL_UART_Transmit(UART_2 ,str_in, strlen(str_in), HAL_MAX_DELAY);
 8017240:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017244:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017248:	6818      	ldr	r0, [r3, #0]
 801724a:	f7e8 ffeb 	bl	8000224 <strlen>
 801724e:	4603      	mov	r3, r0
 8017250:	b29a      	uxth	r2, r3
 8017252:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017256:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 801725a:	f04f 33ff 	mov.w	r3, #4294967295
 801725e:	6809      	ldr	r1, [r1, #0]
 8017260:	482e      	ldr	r0, [pc, #184]	; (801731c <uart_testing+0x154>)
 8017262:	f7f3 f9b1 	bl	800a5c8 <HAL_UART_Transmit>
 8017266:	4603      	mov	r3, r0
 8017268:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if(status != HAL_OK)
 801726c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8017270:	2b00      	cmp	r3, #0
 8017272:	d006      	beq.n	8017282 <uart_testing+0xba>
	{
		printf("UART_2 Transmit failed with status: %d", status);
 8017274:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8017278:	4619      	mov	r1, r3
 801727a:	4829      	ldr	r0, [pc, #164]	; (8017320 <uart_testing+0x158>)
 801727c:	f000 fa0c 	bl	8017698 <iprintf>
		return;
 8017280:	e041      	b.n	8017306 <uart_testing+0x13e>
	}


	while(1){
		if(uart5_flag_callback)
 8017282:	4b28      	ldr	r3, [pc, #160]	; (8017324 <uart_testing+0x15c>)
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d036      	beq.n	80172f8 <uart_testing+0x130>
		{

			uart5_flag_callback = 0;
 801728a:	4b26      	ldr	r3, [pc, #152]	; (8017324 <uart_testing+0x15c>)
 801728c:	2200      	movs	r2, #0
 801728e:	601a      	str	r2, [r3, #0]
			status= HAL_UARTEx_ReceiveToIdle_DMA(UART_2, return_from_test_value, Size);
 8017290:	4b1f      	ldr	r3, [pc, #124]	; (8017310 <uart_testing+0x148>)
 8017292:	881a      	ldrh	r2, [r3, #0]
 8017294:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017298:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801729c:	6819      	ldr	r1, [r3, #0]
 801729e:	481f      	ldr	r0, [pc, #124]	; (801731c <uart_testing+0x154>)
 80172a0:	f7f4 fb70 	bl	800b984 <HAL_UARTEx_ReceiveToIdle_DMA>
 80172a4:	4603      	mov	r3, r0
 80172a6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if(status != HAL_OK)
 80172aa:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d006      	beq.n	80172c0 <uart_testing+0xf8>
			{
				printf("UART_2 Receive failed with status: %d", status);
 80172b2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80172b6:	4619      	mov	r1, r3
 80172b8:	481b      	ldr	r0, [pc, #108]	; (8017328 <uart_testing+0x160>)
 80172ba:	f000 f9ed 	bl	8017698 <iprintf>
				return;
 80172be:	e022      	b.n	8017306 <uart_testing+0x13e>
			}
			status = HAL_UART_Transmit(UART_5, buff_5, strlen(buff_5) ,HAL_MAX_DELAY);
 80172c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80172c4:	4618      	mov	r0, r3
 80172c6:	f7e8 ffad 	bl	8000224 <strlen>
 80172ca:	4603      	mov	r3, r0
 80172cc:	b29a      	uxth	r2, r3
 80172ce:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80172d2:	f04f 33ff 	mov.w	r3, #4294967295
 80172d6:	480f      	ldr	r0, [pc, #60]	; (8017314 <uart_testing+0x14c>)
 80172d8:	f7f3 f976 	bl	800a5c8 <HAL_UART_Transmit>
 80172dc:	4603      	mov	r3, r0
 80172de:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if(status != HAL_OK)
 80172e2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d006      	beq.n	80172f8 <uart_testing+0x130>
			{
				printf("UART_5 TRANSMIT failed with status: %d", status);
 80172ea:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80172ee:	4619      	mov	r1, r3
 80172f0:	480e      	ldr	r0, [pc, #56]	; (801732c <uart_testing+0x164>)
 80172f2:	f000 f9d1 	bl	8017698 <iprintf>
				return;
 80172f6:	e006      	b.n	8017306 <uart_testing+0x13e>
			}

		}
		if(uart2_flag_callback)
 80172f8:	4b0d      	ldr	r3, [pc, #52]	; (8017330 <uart_testing+0x168>)
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d0c0      	beq.n	8017282 <uart_testing+0xba>
		{
			uart2_flag_callback=0;
 8017300:	4b0b      	ldr	r3, [pc, #44]	; (8017330 <uart_testing+0x168>)
 8017302:	2200      	movs	r2, #0
 8017304:	601a      	str	r2, [r3, #0]
		}

	}


}
 8017306:	f507 7704 	add.w	r7, r7, #528	; 0x210
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
 801730e:	bf00      	nop
 8017310:	2000002a 	.word	0x2000002a
 8017314:	200006e0 	.word	0x200006e0
 8017318:	0801b558 	.word	0x0801b558
 801731c:	20000768 	.word	0x20000768
 8017320:	0801b580 	.word	0x0801b580
 8017324:	20008c24 	.word	0x20008c24
 8017328:	0801b5a8 	.word	0x0801b5a8
 801732c:	0801b5d0 	.word	0x0801b5d0
 8017330:	20008c20 	.word	0x20008c20

08017334 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8017334:	b480      	push	{r7}
 8017336:	b083      	sub	sp, #12
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	460b      	mov	r3, r1
 801733e:	807b      	strh	r3, [r7, #2]



	if (huart==UART_5){
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	4a09      	ldr	r2, [pc, #36]	; (8017368 <HAL_UARTEx_RxEventCallback+0x34>)
 8017344:	4293      	cmp	r3, r2
 8017346:	d102      	bne.n	801734e <HAL_UARTEx_RxEventCallback+0x1a>
		uart5_flag_callback=1;
 8017348:	4b08      	ldr	r3, [pc, #32]	; (801736c <HAL_UARTEx_RxEventCallback+0x38>)
 801734a:	2201      	movs	r2, #1
 801734c:	601a      	str	r2, [r3, #0]
	}

	if (huart==UART_2){
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	4a07      	ldr	r2, [pc, #28]	; (8017370 <HAL_UARTEx_RxEventCallback+0x3c>)
 8017352:	4293      	cmp	r3, r2
 8017354:	d102      	bne.n	801735c <HAL_UARTEx_RxEventCallback+0x28>
		uart2_flag_callback=1;
 8017356:	4b07      	ldr	r3, [pc, #28]	; (8017374 <HAL_UARTEx_RxEventCallback+0x40>)
 8017358:	2201      	movs	r2, #1
 801735a:	601a      	str	r2, [r3, #0]

	}
}
 801735c:	bf00      	nop
 801735e:	370c      	adds	r7, #12
 8017360:	46bd      	mov	sp, r7
 8017362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017366:	4770      	bx	lr
 8017368:	200006e0 	.word	0x200006e0
 801736c:	20008c24 	.word	0x20008c24
 8017370:	20000768 	.word	0x20000768
 8017374:	20008c20 	.word	0x20008c20

08017378 <atoi>:
 8017378:	220a      	movs	r2, #10
 801737a:	2100      	movs	r1, #0
 801737c:	f000 b8c0 	b.w	8017500 <strtol>

08017380 <rand>:
 8017380:	4b16      	ldr	r3, [pc, #88]	; (80173dc <rand+0x5c>)
 8017382:	b510      	push	{r4, lr}
 8017384:	681c      	ldr	r4, [r3, #0]
 8017386:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017388:	b9b3      	cbnz	r3, 80173b8 <rand+0x38>
 801738a:	2018      	movs	r0, #24
 801738c:	f000 fc3c 	bl	8017c08 <malloc>
 8017390:	4602      	mov	r2, r0
 8017392:	6320      	str	r0, [r4, #48]	; 0x30
 8017394:	b920      	cbnz	r0, 80173a0 <rand+0x20>
 8017396:	4b12      	ldr	r3, [pc, #72]	; (80173e0 <rand+0x60>)
 8017398:	4812      	ldr	r0, [pc, #72]	; (80173e4 <rand+0x64>)
 801739a:	2152      	movs	r1, #82	; 0x52
 801739c:	f000 fbca 	bl	8017b34 <__assert_func>
 80173a0:	4911      	ldr	r1, [pc, #68]	; (80173e8 <rand+0x68>)
 80173a2:	4b12      	ldr	r3, [pc, #72]	; (80173ec <rand+0x6c>)
 80173a4:	e9c0 1300 	strd	r1, r3, [r0]
 80173a8:	4b11      	ldr	r3, [pc, #68]	; (80173f0 <rand+0x70>)
 80173aa:	6083      	str	r3, [r0, #8]
 80173ac:	230b      	movs	r3, #11
 80173ae:	8183      	strh	r3, [r0, #12]
 80173b0:	2100      	movs	r1, #0
 80173b2:	2001      	movs	r0, #1
 80173b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80173b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80173ba:	480e      	ldr	r0, [pc, #56]	; (80173f4 <rand+0x74>)
 80173bc:	690b      	ldr	r3, [r1, #16]
 80173be:	694c      	ldr	r4, [r1, #20]
 80173c0:	4a0d      	ldr	r2, [pc, #52]	; (80173f8 <rand+0x78>)
 80173c2:	4358      	muls	r0, r3
 80173c4:	fb02 0004 	mla	r0, r2, r4, r0
 80173c8:	fba3 3202 	umull	r3, r2, r3, r2
 80173cc:	3301      	adds	r3, #1
 80173ce:	eb40 0002 	adc.w	r0, r0, r2
 80173d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80173d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80173da:	bd10      	pop	{r4, pc}
 80173dc:	20000084 	.word	0x20000084
 80173e0:	0801b706 	.word	0x0801b706
 80173e4:	0801b71d 	.word	0x0801b71d
 80173e8:	abcd330e 	.word	0xabcd330e
 80173ec:	e66d1234 	.word	0xe66d1234
 80173f0:	0005deec 	.word	0x0005deec
 80173f4:	5851f42d 	.word	0x5851f42d
 80173f8:	4c957f2d 	.word	0x4c957f2d

080173fc <_strtol_l.constprop.0>:
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017402:	d001      	beq.n	8017408 <_strtol_l.constprop.0+0xc>
 8017404:	2b24      	cmp	r3, #36	; 0x24
 8017406:	d906      	bls.n	8017416 <_strtol_l.constprop.0+0x1a>
 8017408:	f000 fb58 	bl	8017abc <__errno>
 801740c:	2316      	movs	r3, #22
 801740e:	6003      	str	r3, [r0, #0]
 8017410:	2000      	movs	r0, #0
 8017412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017416:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80174fc <_strtol_l.constprop.0+0x100>
 801741a:	460d      	mov	r5, r1
 801741c:	462e      	mov	r6, r5
 801741e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017422:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017426:	f017 0708 	ands.w	r7, r7, #8
 801742a:	d1f7      	bne.n	801741c <_strtol_l.constprop.0+0x20>
 801742c:	2c2d      	cmp	r4, #45	; 0x2d
 801742e:	d132      	bne.n	8017496 <_strtol_l.constprop.0+0x9a>
 8017430:	782c      	ldrb	r4, [r5, #0]
 8017432:	2701      	movs	r7, #1
 8017434:	1cb5      	adds	r5, r6, #2
 8017436:	2b00      	cmp	r3, #0
 8017438:	d05b      	beq.n	80174f2 <_strtol_l.constprop.0+0xf6>
 801743a:	2b10      	cmp	r3, #16
 801743c:	d109      	bne.n	8017452 <_strtol_l.constprop.0+0x56>
 801743e:	2c30      	cmp	r4, #48	; 0x30
 8017440:	d107      	bne.n	8017452 <_strtol_l.constprop.0+0x56>
 8017442:	782c      	ldrb	r4, [r5, #0]
 8017444:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017448:	2c58      	cmp	r4, #88	; 0x58
 801744a:	d14d      	bne.n	80174e8 <_strtol_l.constprop.0+0xec>
 801744c:	786c      	ldrb	r4, [r5, #1]
 801744e:	2310      	movs	r3, #16
 8017450:	3502      	adds	r5, #2
 8017452:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017456:	f108 38ff 	add.w	r8, r8, #4294967295
 801745a:	f04f 0e00 	mov.w	lr, #0
 801745e:	fbb8 f9f3 	udiv	r9, r8, r3
 8017462:	4676      	mov	r6, lr
 8017464:	fb03 8a19 	mls	sl, r3, r9, r8
 8017468:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801746c:	f1bc 0f09 	cmp.w	ip, #9
 8017470:	d816      	bhi.n	80174a0 <_strtol_l.constprop.0+0xa4>
 8017472:	4664      	mov	r4, ip
 8017474:	42a3      	cmp	r3, r4
 8017476:	dd24      	ble.n	80174c2 <_strtol_l.constprop.0+0xc6>
 8017478:	f1be 3fff 	cmp.w	lr, #4294967295
 801747c:	d008      	beq.n	8017490 <_strtol_l.constprop.0+0x94>
 801747e:	45b1      	cmp	r9, r6
 8017480:	d31c      	bcc.n	80174bc <_strtol_l.constprop.0+0xc0>
 8017482:	d101      	bne.n	8017488 <_strtol_l.constprop.0+0x8c>
 8017484:	45a2      	cmp	sl, r4
 8017486:	db19      	blt.n	80174bc <_strtol_l.constprop.0+0xc0>
 8017488:	fb06 4603 	mla	r6, r6, r3, r4
 801748c:	f04f 0e01 	mov.w	lr, #1
 8017490:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017494:	e7e8      	b.n	8017468 <_strtol_l.constprop.0+0x6c>
 8017496:	2c2b      	cmp	r4, #43	; 0x2b
 8017498:	bf04      	itt	eq
 801749a:	782c      	ldrbeq	r4, [r5, #0]
 801749c:	1cb5      	addeq	r5, r6, #2
 801749e:	e7ca      	b.n	8017436 <_strtol_l.constprop.0+0x3a>
 80174a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80174a4:	f1bc 0f19 	cmp.w	ip, #25
 80174a8:	d801      	bhi.n	80174ae <_strtol_l.constprop.0+0xb2>
 80174aa:	3c37      	subs	r4, #55	; 0x37
 80174ac:	e7e2      	b.n	8017474 <_strtol_l.constprop.0+0x78>
 80174ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80174b2:	f1bc 0f19 	cmp.w	ip, #25
 80174b6:	d804      	bhi.n	80174c2 <_strtol_l.constprop.0+0xc6>
 80174b8:	3c57      	subs	r4, #87	; 0x57
 80174ba:	e7db      	b.n	8017474 <_strtol_l.constprop.0+0x78>
 80174bc:	f04f 3eff 	mov.w	lr, #4294967295
 80174c0:	e7e6      	b.n	8017490 <_strtol_l.constprop.0+0x94>
 80174c2:	f1be 3fff 	cmp.w	lr, #4294967295
 80174c6:	d105      	bne.n	80174d4 <_strtol_l.constprop.0+0xd8>
 80174c8:	2322      	movs	r3, #34	; 0x22
 80174ca:	6003      	str	r3, [r0, #0]
 80174cc:	4646      	mov	r6, r8
 80174ce:	b942      	cbnz	r2, 80174e2 <_strtol_l.constprop.0+0xe6>
 80174d0:	4630      	mov	r0, r6
 80174d2:	e79e      	b.n	8017412 <_strtol_l.constprop.0+0x16>
 80174d4:	b107      	cbz	r7, 80174d8 <_strtol_l.constprop.0+0xdc>
 80174d6:	4276      	negs	r6, r6
 80174d8:	2a00      	cmp	r2, #0
 80174da:	d0f9      	beq.n	80174d0 <_strtol_l.constprop.0+0xd4>
 80174dc:	f1be 0f00 	cmp.w	lr, #0
 80174e0:	d000      	beq.n	80174e4 <_strtol_l.constprop.0+0xe8>
 80174e2:	1e69      	subs	r1, r5, #1
 80174e4:	6011      	str	r1, [r2, #0]
 80174e6:	e7f3      	b.n	80174d0 <_strtol_l.constprop.0+0xd4>
 80174e8:	2430      	movs	r4, #48	; 0x30
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d1b1      	bne.n	8017452 <_strtol_l.constprop.0+0x56>
 80174ee:	2308      	movs	r3, #8
 80174f0:	e7af      	b.n	8017452 <_strtol_l.constprop.0+0x56>
 80174f2:	2c30      	cmp	r4, #48	; 0x30
 80174f4:	d0a5      	beq.n	8017442 <_strtol_l.constprop.0+0x46>
 80174f6:	230a      	movs	r3, #10
 80174f8:	e7ab      	b.n	8017452 <_strtol_l.constprop.0+0x56>
 80174fa:	bf00      	nop
 80174fc:	0801b776 	.word	0x0801b776

08017500 <strtol>:
 8017500:	4613      	mov	r3, r2
 8017502:	460a      	mov	r2, r1
 8017504:	4601      	mov	r1, r0
 8017506:	4802      	ldr	r0, [pc, #8]	; (8017510 <strtol+0x10>)
 8017508:	6800      	ldr	r0, [r0, #0]
 801750a:	f7ff bf77 	b.w	80173fc <_strtol_l.constprop.0>
 801750e:	bf00      	nop
 8017510:	20000084 	.word	0x20000084

08017514 <std>:
 8017514:	2300      	movs	r3, #0
 8017516:	b510      	push	{r4, lr}
 8017518:	4604      	mov	r4, r0
 801751a:	e9c0 3300 	strd	r3, r3, [r0]
 801751e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017522:	6083      	str	r3, [r0, #8]
 8017524:	8181      	strh	r1, [r0, #12]
 8017526:	6643      	str	r3, [r0, #100]	; 0x64
 8017528:	81c2      	strh	r2, [r0, #14]
 801752a:	6183      	str	r3, [r0, #24]
 801752c:	4619      	mov	r1, r3
 801752e:	2208      	movs	r2, #8
 8017530:	305c      	adds	r0, #92	; 0x5c
 8017532:	f000 fa75 	bl	8017a20 <memset>
 8017536:	4b0d      	ldr	r3, [pc, #52]	; (801756c <std+0x58>)
 8017538:	6263      	str	r3, [r4, #36]	; 0x24
 801753a:	4b0d      	ldr	r3, [pc, #52]	; (8017570 <std+0x5c>)
 801753c:	62a3      	str	r3, [r4, #40]	; 0x28
 801753e:	4b0d      	ldr	r3, [pc, #52]	; (8017574 <std+0x60>)
 8017540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017542:	4b0d      	ldr	r3, [pc, #52]	; (8017578 <std+0x64>)
 8017544:	6323      	str	r3, [r4, #48]	; 0x30
 8017546:	4b0d      	ldr	r3, [pc, #52]	; (801757c <std+0x68>)
 8017548:	6224      	str	r4, [r4, #32]
 801754a:	429c      	cmp	r4, r3
 801754c:	d006      	beq.n	801755c <std+0x48>
 801754e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017552:	4294      	cmp	r4, r2
 8017554:	d002      	beq.n	801755c <std+0x48>
 8017556:	33d0      	adds	r3, #208	; 0xd0
 8017558:	429c      	cmp	r4, r3
 801755a:	d105      	bne.n	8017568 <std+0x54>
 801755c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017564:	f000 bad4 	b.w	8017b10 <__retarget_lock_init_recursive>
 8017568:	bd10      	pop	{r4, pc}
 801756a:	bf00      	nop
 801756c:	0801781d 	.word	0x0801781d
 8017570:	0801783f 	.word	0x0801783f
 8017574:	08017877 	.word	0x08017877
 8017578:	0801789b 	.word	0x0801789b
 801757c:	20008c28 	.word	0x20008c28

08017580 <stdio_exit_handler>:
 8017580:	4a02      	ldr	r2, [pc, #8]	; (801758c <stdio_exit_handler+0xc>)
 8017582:	4903      	ldr	r1, [pc, #12]	; (8017590 <stdio_exit_handler+0x10>)
 8017584:	4803      	ldr	r0, [pc, #12]	; (8017594 <stdio_exit_handler+0x14>)
 8017586:	f000 b869 	b.w	801765c <_fwalk_sglue>
 801758a:	bf00      	nop
 801758c:	2000002c 	.word	0x2000002c
 8017590:	080186d5 	.word	0x080186d5
 8017594:	20000038 	.word	0x20000038

08017598 <cleanup_stdio>:
 8017598:	6841      	ldr	r1, [r0, #4]
 801759a:	4b0c      	ldr	r3, [pc, #48]	; (80175cc <cleanup_stdio+0x34>)
 801759c:	4299      	cmp	r1, r3
 801759e:	b510      	push	{r4, lr}
 80175a0:	4604      	mov	r4, r0
 80175a2:	d001      	beq.n	80175a8 <cleanup_stdio+0x10>
 80175a4:	f001 f896 	bl	80186d4 <_fflush_r>
 80175a8:	68a1      	ldr	r1, [r4, #8]
 80175aa:	4b09      	ldr	r3, [pc, #36]	; (80175d0 <cleanup_stdio+0x38>)
 80175ac:	4299      	cmp	r1, r3
 80175ae:	d002      	beq.n	80175b6 <cleanup_stdio+0x1e>
 80175b0:	4620      	mov	r0, r4
 80175b2:	f001 f88f 	bl	80186d4 <_fflush_r>
 80175b6:	68e1      	ldr	r1, [r4, #12]
 80175b8:	4b06      	ldr	r3, [pc, #24]	; (80175d4 <cleanup_stdio+0x3c>)
 80175ba:	4299      	cmp	r1, r3
 80175bc:	d004      	beq.n	80175c8 <cleanup_stdio+0x30>
 80175be:	4620      	mov	r0, r4
 80175c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175c4:	f001 b886 	b.w	80186d4 <_fflush_r>
 80175c8:	bd10      	pop	{r4, pc}
 80175ca:	bf00      	nop
 80175cc:	20008c28 	.word	0x20008c28
 80175d0:	20008c90 	.word	0x20008c90
 80175d4:	20008cf8 	.word	0x20008cf8

080175d8 <global_stdio_init.part.0>:
 80175d8:	b510      	push	{r4, lr}
 80175da:	4b0b      	ldr	r3, [pc, #44]	; (8017608 <global_stdio_init.part.0+0x30>)
 80175dc:	4c0b      	ldr	r4, [pc, #44]	; (801760c <global_stdio_init.part.0+0x34>)
 80175de:	4a0c      	ldr	r2, [pc, #48]	; (8017610 <global_stdio_init.part.0+0x38>)
 80175e0:	601a      	str	r2, [r3, #0]
 80175e2:	4620      	mov	r0, r4
 80175e4:	2200      	movs	r2, #0
 80175e6:	2104      	movs	r1, #4
 80175e8:	f7ff ff94 	bl	8017514 <std>
 80175ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80175f0:	2201      	movs	r2, #1
 80175f2:	2109      	movs	r1, #9
 80175f4:	f7ff ff8e 	bl	8017514 <std>
 80175f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80175fc:	2202      	movs	r2, #2
 80175fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017602:	2112      	movs	r1, #18
 8017604:	f7ff bf86 	b.w	8017514 <std>
 8017608:	20008d60 	.word	0x20008d60
 801760c:	20008c28 	.word	0x20008c28
 8017610:	08017581 	.word	0x08017581

08017614 <__sfp_lock_acquire>:
 8017614:	4801      	ldr	r0, [pc, #4]	; (801761c <__sfp_lock_acquire+0x8>)
 8017616:	f000 ba7c 	b.w	8017b12 <__retarget_lock_acquire_recursive>
 801761a:	bf00      	nop
 801761c:	20008d69 	.word	0x20008d69

08017620 <__sfp_lock_release>:
 8017620:	4801      	ldr	r0, [pc, #4]	; (8017628 <__sfp_lock_release+0x8>)
 8017622:	f000 ba77 	b.w	8017b14 <__retarget_lock_release_recursive>
 8017626:	bf00      	nop
 8017628:	20008d69 	.word	0x20008d69

0801762c <__sinit>:
 801762c:	b510      	push	{r4, lr}
 801762e:	4604      	mov	r4, r0
 8017630:	f7ff fff0 	bl	8017614 <__sfp_lock_acquire>
 8017634:	6a23      	ldr	r3, [r4, #32]
 8017636:	b11b      	cbz	r3, 8017640 <__sinit+0x14>
 8017638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801763c:	f7ff bff0 	b.w	8017620 <__sfp_lock_release>
 8017640:	4b04      	ldr	r3, [pc, #16]	; (8017654 <__sinit+0x28>)
 8017642:	6223      	str	r3, [r4, #32]
 8017644:	4b04      	ldr	r3, [pc, #16]	; (8017658 <__sinit+0x2c>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d1f5      	bne.n	8017638 <__sinit+0xc>
 801764c:	f7ff ffc4 	bl	80175d8 <global_stdio_init.part.0>
 8017650:	e7f2      	b.n	8017638 <__sinit+0xc>
 8017652:	bf00      	nop
 8017654:	08017599 	.word	0x08017599
 8017658:	20008d60 	.word	0x20008d60

0801765c <_fwalk_sglue>:
 801765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017660:	4607      	mov	r7, r0
 8017662:	4688      	mov	r8, r1
 8017664:	4614      	mov	r4, r2
 8017666:	2600      	movs	r6, #0
 8017668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801766c:	f1b9 0901 	subs.w	r9, r9, #1
 8017670:	d505      	bpl.n	801767e <_fwalk_sglue+0x22>
 8017672:	6824      	ldr	r4, [r4, #0]
 8017674:	2c00      	cmp	r4, #0
 8017676:	d1f7      	bne.n	8017668 <_fwalk_sglue+0xc>
 8017678:	4630      	mov	r0, r6
 801767a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801767e:	89ab      	ldrh	r3, [r5, #12]
 8017680:	2b01      	cmp	r3, #1
 8017682:	d907      	bls.n	8017694 <_fwalk_sglue+0x38>
 8017684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017688:	3301      	adds	r3, #1
 801768a:	d003      	beq.n	8017694 <_fwalk_sglue+0x38>
 801768c:	4629      	mov	r1, r5
 801768e:	4638      	mov	r0, r7
 8017690:	47c0      	blx	r8
 8017692:	4306      	orrs	r6, r0
 8017694:	3568      	adds	r5, #104	; 0x68
 8017696:	e7e9      	b.n	801766c <_fwalk_sglue+0x10>

08017698 <iprintf>:
 8017698:	b40f      	push	{r0, r1, r2, r3}
 801769a:	b507      	push	{r0, r1, r2, lr}
 801769c:	4906      	ldr	r1, [pc, #24]	; (80176b8 <iprintf+0x20>)
 801769e:	ab04      	add	r3, sp, #16
 80176a0:	6808      	ldr	r0, [r1, #0]
 80176a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80176a6:	6881      	ldr	r1, [r0, #8]
 80176a8:	9301      	str	r3, [sp, #4]
 80176aa:	f000 fce3 	bl	8018074 <_vfiprintf_r>
 80176ae:	b003      	add	sp, #12
 80176b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80176b4:	b004      	add	sp, #16
 80176b6:	4770      	bx	lr
 80176b8:	20000084 	.word	0x20000084

080176bc <_puts_r>:
 80176bc:	6a03      	ldr	r3, [r0, #32]
 80176be:	b570      	push	{r4, r5, r6, lr}
 80176c0:	6884      	ldr	r4, [r0, #8]
 80176c2:	4605      	mov	r5, r0
 80176c4:	460e      	mov	r6, r1
 80176c6:	b90b      	cbnz	r3, 80176cc <_puts_r+0x10>
 80176c8:	f7ff ffb0 	bl	801762c <__sinit>
 80176cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80176ce:	07db      	lsls	r3, r3, #31
 80176d0:	d405      	bmi.n	80176de <_puts_r+0x22>
 80176d2:	89a3      	ldrh	r3, [r4, #12]
 80176d4:	0598      	lsls	r0, r3, #22
 80176d6:	d402      	bmi.n	80176de <_puts_r+0x22>
 80176d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176da:	f000 fa1a 	bl	8017b12 <__retarget_lock_acquire_recursive>
 80176de:	89a3      	ldrh	r3, [r4, #12]
 80176e0:	0719      	lsls	r1, r3, #28
 80176e2:	d513      	bpl.n	801770c <_puts_r+0x50>
 80176e4:	6923      	ldr	r3, [r4, #16]
 80176e6:	b18b      	cbz	r3, 801770c <_puts_r+0x50>
 80176e8:	3e01      	subs	r6, #1
 80176ea:	68a3      	ldr	r3, [r4, #8]
 80176ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80176f0:	3b01      	subs	r3, #1
 80176f2:	60a3      	str	r3, [r4, #8]
 80176f4:	b9e9      	cbnz	r1, 8017732 <_puts_r+0x76>
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	da2e      	bge.n	8017758 <_puts_r+0x9c>
 80176fa:	4622      	mov	r2, r4
 80176fc:	210a      	movs	r1, #10
 80176fe:	4628      	mov	r0, r5
 8017700:	f000 f8cf 	bl	80178a2 <__swbuf_r>
 8017704:	3001      	adds	r0, #1
 8017706:	d007      	beq.n	8017718 <_puts_r+0x5c>
 8017708:	250a      	movs	r5, #10
 801770a:	e007      	b.n	801771c <_puts_r+0x60>
 801770c:	4621      	mov	r1, r4
 801770e:	4628      	mov	r0, r5
 8017710:	f000 f904 	bl	801791c <__swsetup_r>
 8017714:	2800      	cmp	r0, #0
 8017716:	d0e7      	beq.n	80176e8 <_puts_r+0x2c>
 8017718:	f04f 35ff 	mov.w	r5, #4294967295
 801771c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801771e:	07da      	lsls	r2, r3, #31
 8017720:	d405      	bmi.n	801772e <_puts_r+0x72>
 8017722:	89a3      	ldrh	r3, [r4, #12]
 8017724:	059b      	lsls	r3, r3, #22
 8017726:	d402      	bmi.n	801772e <_puts_r+0x72>
 8017728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801772a:	f000 f9f3 	bl	8017b14 <__retarget_lock_release_recursive>
 801772e:	4628      	mov	r0, r5
 8017730:	bd70      	pop	{r4, r5, r6, pc}
 8017732:	2b00      	cmp	r3, #0
 8017734:	da04      	bge.n	8017740 <_puts_r+0x84>
 8017736:	69a2      	ldr	r2, [r4, #24]
 8017738:	429a      	cmp	r2, r3
 801773a:	dc06      	bgt.n	801774a <_puts_r+0x8e>
 801773c:	290a      	cmp	r1, #10
 801773e:	d004      	beq.n	801774a <_puts_r+0x8e>
 8017740:	6823      	ldr	r3, [r4, #0]
 8017742:	1c5a      	adds	r2, r3, #1
 8017744:	6022      	str	r2, [r4, #0]
 8017746:	7019      	strb	r1, [r3, #0]
 8017748:	e7cf      	b.n	80176ea <_puts_r+0x2e>
 801774a:	4622      	mov	r2, r4
 801774c:	4628      	mov	r0, r5
 801774e:	f000 f8a8 	bl	80178a2 <__swbuf_r>
 8017752:	3001      	adds	r0, #1
 8017754:	d1c9      	bne.n	80176ea <_puts_r+0x2e>
 8017756:	e7df      	b.n	8017718 <_puts_r+0x5c>
 8017758:	6823      	ldr	r3, [r4, #0]
 801775a:	250a      	movs	r5, #10
 801775c:	1c5a      	adds	r2, r3, #1
 801775e:	6022      	str	r2, [r4, #0]
 8017760:	701d      	strb	r5, [r3, #0]
 8017762:	e7db      	b.n	801771c <_puts_r+0x60>

08017764 <puts>:
 8017764:	4b02      	ldr	r3, [pc, #8]	; (8017770 <puts+0xc>)
 8017766:	4601      	mov	r1, r0
 8017768:	6818      	ldr	r0, [r3, #0]
 801776a:	f7ff bfa7 	b.w	80176bc <_puts_r>
 801776e:	bf00      	nop
 8017770:	20000084 	.word	0x20000084

08017774 <sniprintf>:
 8017774:	b40c      	push	{r2, r3}
 8017776:	b530      	push	{r4, r5, lr}
 8017778:	4b17      	ldr	r3, [pc, #92]	; (80177d8 <sniprintf+0x64>)
 801777a:	1e0c      	subs	r4, r1, #0
 801777c:	681d      	ldr	r5, [r3, #0]
 801777e:	b09d      	sub	sp, #116	; 0x74
 8017780:	da08      	bge.n	8017794 <sniprintf+0x20>
 8017782:	238b      	movs	r3, #139	; 0x8b
 8017784:	602b      	str	r3, [r5, #0]
 8017786:	f04f 30ff 	mov.w	r0, #4294967295
 801778a:	b01d      	add	sp, #116	; 0x74
 801778c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017790:	b002      	add	sp, #8
 8017792:	4770      	bx	lr
 8017794:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017798:	f8ad 3014 	strh.w	r3, [sp, #20]
 801779c:	bf14      	ite	ne
 801779e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80177a2:	4623      	moveq	r3, r4
 80177a4:	9304      	str	r3, [sp, #16]
 80177a6:	9307      	str	r3, [sp, #28]
 80177a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177ac:	9002      	str	r0, [sp, #8]
 80177ae:	9006      	str	r0, [sp, #24]
 80177b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80177b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80177b6:	ab21      	add	r3, sp, #132	; 0x84
 80177b8:	a902      	add	r1, sp, #8
 80177ba:	4628      	mov	r0, r5
 80177bc:	9301      	str	r3, [sp, #4]
 80177be:	f000 fb31 	bl	8017e24 <_svfiprintf_r>
 80177c2:	1c43      	adds	r3, r0, #1
 80177c4:	bfbc      	itt	lt
 80177c6:	238b      	movlt	r3, #139	; 0x8b
 80177c8:	602b      	strlt	r3, [r5, #0]
 80177ca:	2c00      	cmp	r4, #0
 80177cc:	d0dd      	beq.n	801778a <sniprintf+0x16>
 80177ce:	9b02      	ldr	r3, [sp, #8]
 80177d0:	2200      	movs	r2, #0
 80177d2:	701a      	strb	r2, [r3, #0]
 80177d4:	e7d9      	b.n	801778a <sniprintf+0x16>
 80177d6:	bf00      	nop
 80177d8:	20000084 	.word	0x20000084

080177dc <siprintf>:
 80177dc:	b40e      	push	{r1, r2, r3}
 80177de:	b500      	push	{lr}
 80177e0:	b09c      	sub	sp, #112	; 0x70
 80177e2:	ab1d      	add	r3, sp, #116	; 0x74
 80177e4:	9002      	str	r0, [sp, #8]
 80177e6:	9006      	str	r0, [sp, #24]
 80177e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80177ec:	4809      	ldr	r0, [pc, #36]	; (8017814 <siprintf+0x38>)
 80177ee:	9107      	str	r1, [sp, #28]
 80177f0:	9104      	str	r1, [sp, #16]
 80177f2:	4909      	ldr	r1, [pc, #36]	; (8017818 <siprintf+0x3c>)
 80177f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80177f8:	9105      	str	r1, [sp, #20]
 80177fa:	6800      	ldr	r0, [r0, #0]
 80177fc:	9301      	str	r3, [sp, #4]
 80177fe:	a902      	add	r1, sp, #8
 8017800:	f000 fb10 	bl	8017e24 <_svfiprintf_r>
 8017804:	9b02      	ldr	r3, [sp, #8]
 8017806:	2200      	movs	r2, #0
 8017808:	701a      	strb	r2, [r3, #0]
 801780a:	b01c      	add	sp, #112	; 0x70
 801780c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017810:	b003      	add	sp, #12
 8017812:	4770      	bx	lr
 8017814:	20000084 	.word	0x20000084
 8017818:	ffff0208 	.word	0xffff0208

0801781c <__sread>:
 801781c:	b510      	push	{r4, lr}
 801781e:	460c      	mov	r4, r1
 8017820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017824:	f000 f926 	bl	8017a74 <_read_r>
 8017828:	2800      	cmp	r0, #0
 801782a:	bfab      	itete	ge
 801782c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801782e:	89a3      	ldrhlt	r3, [r4, #12]
 8017830:	181b      	addge	r3, r3, r0
 8017832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017836:	bfac      	ite	ge
 8017838:	6563      	strge	r3, [r4, #84]	; 0x54
 801783a:	81a3      	strhlt	r3, [r4, #12]
 801783c:	bd10      	pop	{r4, pc}

0801783e <__swrite>:
 801783e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017842:	461f      	mov	r7, r3
 8017844:	898b      	ldrh	r3, [r1, #12]
 8017846:	05db      	lsls	r3, r3, #23
 8017848:	4605      	mov	r5, r0
 801784a:	460c      	mov	r4, r1
 801784c:	4616      	mov	r6, r2
 801784e:	d505      	bpl.n	801785c <__swrite+0x1e>
 8017850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017854:	2302      	movs	r3, #2
 8017856:	2200      	movs	r2, #0
 8017858:	f000 f8fa 	bl	8017a50 <_lseek_r>
 801785c:	89a3      	ldrh	r3, [r4, #12]
 801785e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017866:	81a3      	strh	r3, [r4, #12]
 8017868:	4632      	mov	r2, r6
 801786a:	463b      	mov	r3, r7
 801786c:	4628      	mov	r0, r5
 801786e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017872:	f000 b911 	b.w	8017a98 <_write_r>

08017876 <__sseek>:
 8017876:	b510      	push	{r4, lr}
 8017878:	460c      	mov	r4, r1
 801787a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801787e:	f000 f8e7 	bl	8017a50 <_lseek_r>
 8017882:	1c43      	adds	r3, r0, #1
 8017884:	89a3      	ldrh	r3, [r4, #12]
 8017886:	bf15      	itete	ne
 8017888:	6560      	strne	r0, [r4, #84]	; 0x54
 801788a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801788e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017892:	81a3      	strheq	r3, [r4, #12]
 8017894:	bf18      	it	ne
 8017896:	81a3      	strhne	r3, [r4, #12]
 8017898:	bd10      	pop	{r4, pc}

0801789a <__sclose>:
 801789a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801789e:	f000 b8c7 	b.w	8017a30 <_close_r>

080178a2 <__swbuf_r>:
 80178a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178a4:	460e      	mov	r6, r1
 80178a6:	4614      	mov	r4, r2
 80178a8:	4605      	mov	r5, r0
 80178aa:	b118      	cbz	r0, 80178b4 <__swbuf_r+0x12>
 80178ac:	6a03      	ldr	r3, [r0, #32]
 80178ae:	b90b      	cbnz	r3, 80178b4 <__swbuf_r+0x12>
 80178b0:	f7ff febc 	bl	801762c <__sinit>
 80178b4:	69a3      	ldr	r3, [r4, #24]
 80178b6:	60a3      	str	r3, [r4, #8]
 80178b8:	89a3      	ldrh	r3, [r4, #12]
 80178ba:	071a      	lsls	r2, r3, #28
 80178bc:	d525      	bpl.n	801790a <__swbuf_r+0x68>
 80178be:	6923      	ldr	r3, [r4, #16]
 80178c0:	b31b      	cbz	r3, 801790a <__swbuf_r+0x68>
 80178c2:	6823      	ldr	r3, [r4, #0]
 80178c4:	6922      	ldr	r2, [r4, #16]
 80178c6:	1a98      	subs	r0, r3, r2
 80178c8:	6963      	ldr	r3, [r4, #20]
 80178ca:	b2f6      	uxtb	r6, r6
 80178cc:	4283      	cmp	r3, r0
 80178ce:	4637      	mov	r7, r6
 80178d0:	dc04      	bgt.n	80178dc <__swbuf_r+0x3a>
 80178d2:	4621      	mov	r1, r4
 80178d4:	4628      	mov	r0, r5
 80178d6:	f000 fefd 	bl	80186d4 <_fflush_r>
 80178da:	b9e0      	cbnz	r0, 8017916 <__swbuf_r+0x74>
 80178dc:	68a3      	ldr	r3, [r4, #8]
 80178de:	3b01      	subs	r3, #1
 80178e0:	60a3      	str	r3, [r4, #8]
 80178e2:	6823      	ldr	r3, [r4, #0]
 80178e4:	1c5a      	adds	r2, r3, #1
 80178e6:	6022      	str	r2, [r4, #0]
 80178e8:	701e      	strb	r6, [r3, #0]
 80178ea:	6962      	ldr	r2, [r4, #20]
 80178ec:	1c43      	adds	r3, r0, #1
 80178ee:	429a      	cmp	r2, r3
 80178f0:	d004      	beq.n	80178fc <__swbuf_r+0x5a>
 80178f2:	89a3      	ldrh	r3, [r4, #12]
 80178f4:	07db      	lsls	r3, r3, #31
 80178f6:	d506      	bpl.n	8017906 <__swbuf_r+0x64>
 80178f8:	2e0a      	cmp	r6, #10
 80178fa:	d104      	bne.n	8017906 <__swbuf_r+0x64>
 80178fc:	4621      	mov	r1, r4
 80178fe:	4628      	mov	r0, r5
 8017900:	f000 fee8 	bl	80186d4 <_fflush_r>
 8017904:	b938      	cbnz	r0, 8017916 <__swbuf_r+0x74>
 8017906:	4638      	mov	r0, r7
 8017908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801790a:	4621      	mov	r1, r4
 801790c:	4628      	mov	r0, r5
 801790e:	f000 f805 	bl	801791c <__swsetup_r>
 8017912:	2800      	cmp	r0, #0
 8017914:	d0d5      	beq.n	80178c2 <__swbuf_r+0x20>
 8017916:	f04f 37ff 	mov.w	r7, #4294967295
 801791a:	e7f4      	b.n	8017906 <__swbuf_r+0x64>

0801791c <__swsetup_r>:
 801791c:	b538      	push	{r3, r4, r5, lr}
 801791e:	4b2a      	ldr	r3, [pc, #168]	; (80179c8 <__swsetup_r+0xac>)
 8017920:	4605      	mov	r5, r0
 8017922:	6818      	ldr	r0, [r3, #0]
 8017924:	460c      	mov	r4, r1
 8017926:	b118      	cbz	r0, 8017930 <__swsetup_r+0x14>
 8017928:	6a03      	ldr	r3, [r0, #32]
 801792a:	b90b      	cbnz	r3, 8017930 <__swsetup_r+0x14>
 801792c:	f7ff fe7e 	bl	801762c <__sinit>
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017936:	0718      	lsls	r0, r3, #28
 8017938:	d422      	bmi.n	8017980 <__swsetup_r+0x64>
 801793a:	06d9      	lsls	r1, r3, #27
 801793c:	d407      	bmi.n	801794e <__swsetup_r+0x32>
 801793e:	2309      	movs	r3, #9
 8017940:	602b      	str	r3, [r5, #0]
 8017942:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017946:	81a3      	strh	r3, [r4, #12]
 8017948:	f04f 30ff 	mov.w	r0, #4294967295
 801794c:	e034      	b.n	80179b8 <__swsetup_r+0x9c>
 801794e:	0758      	lsls	r0, r3, #29
 8017950:	d512      	bpl.n	8017978 <__swsetup_r+0x5c>
 8017952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017954:	b141      	cbz	r1, 8017968 <__swsetup_r+0x4c>
 8017956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801795a:	4299      	cmp	r1, r3
 801795c:	d002      	beq.n	8017964 <__swsetup_r+0x48>
 801795e:	4628      	mov	r0, r5
 8017960:	f000 f906 	bl	8017b70 <_free_r>
 8017964:	2300      	movs	r3, #0
 8017966:	6363      	str	r3, [r4, #52]	; 0x34
 8017968:	89a3      	ldrh	r3, [r4, #12]
 801796a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801796e:	81a3      	strh	r3, [r4, #12]
 8017970:	2300      	movs	r3, #0
 8017972:	6063      	str	r3, [r4, #4]
 8017974:	6923      	ldr	r3, [r4, #16]
 8017976:	6023      	str	r3, [r4, #0]
 8017978:	89a3      	ldrh	r3, [r4, #12]
 801797a:	f043 0308 	orr.w	r3, r3, #8
 801797e:	81a3      	strh	r3, [r4, #12]
 8017980:	6923      	ldr	r3, [r4, #16]
 8017982:	b94b      	cbnz	r3, 8017998 <__swsetup_r+0x7c>
 8017984:	89a3      	ldrh	r3, [r4, #12]
 8017986:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801798a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801798e:	d003      	beq.n	8017998 <__swsetup_r+0x7c>
 8017990:	4621      	mov	r1, r4
 8017992:	4628      	mov	r0, r5
 8017994:	f000 fefe 	bl	8018794 <__smakebuf_r>
 8017998:	89a0      	ldrh	r0, [r4, #12]
 801799a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801799e:	f010 0301 	ands.w	r3, r0, #1
 80179a2:	d00a      	beq.n	80179ba <__swsetup_r+0x9e>
 80179a4:	2300      	movs	r3, #0
 80179a6:	60a3      	str	r3, [r4, #8]
 80179a8:	6963      	ldr	r3, [r4, #20]
 80179aa:	425b      	negs	r3, r3
 80179ac:	61a3      	str	r3, [r4, #24]
 80179ae:	6923      	ldr	r3, [r4, #16]
 80179b0:	b943      	cbnz	r3, 80179c4 <__swsetup_r+0xa8>
 80179b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80179b6:	d1c4      	bne.n	8017942 <__swsetup_r+0x26>
 80179b8:	bd38      	pop	{r3, r4, r5, pc}
 80179ba:	0781      	lsls	r1, r0, #30
 80179bc:	bf58      	it	pl
 80179be:	6963      	ldrpl	r3, [r4, #20]
 80179c0:	60a3      	str	r3, [r4, #8]
 80179c2:	e7f4      	b.n	80179ae <__swsetup_r+0x92>
 80179c4:	2000      	movs	r0, #0
 80179c6:	e7f7      	b.n	80179b8 <__swsetup_r+0x9c>
 80179c8:	20000084 	.word	0x20000084

080179cc <memcmp>:
 80179cc:	b510      	push	{r4, lr}
 80179ce:	3901      	subs	r1, #1
 80179d0:	4402      	add	r2, r0
 80179d2:	4290      	cmp	r0, r2
 80179d4:	d101      	bne.n	80179da <memcmp+0xe>
 80179d6:	2000      	movs	r0, #0
 80179d8:	e005      	b.n	80179e6 <memcmp+0x1a>
 80179da:	7803      	ldrb	r3, [r0, #0]
 80179dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179e0:	42a3      	cmp	r3, r4
 80179e2:	d001      	beq.n	80179e8 <memcmp+0x1c>
 80179e4:	1b18      	subs	r0, r3, r4
 80179e6:	bd10      	pop	{r4, pc}
 80179e8:	3001      	adds	r0, #1
 80179ea:	e7f2      	b.n	80179d2 <memcmp+0x6>

080179ec <memmove>:
 80179ec:	4288      	cmp	r0, r1
 80179ee:	b510      	push	{r4, lr}
 80179f0:	eb01 0402 	add.w	r4, r1, r2
 80179f4:	d902      	bls.n	80179fc <memmove+0x10>
 80179f6:	4284      	cmp	r4, r0
 80179f8:	4623      	mov	r3, r4
 80179fa:	d807      	bhi.n	8017a0c <memmove+0x20>
 80179fc:	1e43      	subs	r3, r0, #1
 80179fe:	42a1      	cmp	r1, r4
 8017a00:	d008      	beq.n	8017a14 <memmove+0x28>
 8017a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a0a:	e7f8      	b.n	80179fe <memmove+0x12>
 8017a0c:	4402      	add	r2, r0
 8017a0e:	4601      	mov	r1, r0
 8017a10:	428a      	cmp	r2, r1
 8017a12:	d100      	bne.n	8017a16 <memmove+0x2a>
 8017a14:	bd10      	pop	{r4, pc}
 8017a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a1e:	e7f7      	b.n	8017a10 <memmove+0x24>

08017a20 <memset>:
 8017a20:	4402      	add	r2, r0
 8017a22:	4603      	mov	r3, r0
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d100      	bne.n	8017a2a <memset+0xa>
 8017a28:	4770      	bx	lr
 8017a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8017a2e:	e7f9      	b.n	8017a24 <memset+0x4>

08017a30 <_close_r>:
 8017a30:	b538      	push	{r3, r4, r5, lr}
 8017a32:	4d06      	ldr	r5, [pc, #24]	; (8017a4c <_close_r+0x1c>)
 8017a34:	2300      	movs	r3, #0
 8017a36:	4604      	mov	r4, r0
 8017a38:	4608      	mov	r0, r1
 8017a3a:	602b      	str	r3, [r5, #0]
 8017a3c:	f7ea f923 	bl	8001c86 <_close>
 8017a40:	1c43      	adds	r3, r0, #1
 8017a42:	d102      	bne.n	8017a4a <_close_r+0x1a>
 8017a44:	682b      	ldr	r3, [r5, #0]
 8017a46:	b103      	cbz	r3, 8017a4a <_close_r+0x1a>
 8017a48:	6023      	str	r3, [r4, #0]
 8017a4a:	bd38      	pop	{r3, r4, r5, pc}
 8017a4c:	20008d64 	.word	0x20008d64

08017a50 <_lseek_r>:
 8017a50:	b538      	push	{r3, r4, r5, lr}
 8017a52:	4d07      	ldr	r5, [pc, #28]	; (8017a70 <_lseek_r+0x20>)
 8017a54:	4604      	mov	r4, r0
 8017a56:	4608      	mov	r0, r1
 8017a58:	4611      	mov	r1, r2
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	602a      	str	r2, [r5, #0]
 8017a5e:	461a      	mov	r2, r3
 8017a60:	f7ea f938 	bl	8001cd4 <_lseek>
 8017a64:	1c43      	adds	r3, r0, #1
 8017a66:	d102      	bne.n	8017a6e <_lseek_r+0x1e>
 8017a68:	682b      	ldr	r3, [r5, #0]
 8017a6a:	b103      	cbz	r3, 8017a6e <_lseek_r+0x1e>
 8017a6c:	6023      	str	r3, [r4, #0]
 8017a6e:	bd38      	pop	{r3, r4, r5, pc}
 8017a70:	20008d64 	.word	0x20008d64

08017a74 <_read_r>:
 8017a74:	b538      	push	{r3, r4, r5, lr}
 8017a76:	4d07      	ldr	r5, [pc, #28]	; (8017a94 <_read_r+0x20>)
 8017a78:	4604      	mov	r4, r0
 8017a7a:	4608      	mov	r0, r1
 8017a7c:	4611      	mov	r1, r2
 8017a7e:	2200      	movs	r2, #0
 8017a80:	602a      	str	r2, [r5, #0]
 8017a82:	461a      	mov	r2, r3
 8017a84:	f7ea f8c6 	bl	8001c14 <_read>
 8017a88:	1c43      	adds	r3, r0, #1
 8017a8a:	d102      	bne.n	8017a92 <_read_r+0x1e>
 8017a8c:	682b      	ldr	r3, [r5, #0]
 8017a8e:	b103      	cbz	r3, 8017a92 <_read_r+0x1e>
 8017a90:	6023      	str	r3, [r4, #0]
 8017a92:	bd38      	pop	{r3, r4, r5, pc}
 8017a94:	20008d64 	.word	0x20008d64

08017a98 <_write_r>:
 8017a98:	b538      	push	{r3, r4, r5, lr}
 8017a9a:	4d07      	ldr	r5, [pc, #28]	; (8017ab8 <_write_r+0x20>)
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	4608      	mov	r0, r1
 8017aa0:	4611      	mov	r1, r2
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	602a      	str	r2, [r5, #0]
 8017aa6:	461a      	mov	r2, r3
 8017aa8:	f7ea f8d1 	bl	8001c4e <_write>
 8017aac:	1c43      	adds	r3, r0, #1
 8017aae:	d102      	bne.n	8017ab6 <_write_r+0x1e>
 8017ab0:	682b      	ldr	r3, [r5, #0]
 8017ab2:	b103      	cbz	r3, 8017ab6 <_write_r+0x1e>
 8017ab4:	6023      	str	r3, [r4, #0]
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	20008d64 	.word	0x20008d64

08017abc <__errno>:
 8017abc:	4b01      	ldr	r3, [pc, #4]	; (8017ac4 <__errno+0x8>)
 8017abe:	6818      	ldr	r0, [r3, #0]
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	20000084 	.word	0x20000084

08017ac8 <__libc_init_array>:
 8017ac8:	b570      	push	{r4, r5, r6, lr}
 8017aca:	4d0d      	ldr	r5, [pc, #52]	; (8017b00 <__libc_init_array+0x38>)
 8017acc:	4c0d      	ldr	r4, [pc, #52]	; (8017b04 <__libc_init_array+0x3c>)
 8017ace:	1b64      	subs	r4, r4, r5
 8017ad0:	10a4      	asrs	r4, r4, #2
 8017ad2:	2600      	movs	r6, #0
 8017ad4:	42a6      	cmp	r6, r4
 8017ad6:	d109      	bne.n	8017aec <__libc_init_array+0x24>
 8017ad8:	4d0b      	ldr	r5, [pc, #44]	; (8017b08 <__libc_init_array+0x40>)
 8017ada:	4c0c      	ldr	r4, [pc, #48]	; (8017b0c <__libc_init_array+0x44>)
 8017adc:	f000 ff4a 	bl	8018974 <_init>
 8017ae0:	1b64      	subs	r4, r4, r5
 8017ae2:	10a4      	asrs	r4, r4, #2
 8017ae4:	2600      	movs	r6, #0
 8017ae6:	42a6      	cmp	r6, r4
 8017ae8:	d105      	bne.n	8017af6 <__libc_init_array+0x2e>
 8017aea:	bd70      	pop	{r4, r5, r6, pc}
 8017aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8017af0:	4798      	blx	r3
 8017af2:	3601      	adds	r6, #1
 8017af4:	e7ee      	b.n	8017ad4 <__libc_init_array+0xc>
 8017af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017afa:	4798      	blx	r3
 8017afc:	3601      	adds	r6, #1
 8017afe:	e7f2      	b.n	8017ae6 <__libc_init_array+0x1e>
 8017b00:	0801b8f0 	.word	0x0801b8f0
 8017b04:	0801b8f0 	.word	0x0801b8f0
 8017b08:	0801b8f0 	.word	0x0801b8f0
 8017b0c:	0801b8f4 	.word	0x0801b8f4

08017b10 <__retarget_lock_init_recursive>:
 8017b10:	4770      	bx	lr

08017b12 <__retarget_lock_acquire_recursive>:
 8017b12:	4770      	bx	lr

08017b14 <__retarget_lock_release_recursive>:
 8017b14:	4770      	bx	lr

08017b16 <memcpy>:
 8017b16:	440a      	add	r2, r1
 8017b18:	4291      	cmp	r1, r2
 8017b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b1e:	d100      	bne.n	8017b22 <memcpy+0xc>
 8017b20:	4770      	bx	lr
 8017b22:	b510      	push	{r4, lr}
 8017b24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b2c:	4291      	cmp	r1, r2
 8017b2e:	d1f9      	bne.n	8017b24 <memcpy+0xe>
 8017b30:	bd10      	pop	{r4, pc}
	...

08017b34 <__assert_func>:
 8017b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b36:	4614      	mov	r4, r2
 8017b38:	461a      	mov	r2, r3
 8017b3a:	4b09      	ldr	r3, [pc, #36]	; (8017b60 <__assert_func+0x2c>)
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	4605      	mov	r5, r0
 8017b40:	68d8      	ldr	r0, [r3, #12]
 8017b42:	b14c      	cbz	r4, 8017b58 <__assert_func+0x24>
 8017b44:	4b07      	ldr	r3, [pc, #28]	; (8017b64 <__assert_func+0x30>)
 8017b46:	9100      	str	r1, [sp, #0]
 8017b48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b4c:	4906      	ldr	r1, [pc, #24]	; (8017b68 <__assert_func+0x34>)
 8017b4e:	462b      	mov	r3, r5
 8017b50:	f000 fde8 	bl	8018724 <fiprintf>
 8017b54:	f000 fe8c 	bl	8018870 <abort>
 8017b58:	4b04      	ldr	r3, [pc, #16]	; (8017b6c <__assert_func+0x38>)
 8017b5a:	461c      	mov	r4, r3
 8017b5c:	e7f3      	b.n	8017b46 <__assert_func+0x12>
 8017b5e:	bf00      	nop
 8017b60:	20000084 	.word	0x20000084
 8017b64:	0801b876 	.word	0x0801b876
 8017b68:	0801b883 	.word	0x0801b883
 8017b6c:	0801b8b1 	.word	0x0801b8b1

08017b70 <_free_r>:
 8017b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b72:	2900      	cmp	r1, #0
 8017b74:	d044      	beq.n	8017c00 <_free_r+0x90>
 8017b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b7a:	9001      	str	r0, [sp, #4]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8017b82:	bfb8      	it	lt
 8017b84:	18e4      	addlt	r4, r4, r3
 8017b86:	f000 f8e7 	bl	8017d58 <__malloc_lock>
 8017b8a:	4a1e      	ldr	r2, [pc, #120]	; (8017c04 <_free_r+0x94>)
 8017b8c:	9801      	ldr	r0, [sp, #4]
 8017b8e:	6813      	ldr	r3, [r2, #0]
 8017b90:	b933      	cbnz	r3, 8017ba0 <_free_r+0x30>
 8017b92:	6063      	str	r3, [r4, #4]
 8017b94:	6014      	str	r4, [r2, #0]
 8017b96:	b003      	add	sp, #12
 8017b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b9c:	f000 b8e2 	b.w	8017d64 <__malloc_unlock>
 8017ba0:	42a3      	cmp	r3, r4
 8017ba2:	d908      	bls.n	8017bb6 <_free_r+0x46>
 8017ba4:	6825      	ldr	r5, [r4, #0]
 8017ba6:	1961      	adds	r1, r4, r5
 8017ba8:	428b      	cmp	r3, r1
 8017baa:	bf01      	itttt	eq
 8017bac:	6819      	ldreq	r1, [r3, #0]
 8017bae:	685b      	ldreq	r3, [r3, #4]
 8017bb0:	1949      	addeq	r1, r1, r5
 8017bb2:	6021      	streq	r1, [r4, #0]
 8017bb4:	e7ed      	b.n	8017b92 <_free_r+0x22>
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	b10b      	cbz	r3, 8017bc0 <_free_r+0x50>
 8017bbc:	42a3      	cmp	r3, r4
 8017bbe:	d9fa      	bls.n	8017bb6 <_free_r+0x46>
 8017bc0:	6811      	ldr	r1, [r2, #0]
 8017bc2:	1855      	adds	r5, r2, r1
 8017bc4:	42a5      	cmp	r5, r4
 8017bc6:	d10b      	bne.n	8017be0 <_free_r+0x70>
 8017bc8:	6824      	ldr	r4, [r4, #0]
 8017bca:	4421      	add	r1, r4
 8017bcc:	1854      	adds	r4, r2, r1
 8017bce:	42a3      	cmp	r3, r4
 8017bd0:	6011      	str	r1, [r2, #0]
 8017bd2:	d1e0      	bne.n	8017b96 <_free_r+0x26>
 8017bd4:	681c      	ldr	r4, [r3, #0]
 8017bd6:	685b      	ldr	r3, [r3, #4]
 8017bd8:	6053      	str	r3, [r2, #4]
 8017bda:	440c      	add	r4, r1
 8017bdc:	6014      	str	r4, [r2, #0]
 8017bde:	e7da      	b.n	8017b96 <_free_r+0x26>
 8017be0:	d902      	bls.n	8017be8 <_free_r+0x78>
 8017be2:	230c      	movs	r3, #12
 8017be4:	6003      	str	r3, [r0, #0]
 8017be6:	e7d6      	b.n	8017b96 <_free_r+0x26>
 8017be8:	6825      	ldr	r5, [r4, #0]
 8017bea:	1961      	adds	r1, r4, r5
 8017bec:	428b      	cmp	r3, r1
 8017bee:	bf04      	itt	eq
 8017bf0:	6819      	ldreq	r1, [r3, #0]
 8017bf2:	685b      	ldreq	r3, [r3, #4]
 8017bf4:	6063      	str	r3, [r4, #4]
 8017bf6:	bf04      	itt	eq
 8017bf8:	1949      	addeq	r1, r1, r5
 8017bfa:	6021      	streq	r1, [r4, #0]
 8017bfc:	6054      	str	r4, [r2, #4]
 8017bfe:	e7ca      	b.n	8017b96 <_free_r+0x26>
 8017c00:	b003      	add	sp, #12
 8017c02:	bd30      	pop	{r4, r5, pc}
 8017c04:	20008d6c 	.word	0x20008d6c

08017c08 <malloc>:
 8017c08:	4b02      	ldr	r3, [pc, #8]	; (8017c14 <malloc+0xc>)
 8017c0a:	4601      	mov	r1, r0
 8017c0c:	6818      	ldr	r0, [r3, #0]
 8017c0e:	f000 b823 	b.w	8017c58 <_malloc_r>
 8017c12:	bf00      	nop
 8017c14:	20000084 	.word	0x20000084

08017c18 <sbrk_aligned>:
 8017c18:	b570      	push	{r4, r5, r6, lr}
 8017c1a:	4e0e      	ldr	r6, [pc, #56]	; (8017c54 <sbrk_aligned+0x3c>)
 8017c1c:	460c      	mov	r4, r1
 8017c1e:	6831      	ldr	r1, [r6, #0]
 8017c20:	4605      	mov	r5, r0
 8017c22:	b911      	cbnz	r1, 8017c2a <sbrk_aligned+0x12>
 8017c24:	f000 fe14 	bl	8018850 <_sbrk_r>
 8017c28:	6030      	str	r0, [r6, #0]
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	f000 fe0f 	bl	8018850 <_sbrk_r>
 8017c32:	1c43      	adds	r3, r0, #1
 8017c34:	d00a      	beq.n	8017c4c <sbrk_aligned+0x34>
 8017c36:	1cc4      	adds	r4, r0, #3
 8017c38:	f024 0403 	bic.w	r4, r4, #3
 8017c3c:	42a0      	cmp	r0, r4
 8017c3e:	d007      	beq.n	8017c50 <sbrk_aligned+0x38>
 8017c40:	1a21      	subs	r1, r4, r0
 8017c42:	4628      	mov	r0, r5
 8017c44:	f000 fe04 	bl	8018850 <_sbrk_r>
 8017c48:	3001      	adds	r0, #1
 8017c4a:	d101      	bne.n	8017c50 <sbrk_aligned+0x38>
 8017c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8017c50:	4620      	mov	r0, r4
 8017c52:	bd70      	pop	{r4, r5, r6, pc}
 8017c54:	20008d70 	.word	0x20008d70

08017c58 <_malloc_r>:
 8017c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c5c:	1ccd      	adds	r5, r1, #3
 8017c5e:	f025 0503 	bic.w	r5, r5, #3
 8017c62:	3508      	adds	r5, #8
 8017c64:	2d0c      	cmp	r5, #12
 8017c66:	bf38      	it	cc
 8017c68:	250c      	movcc	r5, #12
 8017c6a:	2d00      	cmp	r5, #0
 8017c6c:	4607      	mov	r7, r0
 8017c6e:	db01      	blt.n	8017c74 <_malloc_r+0x1c>
 8017c70:	42a9      	cmp	r1, r5
 8017c72:	d905      	bls.n	8017c80 <_malloc_r+0x28>
 8017c74:	230c      	movs	r3, #12
 8017c76:	603b      	str	r3, [r7, #0]
 8017c78:	2600      	movs	r6, #0
 8017c7a:	4630      	mov	r0, r6
 8017c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017d54 <_malloc_r+0xfc>
 8017c84:	f000 f868 	bl	8017d58 <__malloc_lock>
 8017c88:	f8d8 3000 	ldr.w	r3, [r8]
 8017c8c:	461c      	mov	r4, r3
 8017c8e:	bb5c      	cbnz	r4, 8017ce8 <_malloc_r+0x90>
 8017c90:	4629      	mov	r1, r5
 8017c92:	4638      	mov	r0, r7
 8017c94:	f7ff ffc0 	bl	8017c18 <sbrk_aligned>
 8017c98:	1c43      	adds	r3, r0, #1
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	d155      	bne.n	8017d4a <_malloc_r+0xf2>
 8017c9e:	f8d8 4000 	ldr.w	r4, [r8]
 8017ca2:	4626      	mov	r6, r4
 8017ca4:	2e00      	cmp	r6, #0
 8017ca6:	d145      	bne.n	8017d34 <_malloc_r+0xdc>
 8017ca8:	2c00      	cmp	r4, #0
 8017caa:	d048      	beq.n	8017d3e <_malloc_r+0xe6>
 8017cac:	6823      	ldr	r3, [r4, #0]
 8017cae:	4631      	mov	r1, r6
 8017cb0:	4638      	mov	r0, r7
 8017cb2:	eb04 0903 	add.w	r9, r4, r3
 8017cb6:	f000 fdcb 	bl	8018850 <_sbrk_r>
 8017cba:	4581      	cmp	r9, r0
 8017cbc:	d13f      	bne.n	8017d3e <_malloc_r+0xe6>
 8017cbe:	6821      	ldr	r1, [r4, #0]
 8017cc0:	1a6d      	subs	r5, r5, r1
 8017cc2:	4629      	mov	r1, r5
 8017cc4:	4638      	mov	r0, r7
 8017cc6:	f7ff ffa7 	bl	8017c18 <sbrk_aligned>
 8017cca:	3001      	adds	r0, #1
 8017ccc:	d037      	beq.n	8017d3e <_malloc_r+0xe6>
 8017cce:	6823      	ldr	r3, [r4, #0]
 8017cd0:	442b      	add	r3, r5
 8017cd2:	6023      	str	r3, [r4, #0]
 8017cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d038      	beq.n	8017d4e <_malloc_r+0xf6>
 8017cdc:	685a      	ldr	r2, [r3, #4]
 8017cde:	42a2      	cmp	r2, r4
 8017ce0:	d12b      	bne.n	8017d3a <_malloc_r+0xe2>
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	605a      	str	r2, [r3, #4]
 8017ce6:	e00f      	b.n	8017d08 <_malloc_r+0xb0>
 8017ce8:	6822      	ldr	r2, [r4, #0]
 8017cea:	1b52      	subs	r2, r2, r5
 8017cec:	d41f      	bmi.n	8017d2e <_malloc_r+0xd6>
 8017cee:	2a0b      	cmp	r2, #11
 8017cf0:	d917      	bls.n	8017d22 <_malloc_r+0xca>
 8017cf2:	1961      	adds	r1, r4, r5
 8017cf4:	42a3      	cmp	r3, r4
 8017cf6:	6025      	str	r5, [r4, #0]
 8017cf8:	bf18      	it	ne
 8017cfa:	6059      	strne	r1, [r3, #4]
 8017cfc:	6863      	ldr	r3, [r4, #4]
 8017cfe:	bf08      	it	eq
 8017d00:	f8c8 1000 	streq.w	r1, [r8]
 8017d04:	5162      	str	r2, [r4, r5]
 8017d06:	604b      	str	r3, [r1, #4]
 8017d08:	4638      	mov	r0, r7
 8017d0a:	f104 060b 	add.w	r6, r4, #11
 8017d0e:	f000 f829 	bl	8017d64 <__malloc_unlock>
 8017d12:	f026 0607 	bic.w	r6, r6, #7
 8017d16:	1d23      	adds	r3, r4, #4
 8017d18:	1af2      	subs	r2, r6, r3
 8017d1a:	d0ae      	beq.n	8017c7a <_malloc_r+0x22>
 8017d1c:	1b9b      	subs	r3, r3, r6
 8017d1e:	50a3      	str	r3, [r4, r2]
 8017d20:	e7ab      	b.n	8017c7a <_malloc_r+0x22>
 8017d22:	42a3      	cmp	r3, r4
 8017d24:	6862      	ldr	r2, [r4, #4]
 8017d26:	d1dd      	bne.n	8017ce4 <_malloc_r+0x8c>
 8017d28:	f8c8 2000 	str.w	r2, [r8]
 8017d2c:	e7ec      	b.n	8017d08 <_malloc_r+0xb0>
 8017d2e:	4623      	mov	r3, r4
 8017d30:	6864      	ldr	r4, [r4, #4]
 8017d32:	e7ac      	b.n	8017c8e <_malloc_r+0x36>
 8017d34:	4634      	mov	r4, r6
 8017d36:	6876      	ldr	r6, [r6, #4]
 8017d38:	e7b4      	b.n	8017ca4 <_malloc_r+0x4c>
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	e7cc      	b.n	8017cd8 <_malloc_r+0x80>
 8017d3e:	230c      	movs	r3, #12
 8017d40:	603b      	str	r3, [r7, #0]
 8017d42:	4638      	mov	r0, r7
 8017d44:	f000 f80e 	bl	8017d64 <__malloc_unlock>
 8017d48:	e797      	b.n	8017c7a <_malloc_r+0x22>
 8017d4a:	6025      	str	r5, [r4, #0]
 8017d4c:	e7dc      	b.n	8017d08 <_malloc_r+0xb0>
 8017d4e:	605b      	str	r3, [r3, #4]
 8017d50:	deff      	udf	#255	; 0xff
 8017d52:	bf00      	nop
 8017d54:	20008d6c 	.word	0x20008d6c

08017d58 <__malloc_lock>:
 8017d58:	4801      	ldr	r0, [pc, #4]	; (8017d60 <__malloc_lock+0x8>)
 8017d5a:	f7ff beda 	b.w	8017b12 <__retarget_lock_acquire_recursive>
 8017d5e:	bf00      	nop
 8017d60:	20008d68 	.word	0x20008d68

08017d64 <__malloc_unlock>:
 8017d64:	4801      	ldr	r0, [pc, #4]	; (8017d6c <__malloc_unlock+0x8>)
 8017d66:	f7ff bed5 	b.w	8017b14 <__retarget_lock_release_recursive>
 8017d6a:	bf00      	nop
 8017d6c:	20008d68 	.word	0x20008d68

08017d70 <__ssputs_r>:
 8017d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d74:	688e      	ldr	r6, [r1, #8]
 8017d76:	461f      	mov	r7, r3
 8017d78:	42be      	cmp	r6, r7
 8017d7a:	680b      	ldr	r3, [r1, #0]
 8017d7c:	4682      	mov	sl, r0
 8017d7e:	460c      	mov	r4, r1
 8017d80:	4690      	mov	r8, r2
 8017d82:	d82c      	bhi.n	8017dde <__ssputs_r+0x6e>
 8017d84:	898a      	ldrh	r2, [r1, #12]
 8017d86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017d8a:	d026      	beq.n	8017dda <__ssputs_r+0x6a>
 8017d8c:	6965      	ldr	r5, [r4, #20]
 8017d8e:	6909      	ldr	r1, [r1, #16]
 8017d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d94:	eba3 0901 	sub.w	r9, r3, r1
 8017d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d9c:	1c7b      	adds	r3, r7, #1
 8017d9e:	444b      	add	r3, r9
 8017da0:	106d      	asrs	r5, r5, #1
 8017da2:	429d      	cmp	r5, r3
 8017da4:	bf38      	it	cc
 8017da6:	461d      	movcc	r5, r3
 8017da8:	0553      	lsls	r3, r2, #21
 8017daa:	d527      	bpl.n	8017dfc <__ssputs_r+0x8c>
 8017dac:	4629      	mov	r1, r5
 8017dae:	f7ff ff53 	bl	8017c58 <_malloc_r>
 8017db2:	4606      	mov	r6, r0
 8017db4:	b360      	cbz	r0, 8017e10 <__ssputs_r+0xa0>
 8017db6:	6921      	ldr	r1, [r4, #16]
 8017db8:	464a      	mov	r2, r9
 8017dba:	f7ff feac 	bl	8017b16 <memcpy>
 8017dbe:	89a3      	ldrh	r3, [r4, #12]
 8017dc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017dc8:	81a3      	strh	r3, [r4, #12]
 8017dca:	6126      	str	r6, [r4, #16]
 8017dcc:	6165      	str	r5, [r4, #20]
 8017dce:	444e      	add	r6, r9
 8017dd0:	eba5 0509 	sub.w	r5, r5, r9
 8017dd4:	6026      	str	r6, [r4, #0]
 8017dd6:	60a5      	str	r5, [r4, #8]
 8017dd8:	463e      	mov	r6, r7
 8017dda:	42be      	cmp	r6, r7
 8017ddc:	d900      	bls.n	8017de0 <__ssputs_r+0x70>
 8017dde:	463e      	mov	r6, r7
 8017de0:	6820      	ldr	r0, [r4, #0]
 8017de2:	4632      	mov	r2, r6
 8017de4:	4641      	mov	r1, r8
 8017de6:	f7ff fe01 	bl	80179ec <memmove>
 8017dea:	68a3      	ldr	r3, [r4, #8]
 8017dec:	1b9b      	subs	r3, r3, r6
 8017dee:	60a3      	str	r3, [r4, #8]
 8017df0:	6823      	ldr	r3, [r4, #0]
 8017df2:	4433      	add	r3, r6
 8017df4:	6023      	str	r3, [r4, #0]
 8017df6:	2000      	movs	r0, #0
 8017df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dfc:	462a      	mov	r2, r5
 8017dfe:	f000 fd3e 	bl	801887e <_realloc_r>
 8017e02:	4606      	mov	r6, r0
 8017e04:	2800      	cmp	r0, #0
 8017e06:	d1e0      	bne.n	8017dca <__ssputs_r+0x5a>
 8017e08:	6921      	ldr	r1, [r4, #16]
 8017e0a:	4650      	mov	r0, sl
 8017e0c:	f7ff feb0 	bl	8017b70 <_free_r>
 8017e10:	230c      	movs	r3, #12
 8017e12:	f8ca 3000 	str.w	r3, [sl]
 8017e16:	89a3      	ldrh	r3, [r4, #12]
 8017e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e1c:	81a3      	strh	r3, [r4, #12]
 8017e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e22:	e7e9      	b.n	8017df8 <__ssputs_r+0x88>

08017e24 <_svfiprintf_r>:
 8017e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e28:	4698      	mov	r8, r3
 8017e2a:	898b      	ldrh	r3, [r1, #12]
 8017e2c:	061b      	lsls	r3, r3, #24
 8017e2e:	b09d      	sub	sp, #116	; 0x74
 8017e30:	4607      	mov	r7, r0
 8017e32:	460d      	mov	r5, r1
 8017e34:	4614      	mov	r4, r2
 8017e36:	d50e      	bpl.n	8017e56 <_svfiprintf_r+0x32>
 8017e38:	690b      	ldr	r3, [r1, #16]
 8017e3a:	b963      	cbnz	r3, 8017e56 <_svfiprintf_r+0x32>
 8017e3c:	2140      	movs	r1, #64	; 0x40
 8017e3e:	f7ff ff0b 	bl	8017c58 <_malloc_r>
 8017e42:	6028      	str	r0, [r5, #0]
 8017e44:	6128      	str	r0, [r5, #16]
 8017e46:	b920      	cbnz	r0, 8017e52 <_svfiprintf_r+0x2e>
 8017e48:	230c      	movs	r3, #12
 8017e4a:	603b      	str	r3, [r7, #0]
 8017e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e50:	e0d0      	b.n	8017ff4 <_svfiprintf_r+0x1d0>
 8017e52:	2340      	movs	r3, #64	; 0x40
 8017e54:	616b      	str	r3, [r5, #20]
 8017e56:	2300      	movs	r3, #0
 8017e58:	9309      	str	r3, [sp, #36]	; 0x24
 8017e5a:	2320      	movs	r3, #32
 8017e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e64:	2330      	movs	r3, #48	; 0x30
 8017e66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801800c <_svfiprintf_r+0x1e8>
 8017e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e6e:	f04f 0901 	mov.w	r9, #1
 8017e72:	4623      	mov	r3, r4
 8017e74:	469a      	mov	sl, r3
 8017e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e7a:	b10a      	cbz	r2, 8017e80 <_svfiprintf_r+0x5c>
 8017e7c:	2a25      	cmp	r2, #37	; 0x25
 8017e7e:	d1f9      	bne.n	8017e74 <_svfiprintf_r+0x50>
 8017e80:	ebba 0b04 	subs.w	fp, sl, r4
 8017e84:	d00b      	beq.n	8017e9e <_svfiprintf_r+0x7a>
 8017e86:	465b      	mov	r3, fp
 8017e88:	4622      	mov	r2, r4
 8017e8a:	4629      	mov	r1, r5
 8017e8c:	4638      	mov	r0, r7
 8017e8e:	f7ff ff6f 	bl	8017d70 <__ssputs_r>
 8017e92:	3001      	adds	r0, #1
 8017e94:	f000 80a9 	beq.w	8017fea <_svfiprintf_r+0x1c6>
 8017e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e9a:	445a      	add	r2, fp
 8017e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8017e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f000 80a1 	beq.w	8017fea <_svfiprintf_r+0x1c6>
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8017eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017eb2:	f10a 0a01 	add.w	sl, sl, #1
 8017eb6:	9304      	str	r3, [sp, #16]
 8017eb8:	9307      	str	r3, [sp, #28]
 8017eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8017ec0:	4654      	mov	r4, sl
 8017ec2:	2205      	movs	r2, #5
 8017ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ec8:	4850      	ldr	r0, [pc, #320]	; (801800c <_svfiprintf_r+0x1e8>)
 8017eca:	f7e8 f9b9 	bl	8000240 <memchr>
 8017ece:	9a04      	ldr	r2, [sp, #16]
 8017ed0:	b9d8      	cbnz	r0, 8017f0a <_svfiprintf_r+0xe6>
 8017ed2:	06d0      	lsls	r0, r2, #27
 8017ed4:	bf44      	itt	mi
 8017ed6:	2320      	movmi	r3, #32
 8017ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017edc:	0711      	lsls	r1, r2, #28
 8017ede:	bf44      	itt	mi
 8017ee0:	232b      	movmi	r3, #43	; 0x2b
 8017ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8017eea:	2b2a      	cmp	r3, #42	; 0x2a
 8017eec:	d015      	beq.n	8017f1a <_svfiprintf_r+0xf6>
 8017eee:	9a07      	ldr	r2, [sp, #28]
 8017ef0:	4654      	mov	r4, sl
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	f04f 0c0a 	mov.w	ip, #10
 8017ef8:	4621      	mov	r1, r4
 8017efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017efe:	3b30      	subs	r3, #48	; 0x30
 8017f00:	2b09      	cmp	r3, #9
 8017f02:	d94d      	bls.n	8017fa0 <_svfiprintf_r+0x17c>
 8017f04:	b1b0      	cbz	r0, 8017f34 <_svfiprintf_r+0x110>
 8017f06:	9207      	str	r2, [sp, #28]
 8017f08:	e014      	b.n	8017f34 <_svfiprintf_r+0x110>
 8017f0a:	eba0 0308 	sub.w	r3, r0, r8
 8017f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8017f12:	4313      	orrs	r3, r2
 8017f14:	9304      	str	r3, [sp, #16]
 8017f16:	46a2      	mov	sl, r4
 8017f18:	e7d2      	b.n	8017ec0 <_svfiprintf_r+0x9c>
 8017f1a:	9b03      	ldr	r3, [sp, #12]
 8017f1c:	1d19      	adds	r1, r3, #4
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	9103      	str	r1, [sp, #12]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	bfbb      	ittet	lt
 8017f26:	425b      	neglt	r3, r3
 8017f28:	f042 0202 	orrlt.w	r2, r2, #2
 8017f2c:	9307      	strge	r3, [sp, #28]
 8017f2e:	9307      	strlt	r3, [sp, #28]
 8017f30:	bfb8      	it	lt
 8017f32:	9204      	strlt	r2, [sp, #16]
 8017f34:	7823      	ldrb	r3, [r4, #0]
 8017f36:	2b2e      	cmp	r3, #46	; 0x2e
 8017f38:	d10c      	bne.n	8017f54 <_svfiprintf_r+0x130>
 8017f3a:	7863      	ldrb	r3, [r4, #1]
 8017f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8017f3e:	d134      	bne.n	8017faa <_svfiprintf_r+0x186>
 8017f40:	9b03      	ldr	r3, [sp, #12]
 8017f42:	1d1a      	adds	r2, r3, #4
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	9203      	str	r2, [sp, #12]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	bfb8      	it	lt
 8017f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017f50:	3402      	adds	r4, #2
 8017f52:	9305      	str	r3, [sp, #20]
 8017f54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801801c <_svfiprintf_r+0x1f8>
 8017f58:	7821      	ldrb	r1, [r4, #0]
 8017f5a:	2203      	movs	r2, #3
 8017f5c:	4650      	mov	r0, sl
 8017f5e:	f7e8 f96f 	bl	8000240 <memchr>
 8017f62:	b138      	cbz	r0, 8017f74 <_svfiprintf_r+0x150>
 8017f64:	9b04      	ldr	r3, [sp, #16]
 8017f66:	eba0 000a 	sub.w	r0, r0, sl
 8017f6a:	2240      	movs	r2, #64	; 0x40
 8017f6c:	4082      	lsls	r2, r0
 8017f6e:	4313      	orrs	r3, r2
 8017f70:	3401      	adds	r4, #1
 8017f72:	9304      	str	r3, [sp, #16]
 8017f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f78:	4825      	ldr	r0, [pc, #148]	; (8018010 <_svfiprintf_r+0x1ec>)
 8017f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f7e:	2206      	movs	r2, #6
 8017f80:	f7e8 f95e 	bl	8000240 <memchr>
 8017f84:	2800      	cmp	r0, #0
 8017f86:	d038      	beq.n	8017ffa <_svfiprintf_r+0x1d6>
 8017f88:	4b22      	ldr	r3, [pc, #136]	; (8018014 <_svfiprintf_r+0x1f0>)
 8017f8a:	bb1b      	cbnz	r3, 8017fd4 <_svfiprintf_r+0x1b0>
 8017f8c:	9b03      	ldr	r3, [sp, #12]
 8017f8e:	3307      	adds	r3, #7
 8017f90:	f023 0307 	bic.w	r3, r3, #7
 8017f94:	3308      	adds	r3, #8
 8017f96:	9303      	str	r3, [sp, #12]
 8017f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f9a:	4433      	add	r3, r6
 8017f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8017f9e:	e768      	b.n	8017e72 <_svfiprintf_r+0x4e>
 8017fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fa4:	460c      	mov	r4, r1
 8017fa6:	2001      	movs	r0, #1
 8017fa8:	e7a6      	b.n	8017ef8 <_svfiprintf_r+0xd4>
 8017faa:	2300      	movs	r3, #0
 8017fac:	3401      	adds	r4, #1
 8017fae:	9305      	str	r3, [sp, #20]
 8017fb0:	4619      	mov	r1, r3
 8017fb2:	f04f 0c0a 	mov.w	ip, #10
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fbc:	3a30      	subs	r2, #48	; 0x30
 8017fbe:	2a09      	cmp	r2, #9
 8017fc0:	d903      	bls.n	8017fca <_svfiprintf_r+0x1a6>
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d0c6      	beq.n	8017f54 <_svfiprintf_r+0x130>
 8017fc6:	9105      	str	r1, [sp, #20]
 8017fc8:	e7c4      	b.n	8017f54 <_svfiprintf_r+0x130>
 8017fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8017fce:	4604      	mov	r4, r0
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	e7f0      	b.n	8017fb6 <_svfiprintf_r+0x192>
 8017fd4:	ab03      	add	r3, sp, #12
 8017fd6:	9300      	str	r3, [sp, #0]
 8017fd8:	462a      	mov	r2, r5
 8017fda:	4b0f      	ldr	r3, [pc, #60]	; (8018018 <_svfiprintf_r+0x1f4>)
 8017fdc:	a904      	add	r1, sp, #16
 8017fde:	4638      	mov	r0, r7
 8017fe0:	f3af 8000 	nop.w
 8017fe4:	1c42      	adds	r2, r0, #1
 8017fe6:	4606      	mov	r6, r0
 8017fe8:	d1d6      	bne.n	8017f98 <_svfiprintf_r+0x174>
 8017fea:	89ab      	ldrh	r3, [r5, #12]
 8017fec:	065b      	lsls	r3, r3, #25
 8017fee:	f53f af2d 	bmi.w	8017e4c <_svfiprintf_r+0x28>
 8017ff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ff4:	b01d      	add	sp, #116	; 0x74
 8017ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ffa:	ab03      	add	r3, sp, #12
 8017ffc:	9300      	str	r3, [sp, #0]
 8017ffe:	462a      	mov	r2, r5
 8018000:	4b05      	ldr	r3, [pc, #20]	; (8018018 <_svfiprintf_r+0x1f4>)
 8018002:	a904      	add	r1, sp, #16
 8018004:	4638      	mov	r0, r7
 8018006:	f000 f9bd 	bl	8018384 <_printf_i>
 801800a:	e7eb      	b.n	8017fe4 <_svfiprintf_r+0x1c0>
 801800c:	0801b8b2 	.word	0x0801b8b2
 8018010:	0801b8bc 	.word	0x0801b8bc
 8018014:	00000000 	.word	0x00000000
 8018018:	08017d71 	.word	0x08017d71
 801801c:	0801b8b8 	.word	0x0801b8b8

08018020 <__sfputc_r>:
 8018020:	6893      	ldr	r3, [r2, #8]
 8018022:	3b01      	subs	r3, #1
 8018024:	2b00      	cmp	r3, #0
 8018026:	b410      	push	{r4}
 8018028:	6093      	str	r3, [r2, #8]
 801802a:	da08      	bge.n	801803e <__sfputc_r+0x1e>
 801802c:	6994      	ldr	r4, [r2, #24]
 801802e:	42a3      	cmp	r3, r4
 8018030:	db01      	blt.n	8018036 <__sfputc_r+0x16>
 8018032:	290a      	cmp	r1, #10
 8018034:	d103      	bne.n	801803e <__sfputc_r+0x1e>
 8018036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801803a:	f7ff bc32 	b.w	80178a2 <__swbuf_r>
 801803e:	6813      	ldr	r3, [r2, #0]
 8018040:	1c58      	adds	r0, r3, #1
 8018042:	6010      	str	r0, [r2, #0]
 8018044:	7019      	strb	r1, [r3, #0]
 8018046:	4608      	mov	r0, r1
 8018048:	f85d 4b04 	ldr.w	r4, [sp], #4
 801804c:	4770      	bx	lr

0801804e <__sfputs_r>:
 801804e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018050:	4606      	mov	r6, r0
 8018052:	460f      	mov	r7, r1
 8018054:	4614      	mov	r4, r2
 8018056:	18d5      	adds	r5, r2, r3
 8018058:	42ac      	cmp	r4, r5
 801805a:	d101      	bne.n	8018060 <__sfputs_r+0x12>
 801805c:	2000      	movs	r0, #0
 801805e:	e007      	b.n	8018070 <__sfputs_r+0x22>
 8018060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018064:	463a      	mov	r2, r7
 8018066:	4630      	mov	r0, r6
 8018068:	f7ff ffda 	bl	8018020 <__sfputc_r>
 801806c:	1c43      	adds	r3, r0, #1
 801806e:	d1f3      	bne.n	8018058 <__sfputs_r+0xa>
 8018070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018074 <_vfiprintf_r>:
 8018074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018078:	460d      	mov	r5, r1
 801807a:	b09d      	sub	sp, #116	; 0x74
 801807c:	4614      	mov	r4, r2
 801807e:	4698      	mov	r8, r3
 8018080:	4606      	mov	r6, r0
 8018082:	b118      	cbz	r0, 801808c <_vfiprintf_r+0x18>
 8018084:	6a03      	ldr	r3, [r0, #32]
 8018086:	b90b      	cbnz	r3, 801808c <_vfiprintf_r+0x18>
 8018088:	f7ff fad0 	bl	801762c <__sinit>
 801808c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801808e:	07d9      	lsls	r1, r3, #31
 8018090:	d405      	bmi.n	801809e <_vfiprintf_r+0x2a>
 8018092:	89ab      	ldrh	r3, [r5, #12]
 8018094:	059a      	lsls	r2, r3, #22
 8018096:	d402      	bmi.n	801809e <_vfiprintf_r+0x2a>
 8018098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801809a:	f7ff fd3a 	bl	8017b12 <__retarget_lock_acquire_recursive>
 801809e:	89ab      	ldrh	r3, [r5, #12]
 80180a0:	071b      	lsls	r3, r3, #28
 80180a2:	d501      	bpl.n	80180a8 <_vfiprintf_r+0x34>
 80180a4:	692b      	ldr	r3, [r5, #16]
 80180a6:	b99b      	cbnz	r3, 80180d0 <_vfiprintf_r+0x5c>
 80180a8:	4629      	mov	r1, r5
 80180aa:	4630      	mov	r0, r6
 80180ac:	f7ff fc36 	bl	801791c <__swsetup_r>
 80180b0:	b170      	cbz	r0, 80180d0 <_vfiprintf_r+0x5c>
 80180b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80180b4:	07dc      	lsls	r4, r3, #31
 80180b6:	d504      	bpl.n	80180c2 <_vfiprintf_r+0x4e>
 80180b8:	f04f 30ff 	mov.w	r0, #4294967295
 80180bc:	b01d      	add	sp, #116	; 0x74
 80180be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180c2:	89ab      	ldrh	r3, [r5, #12]
 80180c4:	0598      	lsls	r0, r3, #22
 80180c6:	d4f7      	bmi.n	80180b8 <_vfiprintf_r+0x44>
 80180c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80180ca:	f7ff fd23 	bl	8017b14 <__retarget_lock_release_recursive>
 80180ce:	e7f3      	b.n	80180b8 <_vfiprintf_r+0x44>
 80180d0:	2300      	movs	r3, #0
 80180d2:	9309      	str	r3, [sp, #36]	; 0x24
 80180d4:	2320      	movs	r3, #32
 80180d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80180da:	f8cd 800c 	str.w	r8, [sp, #12]
 80180de:	2330      	movs	r3, #48	; 0x30
 80180e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018294 <_vfiprintf_r+0x220>
 80180e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180e8:	f04f 0901 	mov.w	r9, #1
 80180ec:	4623      	mov	r3, r4
 80180ee:	469a      	mov	sl, r3
 80180f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180f4:	b10a      	cbz	r2, 80180fa <_vfiprintf_r+0x86>
 80180f6:	2a25      	cmp	r2, #37	; 0x25
 80180f8:	d1f9      	bne.n	80180ee <_vfiprintf_r+0x7a>
 80180fa:	ebba 0b04 	subs.w	fp, sl, r4
 80180fe:	d00b      	beq.n	8018118 <_vfiprintf_r+0xa4>
 8018100:	465b      	mov	r3, fp
 8018102:	4622      	mov	r2, r4
 8018104:	4629      	mov	r1, r5
 8018106:	4630      	mov	r0, r6
 8018108:	f7ff ffa1 	bl	801804e <__sfputs_r>
 801810c:	3001      	adds	r0, #1
 801810e:	f000 80a9 	beq.w	8018264 <_vfiprintf_r+0x1f0>
 8018112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018114:	445a      	add	r2, fp
 8018116:	9209      	str	r2, [sp, #36]	; 0x24
 8018118:	f89a 3000 	ldrb.w	r3, [sl]
 801811c:	2b00      	cmp	r3, #0
 801811e:	f000 80a1 	beq.w	8018264 <_vfiprintf_r+0x1f0>
 8018122:	2300      	movs	r3, #0
 8018124:	f04f 32ff 	mov.w	r2, #4294967295
 8018128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801812c:	f10a 0a01 	add.w	sl, sl, #1
 8018130:	9304      	str	r3, [sp, #16]
 8018132:	9307      	str	r3, [sp, #28]
 8018134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018138:	931a      	str	r3, [sp, #104]	; 0x68
 801813a:	4654      	mov	r4, sl
 801813c:	2205      	movs	r2, #5
 801813e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018142:	4854      	ldr	r0, [pc, #336]	; (8018294 <_vfiprintf_r+0x220>)
 8018144:	f7e8 f87c 	bl	8000240 <memchr>
 8018148:	9a04      	ldr	r2, [sp, #16]
 801814a:	b9d8      	cbnz	r0, 8018184 <_vfiprintf_r+0x110>
 801814c:	06d1      	lsls	r1, r2, #27
 801814e:	bf44      	itt	mi
 8018150:	2320      	movmi	r3, #32
 8018152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018156:	0713      	lsls	r3, r2, #28
 8018158:	bf44      	itt	mi
 801815a:	232b      	movmi	r3, #43	; 0x2b
 801815c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018160:	f89a 3000 	ldrb.w	r3, [sl]
 8018164:	2b2a      	cmp	r3, #42	; 0x2a
 8018166:	d015      	beq.n	8018194 <_vfiprintf_r+0x120>
 8018168:	9a07      	ldr	r2, [sp, #28]
 801816a:	4654      	mov	r4, sl
 801816c:	2000      	movs	r0, #0
 801816e:	f04f 0c0a 	mov.w	ip, #10
 8018172:	4621      	mov	r1, r4
 8018174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018178:	3b30      	subs	r3, #48	; 0x30
 801817a:	2b09      	cmp	r3, #9
 801817c:	d94d      	bls.n	801821a <_vfiprintf_r+0x1a6>
 801817e:	b1b0      	cbz	r0, 80181ae <_vfiprintf_r+0x13a>
 8018180:	9207      	str	r2, [sp, #28]
 8018182:	e014      	b.n	80181ae <_vfiprintf_r+0x13a>
 8018184:	eba0 0308 	sub.w	r3, r0, r8
 8018188:	fa09 f303 	lsl.w	r3, r9, r3
 801818c:	4313      	orrs	r3, r2
 801818e:	9304      	str	r3, [sp, #16]
 8018190:	46a2      	mov	sl, r4
 8018192:	e7d2      	b.n	801813a <_vfiprintf_r+0xc6>
 8018194:	9b03      	ldr	r3, [sp, #12]
 8018196:	1d19      	adds	r1, r3, #4
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	9103      	str	r1, [sp, #12]
 801819c:	2b00      	cmp	r3, #0
 801819e:	bfbb      	ittet	lt
 80181a0:	425b      	neglt	r3, r3
 80181a2:	f042 0202 	orrlt.w	r2, r2, #2
 80181a6:	9307      	strge	r3, [sp, #28]
 80181a8:	9307      	strlt	r3, [sp, #28]
 80181aa:	bfb8      	it	lt
 80181ac:	9204      	strlt	r2, [sp, #16]
 80181ae:	7823      	ldrb	r3, [r4, #0]
 80181b0:	2b2e      	cmp	r3, #46	; 0x2e
 80181b2:	d10c      	bne.n	80181ce <_vfiprintf_r+0x15a>
 80181b4:	7863      	ldrb	r3, [r4, #1]
 80181b6:	2b2a      	cmp	r3, #42	; 0x2a
 80181b8:	d134      	bne.n	8018224 <_vfiprintf_r+0x1b0>
 80181ba:	9b03      	ldr	r3, [sp, #12]
 80181bc:	1d1a      	adds	r2, r3, #4
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	9203      	str	r2, [sp, #12]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	bfb8      	it	lt
 80181c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80181ca:	3402      	adds	r4, #2
 80181cc:	9305      	str	r3, [sp, #20]
 80181ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80182a4 <_vfiprintf_r+0x230>
 80181d2:	7821      	ldrb	r1, [r4, #0]
 80181d4:	2203      	movs	r2, #3
 80181d6:	4650      	mov	r0, sl
 80181d8:	f7e8 f832 	bl	8000240 <memchr>
 80181dc:	b138      	cbz	r0, 80181ee <_vfiprintf_r+0x17a>
 80181de:	9b04      	ldr	r3, [sp, #16]
 80181e0:	eba0 000a 	sub.w	r0, r0, sl
 80181e4:	2240      	movs	r2, #64	; 0x40
 80181e6:	4082      	lsls	r2, r0
 80181e8:	4313      	orrs	r3, r2
 80181ea:	3401      	adds	r4, #1
 80181ec:	9304      	str	r3, [sp, #16]
 80181ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181f2:	4829      	ldr	r0, [pc, #164]	; (8018298 <_vfiprintf_r+0x224>)
 80181f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181f8:	2206      	movs	r2, #6
 80181fa:	f7e8 f821 	bl	8000240 <memchr>
 80181fe:	2800      	cmp	r0, #0
 8018200:	d03f      	beq.n	8018282 <_vfiprintf_r+0x20e>
 8018202:	4b26      	ldr	r3, [pc, #152]	; (801829c <_vfiprintf_r+0x228>)
 8018204:	bb1b      	cbnz	r3, 801824e <_vfiprintf_r+0x1da>
 8018206:	9b03      	ldr	r3, [sp, #12]
 8018208:	3307      	adds	r3, #7
 801820a:	f023 0307 	bic.w	r3, r3, #7
 801820e:	3308      	adds	r3, #8
 8018210:	9303      	str	r3, [sp, #12]
 8018212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018214:	443b      	add	r3, r7
 8018216:	9309      	str	r3, [sp, #36]	; 0x24
 8018218:	e768      	b.n	80180ec <_vfiprintf_r+0x78>
 801821a:	fb0c 3202 	mla	r2, ip, r2, r3
 801821e:	460c      	mov	r4, r1
 8018220:	2001      	movs	r0, #1
 8018222:	e7a6      	b.n	8018172 <_vfiprintf_r+0xfe>
 8018224:	2300      	movs	r3, #0
 8018226:	3401      	adds	r4, #1
 8018228:	9305      	str	r3, [sp, #20]
 801822a:	4619      	mov	r1, r3
 801822c:	f04f 0c0a 	mov.w	ip, #10
 8018230:	4620      	mov	r0, r4
 8018232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018236:	3a30      	subs	r2, #48	; 0x30
 8018238:	2a09      	cmp	r2, #9
 801823a:	d903      	bls.n	8018244 <_vfiprintf_r+0x1d0>
 801823c:	2b00      	cmp	r3, #0
 801823e:	d0c6      	beq.n	80181ce <_vfiprintf_r+0x15a>
 8018240:	9105      	str	r1, [sp, #20]
 8018242:	e7c4      	b.n	80181ce <_vfiprintf_r+0x15a>
 8018244:	fb0c 2101 	mla	r1, ip, r1, r2
 8018248:	4604      	mov	r4, r0
 801824a:	2301      	movs	r3, #1
 801824c:	e7f0      	b.n	8018230 <_vfiprintf_r+0x1bc>
 801824e:	ab03      	add	r3, sp, #12
 8018250:	9300      	str	r3, [sp, #0]
 8018252:	462a      	mov	r2, r5
 8018254:	4b12      	ldr	r3, [pc, #72]	; (80182a0 <_vfiprintf_r+0x22c>)
 8018256:	a904      	add	r1, sp, #16
 8018258:	4630      	mov	r0, r6
 801825a:	f3af 8000 	nop.w
 801825e:	4607      	mov	r7, r0
 8018260:	1c78      	adds	r0, r7, #1
 8018262:	d1d6      	bne.n	8018212 <_vfiprintf_r+0x19e>
 8018264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018266:	07d9      	lsls	r1, r3, #31
 8018268:	d405      	bmi.n	8018276 <_vfiprintf_r+0x202>
 801826a:	89ab      	ldrh	r3, [r5, #12]
 801826c:	059a      	lsls	r2, r3, #22
 801826e:	d402      	bmi.n	8018276 <_vfiprintf_r+0x202>
 8018270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018272:	f7ff fc4f 	bl	8017b14 <__retarget_lock_release_recursive>
 8018276:	89ab      	ldrh	r3, [r5, #12]
 8018278:	065b      	lsls	r3, r3, #25
 801827a:	f53f af1d 	bmi.w	80180b8 <_vfiprintf_r+0x44>
 801827e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018280:	e71c      	b.n	80180bc <_vfiprintf_r+0x48>
 8018282:	ab03      	add	r3, sp, #12
 8018284:	9300      	str	r3, [sp, #0]
 8018286:	462a      	mov	r2, r5
 8018288:	4b05      	ldr	r3, [pc, #20]	; (80182a0 <_vfiprintf_r+0x22c>)
 801828a:	a904      	add	r1, sp, #16
 801828c:	4630      	mov	r0, r6
 801828e:	f000 f879 	bl	8018384 <_printf_i>
 8018292:	e7e4      	b.n	801825e <_vfiprintf_r+0x1ea>
 8018294:	0801b8b2 	.word	0x0801b8b2
 8018298:	0801b8bc 	.word	0x0801b8bc
 801829c:	00000000 	.word	0x00000000
 80182a0:	0801804f 	.word	0x0801804f
 80182a4:	0801b8b8 	.word	0x0801b8b8

080182a8 <_printf_common>:
 80182a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182ac:	4616      	mov	r6, r2
 80182ae:	4699      	mov	r9, r3
 80182b0:	688a      	ldr	r2, [r1, #8]
 80182b2:	690b      	ldr	r3, [r1, #16]
 80182b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80182b8:	4293      	cmp	r3, r2
 80182ba:	bfb8      	it	lt
 80182bc:	4613      	movlt	r3, r2
 80182be:	6033      	str	r3, [r6, #0]
 80182c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80182c4:	4607      	mov	r7, r0
 80182c6:	460c      	mov	r4, r1
 80182c8:	b10a      	cbz	r2, 80182ce <_printf_common+0x26>
 80182ca:	3301      	adds	r3, #1
 80182cc:	6033      	str	r3, [r6, #0]
 80182ce:	6823      	ldr	r3, [r4, #0]
 80182d0:	0699      	lsls	r1, r3, #26
 80182d2:	bf42      	ittt	mi
 80182d4:	6833      	ldrmi	r3, [r6, #0]
 80182d6:	3302      	addmi	r3, #2
 80182d8:	6033      	strmi	r3, [r6, #0]
 80182da:	6825      	ldr	r5, [r4, #0]
 80182dc:	f015 0506 	ands.w	r5, r5, #6
 80182e0:	d106      	bne.n	80182f0 <_printf_common+0x48>
 80182e2:	f104 0a19 	add.w	sl, r4, #25
 80182e6:	68e3      	ldr	r3, [r4, #12]
 80182e8:	6832      	ldr	r2, [r6, #0]
 80182ea:	1a9b      	subs	r3, r3, r2
 80182ec:	42ab      	cmp	r3, r5
 80182ee:	dc26      	bgt.n	801833e <_printf_common+0x96>
 80182f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80182f4:	1e13      	subs	r3, r2, #0
 80182f6:	6822      	ldr	r2, [r4, #0]
 80182f8:	bf18      	it	ne
 80182fa:	2301      	movne	r3, #1
 80182fc:	0692      	lsls	r2, r2, #26
 80182fe:	d42b      	bmi.n	8018358 <_printf_common+0xb0>
 8018300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018304:	4649      	mov	r1, r9
 8018306:	4638      	mov	r0, r7
 8018308:	47c0      	blx	r8
 801830a:	3001      	adds	r0, #1
 801830c:	d01e      	beq.n	801834c <_printf_common+0xa4>
 801830e:	6823      	ldr	r3, [r4, #0]
 8018310:	6922      	ldr	r2, [r4, #16]
 8018312:	f003 0306 	and.w	r3, r3, #6
 8018316:	2b04      	cmp	r3, #4
 8018318:	bf02      	ittt	eq
 801831a:	68e5      	ldreq	r5, [r4, #12]
 801831c:	6833      	ldreq	r3, [r6, #0]
 801831e:	1aed      	subeq	r5, r5, r3
 8018320:	68a3      	ldr	r3, [r4, #8]
 8018322:	bf0c      	ite	eq
 8018324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018328:	2500      	movne	r5, #0
 801832a:	4293      	cmp	r3, r2
 801832c:	bfc4      	itt	gt
 801832e:	1a9b      	subgt	r3, r3, r2
 8018330:	18ed      	addgt	r5, r5, r3
 8018332:	2600      	movs	r6, #0
 8018334:	341a      	adds	r4, #26
 8018336:	42b5      	cmp	r5, r6
 8018338:	d11a      	bne.n	8018370 <_printf_common+0xc8>
 801833a:	2000      	movs	r0, #0
 801833c:	e008      	b.n	8018350 <_printf_common+0xa8>
 801833e:	2301      	movs	r3, #1
 8018340:	4652      	mov	r2, sl
 8018342:	4649      	mov	r1, r9
 8018344:	4638      	mov	r0, r7
 8018346:	47c0      	blx	r8
 8018348:	3001      	adds	r0, #1
 801834a:	d103      	bne.n	8018354 <_printf_common+0xac>
 801834c:	f04f 30ff 	mov.w	r0, #4294967295
 8018350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018354:	3501      	adds	r5, #1
 8018356:	e7c6      	b.n	80182e6 <_printf_common+0x3e>
 8018358:	18e1      	adds	r1, r4, r3
 801835a:	1c5a      	adds	r2, r3, #1
 801835c:	2030      	movs	r0, #48	; 0x30
 801835e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018362:	4422      	add	r2, r4
 8018364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801836c:	3302      	adds	r3, #2
 801836e:	e7c7      	b.n	8018300 <_printf_common+0x58>
 8018370:	2301      	movs	r3, #1
 8018372:	4622      	mov	r2, r4
 8018374:	4649      	mov	r1, r9
 8018376:	4638      	mov	r0, r7
 8018378:	47c0      	blx	r8
 801837a:	3001      	adds	r0, #1
 801837c:	d0e6      	beq.n	801834c <_printf_common+0xa4>
 801837e:	3601      	adds	r6, #1
 8018380:	e7d9      	b.n	8018336 <_printf_common+0x8e>
	...

08018384 <_printf_i>:
 8018384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018388:	7e0f      	ldrb	r7, [r1, #24]
 801838a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801838c:	2f78      	cmp	r7, #120	; 0x78
 801838e:	4691      	mov	r9, r2
 8018390:	4680      	mov	r8, r0
 8018392:	460c      	mov	r4, r1
 8018394:	469a      	mov	sl, r3
 8018396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801839a:	d807      	bhi.n	80183ac <_printf_i+0x28>
 801839c:	2f62      	cmp	r7, #98	; 0x62
 801839e:	d80a      	bhi.n	80183b6 <_printf_i+0x32>
 80183a0:	2f00      	cmp	r7, #0
 80183a2:	f000 80d4 	beq.w	801854e <_printf_i+0x1ca>
 80183a6:	2f58      	cmp	r7, #88	; 0x58
 80183a8:	f000 80c0 	beq.w	801852c <_printf_i+0x1a8>
 80183ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80183b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80183b4:	e03a      	b.n	801842c <_printf_i+0xa8>
 80183b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80183ba:	2b15      	cmp	r3, #21
 80183bc:	d8f6      	bhi.n	80183ac <_printf_i+0x28>
 80183be:	a101      	add	r1, pc, #4	; (adr r1, 80183c4 <_printf_i+0x40>)
 80183c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80183c4:	0801841d 	.word	0x0801841d
 80183c8:	08018431 	.word	0x08018431
 80183cc:	080183ad 	.word	0x080183ad
 80183d0:	080183ad 	.word	0x080183ad
 80183d4:	080183ad 	.word	0x080183ad
 80183d8:	080183ad 	.word	0x080183ad
 80183dc:	08018431 	.word	0x08018431
 80183e0:	080183ad 	.word	0x080183ad
 80183e4:	080183ad 	.word	0x080183ad
 80183e8:	080183ad 	.word	0x080183ad
 80183ec:	080183ad 	.word	0x080183ad
 80183f0:	08018535 	.word	0x08018535
 80183f4:	0801845d 	.word	0x0801845d
 80183f8:	080184ef 	.word	0x080184ef
 80183fc:	080183ad 	.word	0x080183ad
 8018400:	080183ad 	.word	0x080183ad
 8018404:	08018557 	.word	0x08018557
 8018408:	080183ad 	.word	0x080183ad
 801840c:	0801845d 	.word	0x0801845d
 8018410:	080183ad 	.word	0x080183ad
 8018414:	080183ad 	.word	0x080183ad
 8018418:	080184f7 	.word	0x080184f7
 801841c:	682b      	ldr	r3, [r5, #0]
 801841e:	1d1a      	adds	r2, r3, #4
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	602a      	str	r2, [r5, #0]
 8018424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801842c:	2301      	movs	r3, #1
 801842e:	e09f      	b.n	8018570 <_printf_i+0x1ec>
 8018430:	6820      	ldr	r0, [r4, #0]
 8018432:	682b      	ldr	r3, [r5, #0]
 8018434:	0607      	lsls	r7, r0, #24
 8018436:	f103 0104 	add.w	r1, r3, #4
 801843a:	6029      	str	r1, [r5, #0]
 801843c:	d501      	bpl.n	8018442 <_printf_i+0xbe>
 801843e:	681e      	ldr	r6, [r3, #0]
 8018440:	e003      	b.n	801844a <_printf_i+0xc6>
 8018442:	0646      	lsls	r6, r0, #25
 8018444:	d5fb      	bpl.n	801843e <_printf_i+0xba>
 8018446:	f9b3 6000 	ldrsh.w	r6, [r3]
 801844a:	2e00      	cmp	r6, #0
 801844c:	da03      	bge.n	8018456 <_printf_i+0xd2>
 801844e:	232d      	movs	r3, #45	; 0x2d
 8018450:	4276      	negs	r6, r6
 8018452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018456:	485a      	ldr	r0, [pc, #360]	; (80185c0 <_printf_i+0x23c>)
 8018458:	230a      	movs	r3, #10
 801845a:	e012      	b.n	8018482 <_printf_i+0xfe>
 801845c:	682b      	ldr	r3, [r5, #0]
 801845e:	6820      	ldr	r0, [r4, #0]
 8018460:	1d19      	adds	r1, r3, #4
 8018462:	6029      	str	r1, [r5, #0]
 8018464:	0605      	lsls	r5, r0, #24
 8018466:	d501      	bpl.n	801846c <_printf_i+0xe8>
 8018468:	681e      	ldr	r6, [r3, #0]
 801846a:	e002      	b.n	8018472 <_printf_i+0xee>
 801846c:	0641      	lsls	r1, r0, #25
 801846e:	d5fb      	bpl.n	8018468 <_printf_i+0xe4>
 8018470:	881e      	ldrh	r6, [r3, #0]
 8018472:	4853      	ldr	r0, [pc, #332]	; (80185c0 <_printf_i+0x23c>)
 8018474:	2f6f      	cmp	r7, #111	; 0x6f
 8018476:	bf0c      	ite	eq
 8018478:	2308      	moveq	r3, #8
 801847a:	230a      	movne	r3, #10
 801847c:	2100      	movs	r1, #0
 801847e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018482:	6865      	ldr	r5, [r4, #4]
 8018484:	60a5      	str	r5, [r4, #8]
 8018486:	2d00      	cmp	r5, #0
 8018488:	bfa2      	ittt	ge
 801848a:	6821      	ldrge	r1, [r4, #0]
 801848c:	f021 0104 	bicge.w	r1, r1, #4
 8018490:	6021      	strge	r1, [r4, #0]
 8018492:	b90e      	cbnz	r6, 8018498 <_printf_i+0x114>
 8018494:	2d00      	cmp	r5, #0
 8018496:	d04b      	beq.n	8018530 <_printf_i+0x1ac>
 8018498:	4615      	mov	r5, r2
 801849a:	fbb6 f1f3 	udiv	r1, r6, r3
 801849e:	fb03 6711 	mls	r7, r3, r1, r6
 80184a2:	5dc7      	ldrb	r7, [r0, r7]
 80184a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80184a8:	4637      	mov	r7, r6
 80184aa:	42bb      	cmp	r3, r7
 80184ac:	460e      	mov	r6, r1
 80184ae:	d9f4      	bls.n	801849a <_printf_i+0x116>
 80184b0:	2b08      	cmp	r3, #8
 80184b2:	d10b      	bne.n	80184cc <_printf_i+0x148>
 80184b4:	6823      	ldr	r3, [r4, #0]
 80184b6:	07de      	lsls	r6, r3, #31
 80184b8:	d508      	bpl.n	80184cc <_printf_i+0x148>
 80184ba:	6923      	ldr	r3, [r4, #16]
 80184bc:	6861      	ldr	r1, [r4, #4]
 80184be:	4299      	cmp	r1, r3
 80184c0:	bfde      	ittt	le
 80184c2:	2330      	movle	r3, #48	; 0x30
 80184c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80184c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80184cc:	1b52      	subs	r2, r2, r5
 80184ce:	6122      	str	r2, [r4, #16]
 80184d0:	f8cd a000 	str.w	sl, [sp]
 80184d4:	464b      	mov	r3, r9
 80184d6:	aa03      	add	r2, sp, #12
 80184d8:	4621      	mov	r1, r4
 80184da:	4640      	mov	r0, r8
 80184dc:	f7ff fee4 	bl	80182a8 <_printf_common>
 80184e0:	3001      	adds	r0, #1
 80184e2:	d14a      	bne.n	801857a <_printf_i+0x1f6>
 80184e4:	f04f 30ff 	mov.w	r0, #4294967295
 80184e8:	b004      	add	sp, #16
 80184ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184ee:	6823      	ldr	r3, [r4, #0]
 80184f0:	f043 0320 	orr.w	r3, r3, #32
 80184f4:	6023      	str	r3, [r4, #0]
 80184f6:	4833      	ldr	r0, [pc, #204]	; (80185c4 <_printf_i+0x240>)
 80184f8:	2778      	movs	r7, #120	; 0x78
 80184fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80184fe:	6823      	ldr	r3, [r4, #0]
 8018500:	6829      	ldr	r1, [r5, #0]
 8018502:	061f      	lsls	r7, r3, #24
 8018504:	f851 6b04 	ldr.w	r6, [r1], #4
 8018508:	d402      	bmi.n	8018510 <_printf_i+0x18c>
 801850a:	065f      	lsls	r7, r3, #25
 801850c:	bf48      	it	mi
 801850e:	b2b6      	uxthmi	r6, r6
 8018510:	07df      	lsls	r7, r3, #31
 8018512:	bf48      	it	mi
 8018514:	f043 0320 	orrmi.w	r3, r3, #32
 8018518:	6029      	str	r1, [r5, #0]
 801851a:	bf48      	it	mi
 801851c:	6023      	strmi	r3, [r4, #0]
 801851e:	b91e      	cbnz	r6, 8018528 <_printf_i+0x1a4>
 8018520:	6823      	ldr	r3, [r4, #0]
 8018522:	f023 0320 	bic.w	r3, r3, #32
 8018526:	6023      	str	r3, [r4, #0]
 8018528:	2310      	movs	r3, #16
 801852a:	e7a7      	b.n	801847c <_printf_i+0xf8>
 801852c:	4824      	ldr	r0, [pc, #144]	; (80185c0 <_printf_i+0x23c>)
 801852e:	e7e4      	b.n	80184fa <_printf_i+0x176>
 8018530:	4615      	mov	r5, r2
 8018532:	e7bd      	b.n	80184b0 <_printf_i+0x12c>
 8018534:	682b      	ldr	r3, [r5, #0]
 8018536:	6826      	ldr	r6, [r4, #0]
 8018538:	6961      	ldr	r1, [r4, #20]
 801853a:	1d18      	adds	r0, r3, #4
 801853c:	6028      	str	r0, [r5, #0]
 801853e:	0635      	lsls	r5, r6, #24
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	d501      	bpl.n	8018548 <_printf_i+0x1c4>
 8018544:	6019      	str	r1, [r3, #0]
 8018546:	e002      	b.n	801854e <_printf_i+0x1ca>
 8018548:	0670      	lsls	r0, r6, #25
 801854a:	d5fb      	bpl.n	8018544 <_printf_i+0x1c0>
 801854c:	8019      	strh	r1, [r3, #0]
 801854e:	2300      	movs	r3, #0
 8018550:	6123      	str	r3, [r4, #16]
 8018552:	4615      	mov	r5, r2
 8018554:	e7bc      	b.n	80184d0 <_printf_i+0x14c>
 8018556:	682b      	ldr	r3, [r5, #0]
 8018558:	1d1a      	adds	r2, r3, #4
 801855a:	602a      	str	r2, [r5, #0]
 801855c:	681d      	ldr	r5, [r3, #0]
 801855e:	6862      	ldr	r2, [r4, #4]
 8018560:	2100      	movs	r1, #0
 8018562:	4628      	mov	r0, r5
 8018564:	f7e7 fe6c 	bl	8000240 <memchr>
 8018568:	b108      	cbz	r0, 801856e <_printf_i+0x1ea>
 801856a:	1b40      	subs	r0, r0, r5
 801856c:	6060      	str	r0, [r4, #4]
 801856e:	6863      	ldr	r3, [r4, #4]
 8018570:	6123      	str	r3, [r4, #16]
 8018572:	2300      	movs	r3, #0
 8018574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018578:	e7aa      	b.n	80184d0 <_printf_i+0x14c>
 801857a:	6923      	ldr	r3, [r4, #16]
 801857c:	462a      	mov	r2, r5
 801857e:	4649      	mov	r1, r9
 8018580:	4640      	mov	r0, r8
 8018582:	47d0      	blx	sl
 8018584:	3001      	adds	r0, #1
 8018586:	d0ad      	beq.n	80184e4 <_printf_i+0x160>
 8018588:	6823      	ldr	r3, [r4, #0]
 801858a:	079b      	lsls	r3, r3, #30
 801858c:	d413      	bmi.n	80185b6 <_printf_i+0x232>
 801858e:	68e0      	ldr	r0, [r4, #12]
 8018590:	9b03      	ldr	r3, [sp, #12]
 8018592:	4298      	cmp	r0, r3
 8018594:	bfb8      	it	lt
 8018596:	4618      	movlt	r0, r3
 8018598:	e7a6      	b.n	80184e8 <_printf_i+0x164>
 801859a:	2301      	movs	r3, #1
 801859c:	4632      	mov	r2, r6
 801859e:	4649      	mov	r1, r9
 80185a0:	4640      	mov	r0, r8
 80185a2:	47d0      	blx	sl
 80185a4:	3001      	adds	r0, #1
 80185a6:	d09d      	beq.n	80184e4 <_printf_i+0x160>
 80185a8:	3501      	adds	r5, #1
 80185aa:	68e3      	ldr	r3, [r4, #12]
 80185ac:	9903      	ldr	r1, [sp, #12]
 80185ae:	1a5b      	subs	r3, r3, r1
 80185b0:	42ab      	cmp	r3, r5
 80185b2:	dcf2      	bgt.n	801859a <_printf_i+0x216>
 80185b4:	e7eb      	b.n	801858e <_printf_i+0x20a>
 80185b6:	2500      	movs	r5, #0
 80185b8:	f104 0619 	add.w	r6, r4, #25
 80185bc:	e7f5      	b.n	80185aa <_printf_i+0x226>
 80185be:	bf00      	nop
 80185c0:	0801b8c3 	.word	0x0801b8c3
 80185c4:	0801b8d4 	.word	0x0801b8d4

080185c8 <__sflush_r>:
 80185c8:	898a      	ldrh	r2, [r1, #12]
 80185ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185ce:	4605      	mov	r5, r0
 80185d0:	0710      	lsls	r0, r2, #28
 80185d2:	460c      	mov	r4, r1
 80185d4:	d458      	bmi.n	8018688 <__sflush_r+0xc0>
 80185d6:	684b      	ldr	r3, [r1, #4]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	dc05      	bgt.n	80185e8 <__sflush_r+0x20>
 80185dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80185de:	2b00      	cmp	r3, #0
 80185e0:	dc02      	bgt.n	80185e8 <__sflush_r+0x20>
 80185e2:	2000      	movs	r0, #0
 80185e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80185ea:	2e00      	cmp	r6, #0
 80185ec:	d0f9      	beq.n	80185e2 <__sflush_r+0x1a>
 80185ee:	2300      	movs	r3, #0
 80185f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80185f4:	682f      	ldr	r7, [r5, #0]
 80185f6:	6a21      	ldr	r1, [r4, #32]
 80185f8:	602b      	str	r3, [r5, #0]
 80185fa:	d032      	beq.n	8018662 <__sflush_r+0x9a>
 80185fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80185fe:	89a3      	ldrh	r3, [r4, #12]
 8018600:	075a      	lsls	r2, r3, #29
 8018602:	d505      	bpl.n	8018610 <__sflush_r+0x48>
 8018604:	6863      	ldr	r3, [r4, #4]
 8018606:	1ac0      	subs	r0, r0, r3
 8018608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801860a:	b10b      	cbz	r3, 8018610 <__sflush_r+0x48>
 801860c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801860e:	1ac0      	subs	r0, r0, r3
 8018610:	2300      	movs	r3, #0
 8018612:	4602      	mov	r2, r0
 8018614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018616:	6a21      	ldr	r1, [r4, #32]
 8018618:	4628      	mov	r0, r5
 801861a:	47b0      	blx	r6
 801861c:	1c43      	adds	r3, r0, #1
 801861e:	89a3      	ldrh	r3, [r4, #12]
 8018620:	d106      	bne.n	8018630 <__sflush_r+0x68>
 8018622:	6829      	ldr	r1, [r5, #0]
 8018624:	291d      	cmp	r1, #29
 8018626:	d82b      	bhi.n	8018680 <__sflush_r+0xb8>
 8018628:	4a29      	ldr	r2, [pc, #164]	; (80186d0 <__sflush_r+0x108>)
 801862a:	410a      	asrs	r2, r1
 801862c:	07d6      	lsls	r6, r2, #31
 801862e:	d427      	bmi.n	8018680 <__sflush_r+0xb8>
 8018630:	2200      	movs	r2, #0
 8018632:	6062      	str	r2, [r4, #4]
 8018634:	04d9      	lsls	r1, r3, #19
 8018636:	6922      	ldr	r2, [r4, #16]
 8018638:	6022      	str	r2, [r4, #0]
 801863a:	d504      	bpl.n	8018646 <__sflush_r+0x7e>
 801863c:	1c42      	adds	r2, r0, #1
 801863e:	d101      	bne.n	8018644 <__sflush_r+0x7c>
 8018640:	682b      	ldr	r3, [r5, #0]
 8018642:	b903      	cbnz	r3, 8018646 <__sflush_r+0x7e>
 8018644:	6560      	str	r0, [r4, #84]	; 0x54
 8018646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018648:	602f      	str	r7, [r5, #0]
 801864a:	2900      	cmp	r1, #0
 801864c:	d0c9      	beq.n	80185e2 <__sflush_r+0x1a>
 801864e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018652:	4299      	cmp	r1, r3
 8018654:	d002      	beq.n	801865c <__sflush_r+0x94>
 8018656:	4628      	mov	r0, r5
 8018658:	f7ff fa8a 	bl	8017b70 <_free_r>
 801865c:	2000      	movs	r0, #0
 801865e:	6360      	str	r0, [r4, #52]	; 0x34
 8018660:	e7c0      	b.n	80185e4 <__sflush_r+0x1c>
 8018662:	2301      	movs	r3, #1
 8018664:	4628      	mov	r0, r5
 8018666:	47b0      	blx	r6
 8018668:	1c41      	adds	r1, r0, #1
 801866a:	d1c8      	bne.n	80185fe <__sflush_r+0x36>
 801866c:	682b      	ldr	r3, [r5, #0]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d0c5      	beq.n	80185fe <__sflush_r+0x36>
 8018672:	2b1d      	cmp	r3, #29
 8018674:	d001      	beq.n	801867a <__sflush_r+0xb2>
 8018676:	2b16      	cmp	r3, #22
 8018678:	d101      	bne.n	801867e <__sflush_r+0xb6>
 801867a:	602f      	str	r7, [r5, #0]
 801867c:	e7b1      	b.n	80185e2 <__sflush_r+0x1a>
 801867e:	89a3      	ldrh	r3, [r4, #12]
 8018680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018684:	81a3      	strh	r3, [r4, #12]
 8018686:	e7ad      	b.n	80185e4 <__sflush_r+0x1c>
 8018688:	690f      	ldr	r7, [r1, #16]
 801868a:	2f00      	cmp	r7, #0
 801868c:	d0a9      	beq.n	80185e2 <__sflush_r+0x1a>
 801868e:	0793      	lsls	r3, r2, #30
 8018690:	680e      	ldr	r6, [r1, #0]
 8018692:	bf08      	it	eq
 8018694:	694b      	ldreq	r3, [r1, #20]
 8018696:	600f      	str	r7, [r1, #0]
 8018698:	bf18      	it	ne
 801869a:	2300      	movne	r3, #0
 801869c:	eba6 0807 	sub.w	r8, r6, r7
 80186a0:	608b      	str	r3, [r1, #8]
 80186a2:	f1b8 0f00 	cmp.w	r8, #0
 80186a6:	dd9c      	ble.n	80185e2 <__sflush_r+0x1a>
 80186a8:	6a21      	ldr	r1, [r4, #32]
 80186aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80186ac:	4643      	mov	r3, r8
 80186ae:	463a      	mov	r2, r7
 80186b0:	4628      	mov	r0, r5
 80186b2:	47b0      	blx	r6
 80186b4:	2800      	cmp	r0, #0
 80186b6:	dc06      	bgt.n	80186c6 <__sflush_r+0xfe>
 80186b8:	89a3      	ldrh	r3, [r4, #12]
 80186ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186be:	81a3      	strh	r3, [r4, #12]
 80186c0:	f04f 30ff 	mov.w	r0, #4294967295
 80186c4:	e78e      	b.n	80185e4 <__sflush_r+0x1c>
 80186c6:	4407      	add	r7, r0
 80186c8:	eba8 0800 	sub.w	r8, r8, r0
 80186cc:	e7e9      	b.n	80186a2 <__sflush_r+0xda>
 80186ce:	bf00      	nop
 80186d0:	dfbffffe 	.word	0xdfbffffe

080186d4 <_fflush_r>:
 80186d4:	b538      	push	{r3, r4, r5, lr}
 80186d6:	690b      	ldr	r3, [r1, #16]
 80186d8:	4605      	mov	r5, r0
 80186da:	460c      	mov	r4, r1
 80186dc:	b913      	cbnz	r3, 80186e4 <_fflush_r+0x10>
 80186de:	2500      	movs	r5, #0
 80186e0:	4628      	mov	r0, r5
 80186e2:	bd38      	pop	{r3, r4, r5, pc}
 80186e4:	b118      	cbz	r0, 80186ee <_fflush_r+0x1a>
 80186e6:	6a03      	ldr	r3, [r0, #32]
 80186e8:	b90b      	cbnz	r3, 80186ee <_fflush_r+0x1a>
 80186ea:	f7fe ff9f 	bl	801762c <__sinit>
 80186ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d0f3      	beq.n	80186de <_fflush_r+0xa>
 80186f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80186f8:	07d0      	lsls	r0, r2, #31
 80186fa:	d404      	bmi.n	8018706 <_fflush_r+0x32>
 80186fc:	0599      	lsls	r1, r3, #22
 80186fe:	d402      	bmi.n	8018706 <_fflush_r+0x32>
 8018700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018702:	f7ff fa06 	bl	8017b12 <__retarget_lock_acquire_recursive>
 8018706:	4628      	mov	r0, r5
 8018708:	4621      	mov	r1, r4
 801870a:	f7ff ff5d 	bl	80185c8 <__sflush_r>
 801870e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018710:	07da      	lsls	r2, r3, #31
 8018712:	4605      	mov	r5, r0
 8018714:	d4e4      	bmi.n	80186e0 <_fflush_r+0xc>
 8018716:	89a3      	ldrh	r3, [r4, #12]
 8018718:	059b      	lsls	r3, r3, #22
 801871a:	d4e1      	bmi.n	80186e0 <_fflush_r+0xc>
 801871c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801871e:	f7ff f9f9 	bl	8017b14 <__retarget_lock_release_recursive>
 8018722:	e7dd      	b.n	80186e0 <_fflush_r+0xc>

08018724 <fiprintf>:
 8018724:	b40e      	push	{r1, r2, r3}
 8018726:	b503      	push	{r0, r1, lr}
 8018728:	4601      	mov	r1, r0
 801872a:	ab03      	add	r3, sp, #12
 801872c:	4805      	ldr	r0, [pc, #20]	; (8018744 <fiprintf+0x20>)
 801872e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018732:	6800      	ldr	r0, [r0, #0]
 8018734:	9301      	str	r3, [sp, #4]
 8018736:	f7ff fc9d 	bl	8018074 <_vfiprintf_r>
 801873a:	b002      	add	sp, #8
 801873c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018740:	b003      	add	sp, #12
 8018742:	4770      	bx	lr
 8018744:	20000084 	.word	0x20000084

08018748 <__swhatbuf_r>:
 8018748:	b570      	push	{r4, r5, r6, lr}
 801874a:	460c      	mov	r4, r1
 801874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018750:	2900      	cmp	r1, #0
 8018752:	b096      	sub	sp, #88	; 0x58
 8018754:	4615      	mov	r5, r2
 8018756:	461e      	mov	r6, r3
 8018758:	da0d      	bge.n	8018776 <__swhatbuf_r+0x2e>
 801875a:	89a3      	ldrh	r3, [r4, #12]
 801875c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018760:	f04f 0100 	mov.w	r1, #0
 8018764:	bf0c      	ite	eq
 8018766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801876a:	2340      	movne	r3, #64	; 0x40
 801876c:	2000      	movs	r0, #0
 801876e:	6031      	str	r1, [r6, #0]
 8018770:	602b      	str	r3, [r5, #0]
 8018772:	b016      	add	sp, #88	; 0x58
 8018774:	bd70      	pop	{r4, r5, r6, pc}
 8018776:	466a      	mov	r2, sp
 8018778:	f000 f848 	bl	801880c <_fstat_r>
 801877c:	2800      	cmp	r0, #0
 801877e:	dbec      	blt.n	801875a <__swhatbuf_r+0x12>
 8018780:	9901      	ldr	r1, [sp, #4]
 8018782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801878a:	4259      	negs	r1, r3
 801878c:	4159      	adcs	r1, r3
 801878e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018792:	e7eb      	b.n	801876c <__swhatbuf_r+0x24>

08018794 <__smakebuf_r>:
 8018794:	898b      	ldrh	r3, [r1, #12]
 8018796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018798:	079d      	lsls	r5, r3, #30
 801879a:	4606      	mov	r6, r0
 801879c:	460c      	mov	r4, r1
 801879e:	d507      	bpl.n	80187b0 <__smakebuf_r+0x1c>
 80187a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80187a4:	6023      	str	r3, [r4, #0]
 80187a6:	6123      	str	r3, [r4, #16]
 80187a8:	2301      	movs	r3, #1
 80187aa:	6163      	str	r3, [r4, #20]
 80187ac:	b002      	add	sp, #8
 80187ae:	bd70      	pop	{r4, r5, r6, pc}
 80187b0:	ab01      	add	r3, sp, #4
 80187b2:	466a      	mov	r2, sp
 80187b4:	f7ff ffc8 	bl	8018748 <__swhatbuf_r>
 80187b8:	9900      	ldr	r1, [sp, #0]
 80187ba:	4605      	mov	r5, r0
 80187bc:	4630      	mov	r0, r6
 80187be:	f7ff fa4b 	bl	8017c58 <_malloc_r>
 80187c2:	b948      	cbnz	r0, 80187d8 <__smakebuf_r+0x44>
 80187c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187c8:	059a      	lsls	r2, r3, #22
 80187ca:	d4ef      	bmi.n	80187ac <__smakebuf_r+0x18>
 80187cc:	f023 0303 	bic.w	r3, r3, #3
 80187d0:	f043 0302 	orr.w	r3, r3, #2
 80187d4:	81a3      	strh	r3, [r4, #12]
 80187d6:	e7e3      	b.n	80187a0 <__smakebuf_r+0xc>
 80187d8:	89a3      	ldrh	r3, [r4, #12]
 80187da:	6020      	str	r0, [r4, #0]
 80187dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187e0:	81a3      	strh	r3, [r4, #12]
 80187e2:	9b00      	ldr	r3, [sp, #0]
 80187e4:	6163      	str	r3, [r4, #20]
 80187e6:	9b01      	ldr	r3, [sp, #4]
 80187e8:	6120      	str	r0, [r4, #16]
 80187ea:	b15b      	cbz	r3, 8018804 <__smakebuf_r+0x70>
 80187ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80187f0:	4630      	mov	r0, r6
 80187f2:	f000 f81d 	bl	8018830 <_isatty_r>
 80187f6:	b128      	cbz	r0, 8018804 <__smakebuf_r+0x70>
 80187f8:	89a3      	ldrh	r3, [r4, #12]
 80187fa:	f023 0303 	bic.w	r3, r3, #3
 80187fe:	f043 0301 	orr.w	r3, r3, #1
 8018802:	81a3      	strh	r3, [r4, #12]
 8018804:	89a3      	ldrh	r3, [r4, #12]
 8018806:	431d      	orrs	r5, r3
 8018808:	81a5      	strh	r5, [r4, #12]
 801880a:	e7cf      	b.n	80187ac <__smakebuf_r+0x18>

0801880c <_fstat_r>:
 801880c:	b538      	push	{r3, r4, r5, lr}
 801880e:	4d07      	ldr	r5, [pc, #28]	; (801882c <_fstat_r+0x20>)
 8018810:	2300      	movs	r3, #0
 8018812:	4604      	mov	r4, r0
 8018814:	4608      	mov	r0, r1
 8018816:	4611      	mov	r1, r2
 8018818:	602b      	str	r3, [r5, #0]
 801881a:	f7e9 fa40 	bl	8001c9e <_fstat>
 801881e:	1c43      	adds	r3, r0, #1
 8018820:	d102      	bne.n	8018828 <_fstat_r+0x1c>
 8018822:	682b      	ldr	r3, [r5, #0]
 8018824:	b103      	cbz	r3, 8018828 <_fstat_r+0x1c>
 8018826:	6023      	str	r3, [r4, #0]
 8018828:	bd38      	pop	{r3, r4, r5, pc}
 801882a:	bf00      	nop
 801882c:	20008d64 	.word	0x20008d64

08018830 <_isatty_r>:
 8018830:	b538      	push	{r3, r4, r5, lr}
 8018832:	4d06      	ldr	r5, [pc, #24]	; (801884c <_isatty_r+0x1c>)
 8018834:	2300      	movs	r3, #0
 8018836:	4604      	mov	r4, r0
 8018838:	4608      	mov	r0, r1
 801883a:	602b      	str	r3, [r5, #0]
 801883c:	f7e9 fa3f 	bl	8001cbe <_isatty>
 8018840:	1c43      	adds	r3, r0, #1
 8018842:	d102      	bne.n	801884a <_isatty_r+0x1a>
 8018844:	682b      	ldr	r3, [r5, #0]
 8018846:	b103      	cbz	r3, 801884a <_isatty_r+0x1a>
 8018848:	6023      	str	r3, [r4, #0]
 801884a:	bd38      	pop	{r3, r4, r5, pc}
 801884c:	20008d64 	.word	0x20008d64

08018850 <_sbrk_r>:
 8018850:	b538      	push	{r3, r4, r5, lr}
 8018852:	4d06      	ldr	r5, [pc, #24]	; (801886c <_sbrk_r+0x1c>)
 8018854:	2300      	movs	r3, #0
 8018856:	4604      	mov	r4, r0
 8018858:	4608      	mov	r0, r1
 801885a:	602b      	str	r3, [r5, #0]
 801885c:	f7e9 fa48 	bl	8001cf0 <_sbrk>
 8018860:	1c43      	adds	r3, r0, #1
 8018862:	d102      	bne.n	801886a <_sbrk_r+0x1a>
 8018864:	682b      	ldr	r3, [r5, #0]
 8018866:	b103      	cbz	r3, 801886a <_sbrk_r+0x1a>
 8018868:	6023      	str	r3, [r4, #0]
 801886a:	bd38      	pop	{r3, r4, r5, pc}
 801886c:	20008d64 	.word	0x20008d64

08018870 <abort>:
 8018870:	b508      	push	{r3, lr}
 8018872:	2006      	movs	r0, #6
 8018874:	f000 f85a 	bl	801892c <raise>
 8018878:	2001      	movs	r0, #1
 801887a:	f7e9 f9c1 	bl	8001c00 <_exit>

0801887e <_realloc_r>:
 801887e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018882:	4680      	mov	r8, r0
 8018884:	4614      	mov	r4, r2
 8018886:	460e      	mov	r6, r1
 8018888:	b921      	cbnz	r1, 8018894 <_realloc_r+0x16>
 801888a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801888e:	4611      	mov	r1, r2
 8018890:	f7ff b9e2 	b.w	8017c58 <_malloc_r>
 8018894:	b92a      	cbnz	r2, 80188a2 <_realloc_r+0x24>
 8018896:	f7ff f96b 	bl	8017b70 <_free_r>
 801889a:	4625      	mov	r5, r4
 801889c:	4628      	mov	r0, r5
 801889e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188a2:	f000 f85f 	bl	8018964 <_malloc_usable_size_r>
 80188a6:	4284      	cmp	r4, r0
 80188a8:	4607      	mov	r7, r0
 80188aa:	d802      	bhi.n	80188b2 <_realloc_r+0x34>
 80188ac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80188b0:	d812      	bhi.n	80188d8 <_realloc_r+0x5a>
 80188b2:	4621      	mov	r1, r4
 80188b4:	4640      	mov	r0, r8
 80188b6:	f7ff f9cf 	bl	8017c58 <_malloc_r>
 80188ba:	4605      	mov	r5, r0
 80188bc:	2800      	cmp	r0, #0
 80188be:	d0ed      	beq.n	801889c <_realloc_r+0x1e>
 80188c0:	42bc      	cmp	r4, r7
 80188c2:	4622      	mov	r2, r4
 80188c4:	4631      	mov	r1, r6
 80188c6:	bf28      	it	cs
 80188c8:	463a      	movcs	r2, r7
 80188ca:	f7ff f924 	bl	8017b16 <memcpy>
 80188ce:	4631      	mov	r1, r6
 80188d0:	4640      	mov	r0, r8
 80188d2:	f7ff f94d 	bl	8017b70 <_free_r>
 80188d6:	e7e1      	b.n	801889c <_realloc_r+0x1e>
 80188d8:	4635      	mov	r5, r6
 80188da:	e7df      	b.n	801889c <_realloc_r+0x1e>

080188dc <_raise_r>:
 80188dc:	291f      	cmp	r1, #31
 80188de:	b538      	push	{r3, r4, r5, lr}
 80188e0:	4604      	mov	r4, r0
 80188e2:	460d      	mov	r5, r1
 80188e4:	d904      	bls.n	80188f0 <_raise_r+0x14>
 80188e6:	2316      	movs	r3, #22
 80188e8:	6003      	str	r3, [r0, #0]
 80188ea:	f04f 30ff 	mov.w	r0, #4294967295
 80188ee:	bd38      	pop	{r3, r4, r5, pc}
 80188f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80188f2:	b112      	cbz	r2, 80188fa <_raise_r+0x1e>
 80188f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80188f8:	b94b      	cbnz	r3, 801890e <_raise_r+0x32>
 80188fa:	4620      	mov	r0, r4
 80188fc:	f000 f830 	bl	8018960 <_getpid_r>
 8018900:	462a      	mov	r2, r5
 8018902:	4601      	mov	r1, r0
 8018904:	4620      	mov	r0, r4
 8018906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801890a:	f000 b817 	b.w	801893c <_kill_r>
 801890e:	2b01      	cmp	r3, #1
 8018910:	d00a      	beq.n	8018928 <_raise_r+0x4c>
 8018912:	1c59      	adds	r1, r3, #1
 8018914:	d103      	bne.n	801891e <_raise_r+0x42>
 8018916:	2316      	movs	r3, #22
 8018918:	6003      	str	r3, [r0, #0]
 801891a:	2001      	movs	r0, #1
 801891c:	e7e7      	b.n	80188ee <_raise_r+0x12>
 801891e:	2400      	movs	r4, #0
 8018920:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018924:	4628      	mov	r0, r5
 8018926:	4798      	blx	r3
 8018928:	2000      	movs	r0, #0
 801892a:	e7e0      	b.n	80188ee <_raise_r+0x12>

0801892c <raise>:
 801892c:	4b02      	ldr	r3, [pc, #8]	; (8018938 <raise+0xc>)
 801892e:	4601      	mov	r1, r0
 8018930:	6818      	ldr	r0, [r3, #0]
 8018932:	f7ff bfd3 	b.w	80188dc <_raise_r>
 8018936:	bf00      	nop
 8018938:	20000084 	.word	0x20000084

0801893c <_kill_r>:
 801893c:	b538      	push	{r3, r4, r5, lr}
 801893e:	4d07      	ldr	r5, [pc, #28]	; (801895c <_kill_r+0x20>)
 8018940:	2300      	movs	r3, #0
 8018942:	4604      	mov	r4, r0
 8018944:	4608      	mov	r0, r1
 8018946:	4611      	mov	r1, r2
 8018948:	602b      	str	r3, [r5, #0]
 801894a:	f7e9 f947 	bl	8001bdc <_kill>
 801894e:	1c43      	adds	r3, r0, #1
 8018950:	d102      	bne.n	8018958 <_kill_r+0x1c>
 8018952:	682b      	ldr	r3, [r5, #0]
 8018954:	b103      	cbz	r3, 8018958 <_kill_r+0x1c>
 8018956:	6023      	str	r3, [r4, #0]
 8018958:	bd38      	pop	{r3, r4, r5, pc}
 801895a:	bf00      	nop
 801895c:	20008d64 	.word	0x20008d64

08018960 <_getpid_r>:
 8018960:	f7e9 b934 	b.w	8001bcc <_getpid>

08018964 <_malloc_usable_size_r>:
 8018964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018968:	1f18      	subs	r0, r3, #4
 801896a:	2b00      	cmp	r3, #0
 801896c:	bfbc      	itt	lt
 801896e:	580b      	ldrlt	r3, [r1, r0]
 8018970:	18c0      	addlt	r0, r0, r3
 8018972:	4770      	bx	lr

08018974 <_init>:
 8018974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018976:	bf00      	nop
 8018978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801897a:	bc08      	pop	{r3}
 801897c:	469e      	mov	lr, r3
 801897e:	4770      	bx	lr

08018980 <_fini>:
 8018980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018982:	bf00      	nop
 8018984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018986:	bc08      	pop	{r3}
 8018988:	469e      	mov	lr, r3
 801898a:	4770      	bx	lr
