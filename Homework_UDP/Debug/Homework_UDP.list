
Homework_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  080100d8  080100d8  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c9c  08012c9c  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012c9c  08012c9c  00022c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ca4  08012ca4  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ca4  08012ca4  00022ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ca8  08012ca8  00022ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012cac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08012d34  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012dd4  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088ac  200001c8  08012e74  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008a74  08012e74  00038a74  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 15 .debug_info   00021906  00000000  00000000  0003023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000058c3  00000000  00000000  00051b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017e8  00000000  00000000  00057408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001305  00000000  00000000  00058bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003288f  00000000  00000000  00059ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00029582  00000000  00000000  0008c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101c3c  00000000  00000000  000b5d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006a54  00000000  00000000  001b7944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  001be398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080100c0 	.word	0x080100c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	080100c0 	.word	0x080100c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fd20 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f80e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8d2 	bl	8000760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 f872 	bl	80006a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c0:	f000 f8a0 	bl	8000704 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005c4:	f004 fbae 	bl	8004d24 <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif); // if there is a packet pay attentio
 80005c8:	4801      	ldr	r0, [pc, #4]	; (80005d0 <main+0x24>)
 80005ca:	f004 fe47 	bl	800525c <ethernetif_input>
 80005ce:	e7fb      	b.n	80005c8 <main+0x1c>
 80005d0:	2000077c 	.word	0x2000077c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f00e fec1 	bl	800f36a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f8:	f002 fb84 	bl	8002d04 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a26      	ldr	r2, [pc, #152]	; (800069c <SystemClock_Config+0xc8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <SystemClock_Config+0xcc>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000648:	2348      	movs	r3, #72	; 0x48
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000650:	2303      	movs	r3, #3
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fb63 	bl	8002d24 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f91e 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2102      	movs	r1, #2
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fdf1 	bl	800326c <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000690:	f000 f908 	bl	80008a4 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_USART3_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART3_UART_Init+0x58>)
 80006e8:	f003 fbd6 	bl	8003e98 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f8d7 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200001e4 	.word	0x200001e4
 8000700:	40004800 	.word	0x40004800

08000704 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800070e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2206      	movs	r2, #6
 8000714:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2202      	movs	r2, #2
 800071a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2202      	movs	r2, #2
 8000726:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2201      	movs	r2, #1
 800072c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2201      	movs	r2, #1
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	f002 f993 	bl	8002a72 <HAL_PCD_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f8a7 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000026c 	.word	0x2000026c

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <MX_GPIO_Init+0x134>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a46      	ldr	r2, [pc, #280]	; (8000894 <MX_GPIO_Init+0x134>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b44      	ldr	r3, [pc, #272]	; (8000894 <MX_GPIO_Init+0x134>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <MX_GPIO_Init+0x134>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a40      	ldr	r2, [pc, #256]	; (8000894 <MX_GPIO_Init+0x134>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <MX_GPIO_Init+0x134>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_GPIO_Init+0x134>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a3a      	ldr	r2, [pc, #232]	; (8000894 <MX_GPIO_Init+0x134>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b38      	ldr	r3, [pc, #224]	; (8000894 <MX_GPIO_Init+0x134>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <MX_GPIO_Init+0x134>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a34      	ldr	r2, [pc, #208]	; (8000894 <MX_GPIO_Init+0x134>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <MX_GPIO_Init+0x134>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2e      	ldr	r2, [pc, #184]	; (8000894 <MX_GPIO_Init+0x134>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <MX_GPIO_Init+0x134>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f244 0181 	movw	r1, #16513	; 0x4081
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <MX_GPIO_Init+0x138>)
 800080e:	f002 f917 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4821      	ldr	r0, [pc, #132]	; (800089c <MX_GPIO_Init+0x13c>)
 8000818:	f002 f912 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0x140>)
 8000834:	f001 ff58 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000838:	f244 0381 	movw	r3, #16513	; 0x4081
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_GPIO_Init+0x138>)
 8000852:	f001 ff49 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0x13c>)
 800086e:	f001 ff3b 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0x13c>)
 8000886:	f001 ff2f 	bl	80026e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400
 800089c:	40021800 	.word	0x40021800
 80008a0:	40020800 	.word	0x40020800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0aa      	sub	sp, #168	; 0xa8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	2284      	movs	r2, #132	; 0x84
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f00e fd26 	bl	800f36a <memset>
  if(huart->Instance==USART3)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <HAL_UART_MspInit+0xb4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d13c      	bne.n	80009a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800092e:	2300      	movs	r3, #0
 8000930:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4618      	mov	r0, r3
 8000938:	f002 febe 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000942:	f7ff ffaf 	bl	80008a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0xb8>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0xb8>)
 800094c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0xb8>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0xb8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <HAL_UART_MspInit+0xb8>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0xb8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800097a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000990:	2307      	movs	r3, #7
 8000992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000996:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0xbc>)
 800099e:	f001 fea3 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	37a8      	adds	r7, #168	; 0xa8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40004800 	.word	0x40004800
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0ac      	sub	sp, #176	; 0xb0
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	2284      	movs	r2, #132	; 0x84
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f00e fcc6 	bl	800f36a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009e6:	d159      	bne.n	8000a9c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80009e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80009ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fe5d 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a04:	f7ff ff4e 	bl	80008a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a25      	ldr	r2, [pc, #148]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a20:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a44:	4619      	mov	r1, r3
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <HAL_PCD_MspInit+0xf0>)
 8000a48:	f001 fe4e 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a64:	4619      	mov	r1, r3
 8000a66:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <HAL_PCD_MspInit+0xf0>)
 8000a68:	f001 fe3e 	bl	80026e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a76:	6353      	str	r3, [r2, #52]	; 0x34
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_PCD_MspInit+0xec>)
 8000a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	37b0      	adds	r7, #176	; 0xb0
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 faba 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <ETH_IRQHandler+0x10>)
 8000b06:	f000 ff09 	bl	800191c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20005154 	.word	0x20005154

08000b14 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <ETH_WKUP_IRQHandler+0x10>)
 8000b1a:	f000 feff 	bl	800191c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20005154 	.word	0x20005154

08000b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return 1;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_kill>:

int _kill(int pid, int sig)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <_kill+0x20>)
 8000b44:	2216      	movs	r2, #22
 8000b46:	601a      	str	r2, [r3, #0]
  return -1;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20008a64 	.word	0x20008a64

08000b5c <_exit>:

void _exit (int status)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ffe5 	bl	8000b38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b6e:	e7fe      	b.n	8000b6e <_exit+0x12>

08000b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
  }

  return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e009      	b.n	8000bd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf1      	blt.n	8000bbc <_write+0x12>
  }
  return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_close>:

int _close(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_isatty>:

int _isatty(int file)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d205      	bcs.n	8000c88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <_sbrk+0x6c>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	371c      	adds	r7, #28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	20050000 	.word	0x20050000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	20000774 	.word	0x20000774
 8000cb4:	20008a78 	.word	0x20008a78
 8000cb8:	20008a64 	.word	0x20008a64

08000cbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cfc:	4c0b      	ldr	r4, [pc, #44]	; (8000d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d0a:	f7ff ffd7 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f00e fb7b 	bl	800f408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fc4b 	bl	80005ac <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d24:	08012cac 	.word	0x08012cac
  ldr r2, =_sbss
 8000d28:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000d2c:	20008a74 	.word	0x20008a74

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>

08000d32 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00b      	beq.n	8000d5a <LAN8742_RegisterBusIO+0x28>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <LAN8742_RegisterBusIO+0x28>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <LAN8742_RegisterBusIO+0x28>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e014      	b.n	8000d8a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d17c      	bne.n	8000eb0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e01c      	b.n	8000e0a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	f107 0208 	add.w	r2, r7, #8
 8000dd8:	2112      	movs	r1, #18
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	4798      	blx	r3
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	da03      	bge.n	8000dec <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000de4:	f06f 0304 	mvn.w	r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000dea:	e00b      	b.n	8000e04 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d105      	bne.n	8000e04 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
         break;
 8000e02:	e005      	b.n	8000e10 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3301      	adds	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2b1f      	cmp	r3, #31
 8000e0e:	d9df      	bls.n	8000dd0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b1f      	cmp	r3, #31
 8000e16:	d902      	bls.n	8000e1e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e18:	f06f 0302 	mvn.w	r3, #2
 8000e1c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d145      	bne.n	8000eb0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e30:	2100      	movs	r1, #0
 8000e32:	4798      	blx	r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db37      	blt.n	8000eaa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6810      	ldr	r0, [r2, #0]
 8000e42:	f107 0208 	add.w	r2, r7, #8
 8000e46:	2100      	movs	r1, #0
 8000e48:	4798      	blx	r3
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db28      	blt.n	8000ea2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4798      	blx	r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e5a:	e01c      	b.n	8000e96 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4798      	blx	r3
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e6e:	d80e      	bhi.n	8000e8e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6810      	ldr	r0, [r2, #0]
 8000e78:	f107 0208 	add.w	r2, r7, #8
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4798      	blx	r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da07      	bge.n	8000e96 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e86:	f06f 0304 	mvn.w	r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
                 break;
 8000e8c:	e010      	b.n	8000eb0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e8e:	f06f 0301 	mvn.w	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
               break;
 8000e94:	e00c      	b.n	8000eb0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1dd      	bne.n	8000e5c <LAN8742_Init+0xc6>
 8000ea0:	e006      	b.n	8000eb0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000ea2:	f06f 0304 	mvn.w	r3, #4
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	e002      	b.n	8000eb0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000eaa:	f06f 0303 	mvn.w	r3, #3
 8000eae:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d112      	bne.n	8000edc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4798      	blx	r3
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ec0:	bf00      	nop
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4798      	blx	r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ed4:	d9f5      	bls.n	8000ec2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000edc:	693b      	ldr	r3, [r7, #16]
 }
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6810      	ldr	r0, [r2, #0]
 8000efa:	f107 020c 	add.w	r2, r7, #12
 8000efe:	2101      	movs	r1, #1
 8000f00:	4798      	blx	r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da02      	bge.n	8000f0e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f08:	f06f 0304 	mvn.w	r3, #4
 8000f0c:	e06e      	b.n	8000fec <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6810      	ldr	r0, [r2, #0]
 8000f16:	f107 020c 	add.w	r2, r7, #12
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4798      	blx	r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da02      	bge.n	8000f2a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f24:	f06f 0304 	mvn.w	r3, #4
 8000f28:	e060      	b.n	8000fec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000f34:	2301      	movs	r3, #1
 8000f36:	e059      	b.n	8000fec <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6810      	ldr	r0, [r2, #0]
 8000f40:	f107 020c 	add.w	r2, r7, #12
 8000f44:	2100      	movs	r1, #0
 8000f46:	4798      	blx	r3
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	da02      	bge.n	8000f54 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f4e:	f06f 0304 	mvn.w	r3, #4
 8000f52:	e04b      	b.n	8000fec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11b      	bne.n	8000f96 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <LAN8742_GetLinkState+0x90>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f72:	2302      	movs	r3, #2
 8000f74:	e03a      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e033      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e02c      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f92:	2305      	movs	r3, #5
 8000f94:	e02a      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6810      	ldr	r0, [r2, #0]
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	211f      	movs	r1, #31
 8000fa4:	4798      	blx	r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da02      	bge.n	8000fb2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000fac:	f06f 0304 	mvn.w	r3, #4
 8000fb0:	e01c      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	e015      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 031c 	and.w	r3, r3, #28
 8000fc6:	2b18      	cmp	r3, #24
 8000fc8:	d101      	bne.n	8000fce <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e00e      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f003 031c 	and.w	r3, r3, #28
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d101      	bne.n	8000fdc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e007      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 031c 	and.w	r3, r3, #28
 8000fe2:	2b14      	cmp	r3, #20
 8000fe4:	d101      	bne.n	8000fea <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e000      	b.n	8000fec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fea:	2305      	movs	r3, #5
    }				
  }
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f94d 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f806 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fc54 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f967 	bl	8001302 <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f92f 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	20000778 	.word	0x20000778

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000778 	.word	0x20000778

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	05fa0000 	.word	0x05fa0000

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <__NVIC_EnableIRQ+0x38>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff29 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff3e 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff31 	bl	800115c <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06a      	b.n	8001404 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2223      	movs	r2, #35	; 0x23
 800133c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f003 fffb 	bl	800533c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_ETH_Init+0xf0>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a30      	ldr	r2, [pc, #192]	; (800140c <HAL_ETH_Init+0xf0>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_ETH_Init+0xf0>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_ETH_Init+0xf4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <HAL_ETH_Init+0xf4>)
 8001364:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001368:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_ETH_Init+0xf4>)
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_ETH_Init+0xf4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <HAL_ETH_Init+0xf4>)
 800137a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001392:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001394:	f7ff fe80 	bl	8001098 <HAL_GetTick>
 8001398:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800139a:	e011      	b.n	80013c0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800139c:	f7ff fe7c 	bl	8001098 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013aa:	d909      	bls.n	80013c0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2204      	movs	r2, #4
 80013b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	22e0      	movs	r2, #224	; 0xe0
 80013b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e021      	b.n	8001404 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1e4      	bne.n	800139c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fee4 	bl	80021a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 ff8b 	bl	80022f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 ffe1 	bl	80023a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	461a      	mov	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 ff49 	bl	8002284 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2210      	movs	r2, #16
 80013fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800

08001414 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001422:	2b10      	cmp	r3, #16
 8001424:	d150      	bne.n	80014c8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2223      	movs	r2, #35	; 0x23
 800142a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2204      	movs	r2, #4
 8001432:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f9fd 	bl	8001834 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0208 	orr.w	r2, r2, #8
 8001448:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fe2c 	bl	80010b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0204 	orr.w	r2, r2, #4
 800146e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff fe19 	bl	80010b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fd2a 	bl	8001ee0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800149e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ba:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2223      	movs	r2, #35	; 0x23
 80014c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014e0:	2b23      	cmp	r3, #35	; 0x23
 80014e2:	d14a      	bne.n	800157a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2223      	movs	r2, #35	; 0x23
 80014e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001502:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	f023 0302 	bic.w	r3, r3, #2
 8001516:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff fdbb 	bl	80010b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fccc 	bl	8001ee0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0208 	bic.w	r2, r2, #8
 8001556:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fda5 	bl	80010b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2210      	movs	r2, #16
 8001572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07c      	b.n	80016a4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b0:	2b23      	cmp	r3, #35	; 0x23
 80015b2:	d176      	bne.n	80016a2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80015b4:	2200      	movs	r2, #0
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 ff61 	bl	8002480 <ETH_Prepare_Tx_Descriptors>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	f043 0202 	orr.w	r2, r3, #2
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e065      	b.n	80016a4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015d8:	f3bf 8f4f 	dsb	sy
}
 80015dc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3206      	adds	r2, #6
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d904      	bls.n	8001608 <HAL_ETH_Transmit+0x84>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	1f1a      	subs	r2, r3, #4
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3106      	adds	r1, #6
 8001614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001618:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800161e:	f7ff fd3b 	bl	8001098 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001624:	e037      	b.n	8001696 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d011      	beq.n	800165c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	f043 0208 	orr.w	r2, r3, #8
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e023      	b.n	80016a4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d018      	beq.n	8001696 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001664:	f7ff fd18 	bl	8001098 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	d302      	bcc.n	800167a <HAL_ETH_Transmit+0xf6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10d      	bne.n	8001696 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001690:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e006      	b.n	80016a4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dbc3      	blt.n	8001626 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
  }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0a8      	b.n	800182a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016de:	2b23      	cmp	r3, #35	; 0x23
 80016e0:	d001      	beq.n	80016e6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0a1      	b.n	800182a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	3212      	adds	r2, #18
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016fc:	f1c3 0304 	rsb	r3, r3, #4
 8001700:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001702:	e06a      	b.n	80017da <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	699a      	ldr	r2, [r3, #24]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <HAL_ETH_ReadData+0x88>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d040      	beq.n	80017b6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001768:	3b04      	subs	r3, #4
 800176a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001790:	461a      	mov	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	b29b      	uxth	r3, r3
 8001796:	f003 ffa3 	bl	80056e0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	441a      	add	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d902      	bls.n	80017c8 <HAL_ETH_ReadData+0x11c>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b04      	subs	r3, #4
 80017c6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	3212      	adds	r2, #18
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db06      	blt.n	80017f0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d202      	bcs.n	80017f0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d089      	beq.n	8001704 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	441a      	add	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f815 	bl	8001834 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001840:	2301      	movs	r3, #1
 8001842:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001848:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	3212      	adds	r2, #18
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800185c:	e040      	b.n	80018e0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d112      	bne.n	800188c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4618      	mov	r0, r3
 800186c:	f003 ff08 	bl	8005680 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	74fb      	strb	r3, [r7, #19]
 800187a:	e007      	b.n	800188c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	461a      	mov	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	461a      	mov	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800188c:	7cfb      	ldrb	r3, [r7, #19]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d026      	beq.n	80018e0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <ETH_UpdateDescriptor+0xe4>)
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	e003      	b.n	80018aa <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80018a8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018aa:	f3bf 8f5f 	dmb	sy
}
 80018ae:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3301      	adds	r3, #1
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d902      	bls.n	80018ce <ETH_UpdateDescriptor+0x9a>
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	3b04      	subs	r3, #4
 80018cc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	3212      	adds	r2, #18
 80018d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d8:	617b      	str	r3, [r7, #20]
      desccount--;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	3b01      	subs	r3, #1
 80018de:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <ETH_UpdateDescriptor+0xb8>
 80018e6:	7cfb      	ldrb	r3, [r7, #19]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1b8      	bne.n	800185e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d00c      	beq.n	8001910 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fe:	461a      	mov	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	80004600 	.word	0x80004600

0800191c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001932:	2b40      	cmp	r3, #64	; 0x40
 8001934:	d112      	bne.n	800195c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b40      	cmp	r3, #64	; 0x40
 8001946:	d109      	bne.n	800195c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	461a      	mov	r2, r3
 8001952:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_ETH_IRQHandler+0x178>)
 8001954:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8ac 	bl	8001ab4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d113      	bne.n	8001996 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10a      	bne.n	8001996 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001988:	461a      	mov	r2, r3
 800198a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800198e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f885 	bl	8001aa0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019a8:	d14c      	bne.n	8001a44 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019bc:	d142      	bne.n	8001a44 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c4:	f043 0208 	orr.w	r2, r3, #8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e0:	d11a      	bne.n	8001a18 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_ETH_IRQHandler+0x17c>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001a08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a0c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	22e0      	movs	r2, #224	; 0xe0
 8001a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001a16:	e012      	b.n	8001a3e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	f248 6380 	movw	r3, #34432	; 0x8680
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a36:	461a      	mov	r2, r3
 8001a38:	f248 6380 	movw	r3, #34432	; 0x8680
 8001a3c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f842 	bl	8001ac8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d10e      	bne.n	8001a70 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f83a 	bl	8001adc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_ETH_IRQHandler+0x180>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_ETH_IRQHandler+0x180>)
 8001a7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a82:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f833 	bl	8001af0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	00010040 	.word	0x00010040
 8001a98:	007e2000 	.word	0x007e2000
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 031c 	and.w	r3, r3, #28
 8001b20:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	02db      	lsls	r3, r3, #11
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f023 0302 	bic.w	r3, r3, #2
 8001b42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001b54:	f7ff faa0 	bl	8001098 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b5a:	e00d      	b.n	8001b78 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b5c:	f7ff fa9c 	bl	8001098 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d301      	bcc.n	8001b70 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e010      	b.n	8001b92 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ec      	bne.n	8001b5c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 031c 	and.w	r3, r3, #28
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	02db      	lsls	r3, r3, #11
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	019b      	lsls	r3, r3, #6
 8001bc8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fa50 	bl	8001098 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bfa:	e00d      	b.n	8001c18 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001bfc:	f7ff fa4c 	bl	8001098 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d301      	bcc.n	8001c10 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e009      	b.n	8001c24 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ec      	bne.n	8001bfc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0d9      	b.n	8001df4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e00b      	b.n	8001e2c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d105      	bne.n	8001e2a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e1e:	6839      	ldr	r1, [r7, #0]
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f883 	bl	8001f2c <ETH_SetMACConfig>

    return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
  }
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 031c 	bic.w	r3, r3, #28
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e4c:	f001 fc00 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8001e50:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d908      	bls.n	8001e6c <HAL_ETH_SetMDIOClockRange+0x38>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d804      	bhi.n	8001e6c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e027      	b.n	8001ebc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d908      	bls.n	8001e86 <HAL_ETH_SetMDIOClockRange+0x52>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d204      	bcs.n	8001e86 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f043 030c 	orr.w	r3, r3, #12
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e01a      	b.n	8001ebc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d303      	bcc.n	8001e96 <HAL_ETH_SetMDIOClockRange+0x62>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d911      	bls.n	8001eba <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d908      	bls.n	8001eb0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d804      	bhi.n	8001eb0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e005      	b.n	8001ebc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e000      	b.n	8001ebc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001eba:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	01312cff 	.word	0x01312cff
 8001ed0:	02160ebf 	.word	0x02160ebf
 8001ed4:	03938700 	.word	0x03938700
 8001ed8:	05f5e0ff 	.word	0x05f5e0ff
 8001edc:	08f0d17f 	.word	0x08f0d17f

08001ee0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001efe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f02:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff f8cd 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f20:	6193      	str	r3, [r2, #24]
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4b51      	ldr	r3, [pc, #324]	; (8002088 <ETH_SetMACConfig+0x15c>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7c1b      	ldrb	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <ETH_SetMACConfig+0x28>
 8001f4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f52:	e000      	b.n	8001f56 <ETH_SetMACConfig+0x2a>
 8001f54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	7c5b      	ldrb	r3, [r3, #17]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <ETH_SetMACConfig+0x38>
 8001f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f62:	e000      	b.n	8001f66 <ETH_SetMACConfig+0x3a>
 8001f64:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7fdb      	ldrb	r3, [r3, #31]
 8001f72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	7f92      	ldrb	r2, [r2, #30]
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d102      	bne.n	8001f8a <ETH_SetMACConfig+0x5e>
 8001f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f88:	e000      	b.n	8001f8c <ETH_SetMACConfig+0x60>
 8001f8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	7f1b      	ldrb	r3, [r3, #28]
 8001f92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d102      	bne.n	8001fb4 <ETH_SetMACConfig+0x88>
 8001fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb2:	e000      	b.n	8001fb6 <ETH_SetMACConfig+0x8a>
 8001fb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	7bdb      	ldrb	r3, [r3, #15]
 8001fbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff f862 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002012:	2a00      	cmp	r2, #0
 8002014:	d101      	bne.n	800201a <ETH_SetMACConfig+0xee>
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0xf0>
 800201a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800201c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002022:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800202a:	2a01      	cmp	r2, #1
 800202c:	d101      	bne.n	8002032 <ETH_SetMACConfig+0x106>
 800202e:	2208      	movs	r2, #8
 8002030:	e000      	b.n	8002034 <ETH_SetMACConfig+0x108>
 8002032:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002034:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800203c:	2a01      	cmp	r2, #1
 800203e:	d101      	bne.n	8002044 <ETH_SetMACConfig+0x118>
 8002040:	2204      	movs	r2, #4
 8002042:	e000      	b.n	8002046 <ETH_SetMACConfig+0x11a>
 8002044:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800204e:	2a01      	cmp	r2, #1
 8002050:	d101      	bne.n	8002056 <ETH_SetMACConfig+0x12a>
 8002052:	2202      	movs	r2, #2
 8002054:	e000      	b.n	8002058 <ETH_SetMACConfig+0x12c>
 8002056:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002058:	4313      	orrs	r3, r2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff f81d 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	ff20810f 	.word	0xff20810f

0800208c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <ETH_SetDMAConfig+0x110>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	7b1b      	ldrb	r3, [r3, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <ETH_SetDMAConfig+0x2c>
 80020b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b6:	e000      	b.n	80020ba <ETH_SetDMAConfig+0x2e>
 80020b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7b5b      	ldrb	r3, [r3, #13]
 80020be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	7f52      	ldrb	r2, [r2, #29]
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d102      	bne.n	80020d0 <ETH_SetDMAConfig+0x44>
 80020ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ce:	e000      	b.n	80020d2 <ETH_SetDMAConfig+0x46>
 80020d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7b9b      	ldrb	r3, [r3, #14]
 80020d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7f1b      	ldrb	r3, [r3, #28]
 80020e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	7f9b      	ldrb	r3, [r3, #30]
 80020ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002100:	4313      	orrs	r3, r2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe ffc4 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	791b      	ldrb	r3, [r3, #4]
 800213a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002140:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002146:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800214c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002154:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002156:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800215e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002164:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800216e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002172:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002180:	2001      	movs	r0, #1
 8002182:	f7fe ff95 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	f8de3f23 	.word	0xf8de3f23

080021a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0a6      	sub	sp, #152	; 0x98
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021dc:	2300      	movs	r3, #0
 80021de:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002214:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fe86 	bl	8001f2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002220:	2301      	movs	r3, #1
 8002222:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002228:	2301      	movs	r3, #1
 800222a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800222e:	2301      	movs	r3, #1
 8002230:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002242:	2300      	movs	r3, #0
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800224c:	2301      	movs	r3, #1
 800224e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002254:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800225a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800225c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002260:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff08 	bl	800208c <ETH_SetDMAConfig>
}
 800227c:	bf00      	nop
 800227e:	3798      	adds	r7, #152	; 0x98
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3305      	adds	r3, #5
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	3204      	adds	r2, #4
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <ETH_MACAddressConfig+0x68>)
 80022a6:	4413      	add	r3, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3303      	adds	r3, #3
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	061a      	lsls	r2, r3, #24
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3302      	adds	r3, #2
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3301      	adds	r3, #1
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	4313      	orrs	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <ETH_MACAddressConfig+0x6c>)
 80022d6:	4413      	add	r3, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6013      	str	r3, [r2, #0]
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40028040 	.word	0x40028040
 80022f0:	40028044 	.word	0x40028044

080022f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e03e      	b.n	8002380 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68d9      	ldr	r1, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	3206      	adds	r2, #6
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d80c      	bhi.n	8002364 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	e004      	b.n	800236e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3301      	adds	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d9bd      	bls.n	8002302 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	611a      	str	r2, [r3, #16]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e046      	b.n	8002442 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6919      	ldr	r1, [r3, #16]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80023f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	3212      	adds	r2, #18
 800240e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d80c      	bhi.n	8002432 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6919      	ldr	r1, [r3, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	e004      	b.n	800243c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	461a      	mov	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3301      	adds	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d9b5      	bls.n	80023b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002472:	60da      	str	r2, [r3, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002480:	b480      	push	{r7}
 8002482:	b08d      	sub	sp, #52	; 0x34
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3318      	adds	r3, #24
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024aa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024c2:	d007      	beq.n	80024d4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	3304      	adds	r3, #4
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80024d4:	2302      	movs	r3, #2
 80024d6:	e0ff      	b.n	80026d8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	3301      	adds	r3, #1
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	6852      	ldr	r2, [r2, #4]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	431a      	orrs	r2, r3
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	431a      	orrs	r2, r3
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800255a:	f3bf 8f5f 	dmb	sy
}
 800255e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800256c:	e082      	b.n	8002674 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e005      	b.n	800259a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	3301      	adds	r3, #1
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d902      	bls.n	80025ac <ETH_Prepare_Tx_Descriptors+0x12c>
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	3b04      	subs	r3, #4
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ce:	d007      	beq.n	80025e0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	3304      	adds	r3, #4
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d029      	beq.n	8002634 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ec:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f2:	e019      	b.n	8002628 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80025f4:	f3bf 8f5f 	dmb	sy
}
 80025f8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	3301      	adds	r3, #1
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	2b03      	cmp	r3, #3
 8002610:	d902      	bls.n	8002618 <ETH_Prepare_Tx_Descriptors+0x198>
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	3b04      	subs	r3, #4
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	3301      	adds	r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
 8002628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	429a      	cmp	r2, r3
 800262e:	d3e1      	bcc.n	80025f4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002630:	2302      	movs	r3, #2
 8002632:	e051      	b.n	80026d8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	3301      	adds	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002650:	4013      	ands	r3, r2
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	6852      	ldr	r2, [r2, #4]
 8002656:	431a      	orrs	r2, r3
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	3301      	adds	r3, #1
 8002660:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002662:	f3bf 8f5f 	dmb	sy
}
 8002666:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f47f af78 	bne.w	800256e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e005      	b.n	800269e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ae:	6979      	ldr	r1, [r7, #20]
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	3304      	adds	r3, #4
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026be:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80026d2:	b662      	cpsie	i
}
 80026d4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3734      	adds	r7, #52	; 0x34
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	ffffe000 	.word	0xffffe000

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e175      	b.n	80029f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002708:	2201      	movs	r2, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	f040 8164 	bne.w	80029ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d005      	beq.n	800273e <HAL_GPIO_Init+0x56>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d130      	bne.n	80027a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 0201 	and.w	r2, r3, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d017      	beq.n	80027dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d123      	bne.n	8002830 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	08da      	lsrs	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3208      	adds	r2, #8
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80be 	beq.w	80029ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_GPIO_Init+0x324>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_GPIO_Init+0x324>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_GPIO_Init+0x324>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800288a:	4a61      	ldr	r2, [pc, #388]	; (8002a10 <HAL_GPIO_Init+0x328>)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_GPIO_Init+0x32c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d037      	beq.n	8002926 <HAL_GPIO_Init+0x23e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a57      	ldr	r2, [pc, #348]	; (8002a18 <HAL_GPIO_Init+0x330>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d031      	beq.n	8002922 <HAL_GPIO_Init+0x23a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a56      	ldr	r2, [pc, #344]	; (8002a1c <HAL_GPIO_Init+0x334>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d02b      	beq.n	800291e <HAL_GPIO_Init+0x236>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a55      	ldr	r2, [pc, #340]	; (8002a20 <HAL_GPIO_Init+0x338>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d025      	beq.n	800291a <HAL_GPIO_Init+0x232>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a54      	ldr	r2, [pc, #336]	; (8002a24 <HAL_GPIO_Init+0x33c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01f      	beq.n	8002916 <HAL_GPIO_Init+0x22e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a53      	ldr	r2, [pc, #332]	; (8002a28 <HAL_GPIO_Init+0x340>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d019      	beq.n	8002912 <HAL_GPIO_Init+0x22a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_GPIO_Init+0x344>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d013      	beq.n	800290e <HAL_GPIO_Init+0x226>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a51      	ldr	r2, [pc, #324]	; (8002a30 <HAL_GPIO_Init+0x348>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00d      	beq.n	800290a <HAL_GPIO_Init+0x222>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <HAL_GPIO_Init+0x34c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <HAL_GPIO_Init+0x21e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4f      	ldr	r2, [pc, #316]	; (8002a38 <HAL_GPIO_Init+0x350>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_GPIO_Init+0x21a>
 80028fe:	2309      	movs	r3, #9
 8002900:	e012      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002902:	230a      	movs	r3, #10
 8002904:	e010      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002906:	2308      	movs	r3, #8
 8002908:	e00e      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800290a:	2307      	movs	r3, #7
 800290c:	e00c      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800290e:	2306      	movs	r3, #6
 8002910:	e00a      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002912:	2305      	movs	r3, #5
 8002914:	e008      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002916:	2304      	movs	r3, #4
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800291a:	2303      	movs	r3, #3
 800291c:	e004      	b.n	8002928 <HAL_GPIO_Init+0x240>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x240>
 8002926:	2300      	movs	r3, #0
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f002 0203 	and.w	r2, r2, #3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4093      	lsls	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002938:	4935      	ldr	r1, [pc, #212]	; (8002a10 <HAL_GPIO_Init+0x328>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_GPIO_Init+0x354>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <HAL_GPIO_Init+0x354>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_GPIO_Init+0x354>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_GPIO_Init+0x354>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_GPIO_Init+0x354>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_GPIO_Init+0x354>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_GPIO_Init+0x354>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_GPIO_Init+0x354>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f67f ae86 	bls.w	8002708 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40013800 	.word	0x40013800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020c00 	.word	0x40020c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40021400 	.word	0x40021400
 8002a2c:	40021800 	.word	0x40021800
 8002a30:	40021c00 	.word	0x40021c00
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40022400 	.word	0x40022400
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a74:	b08f      	sub	sp, #60	; 0x3c
 8002a76:	af0a      	add	r7, sp, #40	; 0x28
 8002a78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e116      	b.n	8002cb2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd ff8a 	bl	80009b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 fe92 	bl	80047ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	687e      	ldr	r6, [r7, #4]
 8002ad0:	466d      	mov	r5, sp
 8002ad2:	f106 0410 	add.w	r4, r6, #16
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ade:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae6:	1d33      	adds	r3, r6, #4
 8002ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aea:	6838      	ldr	r0, [r7, #0]
 8002aec:	f001 fe26 	bl	800473c <USB_CoreInit>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0d7      	b.n	8002cb2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 fe80 	bl	800480e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e04a      	b.n	8002baa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	333d      	adds	r3, #61	; 0x3d
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	333c      	adds	r3, #60	; 0x3c
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	b298      	uxth	r0, r3
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3344      	adds	r3, #68	; 0x44
 8002b50:	4602      	mov	r2, r0
 8002b52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3340      	adds	r3, #64	; 0x40
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3348      	adds	r3, #72	; 0x48
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	334c      	adds	r3, #76	; 0x4c
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3354      	adds	r3, #84	; 0x54
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3af      	bcc.n	8002b14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e044      	b.n	8002c44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	3301      	adds	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3b5      	bcc.n	8002bba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	687e      	ldr	r6, [r7, #4]
 8002c56:	466d      	mov	r5, sp
 8002c58:	f106 0410 	add.w	r4, r6, #16
 8002c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c6c:	1d33      	adds	r3, r6, #4
 8002c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c70:	6838      	ldr	r0, [r7, #0]
 8002c72:	f001 fe19 	bl	80048a8 <USB_DevInit>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e014      	b.n	8002cb2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f80b 	bl	8002cbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 ffd7 	bl	8004c5e <USB_DevDisconnect>

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002cbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_PCDEx_ActivateLPM+0x44>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	10000003 	.word	0x10000003

08002d04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40007000 	.word	0x40007000

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e291      	b.n	800325e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8087 	beq.w	8002e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d48:	4b96      	ldr	r3, [pc, #600]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d00c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d54:	4b93      	ldr	r3, [pc, #588]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d112      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62>
 8002d60:	4b90      	ldr	r3, [pc, #576]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6e:	4b8d      	ldr	r3, [pc, #564]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d06c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x130>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d168      	bne.n	8002e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e26b      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x7a>
 8002d90:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a83      	ldr	r2, [pc, #524]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e02e      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x9c>
 8002da6:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7e      	ldr	r2, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7b      	ldr	r2, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0xc0>
 8002dca:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a75      	ldr	r2, [pc, #468]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a72      	ldr	r2, [pc, #456]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xd8>
 8002de4:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b6c      	ldr	r3, [pc, #432]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6b      	ldr	r2, [pc, #428]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe f948 	bl	8001098 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe f944 	bl	8001098 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e21f      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe8>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe f934 	bl	8001098 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe f930 	bl	8001098 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e20b      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	4b57      	ldr	r3, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x110>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d069      	beq.n	8002f36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e62:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6e:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d11c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x190>
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d116      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x17a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1df      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	493d      	ldr	r1, [pc, #244]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	e040      	b.n	8002f36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d023      	beq.n	8002f04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f8e6 	bl	8001098 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe f8e2 	bl	8001098 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1bd      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4929      	ldr	r1, [pc, #164]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
 8002f02:	e018      	b.n	8002f36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f04:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe f8c2 	bl	8001098 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7fe f8be 	bl	8001098 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e199      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d038      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d019      	beq.n	8002f7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe f89f 	bl	8001098 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7fe f89b 	bl	8001098 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e176      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x23a>
 8002f7c:	e01a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <HAL_RCC_OscConfig+0x280>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe f885 	bl	8001098 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fe f881 	bl	8001098 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d903      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e15c      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
 8002fa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b91      	ldr	r3, [pc, #580]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80a4 	beq.w	800310a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a87      	ldr	r2, [pc, #540]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b85      	ldr	r3, [pc, #532]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ff6:	4b7f      	ldr	r3, [pc, #508]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7e      	ldr	r2, [pc, #504]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003002:	f7fe f849 	bl	8001098 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7fe f845 	bl	8001098 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e120      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301c:	4b75      	ldr	r3, [pc, #468]	; (80031f4 <HAL_RCC_OscConfig+0x4d0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x31a>
 8003030:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a6e      	ldr	r2, [pc, #440]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	e02d      	b.n	800309a <HAL_RCC_OscConfig+0x376>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x33c>
 8003046:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a69      	ldr	r2, [pc, #420]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
 8003052:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a66      	ldr	r2, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	e01c      	b.n	800309a <HAL_RCC_OscConfig+0x376>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x35e>
 8003068:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a60      	ldr	r2, [pc, #384]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b5e      	ldr	r3, [pc, #376]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a5d      	ldr	r2, [pc, #372]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	e00b      	b.n	800309a <HAL_RCC_OscConfig+0x376>
 8003082:	4b5b      	ldr	r3, [pc, #364]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a5a      	ldr	r2, [pc, #360]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	4b58      	ldr	r3, [pc, #352]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d015      	beq.n	80030ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fd fff9 	bl	8001098 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fd fff5 	bl	8001098 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0ce      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ee      	beq.n	80030aa <HAL_RCC_OscConfig+0x386>
 80030cc:	e014      	b.n	80030f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fd ffe3 	bl	8001098 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fd ffdf 	bl	8001098 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0b8      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80a4 	beq.w	800325c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003114:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d06b      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d149      	bne.n	80031bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800312e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fd ffb0 	bl	8001098 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fd ffac 	bl	8001098 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e087      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314e:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	3b01      	subs	r3, #1
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	4313      	orrs	r3, r2
 8003180:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 8003182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003186:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fd ff80 	bl	8001098 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fd ff7c 	bl	8001098 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e057      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x478>
 80031ba:	e04f      	b.n	800325c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fd ff66 	bl	8001098 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fd ff62 	bl	8001098 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e03d      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_RCC_OscConfig+0x4cc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4ac>
 80031ee:	e035      	b.n	800325c <HAL_RCC_OscConfig+0x538>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x544>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d028      	beq.n	8003258 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d121      	bne.n	8003258 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d11a      	bne.n	8003258 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800322e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003230:	4293      	cmp	r3, r2
 8003232:	d111      	bne.n	8003258 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	3b01      	subs	r3, #1
 8003242:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0d0      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b6a      	ldr	r3, [pc, #424]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d910      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b67      	ldr	r3, [pc, #412]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	4965      	ldr	r1, [pc, #404]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b8      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a58      	ldr	r2, [pc, #352]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	494d      	ldr	r1, [pc, #308]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d040      	beq.n	8003390 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d115      	bne.n	800334e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e073      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06b      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4936      	ldr	r1, [pc, #216]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003360:	f7fd fe9a 	bl	8001098 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7fd fe96 	bl	8001098 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e053      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d1eb      	bne.n	8003368 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d210      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 020f 	bic.w	r2, r3, #15
 80033a6:	4922      	ldr	r1, [pc, #136]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e032      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4916      	ldr	r1, [pc, #88]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	490e      	ldr	r1, [pc, #56]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033fe:	f000 f821 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8003402:	4602      	mov	r2, r0
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	490a      	ldr	r1, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1cc>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	fa22 f303 	lsr.w	r3, r2, r3
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1d0>)
 8003418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1d4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fdf6 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08012ab8 	.word	0x08012ab8
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003448:	b094      	sub	sp, #80	; 0x50
 800344a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
 8003450:	2300      	movs	r3, #0
 8003452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003454:	2300      	movs	r3, #0
 8003456:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345c:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d00d      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x40>
 8003468:	2b08      	cmp	r3, #8
 800346a:	f200 80e1 	bhi.w	8003630 <HAL_RCC_GetSysClockFreq+0x1ec>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 8003472:	2b04      	cmp	r3, #4
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x3a>
 8003476:	e0db      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_GetSysClockFreq+0x204>)
 800347a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800347c:	e0db      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800347e:	4b73      	ldr	r3, [pc, #460]	; (800364c <HAL_RCC_GetSysClockFreq+0x208>)
 8003480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003482:	e0d8      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003484:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800348c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800348e:	4b6d      	ldr	r3, [pc, #436]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d063      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349a:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	2200      	movs	r2, #0
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ac:	633b      	str	r3, [r7, #48]	; 0x30
 80034ae:	2300      	movs	r3, #0
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
 80034b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034b6:	4622      	mov	r2, r4
 80034b8:	462b      	mov	r3, r5
 80034ba:	f04f 0000 	mov.w	r0, #0
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	0159      	lsls	r1, r3, #5
 80034c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c8:	0150      	lsls	r0, r2, #5
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4621      	mov	r1, r4
 80034d0:	1a51      	subs	r1, r2, r1
 80034d2:	6139      	str	r1, [r7, #16]
 80034d4:	4629      	mov	r1, r5
 80034d6:	eb63 0301 	sbc.w	r3, r3, r1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e8:	4659      	mov	r1, fp
 80034ea:	018b      	lsls	r3, r1, #6
 80034ec:	4651      	mov	r1, sl
 80034ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034f2:	4651      	mov	r1, sl
 80034f4:	018a      	lsls	r2, r1, #6
 80034f6:	4651      	mov	r1, sl
 80034f8:	ebb2 0801 	subs.w	r8, r2, r1
 80034fc:	4659      	mov	r1, fp
 80034fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003516:	4690      	mov	r8, r2
 8003518:	4699      	mov	r9, r3
 800351a:	4623      	mov	r3, r4
 800351c:	eb18 0303 	adds.w	r3, r8, r3
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	462b      	mov	r3, r5
 8003524:	eb49 0303 	adc.w	r3, r9, r3
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003536:	4629      	mov	r1, r5
 8003538:	024b      	lsls	r3, r1, #9
 800353a:	4621      	mov	r1, r4
 800353c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003540:	4621      	mov	r1, r4
 8003542:	024a      	lsls	r2, r1, #9
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354a:	2200      	movs	r2, #0
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
 800354e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003554:	f7fc feac 	bl	80002b0 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4613      	mov	r3, r2
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003560:	e058      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003562:	4b38      	ldr	r3, [pc, #224]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	2200      	movs	r2, #0
 800356a:	4618      	mov	r0, r3
 800356c:	4611      	mov	r1, r2
 800356e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	f04f 0000 	mov.w	r0, #0
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	0159      	lsls	r1, r3, #5
 800358a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358e:	0150      	lsls	r0, r2, #5
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4641      	mov	r1, r8
 8003596:	ebb2 0a01 	subs.w	sl, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb63 0b01 	sbc.w	fp, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035b4:	ebb2 040a 	subs.w	r4, r2, sl
 80035b8:	eb63 050b 	sbc.w	r5, r3, fp
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	00eb      	lsls	r3, r5, #3
 80035c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ca:	00e2      	lsls	r2, r4, #3
 80035cc:	4614      	mov	r4, r2
 80035ce:	461d      	mov	r5, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	18e3      	adds	r3, r4, r3
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	464b      	mov	r3, r9
 80035d8:	eb45 0303 	adc.w	r3, r5, r3
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ea:	4629      	mov	r1, r5
 80035ec:	028b      	lsls	r3, r1, #10
 80035ee:	4621      	mov	r1, r4
 80035f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f4:	4621      	mov	r1, r4
 80035f6:	028a      	lsls	r2, r1, #10
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fe:	2200      	movs	r2, #0
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	61fa      	str	r2, [r7, #28]
 8003604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003608:	f7fc fe52 	bl	80002b0 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4613      	mov	r3, r2
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	3301      	adds	r3, #1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362e:	e002      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetSysClockFreq+0x204>)
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003638:	4618      	mov	r0, r3
 800363a:	3750      	adds	r7, #80	; 0x50
 800363c:	46bd      	mov	sp, r7
 800363e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	00f42400 	.word	0x00f42400
 800364c:	007a1200 	.word	0x007a1200

08003650 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <HAL_RCC_GetHCLKFreq+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800366c:	f7ff fff0 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0a9b      	lsrs	r3, r3, #10
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08012ac8 	.word	0x08012ac8

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff ffdc 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0b5b      	lsrs	r3, r3, #13
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	08012ac8 	.word	0x08012ac8

080036b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036e0:	4b69      	ldr	r3, [pc, #420]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a68      	ldr	r2, [pc, #416]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	4b66      	ldr	r3, [pc, #408]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	4964      	ldr	r1, [pc, #400]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003702:	2301      	movs	r3, #1
 8003704:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d017      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003712:	4b5d      	ldr	r3, [pc, #372]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	4959      	ldr	r1, [pc, #356]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d017      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800374e:	4b4e      	ldr	r3, [pc, #312]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003754:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	494a      	ldr	r1, [pc, #296]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376c:	d101      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800377a:	2301      	movs	r3, #1
 800377c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800378a:	2301      	movs	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 808b 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b3a      	ldr	r3, [pc, #232]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	4a39      	ldr	r2, [pc, #228]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6413      	str	r3, [r2, #64]	; 0x40
 80037a8:	4b37      	ldr	r3, [pc, #220]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a34      	ldr	r2, [pc, #208]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fd fc6a 	bl	8001098 <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fd fc66 	bl	8001098 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e357      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037da:	4b2c      	ldr	r3, [pc, #176]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d035      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d02e      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003804:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800380e:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003826:	4a18      	ldr	r2, [pc, #96]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d114      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fc2e 	bl	8001098 <HAL_GetTick>
 800383c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fd fc2a 	bl	8001098 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e319      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ee      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386e:	d111      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800387e:	400b      	ands	r3, r1
 8003880:	4901      	ldr	r1, [pc, #4]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
 8003886:	e00b      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000
 8003890:	0ffffcff 	.word	0x0ffffcff
 8003894:	4baa      	ldr	r3, [pc, #680]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4aa9      	ldr	r2, [pc, #676]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800389e:	6093      	str	r3, [r2, #8]
 80038a0:	4ba7      	ldr	r3, [pc, #668]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ac:	49a4      	ldr	r1, [pc, #656]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038be:	4ba0      	ldr	r3, [pc, #640]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c4:	4a9e      	ldr	r2, [pc, #632]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038ce:	4b9c      	ldr	r3, [pc, #624]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	4999      	ldr	r1, [pc, #612]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ec:	4b94      	ldr	r3, [pc, #592]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038fa:	4991      	ldr	r1, [pc, #580]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800390e:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391c:	4988      	ldr	r1, [pc, #544]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003930:	4b83      	ldr	r3, [pc, #524]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393e:	4980      	ldr	r1, [pc, #512]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003952:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4977      	ldr	r1, [pc, #476]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003974:	4b72      	ldr	r3, [pc, #456]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	496f      	ldr	r1, [pc, #444]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003996:	4b6a      	ldr	r3, [pc, #424]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	f023 020c 	bic.w	r2, r3, #12
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	4966      	ldr	r1, [pc, #408]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b8:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	495e      	ldr	r1, [pc, #376]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039da:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	4955      	ldr	r1, [pc, #340]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	494d      	ldr	r1, [pc, #308]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a1e:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	4944      	ldr	r1, [pc, #272]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a40:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	493c      	ldr	r1, [pc, #240]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a62:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	4933      	ldr	r1, [pc, #204]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a84:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a92:	492b      	ldr	r1, [pc, #172]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d011      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab4:	4922      	ldr	r1, [pc, #136]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ac4:	d101      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae6:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	4912      	ldr	r1, [pc, #72]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b18:	4909      	ldr	r1, [pc, #36]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d006      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80d9 	beq.w	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a01      	ldr	r2, [pc, #4]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b3e:	e001      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b46:	f7fd faa7 	bl	8001098 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b4e:	f7fd faa3 	bl	8001098 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b64      	cmp	r3, #100	; 0x64
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e194      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b60:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d021      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d11d      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b80:	4b64      	ldr	r3, [pc, #400]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b8e:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b94:	0e1b      	lsrs	r3, r3, #24
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	019a      	lsls	r2, r3, #6
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	061b      	lsls	r3, r3, #24
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	071b      	lsls	r3, r3, #28
 8003bb4:	4957      	ldr	r1, [pc, #348]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02e      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be6:	d129      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003be8:	4b4a      	ldr	r3, [pc, #296]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfc:	0f1b      	lsrs	r3, r3, #28
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	019a      	lsls	r2, r3, #6
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	071b      	lsls	r3, r3, #28
 8003c1c:	493d      	ldr	r1, [pc, #244]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c24:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2a:	f023 021f 	bic.w	r2, r3, #31
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	3b01      	subs	r3, #1
 8003c34:	4937      	ldr	r1, [pc, #220]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01d      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c48:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4e:	0e1b      	lsrs	r3, r3, #24
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5c:	0f1b      	lsrs	r3, r3, #28
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	019a      	lsls	r2, r3, #6
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	431a      	orrs	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	071b      	lsls	r3, r3, #28
 8003c7c:	4925      	ldr	r1, [pc, #148]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d011      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	019a      	lsls	r2, r3, #6
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	071b      	lsls	r3, r3, #28
 8003cac:	4919      	ldr	r1, [pc, #100]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc0:	f7fd f9ea 	bl	8001098 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cc8:	f7fd f9e6 	bl	8001098 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0d7      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 80cd 	bne.w	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fd f9cd 	bl	8001098 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d02:	f7fd f9c9 	bl	8001098 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d903      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0ba      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d18:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d24:	d0ed      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d02e      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d12a      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d4e:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	0f1b      	lsrs	r3, r3, #28
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	019a      	lsls	r2, r3, #6
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	071b      	lsls	r3, r3, #28
 8003d82:	4944      	ldr	r1, [pc, #272]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d8a:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	493d      	ldr	r1, [pc, #244]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d022      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db8:	d11d      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dc8:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	0f1b      	lsrs	r3, r3, #28
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	019a      	lsls	r2, r3, #6
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	431a      	orrs	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	071b      	lsls	r3, r3, #28
 8003dee:	4929      	ldr	r1, [pc, #164]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d028      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	0e1b      	lsrs	r3, r3, #24
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	019a      	lsls	r2, r3, #6
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	4917      	ldr	r1, [pc, #92]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4911      	ldr	r1, [pc, #68]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fd f91a 	bl	8001098 <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e68:	f7fd f916 	bl	8001098 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	; 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e007      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e86:	d1ef      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800

08003e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e040      	b.n	8003f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc fd1c 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f82c 	bl	8003f34 <UART_SetConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa84 	bl	80043fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fb0b 	bl	8004540 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4ba6      	ldr	r3, [pc, #664]	; (80041f8 <UART_SetConfig+0x2c4>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	6979      	ldr	r1, [r7, #20]
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a94      	ldr	r2, [pc, #592]	; (80041fc <UART_SetConfig+0x2c8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d120      	bne.n	8003ff2 <UART_SetConfig+0xbe>
 8003fb0:	4b93      	ldr	r3, [pc, #588]	; (8004200 <UART_SetConfig+0x2cc>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d816      	bhi.n	8003fec <UART_SetConfig+0xb8>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x90>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe1 	.word	0x08003fe1
 8003fcc:	08003fdb 	.word	0x08003fdb
 8003fd0:	08003fe7 	.word	0x08003fe7
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e150      	b.n	800427c <UART_SetConfig+0x348>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e14d      	b.n	800427c <UART_SetConfig+0x348>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e14a      	b.n	800427c <UART_SetConfig+0x348>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e147      	b.n	800427c <UART_SetConfig+0x348>
 8003fec:	2310      	movs	r3, #16
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e144      	b.n	800427c <UART_SetConfig+0x348>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a83      	ldr	r2, [pc, #524]	; (8004204 <UART_SetConfig+0x2d0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d132      	bne.n	8004062 <UART_SetConfig+0x12e>
 8003ffc:	4b80      	ldr	r3, [pc, #512]	; (8004200 <UART_SetConfig+0x2cc>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d828      	bhi.n	800405c <UART_SetConfig+0x128>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0xdc>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004045 	.word	0x08004045
 8004014:	0800405d 	.word	0x0800405d
 8004018:	0800405d 	.word	0x0800405d
 800401c:	0800405d 	.word	0x0800405d
 8004020:	08004051 	.word	0x08004051
 8004024:	0800405d 	.word	0x0800405d
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800405d 	.word	0x0800405d
 8004030:	0800404b 	.word	0x0800404b
 8004034:	0800405d 	.word	0x0800405d
 8004038:	0800405d 	.word	0x0800405d
 800403c:	0800405d 	.word	0x0800405d
 8004040:	08004057 	.word	0x08004057
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e118      	b.n	800427c <UART_SetConfig+0x348>
 800404a:	2302      	movs	r3, #2
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e115      	b.n	800427c <UART_SetConfig+0x348>
 8004050:	2304      	movs	r3, #4
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e112      	b.n	800427c <UART_SetConfig+0x348>
 8004056:	2308      	movs	r3, #8
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e10f      	b.n	800427c <UART_SetConfig+0x348>
 800405c:	2310      	movs	r3, #16
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e10c      	b.n	800427c <UART_SetConfig+0x348>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a68      	ldr	r2, [pc, #416]	; (8004208 <UART_SetConfig+0x2d4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d120      	bne.n	80040ae <UART_SetConfig+0x17a>
 800406c:	4b64      	ldr	r3, [pc, #400]	; (8004200 <UART_SetConfig+0x2cc>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004076:	2b30      	cmp	r3, #48	; 0x30
 8004078:	d013      	beq.n	80040a2 <UART_SetConfig+0x16e>
 800407a:	2b30      	cmp	r3, #48	; 0x30
 800407c:	d814      	bhi.n	80040a8 <UART_SetConfig+0x174>
 800407e:	2b20      	cmp	r3, #32
 8004080:	d009      	beq.n	8004096 <UART_SetConfig+0x162>
 8004082:	2b20      	cmp	r3, #32
 8004084:	d810      	bhi.n	80040a8 <UART_SetConfig+0x174>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <UART_SetConfig+0x15c>
 800408a:	2b10      	cmp	r3, #16
 800408c:	d006      	beq.n	800409c <UART_SetConfig+0x168>
 800408e:	e00b      	b.n	80040a8 <UART_SetConfig+0x174>
 8004090:	2300      	movs	r3, #0
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0f2      	b.n	800427c <UART_SetConfig+0x348>
 8004096:	2302      	movs	r3, #2
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e0ef      	b.n	800427c <UART_SetConfig+0x348>
 800409c:	2304      	movs	r3, #4
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e0ec      	b.n	800427c <UART_SetConfig+0x348>
 80040a2:	2308      	movs	r3, #8
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e0e9      	b.n	800427c <UART_SetConfig+0x348>
 80040a8:	2310      	movs	r3, #16
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e0e6      	b.n	800427c <UART_SetConfig+0x348>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a56      	ldr	r2, [pc, #344]	; (800420c <UART_SetConfig+0x2d8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d120      	bne.n	80040fa <UART_SetConfig+0x1c6>
 80040b8:	4b51      	ldr	r3, [pc, #324]	; (8004200 <UART_SetConfig+0x2cc>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040c2:	2bc0      	cmp	r3, #192	; 0xc0
 80040c4:	d013      	beq.n	80040ee <UART_SetConfig+0x1ba>
 80040c6:	2bc0      	cmp	r3, #192	; 0xc0
 80040c8:	d814      	bhi.n	80040f4 <UART_SetConfig+0x1c0>
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d009      	beq.n	80040e2 <UART_SetConfig+0x1ae>
 80040ce:	2b80      	cmp	r3, #128	; 0x80
 80040d0:	d810      	bhi.n	80040f4 <UART_SetConfig+0x1c0>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <UART_SetConfig+0x1a8>
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d006      	beq.n	80040e8 <UART_SetConfig+0x1b4>
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x1c0>
 80040dc:	2300      	movs	r3, #0
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e0cc      	b.n	800427c <UART_SetConfig+0x348>
 80040e2:	2302      	movs	r3, #2
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e0c9      	b.n	800427c <UART_SetConfig+0x348>
 80040e8:	2304      	movs	r3, #4
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e0c6      	b.n	800427c <UART_SetConfig+0x348>
 80040ee:	2308      	movs	r3, #8
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e0c3      	b.n	800427c <UART_SetConfig+0x348>
 80040f4:	2310      	movs	r3, #16
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e0c0      	b.n	800427c <UART_SetConfig+0x348>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a44      	ldr	r2, [pc, #272]	; (8004210 <UART_SetConfig+0x2dc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d125      	bne.n	8004150 <UART_SetConfig+0x21c>
 8004104:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <UART_SetConfig+0x2cc>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004112:	d017      	beq.n	8004144 <UART_SetConfig+0x210>
 8004114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004118:	d817      	bhi.n	800414a <UART_SetConfig+0x216>
 800411a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411e:	d00b      	beq.n	8004138 <UART_SetConfig+0x204>
 8004120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004124:	d811      	bhi.n	800414a <UART_SetConfig+0x216>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <UART_SetConfig+0x1fe>
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d006      	beq.n	800413e <UART_SetConfig+0x20a>
 8004130:	e00b      	b.n	800414a <UART_SetConfig+0x216>
 8004132:	2300      	movs	r3, #0
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0a1      	b.n	800427c <UART_SetConfig+0x348>
 8004138:	2302      	movs	r3, #2
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e09e      	b.n	800427c <UART_SetConfig+0x348>
 800413e:	2304      	movs	r3, #4
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e09b      	b.n	800427c <UART_SetConfig+0x348>
 8004144:	2308      	movs	r3, #8
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e098      	b.n	800427c <UART_SetConfig+0x348>
 800414a:	2310      	movs	r3, #16
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e095      	b.n	800427c <UART_SetConfig+0x348>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2f      	ldr	r2, [pc, #188]	; (8004214 <UART_SetConfig+0x2e0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d125      	bne.n	80041a6 <UART_SetConfig+0x272>
 800415a:	4b29      	ldr	r3, [pc, #164]	; (8004200 <UART_SetConfig+0x2cc>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004168:	d017      	beq.n	800419a <UART_SetConfig+0x266>
 800416a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800416e:	d817      	bhi.n	80041a0 <UART_SetConfig+0x26c>
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004174:	d00b      	beq.n	800418e <UART_SetConfig+0x25a>
 8004176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417a:	d811      	bhi.n	80041a0 <UART_SetConfig+0x26c>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <UART_SetConfig+0x254>
 8004180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004184:	d006      	beq.n	8004194 <UART_SetConfig+0x260>
 8004186:	e00b      	b.n	80041a0 <UART_SetConfig+0x26c>
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e076      	b.n	800427c <UART_SetConfig+0x348>
 800418e:	2302      	movs	r3, #2
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e073      	b.n	800427c <UART_SetConfig+0x348>
 8004194:	2304      	movs	r3, #4
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e070      	b.n	800427c <UART_SetConfig+0x348>
 800419a:	2308      	movs	r3, #8
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e06d      	b.n	800427c <UART_SetConfig+0x348>
 80041a0:	2310      	movs	r3, #16
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e06a      	b.n	800427c <UART_SetConfig+0x348>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <UART_SetConfig+0x2e4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d138      	bne.n	8004222 <UART_SetConfig+0x2ee>
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <UART_SetConfig+0x2cc>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041be:	d017      	beq.n	80041f0 <UART_SetConfig+0x2bc>
 80041c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041c4:	d82a      	bhi.n	800421c <UART_SetConfig+0x2e8>
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ca:	d00b      	beq.n	80041e4 <UART_SetConfig+0x2b0>
 80041cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d0:	d824      	bhi.n	800421c <UART_SetConfig+0x2e8>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <UART_SetConfig+0x2aa>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041da:	d006      	beq.n	80041ea <UART_SetConfig+0x2b6>
 80041dc:	e01e      	b.n	800421c <UART_SetConfig+0x2e8>
 80041de:	2300      	movs	r3, #0
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e04b      	b.n	800427c <UART_SetConfig+0x348>
 80041e4:	2302      	movs	r3, #2
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e048      	b.n	800427c <UART_SetConfig+0x348>
 80041ea:	2304      	movs	r3, #4
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e045      	b.n	800427c <UART_SetConfig+0x348>
 80041f0:	2308      	movs	r3, #8
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e042      	b.n	800427c <UART_SetConfig+0x348>
 80041f6:	bf00      	nop
 80041f8:	efff69f3 	.word	0xefff69f3
 80041fc:	40011000 	.word	0x40011000
 8004200:	40023800 	.word	0x40023800
 8004204:	40004400 	.word	0x40004400
 8004208:	40004800 	.word	0x40004800
 800420c:	40004c00 	.word	0x40004c00
 8004210:	40005000 	.word	0x40005000
 8004214:	40011400 	.word	0x40011400
 8004218:	40007800 	.word	0x40007800
 800421c:	2310      	movs	r3, #16
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e02c      	b.n	800427c <UART_SetConfig+0x348>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a72      	ldr	r2, [pc, #456]	; (80043f0 <UART_SetConfig+0x4bc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d125      	bne.n	8004278 <UART_SetConfig+0x344>
 800422c:	4b71      	ldr	r3, [pc, #452]	; (80043f4 <UART_SetConfig+0x4c0>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800423a:	d017      	beq.n	800426c <UART_SetConfig+0x338>
 800423c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004240:	d817      	bhi.n	8004272 <UART_SetConfig+0x33e>
 8004242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004246:	d00b      	beq.n	8004260 <UART_SetConfig+0x32c>
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	d811      	bhi.n	8004272 <UART_SetConfig+0x33e>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <UART_SetConfig+0x326>
 8004252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004256:	d006      	beq.n	8004266 <UART_SetConfig+0x332>
 8004258:	e00b      	b.n	8004272 <UART_SetConfig+0x33e>
 800425a:	2300      	movs	r3, #0
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e00d      	b.n	800427c <UART_SetConfig+0x348>
 8004260:	2302      	movs	r3, #2
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e00a      	b.n	800427c <UART_SetConfig+0x348>
 8004266:	2304      	movs	r3, #4
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e007      	b.n	800427c <UART_SetConfig+0x348>
 800426c:	2308      	movs	r3, #8
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e004      	b.n	800427c <UART_SetConfig+0x348>
 8004272:	2310      	movs	r3, #16
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e001      	b.n	800427c <UART_SetConfig+0x348>
 8004278:	2310      	movs	r3, #16
 800427a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004284:	d15b      	bne.n	800433e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004286:	7ffb      	ldrb	r3, [r7, #31]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d828      	bhi.n	80042de <UART_SetConfig+0x3aa>
 800428c:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <UART_SetConfig+0x360>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	080042df 	.word	0x080042df
 80042a4:	080042cf 	.word	0x080042cf
 80042a8:	080042df 	.word	0x080042df
 80042ac:	080042df 	.word	0x080042df
 80042b0:	080042df 	.word	0x080042df
 80042b4:	080042d7 	.word	0x080042d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7ff f9d6 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 80042bc:	61b8      	str	r0, [r7, #24]
        break;
 80042be:	e013      	b.n	80042e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7ff f9e6 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80042c4:	61b8      	str	r0, [r7, #24]
        break;
 80042c6:	e00f      	b.n	80042e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c8:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <UART_SetConfig+0x4c4>)
 80042ca:	61bb      	str	r3, [r7, #24]
        break;
 80042cc:	e00c      	b.n	80042e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ce:	f7ff f8b9 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80042d2:	61b8      	str	r0, [r7, #24]
        break;
 80042d4:	e008      	b.n	80042e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042da:	61bb      	str	r3, [r7, #24]
        break;
 80042dc:	e004      	b.n	80042e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	77bb      	strb	r3, [r7, #30]
        break;
 80042e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d074      	beq.n	80043d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	005a      	lsls	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d916      	bls.n	8004338 <UART_SetConfig+0x404>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004310:	d212      	bcs.n	8004338 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	b29b      	uxth	r3, r3
 8004316:	f023 030f 	bic.w	r3, r3, #15
 800431a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	b29b      	uxth	r3, r3
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	b29a      	uxth	r2, r3
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	4313      	orrs	r3, r2
 800432c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	89fa      	ldrh	r2, [r7, #14]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	e04f      	b.n	80043d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	77bb      	strb	r3, [r7, #30]
 800433c:	e04c      	b.n	80043d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800433e:	7ffb      	ldrb	r3, [r7, #31]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d828      	bhi.n	8004396 <UART_SetConfig+0x462>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x418>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004371 	.word	0x08004371
 8004350:	08004379 	.word	0x08004379
 8004354:	08004381 	.word	0x08004381
 8004358:	08004397 	.word	0x08004397
 800435c:	08004387 	.word	0x08004387
 8004360:	08004397 	.word	0x08004397
 8004364:	08004397 	.word	0x08004397
 8004368:	08004397 	.word	0x08004397
 800436c:	0800438f 	.word	0x0800438f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004370:	f7ff f97a 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8004374:	61b8      	str	r0, [r7, #24]
        break;
 8004376:	e013      	b.n	80043a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004378:	f7ff f98a 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 800437c:	61b8      	str	r0, [r7, #24]
        break;
 800437e:	e00f      	b.n	80043a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <UART_SetConfig+0x4c4>)
 8004382:	61bb      	str	r3, [r7, #24]
        break;
 8004384:	e00c      	b.n	80043a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004386:	f7ff f85d 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 800438a:	61b8      	str	r0, [r7, #24]
        break;
 800438c:	e008      	b.n	80043a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	61bb      	str	r3, [r7, #24]
        break;
 8004394:	e004      	b.n	80043a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	77bb      	strb	r3, [r7, #30]
        break;
 800439e:	bf00      	nop
    }

    if (pclk != 0U)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d018      	beq.n	80043d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	085a      	lsrs	r2, r3, #1
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	441a      	add	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b0f      	cmp	r3, #15
 80043be:	d909      	bls.n	80043d4 <UART_SetConfig+0x4a0>
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d205      	bcs.n	80043d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	e001      	b.n	80043d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40007c00 	.word	0x40007c00
 80043f4:	40023800 	.word	0x40023800
 80043f8:	00f42400 	.word	0x00f42400

080043fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01a      	beq.n	8004512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fa:	d10a      	bne.n	8004512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004550:	f7fc fda2 	bl	8001098 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d10e      	bne.n	8004582 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f81b 	bl	80045ae <UART_WaitOnFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e011      	b.n	80045a6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b09c      	sub	sp, #112	; 0x70
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	e0a7      	b.n	8004710 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	f000 80a3 	beq.w	8004710 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fc fd65 	bl	8001098 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80045da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d13f      	bne.n	8004660 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f4:	667b      	str	r3, [r7, #100]	; 0x64
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004600:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800460c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e6      	bne.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	663b      	str	r3, [r7, #96]	; 0x60
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004632:	64ba      	str	r2, [r7, #72]	; 0x48
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e5      	bne.n	8004612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e068      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d050      	beq.n	8004710 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467c:	d148      	bne.n	8004710 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004686:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800469c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a6:	637b      	str	r3, [r7, #52]	; 0x34
 80046a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e6      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3308      	adds	r3, #8
 80046c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3308      	adds	r3, #8
 80046d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046da:	623a      	str	r2, [r7, #32]
 80046dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	69f9      	ldr	r1, [r7, #28]
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e5      	bne.n	80046ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e010      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	f43f af48 	beq.w	80045c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3770      	adds	r7, #112	; 0x70
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800473c:	b084      	sub	sp, #16
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	f107 001c 	add.w	r0, r7, #28
 800474a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	d120      	bne.n	8004796 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <USB_CoreInit+0xac>)
 8004766:	4013      	ands	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa96 	bl	8004cbc <USB_CoreReset>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	e010      	b.n	80047b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa8a 	bl	8004cbc <USB_CoreReset>
 80047a8:	4603      	mov	r3, r0
 80047aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10b      	bne.n	80047d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f043 0206 	orr.w	r2, r3, #6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e2:	b004      	add	sp, #16
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	ffbdffbf 	.word	0xffbdffbf

080047ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 0201 	bic.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d115      	bne.n	800485c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800483c:	2001      	movs	r0, #1
 800483e:	f7fc fc37 	bl	80010b0 <HAL_Delay>
      ms++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3301      	adds	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fa29 	bl	8004ca0 <USB_GetMode>
 800484e:	4603      	mov	r3, r0
 8004850:	2b01      	cmp	r3, #1
 8004852:	d01e      	beq.n	8004892 <USB_SetCurrentMode+0x84>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b31      	cmp	r3, #49	; 0x31
 8004858:	d9f0      	bls.n	800483c <USB_SetCurrentMode+0x2e>
 800485a:	e01a      	b.n	8004892 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d115      	bne.n	800488e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800486e:	2001      	movs	r0, #1
 8004870:	f7fc fc1e 	bl	80010b0 <HAL_Delay>
      ms++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa10 	bl	8004ca0 <USB_GetMode>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <USB_SetCurrentMode+0x84>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b31      	cmp	r3, #49	; 0x31
 800488a:	d9f0      	bls.n	800486e <USB_SetCurrentMode+0x60>
 800488c:	e001      	b.n	8004892 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e005      	b.n	800489e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b32      	cmp	r3, #50	; 0x32
 8004896:	d101      	bne.n	800489c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a8:	b084      	sub	sp, #16
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	e009      	b.n	80048dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3340      	adds	r3, #64	; 0x40
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	2200      	movs	r2, #0
 80048d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3301      	adds	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0e      	cmp	r3, #14
 80048e0:	d9f2      	bls.n	80048c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11c      	bne.n	8004922 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f6:	f043 0302 	orr.w	r3, r3, #2
 80048fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e005      	b.n	800492e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004934:	461a      	mov	r2, r3
 8004936:	2300      	movs	r3, #0
 8004938:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004940:	4619      	mov	r1, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004948:	461a      	mov	r2, r3
 800494a:	680b      	ldr	r3, [r1, #0]
 800494c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10c      	bne.n	800496e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800495a:	2100      	movs	r1, #0
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f965 	bl	8004c2c <USB_SetDevSpeed>
 8004962:	e008      	b.n	8004976 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004964:	2101      	movs	r1, #1
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f960 	bl	8004c2c <USB_SetDevSpeed>
 800496c:	e003      	b.n	8004976 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800496e:	2103      	movs	r1, #3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f95b 	bl	8004c2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004976:	2110      	movs	r1, #16
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f8f3 	bl	8004b64 <USB_FlushTxFifo>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f91f 	bl	8004bcc <USB_FlushRxFifo>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	461a      	mov	r2, r3
 80049a0:	2300      	movs	r3, #0
 80049a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	461a      	mov	r2, r3
 80049b8:	2300      	movs	r3, #0
 80049ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e043      	b.n	8004a4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d8:	d118      	bne.n	8004a0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ec:	461a      	mov	r2, r3
 80049ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e013      	b.n	8004a1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e008      	b.n	8004a1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3301      	adds	r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3b7      	bcc.n	80049c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	e043      	b.n	8004ae0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a6e:	d118      	bne.n	8004aa2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	461a      	mov	r2, r3
 8004a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e013      	b.n	8004ab4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e008      	b.n	8004ab4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3301      	adds	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3b7      	bcc.n	8004a58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f043 0210 	orr.w	r2, r3, #16
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <USB_DevInit+0x2b4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f043 0208 	orr.w	r2, r3, #8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <USB_DevInit+0x2b8>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b58:	b004      	add	sp, #16
 8004b5a:	4770      	bx	lr
 8004b5c:	803c3800 	.word	0x803c3800
 8004b60:	40000004 	.word	0x40000004

08004b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <USB_FlushTxFifo+0x64>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e01b      	b.n	8004bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	daf2      	bge.n	8004b72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	019b      	lsls	r3, r3, #6
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <USB_FlushTxFifo+0x64>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e006      	b.n	8004bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d0f0      	beq.n	8004b9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	00030d40 	.word	0x00030d40

08004bcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <USB_FlushRxFifo+0x5c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e018      	b.n	8004c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	daf2      	bge.n	8004bd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2210      	movs	r2, #16
 8004bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <USB_FlushRxFifo+0x5c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e006      	b.n	8004c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d0f0      	beq.n	8004bfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	68f9      	ldr	r1, [r7, #12]
 8004c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c78:	f023 0303 	bic.w	r3, r3, #3
 8004c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f003 0301 	and.w	r3, r3, #1
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <USB_CoreReset+0x64>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e01b      	b.n	8004d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	daf2      	bge.n	8004cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f043 0201 	orr.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <USB_CoreReset+0x64>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e006      	b.n	8004d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d0f0      	beq.n	8004cf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	00030d40 	.word	0x00030d40

08004d24 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004d2a:	4b8d      	ldr	r3, [pc, #564]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d2c:	22c0      	movs	r2, #192	; 0xc0
 8004d2e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004d30:	4b8b      	ldr	r3, [pc, #556]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d32:	22a8      	movs	r2, #168	; 0xa8
 8004d34:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 8004d36:	4b8a      	ldr	r3, [pc, #552]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d38:	2207      	movs	r2, #7
 8004d3a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8004d3c:	4b88      	ldr	r3, [pc, #544]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d3e:	2202      	movs	r2, #2
 8004d40:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004d42:	4b88      	ldr	r3, [pc, #544]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004d44:	22ff      	movs	r2, #255	; 0xff
 8004d46:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004d48:	4b86      	ldr	r3, [pc, #536]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004d4a:	22ff      	movs	r2, #255	; 0xff
 8004d4c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004d4e:	4b85      	ldr	r3, [pc, #532]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004d50:	22ff      	movs	r2, #255	; 0xff
 8004d52:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004d54:	4b83      	ldr	r3, [pc, #524]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004d5a:	4b83      	ldr	r3, [pc, #524]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004d5c:	22c0      	movs	r2, #192	; 0xc0
 8004d5e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004d60:	4b81      	ldr	r3, [pc, #516]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004d62:	22a8      	movs	r2, #168	; 0xa8
 8004d64:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 7;
 8004d66:	4b80      	ldr	r3, [pc, #512]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004d68:	2207      	movs	r2, #7
 8004d6a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004d6c:	4b7e      	ldr	r3, [pc, #504]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004d72:	f000 fd25 	bl	80057c0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d76:	4b7a      	ldr	r3, [pc, #488]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	061a      	lsls	r2, r3, #24
 8004d7c:	4b78      	ldr	r3, [pc, #480]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	4b76      	ldr	r3, [pc, #472]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d86:	789b      	ldrb	r3, [r3, #2]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	4a74      	ldr	r2, [pc, #464]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d8e:	78d2      	ldrb	r2, [r2, #3]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	061a      	lsls	r2, r3, #24
 8004d94:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	0619      	lsls	r1, r3, #24
 8004d9a:	4b71      	ldr	r3, [pc, #452]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	4319      	orrs	r1, r3
 8004da2:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004da4:	789b      	ldrb	r3, [r3, #2]
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	430b      	orrs	r3, r1
 8004daa:	496d      	ldr	r1, [pc, #436]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004dac:	78c9      	ldrb	r1, [r1, #3]
 8004dae:	430b      	orrs	r3, r1
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004db6:	431a      	orrs	r2, r3
 8004db8:	4b69      	ldr	r3, [pc, #420]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	0619      	lsls	r1, r3, #24
 8004dbe:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	4319      	orrs	r1, r3
 8004dc6:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004dc8:	789b      	ldrb	r3, [r3, #2]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	4964      	ldr	r1, [pc, #400]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004dd0:	78c9      	ldrb	r1, [r1, #3]
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	4b60      	ldr	r3, [pc, #384]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	0619      	lsls	r1, r3, #24
 8004de2:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	4319      	orrs	r1, r3
 8004dea:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004dec:	789b      	ldrb	r3, [r3, #2]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	430b      	orrs	r3, r1
 8004df2:	495b      	ldr	r1, [pc, #364]	; (8004f60 <MX_LWIP_Init+0x23c>)
 8004df4:	78c9      	ldrb	r1, [r1, #3]
 8004df6:	430b      	orrs	r3, r1
 8004df8:	0e1b      	lsrs	r3, r3, #24
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	4a5b      	ldr	r2, [pc, #364]	; (8004f6c <MX_LWIP_Init+0x248>)
 8004dfe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004e00:	4b58      	ldr	r3, [pc, #352]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	061a      	lsls	r2, r3, #24
 8004e06:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	4b55      	ldr	r3, [pc, #340]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e10:	789b      	ldrb	r3, [r3, #2]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	4313      	orrs	r3, r2
 8004e16:	4a53      	ldr	r2, [pc, #332]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e18:	78d2      	ldrb	r2, [r2, #3]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	061a      	lsls	r2, r3, #24
 8004e1e:	4b51      	ldr	r3, [pc, #324]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	0619      	lsls	r1, r3, #24
 8004e24:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	4319      	orrs	r1, r3
 8004e2c:	4b4d      	ldr	r3, [pc, #308]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e2e:	789b      	ldrb	r3, [r3, #2]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	430b      	orrs	r3, r1
 8004e34:	494b      	ldr	r1, [pc, #300]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e36:	78c9      	ldrb	r1, [r1, #3]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e40:	431a      	orrs	r2, r3
 8004e42:	4b48      	ldr	r3, [pc, #288]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	0619      	lsls	r1, r3, #24
 8004e48:	4b46      	ldr	r3, [pc, #280]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	4319      	orrs	r1, r3
 8004e50:	4b44      	ldr	r3, [pc, #272]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e52:	789b      	ldrb	r3, [r3, #2]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	430b      	orrs	r3, r1
 8004e58:	4942      	ldr	r1, [pc, #264]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e5a:	78c9      	ldrb	r1, [r1, #3]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e64:	431a      	orrs	r2, r3
 8004e66:	4b3f      	ldr	r3, [pc, #252]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	0619      	lsls	r1, r3, #24
 8004e6c:	4b3d      	ldr	r3, [pc, #244]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	4319      	orrs	r1, r3
 8004e74:	4b3b      	ldr	r3, [pc, #236]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e76:	789b      	ldrb	r3, [r3, #2]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	4939      	ldr	r1, [pc, #228]	; (8004f64 <MX_LWIP_Init+0x240>)
 8004e7e:	78c9      	ldrb	r1, [r1, #3]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	0e1b      	lsrs	r3, r3, #24
 8004e84:	4313      	orrs	r3, r2
 8004e86:	4a3a      	ldr	r2, [pc, #232]	; (8004f70 <MX_LWIP_Init+0x24c>)
 8004e88:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e8a:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	061a      	lsls	r2, r3, #24
 8004e90:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	431a      	orrs	r2, r3
 8004e98:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004e9a:	789b      	ldrb	r3, [r3, #2]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	4a31      	ldr	r2, [pc, #196]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004ea2:	78d2      	ldrb	r2, [r2, #3]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	061a      	lsls	r2, r3, #24
 8004ea8:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	0619      	lsls	r1, r3, #24
 8004eae:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	4319      	orrs	r1, r3
 8004eb6:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	492a      	ldr	r1, [pc, #168]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004ec0:	78c9      	ldrb	r1, [r1, #3]
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	4b26      	ldr	r3, [pc, #152]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	0619      	lsls	r1, r3, #24
 8004ed2:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004ed4:	785b      	ldrb	r3, [r3, #1]
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	4319      	orrs	r1, r3
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004edc:	789b      	ldrb	r3, [r3, #2]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	4921      	ldr	r1, [pc, #132]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004ee4:	78c9      	ldrb	r1, [r1, #3]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	0619      	lsls	r1, r3, #24
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	4319      	orrs	r1, r3
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004f00:	789b      	ldrb	r3, [r3, #2]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	430b      	orrs	r3, r1
 8004f06:	4918      	ldr	r1, [pc, #96]	; (8004f68 <MX_LWIP_Init+0x244>)
 8004f08:	78c9      	ldrb	r1, [r1, #3]
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	0e1b      	lsrs	r3, r3, #24
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <MX_LWIP_Init+0x250>)
 8004f12:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004f14:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <MX_LWIP_Init+0x254>)
 8004f16:	9302      	str	r3, [sp, #8]
 8004f18:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <MX_LWIP_Init+0x258>)
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <MX_LWIP_Init+0x250>)
 8004f22:	4a13      	ldr	r2, [pc, #76]	; (8004f70 <MX_LWIP_Init+0x24c>)
 8004f24:	4911      	ldr	r1, [pc, #68]	; (8004f6c <MX_LWIP_Init+0x248>)
 8004f26:	4816      	ldr	r0, [pc, #88]	; (8004f80 <MX_LWIP_Init+0x25c>)
 8004f28:	f001 f936 	bl	8006198 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004f2c:	4814      	ldr	r0, [pc, #80]	; (8004f80 <MX_LWIP_Init+0x25c>)
 8004f2e:	f001 fae5 	bl	80064fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <MX_LWIP_Init+0x25c>)
 8004f34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004f44:	480e      	ldr	r0, [pc, #56]	; (8004f80 <MX_LWIP_Init+0x25c>)
 8004f46:	f001 fae9 	bl	800651c <netif_set_up>
 8004f4a:	e002      	b.n	8004f52 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004f4c:	480c      	ldr	r0, [pc, #48]	; (8004f80 <MX_LWIP_Init+0x25c>)
 8004f4e:	f001 fb51 	bl	80065f4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004f52:	490c      	ldr	r1, [pc, #48]	; (8004f84 <MX_LWIP_Init+0x260>)
 8004f54:	480a      	ldr	r0, [pc, #40]	; (8004f80 <MX_LWIP_Init+0x25c>)
 8004f56:	f001 fbe3 	bl	8006720 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f5a:	bf00      	nop
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200007bc 	.word	0x200007bc
 8004f64:	200007c0 	.word	0x200007c0
 8004f68:	200007c4 	.word	0x200007c4
 8004f6c:	200007b0 	.word	0x200007b0
 8004f70:	200007b4 	.word	0x200007b4
 8004f74:	200007b8 	.word	0x200007b8
 8004f78:	0800ef19 	.word	0x0800ef19
 8004f7c:	0800529d 	.word	0x0800529d
 8004f80:	2000077c 	.word	0x2000077c
 8004f84:	08004f89 	.word	0x08004f89

08004f88 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <SCB_InvalidateDCache_by_Addr>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004fae:	2320      	movs	r3, #32
 8004fb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fb2:	f3bf 8f4f 	dsb	sy
}
 8004fb6:	bf00      	nop
    while (op_size > 0) {
 8004fb8:	e00b      	b.n	8004fd2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004fba:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	dcf0      	bgt.n	8004fba <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004fd8:	f3bf 8f4f 	dsb	sy
}
 8004fdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fde:	f3bf 8f6f 	isb	sy
}
 8004fe2:	bf00      	nop
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000ed00 	.word	0xe000ed00

08004ff4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005000:	4b40      	ldr	r3, [pc, #256]	; (8005104 <low_level_init+0x110>)
 8005002:	4a41      	ldr	r2, [pc, #260]	; (8005108 <low_level_init+0x114>)
 8005004:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005006:	2300      	movs	r3, #0
 8005008:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800500e:	23e1      	movs	r3, #225	; 0xe1
 8005010:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005012:	2300      	movs	r3, #0
 8005014:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005016:	2300      	movs	r3, #0
 8005018:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800501a:	2300      	movs	r3, #0
 800501c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800501e:	4a39      	ldr	r2, [pc, #228]	; (8005104 <low_level_init+0x110>)
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005026:	4b37      	ldr	r3, [pc, #220]	; (8005104 <low_level_init+0x110>)
 8005028:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800502c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800502e:	4b35      	ldr	r3, [pc, #212]	; (8005104 <low_level_init+0x110>)
 8005030:	4a36      	ldr	r2, [pc, #216]	; (800510c <low_level_init+0x118>)
 8005032:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005034:	4b33      	ldr	r3, [pc, #204]	; (8005104 <low_level_init+0x110>)
 8005036:	4a36      	ldr	r2, [pc, #216]	; (8005110 <low_level_init+0x11c>)
 8005038:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800503a:	4b32      	ldr	r3, [pc, #200]	; (8005104 <low_level_init+0x110>)
 800503c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005040:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005042:	4830      	ldr	r0, [pc, #192]	; (8005104 <low_level_init+0x110>)
 8005044:	f7fc f96a 	bl	800131c <HAL_ETH_Init>
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800504c:	2238      	movs	r2, #56	; 0x38
 800504e:	2100      	movs	r1, #0
 8005050:	4830      	ldr	r0, [pc, #192]	; (8005114 <low_level_init+0x120>)
 8005052:	f00a f98a 	bl	800f36a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005056:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <low_level_init+0x120>)
 8005058:	2221      	movs	r2, #33	; 0x21
 800505a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800505c:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <low_level_init+0x120>)
 800505e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005062:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005064:	4b2b      	ldr	r3, [pc, #172]	; (8005114 <low_level_init+0x120>)
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800506a:	482b      	ldr	r0, [pc, #172]	; (8005118 <low_level_init+0x124>)
 800506c:	f000 ff5c 	bl	8005f28 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2206      	movs	r2, #6
 8005074:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005078:	4b22      	ldr	r3, [pc, #136]	; (8005104 <low_level_init+0x110>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <low_level_init+0x110>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	785a      	ldrb	r2, [r3, #1]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005090:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <low_level_init+0x110>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	789a      	ldrb	r2, [r3, #2]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <low_level_init+0x110>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	78da      	ldrb	r2, [r3, #3]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80050a8:	4b16      	ldr	r3, [pc, #88]	; (8005104 <low_level_init+0x110>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	791a      	ldrb	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <low_level_init+0x110>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	795a      	ldrb	r2, [r3, #5]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80050c6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050ce:	f043 030a 	orr.w	r3, r3, #10
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80050da:	4910      	ldr	r1, [pc, #64]	; (800511c <low_level_init+0x128>)
 80050dc:	4810      	ldr	r0, [pc, #64]	; (8005120 <low_level_init+0x12c>)
 80050de:	f7fb fe28 	bl	8000d32 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80050e2:	480f      	ldr	r0, [pc, #60]	; (8005120 <low_level_init+0x12c>)
 80050e4:	f7fb fe57 	bl	8000d96 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa3a 	bl	8005568 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80050f4:	e001      	b.n	80050fa <low_level_init+0x106>
    Error_Handler();
 80050f6:	f7fb fbd5 	bl	80008a4 <Error_Handler>
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20005154 	.word	0x20005154
 8005108:	40028000 	.word	0x40028000
 800510c:	20000128 	.word	0x20000128
 8005110:	20000088 	.word	0x20000088
 8005114:	20005204 	.word	0x20005204
 8005118:	08012ad0 	.word	0x08012ad0
 800511c:	2000000c 	.word	0x2000000c
 8005120:	2000523c 	.word	0x2000523c

08005124 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b092      	sub	sp, #72	; 0x48
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	2230      	movs	r2, #48	; 0x30
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f00a f910 	bl	800f36a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800514a:	f107 030c 	add.w	r3, r7, #12
 800514e:	2230      	movs	r2, #48	; 0x30
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f00a f909 	bl	800f36a <memset>

  for(q = p; q != NULL; q = q->next)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
 800515c:	e045      	b.n	80051ea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800515e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005160:	2b03      	cmp	r3, #3
 8005162:	d902      	bls.n	800516a <low_level_output+0x46>
      return ERR_IF;
 8005164:	f06f 030b 	mvn.w	r3, #11
 8005168:	e055      	b.n	8005216 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800516a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	3348      	adds	r3, #72	; 0x48
 800517a:	443b      	add	r3, r7
 800517c:	3b3c      	subs	r3, #60	; 0x3c
 800517e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	895b      	ldrh	r3, [r3, #10]
 8005184:	4619      	mov	r1, r3
 8005186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	3348      	adds	r3, #72	; 0x48
 8005192:	443b      	add	r3, r7
 8005194:	3b38      	subs	r3, #56	; 0x38
 8005196:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800519e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a0:	1e5a      	subs	r2, r3, #1
 80051a2:	f107 000c 	add.w	r0, r7, #12
 80051a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051a8:	460b      	mov	r3, r1
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	440b      	add	r3, r1
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	18c1      	adds	r1, r0, r3
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	3348      	adds	r3, #72	; 0x48
 80051bc:	443b      	add	r3, r7
 80051be:	3b34      	subs	r3, #52	; 0x34
 80051c0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80051c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80051ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	3348      	adds	r3, #72	; 0x48
 80051d6:	443b      	add	r3, r7
 80051d8:	3b34      	subs	r3, #52	; 0x34
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80051de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e0:	3301      	adds	r3, #1
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80051e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1b6      	bne.n	800515e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	891b      	ldrh	r3, [r3, #8]
 80051f4:	461a      	mov	r2, r3
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <low_level_output+0xfc>)
 80051f8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80051fa:	4a09      	ldr	r2, [pc, #36]	; (8005220 <low_level_output+0xfc>)
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005202:	4a07      	ldr	r2, [pc, #28]	; (8005220 <low_level_output+0xfc>)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005208:	2214      	movs	r2, #20
 800520a:	4905      	ldr	r1, [pc, #20]	; (8005220 <low_level_output+0xfc>)
 800520c:	4805      	ldr	r0, [pc, #20]	; (8005224 <low_level_output+0x100>)
 800520e:	f7fc f9b9 	bl	8001584 <HAL_ETH_Transmit>

  return errval;
 8005212:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005216:	4618      	mov	r0, r3
 8005218:	3748      	adds	r7, #72	; 0x48
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20005204 	.word	0x20005204
 8005224:	20005154 	.word	0x20005154

08005228 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <low_level_input+0x2c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	4619      	mov	r1, r3
 8005242:	4805      	ldr	r0, [pc, #20]	; (8005258 <low_level_input+0x30>)
 8005244:	f7fc fa32 	bl	80016ac <HAL_ETH_ReadData>
  }

  return p;
 8005248:	68fb      	ldr	r3, [r7, #12]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20005150 	.word	0x20005150
 8005258:	20005154 	.word	0x20005154

0800525c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ffdd 	bl	8005228 <low_level_input>
 800526e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	4798      	blx	r3
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f001 fdaa 	bl	8006de0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ea      	bne.n	8005268 <ethernetif_input+0xc>
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <ethernetif_init+0x1c>
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <ethernetif_init+0x48>)
 80052ac:	f240 127b 	movw	r2, #379	; 0x17b
 80052b0:	490d      	ldr	r1, [pc, #52]	; (80052e8 <ethernetif_init+0x4c>)
 80052b2:	480e      	ldr	r0, [pc, #56]	; (80052ec <ethernetif_init+0x50>)
 80052b4:	f009 fff4 	bl	800f2a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2273      	movs	r2, #115	; 0x73
 80052bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2274      	movs	r2, #116	; 0x74
 80052c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <ethernetif_init+0x54>)
 80052cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <ethernetif_init+0x58>)
 80052d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fe8d 	bl	8004ff4 <low_level_init>

  return ERR_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	080100d8 	.word	0x080100d8
 80052e8:	080100f4 	.word	0x080100f4
 80052ec:	08010104 	.word	0x08010104
 80052f0:	0800d3d1 	.word	0x0800d3d1
 80052f4:	08005125 	.word	0x08005125

080052f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	4807      	ldr	r0, [pc, #28]	; (8005324 <pbuf_free_custom+0x2c>)
 8005308:	f000 fef0 	bl	80060ec <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <pbuf_free_custom+0x30>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d102      	bne.n	800531a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005314:	4b04      	ldr	r3, [pc, #16]	; (8005328 <pbuf_free_custom+0x30>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
  }
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	08012ad0 	.word	0x08012ad0
 8005328:	20005150 	.word	0x20005150

0800532c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005330:	f7fb feb2 	bl	8001098 <HAL_GetTick>
 8005334:	4603      	mov	r3, r0
}
 8005336:	4618      	mov	r0, r3
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08e      	sub	sp, #56	; 0x38
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a56      	ldr	r2, [pc, #344]	; (80054b4 <HAL_ETH_MspInit+0x178>)
 800535a:	4293      	cmp	r3, r2
 800535c:	f040 80a6 	bne.w	80054ac <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005360:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	4a54      	ldr	r2, [pc, #336]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 8005366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800536a:	6313      	str	r3, [r2, #48]	; 0x30
 800536c:	4b52      	ldr	r3, [pc, #328]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a4e      	ldr	r2, [pc, #312]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 800537e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005382:	6313      	str	r3, [r2, #48]	; 0x30
 8005384:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4b49      	ldr	r3, [pc, #292]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	4a48      	ldr	r2, [pc, #288]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 8005396:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800539a:	6313      	str	r3, [r2, #48]	; 0x30
 800539c:	4b46      	ldr	r3, [pc, #280]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053a8:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	4a42      	ldr	r2, [pc, #264]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	6313      	str	r3, [r2, #48]	; 0x30
 80053b4:	4b40      	ldr	r3, [pc, #256]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c0:	4b3d      	ldr	r3, [pc, #244]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	4a3c      	ldr	r2, [pc, #240]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6313      	str	r3, [r2, #48]	; 0x30
 80053cc:	4b3a      	ldr	r3, [pc, #232]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053d8:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	4a36      	ldr	r2, [pc, #216]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053de:	f043 0302 	orr.w	r3, r3, #2
 80053e2:	6313      	str	r3, [r2, #48]	; 0x30
 80053e4:	4b34      	ldr	r3, [pc, #208]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80053f0:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	4a30      	ldr	r2, [pc, #192]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fa:	6313      	str	r3, [r2, #48]	; 0x30
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <HAL_ETH_MspInit+0x17c>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005408:	2332      	movs	r3, #50	; 0x32
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540c:	2302      	movs	r3, #2
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005414:	2303      	movs	r3, #3
 8005416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005418:	230b      	movs	r3, #11
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800541c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005420:	4619      	mov	r1, r3
 8005422:	4826      	ldr	r0, [pc, #152]	; (80054bc <HAL_ETH_MspInit+0x180>)
 8005424:	f7fd f960 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005428:	2386      	movs	r3, #134	; 0x86
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542c:	2302      	movs	r3, #2
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005430:	2300      	movs	r3, #0
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005434:	2303      	movs	r3, #3
 8005436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005438:	230b      	movs	r3, #11
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800543c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005440:	4619      	mov	r1, r3
 8005442:	481f      	ldr	r0, [pc, #124]	; (80054c0 <HAL_ETH_MspInit+0x184>)
 8005444:	f7fd f950 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544e:	2302      	movs	r3, #2
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005452:	2300      	movs	r3, #0
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005456:	2303      	movs	r3, #3
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800545a:	230b      	movs	r3, #11
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800545e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005462:	4619      	mov	r1, r3
 8005464:	4817      	ldr	r0, [pc, #92]	; (80054c4 <HAL_ETH_MspInit+0x188>)
 8005466:	f7fd f93f 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800546a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005470:	2302      	movs	r3, #2
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005474:	2300      	movs	r3, #0
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005478:	2303      	movs	r3, #3
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800547c:	230b      	movs	r3, #11
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005484:	4619      	mov	r1, r3
 8005486:	4810      	ldr	r0, [pc, #64]	; (80054c8 <HAL_ETH_MspInit+0x18c>)
 8005488:	f7fd f92e 	bl	80026e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800548c:	2200      	movs	r2, #0
 800548e:	2100      	movs	r1, #0
 8005490:	203d      	movs	r0, #61	; 0x3d
 8005492:	f7fb ff0c 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005496:	203d      	movs	r0, #61	; 0x3d
 8005498:	f7fb ff25 	bl	80012e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800549c:	2200      	movs	r2, #0
 800549e:	2100      	movs	r1, #0
 80054a0:	203e      	movs	r0, #62	; 0x3e
 80054a2:	f7fb ff04 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80054a6:	203e      	movs	r0, #62	; 0x3e
 80054a8:	f7fb ff1d 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80054ac:	bf00      	nop
 80054ae:	3738      	adds	r7, #56	; 0x38
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40028000 	.word	0x40028000
 80054b8:	40023800 	.word	0x40023800
 80054bc:	40020800 	.word	0x40020800
 80054c0:	40020000 	.word	0x40020000
 80054c4:	40020400 	.word	0x40020400
 80054c8:	40021800 	.word	0x40021800

080054cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80054d0:	4802      	ldr	r0, [pc, #8]	; (80054dc <ETH_PHY_IO_Init+0x10>)
 80054d2:	f7fc fcaf 	bl	8001e34 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20005154 	.word	0x20005154

080054e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return 0;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	4807      	ldr	r0, [pc, #28]	; (8005520 <ETH_PHY_IO_ReadReg+0x30>)
 8005504:	f7fc fafe 	bl	8001b04 <HAL_ETH_ReadPHYRegister>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800550e:	f04f 33ff 	mov.w	r3, #4294967295
 8005512:	e000      	b.n	8005516 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20005154 	.word	0x20005154

08005524 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	68f9      	ldr	r1, [r7, #12]
 8005536:	4807      	ldr	r0, [pc, #28]	; (8005554 <ETH_PHY_IO_WriteReg+0x30>)
 8005538:	f7fc fb2f 	bl	8001b9a <HAL_ETH_WritePHYRegister>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	e000      	b.n	800554a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20005154 	.word	0x20005154

08005558 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800555c:	f7fb fd9c 	bl	8001098 <HAL_GetTick>
 8005560:	4603      	mov	r3, r0
}
 8005562:	4618      	mov	r0, r3
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b0a0      	sub	sp, #128	; 0x80
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005570:	f107 030c 	add.w	r3, r7, #12
 8005574:	2264      	movs	r2, #100	; 0x64
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f009 fef6 	bl	800f36a <memset>
  int32_t PHYLinkState = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005586:	2300      	movs	r3, #0
 8005588:	67bb      	str	r3, [r7, #120]	; 0x78
 800558a:	2300      	movs	r3, #0
 800558c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800558e:	483a      	ldr	r0, [pc, #232]	; (8005678 <ethernet_link_check_state+0x110>)
 8005590:	f7fb fca9 	bl	8000ee6 <LAN8742_GetLinkState>
 8005594:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <ethernet_link_check_state+0x5a>
 80055a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	dc09      	bgt.n	80055c2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80055ae:	4833      	ldr	r0, [pc, #204]	; (800567c <ethernet_link_check_state+0x114>)
 80055b0:	f7fb ff8f 	bl	80014d2 <HAL_ETH_Stop>
    netif_set_down(netif);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 f81d 	bl	80065f4 <netif_set_down>
    netif_set_link_down(netif);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 f880 	bl	80066c0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80055c0:	e055      	b.n	800566e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d14e      	bne.n	800566e <ethernet_link_check_state+0x106>
 80055d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	dd4b      	ble.n	800566e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80055d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d8:	3b02      	subs	r3, #2
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d82a      	bhi.n	8005634 <ethernet_link_check_state+0xcc>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <ethernet_link_check_state+0x7c>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	08005607 	.word	0x08005607
 80055ec:	08005617 	.word	0x08005617
 80055f0:	08005627 	.word	0x08005627
      duplex = ETH_FULLDUPLEX_MODE;
 80055f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80055fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005600:	2301      	movs	r3, #1
 8005602:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005604:	e017      	b.n	8005636 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005606:	2300      	movs	r3, #0
 8005608:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800560a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800560e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005610:	2301      	movs	r3, #1
 8005612:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005614:	e00f      	b.n	8005636 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800561a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800561c:	2300      	movs	r3, #0
 800561e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005620:	2301      	movs	r3, #1
 8005622:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005624:	e007      	b.n	8005636 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005626:	2300      	movs	r3, #0
 8005628:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800562a:	2300      	movs	r3, #0
 800562c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800562e:	2301      	movs	r3, #1
 8005630:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005632:	e000      	b.n	8005636 <ethernet_link_check_state+0xce>
      break;
 8005634:	bf00      	nop
    if(linkchanged)
 8005636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d018      	beq.n	800566e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800563c:	f107 030c 	add.w	r3, r7, #12
 8005640:	4619      	mov	r1, r3
 8005642:	480e      	ldr	r0, [pc, #56]	; (800567c <ethernet_link_check_state+0x114>)
 8005644:	f7fc faf2 	bl	8001c2c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800564c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	4619      	mov	r1, r3
 8005656:	4809      	ldr	r0, [pc, #36]	; (800567c <ethernet_link_check_state+0x114>)
 8005658:	f7fc fbd2 	bl	8001e00 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800565c:	4807      	ldr	r0, [pc, #28]	; (800567c <ethernet_link_check_state+0x114>)
 800565e:	f7fb fed9 	bl	8001414 <HAL_ETH_Start>
      netif_set_up(netif);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 ff5a 	bl	800651c <netif_set_up>
      netif_set_link_up(netif);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fff5 	bl	8006658 <netif_set_link_up>
}
 800566e:	bf00      	nop
 8005670:	3780      	adds	r7, #128	; 0x80
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	2000523c 	.word	0x2000523c
 800567c:	20005154 	.word	0x20005154

08005680 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af02      	add	r7, sp, #8
 8005686:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005688:	4812      	ldr	r0, [pc, #72]	; (80056d4 <HAL_ETH_RxAllocateCallback+0x54>)
 800568a:	f000 fcc1 	bl	8006010 <memp_malloc_pool>
 800568e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d014      	beq.n	80056c0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f103 0220 	add.w	r2, r3, #32
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a0d      	ldr	r2, [pc, #52]	; (80056d8 <HAL_ETH_RxAllocateCallback+0x58>)
 80056a4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80056ae:	9201      	str	r2, [sp, #4]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2241      	movs	r2, #65	; 0x41
 80056b6:	2100      	movs	r1, #0
 80056b8:	2000      	movs	r0, #0
 80056ba:	f001 f9d7 	bl	8006a6c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80056be:	e005      	b.n	80056cc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_ETH_RxAllocateCallback+0x5c>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	08012ad0 	.word	0x08012ad0
 80056d8:	080052f9 	.word	0x080052f9
 80056dc:	20005150 	.word	0x20005150

080056e0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3b20      	subs	r3, #32
 80056fe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2200      	movs	r2, #0
 800570a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e003      	b.n	800572a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	e009      	b.n	800574c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	891a      	ldrh	r2, [r3, #8]
 800573c:	887b      	ldrh	r3, [r7, #2]
 800573e:	4413      	add	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f2      	bne.n	8005738 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fc20 	bl	8004f9c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800575c:	bf00      	nop
 800575e:	3720      	adds	r7, #32
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	b21a      	sxth	r2, r3
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	b29b      	uxth	r3, r3
 800577a:	b21b      	sxth	r3, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	b21b      	sxth	r3, r3
 8005780:	b29b      	uxth	r3, r3
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	061a      	lsls	r2, r3, #24
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0e1b      	lsrs	r3, r3, #24
 80057b2:	4313      	orrs	r3, r2
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80057ca:	f000 f8d5 	bl	8005978 <mem_init>
  memp_init();
 80057ce:	f000 fbdb 	bl	8005f88 <memp_init>
  pbuf_init();
  netif_init();
 80057d2:	f000 fcd9 	bl	8006188 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80057d6:	f006 fff5 	bl	800c7c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80057da:	f001 fd8f 	bl	80072fc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80057de:	f006 ffa9 	bl	800c734 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <ptr_to_mem+0x20>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	4413      	add	r3, r2
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	200058c8 	.word	0x200058c8

08005810 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <mem_to_ptr+0x20>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	b29b      	uxth	r3, r3
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	200058c8 	.word	0x200058c8

08005834 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005834:	b590      	push	{r4, r7, lr}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800583c:	4b45      	ldr	r3, [pc, #276]	; (8005954 <plug_holes+0x120>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d206      	bcs.n	8005854 <plug_holes+0x20>
 8005846:	4b44      	ldr	r3, [pc, #272]	; (8005958 <plug_holes+0x124>)
 8005848:	f240 12df 	movw	r2, #479	; 0x1df
 800584c:	4943      	ldr	r1, [pc, #268]	; (800595c <plug_holes+0x128>)
 800584e:	4844      	ldr	r0, [pc, #272]	; (8005960 <plug_holes+0x12c>)
 8005850:	f009 fd26 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005854:	4b43      	ldr	r3, [pc, #268]	; (8005964 <plug_holes+0x130>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d306      	bcc.n	800586c <plug_holes+0x38>
 800585e:	4b3e      	ldr	r3, [pc, #248]	; (8005958 <plug_holes+0x124>)
 8005860:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005864:	4940      	ldr	r1, [pc, #256]	; (8005968 <plug_holes+0x134>)
 8005866:	483e      	ldr	r0, [pc, #248]	; (8005960 <plug_holes+0x12c>)
 8005868:	f009 fd1a 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	791b      	ldrb	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d006      	beq.n	8005882 <plug_holes+0x4e>
 8005874:	4b38      	ldr	r3, [pc, #224]	; (8005958 <plug_holes+0x124>)
 8005876:	f240 12e1 	movw	r2, #481	; 0x1e1
 800587a:	493c      	ldr	r1, [pc, #240]	; (800596c <plug_holes+0x138>)
 800587c:	4838      	ldr	r0, [pc, #224]	; (8005960 <plug_holes+0x12c>)
 800587e:	f009 fd0f 	bl	800f2a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800588a:	d906      	bls.n	800589a <plug_holes+0x66>
 800588c:	4b32      	ldr	r3, [pc, #200]	; (8005958 <plug_holes+0x124>)
 800588e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005892:	4937      	ldr	r1, [pc, #220]	; (8005970 <plug_holes+0x13c>)
 8005894:	4832      	ldr	r0, [pc, #200]	; (8005960 <plug_holes+0x12c>)
 8005896:	f009 fd03 	bl	800f2a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff ffa4 	bl	80057ec <ptr_to_mem>
 80058a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d024      	beq.n	80058f8 <plug_holes+0xc4>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	791b      	ldrb	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d120      	bne.n	80058f8 <plug_holes+0xc4>
 80058b6:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <plug_holes+0x130>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d01b      	beq.n	80058f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80058c0:	4b2c      	ldr	r3, [pc, #176]	; (8005974 <plug_holes+0x140>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d102      	bne.n	80058d0 <plug_holes+0x9c>
      lfree = mem;
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <plug_holes+0x140>)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058e0:	d00a      	beq.n	80058f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff ff80 	bl	80057ec <ptr_to_mem>
 80058ec:	4604      	mov	r4, r0
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff ff8e 	bl	8005810 <mem_to_ptr>
 80058f4:	4603      	mov	r3, r0
 80058f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	885b      	ldrh	r3, [r3, #2]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff ff75 	bl	80057ec <ptr_to_mem>
 8005902:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d01f      	beq.n	800594c <plug_holes+0x118>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	791b      	ldrb	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d11b      	bne.n	800594c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005914:	4b17      	ldr	r3, [pc, #92]	; (8005974 <plug_holes+0x140>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d102      	bne.n	8005924 <plug_holes+0xf0>
      lfree = pmem;
 800591e:	4a15      	ldr	r2, [pc, #84]	; (8005974 <plug_holes+0x140>)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005934:	d00a      	beq.n	800594c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff ff56 	bl	80057ec <ptr_to_mem>
 8005940:	4604      	mov	r4, r0
 8005942:	68b8      	ldr	r0, [r7, #8]
 8005944:	f7ff ff64 	bl	8005810 <mem_to_ptr>
 8005948:	4603      	mov	r3, r0
 800594a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	bd90      	pop	{r4, r7, pc}
 8005954:	200058c8 	.word	0x200058c8
 8005958:	0801012c 	.word	0x0801012c
 800595c:	0801015c 	.word	0x0801015c
 8005960:	08010174 	.word	0x08010174
 8005964:	200058cc 	.word	0x200058cc
 8005968:	0801019c 	.word	0x0801019c
 800596c:	080101b8 	.word	0x080101b8
 8005970:	080101d4 	.word	0x080101d4
 8005974:	200058d0 	.word	0x200058d0

08005978 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800597e:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <mem_init+0x68>)
 8005980:	3303      	adds	r3, #3
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	461a      	mov	r2, r3
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <mem_init+0x6c>)
 800598a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800598c:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <mem_init+0x6c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005998:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80059a6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80059aa:	f7ff ff1f 	bl	80057ec <ptr_to_mem>
 80059ae:	4603      	mov	r3, r0
 80059b0:	4a0d      	ldr	r2, [pc, #52]	; (80059e8 <mem_init+0x70>)
 80059b2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <mem_init+0x70>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <mem_init+0x70>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80059c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80059c6:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <mem_init+0x70>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80059ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <mem_init+0x6c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a05      	ldr	r2, [pc, #20]	; (80059ec <mem_init+0x74>)
 80059d6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20005274 	.word	0x20005274
 80059e4:	200058c8 	.word	0x200058c8
 80059e8:	200058cc 	.word	0x200058cc
 80059ec:	200058d0 	.word	0x200058d0

080059f0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff ff09 	bl	8005810 <mem_to_ptr>
 80059fe:	4603      	mov	r3, r0
 8005a00:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fef0 	bl	80057ec <ptr_to_mem>
 8005a0c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	885b      	ldrh	r3, [r3, #2]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff feea 	bl	80057ec <ptr_to_mem>
 8005a18:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a22:	d818      	bhi.n	8005a56 <mem_link_valid+0x66>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a2c:	d813      	bhi.n	8005a56 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005a32:	8afa      	ldrh	r2, [r7, #22]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d004      	beq.n	8005a42 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	8afa      	ldrh	r2, [r7, #22]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d109      	bne.n	8005a56 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <mem_link_valid+0x74>)
 8005a44:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d006      	beq.n	8005a5a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	885b      	ldrh	r3, [r3, #2]
 8005a50:	8afa      	ldrh	r2, [r7, #22]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d001      	beq.n	8005a5a <mem_link_valid+0x6a>
    return 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e000      	b.n	8005a5c <mem_link_valid+0x6c>
  }
  return 1;
 8005a5a:	2301      	movs	r3, #1
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	200058cc 	.word	0x200058cc

08005a68 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d04c      	beq.n	8005b10 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005a80:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <mem_free+0xb0>)
 8005a82:	f240 2273 	movw	r2, #627	; 0x273
 8005a86:	4925      	ldr	r1, [pc, #148]	; (8005b1c <mem_free+0xb4>)
 8005a88:	4825      	ldr	r0, [pc, #148]	; (8005b20 <mem_free+0xb8>)
 8005a8a:	f009 fc09 	bl	800f2a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a8e:	e040      	b.n	8005b12 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3b08      	subs	r3, #8
 8005a94:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005a96:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <mem_free+0xbc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d306      	bcc.n	8005aae <mem_free+0x46>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f103 020c 	add.w	r2, r3, #12
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <mem_free+0xc0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d907      	bls.n	8005abe <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005aae:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <mem_free+0xb0>)
 8005ab0:	f240 227f 	movw	r2, #639	; 0x27f
 8005ab4:	491d      	ldr	r1, [pc, #116]	; (8005b2c <mem_free+0xc4>)
 8005ab6:	481a      	ldr	r0, [pc, #104]	; (8005b20 <mem_free+0xb8>)
 8005ab8:	f009 fbf2 	bl	800f2a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005abc:	e029      	b.n	8005b12 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	791b      	ldrb	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d107      	bne.n	8005ad6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005ac6:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <mem_free+0xb0>)
 8005ac8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005acc:	4918      	ldr	r1, [pc, #96]	; (8005b30 <mem_free+0xc8>)
 8005ace:	4814      	ldr	r0, [pc, #80]	; (8005b20 <mem_free+0xb8>)
 8005ad0:	f009 fbe6 	bl	800f2a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ad4:	e01d      	b.n	8005b12 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7ff ff8a 	bl	80059f0 <mem_link_valid>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d107      	bne.n	8005af2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <mem_free+0xb0>)
 8005ae4:	f240 2295 	movw	r2, #661	; 0x295
 8005ae8:	4912      	ldr	r1, [pc, #72]	; (8005b34 <mem_free+0xcc>)
 8005aea:	480d      	ldr	r0, [pc, #52]	; (8005b20 <mem_free+0xb8>)
 8005aec:	f009 fbd8 	bl	800f2a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005af0:	e00f      	b.n	8005b12 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <mem_free+0xd0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d202      	bcs.n	8005b08 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005b02:	4a0d      	ldr	r2, [pc, #52]	; (8005b38 <mem_free+0xd0>)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff fe93 	bl	8005834 <plug_holes>
 8005b0e:	e000      	b.n	8005b12 <mem_free+0xaa>
    return;
 8005b10:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	0801012c 	.word	0x0801012c
 8005b1c:	08010200 	.word	0x08010200
 8005b20:	08010174 	.word	0x08010174
 8005b24:	200058c8 	.word	0x200058c8
 8005b28:	200058cc 	.word	0x200058cc
 8005b2c:	08010224 	.word	0x08010224
 8005b30:	08010240 	.word	0x08010240
 8005b34:	08010268 	.word	0x08010268
 8005b38:	200058d0 	.word	0x200058d0

08005b3c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	3303      	adds	r3, #3
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005b54:	8bfb      	ldrh	r3, [r7, #30]
 8005b56:	2b0b      	cmp	r3, #11
 8005b58:	d801      	bhi.n	8005b5e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005b5e:	8bfb      	ldrh	r3, [r7, #30]
 8005b60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b64:	d803      	bhi.n	8005b6e <mem_trim+0x32>
 8005b66:	8bfa      	ldrh	r2, [r7, #30]
 8005b68:	887b      	ldrh	r3, [r7, #2]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d201      	bcs.n	8005b72 <mem_trim+0x36>
    return NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e0cc      	b.n	8005d0c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005b72:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <mem_trim+0x1d8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d304      	bcc.n	8005b86 <mem_trim+0x4a>
 8005b7c:	4b66      	ldr	r3, [pc, #408]	; (8005d18 <mem_trim+0x1dc>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d306      	bcc.n	8005b94 <mem_trim+0x58>
 8005b86:	4b65      	ldr	r3, [pc, #404]	; (8005d1c <mem_trim+0x1e0>)
 8005b88:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005b8c:	4964      	ldr	r1, [pc, #400]	; (8005d20 <mem_trim+0x1e4>)
 8005b8e:	4865      	ldr	r0, [pc, #404]	; (8005d24 <mem_trim+0x1e8>)
 8005b90:	f009 fb86 	bl	800f2a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005b94:	4b5f      	ldr	r3, [pc, #380]	; (8005d14 <mem_trim+0x1d8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d304      	bcc.n	8005ba8 <mem_trim+0x6c>
 8005b9e:	4b5e      	ldr	r3, [pc, #376]	; (8005d18 <mem_trim+0x1dc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d301      	bcc.n	8005bac <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	e0af      	b.n	8005d0c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3b08      	subs	r3, #8
 8005bb0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005bb2:	69b8      	ldr	r0, [r7, #24]
 8005bb4:	f7ff fe2c 	bl	8005810 <mem_to_ptr>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	881a      	ldrh	r2, [r3, #0]
 8005bc0:	8afb      	ldrh	r3, [r7, #22]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b08      	subs	r3, #8
 8005bc8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005bca:	8bfa      	ldrh	r2, [r7, #30]
 8005bcc:	8abb      	ldrh	r3, [r7, #20]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d906      	bls.n	8005be0 <mem_trim+0xa4>
 8005bd2:	4b52      	ldr	r3, [pc, #328]	; (8005d1c <mem_trim+0x1e0>)
 8005bd4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005bd8:	4953      	ldr	r1, [pc, #332]	; (8005d28 <mem_trim+0x1ec>)
 8005bda:	4852      	ldr	r0, [pc, #328]	; (8005d24 <mem_trim+0x1e8>)
 8005bdc:	f009 fb60 	bl	800f2a0 <iprintf>
  if (newsize > size) {
 8005be0:	8bfa      	ldrh	r2, [r7, #30]
 8005be2:	8abb      	ldrh	r3, [r7, #20]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d901      	bls.n	8005bec <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	e08f      	b.n	8005d0c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005bec:	8bfa      	ldrh	r2, [r7, #30]
 8005bee:	8abb      	ldrh	r3, [r7, #20]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d101      	bne.n	8005bf8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	e089      	b.n	8005d0c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fdf5 	bl	80057ec <ptr_to_mem>
 8005c02:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	791b      	ldrb	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d13f      	bne.n	8005c8c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c14:	d106      	bne.n	8005c24 <mem_trim+0xe8>
 8005c16:	4b41      	ldr	r3, [pc, #260]	; (8005d1c <mem_trim+0x1e0>)
 8005c18:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005c1c:	4943      	ldr	r1, [pc, #268]	; (8005d2c <mem_trim+0x1f0>)
 8005c1e:	4841      	ldr	r0, [pc, #260]	; (8005d24 <mem_trim+0x1e8>)
 8005c20:	f009 fb3e 	bl	800f2a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c2a:	8afa      	ldrh	r2, [r7, #22]
 8005c2c:	8bfb      	ldrh	r3, [r7, #30]
 8005c2e:	4413      	add	r3, r2
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3308      	adds	r3, #8
 8005c34:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005c36:	4b3e      	ldr	r3, [pc, #248]	; (8005d30 <mem_trim+0x1f4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d106      	bne.n	8005c4e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005c40:	89fb      	ldrh	r3, [r7, #14]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fdd2 	bl	80057ec <ptr_to_mem>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4a39      	ldr	r2, [pc, #228]	; (8005d30 <mem_trim+0x1f4>)
 8005c4c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005c4e:	89fb      	ldrh	r3, [r7, #14]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fdcb 	bl	80057ec <ptr_to_mem>
 8005c56:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	89ba      	ldrh	r2, [r7, #12]
 8005c62:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	8afa      	ldrh	r2, [r7, #22]
 8005c68:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	89fa      	ldrh	r2, [r7, #14]
 8005c6e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c78:	d047      	beq.n	8005d0a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fdb4 	bl	80057ec <ptr_to_mem>
 8005c84:	4602      	mov	r2, r0
 8005c86:	89fb      	ldrh	r3, [r7, #14]
 8005c88:	8053      	strh	r3, [r2, #2]
 8005c8a:	e03e      	b.n	8005d0a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005c8c:	8bfb      	ldrh	r3, [r7, #30]
 8005c8e:	f103 0214 	add.w	r2, r3, #20
 8005c92:	8abb      	ldrh	r3, [r7, #20]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d838      	bhi.n	8005d0a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c98:	8afa      	ldrh	r2, [r7, #22]
 8005c9a:	8bfb      	ldrh	r3, [r7, #30]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cac:	d106      	bne.n	8005cbc <mem_trim+0x180>
 8005cae:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <mem_trim+0x1e0>)
 8005cb0:	f240 3216 	movw	r2, #790	; 0x316
 8005cb4:	491d      	ldr	r1, [pc, #116]	; (8005d2c <mem_trim+0x1f0>)
 8005cb6:	481b      	ldr	r0, [pc, #108]	; (8005d24 <mem_trim+0x1e8>)
 8005cb8:	f009 faf2 	bl	800f2a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005cbc:	89fb      	ldrh	r3, [r7, #14]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fd94 	bl	80057ec <ptr_to_mem>
 8005cc4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005cc6:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <mem_trim+0x1f4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d202      	bcs.n	8005cd6 <mem_trim+0x19a>
      lfree = mem2;
 8005cd0:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <mem_trim+0x1f4>)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	881a      	ldrh	r2, [r3, #0]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	8afa      	ldrh	r2, [r7, #22]
 8005ce8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	89fa      	ldrh	r2, [r7, #14]
 8005cee:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cf8:	d007      	beq.n	8005d0a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fd74 	bl	80057ec <ptr_to_mem>
 8005d04:	4602      	mov	r2, r0
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005d0a:	687b      	ldr	r3, [r7, #4]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	200058c8 	.word	0x200058c8
 8005d18:	200058cc 	.word	0x200058cc
 8005d1c:	0801012c 	.word	0x0801012c
 8005d20:	0801029c 	.word	0x0801029c
 8005d24:	08010174 	.word	0x08010174
 8005d28:	080102b4 	.word	0x080102b4
 8005d2c:	080102d4 	.word	0x080102d4
 8005d30:	200058d0 	.word	0x200058d0

08005d34 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <mem_malloc+0x14>
    return NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e0d9      	b.n	8005efc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	3303      	adds	r3, #3
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005d54:	8bbb      	ldrh	r3, [r7, #28]
 8005d56:	2b0b      	cmp	r3, #11
 8005d58:	d801      	bhi.n	8005d5e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005d5e:	8bbb      	ldrh	r3, [r7, #28]
 8005d60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d64:	d803      	bhi.n	8005d6e <mem_malloc+0x3a>
 8005d66:	8bba      	ldrh	r2, [r7, #28]
 8005d68:	88fb      	ldrh	r3, [r7, #6]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d201      	bcs.n	8005d72 <mem_malloc+0x3e>
    return NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e0c4      	b.n	8005efc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005d72:	4b64      	ldr	r3, [pc, #400]	; (8005f04 <mem_malloc+0x1d0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fd4a 	bl	8005810 <mem_to_ptr>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	83fb      	strh	r3, [r7, #30]
 8005d80:	e0b4      	b.n	8005eec <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005d82:	8bfb      	ldrh	r3, [r7, #30]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fd31 	bl	80057ec <ptr_to_mem>
 8005d8a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f040 80a4 	bne.w	8005ede <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	8bfb      	ldrh	r3, [r7, #30]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f1a3 0208 	sub.w	r2, r3, #8
 8005da4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005da6:	429a      	cmp	r2, r3
 8005da8:	f0c0 8099 	bcc.w	8005ede <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	8bfb      	ldrh	r3, [r7, #30]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f1a3 0208 	sub.w	r2, r3, #8
 8005dba:	8bbb      	ldrh	r3, [r7, #28]
 8005dbc:	3314      	adds	r3, #20
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d333      	bcc.n	8005e2a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005dc2:	8bfa      	ldrh	r2, [r7, #30]
 8005dc4:	8bbb      	ldrh	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3308      	adds	r3, #8
 8005dcc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005dce:	8a7b      	ldrh	r3, [r7, #18]
 8005dd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dd4:	d106      	bne.n	8005de4 <mem_malloc+0xb0>
 8005dd6:	4b4c      	ldr	r3, [pc, #304]	; (8005f08 <mem_malloc+0x1d4>)
 8005dd8:	f240 3287 	movw	r2, #903	; 0x387
 8005ddc:	494b      	ldr	r1, [pc, #300]	; (8005f0c <mem_malloc+0x1d8>)
 8005dde:	484c      	ldr	r0, [pc, #304]	; (8005f10 <mem_malloc+0x1dc>)
 8005de0:	f009 fa5e 	bl	800f2a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005de4:	8a7b      	ldrh	r3, [r7, #18]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fd00 	bl	80057ec <ptr_to_mem>
 8005dec:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	881a      	ldrh	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8bfa      	ldrh	r2, [r7, #30]
 8005e00:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	8a7a      	ldrh	r2, [r7, #18]
 8005e06:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e16:	d00b      	beq.n	8005e30 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fce5 	bl	80057ec <ptr_to_mem>
 8005e22:	4602      	mov	r2, r0
 8005e24:	8a7b      	ldrh	r3, [r7, #18]
 8005e26:	8053      	strh	r3, [r2, #2]
 8005e28:	e002      	b.n	8005e30 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005e30:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <mem_malloc+0x1d0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d127      	bne.n	8005e8a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005e3a:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <mem_malloc+0x1d0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005e40:	e005      	b.n	8005e4e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fcd0 	bl	80057ec <ptr_to_mem>
 8005e4c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	791b      	ldrb	r3, [r3, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <mem_malloc+0x12c>
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <mem_malloc+0x1e0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1f0      	bne.n	8005e42 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005e60:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <mem_malloc+0x1d0>)
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005e66:	4b27      	ldr	r3, [pc, #156]	; (8005f04 <mem_malloc+0x1d0>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	; (8005f14 <mem_malloc+0x1e0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d00b      	beq.n	8005e8a <mem_malloc+0x156>
 8005e72:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <mem_malloc+0x1d0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	791b      	ldrb	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d006      	beq.n	8005e8a <mem_malloc+0x156>
 8005e7c:	4b22      	ldr	r3, [pc, #136]	; (8005f08 <mem_malloc+0x1d4>)
 8005e7e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005e82:	4925      	ldr	r1, [pc, #148]	; (8005f18 <mem_malloc+0x1e4>)
 8005e84:	4822      	ldr	r0, [pc, #136]	; (8005f10 <mem_malloc+0x1dc>)
 8005e86:	f009 fa0b 	bl	800f2a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005e8a:	8bba      	ldrh	r2, [r7, #28]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	4413      	add	r3, r2
 8005e90:	3308      	adds	r3, #8
 8005e92:	4a20      	ldr	r2, [pc, #128]	; (8005f14 <mem_malloc+0x1e0>)
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d906      	bls.n	8005ea8 <mem_malloc+0x174>
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <mem_malloc+0x1d4>)
 8005e9c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005ea0:	491e      	ldr	r1, [pc, #120]	; (8005f1c <mem_malloc+0x1e8>)
 8005ea2:	481b      	ldr	r0, [pc, #108]	; (8005f10 <mem_malloc+0x1dc>)
 8005ea4:	f009 f9fc 	bl	800f2a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <mem_malloc+0x18c>
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <mem_malloc+0x1d4>)
 8005eb4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005eb8:	4919      	ldr	r1, [pc, #100]	; (8005f20 <mem_malloc+0x1ec>)
 8005eba:	4815      	ldr	r0, [pc, #84]	; (8005f10 <mem_malloc+0x1dc>)
 8005ebc:	f009 f9f0 	bl	800f2a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <mem_malloc+0x1a4>
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <mem_malloc+0x1d4>)
 8005ecc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005ed0:	4914      	ldr	r1, [pc, #80]	; (8005f24 <mem_malloc+0x1f0>)
 8005ed2:	480f      	ldr	r0, [pc, #60]	; (8005f10 <mem_malloc+0x1dc>)
 8005ed4:	f009 f9e4 	bl	800f2a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3308      	adds	r3, #8
 8005edc:	e00e      	b.n	8005efc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005ede:	8bfb      	ldrh	r3, [r7, #30]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fc83 	bl	80057ec <ptr_to_mem>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005eec:	8bfa      	ldrh	r2, [r7, #30]
 8005eee:	8bbb      	ldrh	r3, [r7, #28]
 8005ef0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	f4ff af44 	bcc.w	8005d82 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200058d0 	.word	0x200058d0
 8005f08:	0801012c 	.word	0x0801012c
 8005f0c:	080102d4 	.word	0x080102d4
 8005f10:	08010174 	.word	0x08010174
 8005f14:	200058cc 	.word	0x200058cc
 8005f18:	080102e8 	.word	0x080102e8
 8005f1c:	08010304 	.word	0x08010304
 8005f20:	08010334 	.word	0x08010334
 8005f24:	08010364 	.word	0x08010364

08005f28 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	3303      	adds	r3, #3
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e011      	b.n	8005f6e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	885b      	ldrh	r3, [r3, #2]
 8005f72:	461a      	mov	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4293      	cmp	r3, r2
 8005f78:	dbe7      	blt.n	8005f4a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f8e:	2300      	movs	r3, #0
 8005f90:	80fb      	strh	r3, [r7, #6]
 8005f92:	e009      	b.n	8005fa8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <memp_init+0x30>)
 8005f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff ffc3 	bl	8005f28 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	80fb      	strh	r3, [r7, #6]
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d9f2      	bls.n	8005f94 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	08012b48 	.word	0x08012b48

08005fbc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d012      	beq.n	8005ff8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <do_memp_malloc_pool+0x38>
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <do_memp_malloc_pool+0x48>)
 8005fe8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005fec:	4906      	ldr	r1, [pc, #24]	; (8006008 <do_memp_malloc_pool+0x4c>)
 8005fee:	4807      	ldr	r0, [pc, #28]	; (800600c <do_memp_malloc_pool+0x50>)
 8005ff0:	f009 f956 	bl	800f2a0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	e000      	b.n	8005ffa <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	08010388 	.word	0x08010388
 8006008:	080103b8 	.word	0x080103b8
 800600c:	080103dc 	.word	0x080103dc

08006010 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <memp_malloc_pool+0x1c>
 800601e:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <memp_malloc_pool+0x38>)
 8006020:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006024:	4909      	ldr	r1, [pc, #36]	; (800604c <memp_malloc_pool+0x3c>)
 8006026:	480a      	ldr	r0, [pc, #40]	; (8006050 <memp_malloc_pool+0x40>)
 8006028:	f009 f93a 	bl	800f2a0 <iprintf>
  if (desc == NULL) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <memp_malloc_pool+0x26>
    return NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	e003      	b.n	800603e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ffc0 	bl	8005fbc <do_memp_malloc_pool>
 800603c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	08010388 	.word	0x08010388
 800604c:	08010404 	.word	0x08010404
 8006050:	080103dc 	.word	0x080103dc

08006054 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	2b08      	cmp	r3, #8
 8006062:	d908      	bls.n	8006076 <memp_malloc+0x22>
 8006064:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <memp_malloc+0x3c>)
 8006066:	f240 1257 	movw	r2, #343	; 0x157
 800606a:	490a      	ldr	r1, [pc, #40]	; (8006094 <memp_malloc+0x40>)
 800606c:	480a      	ldr	r0, [pc, #40]	; (8006098 <memp_malloc+0x44>)
 800606e:	f009 f917 	bl	800f2a0 <iprintf>
 8006072:	2300      	movs	r3, #0
 8006074:	e008      	b.n	8006088 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	4a08      	ldr	r2, [pc, #32]	; (800609c <memp_malloc+0x48>)
 800607a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff ff9c 	bl	8005fbc <do_memp_malloc_pool>
 8006084:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006086:	68fb      	ldr	r3, [r7, #12]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	08010388 	.word	0x08010388
 8006094:	08010418 	.word	0x08010418
 8006098:	080103dc 	.word	0x080103dc
 800609c:	08012b48 	.word	0x08012b48

080060a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <do_memp_free_pool+0x22>
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <do_memp_free_pool+0x40>)
 80060b6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80060ba:	490a      	ldr	r1, [pc, #40]	; (80060e4 <do_memp_free_pool+0x44>)
 80060bc:	480a      	ldr	r0, [pc, #40]	; (80060e8 <do_memp_free_pool+0x48>)
 80060be:	f009 f8ef 	bl	800f2a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	08010388 	.word	0x08010388
 80060e4:	08010438 	.word	0x08010438
 80060e8:	080103dc 	.word	0x080103dc

080060ec <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <memp_free_pool+0x1e>
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <memp_free_pool+0x3c>)
 80060fe:	f240 1295 	movw	r2, #405	; 0x195
 8006102:	490a      	ldr	r1, [pc, #40]	; (800612c <memp_free_pool+0x40>)
 8006104:	480a      	ldr	r0, [pc, #40]	; (8006130 <memp_free_pool+0x44>)
 8006106:	f009 f8cb 	bl	800f2a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <memp_free_pool+0x34>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d004      	beq.n	8006120 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff ffc1 	bl	80060a0 <do_memp_free_pool>
 800611e:	e000      	b.n	8006122 <memp_free_pool+0x36>
    return;
 8006120:	bf00      	nop
}
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	08010388 	.word	0x08010388
 800612c:	08010404 	.word	0x08010404
 8006130:	080103dc 	.word	0x080103dc

08006134 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	2b08      	cmp	r3, #8
 8006144:	d907      	bls.n	8006156 <memp_free+0x22>
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <memp_free+0x44>)
 8006148:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800614c:	490b      	ldr	r1, [pc, #44]	; (800617c <memp_free+0x48>)
 800614e:	480c      	ldr	r0, [pc, #48]	; (8006180 <memp_free+0x4c>)
 8006150:	f009 f8a6 	bl	800f2a0 <iprintf>
 8006154:	e00c      	b.n	8006170 <memp_free+0x3c>

  if (mem == NULL) {
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <memp_free+0x50>)
 8006160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff ff9a 	bl	80060a0 <do_memp_free_pool>
 800616c:	e000      	b.n	8006170 <memp_free+0x3c>
    return;
 800616e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	08010388 	.word	0x08010388
 800617c:	08010458 	.word	0x08010458
 8006180:	080103dc 	.word	0x080103dc
 8006184:	08012b48 	.word	0x08012b48

08006188 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d108      	bne.n	80061be <netif_add+0x26>
 80061ac:	4b57      	ldr	r3, [pc, #348]	; (800630c <netif_add+0x174>)
 80061ae:	f240 1227 	movw	r2, #295	; 0x127
 80061b2:	4957      	ldr	r1, [pc, #348]	; (8006310 <netif_add+0x178>)
 80061b4:	4857      	ldr	r0, [pc, #348]	; (8006314 <netif_add+0x17c>)
 80061b6:	f009 f873 	bl	800f2a0 <iprintf>
 80061ba:	2300      	movs	r3, #0
 80061bc:	e0a2      	b.n	8006304 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <netif_add+0x3e>
 80061c4:	4b51      	ldr	r3, [pc, #324]	; (800630c <netif_add+0x174>)
 80061c6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80061ca:	4953      	ldr	r1, [pc, #332]	; (8006318 <netif_add+0x180>)
 80061cc:	4851      	ldr	r0, [pc, #324]	; (8006314 <netif_add+0x17c>)
 80061ce:	f009 f867 	bl	800f2a0 <iprintf>
 80061d2:	2300      	movs	r3, #0
 80061d4:	e096      	b.n	8006304 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80061dc:	4b4f      	ldr	r3, [pc, #316]	; (800631c <netif_add+0x184>)
 80061de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80061e6:	4b4d      	ldr	r3, [pc, #308]	; (800631c <netif_add+0x184>)
 80061e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80061f0:	4b4a      	ldr	r3, [pc, #296]	; (800631c <netif_add+0x184>)
 80061f2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a45      	ldr	r2, [pc, #276]	; (8006320 <netif_add+0x188>)
 800620a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006226:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <netif_add+0x18c>)
 8006228:	781a      	ldrb	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006234:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f913 	bl	8006468 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	4798      	blx	r3
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <netif_add+0xba>
    return NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	e058      	b.n	8006304 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006258:	2bff      	cmp	r3, #255	; 0xff
 800625a:	d103      	bne.n	8006264 <netif_add+0xcc>
        netif->num = 0;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006268:	4b2f      	ldr	r3, [pc, #188]	; (8006328 <netif_add+0x190>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e02b      	b.n	80062c8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	429a      	cmp	r2, r3
 8006276:	d106      	bne.n	8006286 <netif_add+0xee>
 8006278:	4b24      	ldr	r3, [pc, #144]	; (800630c <netif_add+0x174>)
 800627a:	f240 128b 	movw	r2, #395	; 0x18b
 800627e:	492b      	ldr	r1, [pc, #172]	; (800632c <netif_add+0x194>)
 8006280:	4824      	ldr	r0, [pc, #144]	; (8006314 <netif_add+0x17c>)
 8006282:	f009 f80d 	bl	800f2a0 <iprintf>
        num_netifs++;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3301      	adds	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2bff      	cmp	r3, #255	; 0xff
 8006290:	dd06      	ble.n	80062a0 <netif_add+0x108>
 8006292:	4b1e      	ldr	r3, [pc, #120]	; (800630c <netif_add+0x174>)
 8006294:	f240 128d 	movw	r2, #397	; 0x18d
 8006298:	4925      	ldr	r1, [pc, #148]	; (8006330 <netif_add+0x198>)
 800629a:	481e      	ldr	r0, [pc, #120]	; (8006314 <netif_add+0x17c>)
 800629c:	f009 f800 	bl	800f2a0 <iprintf>
        if (netif2->num == netif->num) {
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d108      	bne.n	80062c2 <netif_add+0x12a>
          netif->num++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062b6:	3301      	adds	r3, #1
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80062c0:	e005      	b.n	80062ce <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1d0      	bne.n	8006270 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1be      	bne.n	8006252 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062da:	2bfe      	cmp	r3, #254	; 0xfe
 80062dc:	d103      	bne.n	80062e6 <netif_add+0x14e>
    netif_num = 0;
 80062de:	4b11      	ldr	r3, [pc, #68]	; (8006324 <netif_add+0x18c>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e006      	b.n	80062f4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062ec:	3301      	adds	r3, #1
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <netif_add+0x18c>)
 80062f2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80062f4:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <netif_add+0x190>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80062fc:	4a0a      	ldr	r2, [pc, #40]	; (8006328 <netif_add+0x190>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	08010474 	.word	0x08010474
 8006310:	08010508 	.word	0x08010508
 8006314:	080104c4 	.word	0x080104c4
 8006318:	08010524 	.word	0x08010524
 800631c:	08012bac 	.word	0x08012bac
 8006320:	08006743 	.word	0x08006743
 8006324:	200087c8 	.word	0x200087c8
 8006328:	200087c0 	.word	0x200087c0
 800632c:	08010548 	.word	0x08010548
 8006330:	0801055c 	.word	0x0801055c

08006334 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f002 fb23 	bl	800898c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f006 fbc5 	bl	800cad8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <netif_do_set_ipaddr+0x20>
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <netif_do_set_ipaddr+0x88>)
 800636c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006370:	491c      	ldr	r1, [pc, #112]	; (80063e4 <netif_do_set_ipaddr+0x8c>)
 8006372:	481d      	ldr	r0, [pc, #116]	; (80063e8 <netif_do_set_ipaddr+0x90>)
 8006374:	f008 ff94 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <netif_do_set_ipaddr+0x34>
 800637e:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <netif_do_set_ipaddr+0x88>)
 8006380:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006384:	4917      	ldr	r1, [pc, #92]	; (80063e4 <netif_do_set_ipaddr+0x8c>)
 8006386:	4818      	ldr	r0, [pc, #96]	; (80063e8 <netif_do_set_ipaddr+0x90>)
 8006388:	f008 ff8a 	bl	800f2a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3304      	adds	r3, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d01c      	beq.n	80063d4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3304      	adds	r3, #4
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80063aa:	f107 0314 	add.w	r3, r7, #20
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff ffbf 	bl	8006334 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <netif_do_set_ipaddr+0x6a>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	e000      	b.n	80063c4 <netif_do_set_ipaddr+0x6c>
 80063c2:	2300      	movs	r3, #0
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80063c8:	2101      	movs	r1, #1
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f8d2 	bl	8006574 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	08010474 	.word	0x08010474
 80063e4:	0801058c 	.word	0x0801058c
 80063e8:	080104c4 	.word	0x080104c4

080063ec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3308      	adds	r3, #8
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d00a      	beq.n	800641c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <netif_do_set_netmask+0x26>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	e000      	b.n	8006414 <netif_do_set_netmask+0x28>
 8006412:	2300      	movs	r3, #0
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	330c      	adds	r3, #12
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d00a      	beq.n	800645a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <netif_do_set_gw+0x26>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	e000      	b.n	8006452 <netif_do_set_gw+0x28>
 8006450:	2300      	movs	r3, #0
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006484:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <netif_set_addr+0x90>)
 8006486:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <netif_set_addr+0x90>)
 8006490:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006498:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <netif_set_addr+0x90>)
 800649a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <netif_set_addr+0x42>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <netif_set_addr+0x46>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <netif_set_addr+0x48>
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80064b8:	f107 0310 	add.w	r3, r7, #16
 80064bc:	461a      	mov	r2, r3
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff ff49 	bl	8006358 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff8e 	bl	80063ec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff ffa8 	bl	800642a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80064e0:	f107 0310 	add.w	r3, r7, #16
 80064e4:	461a      	mov	r2, r3
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff ff35 	bl	8006358 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80064ee:	bf00      	nop
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	08012bac 	.word	0x08012bac

080064fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006504:	4a04      	ldr	r2, [pc, #16]	; (8006518 <netif_set_default+0x1c>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200087c4 	.word	0x200087c4

0800651c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d107      	bne.n	800653a <netif_set_up+0x1e>
 800652a:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <netif_set_up+0x4c>)
 800652c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006530:	490e      	ldr	r1, [pc, #56]	; (800656c <netif_set_up+0x50>)
 8006532:	480f      	ldr	r0, [pc, #60]	; (8006570 <netif_set_up+0x54>)
 8006534:	f008 feb4 	bl	800f2a0 <iprintf>
 8006538:	e013      	b.n	8006562 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10c      	bne.n	8006562 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	b2da      	uxtb	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800655a:	2103      	movs	r1, #3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f809 	bl	8006574 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	08010474 	.word	0x08010474
 800656c:	080105fc 	.word	0x080105fc
 8006570:	080104c4 	.word	0x080104c4

08006574 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <netif_issue_reports+0x20>
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <netif_issue_reports+0x74>)
 8006588:	f240 326d 	movw	r2, #877	; 0x36d
 800658c:	4917      	ldr	r1, [pc, #92]	; (80065ec <netif_issue_reports+0x78>)
 800658e:	4818      	ldr	r0, [pc, #96]	; (80065f0 <netif_issue_reports+0x7c>)
 8006590:	f008 fe86 	bl	800f2a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01e      	beq.n	80065e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d017      	beq.n	80065e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d013      	beq.n	80065e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3304      	adds	r3, #4
 80065be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00e      	beq.n	80065e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f007 f9e7 	bl	800d9ac <etharp_request>
 80065de:	e000      	b.n	80065e2 <netif_issue_reports+0x6e>
    return;
 80065e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	08010474 	.word	0x08010474
 80065ec:	08010618 	.word	0x08010618
 80065f0:	080104c4 	.word	0x080104c4

080065f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <netif_set_down+0x1e>
 8006602:	4b12      	ldr	r3, [pc, #72]	; (800664c <netif_set_down+0x58>)
 8006604:	f240 329b 	movw	r2, #923	; 0x39b
 8006608:	4911      	ldr	r1, [pc, #68]	; (8006650 <netif_set_down+0x5c>)
 800660a:	4812      	ldr	r0, [pc, #72]	; (8006654 <netif_set_down+0x60>)
 800660c:	f008 fe48 	bl	800f2a0 <iprintf>
 8006610:	e019      	b.n	8006646 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d012      	beq.n	8006646 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f006 fd71 	bl	800d128 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	08010474 	.word	0x08010474
 8006650:	0801063c 	.word	0x0801063c
 8006654:	080104c4 	.word	0x080104c4

08006658 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d107      	bne.n	8006676 <netif_set_link_up+0x1e>
 8006666:	4b13      	ldr	r3, [pc, #76]	; (80066b4 <netif_set_link_up+0x5c>)
 8006668:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800666c:	4912      	ldr	r1, [pc, #72]	; (80066b8 <netif_set_link_up+0x60>)
 800666e:	4813      	ldr	r0, [pc, #76]	; (80066bc <netif_set_link_up+0x64>)
 8006670:	f008 fe16 	bl	800f2a0 <iprintf>
 8006674:	e01b      	b.n	80066ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d114      	bne.n	80066ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800668a:	f043 0304 	orr.w	r3, r3, #4
 800668e:	b2da      	uxtb	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006696:	2103      	movs	r1, #3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff ff6b 	bl	8006574 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <netif_set_link_up+0x56>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	08010474 	.word	0x08010474
 80066b8:	0801065c 	.word	0x0801065c
 80066bc:	080104c4 	.word	0x080104c4

080066c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <netif_set_link_down+0x1e>
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <netif_set_link_down+0x54>)
 80066d0:	f240 4206 	movw	r2, #1030	; 0x406
 80066d4:	4910      	ldr	r1, [pc, #64]	; (8006718 <netif_set_link_down+0x58>)
 80066d6:	4811      	ldr	r0, [pc, #68]	; (800671c <netif_set_link_down+0x5c>)
 80066d8:	f008 fde2 	bl	800f2a0 <iprintf>
 80066dc:	e017      	b.n	800670e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d010      	beq.n	800670e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066f2:	f023 0304 	bic.w	r3, r3, #4
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <netif_set_link_down+0x4e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	08010474 	.word	0x08010474
 8006718:	08010680 	.word	0x08010680
 800671c:	080104c4 	.word	0x080104c4

08006720 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	61da      	str	r2, [r3, #28]
  }
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800674e:	f06f 030b 	mvn.w	r3, #11
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006770:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <netif_get_by_index+0x48>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e00c      	b.n	8006792 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800677e:	3301      	adds	r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	79fa      	ldrb	r2, [r7, #7]
 8006784:	429a      	cmp	r2, r3
 8006786:	d101      	bne.n	800678c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	e006      	b.n	800679a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1ef      	bne.n	8006778 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	200087c0 	.word	0x200087c0

080067ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <pbuf_pool_is_empty+0x14>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	200087c9 	.word	0x200087c9

080067c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4611      	mov	r1, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	460b      	mov	r3, r1
 80067d4:	80fb      	strh	r3, [r7, #6]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88ba      	ldrh	r2, [r7, #4]
 80067f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80067f2:	8b3b      	ldrh	r3, [r7, #24]
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7f3a      	ldrb	r2, [r7, #28]
 80067fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	73da      	strb	r2, [r3, #15]
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	; 0x30
 800681c:	af02      	add	r7, sp, #8
 800681e:	4603      	mov	r3, r0
 8006820:	71fb      	strb	r3, [r7, #7]
 8006822:	460b      	mov	r3, r1
 8006824:	80bb      	strh	r3, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800682e:	887b      	ldrh	r3, [r7, #2]
 8006830:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006834:	d07f      	beq.n	8006936 <pbuf_alloc+0x11e>
 8006836:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800683a:	f300 80c8 	bgt.w	80069ce <pbuf_alloc+0x1b6>
 800683e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006842:	d010      	beq.n	8006866 <pbuf_alloc+0x4e>
 8006844:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006848:	f300 80c1 	bgt.w	80069ce <pbuf_alloc+0x1b6>
 800684c:	2b01      	cmp	r3, #1
 800684e:	d002      	beq.n	8006856 <pbuf_alloc+0x3e>
 8006850:	2b41      	cmp	r3, #65	; 0x41
 8006852:	f040 80bc 	bne.w	80069ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006856:	887a      	ldrh	r2, [r7, #2]
 8006858:	88bb      	ldrh	r3, [r7, #4]
 800685a:	4619      	mov	r1, r3
 800685c:	2000      	movs	r0, #0
 800685e:	f000 f8d1 	bl	8006a04 <pbuf_alloc_reference>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006864:	e0bd      	b.n	80069e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006872:	2008      	movs	r0, #8
 8006874:	f7ff fbee 	bl	8006054 <memp_malloc>
 8006878:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006880:	f7ff ff94 	bl	80067ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <pbuf_alloc+0x78>
            pbuf_free(p);
 800688a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800688c:	f000 faa8 	bl	8006de0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006890:	2300      	movs	r3, #0
 8006892:	e0a7      	b.n	80069e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006896:	3303      	adds	r3, #3
 8006898:	b29b      	uxth	r3, r3
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8b7a      	ldrh	r2, [r7, #26]
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bf28      	it	cs
 80068ac:	4613      	movcs	r3, r2
 80068ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80068b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068b2:	3310      	adds	r3, #16
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	3303      	adds	r3, #3
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	4618      	mov	r0, r3
 80068c0:	89f9      	ldrh	r1, [r7, #14]
 80068c2:	8b7a      	ldrh	r2, [r7, #26]
 80068c4:	2300      	movs	r3, #0
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	887b      	ldrh	r3, [r7, #2]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	460b      	mov	r3, r1
 80068ce:	4601      	mov	r1, r0
 80068d0:	6938      	ldr	r0, [r7, #16]
 80068d2:	f7ff ff77 	bl	80067c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d006      	beq.n	80068f0 <pbuf_alloc+0xd8>
 80068e2:	4b42      	ldr	r3, [pc, #264]	; (80069ec <pbuf_alloc+0x1d4>)
 80068e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068e8:	4941      	ldr	r1, [pc, #260]	; (80069f0 <pbuf_alloc+0x1d8>)
 80068ea:	4842      	ldr	r0, [pc, #264]	; (80069f4 <pbuf_alloc+0x1dc>)
 80068ec:	f008 fcd8 	bl	800f2a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80068f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068f2:	3303      	adds	r3, #3
 80068f4:	f023 0303 	bic.w	r3, r3, #3
 80068f8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80068fc:	d106      	bne.n	800690c <pbuf_alloc+0xf4>
 80068fe:	4b3b      	ldr	r3, [pc, #236]	; (80069ec <pbuf_alloc+0x1d4>)
 8006900:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006904:	493c      	ldr	r1, [pc, #240]	; (80069f8 <pbuf_alloc+0x1e0>)
 8006906:	483b      	ldr	r0, [pc, #236]	; (80069f4 <pbuf_alloc+0x1dc>)
 8006908:	f008 fcca 	bl	800f2a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
 8006916:	e002      	b.n	800691e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006922:	8b7a      	ldrh	r2, [r7, #26]
 8006924:	89fb      	ldrh	r3, [r7, #14]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800692e:	8b7b      	ldrh	r3, [r7, #26]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d19e      	bne.n	8006872 <pbuf_alloc+0x5a>
      break;
 8006934:	e055      	b.n	80069e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006938:	3303      	adds	r3, #3
 800693a:	b29b      	uxth	r3, r3
 800693c:	f023 0303 	bic.w	r3, r3, #3
 8006940:	b29a      	uxth	r2, r3
 8006942:	88bb      	ldrh	r3, [r7, #4]
 8006944:	3303      	adds	r3, #3
 8006946:	b29b      	uxth	r3, r3
 8006948:	f023 0303 	bic.w	r3, r3, #3
 800694c:	b29b      	uxth	r3, r3
 800694e:	4413      	add	r3, r2
 8006950:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006952:	8b3b      	ldrh	r3, [r7, #24]
 8006954:	3310      	adds	r3, #16
 8006956:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006958:	8b3a      	ldrh	r2, [r7, #24]
 800695a:	88bb      	ldrh	r3, [r7, #4]
 800695c:	3303      	adds	r3, #3
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	429a      	cmp	r2, r3
 8006964:	d306      	bcc.n	8006974 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006966:	8afa      	ldrh	r2, [r7, #22]
 8006968:	88bb      	ldrh	r3, [r7, #4]
 800696a:	3303      	adds	r3, #3
 800696c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d201      	bcs.n	8006978 <pbuf_alloc+0x160>
        return NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	e035      	b.n	80069e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006978:	8afb      	ldrh	r3, [r7, #22]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff f9da 	bl	8005d34 <mem_malloc>
 8006980:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <pbuf_alloc+0x174>
        return NULL;
 8006988:	2300      	movs	r3, #0
 800698a:	e02b      	b.n	80069e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800698c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800698e:	3310      	adds	r3, #16
 8006990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006992:	4413      	add	r3, r2
 8006994:	3303      	adds	r3, #3
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	4618      	mov	r0, r3
 800699c:	88b9      	ldrh	r1, [r7, #4]
 800699e:	88ba      	ldrh	r2, [r7, #4]
 80069a0:	2300      	movs	r3, #0
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	460b      	mov	r3, r1
 80069aa:	4601      	mov	r1, r0
 80069ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ae:	f7ff ff09 	bl	80067c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d010      	beq.n	80069e0 <pbuf_alloc+0x1c8>
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <pbuf_alloc+0x1d4>)
 80069c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80069c4:	490d      	ldr	r1, [pc, #52]	; (80069fc <pbuf_alloc+0x1e4>)
 80069c6:	480b      	ldr	r0, [pc, #44]	; (80069f4 <pbuf_alloc+0x1dc>)
 80069c8:	f008 fc6a 	bl	800f2a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80069cc:	e008      	b.n	80069e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80069ce:	4b07      	ldr	r3, [pc, #28]	; (80069ec <pbuf_alloc+0x1d4>)
 80069d0:	f240 1227 	movw	r2, #295	; 0x127
 80069d4:	490a      	ldr	r1, [pc, #40]	; (8006a00 <pbuf_alloc+0x1e8>)
 80069d6:	4807      	ldr	r0, [pc, #28]	; (80069f4 <pbuf_alloc+0x1dc>)
 80069d8:	f008 fc62 	bl	800f2a0 <iprintf>
      return NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	e001      	b.n	80069e4 <pbuf_alloc+0x1cc>
      break;
 80069e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3728      	adds	r7, #40	; 0x28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	080106a4 	.word	0x080106a4
 80069f0:	080106d4 	.word	0x080106d4
 80069f4:	08010704 	.word	0x08010704
 80069f8:	0801072c 	.word	0x0801072c
 80069fc:	08010760 	.word	0x08010760
 8006a00:	0801078c 	.word	0x0801078c

08006a04 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
 8006a10:	4613      	mov	r3, r2
 8006a12:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006a14:	883b      	ldrh	r3, [r7, #0]
 8006a16:	2b41      	cmp	r3, #65	; 0x41
 8006a18:	d009      	beq.n	8006a2e <pbuf_alloc_reference+0x2a>
 8006a1a:	883b      	ldrh	r3, [r7, #0]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d006      	beq.n	8006a2e <pbuf_alloc_reference+0x2a>
 8006a20:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <pbuf_alloc_reference+0x5c>)
 8006a22:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006a26:	490f      	ldr	r1, [pc, #60]	; (8006a64 <pbuf_alloc_reference+0x60>)
 8006a28:	480f      	ldr	r0, [pc, #60]	; (8006a68 <pbuf_alloc_reference+0x64>)
 8006a2a:	f008 fc39 	bl	800f2a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006a2e:	2007      	movs	r0, #7
 8006a30:	f7ff fb10 	bl	8006054 <memp_malloc>
 8006a34:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e00b      	b.n	8006a58 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006a40:	8879      	ldrh	r1, [r7, #2]
 8006a42:	887a      	ldrh	r2, [r7, #2]
 8006a44:	2300      	movs	r3, #0
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	883b      	ldrh	r3, [r7, #0]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff feb7 	bl	80067c4 <pbuf_init_alloced_pbuf>
  return p;
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	080106a4 	.word	0x080106a4
 8006a64:	080107a8 	.word	0x080107a8
 8006a68:	08010704 	.word	0x08010704

08006a6c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	81bb      	strh	r3, [r7, #12]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006a84:	8a7b      	ldrh	r3, [r7, #18]
 8006a86:	3303      	adds	r3, #3
 8006a88:	f023 0203 	bic.w	r2, r3, #3
 8006a8c:	89bb      	ldrh	r3, [r7, #12]
 8006a8e:	441a      	add	r2, r3
 8006a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d901      	bls.n	8006a9a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e018      	b.n	8006acc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006aa0:	8a7b      	ldrh	r3, [r7, #18]
 8006aa2:	3303      	adds	r3, #3
 8006aa4:	f023 0303 	bic.w	r3, r3, #3
 8006aa8:	6a3a      	ldr	r2, [r7, #32]
 8006aaa:	4413      	add	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	e001      	b.n	8006ab4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	89b9      	ldrh	r1, [r7, #12]
 8006ab8:	89ba      	ldrh	r2, [r7, #12]
 8006aba:	2302      	movs	r3, #2
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	897b      	ldrh	r3, [r7, #10]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	f7ff fe7d 	bl	80067c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006aca:	687b      	ldr	r3, [r7, #4]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <pbuf_realloc+0x20>
 8006ae6:	4b3a      	ldr	r3, [pc, #232]	; (8006bd0 <pbuf_realloc+0xfc>)
 8006ae8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006aec:	4939      	ldr	r1, [pc, #228]	; (8006bd4 <pbuf_realloc+0x100>)
 8006aee:	483a      	ldr	r0, [pc, #232]	; (8006bd8 <pbuf_realloc+0x104>)
 8006af0:	f008 fbd6 	bl	800f2a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	891b      	ldrh	r3, [r3, #8]
 8006af8:	887a      	ldrh	r2, [r7, #2]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d263      	bcs.n	8006bc6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	891a      	ldrh	r2, [r3, #8]
 8006b02:	887b      	ldrh	r3, [r7, #2]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006b08:	887b      	ldrh	r3, [r7, #2]
 8006b0a:	817b      	strh	r3, [r7, #10]
  q = p;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006b10:	e018      	b.n	8006b44 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	895b      	ldrh	r3, [r3, #10]
 8006b16:	897a      	ldrh	r2, [r7, #10]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	891a      	ldrh	r2, [r3, #8]
 8006b20:	893b      	ldrh	r3, [r7, #8]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <pbuf_realloc+0x70>
 8006b36:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <pbuf_realloc+0xfc>)
 8006b38:	f240 12af 	movw	r2, #431	; 0x1af
 8006b3c:	4927      	ldr	r1, [pc, #156]	; (8006bdc <pbuf_realloc+0x108>)
 8006b3e:	4826      	ldr	r0, [pc, #152]	; (8006bd8 <pbuf_realloc+0x104>)
 8006b40:	f008 fbae 	bl	800f2a0 <iprintf>
  while (rem_len > q->len) {
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	895b      	ldrh	r3, [r3, #10]
 8006b48:	897a      	ldrh	r2, [r7, #10]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d8e1      	bhi.n	8006b12 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	7b1b      	ldrb	r3, [r3, #12]
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d121      	bne.n	8006b9e <pbuf_realloc+0xca>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	895b      	ldrh	r3, [r3, #10]
 8006b5e:	897a      	ldrh	r2, [r7, #10]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d01c      	beq.n	8006b9e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	7b5b      	ldrb	r3, [r3, #13]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d116      	bne.n	8006b9e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4619      	mov	r1, r3
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7fe ffda 	bl	8005b3c <mem_trim>
 8006b88:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <pbuf_realloc+0xca>
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <pbuf_realloc+0xfc>)
 8006b92:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006b96:	4912      	ldr	r1, [pc, #72]	; (8006be0 <pbuf_realloc+0x10c>)
 8006b98:	480f      	ldr	r0, [pc, #60]	; (8006bd8 <pbuf_realloc+0x104>)
 8006b9a:	f008 fb81 	bl	800f2a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	897a      	ldrh	r2, [r7, #10]
 8006ba2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	895a      	ldrh	r2, [r3, #10]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f911 	bl	8006de0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e000      	b.n	8006bc8 <pbuf_realloc+0xf4>
    return;
 8006bc6:	bf00      	nop

}
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	080106a4 	.word	0x080106a4
 8006bd4:	080107bc 	.word	0x080107bc
 8006bd8:	08010704 	.word	0x08010704
 8006bdc:	080107d4 	.word	0x080107d4
 8006be0:	080107ec 	.word	0x080107ec

08006be4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <pbuf_add_header_impl+0x22>
 8006bf8:	4b2b      	ldr	r3, [pc, #172]	; (8006ca8 <pbuf_add_header_impl+0xc4>)
 8006bfa:	f240 12df 	movw	r2, #479	; 0x1df
 8006bfe:	492b      	ldr	r1, [pc, #172]	; (8006cac <pbuf_add_header_impl+0xc8>)
 8006c00:	482b      	ldr	r0, [pc, #172]	; (8006cb0 <pbuf_add_header_impl+0xcc>)
 8006c02:	f008 fb4d 	bl	800f2a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <pbuf_add_header_impl+0x30>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c12:	d301      	bcc.n	8006c18 <pbuf_add_header_impl+0x34>
    return 1;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e043      	b.n	8006ca0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <pbuf_add_header_impl+0x3e>
    return 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e03e      	b.n	8006ca0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	891a      	ldrh	r2, [r3, #8]
 8006c2a:	8a7b      	ldrh	r3, [r7, #18]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8a7a      	ldrh	r2, [r7, #18]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d901      	bls.n	8006c3a <pbuf_add_header_impl+0x56>
    return 1;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e032      	b.n	8006ca0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	7b1b      	ldrb	r3, [r3, #12]
 8006c3e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006c40:	8a3b      	ldrh	r3, [r7, #16]
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00c      	beq.n	8006c64 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	425b      	negs	r3, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3310      	adds	r3, #16
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d20d      	bcs.n	8006c7c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e01d      	b.n	8006ca0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d006      	beq.n	8006c78 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	425b      	negs	r3, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	e001      	b.n	8006c7c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e011      	b.n	8006ca0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	895a      	ldrh	r2, [r3, #10]
 8006c86:	8a7b      	ldrh	r3, [r7, #18]
 8006c88:	4413      	add	r3, r2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	891a      	ldrh	r2, [r3, #8]
 8006c94:	8a7b      	ldrh	r3, [r7, #18]
 8006c96:	4413      	add	r3, r2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	811a      	strh	r2, [r3, #8]


  return 0;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	080106a4 	.word	0x080106a4
 8006cac:	08010808 	.word	0x08010808
 8006cb0:	08010704 	.word	0x08010704

08006cb4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff ff8e 	bl	8006be4 <pbuf_add_header_impl>
 8006cc8:	4603      	mov	r3, r0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d106      	bne.n	8006cf2 <pbuf_remove_header+0x1e>
 8006ce4:	4b20      	ldr	r3, [pc, #128]	; (8006d68 <pbuf_remove_header+0x94>)
 8006ce6:	f240 224b 	movw	r2, #587	; 0x24b
 8006cea:	4920      	ldr	r1, [pc, #128]	; (8006d6c <pbuf_remove_header+0x98>)
 8006cec:	4820      	ldr	r0, [pc, #128]	; (8006d70 <pbuf_remove_header+0x9c>)
 8006cee:	f008 fad7 	bl	800f2a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <pbuf_remove_header+0x2c>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfe:	d301      	bcc.n	8006d04 <pbuf_remove_header+0x30>
    return 1;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e02c      	b.n	8006d5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <pbuf_remove_header+0x3a>
    return 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e027      	b.n	8006d5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	895b      	ldrh	r3, [r3, #10]
 8006d16:	89fa      	ldrh	r2, [r7, #14]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d908      	bls.n	8006d2e <pbuf_remove_header+0x5a>
 8006d1c:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <pbuf_remove_header+0x94>)
 8006d1e:	f240 2255 	movw	r2, #597	; 0x255
 8006d22:	4914      	ldr	r1, [pc, #80]	; (8006d74 <pbuf_remove_header+0xa0>)
 8006d24:	4812      	ldr	r0, [pc, #72]	; (8006d70 <pbuf_remove_header+0x9c>)
 8006d26:	f008 fabb 	bl	800f2a0 <iprintf>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e017      	b.n	8006d5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	441a      	add	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	895a      	ldrh	r2, [r3, #10]
 8006d44:	89fb      	ldrh	r3, [r7, #14]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	891a      	ldrh	r2, [r3, #8]
 8006d52:	89fb      	ldrh	r3, [r7, #14]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	080106a4 	.word	0x080106a4
 8006d6c:	08010808 	.word	0x08010808
 8006d70:	08010704 	.word	0x08010704
 8006d74:	08010814 	.word	0x08010814

08006d78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
 8006d84:	4613      	mov	r3, r2
 8006d86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006d88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	da08      	bge.n	8006da2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d94:	425b      	negs	r3, r3
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff ff9b 	bl	8006cd4 <pbuf_remove_header>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	e007      	b.n	8006db2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006da2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006da6:	787a      	ldrb	r2, [r7, #1]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff ff1a 	bl	8006be4 <pbuf_add_header_impl>
 8006db0:	4603      	mov	r3, r0
  }
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006dc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ffd2 	bl	8006d78 <pbuf_header_impl>
 8006dd4:	4603      	mov	r3, r0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <pbuf_free+0x22>
 8006df4:	4b38      	ldr	r3, [pc, #224]	; (8006ed8 <pbuf_free+0xf8>)
 8006df6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006dfa:	4938      	ldr	r1, [pc, #224]	; (8006edc <pbuf_free+0xfc>)
 8006dfc:	4838      	ldr	r0, [pc, #224]	; (8006ee0 <pbuf_free+0x100>)
 8006dfe:	f008 fa4f 	bl	800f2a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e063      	b.n	8006ece <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006e0a:	e05c      	b.n	8006ec6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	7b9b      	ldrb	r3, [r3, #14]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <pbuf_free+0x42>
 8006e14:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <pbuf_free+0xf8>)
 8006e16:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006e1a:	4932      	ldr	r1, [pc, #200]	; (8006ee4 <pbuf_free+0x104>)
 8006e1c:	4830      	ldr	r0, [pc, #192]	; (8006ee0 <pbuf_free+0x100>)
 8006e1e:	f008 fa3f 	bl	800f2a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7b9b      	ldrb	r3, [r3, #14]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	739a      	strb	r2, [r3, #14]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7b9b      	ldrb	r3, [r3, #14]
 8006e32:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006e34:	7dbb      	ldrb	r3, [r7, #22]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d143      	bne.n	8006ec2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	7b1b      	ldrb	r3, [r3, #12]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7b5b      	ldrb	r3, [r3, #13]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d011      	beq.n	8006e7a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <pbuf_free+0x90>
 8006e62:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <pbuf_free+0xf8>)
 8006e64:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006e68:	491f      	ldr	r1, [pc, #124]	; (8006ee8 <pbuf_free+0x108>)
 8006e6a:	481d      	ldr	r0, [pc, #116]	; (8006ee0 <pbuf_free+0x100>)
 8006e6c:	f008 fa18 	bl	800f2a0 <iprintf>
        pc->custom_free_function(p);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
 8006e78:	e01d      	b.n	8006eb6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d104      	bne.n	8006e8a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	2008      	movs	r0, #8
 8006e84:	f7ff f956 	bl	8006134 <memp_free>
 8006e88:	e015      	b.n	8006eb6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d104      	bne.n	8006e9a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	2007      	movs	r0, #7
 8006e94:	f7ff f94e 	bl	8006134 <memp_free>
 8006e98:	e00d      	b.n	8006eb6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d103      	bne.n	8006ea8 <pbuf_free+0xc8>
          mem_free(p);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fe fde1 	bl	8005a68 <mem_free>
 8006ea6:	e006      	b.n	8006eb6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ea8:	4b0b      	ldr	r3, [pc, #44]	; (8006ed8 <pbuf_free+0xf8>)
 8006eaa:	f240 320f 	movw	r2, #783	; 0x30f
 8006eae:	490f      	ldr	r1, [pc, #60]	; (8006eec <pbuf_free+0x10c>)
 8006eb0:	480b      	ldr	r0, [pc, #44]	; (8006ee0 <pbuf_free+0x100>)
 8006eb2:	f008 f9f5 	bl	800f2a0 <iprintf>
        }
      }
      count++;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	607b      	str	r3, [r7, #4]
 8006ec0:	e001      	b.n	8006ec6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d19f      	bne.n	8006e0c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	080106a4 	.word	0x080106a4
 8006edc:	08010808 	.word	0x08010808
 8006ee0:	08010704 	.word	0x08010704
 8006ee4:	08010834 	.word	0x08010834
 8006ee8:	0801084c 	.word	0x0801084c
 8006eec:	08010870 	.word	0x08010870

08006ef0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006efc:	e005      	b.n	8006f0a <pbuf_clen+0x1a>
    ++len;
 8006efe:	89fb      	ldrh	r3, [r7, #14]
 8006f00:	3301      	adds	r3, #1
 8006f02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f6      	bne.n	8006efe <pbuf_clen+0xe>
  }
  return len;
 8006f10:	89fb      	ldrh	r3, [r7, #14]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d010      	beq.n	8006f50 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7b9b      	ldrb	r3, [r3, #14]
 8006f32:	3301      	adds	r3, #1
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	7b9b      	ldrb	r3, [r3, #14]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <pbuf_ref+0x30>
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <pbuf_ref+0x38>)
 8006f44:	f240 3242 	movw	r2, #834	; 0x342
 8006f48:	4904      	ldr	r1, [pc, #16]	; (8006f5c <pbuf_ref+0x3c>)
 8006f4a:	4805      	ldr	r0, [pc, #20]	; (8006f60 <pbuf_ref+0x40>)
 8006f4c:	f008 f9a8 	bl	800f2a0 <iprintf>
  }
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	080106a4 	.word	0x080106a4
 8006f5c:	08010884 	.word	0x08010884
 8006f60:	08010704 	.word	0x08010704

08006f64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <pbuf_cat+0x16>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d107      	bne.n	8006f8a <pbuf_cat+0x26>
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <pbuf_cat+0x98>)
 8006f7c:	f240 3259 	movw	r2, #857	; 0x359
 8006f80:	491f      	ldr	r1, [pc, #124]	; (8007000 <pbuf_cat+0x9c>)
 8006f82:	4820      	ldr	r0, [pc, #128]	; (8007004 <pbuf_cat+0xa0>)
 8006f84:	f008 f98c 	bl	800f2a0 <iprintf>
 8006f88:	e034      	b.n	8006ff4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	e00a      	b.n	8006fa6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	891a      	ldrh	r2, [r3, #8]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	891b      	ldrh	r3, [r3, #8]
 8006f98:	4413      	add	r3, r2
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f0      	bne.n	8006f90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	891a      	ldrh	r2, [r3, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	895b      	ldrh	r3, [r3, #10]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d006      	beq.n	8006fc8 <pbuf_cat+0x64>
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <pbuf_cat+0x98>)
 8006fbc:	f240 3262 	movw	r2, #866	; 0x362
 8006fc0:	4911      	ldr	r1, [pc, #68]	; (8007008 <pbuf_cat+0xa4>)
 8006fc2:	4810      	ldr	r0, [pc, #64]	; (8007004 <pbuf_cat+0xa0>)
 8006fc4:	f008 f96c 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d006      	beq.n	8006fde <pbuf_cat+0x7a>
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <pbuf_cat+0x98>)
 8006fd2:	f240 3263 	movw	r2, #867	; 0x363
 8006fd6:	490d      	ldr	r1, [pc, #52]	; (800700c <pbuf_cat+0xa8>)
 8006fd8:	480a      	ldr	r0, [pc, #40]	; (8007004 <pbuf_cat+0xa0>)
 8006fda:	f008 f961 	bl	800f2a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	891a      	ldrh	r2, [r3, #8]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	891b      	ldrh	r3, [r3, #8]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080106a4 	.word	0x080106a4
 8007000:	08010898 	.word	0x08010898
 8007004:	08010704 	.word	0x08010704
 8007008:	080108d0 	.word	0x080108d0
 800700c:	08010900 	.word	0x08010900

08007010 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <pbuf_copy+0x2a>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <pbuf_copy+0x2a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	891a      	ldrh	r2, [r3, #8]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	891b      	ldrh	r3, [r3, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d209      	bcs.n	800704e <pbuf_copy+0x3e>
 800703a:	4b57      	ldr	r3, [pc, #348]	; (8007198 <pbuf_copy+0x188>)
 800703c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007040:	4956      	ldr	r1, [pc, #344]	; (800719c <pbuf_copy+0x18c>)
 8007042:	4857      	ldr	r0, [pc, #348]	; (80071a0 <pbuf_copy+0x190>)
 8007044:	f008 f92c 	bl	800f2a0 <iprintf>
 8007048:	f06f 030f 	mvn.w	r3, #15
 800704c:	e09f      	b.n	800718e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	895b      	ldrh	r3, [r3, #10]
 8007052:	461a      	mov	r2, r3
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	1ad2      	subs	r2, r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	895b      	ldrh	r3, [r3, #10]
 800705c:	4619      	mov	r1, r3
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1acb      	subs	r3, r1, r3
 8007062:	429a      	cmp	r2, r3
 8007064:	d306      	bcc.n	8007074 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	895b      	ldrh	r3, [r3, #10]
 800706a:	461a      	mov	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	e005      	b.n	8007080 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	895b      	ldrh	r3, [r3, #10]
 8007078:	461a      	mov	r2, r3
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	18d0      	adds	r0, r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4619      	mov	r1, r3
 8007094:	f008 f9de 	bl	800f454 <memcpy>
    offset_to += len;
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	895b      	ldrh	r3, [r3, #10]
 80070ac:	461a      	mov	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d906      	bls.n	80070c2 <pbuf_copy+0xb2>
 80070b4:	4b38      	ldr	r3, [pc, #224]	; (8007198 <pbuf_copy+0x188>)
 80070b6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80070ba:	493a      	ldr	r1, [pc, #232]	; (80071a4 <pbuf_copy+0x194>)
 80070bc:	4838      	ldr	r0, [pc, #224]	; (80071a0 <pbuf_copy+0x190>)
 80070be:	f008 f8ef 	bl	800f2a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	895b      	ldrh	r3, [r3, #10]
 80070c6:	461a      	mov	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d906      	bls.n	80070dc <pbuf_copy+0xcc>
 80070ce:	4b32      	ldr	r3, [pc, #200]	; (8007198 <pbuf_copy+0x188>)
 80070d0:	f240 32da 	movw	r2, #986	; 0x3da
 80070d4:	4934      	ldr	r1, [pc, #208]	; (80071a8 <pbuf_copy+0x198>)
 80070d6:	4832      	ldr	r0, [pc, #200]	; (80071a0 <pbuf_copy+0x190>)
 80070d8:	f008 f8e2 	bl	800f2a0 <iprintf>
    if (offset_from >= p_from->len) {
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	895b      	ldrh	r3, [r3, #10]
 80070e0:	461a      	mov	r2, r3
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d304      	bcc.n	80070f2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	895b      	ldrh	r3, [r3, #10]
 80070f6:	461a      	mov	r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d114      	bne.n	8007128 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10c      	bne.n	8007128 <pbuf_copy+0x118>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <pbuf_copy+0x118>
 8007114:	4b20      	ldr	r3, [pc, #128]	; (8007198 <pbuf_copy+0x188>)
 8007116:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800711a:	4924      	ldr	r1, [pc, #144]	; (80071ac <pbuf_copy+0x19c>)
 800711c:	4820      	ldr	r0, [pc, #128]	; (80071a0 <pbuf_copy+0x190>)
 800711e:	f008 f8bf 	bl	800f2a0 <iprintf>
 8007122:	f06f 030f 	mvn.w	r3, #15
 8007126:	e032      	b.n	800718e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d013      	beq.n	8007156 <pbuf_copy+0x146>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	895a      	ldrh	r2, [r3, #10]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	891b      	ldrh	r3, [r3, #8]
 8007136:	429a      	cmp	r2, r3
 8007138:	d10d      	bne.n	8007156 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <pbuf_copy+0x146>
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <pbuf_copy+0x188>)
 8007144:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007148:	4919      	ldr	r1, [pc, #100]	; (80071b0 <pbuf_copy+0x1a0>)
 800714a:	4815      	ldr	r0, [pc, #84]	; (80071a0 <pbuf_copy+0x190>)
 800714c:	f008 f8a8 	bl	800f2a0 <iprintf>
 8007150:	f06f 0305 	mvn.w	r3, #5
 8007154:	e01b      	b.n	800718e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d013      	beq.n	8007184 <pbuf_copy+0x174>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	895a      	ldrh	r2, [r3, #10]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	891b      	ldrh	r3, [r3, #8]
 8007164:	429a      	cmp	r2, r3
 8007166:	d10d      	bne.n	8007184 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <pbuf_copy+0x174>
 8007170:	4b09      	ldr	r3, [pc, #36]	; (8007198 <pbuf_copy+0x188>)
 8007172:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007176:	490e      	ldr	r1, [pc, #56]	; (80071b0 <pbuf_copy+0x1a0>)
 8007178:	4809      	ldr	r0, [pc, #36]	; (80071a0 <pbuf_copy+0x190>)
 800717a:	f008 f891 	bl	800f2a0 <iprintf>
 800717e:	f06f 0305 	mvn.w	r3, #5
 8007182:	e004      	b.n	800718e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f47f af61 	bne.w	800704e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	080106a4 	.word	0x080106a4
 800719c:	0801094c 	.word	0x0801094c
 80071a0:	08010704 	.word	0x08010704
 80071a4:	0801097c 	.word	0x0801097c
 80071a8:	08010994 	.word	0x08010994
 80071ac:	080109b0 	.word	0x080109b0
 80071b0:	080109c0 	.word	0x080109c0

080071b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	460b      	mov	r3, r1
 80071c4:	80fb      	strh	r3, [r7, #6]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d108      	bne.n	80071ea <pbuf_copy_partial+0x36>
 80071d8:	4b2b      	ldr	r3, [pc, #172]	; (8007288 <pbuf_copy_partial+0xd4>)
 80071da:	f240 420a 	movw	r2, #1034	; 0x40a
 80071de:	492b      	ldr	r1, [pc, #172]	; (800728c <pbuf_copy_partial+0xd8>)
 80071e0:	482b      	ldr	r0, [pc, #172]	; (8007290 <pbuf_copy_partial+0xdc>)
 80071e2:	f008 f85d 	bl	800f2a0 <iprintf>
 80071e6:	2300      	movs	r3, #0
 80071e8:	e04a      	b.n	8007280 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d108      	bne.n	8007202 <pbuf_copy_partial+0x4e>
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <pbuf_copy_partial+0xd4>)
 80071f2:	f240 420b 	movw	r2, #1035	; 0x40b
 80071f6:	4927      	ldr	r1, [pc, #156]	; (8007294 <pbuf_copy_partial+0xe0>)
 80071f8:	4825      	ldr	r0, [pc, #148]	; (8007290 <pbuf_copy_partial+0xdc>)
 80071fa:	f008 f851 	bl	800f2a0 <iprintf>
 80071fe:	2300      	movs	r3, #0
 8007200:	e03e      	b.n	8007280 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	e034      	b.n	8007272 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007208:	88bb      	ldrh	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <pbuf_copy_partial+0x70>
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	895b      	ldrh	r3, [r3, #10]
 8007212:	88ba      	ldrh	r2, [r7, #4]
 8007214:	429a      	cmp	r2, r3
 8007216:	d305      	bcc.n	8007224 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	895b      	ldrh	r3, [r3, #10]
 800721c:	88ba      	ldrh	r2, [r7, #4]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	80bb      	strh	r3, [r7, #4]
 8007222:	e023      	b.n	800726c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	895a      	ldrh	r2, [r3, #10]
 8007228:	88bb      	ldrh	r3, [r7, #4]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800722e:	8b3a      	ldrh	r2, [r7, #24]
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	429a      	cmp	r2, r3
 8007234:	d901      	bls.n	800723a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800723a:	8b7b      	ldrh	r3, [r7, #26]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	18d0      	adds	r0, r2, r3
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	88bb      	ldrh	r3, [r7, #4]
 8007246:	4413      	add	r3, r2
 8007248:	8b3a      	ldrh	r2, [r7, #24]
 800724a:	4619      	mov	r1, r3
 800724c:	f008 f902 	bl	800f454 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007250:	8afa      	ldrh	r2, [r7, #22]
 8007252:	8b3b      	ldrh	r3, [r7, #24]
 8007254:	4413      	add	r3, r2
 8007256:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007258:	8b7a      	ldrh	r2, [r7, #26]
 800725a:	8b3b      	ldrh	r3, [r7, #24]
 800725c:	4413      	add	r3, r2
 800725e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	8b3b      	ldrh	r3, [r7, #24]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	61fb      	str	r3, [r7, #28]
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <pbuf_copy_partial+0xca>
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1c4      	bne.n	8007208 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800727e:	8afb      	ldrh	r3, [r7, #22]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3720      	adds	r7, #32
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	080106a4 	.word	0x080106a4
 800728c:	080109ec 	.word	0x080109ec
 8007290:	08010704 	.word	0x08010704
 8007294:	08010a0c 	.word	0x08010a0c

08007298 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	603a      	str	r2, [r7, #0]
 80072a2:	71fb      	strb	r3, [r7, #7]
 80072a4:	460b      	mov	r3, r1
 80072a6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	8919      	ldrh	r1, [r3, #8]
 80072ac:	88ba      	ldrh	r2, [r7, #4]
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff fab1 	bl	8006818 <pbuf_alloc>
 80072b6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <pbuf_clone+0x2a>
    return NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	e011      	b.n	80072e6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7ff fea3 	bl	8007010 <pbuf_copy>
 80072ca:	4603      	mov	r3, r0
 80072cc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80072ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d006      	beq.n	80072e4 <pbuf_clone+0x4c>
 80072d6:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <pbuf_clone+0x58>)
 80072d8:	f240 5224 	movw	r2, #1316	; 0x524
 80072dc:	4905      	ldr	r1, [pc, #20]	; (80072f4 <pbuf_clone+0x5c>)
 80072de:	4806      	ldr	r0, [pc, #24]	; (80072f8 <pbuf_clone+0x60>)
 80072e0:	f007 ffde 	bl	800f2a0 <iprintf>
  return q;
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	080106a4 	.word	0x080106a4
 80072f4:	08010b18 	.word	0x08010b18
 80072f8:	08010704 	.word	0x08010704

080072fc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007300:	f007 fee0 	bl	800f0c4 <rand>
 8007304:	4603      	mov	r3, r0
 8007306:	b29b      	uxth	r3, r3
 8007308:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800730c:	b29b      	uxth	r3, r3
 800730e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007312:	b29a      	uxth	r2, r3
 8007314:	4b01      	ldr	r3, [pc, #4]	; (800731c <tcp_init+0x20>)
 8007316:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007318:	bf00      	nop
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20000020 	.word	0x20000020

08007320 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7d1b      	ldrb	r3, [r3, #20]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d105      	bne.n	800733c <tcp_free+0x1c>
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <tcp_free+0x2c>)
 8007332:	22d4      	movs	r2, #212	; 0xd4
 8007334:	4906      	ldr	r1, [pc, #24]	; (8007350 <tcp_free+0x30>)
 8007336:	4807      	ldr	r0, [pc, #28]	; (8007354 <tcp_free+0x34>)
 8007338:	f007 ffb2 	bl	800f2a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	2001      	movs	r0, #1
 8007340:	f7fe fef8 	bl	8006134 <memp_free>
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	08010ba4 	.word	0x08010ba4
 8007350:	08010bd4 	.word	0x08010bd4
 8007354:	08010be8 	.word	0x08010be8

08007358 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7d1b      	ldrb	r3, [r3, #20]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d105      	bne.n	8007374 <tcp_free_listen+0x1c>
 8007368:	4b06      	ldr	r3, [pc, #24]	; (8007384 <tcp_free_listen+0x2c>)
 800736a:	22df      	movs	r2, #223	; 0xdf
 800736c:	4906      	ldr	r1, [pc, #24]	; (8007388 <tcp_free_listen+0x30>)
 800736e:	4807      	ldr	r0, [pc, #28]	; (800738c <tcp_free_listen+0x34>)
 8007370:	f007 ff96 	bl	800f2a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	2002      	movs	r0, #2
 8007378:	f7fe fedc 	bl	8006134 <memp_free>
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	08010ba4 	.word	0x08010ba4
 8007388:	08010c10 	.word	0x08010c10
 800738c:	08010be8 	.word	0x08010be8

08007390 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007394:	f000 fea2 	bl	80080dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <tcp_tmr+0x28>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <tcp_tmr+0x28>)
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <tcp_tmr+0x28>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80073b0:	f000 fb54 	bl	8007a5c <tcp_slowtmr>
  }
}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	200087e1 	.word	0x200087e1

080073bc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d105      	bne.n	80073d8 <tcp_remove_listener+0x1c>
 80073cc:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <tcp_remove_listener+0x48>)
 80073ce:	22ff      	movs	r2, #255	; 0xff
 80073d0:	490d      	ldr	r1, [pc, #52]	; (8007408 <tcp_remove_listener+0x4c>)
 80073d2:	480e      	ldr	r0, [pc, #56]	; (800740c <tcp_remove_listener+0x50>)
 80073d4:	f007 ff64 	bl	800f2a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	e00a      	b.n	80073f4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d102      	bne.n	80073ee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1f1      	bne.n	80073de <tcp_remove_listener+0x22>
    }
  }
}
 80073fa:	bf00      	nop
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	08010ba4 	.word	0x08010ba4
 8007408:	08010c2c 	.word	0x08010c2c
 800740c:	08010be8 	.word	0x08010be8

08007410 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <tcp_listen_closed+0x1c>
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <tcp_listen_closed+0x60>)
 8007420:	f240 1211 	movw	r2, #273	; 0x111
 8007424:	4913      	ldr	r1, [pc, #76]	; (8007474 <tcp_listen_closed+0x64>)
 8007426:	4814      	ldr	r0, [pc, #80]	; (8007478 <tcp_listen_closed+0x68>)
 8007428:	f007 ff3a 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7d1b      	ldrb	r3, [r3, #20]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d006      	beq.n	8007442 <tcp_listen_closed+0x32>
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <tcp_listen_closed+0x60>)
 8007436:	f44f 7289 	mov.w	r2, #274	; 0x112
 800743a:	4910      	ldr	r1, [pc, #64]	; (800747c <tcp_listen_closed+0x6c>)
 800743c:	480e      	ldr	r0, [pc, #56]	; (8007478 <tcp_listen_closed+0x68>)
 800743e:	f007 ff2f 	bl	800f2a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007442:	2301      	movs	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e00b      	b.n	8007460 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007448:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <tcp_listen_closed+0x70>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff ffb1 	bl	80073bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b03      	cmp	r3, #3
 8007464:	d9f0      	bls.n	8007448 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	08010ba4 	.word	0x08010ba4
 8007474:	08010c54 	.word	0x08010c54
 8007478:	08010be8 	.word	0x08010be8
 800747c:	08010c60 	.word	0x08010c60
 8007480:	08012b84 	.word	0x08012b84

08007484 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007484:	b5b0      	push	{r4, r5, r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af04      	add	r7, sp, #16
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <tcp_close_shutdown+0x20>
 8007496:	4b63      	ldr	r3, [pc, #396]	; (8007624 <tcp_close_shutdown+0x1a0>)
 8007498:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800749c:	4962      	ldr	r1, [pc, #392]	; (8007628 <tcp_close_shutdown+0x1a4>)
 800749e:	4863      	ldr	r0, [pc, #396]	; (800762c <tcp_close_shutdown+0x1a8>)
 80074a0:	f007 fefe 	bl	800f2a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d066      	beq.n	8007578 <tcp_close_shutdown+0xf4>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	7d1b      	ldrb	r3, [r3, #20]
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d003      	beq.n	80074ba <tcp_close_shutdown+0x36>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7d1b      	ldrb	r3, [r3, #20]
 80074b6:	2b07      	cmp	r3, #7
 80074b8:	d15e      	bne.n	8007578 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <tcp_close_shutdown+0x48>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80074ca:	d055      	beq.n	8007578 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8b5b      	ldrh	r3, [r3, #26]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <tcp_close_shutdown+0x62>
 80074d8:	4b52      	ldr	r3, [pc, #328]	; (8007624 <tcp_close_shutdown+0x1a0>)
 80074da:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80074de:	4954      	ldr	r1, [pc, #336]	; (8007630 <tcp_close_shutdown+0x1ac>)
 80074e0:	4852      	ldr	r0, [pc, #328]	; (800762c <tcp_close_shutdown+0x1a8>)
 80074e2:	f007 fedd 	bl	800f2a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80074ee:	687d      	ldr	r5, [r7, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	8ad2      	ldrh	r2, [r2, #22]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	8b09      	ldrh	r1, [r1, #24]
 80074fc:	9102      	str	r1, [sp, #8]
 80074fe:	9201      	str	r2, [sp, #4]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	462b      	mov	r3, r5
 8007504:	4622      	mov	r2, r4
 8007506:	4601      	mov	r1, r0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f004 fe91 	bl	800c230 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f8c6 	bl	80086a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007514:	4b47      	ldr	r3, [pc, #284]	; (8007634 <tcp_close_shutdown+0x1b0>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	d105      	bne.n	800752a <tcp_close_shutdown+0xa6>
 800751e:	4b45      	ldr	r3, [pc, #276]	; (8007634 <tcp_close_shutdown+0x1b0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	4a43      	ldr	r2, [pc, #268]	; (8007634 <tcp_close_shutdown+0x1b0>)
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	e013      	b.n	8007552 <tcp_close_shutdown+0xce>
 800752a:	4b42      	ldr	r3, [pc, #264]	; (8007634 <tcp_close_shutdown+0x1b0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e00c      	b.n	800754c <tcp_close_shutdown+0xc8>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d104      	bne.n	8007546 <tcp_close_shutdown+0xc2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	e005      	b.n	8007552 <tcp_close_shutdown+0xce>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1ef      	bne.n	8007532 <tcp_close_shutdown+0xae>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	60da      	str	r2, [r3, #12]
 8007558:	4b37      	ldr	r3, [pc, #220]	; (8007638 <tcp_close_shutdown+0x1b4>)
 800755a:	2201      	movs	r2, #1
 800755c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800755e:	4b37      	ldr	r3, [pc, #220]	; (800763c <tcp_close_shutdown+0x1b8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d102      	bne.n	800756e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007568:	f003 fd5e 	bl	800b028 <tcp_trigger_input_pcb_close>
 800756c:	e002      	b.n	8007574 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fed6 	bl	8007320 <tcp_free>
      }
      return ERR_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	e050      	b.n	800761a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	7d1b      	ldrb	r3, [r3, #20]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d03b      	beq.n	80075f8 <tcp_close_shutdown+0x174>
 8007580:	2b02      	cmp	r3, #2
 8007582:	dc44      	bgt.n	800760e <tcp_close_shutdown+0x18a>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <tcp_close_shutdown+0x10a>
 8007588:	2b01      	cmp	r3, #1
 800758a:	d02a      	beq.n	80075e2 <tcp_close_shutdown+0x15e>
 800758c:	e03f      	b.n	800760e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	8adb      	ldrh	r3, [r3, #22]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d021      	beq.n	80075da <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007596:	4b2a      	ldr	r3, [pc, #168]	; (8007640 <tcp_close_shutdown+0x1bc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d105      	bne.n	80075ac <tcp_close_shutdown+0x128>
 80075a0:	4b27      	ldr	r3, [pc, #156]	; (8007640 <tcp_close_shutdown+0x1bc>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	4a26      	ldr	r2, [pc, #152]	; (8007640 <tcp_close_shutdown+0x1bc>)
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e013      	b.n	80075d4 <tcp_close_shutdown+0x150>
 80075ac:	4b24      	ldr	r3, [pc, #144]	; (8007640 <tcp_close_shutdown+0x1bc>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	e00c      	b.n	80075ce <tcp_close_shutdown+0x14a>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d104      	bne.n	80075c8 <tcp_close_shutdown+0x144>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	60da      	str	r2, [r3, #12]
 80075c6:	e005      	b.n	80075d4 <tcp_close_shutdown+0x150>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1ef      	bne.n	80075b4 <tcp_close_shutdown+0x130>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fea0 	bl	8007320 <tcp_free>
      break;
 80075e0:	e01a      	b.n	8007618 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ff14 	bl	8007410 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4816      	ldr	r0, [pc, #88]	; (8007644 <tcp_close_shutdown+0x1c0>)
 80075ec:	f001 f8a8 	bl	8008740 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff feb1 	bl	8007358 <tcp_free_listen>
      break;
 80075f6:	e00f      	b.n	8007618 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	480e      	ldr	r0, [pc, #56]	; (8007634 <tcp_close_shutdown+0x1b0>)
 80075fc:	f001 f8a0 	bl	8008740 <tcp_pcb_remove>
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <tcp_close_shutdown+0x1b4>)
 8007602:	2201      	movs	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fe8a 	bl	8007320 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800760c:	e004      	b.n	8007618 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f81a 	bl	8007648 <tcp_close_shutdown_fin>
 8007614:	4603      	mov	r3, r0
 8007616:	e000      	b.n	800761a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bdb0      	pop	{r4, r5, r7, pc}
 8007622:	bf00      	nop
 8007624:	08010ba4 	.word	0x08010ba4
 8007628:	08010c78 	.word	0x08010c78
 800762c:	08010be8 	.word	0x08010be8
 8007630:	08010c98 	.word	0x08010c98
 8007634:	200087d8 	.word	0x200087d8
 8007638:	200087e0 	.word	0x200087e0
 800763c:	20008818 	.word	0x20008818
 8007640:	200087d0 	.word	0x200087d0
 8007644:	200087d4 	.word	0x200087d4

08007648 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <tcp_close_shutdown_fin+0x1c>
 8007656:	4b2e      	ldr	r3, [pc, #184]	; (8007710 <tcp_close_shutdown_fin+0xc8>)
 8007658:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800765c:	492d      	ldr	r1, [pc, #180]	; (8007714 <tcp_close_shutdown_fin+0xcc>)
 800765e:	482e      	ldr	r0, [pc, #184]	; (8007718 <tcp_close_shutdown_fin+0xd0>)
 8007660:	f007 fe1e 	bl	800f2a0 <iprintf>

  switch (pcb->state) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	7d1b      	ldrb	r3, [r3, #20]
 8007668:	2b07      	cmp	r3, #7
 800766a:	d020      	beq.n	80076ae <tcp_close_shutdown_fin+0x66>
 800766c:	2b07      	cmp	r3, #7
 800766e:	dc2b      	bgt.n	80076c8 <tcp_close_shutdown_fin+0x80>
 8007670:	2b03      	cmp	r3, #3
 8007672:	d002      	beq.n	800767a <tcp_close_shutdown_fin+0x32>
 8007674:	2b04      	cmp	r3, #4
 8007676:	d00d      	beq.n	8007694 <tcp_close_shutdown_fin+0x4c>
 8007678:	e026      	b.n	80076c8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f003 fee6 	bl	800b44c <tcp_send_fin>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11f      	bne.n	80076cc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2205      	movs	r2, #5
 8007690:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007692:	e01b      	b.n	80076cc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f003 fed9 	bl	800b44c <tcp_send_fin>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800769e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d114      	bne.n	80076d0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2205      	movs	r2, #5
 80076aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80076ac:	e010      	b.n	80076d0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f003 fecc 	bl	800b44c <tcp_send_fin>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80076b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2209      	movs	r2, #9
 80076c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80076c6:	e005      	b.n	80076d4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	e01c      	b.n	8007706 <tcp_close_shutdown_fin+0xbe>
      break;
 80076cc:	bf00      	nop
 80076ce:	e002      	b.n	80076d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80076d0:	bf00      	nop
 80076d2:	e000      	b.n	80076d6 <tcp_close_shutdown_fin+0x8e>
      break;
 80076d4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80076d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f003 fff2 	bl	800b6c8 <tcp_output>
 80076e4:	e00d      	b.n	8007702 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80076e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d108      	bne.n	8007702 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8b5b      	ldrh	r3, [r3, #26]
 80076f4:	f043 0308 	orr.w	r3, r3, #8
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	e001      	b.n	8007706 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	08010ba4 	.word	0x08010ba4
 8007714:	08010c54 	.word	0x08010c54
 8007718:	08010be8 	.word	0x08010be8

0800771c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <tcp_close+0x22>
 800772a:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <tcp_close+0x4c>)
 800772c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007730:	490e      	ldr	r1, [pc, #56]	; (800776c <tcp_close+0x50>)
 8007732:	480f      	ldr	r0, [pc, #60]	; (8007770 <tcp_close+0x54>)
 8007734:	f007 fdb4 	bl	800f2a0 <iprintf>
 8007738:	f06f 030f 	mvn.w	r3, #15
 800773c:	e00f      	b.n	800775e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7d1b      	ldrb	r3, [r3, #20]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d006      	beq.n	8007754 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8b5b      	ldrh	r3, [r3, #26]
 800774a:	f043 0310 	orr.w	r3, r3, #16
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007754:	2101      	movs	r1, #1
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7ff fe94 	bl	8007484 <tcp_close_shutdown>
 800775c:	4603      	mov	r3, r0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	08010ba4 	.word	0x08010ba4
 800776c:	08010cb4 	.word	0x08010cb4
 8007770:	08010be8 	.word	0x08010be8

08007774 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08e      	sub	sp, #56	; 0x38
 8007778:	af04      	add	r7, sp, #16
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d107      	bne.n	8007794 <tcp_abandon+0x20>
 8007784:	4b52      	ldr	r3, [pc, #328]	; (80078d0 <tcp_abandon+0x15c>)
 8007786:	f240 223d 	movw	r2, #573	; 0x23d
 800778a:	4952      	ldr	r1, [pc, #328]	; (80078d4 <tcp_abandon+0x160>)
 800778c:	4852      	ldr	r0, [pc, #328]	; (80078d8 <tcp_abandon+0x164>)
 800778e:	f007 fd87 	bl	800f2a0 <iprintf>
 8007792:	e099      	b.n	80078c8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	7d1b      	ldrb	r3, [r3, #20]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d106      	bne.n	80077aa <tcp_abandon+0x36>
 800779c:	4b4c      	ldr	r3, [pc, #304]	; (80078d0 <tcp_abandon+0x15c>)
 800779e:	f44f 7210 	mov.w	r2, #576	; 0x240
 80077a2:	494e      	ldr	r1, [pc, #312]	; (80078dc <tcp_abandon+0x168>)
 80077a4:	484c      	ldr	r0, [pc, #304]	; (80078d8 <tcp_abandon+0x164>)
 80077a6:	f007 fd7b 	bl	800f2a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7d1b      	ldrb	r3, [r3, #20]
 80077ae:	2b0a      	cmp	r3, #10
 80077b0:	d107      	bne.n	80077c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	484a      	ldr	r0, [pc, #296]	; (80078e0 <tcp_abandon+0x16c>)
 80077b6:	f000 ffc3 	bl	8008740 <tcp_pcb_remove>
    tcp_free(pcb);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff fdb0 	bl	8007320 <tcp_free>
 80077c0:	e082      	b.n	80078c8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7d1b      	ldrb	r3, [r3, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d126      	bne.n	800783a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	8adb      	ldrh	r3, [r3, #22]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02e      	beq.n	8007852 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80077f4:	4b3b      	ldr	r3, [pc, #236]	; (80078e4 <tcp_abandon+0x170>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d105      	bne.n	800780a <tcp_abandon+0x96>
 80077fe:	4b39      	ldr	r3, [pc, #228]	; (80078e4 <tcp_abandon+0x170>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4a37      	ldr	r2, [pc, #220]	; (80078e4 <tcp_abandon+0x170>)
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	e013      	b.n	8007832 <tcp_abandon+0xbe>
 800780a:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <tcp_abandon+0x170>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e00c      	b.n	800782c <tcp_abandon+0xb8>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d104      	bne.n	8007826 <tcp_abandon+0xb2>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	60da      	str	r2, [r3, #12]
 8007824:	e005      	b.n	8007832 <tcp_abandon+0xbe>
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	61fb      	str	r3, [r7, #28]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1ef      	bne.n	8007812 <tcp_abandon+0x9e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	60da      	str	r2, [r3, #12]
 8007838:	e00b      	b.n	8007852 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8adb      	ldrh	r3, [r3, #22]
 8007842:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4828      	ldr	r0, [pc, #160]	; (80078e8 <tcp_abandon+0x174>)
 8007848:	f000 ff7a 	bl	8008740 <tcp_pcb_remove>
 800784c:	4b27      	ldr	r3, [pc, #156]	; (80078ec <tcp_abandon+0x178>)
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fd1c 	bl	800829c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fd13 	bl	800829c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800787a:	2b00      	cmp	r3, #0
 800787c:	d004      	beq.n	8007888 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fd0a 	bl	800829c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00e      	beq.n	80078ac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	8b12      	ldrh	r2, [r2, #24]
 8007898:	9202      	str	r2, [sp, #8]
 800789a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	460b      	mov	r3, r1
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	69b9      	ldr	r1, [r7, #24]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f004 fcc2 	bl	800c230 <tcp_rst>
    }
    last_state = pcb->state;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	7d1b      	ldrb	r3, [r3, #20]
 80078b0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff fd34 	bl	8007320 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <tcp_abandon+0x154>
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f06f 010c 	mvn.w	r1, #12
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	4798      	blx	r3
  }
}
 80078c8:	3728      	adds	r7, #40	; 0x28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	08010ba4 	.word	0x08010ba4
 80078d4:	08010ce8 	.word	0x08010ce8
 80078d8:	08010be8 	.word	0x08010be8
 80078dc:	08010d04 	.word	0x08010d04
 80078e0:	200087dc 	.word	0x200087dc
 80078e4:	200087d0 	.word	0x200087d0
 80078e8:	200087d8 	.word	0x200087d8
 80078ec:	200087e0 	.word	0x200087e0

080078f0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80078f8:	2101      	movs	r1, #1
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff ff3a 	bl	8007774 <tcp_abandon>
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <tcp_update_rcv_ann_wnd+0x1c>
 8007916:	4b25      	ldr	r3, [pc, #148]	; (80079ac <tcp_update_rcv_ann_wnd+0xa4>)
 8007918:	f240 32a6 	movw	r2, #934	; 0x3a6
 800791c:	4924      	ldr	r1, [pc, #144]	; (80079b0 <tcp_update_rcv_ann_wnd+0xa8>)
 800791e:	4825      	ldr	r0, [pc, #148]	; (80079b4 <tcp_update_rcv_ann_wnd+0xac>)
 8007920:	f007 fcbe 	bl	800f2a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800792c:	4413      	add	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007938:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800793c:	bf28      	it	cs
 800793e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007942:	b292      	uxth	r2, r2
 8007944:	4413      	add	r3, r2
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	db08      	blt.n	8007960 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	e020      	b.n	80079a2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	dd03      	ble.n	8007976 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007974:	e014      	b.n	80079a0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007988:	d306      	bcc.n	8007998 <tcp_update_rcv_ann_wnd+0x90>
 800798a:	4b08      	ldr	r3, [pc, #32]	; (80079ac <tcp_update_rcv_ann_wnd+0xa4>)
 800798c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007990:	4909      	ldr	r1, [pc, #36]	; (80079b8 <tcp_update_rcv_ann_wnd+0xb0>)
 8007992:	4808      	ldr	r0, [pc, #32]	; (80079b4 <tcp_update_rcv_ann_wnd+0xac>)
 8007994:	f007 fc84 	bl	800f2a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	b29a      	uxth	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80079a0:	2300      	movs	r3, #0
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	08010ba4 	.word	0x08010ba4
 80079b0:	08010e00 	.word	0x08010e00
 80079b4:	08010be8 	.word	0x08010be8
 80079b8:	08010e24 	.word	0x08010e24

080079bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d107      	bne.n	80079de <tcp_recved+0x22>
 80079ce:	4b1f      	ldr	r3, [pc, #124]	; (8007a4c <tcp_recved+0x90>)
 80079d0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80079d4:	491e      	ldr	r1, [pc, #120]	; (8007a50 <tcp_recved+0x94>)
 80079d6:	481f      	ldr	r0, [pc, #124]	; (8007a54 <tcp_recved+0x98>)
 80079d8:	f007 fc62 	bl	800f2a0 <iprintf>
 80079dc:	e032      	b.n	8007a44 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7d1b      	ldrb	r3, [r3, #20]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d106      	bne.n	80079f4 <tcp_recved+0x38>
 80079e6:	4b19      	ldr	r3, [pc, #100]	; (8007a4c <tcp_recved+0x90>)
 80079e8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80079ec:	491a      	ldr	r1, [pc, #104]	; (8007a58 <tcp_recved+0x9c>)
 80079ee:	4819      	ldr	r0, [pc, #100]	; (8007a54 <tcp_recved+0x98>)
 80079f0:	f007 fc56 	bl	800f2a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80079f8:	887b      	ldrh	r3, [r7, #2]
 80079fa:	4413      	add	r3, r2
 80079fc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80079fe:	89fb      	ldrh	r3, [r7, #14]
 8007a00:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007a04:	d804      	bhi.n	8007a10 <tcp_recved+0x54>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0a:	89fa      	ldrh	r2, [r7, #14]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d204      	bcs.n	8007a1a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007a16:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a18:	e002      	b.n	8007a20 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	89fa      	ldrh	r2, [r7, #14]
 8007a1e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ff71 	bl	8007908 <tcp_update_rcv_ann_wnd>
 8007a26:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007a2e:	d309      	bcc.n	8007a44 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	8b5b      	ldrh	r3, [r3, #26]
 8007a34:	f043 0302 	orr.w	r3, r3, #2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f003 fe42 	bl	800b6c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	08010ba4 	.word	0x08010ba4
 8007a50:	08010e40 	.word	0x08010e40
 8007a54:	08010be8 	.word	0x08010be8
 8007a58:	08010e58 	.word	0x08010e58

08007a5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007a5c:	b5b0      	push	{r4, r5, r7, lr}
 8007a5e:	b090      	sub	sp, #64	; 0x40
 8007a60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007a68:	4b94      	ldr	r3, [pc, #592]	; (8007cbc <tcp_slowtmr+0x260>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	4a93      	ldr	r2, [pc, #588]	; (8007cbc <tcp_slowtmr+0x260>)
 8007a70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007a72:	4b93      	ldr	r3, [pc, #588]	; (8007cc0 <tcp_slowtmr+0x264>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b91      	ldr	r3, [pc, #580]	; (8007cc0 <tcp_slowtmr+0x264>)
 8007a7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007a82:	4b90      	ldr	r3, [pc, #576]	; (8007cc4 <tcp_slowtmr+0x268>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007a88:	e29d      	b.n	8007fc6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	7d1b      	ldrb	r3, [r3, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <tcp_slowtmr+0x44>
 8007a92:	4b8d      	ldr	r3, [pc, #564]	; (8007cc8 <tcp_slowtmr+0x26c>)
 8007a94:	f240 42be 	movw	r2, #1214	; 0x4be
 8007a98:	498c      	ldr	r1, [pc, #560]	; (8007ccc <tcp_slowtmr+0x270>)
 8007a9a:	488d      	ldr	r0, [pc, #564]	; (8007cd0 <tcp_slowtmr+0x274>)
 8007a9c:	f007 fc00 	bl	800f2a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	7d1b      	ldrb	r3, [r3, #20]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <tcp_slowtmr+0x5a>
 8007aa8:	4b87      	ldr	r3, [pc, #540]	; (8007cc8 <tcp_slowtmr+0x26c>)
 8007aaa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007aae:	4989      	ldr	r1, [pc, #548]	; (8007cd4 <tcp_slowtmr+0x278>)
 8007ab0:	4887      	ldr	r0, [pc, #540]	; (8007cd0 <tcp_slowtmr+0x274>)
 8007ab2:	f007 fbf5 	bl	800f2a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	7d1b      	ldrb	r3, [r3, #20]
 8007aba:	2b0a      	cmp	r3, #10
 8007abc:	d106      	bne.n	8007acc <tcp_slowtmr+0x70>
 8007abe:	4b82      	ldr	r3, [pc, #520]	; (8007cc8 <tcp_slowtmr+0x26c>)
 8007ac0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007ac4:	4984      	ldr	r1, [pc, #528]	; (8007cd8 <tcp_slowtmr+0x27c>)
 8007ac6:	4882      	ldr	r0, [pc, #520]	; (8007cd0 <tcp_slowtmr+0x274>)
 8007ac8:	f007 fbea 	bl	800f2a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	7f9a      	ldrb	r2, [r3, #30]
 8007ad0:	4b7b      	ldr	r3, [pc, #492]	; (8007cc0 <tcp_slowtmr+0x264>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d105      	bne.n	8007ae4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007ae2:	e270      	b.n	8007fc6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007ae4:	4b76      	ldr	r3, [pc, #472]	; (8007cc0 <tcp_slowtmr+0x264>)
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	7d1b      	ldrb	r3, [r3, #20]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d10a      	bne.n	8007b16 <tcp_slowtmr+0xba>
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d905      	bls.n	8007b16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b14:	e11e      	b.n	8007d54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b1c:	2b0b      	cmp	r3, #11
 8007b1e:	d905      	bls.n	8007b2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b24:	3301      	adds	r3, #1
 8007b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b2a:	e113      	b.n	8007d54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d075      	beq.n	8007c22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d006      	beq.n	8007b4c <tcp_slowtmr+0xf0>
 8007b3e:	4b62      	ldr	r3, [pc, #392]	; (8007cc8 <tcp_slowtmr+0x26c>)
 8007b40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007b44:	4965      	ldr	r1, [pc, #404]	; (8007cdc <tcp_slowtmr+0x280>)
 8007b46:	4862      	ldr	r0, [pc, #392]	; (8007cd0 <tcp_slowtmr+0x274>)
 8007b48:	f007 fbaa 	bl	800f2a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <tcp_slowtmr+0x106>
 8007b54:	4b5c      	ldr	r3, [pc, #368]	; (8007cc8 <tcp_slowtmr+0x26c>)
 8007b56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007b5a:	4961      	ldr	r1, [pc, #388]	; (8007ce0 <tcp_slowtmr+0x284>)
 8007b5c:	485c      	ldr	r0, [pc, #368]	; (8007cd0 <tcp_slowtmr+0x274>)
 8007b5e:	f007 fb9f 	bl	800f2a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007b68:	2b0b      	cmp	r3, #11
 8007b6a:	d905      	bls.n	8007b78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b70:	3301      	adds	r3, #1
 8007b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b76:	e0ed      	b.n	8007d54 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	4a58      	ldr	r2, [pc, #352]	; (8007ce4 <tcp_slowtmr+0x288>)
 8007b82:	5cd3      	ldrb	r3, [r2, r3]
 8007b84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b8c:	7c7a      	ldrb	r2, [r7, #17]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d907      	bls.n	8007ba2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b98:	3301      	adds	r3, #1
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ba8:	7c7a      	ldrb	r2, [r7, #17]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	f200 80d2 	bhi.w	8007d54 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d108      	bne.n	8007bd0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bc0:	f004 fc2a 	bl	800c418 <tcp_zero_window_probe>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007bca:	2300      	movs	r3, #0
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	e011      	b.n	8007bf4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bda:	f003 faef 	bl	800b1bc <tcp_split_unsent_seg>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d107      	bne.n	8007bf4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007be6:	f003 fd6f 	bl	800b6c8 <tcp_output>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80ac 	beq.w	8007d54 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c0a:	2b06      	cmp	r3, #6
 8007c0c:	f200 80a2 	bhi.w	8007d54 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c16:	3301      	adds	r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007c20:	e098      	b.n	8007d54 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	db0f      	blt.n	8007c4c <tcp_slowtmr+0x1f0>
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d008      	beq.n	8007c4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3301      	adds	r3, #1
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	b21a      	sxth	r2, r3
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	db7b      	blt.n	8007d54 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007c5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c5e:	f004 f827 	bl	800bcb0 <tcp_rexmit_rto_prepare>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d007      	beq.n	8007c78 <tcp_slowtmr+0x21c>
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d171      	bne.n	8007d54 <tcp_slowtmr+0x2f8>
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d06d      	beq.n	8007d54 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	7d1b      	ldrb	r3, [r3, #20]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d03a      	beq.n	8007cf6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c86:	2b0c      	cmp	r3, #12
 8007c88:	bf28      	it	cs
 8007c8a:	230c      	movcs	r3, #12
 8007c8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007c94:	10db      	asrs	r3, r3, #3
 8007c96:	b21b      	sxth	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007ca0:	4413      	add	r3, r2
 8007ca2:	7efa      	ldrb	r2, [r7, #27]
 8007ca4:	4910      	ldr	r1, [pc, #64]	; (8007ce8 <tcp_slowtmr+0x28c>)
 8007ca6:	5c8a      	ldrb	r2, [r1, r2]
 8007ca8:	4093      	lsls	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	dc1a      	bgt.n	8007cec <tcp_slowtmr+0x290>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	b21a      	sxth	r2, r3
 8007cba:	e019      	b.n	8007cf0 <tcp_slowtmr+0x294>
 8007cbc:	200087cc 	.word	0x200087cc
 8007cc0:	200087e2 	.word	0x200087e2
 8007cc4:	200087d8 	.word	0x200087d8
 8007cc8:	08010ba4 	.word	0x08010ba4
 8007ccc:	08010ee8 	.word	0x08010ee8
 8007cd0:	08010be8 	.word	0x08010be8
 8007cd4:	08010f14 	.word	0x08010f14
 8007cd8:	08010f40 	.word	0x08010f40
 8007cdc:	08010f70 	.word	0x08010f70
 8007ce0:	08010fa4 	.word	0x08010fa4
 8007ce4:	08012b7c 	.word	0x08012b7c
 8007ce8:	08012b6c 	.word	0x08012b6c
 8007cec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	bf28      	it	cs
 8007d0c:	4613      	movcs	r3, r2
 8007d0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007d10:	8a7b      	ldrh	r3, [r7, #18]
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d206      	bcs.n	8007d3c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d50:	f004 f81e 	bl	800bd90 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	7d1b      	ldrb	r3, [r3, #20]
 8007d58:	2b06      	cmp	r3, #6
 8007d5a:	d111      	bne.n	8007d80 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5e:	8b5b      	ldrh	r3, [r3, #26]
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d68:	4b9c      	ldr	r3, [pc, #624]	; (8007fdc <tcp_slowtmr+0x580>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b28      	cmp	r3, #40	; 0x28
 8007d74:	d904      	bls.n	8007d80 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	7a5b      	ldrb	r3, [r3, #9]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d04a      	beq.n	8007e22 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d003      	beq.n	8007d9c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007d98:	2b07      	cmp	r3, #7
 8007d9a:	d142      	bne.n	8007e22 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d9c:	4b8f      	ldr	r3, [pc, #572]	; (8007fdc <tcp_slowtmr+0x580>)
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007dac:	4b8c      	ldr	r3, [pc, #560]	; (8007fe0 <tcp_slowtmr+0x584>)
 8007dae:	440b      	add	r3, r1
 8007db0:	498c      	ldr	r1, [pc, #560]	; (8007fe4 <tcp_slowtmr+0x588>)
 8007db2:	fba1 1303 	umull	r1, r3, r1, r3
 8007db6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d90a      	bls.n	8007dd2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007dc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dca:	3301      	adds	r3, #1
 8007dcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dd0:	e027      	b.n	8007e22 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007dd2:	4b82      	ldr	r3, [pc, #520]	; (8007fdc <tcp_slowtmr+0x580>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007de8:	4618      	mov	r0, r3
 8007dea:	4b7f      	ldr	r3, [pc, #508]	; (8007fe8 <tcp_slowtmr+0x58c>)
 8007dec:	fb00 f303 	mul.w	r3, r0, r3
 8007df0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007df2:	497c      	ldr	r1, [pc, #496]	; (8007fe4 <tcp_slowtmr+0x588>)
 8007df4:	fba1 1303 	umull	r1, r3, r1, r3
 8007df8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d911      	bls.n	8007e22 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e00:	f004 faca 	bl	800c398 <tcp_keepalive>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007e0a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d107      	bne.n	8007e22 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007e18:	3301      	adds	r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d011      	beq.n	8007e4e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007e2a:	4b6c      	ldr	r3, [pc, #432]	; (8007fdc <tcp_slowtmr+0x580>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	1ad2      	subs	r2, r2, r3
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	440b      	add	r3, r1
 8007e42:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d302      	bcc.n	8007e4e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e4a:	f000 fddd 	bl	8008a08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	7d1b      	ldrb	r3, [r3, #20]
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d10b      	bne.n	8007e6e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e56:	4b61      	ldr	r3, [pc, #388]	; (8007fdc <tcp_slowtmr+0x580>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b28      	cmp	r3, #40	; 0x28
 8007e62:	d904      	bls.n	8007e6e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e68:	3301      	adds	r3, #1
 8007e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	7d1b      	ldrb	r3, [r3, #20]
 8007e72:	2b09      	cmp	r3, #9
 8007e74:	d10b      	bne.n	8007e8e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e76:	4b59      	ldr	r3, [pc, #356]	; (8007fdc <tcp_slowtmr+0x580>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2bf0      	cmp	r3, #240	; 0xf0
 8007e82:	d904      	bls.n	8007e8e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d060      	beq.n	8007f58 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ea0:	f000 fbfe 	bl	80086a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d010      	beq.n	8007ecc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007eaa:	4b50      	ldr	r3, [pc, #320]	; (8007fec <tcp_slowtmr+0x590>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d106      	bne.n	8007ec2 <tcp_slowtmr+0x466>
 8007eb4:	4b4e      	ldr	r3, [pc, #312]	; (8007ff0 <tcp_slowtmr+0x594>)
 8007eb6:	f240 526d 	movw	r2, #1389	; 0x56d
 8007eba:	494e      	ldr	r1, [pc, #312]	; (8007ff4 <tcp_slowtmr+0x598>)
 8007ebc:	484e      	ldr	r0, [pc, #312]	; (8007ff8 <tcp_slowtmr+0x59c>)
 8007ebe:	f007 f9ef 	bl	800f2a0 <iprintf>
        prev->next = pcb->next;
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	60da      	str	r2, [r3, #12]
 8007eca:	e00f      	b.n	8007eec <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007ecc:	4b47      	ldr	r3, [pc, #284]	; (8007fec <tcp_slowtmr+0x590>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d006      	beq.n	8007ee4 <tcp_slowtmr+0x488>
 8007ed6:	4b46      	ldr	r3, [pc, #280]	; (8007ff0 <tcp_slowtmr+0x594>)
 8007ed8:	f240 5271 	movw	r2, #1393	; 0x571
 8007edc:	4947      	ldr	r1, [pc, #284]	; (8007ffc <tcp_slowtmr+0x5a0>)
 8007ede:	4846      	ldr	r0, [pc, #280]	; (8007ff8 <tcp_slowtmr+0x59c>)
 8007ee0:	f007 f9de 	bl	800f2a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4a40      	ldr	r2, [pc, #256]	; (8007fec <tcp_slowtmr+0x590>)
 8007eea:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007eec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d013      	beq.n	8007f1c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007efc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	3304      	adds	r3, #4
 8007f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f04:	8ad2      	ldrh	r2, [r2, #22]
 8007f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f08:	8b09      	ldrh	r1, [r1, #24]
 8007f0a:	9102      	str	r1, [sp, #8]
 8007f0c:	9201      	str	r2, [sp, #4]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	462b      	mov	r3, r5
 8007f12:	4622      	mov	r2, r4
 8007f14:	4601      	mov	r1, r0
 8007f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f18:	f004 f98a 	bl	800c230 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	7d1b      	ldrb	r3, [r3, #20]
 8007f26:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007f32:	6838      	ldr	r0, [r7, #0]
 8007f34:	f7ff f9f4 	bl	8007320 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007f38:	4b31      	ldr	r3, [pc, #196]	; (8008000 <tcp_slowtmr+0x5a4>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d004      	beq.n	8007f4e <tcp_slowtmr+0x4f2>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f06f 010c 	mvn.w	r1, #12
 8007f4a:	68b8      	ldr	r0, [r7, #8]
 8007f4c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007f4e:	4b2c      	ldr	r3, [pc, #176]	; (8008000 <tcp_slowtmr+0x5a4>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d037      	beq.n	8007fc6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007f56:	e592      	b.n	8007a7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	7f1b      	ldrb	r3, [r3, #28]
 8007f66:	3301      	adds	r3, #1
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	7f1a      	ldrb	r2, [r3, #28]
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	7f5b      	ldrb	r3, [r3, #29]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d325      	bcc.n	8007fc6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007f80:	4b1f      	ldr	r3, [pc, #124]	; (8008000 <tcp_slowtmr+0x5a4>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <tcp_slowtmr+0x54c>
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f98:	6912      	ldr	r2, [r2, #16]
 8007f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007fa6:	e002      	b.n	8007fae <tcp_slowtmr+0x552>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007fae:	4b14      	ldr	r3, [pc, #80]	; (8008000 <tcp_slowtmr+0x5a4>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d000      	beq.n	8007fb8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007fb6:	e562      	b.n	8007a7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007fb8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc2:	f003 fb81 	bl	800b6c8 <tcp_output>
  while (pcb != NULL) {
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f47f ad5e 	bne.w	8007a8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <tcp_slowtmr+0x5a8>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007fd8:	e069      	b.n	80080ae <tcp_slowtmr+0x652>
 8007fda:	bf00      	nop
 8007fdc:	200087cc 	.word	0x200087cc
 8007fe0:	000a4cb8 	.word	0x000a4cb8
 8007fe4:	10624dd3 	.word	0x10624dd3
 8007fe8:	000124f8 	.word	0x000124f8
 8007fec:	200087d8 	.word	0x200087d8
 8007ff0:	08010ba4 	.word	0x08010ba4
 8007ff4:	08010fdc 	.word	0x08010fdc
 8007ff8:	08010be8 	.word	0x08010be8
 8007ffc:	08011008 	.word	0x08011008
 8008000:	200087e0 	.word	0x200087e0
 8008004:	200087dc 	.word	0x200087dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	7d1b      	ldrb	r3, [r3, #20]
 800800c:	2b0a      	cmp	r3, #10
 800800e:	d006      	beq.n	800801e <tcp_slowtmr+0x5c2>
 8008010:	4b2b      	ldr	r3, [pc, #172]	; (80080c0 <tcp_slowtmr+0x664>)
 8008012:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008016:	492b      	ldr	r1, [pc, #172]	; (80080c4 <tcp_slowtmr+0x668>)
 8008018:	482b      	ldr	r0, [pc, #172]	; (80080c8 <tcp_slowtmr+0x66c>)
 800801a:	f007 f941 	bl	800f2a0 <iprintf>
    pcb_remove = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008024:	4b29      	ldr	r3, [pc, #164]	; (80080cc <tcp_slowtmr+0x670>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2bf0      	cmp	r3, #240	; 0xf0
 8008030:	d904      	bls.n	800803c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008036:	3301      	adds	r3, #1
 8008038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800803c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008040:	2b00      	cmp	r3, #0
 8008042:	d02f      	beq.n	80080a4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008046:	f000 fb2b 	bl	80086a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d010      	beq.n	8008072 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008050:	4b1f      	ldr	r3, [pc, #124]	; (80080d0 <tcp_slowtmr+0x674>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008056:	429a      	cmp	r2, r3
 8008058:	d106      	bne.n	8008068 <tcp_slowtmr+0x60c>
 800805a:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <tcp_slowtmr+0x664>)
 800805c:	f240 52af 	movw	r2, #1455	; 0x5af
 8008060:	491c      	ldr	r1, [pc, #112]	; (80080d4 <tcp_slowtmr+0x678>)
 8008062:	4819      	ldr	r0, [pc, #100]	; (80080c8 <tcp_slowtmr+0x66c>)
 8008064:	f007 f91c 	bl	800f2a0 <iprintf>
        prev->next = pcb->next;
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	60da      	str	r2, [r3, #12]
 8008070:	e00f      	b.n	8008092 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008072:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <tcp_slowtmr+0x674>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008078:	429a      	cmp	r2, r3
 800807a:	d006      	beq.n	800808a <tcp_slowtmr+0x62e>
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <tcp_slowtmr+0x664>)
 800807e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008082:	4915      	ldr	r1, [pc, #84]	; (80080d8 <tcp_slowtmr+0x67c>)
 8008084:	4810      	ldr	r0, [pc, #64]	; (80080c8 <tcp_slowtmr+0x66c>)
 8008086:	f007 f90b 	bl	800f2a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	4a10      	ldr	r2, [pc, #64]	; (80080d0 <tcp_slowtmr+0x674>)
 8008090:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008094:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800809c:	69f8      	ldr	r0, [r7, #28]
 800809e:	f7ff f93f 	bl	8007320 <tcp_free>
 80080a2:	e004      	b.n	80080ae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80080ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1a9      	bne.n	8008008 <tcp_slowtmr+0x5ac>
    }
  }
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	3730      	adds	r7, #48	; 0x30
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bdb0      	pop	{r4, r5, r7, pc}
 80080be:	bf00      	nop
 80080c0:	08010ba4 	.word	0x08010ba4
 80080c4:	08011034 	.word	0x08011034
 80080c8:	08010be8 	.word	0x08010be8
 80080cc:	200087cc 	.word	0x200087cc
 80080d0:	200087dc 	.word	0x200087dc
 80080d4:	08011064 	.word	0x08011064
 80080d8:	0801108c 	.word	0x0801108c

080080dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80080e2:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <tcp_fasttmr+0xbc>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	3301      	adds	r3, #1
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <tcp_fasttmr+0xbc>)
 80080ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80080ee:	4b2b      	ldr	r3, [pc, #172]	; (800819c <tcp_fasttmr+0xc0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80080f4:	e048      	b.n	8008188 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	7f9a      	ldrb	r2, [r3, #30]
 80080fa:	4b27      	ldr	r3, [pc, #156]	; (8008198 <tcp_fasttmr+0xbc>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d03f      	beq.n	8008182 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008102:	4b25      	ldr	r3, [pc, #148]	; (8008198 <tcp_fasttmr+0xbc>)
 8008104:	781a      	ldrb	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8b5b      	ldrh	r3, [r3, #26]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d010      	beq.n	8008138 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8b5b      	ldrh	r3, [r3, #26]
 800811a:	f043 0302 	orr.w	r3, r3, #2
 800811e:	b29a      	uxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f003 facf 	bl	800b6c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8b5b      	ldrh	r3, [r3, #26]
 800812e:	f023 0303 	bic.w	r3, r3, #3
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8b5b      	ldrh	r3, [r3, #26]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d009      	beq.n	8008158 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8b5b      	ldrh	r3, [r3, #26]
 8008148:	f023 0308 	bic.w	r3, r3, #8
 800814c:	b29a      	uxth	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff fa78 	bl	8007648 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008166:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <tcp_fasttmr+0xc4>)
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f819 	bl	80081a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008172:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <tcp_fasttmr+0xc4>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d000      	beq.n	800817c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800817a:	e7b8      	b.n	80080ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	e002      	b.n	8008188 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1b3      	bne.n	80080f6 <tcp_fasttmr+0x1a>
    }
  }
}
 800818e:	bf00      	nop
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	200087e2 	.word	0x200087e2
 800819c:	200087d8 	.word	0x200087d8
 80081a0:	200087e0 	.word	0x200087e0

080081a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80081a4:	b590      	push	{r4, r7, lr}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <tcp_process_refused_data+0x22>
 80081b2:	4b37      	ldr	r3, [pc, #220]	; (8008290 <tcp_process_refused_data+0xec>)
 80081b4:	f240 6209 	movw	r2, #1545	; 0x609
 80081b8:	4936      	ldr	r1, [pc, #216]	; (8008294 <tcp_process_refused_data+0xf0>)
 80081ba:	4837      	ldr	r0, [pc, #220]	; (8008298 <tcp_process_refused_data+0xf4>)
 80081bc:	f007 f870 	bl	800f2a0 <iprintf>
 80081c0:	f06f 030f 	mvn.w	r3, #15
 80081c4:	e060      	b.n	8008288 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ca:	7b5b      	ldrb	r3, [r3, #13]
 80081cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <tcp_process_refused_data+0x58>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6918      	ldr	r0, [r3, #16]
 80081ee:	2300      	movs	r3, #0
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	47a0      	blx	r4
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
 80081fa:	e007      	b.n	800820c <tcp_process_refused_data+0x68>
 80081fc:	2300      	movs	r3, #0
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	2000      	movs	r0, #0
 8008204:	f000 f8a4 	bl	8008350 <tcp_recv_null>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800820c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d12a      	bne.n	800826a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d033      	beq.n	8008286 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008222:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008226:	d005      	beq.n	8008234 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	3301      	adds	r3, #1
 800822e:	b29a      	uxth	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00b      	beq.n	8008256 <tcp_process_refused_data+0xb2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6918      	ldr	r0, [r3, #16]
 8008248:	2300      	movs	r3, #0
 800824a:	2200      	movs	r2, #0
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	47a0      	blx	r4
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]
 8008254:	e001      	b.n	800825a <tcp_process_refused_data+0xb6>
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800825a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825e:	f113 0f0d 	cmn.w	r3, #13
 8008262:	d110      	bne.n	8008286 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008264:	f06f 030c 	mvn.w	r3, #12
 8008268:	e00e      	b.n	8008288 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800826a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800826e:	f113 0f0d 	cmn.w	r3, #13
 8008272:	d102      	bne.n	800827a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008274:	f06f 030c 	mvn.w	r3, #12
 8008278:	e006      	b.n	8008288 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008280:	f06f 0304 	mvn.w	r3, #4
 8008284:	e000      	b.n	8008288 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	bd90      	pop	{r4, r7, pc}
 8008290:	08010ba4 	.word	0x08010ba4
 8008294:	080110b4 	.word	0x080110b4
 8008298:	08010be8 	.word	0x08010be8

0800829c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80082a4:	e007      	b.n	80082b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f80a 	bl	80082c6 <tcp_seg_free>
    seg = next;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f4      	bne.n	80082a6 <tcp_segs_free+0xa>
  }
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00c      	beq.n	80082ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fd7d 	bl	8006de0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	2003      	movs	r0, #3
 80082ea:	f7fd ff23 	bl	8006134 <memp_free>
  }
}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <tcp_seg_copy+0x1c>
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <tcp_seg_copy+0x4c>)
 8008308:	f240 6282 	movw	r2, #1666	; 0x682
 800830c:	490e      	ldr	r1, [pc, #56]	; (8008348 <tcp_seg_copy+0x50>)
 800830e:	480f      	ldr	r0, [pc, #60]	; (800834c <tcp_seg_copy+0x54>)
 8008310:	f006 ffc6 	bl	800f2a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008314:	2003      	movs	r0, #3
 8008316:	f7fd fe9d 	bl	8006054 <memp_malloc>
 800831a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <tcp_seg_copy+0x2e>
    return NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	e00a      	b.n	800833c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008326:	2210      	movs	r2, #16
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f007 f892 	bl	800f454 <memcpy>
  pbuf_ref(cseg->p);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe fdf3 	bl	8006f20 <pbuf_ref>
  return cseg;
 800833a:	68fb      	ldr	r3, [r7, #12]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	08010ba4 	.word	0x08010ba4
 8008348:	080110f8 	.word	0x080110f8
 800834c:	08010be8 	.word	0x08010be8

08008350 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d109      	bne.n	8008378 <tcp_recv_null+0x28>
 8008364:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <tcp_recv_null+0x60>)
 8008366:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800836a:	4912      	ldr	r1, [pc, #72]	; (80083b4 <tcp_recv_null+0x64>)
 800836c:	4812      	ldr	r0, [pc, #72]	; (80083b8 <tcp_recv_null+0x68>)
 800836e:	f006 ff97 	bl	800f2a0 <iprintf>
 8008372:	f06f 030f 	mvn.w	r3, #15
 8008376:	e016      	b.n	80083a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	891b      	ldrh	r3, [r3, #8]
 8008382:	4619      	mov	r1, r3
 8008384:	68b8      	ldr	r0, [r7, #8]
 8008386:	f7ff fb19 	bl	80079bc <tcp_recved>
    pbuf_free(p);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe fd28 	bl	8006de0 <pbuf_free>
 8008390:	e008      	b.n	80083a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d104      	bne.n	80083a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800839a:	68b8      	ldr	r0, [r7, #8]
 800839c:	f7ff f9be 	bl	800771c <tcp_close>
 80083a0:	4603      	mov	r3, r0
 80083a2:	e000      	b.n	80083a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	08010ba4 	.word	0x08010ba4
 80083b4:	08011114 	.word	0x08011114
 80083b8:	08010be8 	.word	0x08010be8

080083bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80083c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	db01      	blt.n	80083d2 <tcp_kill_prio+0x16>
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	e000      	b.n	80083d4 <tcp_kill_prio+0x18>
 80083d2:	237f      	movs	r3, #127	; 0x7f
 80083d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d034      	beq.n	8008446 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3b01      	subs	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80083ea:	4b19      	ldr	r3, [pc, #100]	; (8008450 <tcp_kill_prio+0x94>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	e01f      	b.n	8008432 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	7d5b      	ldrb	r3, [r3, #21]
 80083f6:	7afa      	ldrb	r2, [r7, #11]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d80c      	bhi.n	8008416 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008400:	7afa      	ldrb	r2, [r7, #11]
 8008402:	429a      	cmp	r2, r3
 8008404:	d112      	bne.n	800842c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <tcp_kill_prio+0x98>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	429a      	cmp	r2, r3
 8008414:	d80a      	bhi.n	800842c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <tcp_kill_prio+0x98>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	7d5b      	ldrb	r3, [r3, #21]
 800842a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1dc      	bne.n	80083f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d004      	beq.n	8008448 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800843e:	6938      	ldr	r0, [r7, #16]
 8008440:	f7ff fa56 	bl	80078f0 <tcp_abort>
 8008444:	e000      	b.n	8008448 <tcp_kill_prio+0x8c>
    return;
 8008446:	bf00      	nop
  }
}
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	200087d8 	.word	0x200087d8
 8008454:	200087cc 	.word	0x200087cc

08008458 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d009      	beq.n	800847c <tcp_kill_state+0x24>
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	2b09      	cmp	r3, #9
 800846c:	d006      	beq.n	800847c <tcp_kill_state+0x24>
 800846e:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <tcp_kill_state+0x80>)
 8008470:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008474:	4919      	ldr	r1, [pc, #100]	; (80084dc <tcp_kill_state+0x84>)
 8008476:	481a      	ldr	r0, [pc, #104]	; (80084e0 <tcp_kill_state+0x88>)
 8008478:	f006 ff12 	bl	800f2a0 <iprintf>

  inactivity = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008480:	2300      	movs	r3, #0
 8008482:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008484:	4b17      	ldr	r3, [pc, #92]	; (80084e4 <tcp_kill_state+0x8c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e017      	b.n	80084bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	7d1b      	ldrb	r3, [r3, #20]
 8008490:	79fa      	ldrb	r2, [r7, #7]
 8008492:	429a      	cmp	r2, r3
 8008494:	d10f      	bne.n	80084b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <tcp_kill_state+0x90>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d807      	bhi.n	80084b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <tcp_kill_state+0x90>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e4      	bne.n	800848c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80084c8:	2100      	movs	r1, #0
 80084ca:	6938      	ldr	r0, [r7, #16]
 80084cc:	f7ff f952 	bl	8007774 <tcp_abandon>
  }
}
 80084d0:	bf00      	nop
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	08010ba4 	.word	0x08010ba4
 80084dc:	08011130 	.word	0x08011130
 80084e0:	08010be8 	.word	0x08010be8
 80084e4:	200087d8 	.word	0x200087d8
 80084e8:	200087cc 	.word	0x200087cc

080084ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80084fa:	4b12      	ldr	r3, [pc, #72]	; (8008544 <tcp_kill_timewait+0x58>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	e012      	b.n	8008528 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <tcp_kill_timewait+0x5c>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d807      	bhi.n	8008522 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008512:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <tcp_kill_timewait+0x5c>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e9      	bne.n	8008502 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008534:	68b8      	ldr	r0, [r7, #8]
 8008536:	f7ff f9db 	bl	80078f0 <tcp_abort>
  }
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	200087dc 	.word	0x200087dc
 8008548:	200087cc 	.word	0x200087cc

0800854c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008552:	4b10      	ldr	r3, [pc, #64]	; (8008594 <tcp_handle_closepend+0x48>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008558:	e014      	b.n	8008584 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8b5b      	ldrh	r3, [r3, #26]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	8b5b      	ldrh	r3, [r3, #26]
 8008570:	f023 0308 	bic.w	r3, r3, #8
 8008574:	b29a      	uxth	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff f864 	bl	8007648 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e7      	bne.n	800855a <tcp_handle_closepend+0xe>
  }
}
 800858a:	bf00      	nop
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	200087d8 	.word	0x200087d8

08008598 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085a2:	2001      	movs	r0, #1
 80085a4:	f7fd fd56 	bl	8006054 <memp_malloc>
 80085a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d126      	bne.n	80085fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80085b0:	f7ff ffcc 	bl	800854c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80085b4:	f7ff ff9a 	bl	80084ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085b8:	2001      	movs	r0, #1
 80085ba:	f7fd fd4b 	bl	8006054 <memp_malloc>
 80085be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d11b      	bne.n	80085fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80085c6:	2009      	movs	r0, #9
 80085c8:	f7ff ff46 	bl	8008458 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085cc:	2001      	movs	r0, #1
 80085ce:	f7fd fd41 	bl	8006054 <memp_malloc>
 80085d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d111      	bne.n	80085fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80085da:	2008      	movs	r0, #8
 80085dc:	f7ff ff3c 	bl	8008458 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085e0:	2001      	movs	r0, #1
 80085e2:	f7fd fd37 	bl	8006054 <memp_malloc>
 80085e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d107      	bne.n	80085fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fee3 	bl	80083bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085f6:	2001      	movs	r0, #1
 80085f8:	f7fd fd2c 	bl	8006054 <memp_malloc>
 80085fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d03f      	beq.n	8008684 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008604:	229c      	movs	r2, #156	; 0x9c
 8008606:	2100      	movs	r1, #0
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f006 feae 	bl	800f36a <memset>
    pcb->prio = prio;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	79fa      	ldrb	r2, [r7, #7]
 8008612:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800861a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008624:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	22ff      	movs	r2, #255	; 0xff
 8008632:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f44f 7206 	mov.w	r2, #536	; 0x218
 800863a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2206      	movs	r2, #6
 8008640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2206      	movs	r2, #6
 8008648:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008650:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <tcp_alloc+0xf8>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008662:	4b0c      	ldr	r3, [pc, #48]	; (8008694 <tcp_alloc+0xfc>)
 8008664:	781a      	ldrb	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008670:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4a08      	ldr	r2, [pc, #32]	; (8008698 <tcp_alloc+0x100>)
 8008678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a07      	ldr	r2, [pc, #28]	; (800869c <tcp_alloc+0x104>)
 8008680:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008684:	68fb      	ldr	r3, [r7, #12]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	200087cc 	.word	0x200087cc
 8008694:	200087e2 	.word	0x200087e2
 8008698:	08008351 	.word	0x08008351
 800869c:	006ddd00 	.word	0x006ddd00

080086a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d107      	bne.n	80086be <tcp_pcb_purge+0x1e>
 80086ae:	4b21      	ldr	r3, [pc, #132]	; (8008734 <tcp_pcb_purge+0x94>)
 80086b0:	f640 0251 	movw	r2, #2129	; 0x851
 80086b4:	4920      	ldr	r1, [pc, #128]	; (8008738 <tcp_pcb_purge+0x98>)
 80086b6:	4821      	ldr	r0, [pc, #132]	; (800873c <tcp_pcb_purge+0x9c>)
 80086b8:	f006 fdf2 	bl	800f2a0 <iprintf>
 80086bc:	e037      	b.n	800872e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	7d1b      	ldrb	r3, [r3, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d033      	beq.n	800872e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80086ca:	2b0a      	cmp	r3, #10
 80086cc:	d02f      	beq.n	800872e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d02b      	beq.n	800872e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d007      	beq.n	80086ee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fb7c 	bl	8006de0 <pbuf_free>
      pcb->refused_data = NULL;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f986 	bl	8008a08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008702:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fdc7 	bl	800829c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff fdc2 	bl	800829c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	66da      	str	r2, [r3, #108]	; 0x6c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	08010ba4 	.word	0x08010ba4
 8008738:	080111f0 	.word	0x080111f0
 800873c:	08010be8 	.word	0x08010be8

08008740 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <tcp_pcb_remove+0x1e>
 8008750:	4b3e      	ldr	r3, [pc, #248]	; (800884c <tcp_pcb_remove+0x10c>)
 8008752:	f640 0283 	movw	r2, #2179	; 0x883
 8008756:	493e      	ldr	r1, [pc, #248]	; (8008850 <tcp_pcb_remove+0x110>)
 8008758:	483e      	ldr	r0, [pc, #248]	; (8008854 <tcp_pcb_remove+0x114>)
 800875a:	f006 fda1 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <tcp_pcb_remove+0x32>
 8008764:	4b39      	ldr	r3, [pc, #228]	; (800884c <tcp_pcb_remove+0x10c>)
 8008766:	f640 0284 	movw	r2, #2180	; 0x884
 800876a:	493b      	ldr	r1, [pc, #236]	; (8008858 <tcp_pcb_remove+0x118>)
 800876c:	4839      	ldr	r0, [pc, #228]	; (8008854 <tcp_pcb_remove+0x114>)
 800876e:	f006 fd97 	bl	800f2a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d105      	bne.n	8008788 <tcp_pcb_remove+0x48>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e013      	b.n	80087b0 <tcp_pcb_remove+0x70>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	e00c      	b.n	80087aa <tcp_pcb_remove+0x6a>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d104      	bne.n	80087a4 <tcp_pcb_remove+0x64>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	60da      	str	r2, [r3, #12]
 80087a2:	e005      	b.n	80087b0 <tcp_pcb_remove+0x70>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1ef      	bne.n	8008790 <tcp_pcb_remove+0x50>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2200      	movs	r2, #0
 80087b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80087b6:	6838      	ldr	r0, [r7, #0]
 80087b8:	f7ff ff72 	bl	80086a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	7d1b      	ldrb	r3, [r3, #20]
 80087c0:	2b0a      	cmp	r3, #10
 80087c2:	d013      	beq.n	80087ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d00f      	beq.n	80087ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	8b5b      	ldrh	r3, [r3, #26]
 80087d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	8b5b      	ldrh	r3, [r3, #26]
 80087dc:	f043 0302 	orr.w	r3, r3, #2
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80087e6:	6838      	ldr	r0, [r7, #0]
 80087e8:	f002 ff6e 	bl	800b6c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	7d1b      	ldrb	r3, [r3, #20]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d020      	beq.n	8008836 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <tcp_pcb_remove+0xca>
 80087fc:	4b13      	ldr	r3, [pc, #76]	; (800884c <tcp_pcb_remove+0x10c>)
 80087fe:	f640 0293 	movw	r2, #2195	; 0x893
 8008802:	4916      	ldr	r1, [pc, #88]	; (800885c <tcp_pcb_remove+0x11c>)
 8008804:	4813      	ldr	r0, [pc, #76]	; (8008854 <tcp_pcb_remove+0x114>)
 8008806:	f006 fd4b 	bl	800f2a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <tcp_pcb_remove+0xe0>
 8008812:	4b0e      	ldr	r3, [pc, #56]	; (800884c <tcp_pcb_remove+0x10c>)
 8008814:	f640 0294 	movw	r2, #2196	; 0x894
 8008818:	4911      	ldr	r1, [pc, #68]	; (8008860 <tcp_pcb_remove+0x120>)
 800881a:	480e      	ldr	r0, [pc, #56]	; (8008854 <tcp_pcb_remove+0x114>)
 800881c:	f006 fd40 	bl	800f2a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008824:	2b00      	cmp	r3, #0
 8008826:	d006      	beq.n	8008836 <tcp_pcb_remove+0xf6>
 8008828:	4b08      	ldr	r3, [pc, #32]	; (800884c <tcp_pcb_remove+0x10c>)
 800882a:	f640 0296 	movw	r2, #2198	; 0x896
 800882e:	490d      	ldr	r1, [pc, #52]	; (8008864 <tcp_pcb_remove+0x124>)
 8008830:	4808      	ldr	r0, [pc, #32]	; (8008854 <tcp_pcb_remove+0x114>)
 8008832:	f006 fd35 	bl	800f2a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2200      	movs	r2, #0
 800883a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2200      	movs	r2, #0
 8008840:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	08010ba4 	.word	0x08010ba4
 8008850:	0801120c 	.word	0x0801120c
 8008854:	08010be8 	.word	0x08010be8
 8008858:	08011228 	.word	0x08011228
 800885c:	08011248 	.word	0x08011248
 8008860:	08011260 	.word	0x08011260
 8008864:	0801127c 	.word	0x0801127c

08008868 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <tcp_next_iss+0x1c>
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <tcp_next_iss+0x38>)
 8008878:	f640 02af 	movw	r2, #2223	; 0x8af
 800887c:	4909      	ldr	r1, [pc, #36]	; (80088a4 <tcp_next_iss+0x3c>)
 800887e:	480a      	ldr	r0, [pc, #40]	; (80088a8 <tcp_next_iss+0x40>)
 8008880:	f006 fd0e 	bl	800f2a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008884:	4b09      	ldr	r3, [pc, #36]	; (80088ac <tcp_next_iss+0x44>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <tcp_next_iss+0x48>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4413      	add	r3, r2
 800888e:	4a07      	ldr	r2, [pc, #28]	; (80088ac <tcp_next_iss+0x44>)
 8008890:	6013      	str	r3, [r2, #0]
  return iss;
 8008892:	4b06      	ldr	r3, [pc, #24]	; (80088ac <tcp_next_iss+0x44>)
 8008894:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	08010ba4 	.word	0x08010ba4
 80088a4:	08011294 	.word	0x08011294
 80088a8:	08010be8 	.word	0x08010be8
 80088ac:	20000024 	.word	0x20000024
 80088b0:	200087cc 	.word	0x200087cc

080088b4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <tcp_eff_send_mss_netif+0x22>
 80088c8:	4b14      	ldr	r3, [pc, #80]	; (800891c <tcp_eff_send_mss_netif+0x68>)
 80088ca:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80088ce:	4914      	ldr	r1, [pc, #80]	; (8008920 <tcp_eff_send_mss_netif+0x6c>)
 80088d0:	4814      	ldr	r0, [pc, #80]	; (8008924 <tcp_eff_send_mss_netif+0x70>)
 80088d2:	f006 fce5 	bl	800f2a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80088dc:	89fb      	ldrh	r3, [r7, #14]
 80088de:	e019      	b.n	8008914 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088e4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80088e6:	8afb      	ldrh	r3, [r7, #22]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d012      	beq.n	8008912 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80088ec:	2328      	movs	r3, #40	; 0x28
 80088ee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80088f0:	8afa      	ldrh	r2, [r7, #22]
 80088f2:	8abb      	ldrh	r3, [r7, #20]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d904      	bls.n	8008902 <tcp_eff_send_mss_netif+0x4e>
 80088f8:	8afa      	ldrh	r2, [r7, #22]
 80088fa:	8abb      	ldrh	r3, [r7, #20]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	b29b      	uxth	r3, r3
 8008900:	e000      	b.n	8008904 <tcp_eff_send_mss_netif+0x50>
 8008902:	2300      	movs	r3, #0
 8008904:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008906:	8a7a      	ldrh	r2, [r7, #18]
 8008908:	89fb      	ldrh	r3, [r7, #14]
 800890a:	4293      	cmp	r3, r2
 800890c:	bf28      	it	cs
 800890e:	4613      	movcs	r3, r2
 8008910:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008912:	89fb      	ldrh	r3, [r7, #14]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	08010ba4 	.word	0x08010ba4
 8008920:	080112b0 	.word	0x080112b0
 8008924:	08010be8 	.word	0x08010be8

08008928 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d119      	bne.n	8008970 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800893c:	4b10      	ldr	r3, [pc, #64]	; (8008980 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800893e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008942:	4910      	ldr	r1, [pc, #64]	; (8008984 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008944:	4810      	ldr	r0, [pc, #64]	; (8008988 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008946:	f006 fcab 	bl	800f2a0 <iprintf>

  while (pcb != NULL) {
 800894a:	e011      	b.n	8008970 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d108      	bne.n	800896a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7fe ffc6 	bl	80078f0 <tcp_abort>
      pcb = next;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	e002      	b.n	8008970 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1ea      	bne.n	800894c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	08010ba4 	.word	0x08010ba4
 8008984:	080112d8 	.word	0x080112d8
 8008988:	08010be8 	.word	0x08010be8

0800898c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d02a      	beq.n	80089f2 <tcp_netif_ip_addr_changed+0x66>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d026      	beq.n	80089f2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80089a4:	4b15      	ldr	r3, [pc, #84]	; (80089fc <tcp_netif_ip_addr_changed+0x70>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff ffbc 	bl	8008928 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80089b0:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <tcp_netif_ip_addr_changed+0x74>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff ffb6 	bl	8008928 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d017      	beq.n	80089f2 <tcp_netif_ip_addr_changed+0x66>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d013      	beq.n	80089f2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80089ca:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <tcp_netif_ip_addr_changed+0x78>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	e00c      	b.n	80089ec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d103      	bne.n	80089e6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1ef      	bne.n	80089d2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200087d8 	.word	0x200087d8
 8008a00:	200087d0 	.word	0x200087d0
 8008a04:	200087d4 	.word	0x200087d4

08008a08 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff fc3d 	bl	800829c <tcp_segs_free>
    pcb->ooseq = NULL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b08d      	sub	sp, #52	; 0x34
 8008a34:	af04      	add	r7, sp, #16
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <tcp_input+0x1c>
 8008a40:	4b9b      	ldr	r3, [pc, #620]	; (8008cb0 <tcp_input+0x280>)
 8008a42:	2283      	movs	r2, #131	; 0x83
 8008a44:	499b      	ldr	r1, [pc, #620]	; (8008cb4 <tcp_input+0x284>)
 8008a46:	489c      	ldr	r0, [pc, #624]	; (8008cb8 <tcp_input+0x288>)
 8008a48:	f006 fc2a 	bl	800f2a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	4a9a      	ldr	r2, [pc, #616]	; (8008cbc <tcp_input+0x28c>)
 8008a52:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	895b      	ldrh	r3, [r3, #10]
 8008a58:	2b13      	cmp	r3, #19
 8008a5a:	f240 83d1 	bls.w	8009200 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a5e:	4b98      	ldr	r3, [pc, #608]	; (8008cc0 <tcp_input+0x290>)
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	4a97      	ldr	r2, [pc, #604]	; (8008cc0 <tcp_input+0x290>)
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f005 fbd5 	bl	800e218 <ip4_addr_isbroadcast_u32>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 83c7 	bne.w	8009204 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008a76:	4b92      	ldr	r3, [pc, #584]	; (8008cc0 <tcp_input+0x290>)
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a7e:	2be0      	cmp	r3, #224	; 0xe0
 8008a80:	f000 83c0 	beq.w	8009204 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008a84:	4b8d      	ldr	r3, [pc, #564]	; (8008cbc <tcp_input+0x28c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	899b      	ldrh	r3, [r3, #12]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fc fe69 	bl	8005764 <lwip_htons>
 8008a92:	4603      	mov	r3, r0
 8008a94:	0b1b      	lsrs	r3, r3, #12
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008a9e:	7cbb      	ldrb	r3, [r7, #18]
 8008aa0:	2b13      	cmp	r3, #19
 8008aa2:	f240 83b1 	bls.w	8009208 <tcp_input+0x7d8>
 8008aa6:	7cbb      	ldrb	r3, [r7, #18]
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	891b      	ldrh	r3, [r3, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	f200 83aa 	bhi.w	8009208 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008ab4:	7cbb      	ldrb	r3, [r7, #18]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	3b14      	subs	r3, #20
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	4b81      	ldr	r3, [pc, #516]	; (8008cc4 <tcp_input+0x294>)
 8008abe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008ac0:	4b81      	ldr	r3, [pc, #516]	; (8008cc8 <tcp_input+0x298>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	895a      	ldrh	r2, [r3, #10]
 8008aca:	7cbb      	ldrb	r3, [r7, #18]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d309      	bcc.n	8008ae6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008ad2:	4b7c      	ldr	r3, [pc, #496]	; (8008cc4 <tcp_input+0x294>)
 8008ad4:	881a      	ldrh	r2, [r3, #0]
 8008ad6:	4b7d      	ldr	r3, [pc, #500]	; (8008ccc <tcp_input+0x29c>)
 8008ad8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008ada:	7cbb      	ldrb	r3, [r7, #18]
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7fe f8f8 	bl	8006cd4 <pbuf_remove_header>
 8008ae4:	e04e      	b.n	8008b84 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d105      	bne.n	8008afa <tcp_input+0xca>
 8008aee:	4b70      	ldr	r3, [pc, #448]	; (8008cb0 <tcp_input+0x280>)
 8008af0:	22c2      	movs	r2, #194	; 0xc2
 8008af2:	4977      	ldr	r1, [pc, #476]	; (8008cd0 <tcp_input+0x2a0>)
 8008af4:	4870      	ldr	r0, [pc, #448]	; (8008cb8 <tcp_input+0x288>)
 8008af6:	f006 fbd3 	bl	800f2a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008afa:	2114      	movs	r1, #20
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7fe f8e9 	bl	8006cd4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	895a      	ldrh	r2, [r3, #10]
 8008b06:	4b71      	ldr	r3, [pc, #452]	; (8008ccc <tcp_input+0x29c>)
 8008b08:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008b0a:	4b6e      	ldr	r3, [pc, #440]	; (8008cc4 <tcp_input+0x294>)
 8008b0c:	881a      	ldrh	r2, [r3, #0]
 8008b0e:	4b6f      	ldr	r3, [pc, #444]	; (8008ccc <tcp_input+0x29c>)
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008b16:	4b6d      	ldr	r3, [pc, #436]	; (8008ccc <tcp_input+0x29c>)
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7fe f8d9 	bl	8006cd4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	895b      	ldrh	r3, [r3, #10]
 8008b28:	8a3a      	ldrh	r2, [r7, #16]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	f200 836e 	bhi.w	800920c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	4a64      	ldr	r2, [pc, #400]	; (8008cc8 <tcp_input+0x298>)
 8008b38:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	8a3a      	ldrh	r2, [r7, #16]
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe f8c6 	bl	8006cd4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	891a      	ldrh	r2, [r3, #8]
 8008b4c:	8a3b      	ldrh	r3, [r7, #16]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	895b      	ldrh	r3, [r3, #10]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d005      	beq.n	8008b6a <tcp_input+0x13a>
 8008b5e:	4b54      	ldr	r3, [pc, #336]	; (8008cb0 <tcp_input+0x280>)
 8008b60:	22df      	movs	r2, #223	; 0xdf
 8008b62:	495c      	ldr	r1, [pc, #368]	; (8008cd4 <tcp_input+0x2a4>)
 8008b64:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <tcp_input+0x288>)
 8008b66:	f006 fb9b 	bl	800f2a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	891a      	ldrh	r2, [r3, #8]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	891b      	ldrh	r3, [r3, #8]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d005      	beq.n	8008b84 <tcp_input+0x154>
 8008b78:	4b4d      	ldr	r3, [pc, #308]	; (8008cb0 <tcp_input+0x280>)
 8008b7a:	22e0      	movs	r2, #224	; 0xe0
 8008b7c:	4956      	ldr	r1, [pc, #344]	; (8008cd8 <tcp_input+0x2a8>)
 8008b7e:	484e      	ldr	r0, [pc, #312]	; (8008cb8 <tcp_input+0x288>)
 8008b80:	f006 fb8e 	bl	800f2a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b84:	4b4d      	ldr	r3, [pc, #308]	; (8008cbc <tcp_input+0x28c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	4a4b      	ldr	r2, [pc, #300]	; (8008cbc <tcp_input+0x28c>)
 8008b8e:	6814      	ldr	r4, [r2, #0]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fc fde7 	bl	8005764 <lwip_htons>
 8008b96:	4603      	mov	r3, r0
 8008b98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b9a:	4b48      	ldr	r3, [pc, #288]	; (8008cbc <tcp_input+0x28c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	885b      	ldrh	r3, [r3, #2]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	4a46      	ldr	r2, [pc, #280]	; (8008cbc <tcp_input+0x28c>)
 8008ba4:	6814      	ldr	r4, [r2, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fc fddc 	bl	8005764 <lwip_htons>
 8008bac:	4603      	mov	r3, r0
 8008bae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008bb0:	4b42      	ldr	r3, [pc, #264]	; (8008cbc <tcp_input+0x28c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	4a41      	ldr	r2, [pc, #260]	; (8008cbc <tcp_input+0x28c>)
 8008bb8:	6814      	ldr	r4, [r2, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fc fde7 	bl	800578e <lwip_htonl>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	6063      	str	r3, [r4, #4]
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	4a45      	ldr	r2, [pc, #276]	; (8008cdc <tcp_input+0x2ac>)
 8008bc8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008bca:	4b3c      	ldr	r3, [pc, #240]	; (8008cbc <tcp_input+0x28c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	4a3a      	ldr	r2, [pc, #232]	; (8008cbc <tcp_input+0x28c>)
 8008bd2:	6814      	ldr	r4, [r2, #0]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fc fdda 	bl	800578e <lwip_htonl>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	68a3      	ldr	r3, [r4, #8]
 8008be0:	4a3f      	ldr	r2, [pc, #252]	; (8008ce0 <tcp_input+0x2b0>)
 8008be2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008be4:	4b35      	ldr	r3, [pc, #212]	; (8008cbc <tcp_input+0x28c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	89db      	ldrh	r3, [r3, #14]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	4a33      	ldr	r2, [pc, #204]	; (8008cbc <tcp_input+0x28c>)
 8008bee:	6814      	ldr	r4, [r2, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fc fdb7 	bl	8005764 <lwip_htons>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008bfa:	4b30      	ldr	r3, [pc, #192]	; (8008cbc <tcp_input+0x28c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	899b      	ldrh	r3, [r3, #12]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fc fdae 	bl	8005764 <lwip_htons>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	4b34      	ldr	r3, [pc, #208]	; (8008ce4 <tcp_input+0x2b4>)
 8008c14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	891a      	ldrh	r2, [r3, #8]
 8008c1a:	4b33      	ldr	r3, [pc, #204]	; (8008ce8 <tcp_input+0x2b8>)
 8008c1c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008c1e:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <tcp_input+0x2b4>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00c      	beq.n	8008c44 <tcp_input+0x214>
    tcplen++;
 8008c2a:	4b2f      	ldr	r3, [pc, #188]	; (8008ce8 <tcp_input+0x2b8>)
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	4b2d      	ldr	r3, [pc, #180]	; (8008ce8 <tcp_input+0x2b8>)
 8008c34:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	891a      	ldrh	r2, [r3, #8]
 8008c3a:	4b2b      	ldr	r3, [pc, #172]	; (8008ce8 <tcp_input+0x2b8>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	f200 82e6 	bhi.w	8009210 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c48:	4b28      	ldr	r3, [pc, #160]	; (8008cec <tcp_input+0x2bc>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	61fb      	str	r3, [r7, #28]
 8008c4e:	e09d      	b.n	8008d8c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	7d1b      	ldrb	r3, [r3, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d105      	bne.n	8008c64 <tcp_input+0x234>
 8008c58:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <tcp_input+0x280>)
 8008c5a:	22fb      	movs	r2, #251	; 0xfb
 8008c5c:	4924      	ldr	r1, [pc, #144]	; (8008cf0 <tcp_input+0x2c0>)
 8008c5e:	4816      	ldr	r0, [pc, #88]	; (8008cb8 <tcp_input+0x288>)
 8008c60:	f006 fb1e 	bl	800f2a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	7d1b      	ldrb	r3, [r3, #20]
 8008c68:	2b0a      	cmp	r3, #10
 8008c6a:	d105      	bne.n	8008c78 <tcp_input+0x248>
 8008c6c:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <tcp_input+0x280>)
 8008c6e:	22fc      	movs	r2, #252	; 0xfc
 8008c70:	4920      	ldr	r1, [pc, #128]	; (8008cf4 <tcp_input+0x2c4>)
 8008c72:	4811      	ldr	r0, [pc, #68]	; (8008cb8 <tcp_input+0x288>)
 8008c74:	f006 fb14 	bl	800f2a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	7d1b      	ldrb	r3, [r3, #20]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d105      	bne.n	8008c8c <tcp_input+0x25c>
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <tcp_input+0x280>)
 8008c82:	22fd      	movs	r2, #253	; 0xfd
 8008c84:	491c      	ldr	r1, [pc, #112]	; (8008cf8 <tcp_input+0x2c8>)
 8008c86:	480c      	ldr	r0, [pc, #48]	; (8008cb8 <tcp_input+0x288>)
 8008c88:	f006 fb0a 	bl	800f2a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	7a1b      	ldrb	r3, [r3, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d033      	beq.n	8008cfc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	7a1a      	ldrb	r2, [r3, #8]
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <tcp_input+0x290>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d029      	beq.n	8008cfc <tcp_input+0x2cc>
      prev = pcb;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	61bb      	str	r3, [r7, #24]
      continue;
 8008cac:	e06b      	b.n	8008d86 <tcp_input+0x356>
 8008cae:	bf00      	nop
 8008cb0:	0801130c 	.word	0x0801130c
 8008cb4:	08011340 	.word	0x08011340
 8008cb8:	08011358 	.word	0x08011358
 8008cbc:	200087f4 	.word	0x200087f4
 8008cc0:	2000525c 	.word	0x2000525c
 8008cc4:	200087f8 	.word	0x200087f8
 8008cc8:	200087fc 	.word	0x200087fc
 8008ccc:	200087fa 	.word	0x200087fa
 8008cd0:	08011380 	.word	0x08011380
 8008cd4:	08011390 	.word	0x08011390
 8008cd8:	0801139c 	.word	0x0801139c
 8008cdc:	20008804 	.word	0x20008804
 8008ce0:	20008808 	.word	0x20008808
 8008ce4:	20008810 	.word	0x20008810
 8008ce8:	2000880e 	.word	0x2000880e
 8008cec:	200087d8 	.word	0x200087d8
 8008cf0:	080113bc 	.word	0x080113bc
 8008cf4:	080113e4 	.word	0x080113e4
 8008cf8:	08011410 	.word	0x08011410
    }

    if (pcb->remote_port == tcphdr->src &&
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	8b1a      	ldrh	r2, [r3, #24]
 8008d00:	4b72      	ldr	r3, [pc, #456]	; (8008ecc <tcp_input+0x49c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d13a      	bne.n	8008d82 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	8ada      	ldrh	r2, [r3, #22]
 8008d10:	4b6e      	ldr	r3, [pc, #440]	; (8008ecc <tcp_input+0x49c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d132      	bne.n	8008d82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	4b6b      	ldr	r3, [pc, #428]	; (8008ed0 <tcp_input+0x4a0>)
 8008d22:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d12c      	bne.n	8008d82 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4b68      	ldr	r3, [pc, #416]	; (8008ed0 <tcp_input+0x4a0>)
 8008d2e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d126      	bne.n	8008d82 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d106      	bne.n	8008d4c <tcp_input+0x31c>
 8008d3e:	4b65      	ldr	r3, [pc, #404]	; (8008ed4 <tcp_input+0x4a4>)
 8008d40:	f240 120d 	movw	r2, #269	; 0x10d
 8008d44:	4964      	ldr	r1, [pc, #400]	; (8008ed8 <tcp_input+0x4a8>)
 8008d46:	4865      	ldr	r0, [pc, #404]	; (8008edc <tcp_input+0x4ac>)
 8008d48:	f006 faaa 	bl	800f2a0 <iprintf>
      if (prev != NULL) {
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <tcp_input+0x338>
        prev->next = pcb->next;
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008d5a:	4b61      	ldr	r3, [pc, #388]	; (8008ee0 <tcp_input+0x4b0>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008d62:	4a5f      	ldr	r2, [pc, #380]	; (8008ee0 <tcp_input+0x4b0>)
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d111      	bne.n	8008d96 <tcp_input+0x366>
 8008d72:	4b58      	ldr	r3, [pc, #352]	; (8008ed4 <tcp_input+0x4a4>)
 8008d74:	f240 1215 	movw	r2, #277	; 0x115
 8008d78:	495a      	ldr	r1, [pc, #360]	; (8008ee4 <tcp_input+0x4b4>)
 8008d7a:	4858      	ldr	r0, [pc, #352]	; (8008edc <tcp_input+0x4ac>)
 8008d7c:	f006 fa90 	bl	800f2a0 <iprintf>
      break;
 8008d80:	e009      	b.n	8008d96 <tcp_input+0x366>
    }
    prev = pcb;
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	61fb      	str	r3, [r7, #28]
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f47f af5e 	bne.w	8008c50 <tcp_input+0x220>
 8008d94:	e000      	b.n	8008d98 <tcp_input+0x368>
      break;
 8008d96:	bf00      	nop
  }

  if (pcb == NULL) {
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f040 80aa 	bne.w	8008ef4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008da0:	4b51      	ldr	r3, [pc, #324]	; (8008ee8 <tcp_input+0x4b8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	e03f      	b.n	8008e28 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	7d1b      	ldrb	r3, [r3, #20]
 8008dac:	2b0a      	cmp	r3, #10
 8008dae:	d006      	beq.n	8008dbe <tcp_input+0x38e>
 8008db0:	4b48      	ldr	r3, [pc, #288]	; (8008ed4 <tcp_input+0x4a4>)
 8008db2:	f240 121f 	movw	r2, #287	; 0x11f
 8008db6:	494d      	ldr	r1, [pc, #308]	; (8008eec <tcp_input+0x4bc>)
 8008db8:	4848      	ldr	r0, [pc, #288]	; (8008edc <tcp_input+0x4ac>)
 8008dba:	f006 fa71 	bl	800f2a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	7a1b      	ldrb	r3, [r3, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d009      	beq.n	8008dda <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	7a1a      	ldrb	r2, [r3, #8]
 8008dca:	4b41      	ldr	r3, [pc, #260]	; (8008ed0 <tcp_input+0x4a0>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d122      	bne.n	8008e20 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	8b1a      	ldrh	r2, [r3, #24]
 8008dde:	4b3b      	ldr	r3, [pc, #236]	; (8008ecc <tcp_input+0x49c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d11b      	bne.n	8008e22 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	8ada      	ldrh	r2, [r3, #22]
 8008dee:	4b37      	ldr	r3, [pc, #220]	; (8008ecc <tcp_input+0x49c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	885b      	ldrh	r3, [r3, #2]
 8008df4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d113      	bne.n	8008e22 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	4b34      	ldr	r3, [pc, #208]	; (8008ed0 <tcp_input+0x4a0>)
 8008e00:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d10d      	bne.n	8008e22 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b31      	ldr	r3, [pc, #196]	; (8008ed0 <tcp_input+0x4a0>)
 8008e0c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d107      	bne.n	8008e22 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008e12:	69f8      	ldr	r0, [r7, #28]
 8008e14:	f000 fb56 	bl	80094c4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7fd ffe1 	bl	8006de0 <pbuf_free>
        return;
 8008e1e:	e1fd      	b.n	800921c <tcp_input+0x7ec>
        continue;
 8008e20:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1bc      	bne.n	8008da8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e32:	4b2f      	ldr	r3, [pc, #188]	; (8008ef0 <tcp_input+0x4c0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e02a      	b.n	8008e90 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	7a1b      	ldrb	r3, [r3, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00c      	beq.n	8008e5c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	7a1a      	ldrb	r2, [r3, #8]
 8008e46:	4b22      	ldr	r3, [pc, #136]	; (8008ed0 <tcp_input+0x4a0>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d002      	beq.n	8008e5c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	61bb      	str	r3, [r7, #24]
        continue;
 8008e5a:	e016      	b.n	8008e8a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	8ada      	ldrh	r2, [r3, #22]
 8008e60:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <tcp_input+0x49c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	885b      	ldrh	r3, [r3, #2]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d10c      	bne.n	8008e86 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <tcp_input+0x4a0>)
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d00f      	beq.n	8008e98 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <tcp_input+0x46a>
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1d1      	bne.n	8008e3a <tcp_input+0x40a>
 8008e96:	e000      	b.n	8008e9a <tcp_input+0x46a>
            break;
 8008e98:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d029      	beq.n	8008ef4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008eae:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <tcp_input+0x4c0>)
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008eb6:	4a0e      	ldr	r2, [pc, #56]	; (8008ef0 <tcp_input+0x4c0>)
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008ebc:	6978      	ldr	r0, [r7, #20]
 8008ebe:	f000 fa03 	bl	80092c8 <tcp_listen_input>
      }
      pbuf_free(p);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fd ff8c 	bl	8006de0 <pbuf_free>
      return;
 8008ec8:	e1a8      	b.n	800921c <tcp_input+0x7ec>
 8008eca:	bf00      	nop
 8008ecc:	200087f4 	.word	0x200087f4
 8008ed0:	2000525c 	.word	0x2000525c
 8008ed4:	0801130c 	.word	0x0801130c
 8008ed8:	08011438 	.word	0x08011438
 8008edc:	08011358 	.word	0x08011358
 8008ee0:	200087d8 	.word	0x200087d8
 8008ee4:	08011464 	.word	0x08011464
 8008ee8:	200087dc 	.word	0x200087dc
 8008eec:	08011490 	.word	0x08011490
 8008ef0:	200087d4 	.word	0x200087d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 8158 	beq.w	80091ac <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008efc:	4b95      	ldr	r3, [pc, #596]	; (8009154 <tcp_input+0x724>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	891a      	ldrh	r2, [r3, #8]
 8008f06:	4b93      	ldr	r3, [pc, #588]	; (8009154 <tcp_input+0x724>)
 8008f08:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008f0a:	4a92      	ldr	r2, [pc, #584]	; (8009154 <tcp_input+0x724>)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008f10:	4b91      	ldr	r3, [pc, #580]	; (8009158 <tcp_input+0x728>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a8f      	ldr	r2, [pc, #572]	; (8009154 <tcp_input+0x724>)
 8008f16:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008f18:	4b90      	ldr	r3, [pc, #576]	; (800915c <tcp_input+0x72c>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008f1e:	4b90      	ldr	r3, [pc, #576]	; (8009160 <tcp_input+0x730>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008f24:	4b8f      	ldr	r3, [pc, #572]	; (8009164 <tcp_input+0x734>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008f2a:	4b8f      	ldr	r3, [pc, #572]	; (8009168 <tcp_input+0x738>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7b5b      	ldrb	r3, [r3, #13]
 8008f3a:	f043 0301 	orr.w	r3, r3, #1
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d017      	beq.n	8008f7c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f4c:	69f8      	ldr	r0, [r7, #28]
 8008f4e:	f7ff f929 	bl	80081a4 <tcp_process_refused_data>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f113 0f0d 	cmn.w	r3, #13
 8008f58:	d007      	beq.n	8008f6a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00c      	beq.n	8008f7c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f62:	4b82      	ldr	r3, [pc, #520]	; (800916c <tcp_input+0x73c>)
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f040 80e3 	bne.w	800913a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008f74:	69f8      	ldr	r0, [r7, #28]
 8008f76:	f003 f9ad 	bl	800c2d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008f7a:	e0de      	b.n	800913a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008f7c:	4a7c      	ldr	r2, [pc, #496]	; (8009170 <tcp_input+0x740>)
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008f82:	69f8      	ldr	r0, [r7, #28]
 8008f84:	f000 fb18 	bl	80095b8 <tcp_process>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008f8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f90:	f113 0f0d 	cmn.w	r3, #13
 8008f94:	f000 80d3 	beq.w	800913e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008f98:	4b71      	ldr	r3, [pc, #452]	; (8009160 <tcp_input+0x730>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d015      	beq.n	8008fd0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d008      	beq.n	8008fc0 <tcp_input+0x590>
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	6912      	ldr	r2, [r2, #16]
 8008fb8:	f06f 010d 	mvn.w	r1, #13
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008fc0:	69f9      	ldr	r1, [r7, #28]
 8008fc2:	486c      	ldr	r0, [pc, #432]	; (8009174 <tcp_input+0x744>)
 8008fc4:	f7ff fbbc 	bl	8008740 <tcp_pcb_remove>
        tcp_free(pcb);
 8008fc8:	69f8      	ldr	r0, [r7, #28]
 8008fca:	f7fe f9a9 	bl	8007320 <tcp_free>
 8008fce:	e0da      	b.n	8009186 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008fd4:	4b63      	ldr	r3, [pc, #396]	; (8009164 <tcp_input+0x734>)
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01d      	beq.n	8009018 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008fdc:	4b61      	ldr	r3, [pc, #388]	; (8009164 <tcp_input+0x734>)
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <tcp_input+0x5d2>
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	6910      	ldr	r0, [r2, #16]
 8008ff6:	89fa      	ldrh	r2, [r7, #14]
 8008ff8:	69f9      	ldr	r1, [r7, #28]
 8008ffa:	4798      	blx	r3
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	74fb      	strb	r3, [r7, #19]
 8009000:	e001      	b.n	8009006 <tcp_input+0x5d6>
 8009002:	2300      	movs	r3, #0
 8009004:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800900a:	f113 0f0d 	cmn.w	r3, #13
 800900e:	f000 8098 	beq.w	8009142 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009012:	4b54      	ldr	r3, [pc, #336]	; (8009164 <tcp_input+0x734>)
 8009014:	2200      	movs	r2, #0
 8009016:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009018:	69f8      	ldr	r0, [r7, #28]
 800901a:	f000 f915 	bl	8009248 <tcp_input_delayed_close>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	f040 8090 	bne.w	8009146 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009026:	4b4d      	ldr	r3, [pc, #308]	; (800915c <tcp_input+0x72c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d041      	beq.n	80090b2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009032:	2b00      	cmp	r3, #0
 8009034:	d006      	beq.n	8009044 <tcp_input+0x614>
 8009036:	4b50      	ldr	r3, [pc, #320]	; (8009178 <tcp_input+0x748>)
 8009038:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800903c:	494f      	ldr	r1, [pc, #316]	; (800917c <tcp_input+0x74c>)
 800903e:	4850      	ldr	r0, [pc, #320]	; (8009180 <tcp_input+0x750>)
 8009040:	f006 f92e 	bl	800f2a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	8b5b      	ldrh	r3, [r3, #26]
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	d008      	beq.n	8009062 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009050:	4b42      	ldr	r3, [pc, #264]	; (800915c <tcp_input+0x72c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f7fd fec3 	bl	8006de0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800905a:	69f8      	ldr	r0, [r7, #28]
 800905c:	f7fe fc48 	bl	80078f0 <tcp_abort>
            goto aborted;
 8009060:	e091      	b.n	8009186 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <tcp_input+0x656>
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	6918      	ldr	r0, [r3, #16]
 8009076:	4b39      	ldr	r3, [pc, #228]	; (800915c <tcp_input+0x72c>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	69f9      	ldr	r1, [r7, #28]
 800907e:	47a0      	blx	r4
 8009080:	4603      	mov	r3, r0
 8009082:	74fb      	strb	r3, [r7, #19]
 8009084:	e008      	b.n	8009098 <tcp_input+0x668>
 8009086:	4b35      	ldr	r3, [pc, #212]	; (800915c <tcp_input+0x72c>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	2300      	movs	r3, #0
 800908c:	69f9      	ldr	r1, [r7, #28]
 800908e:	2000      	movs	r0, #0
 8009090:	f7ff f95e 	bl	8008350 <tcp_recv_null>
 8009094:	4603      	mov	r3, r0
 8009096:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009098:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800909c:	f113 0f0d 	cmn.w	r3, #13
 80090a0:	d053      	beq.n	800914a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80090a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80090aa:	4b2c      	ldr	r3, [pc, #176]	; (800915c <tcp_input+0x72c>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80090b2:	4b2b      	ldr	r3, [pc, #172]	; (8009160 <tcp_input+0x730>)
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d030      	beq.n	8009120 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d009      	beq.n	80090da <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090ca:	7b5a      	ldrb	r2, [r3, #13]
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d0:	f042 0220 	orr.w	r2, r2, #32
 80090d4:	b2d2      	uxtb	r2, r2
 80090d6:	735a      	strb	r2, [r3, #13]
 80090d8:	e022      	b.n	8009120 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80090e2:	d005      	beq.n	80090f0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e8:	3301      	adds	r3, #1
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00b      	beq.n	8009112 <tcp_input+0x6e2>
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	6918      	ldr	r0, [r3, #16]
 8009104:	2300      	movs	r3, #0
 8009106:	2200      	movs	r2, #0
 8009108:	69f9      	ldr	r1, [r7, #28]
 800910a:	47a0      	blx	r4
 800910c:	4603      	mov	r3, r0
 800910e:	74fb      	strb	r3, [r7, #19]
 8009110:	e001      	b.n	8009116 <tcp_input+0x6e6>
 8009112:	2300      	movs	r3, #0
 8009114:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800911a:	f113 0f0d 	cmn.w	r3, #13
 800911e:	d016      	beq.n	800914e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009120:	4b13      	ldr	r3, [pc, #76]	; (8009170 <tcp_input+0x740>)
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009126:	69f8      	ldr	r0, [r7, #28]
 8009128:	f000 f88e 	bl	8009248 <tcp_input_delayed_close>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d128      	bne.n	8009184 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009132:	69f8      	ldr	r0, [r7, #28]
 8009134:	f002 fac8 	bl	800b6c8 <tcp_output>
 8009138:	e025      	b.n	8009186 <tcp_input+0x756>
        goto aborted;
 800913a:	bf00      	nop
 800913c:	e023      	b.n	8009186 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800913e:	bf00      	nop
 8009140:	e021      	b.n	8009186 <tcp_input+0x756>
              goto aborted;
 8009142:	bf00      	nop
 8009144:	e01f      	b.n	8009186 <tcp_input+0x756>
          goto aborted;
 8009146:	bf00      	nop
 8009148:	e01d      	b.n	8009186 <tcp_input+0x756>
            goto aborted;
 800914a:	bf00      	nop
 800914c:	e01b      	b.n	8009186 <tcp_input+0x756>
              goto aborted;
 800914e:	bf00      	nop
 8009150:	e019      	b.n	8009186 <tcp_input+0x756>
 8009152:	bf00      	nop
 8009154:	200087e4 	.word	0x200087e4
 8009158:	200087f4 	.word	0x200087f4
 800915c:	20008814 	.word	0x20008814
 8009160:	20008811 	.word	0x20008811
 8009164:	2000880c 	.word	0x2000880c
 8009168:	20008810 	.word	0x20008810
 800916c:	2000880e 	.word	0x2000880e
 8009170:	20008818 	.word	0x20008818
 8009174:	200087d8 	.word	0x200087d8
 8009178:	0801130c 	.word	0x0801130c
 800917c:	080114c0 	.word	0x080114c0
 8009180:	08011358 	.word	0x08011358
          goto aborted;
 8009184:	bf00      	nop
    tcp_input_pcb = NULL;
 8009186:	4b27      	ldr	r3, [pc, #156]	; (8009224 <tcp_input+0x7f4>)
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800918c:	4b26      	ldr	r3, [pc, #152]	; (8009228 <tcp_input+0x7f8>)
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009192:	4b26      	ldr	r3, [pc, #152]	; (800922c <tcp_input+0x7fc>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d03f      	beq.n	800921a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800919a:	4b24      	ldr	r3, [pc, #144]	; (800922c <tcp_input+0x7fc>)
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fd fe1e 	bl	8006de0 <pbuf_free>
      inseg.p = NULL;
 80091a4:	4b21      	ldr	r3, [pc, #132]	; (800922c <tcp_input+0x7fc>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80091aa:	e036      	b.n	800921a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80091ac:	4b20      	ldr	r3, [pc, #128]	; (8009230 <tcp_input+0x800>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	899b      	ldrh	r3, [r3, #12]
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fc fad5 	bl	8005764 <lwip_htons>
 80091ba:	4603      	mov	r3, r0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0304 	and.w	r3, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d118      	bne.n	80091f8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091c6:	4b1b      	ldr	r3, [pc, #108]	; (8009234 <tcp_input+0x804>)
 80091c8:	6819      	ldr	r1, [r3, #0]
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <tcp_input+0x808>)
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	4b1a      	ldr	r3, [pc, #104]	; (800923c <tcp_input+0x80c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <tcp_input+0x800>)
 80091d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091da:	885b      	ldrh	r3, [r3, #2]
 80091dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091de:	4a14      	ldr	r2, [pc, #80]	; (8009230 <tcp_input+0x800>)
 80091e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091e2:	8812      	ldrh	r2, [r2, #0]
 80091e4:	b292      	uxth	r2, r2
 80091e6:	9202      	str	r2, [sp, #8]
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	4b15      	ldr	r3, [pc, #84]	; (8009240 <tcp_input+0x810>)
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <tcp_input+0x814>)
 80091f0:	4602      	mov	r2, r0
 80091f2:	2000      	movs	r0, #0
 80091f4:	f003 f81c 	bl	800c230 <tcp_rst>
    pbuf_free(p);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7fd fdf1 	bl	8006de0 <pbuf_free>
  return;
 80091fe:	e00c      	b.n	800921a <tcp_input+0x7ea>
    goto dropped;
 8009200:	bf00      	nop
 8009202:	e006      	b.n	8009212 <tcp_input+0x7e2>
    goto dropped;
 8009204:	bf00      	nop
 8009206:	e004      	b.n	8009212 <tcp_input+0x7e2>
    goto dropped;
 8009208:	bf00      	nop
 800920a:	e002      	b.n	8009212 <tcp_input+0x7e2>
      goto dropped;
 800920c:	bf00      	nop
 800920e:	e000      	b.n	8009212 <tcp_input+0x7e2>
      goto dropped;
 8009210:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fd fde4 	bl	8006de0 <pbuf_free>
 8009218:	e000      	b.n	800921c <tcp_input+0x7ec>
  return;
 800921a:	bf00      	nop
}
 800921c:	3724      	adds	r7, #36	; 0x24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd90      	pop	{r4, r7, pc}
 8009222:	bf00      	nop
 8009224:	20008818 	.word	0x20008818
 8009228:	20008814 	.word	0x20008814
 800922c:	200087e4 	.word	0x200087e4
 8009230:	200087f4 	.word	0x200087f4
 8009234:	20008808 	.word	0x20008808
 8009238:	2000880e 	.word	0x2000880e
 800923c:	20008804 	.word	0x20008804
 8009240:	2000526c 	.word	0x2000526c
 8009244:	20005270 	.word	0x20005270

08009248 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <tcp_input_delayed_close+0x1c>
 8009256:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <tcp_input_delayed_close+0x6c>)
 8009258:	f240 225a 	movw	r2, #602	; 0x25a
 800925c:	4916      	ldr	r1, [pc, #88]	; (80092b8 <tcp_input_delayed_close+0x70>)
 800925e:	4817      	ldr	r0, [pc, #92]	; (80092bc <tcp_input_delayed_close+0x74>)
 8009260:	f006 f81e 	bl	800f2a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009264:	4b16      	ldr	r3, [pc, #88]	; (80092c0 <tcp_input_delayed_close+0x78>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01c      	beq.n	80092aa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	8b5b      	ldrh	r3, [r3, #26]
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10d      	bne.n	8009298 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <tcp_input_delayed_close+0x50>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	6912      	ldr	r2, [r2, #16]
 8009290:	f06f 010e 	mvn.w	r1, #14
 8009294:	4610      	mov	r0, r2
 8009296:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	480a      	ldr	r0, [pc, #40]	; (80092c4 <tcp_input_delayed_close+0x7c>)
 800929c:	f7ff fa50 	bl	8008740 <tcp_pcb_remove>
    tcp_free(pcb);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7fe f83d 	bl	8007320 <tcp_free>
    return 1;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <tcp_input_delayed_close+0x64>
  }
  return 0;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	0801130c 	.word	0x0801130c
 80092b8:	080114dc 	.word	0x080114dc
 80092bc:	08011358 	.word	0x08011358
 80092c0:	20008811 	.word	0x20008811
 80092c4:	200087d8 	.word	0x200087d8

080092c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80092c8:	b590      	push	{r4, r7, lr}
 80092ca:	b08b      	sub	sp, #44	; 0x2c
 80092cc:	af04      	add	r7, sp, #16
 80092ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80092d0:	4b6f      	ldr	r3, [pc, #444]	; (8009490 <tcp_listen_input+0x1c8>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 0304 	and.w	r3, r3, #4
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f040 80d2 	bne.w	8009482 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <tcp_listen_input+0x2a>
 80092e4:	4b6b      	ldr	r3, [pc, #428]	; (8009494 <tcp_listen_input+0x1cc>)
 80092e6:	f240 2281 	movw	r2, #641	; 0x281
 80092ea:	496b      	ldr	r1, [pc, #428]	; (8009498 <tcp_listen_input+0x1d0>)
 80092ec:	486b      	ldr	r0, [pc, #428]	; (800949c <tcp_listen_input+0x1d4>)
 80092ee:	f005 ffd7 	bl	800f2a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80092f2:	4b67      	ldr	r3, [pc, #412]	; (8009490 <tcp_listen_input+0x1c8>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d019      	beq.n	8009332 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092fe:	4b68      	ldr	r3, [pc, #416]	; (80094a0 <tcp_listen_input+0x1d8>)
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	4b68      	ldr	r3, [pc, #416]	; (80094a4 <tcp_listen_input+0x1dc>)
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	4b67      	ldr	r3, [pc, #412]	; (80094a8 <tcp_listen_input+0x1e0>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800930e:	4b67      	ldr	r3, [pc, #412]	; (80094ac <tcp_listen_input+0x1e4>)
 8009310:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009312:	885b      	ldrh	r3, [r3, #2]
 8009314:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009316:	4a65      	ldr	r2, [pc, #404]	; (80094ac <tcp_listen_input+0x1e4>)
 8009318:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800931a:	8812      	ldrh	r2, [r2, #0]
 800931c:	b292      	uxth	r2, r2
 800931e:	9202      	str	r2, [sp, #8]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	4b63      	ldr	r3, [pc, #396]	; (80094b0 <tcp_listen_input+0x1e8>)
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	4b63      	ldr	r3, [pc, #396]	; (80094b4 <tcp_listen_input+0x1ec>)
 8009328:	4602      	mov	r2, r0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f002 ff80 	bl	800c230 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009330:	e0a9      	b.n	8009486 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009332:	4b57      	ldr	r3, [pc, #348]	; (8009490 <tcp_listen_input+0x1c8>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 80a3 	beq.w	8009486 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7d5b      	ldrb	r3, [r3, #21]
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff f927 	bl	8008598 <tcp_alloc>
 800934a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d111      	bne.n	8009376 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <tcp_listen_input+0xa8>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	6910      	ldr	r0, [r2, #16]
 8009362:	f04f 32ff 	mov.w	r2, #4294967295
 8009366:	2100      	movs	r1, #0
 8009368:	4798      	blx	r3
 800936a:	4603      	mov	r3, r0
 800936c:	73bb      	strb	r3, [r7, #14]
      return;
 800936e:	e08b      	b.n	8009488 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009370:	23f0      	movs	r3, #240	; 0xf0
 8009372:	73bb      	strb	r3, [r7, #14]
      return;
 8009374:	e088      	b.n	8009488 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009376:	4b50      	ldr	r3, [pc, #320]	; (80094b8 <tcp_listen_input+0x1f0>)
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800937e:	4b4e      	ldr	r3, [pc, #312]	; (80094b8 <tcp_listen_input+0x1f0>)
 8009380:	691a      	ldr	r2, [r3, #16]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	8ada      	ldrh	r2, [r3, #22]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800938e:	4b47      	ldr	r3, [pc, #284]	; (80094ac <tcp_listen_input+0x1e4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	b29a      	uxth	r2, r3
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2203      	movs	r2, #3
 800939e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80093a0:	4b41      	ldr	r3, [pc, #260]	; (80094a8 <tcp_listen_input+0x1e0>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80093b2:	6978      	ldr	r0, [r7, #20]
 80093b4:	f7ff fa58 	bl	8008868 <tcp_next_iss>
 80093b8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80093d2:	4b35      	ldr	r3, [pc, #212]	; (80094a8 <tcp_listen_input+0x1e0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	1e5a      	subs	r2, r3, #1
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7a5b      	ldrb	r3, [r3, #9]
 80093ee:	f003 030c 	and.w	r3, r3, #12
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7a1a      	ldrb	r2, [r3, #8]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009400:	4b2e      	ldr	r3, [pc, #184]	; (80094bc <tcp_listen_input+0x1f4>)
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	60da      	str	r2, [r3, #12]
 8009408:	4a2c      	ldr	r2, [pc, #176]	; (80094bc <tcp_listen_input+0x1f4>)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	f003 f8d1 	bl	800c5b4 <tcp_timer_needed>
 8009412:	4b2b      	ldr	r3, [pc, #172]	; (80094c0 <tcp_listen_input+0x1f8>)
 8009414:	2201      	movs	r2, #1
 8009416:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009418:	6978      	ldr	r0, [r7, #20]
 800941a:	f001 fd8f 	bl	800af3c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800941e:	4b23      	ldr	r3, [pc, #140]	; (80094ac <tcp_listen_input+0x1e4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	89db      	ldrh	r3, [r3, #14]
 8009424:	b29a      	uxth	r2, r3
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	3304      	adds	r3, #4
 8009440:	4618      	mov	r0, r3
 8009442:	f004 fc53 	bl	800dcec <ip4_route>
 8009446:	4601      	mov	r1, r0
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	3304      	adds	r3, #4
 800944c:	461a      	mov	r2, r3
 800944e:	4620      	mov	r0, r4
 8009450:	f7ff fa30 	bl	80088b4 <tcp_eff_send_mss_netif>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800945c:	2112      	movs	r1, #18
 800945e:	6978      	ldr	r0, [r7, #20]
 8009460:	f002 f844 	bl	800b4ec <tcp_enqueue_flags>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009470:	2100      	movs	r1, #0
 8009472:	6978      	ldr	r0, [r7, #20]
 8009474:	f7fe f97e 	bl	8007774 <tcp_abandon>
      return;
 8009478:	e006      	b.n	8009488 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800947a:	6978      	ldr	r0, [r7, #20]
 800947c:	f002 f924 	bl	800b6c8 <tcp_output>
  return;
 8009480:	e001      	b.n	8009486 <tcp_listen_input+0x1be>
    return;
 8009482:	bf00      	nop
 8009484:	e000      	b.n	8009488 <tcp_listen_input+0x1c0>
  return;
 8009486:	bf00      	nop
}
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	bd90      	pop	{r4, r7, pc}
 800948e:	bf00      	nop
 8009490:	20008810 	.word	0x20008810
 8009494:	0801130c 	.word	0x0801130c
 8009498:	08011504 	.word	0x08011504
 800949c:	08011358 	.word	0x08011358
 80094a0:	20008808 	.word	0x20008808
 80094a4:	2000880e 	.word	0x2000880e
 80094a8:	20008804 	.word	0x20008804
 80094ac:	200087f4 	.word	0x200087f4
 80094b0:	2000526c 	.word	0x2000526c
 80094b4:	20005270 	.word	0x20005270
 80094b8:	2000525c 	.word	0x2000525c
 80094bc:	200087d8 	.word	0x200087d8
 80094c0:	200087e0 	.word	0x200087e0

080094c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af04      	add	r7, sp, #16
 80094ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80094cc:	4b2f      	ldr	r3, [pc, #188]	; (800958c <tcp_timewait_input+0xc8>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d153      	bne.n	8009580 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <tcp_timewait_input+0x28>
 80094de:	4b2c      	ldr	r3, [pc, #176]	; (8009590 <tcp_timewait_input+0xcc>)
 80094e0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80094e4:	492b      	ldr	r1, [pc, #172]	; (8009594 <tcp_timewait_input+0xd0>)
 80094e6:	482c      	ldr	r0, [pc, #176]	; (8009598 <tcp_timewait_input+0xd4>)
 80094e8:	f005 feda 	bl	800f2a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80094ec:	4b27      	ldr	r3, [pc, #156]	; (800958c <tcp_timewait_input+0xc8>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d02a      	beq.n	800954e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80094f8:	4b28      	ldr	r3, [pc, #160]	; (800959c <tcp_timewait_input+0xd8>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	db2d      	blt.n	8009562 <tcp_timewait_input+0x9e>
 8009506:	4b25      	ldr	r3, [pc, #148]	; (800959c <tcp_timewait_input+0xd8>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009512:	440b      	add	r3, r1
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	dc23      	bgt.n	8009562 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800951a:	4b21      	ldr	r3, [pc, #132]	; (80095a0 <tcp_timewait_input+0xdc>)
 800951c:	6819      	ldr	r1, [r3, #0]
 800951e:	4b21      	ldr	r3, [pc, #132]	; (80095a4 <tcp_timewait_input+0xe0>)
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	4b1d      	ldr	r3, [pc, #116]	; (800959c <tcp_timewait_input+0xd8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800952a:	4b1f      	ldr	r3, [pc, #124]	; (80095a8 <tcp_timewait_input+0xe4>)
 800952c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800952e:	885b      	ldrh	r3, [r3, #2]
 8009530:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009532:	4a1d      	ldr	r2, [pc, #116]	; (80095a8 <tcp_timewait_input+0xe4>)
 8009534:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009536:	8812      	ldrh	r2, [r2, #0]
 8009538:	b292      	uxth	r2, r2
 800953a:	9202      	str	r2, [sp, #8]
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <tcp_timewait_input+0xe8>)
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4b1b      	ldr	r3, [pc, #108]	; (80095b0 <tcp_timewait_input+0xec>)
 8009544:	4602      	mov	r2, r0
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f002 fe72 	bl	800c230 <tcp_rst>
      return;
 800954c:	e01b      	b.n	8009586 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800954e:	4b0f      	ldr	r3, [pc, #60]	; (800958c <tcp_timewait_input+0xc8>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800955a:	4b16      	ldr	r3, [pc, #88]	; (80095b4 <tcp_timewait_input+0xf0>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009562:	4b10      	ldr	r3, [pc, #64]	; (80095a4 <tcp_timewait_input+0xe0>)
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00c      	beq.n	8009584 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	8b5b      	ldrh	r3, [r3, #26]
 800956e:	f043 0302 	orr.w	r3, r3, #2
 8009572:	b29a      	uxth	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f002 f8a5 	bl	800b6c8 <tcp_output>
  }
  return;
 800957e:	e001      	b.n	8009584 <tcp_timewait_input+0xc0>
    return;
 8009580:	bf00      	nop
 8009582:	e000      	b.n	8009586 <tcp_timewait_input+0xc2>
  return;
 8009584:	bf00      	nop
}
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	20008810 	.word	0x20008810
 8009590:	0801130c 	.word	0x0801130c
 8009594:	08011524 	.word	0x08011524
 8009598:	08011358 	.word	0x08011358
 800959c:	20008804 	.word	0x20008804
 80095a0:	20008808 	.word	0x20008808
 80095a4:	2000880e 	.word	0x2000880e
 80095a8:	200087f4 	.word	0x200087f4
 80095ac:	2000526c 	.word	0x2000526c
 80095b0:	20005270 	.word	0x20005270
 80095b4:	200087cc 	.word	0x200087cc

080095b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80095b8:	b590      	push	{r4, r7, lr}
 80095ba:	b08d      	sub	sp, #52	; 0x34
 80095bc:	af04      	add	r7, sp, #16
 80095be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d106      	bne.n	80095dc <tcp_process+0x24>
 80095ce:	4b9d      	ldr	r3, [pc, #628]	; (8009844 <tcp_process+0x28c>)
 80095d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80095d4:	499c      	ldr	r1, [pc, #624]	; (8009848 <tcp_process+0x290>)
 80095d6:	489d      	ldr	r0, [pc, #628]	; (800984c <tcp_process+0x294>)
 80095d8:	f005 fe62 	bl	800f2a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80095dc:	4b9c      	ldr	r3, [pc, #624]	; (8009850 <tcp_process+0x298>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d04e      	beq.n	8009686 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7d1b      	ldrb	r3, [r3, #20]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d108      	bne.n	8009602 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095f4:	4b97      	ldr	r3, [pc, #604]	; (8009854 <tcp_process+0x29c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d123      	bne.n	8009644 <tcp_process+0x8c>
        acceptable = 1;
 80095fc:	2301      	movs	r3, #1
 80095fe:	76fb      	strb	r3, [r7, #27]
 8009600:	e020      	b.n	8009644 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009606:	4b94      	ldr	r3, [pc, #592]	; (8009858 <tcp_process+0x2a0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d102      	bne.n	8009614 <tcp_process+0x5c>
        acceptable = 1;
 800960e:	2301      	movs	r3, #1
 8009610:	76fb      	strb	r3, [r7, #27]
 8009612:	e017      	b.n	8009644 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009614:	4b90      	ldr	r3, [pc, #576]	; (8009858 <tcp_process+0x2a0>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	db10      	blt.n	8009644 <tcp_process+0x8c>
 8009622:	4b8d      	ldr	r3, [pc, #564]	; (8009858 <tcp_process+0x2a0>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800962e:	440b      	add	r3, r1
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	dc06      	bgt.n	8009644 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8b5b      	ldrh	r3, [r3, #26]
 800963a:	f043 0302 	orr.w	r3, r3, #2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009644:	7efb      	ldrb	r3, [r7, #27]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d01b      	beq.n	8009682 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	7d1b      	ldrb	r3, [r3, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <tcp_process+0xa8>
 8009652:	4b7c      	ldr	r3, [pc, #496]	; (8009844 <tcp_process+0x28c>)
 8009654:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009658:	4980      	ldr	r1, [pc, #512]	; (800985c <tcp_process+0x2a4>)
 800965a:	487c      	ldr	r0, [pc, #496]	; (800984c <tcp_process+0x294>)
 800965c:	f005 fe20 	bl	800f2a0 <iprintf>
      recv_flags |= TF_RESET;
 8009660:	4b7f      	ldr	r3, [pc, #508]	; (8009860 <tcp_process+0x2a8>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f043 0308 	orr.w	r3, r3, #8
 8009668:	b2da      	uxtb	r2, r3
 800966a:	4b7d      	ldr	r3, [pc, #500]	; (8009860 <tcp_process+0x2a8>)
 800966c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	8b5b      	ldrh	r3, [r3, #26]
 8009672:	f023 0301 	bic.w	r3, r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800967c:	f06f 030d 	mvn.w	r3, #13
 8009680:	e37a      	b.n	8009d78 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	e378      	b.n	8009d78 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009686:	4b72      	ldr	r3, [pc, #456]	; (8009850 <tcp_process+0x298>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d010      	beq.n	80096b4 <tcp_process+0xfc>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7d1b      	ldrb	r3, [r3, #20]
 8009696:	2b02      	cmp	r3, #2
 8009698:	d00c      	beq.n	80096b4 <tcp_process+0xfc>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	7d1b      	ldrb	r3, [r3, #20]
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d008      	beq.n	80096b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	8b5b      	ldrh	r3, [r3, #26]
 80096a6:	f043 0302 	orr.w	r3, r3, #2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	e361      	b.n	8009d78 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	8b5b      	ldrh	r3, [r3, #26]
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d103      	bne.n	80096c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80096c0:	4b68      	ldr	r3, [pc, #416]	; (8009864 <tcp_process+0x2ac>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 fc2f 	bl	800af3c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7d1b      	ldrb	r3, [r3, #20]
 80096e2:	3b02      	subs	r3, #2
 80096e4:	2b07      	cmp	r3, #7
 80096e6:	f200 8337 	bhi.w	8009d58 <tcp_process+0x7a0>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <tcp_process+0x138>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009711 	.word	0x08009711
 80096f4:	08009941 	.word	0x08009941
 80096f8:	08009ab9 	.word	0x08009ab9
 80096fc:	08009ae3 	.word	0x08009ae3
 8009700:	08009c07 	.word	0x08009c07
 8009704:	08009ab9 	.word	0x08009ab9
 8009708:	08009c93 	.word	0x08009c93
 800970c:	08009d23 	.word	0x08009d23
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009710:	4b4f      	ldr	r3, [pc, #316]	; (8009850 <tcp_process+0x298>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80e4 	beq.w	80098e6 <tcp_process+0x32e>
 800971e:	4b4c      	ldr	r3, [pc, #304]	; (8009850 <tcp_process+0x298>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 80dd 	beq.w	80098e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	4b48      	ldr	r3, [pc, #288]	; (8009854 <tcp_process+0x29c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	f040 80d5 	bne.w	80098e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800973c:	4b46      	ldr	r3, [pc, #280]	; (8009858 <tcp_process+0x2a0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800974e:	4b41      	ldr	r3, [pc, #260]	; (8009854 <tcp_process+0x29c>)
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009756:	4b44      	ldr	r3, [pc, #272]	; (8009868 <tcp_process+0x2b0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	89db      	ldrh	r3, [r3, #14]
 800975c:	b29a      	uxth	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009770:	4b39      	ldr	r3, [pc, #228]	; (8009858 <tcp_process+0x2a0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	1e5a      	subs	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2204      	movs	r2, #4
 800977e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3304      	adds	r3, #4
 8009788:	4618      	mov	r0, r3
 800978a:	f004 faaf 	bl	800dcec <ip4_route>
 800978e:	4601      	mov	r1, r0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3304      	adds	r3, #4
 8009794:	461a      	mov	r2, r3
 8009796:	4620      	mov	r0, r4
 8009798:	f7ff f88c 	bl	80088b4 <tcp_eff_send_mss_netif>
 800979c:	4603      	mov	r3, r0
 800979e:	461a      	mov	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097a8:	009a      	lsls	r2, r3, #2
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	f241 111c 	movw	r1, #4380	; 0x111c
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf38      	it	cc
 80097b8:	460b      	movcc	r3, r1
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d204      	bcs.n	80097c8 <tcp_process+0x210>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	e00d      	b.n	80097e4 <tcp_process+0x22c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	f241 121c 	movw	r2, #4380	; 0x111c
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d904      	bls.n	80097e0 <tcp_process+0x228>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097da:	005b      	lsls	r3, r3, #1
 80097dc:	b29b      	uxth	r3, r3
 80097de:	e001      	b.n	80097e4 <tcp_process+0x22c>
 80097e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <tcp_process+0x24a>
 80097f4:	4b13      	ldr	r3, [pc, #76]	; (8009844 <tcp_process+0x28c>)
 80097f6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80097fa:	491c      	ldr	r1, [pc, #112]	; (800986c <tcp_process+0x2b4>)
 80097fc:	4813      	ldr	r0, [pc, #76]	; (800984c <tcp_process+0x294>)
 80097fe:	f005 fd4f 	bl	800f2a0 <iprintf>
        --pcb->snd_queuelen;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009808:	3b01      	subs	r3, #1
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009816:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d12a      	bne.n	8009874 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009822:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <tcp_process+0x280>
 800982a:	4b06      	ldr	r3, [pc, #24]	; (8009844 <tcp_process+0x28c>)
 800982c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009830:	490f      	ldr	r1, [pc, #60]	; (8009870 <tcp_process+0x2b8>)
 8009832:	4806      	ldr	r0, [pc, #24]	; (800984c <tcp_process+0x294>)
 8009834:	f005 fd34 	bl	800f2a0 <iprintf>
          pcb->unsent = rseg->next;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009840:	e01c      	b.n	800987c <tcp_process+0x2c4>
 8009842:	bf00      	nop
 8009844:	0801130c 	.word	0x0801130c
 8009848:	08011544 	.word	0x08011544
 800984c:	08011358 	.word	0x08011358
 8009850:	20008810 	.word	0x20008810
 8009854:	20008808 	.word	0x20008808
 8009858:	20008804 	.word	0x20008804
 800985c:	08011560 	.word	0x08011560
 8009860:	20008811 	.word	0x20008811
 8009864:	200087cc 	.word	0x200087cc
 8009868:	200087f4 	.word	0x200087f4
 800986c:	08011580 	.word	0x08011580
 8009870:	08011598 	.word	0x08011598
        } else {
          pcb->unacked = rseg->next;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800987c:	69f8      	ldr	r0, [r7, #28]
 800987e:	f7fe fd22 	bl	80082c6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009890:	861a      	strh	r2, [r3, #48]	; 0x30
 8009892:	e006      	b.n	80098a2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00a      	beq.n	80098c2 <tcp_process+0x30a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6910      	ldr	r0, [r2, #16]
 80098b6:	2200      	movs	r2, #0
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4798      	blx	r3
 80098bc:	4603      	mov	r3, r0
 80098be:	76bb      	strb	r3, [r7, #26]
 80098c0:	e001      	b.n	80098c6 <tcp_process+0x30e>
 80098c2:	2300      	movs	r3, #0
 80098c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80098c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80098ca:	f113 0f0d 	cmn.w	r3, #13
 80098ce:	d102      	bne.n	80098d6 <tcp_process+0x31e>
          return ERR_ABRT;
 80098d0:	f06f 030c 	mvn.w	r3, #12
 80098d4:	e250      	b.n	8009d78 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	8b5b      	ldrh	r3, [r3, #26]
 80098da:	f043 0302 	orr.w	r3, r3, #2
 80098de:	b29a      	uxth	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80098e4:	e23a      	b.n	8009d5c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80098e6:	4b98      	ldr	r3, [pc, #608]	; (8009b48 <tcp_process+0x590>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	f003 0310 	and.w	r3, r3, #16
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 8234 	beq.w	8009d5c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098f4:	4b95      	ldr	r3, [pc, #596]	; (8009b4c <tcp_process+0x594>)
 80098f6:	6819      	ldr	r1, [r3, #0]
 80098f8:	4b95      	ldr	r3, [pc, #596]	; (8009b50 <tcp_process+0x598>)
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	4b95      	ldr	r3, [pc, #596]	; (8009b54 <tcp_process+0x59c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009904:	4b94      	ldr	r3, [pc, #592]	; (8009b58 <tcp_process+0x5a0>)
 8009906:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800990c:	4a92      	ldr	r2, [pc, #584]	; (8009b58 <tcp_process+0x5a0>)
 800990e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009910:	8812      	ldrh	r2, [r2, #0]
 8009912:	b292      	uxth	r2, r2
 8009914:	9202      	str	r2, [sp, #8]
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	4b90      	ldr	r3, [pc, #576]	; (8009b5c <tcp_process+0x5a4>)
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	4b90      	ldr	r3, [pc, #576]	; (8009b60 <tcp_process+0x5a8>)
 800991e:	4602      	mov	r2, r0
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f002 fc85 	bl	800c230 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800992c:	2b05      	cmp	r3, #5
 800992e:	f200 8215 	bhi.w	8009d5c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f002 fa51 	bl	800bde0 <tcp_rexmit_rto>
      break;
 800993e:	e20d      	b.n	8009d5c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009940:	4b81      	ldr	r3, [pc, #516]	; (8009b48 <tcp_process+0x590>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 80a1 	beq.w	8009a90 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800994e:	4b7f      	ldr	r3, [pc, #508]	; (8009b4c <tcp_process+0x594>)
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	3b01      	subs	r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	db7e      	blt.n	8009a5c <tcp_process+0x4a4>
 800995e:	4b7b      	ldr	r3, [pc, #492]	; (8009b4c <tcp_process+0x594>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	dc77      	bgt.n	8009a5c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2204      	movs	r2, #4
 8009970:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800997a:	23fa      	movs	r3, #250	; 0xfa
 800997c:	76bb      	strb	r3, [r7, #26]
 800997e:	e01d      	b.n	80099bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d106      	bne.n	8009998 <tcp_process+0x3e0>
 800998a:	4b76      	ldr	r3, [pc, #472]	; (8009b64 <tcp_process+0x5ac>)
 800998c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009990:	4975      	ldr	r1, [pc, #468]	; (8009b68 <tcp_process+0x5b0>)
 8009992:	4876      	ldr	r0, [pc, #472]	; (8009b6c <tcp_process+0x5b4>)
 8009994:	f005 fc84 	bl	800f2a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00a      	beq.n	80099b8 <tcp_process+0x400>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6910      	ldr	r0, [r2, #16]
 80099ac:	2200      	movs	r2, #0
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	4798      	blx	r3
 80099b2:	4603      	mov	r3, r0
 80099b4:	76bb      	strb	r3, [r7, #26]
 80099b6:	e001      	b.n	80099bc <tcp_process+0x404>
 80099b8:	23f0      	movs	r3, #240	; 0xf0
 80099ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80099bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80099c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80099c8:	f113 0f0d 	cmn.w	r3, #13
 80099cc:	d002      	beq.n	80099d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7fd ff8e 	bl	80078f0 <tcp_abort>
            }
            return ERR_ABRT;
 80099d4:	f06f 030c 	mvn.w	r3, #12
 80099d8:	e1ce      	b.n	8009d78 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fae0 	bl	8009fa0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80099e0:	4b63      	ldr	r3, [pc, #396]	; (8009b70 <tcp_process+0x5b8>)
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <tcp_process+0x43c>
            recv_acked--;
 80099e8:	4b61      	ldr	r3, [pc, #388]	; (8009b70 <tcp_process+0x5b8>)
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	4b5f      	ldr	r3, [pc, #380]	; (8009b70 <tcp_process+0x5b8>)
 80099f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099f8:	009a      	lsls	r2, r3, #2
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	f241 111c 	movw	r1, #4380	; 0x111c
 8009a04:	428b      	cmp	r3, r1
 8009a06:	bf38      	it	cc
 8009a08:	460b      	movcc	r3, r1
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d204      	bcs.n	8009a18 <tcp_process+0x460>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	e00d      	b.n	8009a34 <tcp_process+0x47c>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d904      	bls.n	8009a30 <tcp_process+0x478>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	e001      	b.n	8009a34 <tcp_process+0x47c>
 8009a30:	f241 131c 	movw	r3, #4380	; 0x111c
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009a3a:	4b4e      	ldr	r3, [pc, #312]	; (8009b74 <tcp_process+0x5bc>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	f003 0320 	and.w	r3, r3, #32
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d037      	beq.n	8009ab6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	8b5b      	ldrh	r3, [r3, #26]
 8009a4a:	f043 0302 	orr.w	r3, r3, #2
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2207      	movs	r2, #7
 8009a58:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009a5a:	e02c      	b.n	8009ab6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a5c:	4b3b      	ldr	r3, [pc, #236]	; (8009b4c <tcp_process+0x594>)
 8009a5e:	6819      	ldr	r1, [r3, #0]
 8009a60:	4b3b      	ldr	r3, [pc, #236]	; (8009b50 <tcp_process+0x598>)
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	461a      	mov	r2, r3
 8009a66:	4b3b      	ldr	r3, [pc, #236]	; (8009b54 <tcp_process+0x59c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a6c:	4b3a      	ldr	r3, [pc, #232]	; (8009b58 <tcp_process+0x5a0>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a74:	4a38      	ldr	r2, [pc, #224]	; (8009b58 <tcp_process+0x5a0>)
 8009a76:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a78:	8812      	ldrh	r2, [r2, #0]
 8009a7a:	b292      	uxth	r2, r2
 8009a7c:	9202      	str	r2, [sp, #8]
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	4b36      	ldr	r3, [pc, #216]	; (8009b5c <tcp_process+0x5a4>)
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4b36      	ldr	r3, [pc, #216]	; (8009b60 <tcp_process+0x5a8>)
 8009a86:	4602      	mov	r2, r0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f002 fbd1 	bl	800c230 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009a8e:	e167      	b.n	8009d60 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a90:	4b2d      	ldr	r3, [pc, #180]	; (8009b48 <tcp_process+0x590>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 8161 	beq.w	8009d60 <tcp_process+0x7a8>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	1e5a      	subs	r2, r3, #1
 8009aa4:	4b2b      	ldr	r3, [pc, #172]	; (8009b54 <tcp_process+0x59c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	f040 8159 	bne.w	8009d60 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f002 f9b8 	bl	800be24 <tcp_rexmit>
      break;
 8009ab4:	e154      	b.n	8009d60 <tcp_process+0x7a8>
 8009ab6:	e153      	b.n	8009d60 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fa71 	bl	8009fa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009abe:	4b2d      	ldr	r3, [pc, #180]	; (8009b74 <tcp_process+0x5bc>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 814c 	beq.w	8009d64 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	8b5b      	ldrh	r3, [r3, #26]
 8009ad0:	f043 0302 	orr.w	r3, r3, #2
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2207      	movs	r2, #7
 8009ade:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009ae0:	e140      	b.n	8009d64 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fa5c 	bl	8009fa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ae8:	4b22      	ldr	r3, [pc, #136]	; (8009b74 <tcp_process+0x5bc>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d071      	beq.n	8009bd8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009af4:	4b14      	ldr	r3, [pc, #80]	; (8009b48 <tcp_process+0x590>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 0310 	and.w	r3, r3, #16
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d060      	beq.n	8009bc2 <tcp_process+0x60a>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b04:	4b11      	ldr	r3, [pc, #68]	; (8009b4c <tcp_process+0x594>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d15a      	bne.n	8009bc2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d156      	bne.n	8009bc2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	8b5b      	ldrh	r3, [r3, #26]
 8009b18:	f043 0302 	orr.w	r3, r3, #2
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7fe fdbc 	bl	80086a0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009b28:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <tcp_process+0x5c0>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d105      	bne.n	8009b3e <tcp_process+0x586>
 8009b32:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <tcp_process+0x5c0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	4a0f      	ldr	r2, [pc, #60]	; (8009b78 <tcp_process+0x5c0>)
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	e02e      	b.n	8009b9c <tcp_process+0x5e4>
 8009b3e:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <tcp_process+0x5c0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	617b      	str	r3, [r7, #20]
 8009b44:	e027      	b.n	8009b96 <tcp_process+0x5de>
 8009b46:	bf00      	nop
 8009b48:	20008810 	.word	0x20008810
 8009b4c:	20008808 	.word	0x20008808
 8009b50:	2000880e 	.word	0x2000880e
 8009b54:	20008804 	.word	0x20008804
 8009b58:	200087f4 	.word	0x200087f4
 8009b5c:	2000526c 	.word	0x2000526c
 8009b60:	20005270 	.word	0x20005270
 8009b64:	0801130c 	.word	0x0801130c
 8009b68:	080115ac 	.word	0x080115ac
 8009b6c:	08011358 	.word	0x08011358
 8009b70:	2000880c 	.word	0x2000880c
 8009b74:	20008811 	.word	0x20008811
 8009b78:	200087d8 	.word	0x200087d8
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d104      	bne.n	8009b90 <tcp_process+0x5d8>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	60da      	str	r2, [r3, #12]
 8009b8e:	e005      	b.n	8009b9c <tcp_process+0x5e4>
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	617b      	str	r3, [r7, #20]
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1ef      	bne.n	8009b7c <tcp_process+0x5c4>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	60da      	str	r2, [r3, #12]
 8009ba2:	4b77      	ldr	r3, [pc, #476]	; (8009d80 <tcp_process+0x7c8>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	220a      	movs	r2, #10
 8009bac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009bae:	4b75      	ldr	r3, [pc, #468]	; (8009d84 <tcp_process+0x7cc>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	60da      	str	r2, [r3, #12]
 8009bb6:	4a73      	ldr	r2, [pc, #460]	; (8009d84 <tcp_process+0x7cc>)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	f002 fcfa 	bl	800c5b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009bc0:	e0d2      	b.n	8009d68 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8b5b      	ldrh	r3, [r3, #26]
 8009bc6:	f043 0302 	orr.w	r3, r3, #2
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2208      	movs	r2, #8
 8009bd4:	751a      	strb	r2, [r3, #20]
      break;
 8009bd6:	e0c7      	b.n	8009d68 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bd8:	4b6b      	ldr	r3, [pc, #428]	; (8009d88 <tcp_process+0x7d0>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 0310 	and.w	r3, r3, #16
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 80c1 	beq.w	8009d68 <tcp_process+0x7b0>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bea:	4b68      	ldr	r3, [pc, #416]	; (8009d8c <tcp_process+0x7d4>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	f040 80ba 	bne.w	8009d68 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 80b5 	bne.w	8009d68 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2206      	movs	r2, #6
 8009c02:	751a      	strb	r2, [r3, #20]
      break;
 8009c04:	e0b0      	b.n	8009d68 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f9ca 	bl	8009fa0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009c0c:	4b60      	ldr	r3, [pc, #384]	; (8009d90 <tcp_process+0x7d8>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 80a9 	beq.w	8009d6c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	8b5b      	ldrh	r3, [r3, #26]
 8009c1e:	f043 0302 	orr.w	r3, r3, #2
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7fe fd39 	bl	80086a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c2e:	4b59      	ldr	r3, [pc, #356]	; (8009d94 <tcp_process+0x7dc>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d105      	bne.n	8009c44 <tcp_process+0x68c>
 8009c38:	4b56      	ldr	r3, [pc, #344]	; (8009d94 <tcp_process+0x7dc>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4a55      	ldr	r2, [pc, #340]	; (8009d94 <tcp_process+0x7dc>)
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	e013      	b.n	8009c6c <tcp_process+0x6b4>
 8009c44:	4b53      	ldr	r3, [pc, #332]	; (8009d94 <tcp_process+0x7dc>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	e00c      	b.n	8009c66 <tcp_process+0x6ae>
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d104      	bne.n	8009c60 <tcp_process+0x6a8>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	60da      	str	r2, [r3, #12]
 8009c5e:	e005      	b.n	8009c6c <tcp_process+0x6b4>
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1ef      	bne.n	8009c4c <tcp_process+0x694>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	60da      	str	r2, [r3, #12]
 8009c72:	4b43      	ldr	r3, [pc, #268]	; (8009d80 <tcp_process+0x7c8>)
 8009c74:	2201      	movs	r2, #1
 8009c76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	220a      	movs	r2, #10
 8009c7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c7e:	4b41      	ldr	r3, [pc, #260]	; (8009d84 <tcp_process+0x7cc>)
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	60da      	str	r2, [r3, #12]
 8009c86:	4a3f      	ldr	r2, [pc, #252]	; (8009d84 <tcp_process+0x7cc>)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	f002 fc92 	bl	800c5b4 <tcp_timer_needed>
      }
      break;
 8009c90:	e06c      	b.n	8009d6c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f984 	bl	8009fa0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c98:	4b3b      	ldr	r3, [pc, #236]	; (8009d88 <tcp_process+0x7d0>)
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d065      	beq.n	8009d70 <tcp_process+0x7b8>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ca8:	4b38      	ldr	r3, [pc, #224]	; (8009d8c <tcp_process+0x7d4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d15f      	bne.n	8009d70 <tcp_process+0x7b8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d15b      	bne.n	8009d70 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7fe fcf1 	bl	80086a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009cbe:	4b35      	ldr	r3, [pc, #212]	; (8009d94 <tcp_process+0x7dc>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d105      	bne.n	8009cd4 <tcp_process+0x71c>
 8009cc8:	4b32      	ldr	r3, [pc, #200]	; (8009d94 <tcp_process+0x7dc>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	4a31      	ldr	r2, [pc, #196]	; (8009d94 <tcp_process+0x7dc>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	e013      	b.n	8009cfc <tcp_process+0x744>
 8009cd4:	4b2f      	ldr	r3, [pc, #188]	; (8009d94 <tcp_process+0x7dc>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60fb      	str	r3, [r7, #12]
 8009cda:	e00c      	b.n	8009cf6 <tcp_process+0x73e>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d104      	bne.n	8009cf0 <tcp_process+0x738>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	60da      	str	r2, [r3, #12]
 8009cee:	e005      	b.n	8009cfc <tcp_process+0x744>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1ef      	bne.n	8009cdc <tcp_process+0x724>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	60da      	str	r2, [r3, #12]
 8009d02:	4b1f      	ldr	r3, [pc, #124]	; (8009d80 <tcp_process+0x7c8>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	220a      	movs	r2, #10
 8009d0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	; (8009d84 <tcp_process+0x7cc>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60da      	str	r2, [r3, #12]
 8009d16:	4a1b      	ldr	r2, [pc, #108]	; (8009d84 <tcp_process+0x7cc>)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	f002 fc4a 	bl	800c5b4 <tcp_timer_needed>
      }
      break;
 8009d20:	e026      	b.n	8009d70 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f93c 	bl	8009fa0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d28:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <tcp_process+0x7d0>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 0310 	and.w	r3, r3, #16
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01f      	beq.n	8009d74 <tcp_process+0x7bc>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d38:	4b14      	ldr	r3, [pc, #80]	; (8009d8c <tcp_process+0x7d4>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d119      	bne.n	8009d74 <tcp_process+0x7bc>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d115      	bne.n	8009d74 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009d48:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <tcp_process+0x7d8>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	f043 0310 	orr.w	r3, r3, #16
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <tcp_process+0x7d8>)
 8009d54:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009d56:	e00d      	b.n	8009d74 <tcp_process+0x7bc>
    default:
      break;
 8009d58:	bf00      	nop
 8009d5a:	e00c      	b.n	8009d76 <tcp_process+0x7be>
      break;
 8009d5c:	bf00      	nop
 8009d5e:	e00a      	b.n	8009d76 <tcp_process+0x7be>
      break;
 8009d60:	bf00      	nop
 8009d62:	e008      	b.n	8009d76 <tcp_process+0x7be>
      break;
 8009d64:	bf00      	nop
 8009d66:	e006      	b.n	8009d76 <tcp_process+0x7be>
      break;
 8009d68:	bf00      	nop
 8009d6a:	e004      	b.n	8009d76 <tcp_process+0x7be>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e002      	b.n	8009d76 <tcp_process+0x7be>
      break;
 8009d70:	bf00      	nop
 8009d72:	e000      	b.n	8009d76 <tcp_process+0x7be>
      break;
 8009d74:	bf00      	nop
  }
  return ERR_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3724      	adds	r7, #36	; 0x24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd90      	pop	{r4, r7, pc}
 8009d80:	200087e0 	.word	0x200087e0
 8009d84:	200087dc 	.word	0x200087dc
 8009d88:	20008810 	.word	0x20008810
 8009d8c:	20008808 	.word	0x20008808
 8009d90:	20008811 	.word	0x20008811
 8009d94:	200087d8 	.word	0x200087d8

08009d98 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009d98:	b590      	push	{r4, r7, lr}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <tcp_oos_insert_segment+0x1e>
 8009da8:	4b3b      	ldr	r3, [pc, #236]	; (8009e98 <tcp_oos_insert_segment+0x100>)
 8009daa:	f240 421f 	movw	r2, #1055	; 0x41f
 8009dae:	493b      	ldr	r1, [pc, #236]	; (8009e9c <tcp_oos_insert_segment+0x104>)
 8009db0:	483b      	ldr	r0, [pc, #236]	; (8009ea0 <tcp_oos_insert_segment+0x108>)
 8009db2:	f005 fa75 	bl	800f2a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fb fcd0 	bl	8005764 <lwip_htons>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d028      	beq.n	8009e22 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009dd0:	6838      	ldr	r0, [r7, #0]
 8009dd2:	f7fe fa63 	bl	800829c <tcp_segs_free>
    next = NULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	603b      	str	r3, [r7, #0]
 8009dda:	e056      	b.n	8009e8a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	899b      	ldrh	r3, [r3, #12]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fb fcbd 	bl	8005764 <lwip_htons>
 8009dea:	4603      	mov	r3, r0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00d      	beq.n	8009e12 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	899b      	ldrh	r3, [r3, #12]
 8009dfc:	b29c      	uxth	r4, r3
 8009dfe:	2001      	movs	r0, #1
 8009e00:	f7fb fcb0 	bl	8005764 <lwip_htons>
 8009e04:	4603      	mov	r3, r0
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	4322      	orrs	r2, r4
 8009e0e:	b292      	uxth	r2, r2
 8009e10:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7fe fa52 	bl	80082c6 <tcp_seg_free>
    while (next &&
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00e      	beq.n	8009e46 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	891b      	ldrh	r3, [r3, #8]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ea4 <tcp_oos_insert_segment+0x10c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	441a      	add	r2, r3
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	8909      	ldrh	r1, [r1, #8]
 8009e3e:	440b      	add	r3, r1
 8009e40:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	daca      	bge.n	8009ddc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01e      	beq.n	8009e8a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	891b      	ldrh	r3, [r3, #8]
 8009e50:	461a      	mov	r2, r3
 8009e52:	4b14      	ldr	r3, [pc, #80]	; (8009ea4 <tcp_oos_insert_segment+0x10c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	441a      	add	r2, r3
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	dd12      	ble.n	8009e8a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <tcp_oos_insert_segment+0x10c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	891b      	ldrh	r3, [r3, #8]
 8009e82:	4619      	mov	r1, r3
 8009e84:	4610      	mov	r0, r2
 8009e86:	f7fc fe25 	bl	8006ad4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	601a      	str	r2, [r3, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd90      	pop	{r4, r7, pc}
 8009e98:	0801130c 	.word	0x0801130c
 8009e9c:	080115cc 	.word	0x080115cc
 8009ea0:	08011358 	.word	0x08011358
 8009ea4:	20008804 	.word	0x20008804

08009ea8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009ea8:	b5b0      	push	{r4, r5, r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009eb6:	e03e      	b.n	8009f36 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fd f812 	bl	8006ef0 <pbuf_clen>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ed6:	8a7a      	ldrh	r2, [r7, #18]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d906      	bls.n	8009eea <tcp_free_acked_segments+0x42>
 8009edc:	4b2a      	ldr	r3, [pc, #168]	; (8009f88 <tcp_free_acked_segments+0xe0>)
 8009ede:	f240 4257 	movw	r2, #1111	; 0x457
 8009ee2:	492a      	ldr	r1, [pc, #168]	; (8009f8c <tcp_free_acked_segments+0xe4>)
 8009ee4:	482a      	ldr	r0, [pc, #168]	; (8009f90 <tcp_free_acked_segments+0xe8>)
 8009ee6:	f005 f9db 	bl	800f2a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009ef0:	8a7b      	ldrh	r3, [r7, #18]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	891a      	ldrh	r2, [r3, #8]
 8009f00:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <tcp_free_acked_segments+0xec>)
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	4413      	add	r3, r2
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	4b22      	ldr	r3, [pc, #136]	; (8009f94 <tcp_free_acked_segments+0xec>)
 8009f0a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009f0c:	6978      	ldr	r0, [r7, #20]
 8009f0e:	f7fe f9da 	bl	80082c6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00c      	beq.n	8009f36 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d109      	bne.n	8009f36 <tcp_free_acked_segments+0x8e>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d106      	bne.n	8009f36 <tcp_free_acked_segments+0x8e>
 8009f28:	4b17      	ldr	r3, [pc, #92]	; (8009f88 <tcp_free_acked_segments+0xe0>)
 8009f2a:	f240 4261 	movw	r2, #1121	; 0x461
 8009f2e:	491a      	ldr	r1, [pc, #104]	; (8009f98 <tcp_free_acked_segments+0xf0>)
 8009f30:	4817      	ldr	r0, [pc, #92]	; (8009f90 <tcp_free_acked_segments+0xe8>)
 8009f32:	f005 f9b5 	bl	800f2a0 <iprintf>
  while (seg_list != NULL &&
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d020      	beq.n	8009f7e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fb fc23 	bl	800578e <lwip_htonl>
 8009f48:	4604      	mov	r4, r0
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	891b      	ldrh	r3, [r3, #8]
 8009f4e:	461d      	mov	r5, r3
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	899b      	ldrh	r3, [r3, #12]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fb fc03 	bl	8005764 <lwip_htons>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0303 	and.w	r3, r3, #3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <tcp_free_acked_segments+0xc6>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <tcp_free_acked_segments+0xc8>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	442b      	add	r3, r5
 8009f72:	18e2      	adds	r2, r4, r3
 8009f74:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <tcp_free_acked_segments+0xf4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dd9c      	ble.n	8009eb8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bdb0      	pop	{r4, r5, r7, pc}
 8009f88:	0801130c 	.word	0x0801130c
 8009f8c:	080115f4 	.word	0x080115f4
 8009f90:	08011358 	.word	0x08011358
 8009f94:	2000880c 	.word	0x2000880c
 8009f98:	0801161c 	.word	0x0801161c
 8009f9c:	20008808 	.word	0x20008808

08009fa0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009fa0:	b5b0      	push	{r4, r5, r7, lr}
 8009fa2:	b094      	sub	sp, #80	; 0x50
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d106      	bne.n	8009fc0 <tcp_receive+0x20>
 8009fb2:	4b91      	ldr	r3, [pc, #580]	; (800a1f8 <tcp_receive+0x258>)
 8009fb4:	f240 427b 	movw	r2, #1147	; 0x47b
 8009fb8:	4990      	ldr	r1, [pc, #576]	; (800a1fc <tcp_receive+0x25c>)
 8009fba:	4891      	ldr	r0, [pc, #580]	; (800a200 <tcp_receive+0x260>)
 8009fbc:	f005 f970 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7d1b      	ldrb	r3, [r3, #20]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d806      	bhi.n	8009fd6 <tcp_receive+0x36>
 8009fc8:	4b8b      	ldr	r3, [pc, #556]	; (800a1f8 <tcp_receive+0x258>)
 8009fca:	f240 427c 	movw	r2, #1148	; 0x47c
 8009fce:	498d      	ldr	r1, [pc, #564]	; (800a204 <tcp_receive+0x264>)
 8009fd0:	488b      	ldr	r0, [pc, #556]	; (800a200 <tcp_receive+0x260>)
 8009fd2:	f005 f965 	bl	800f2a0 <iprintf>

  if (flags & TCP_ACK) {
 8009fd6:	4b8c      	ldr	r3, [pc, #560]	; (800a208 <tcp_receive+0x268>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	f003 0310 	and.w	r3, r3, #16
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 8264 	beq.w	800a4ac <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fea:	461a      	mov	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff0:	4413      	add	r3, r2
 8009ff2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ff8:	4b84      	ldr	r3, [pc, #528]	; (800a20c <tcp_receive+0x26c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	db1b      	blt.n	800a03a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a006:	4b81      	ldr	r3, [pc, #516]	; (800a20c <tcp_receive+0x26c>)
 800a008:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d106      	bne.n	800a01c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a012:	4b7f      	ldr	r3, [pc, #508]	; (800a210 <tcp_receive+0x270>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	db0e      	blt.n	800a03a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a020:	4b7b      	ldr	r3, [pc, #492]	; (800a210 <tcp_receive+0x270>)
 800a022:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a024:	429a      	cmp	r2, r3
 800a026:	d125      	bne.n	800a074 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a028:	4b7a      	ldr	r3, [pc, #488]	; (800a214 <tcp_receive+0x274>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	89db      	ldrh	r3, [r3, #14]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a036:	429a      	cmp	r2, r3
 800a038:	d91c      	bls.n	800a074 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a03a:	4b76      	ldr	r3, [pc, #472]	; (800a214 <tcp_receive+0x274>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	89db      	ldrh	r3, [r3, #14]
 800a040:	b29a      	uxth	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a054:	429a      	cmp	r2, r3
 800a056:	d205      	bcs.n	800a064 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a064:	4b69      	ldr	r3, [pc, #420]	; (800a20c <tcp_receive+0x26c>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a06c:	4b68      	ldr	r3, [pc, #416]	; (800a210 <tcp_receive+0x270>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a074:	4b66      	ldr	r3, [pc, #408]	; (800a210 <tcp_receive+0x270>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dc58      	bgt.n	800a134 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a082:	4b65      	ldr	r3, [pc, #404]	; (800a218 <tcp_receive+0x278>)
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d14b      	bne.n	800a122 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a094:	4413      	add	r3, r2
 800a096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a098:	429a      	cmp	r2, r3
 800a09a:	d142      	bne.n	800a122 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	db3d      	blt.n	800a122 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0aa:	4b59      	ldr	r3, [pc, #356]	; (800a210 <tcp_receive+0x270>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d137      	bne.n	800a122 <tcp_receive+0x182>
              found_dupack = 1;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0bc:	2bff      	cmp	r3, #255	; 0xff
 800a0be:	d007      	beq.n	800a0d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d91b      	bls.n	800a112 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0e4:	4413      	add	r3, r2
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d30a      	bcc.n	800a108 <tcp_receive+0x168>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0fc:	4413      	add	r3, r2
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a106:	e004      	b.n	800a112 <tcp_receive+0x172>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a10e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d902      	bls.n	800a122 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 feed 	bl	800befc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a124:	2b00      	cmp	r3, #0
 800a126:	f040 8161 	bne.w	800a3ec <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a132:	e15b      	b.n	800a3ec <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a134:	4b36      	ldr	r3, [pc, #216]	; (800a210 <tcp_receive+0x270>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	f2c0 814e 	blt.w	800a3e2 <tcp_receive+0x442>
 800a146:	4b32      	ldr	r3, [pc, #200]	; (800a210 <tcp_receive+0x270>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	f300 8146 	bgt.w	800a3e2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	8b5b      	ldrh	r3, [r3, #26]
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	8b5b      	ldrh	r3, [r3, #26]
 800a166:	f023 0304 	bic.w	r3, r3, #4
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a192:	10db      	asrs	r3, r3, #3
 800a194:	b21b      	sxth	r3, r3
 800a196:	b29a      	uxth	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	b21a      	sxth	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a1ac:	4b18      	ldr	r3, [pc, #96]	; (800a210 <tcp_receive+0x270>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a1c4:	4b12      	ldr	r3, [pc, #72]	; (800a210 <tcp_receive+0x270>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7d1b      	ldrb	r3, [r3, #20]
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	f240 8097 	bls.w	800a304 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d245      	bcs.n	800a272 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	8b5b      	ldrh	r3, [r3, #26]
 800a1ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d014      	beq.n	800a21c <tcp_receive+0x27c>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e013      	b.n	800a21e <tcp_receive+0x27e>
 800a1f6:	bf00      	nop
 800a1f8:	0801130c 	.word	0x0801130c
 800a1fc:	0801163c 	.word	0x0801163c
 800a200:	08011358 	.word	0x08011358
 800a204:	08011658 	.word	0x08011658
 800a208:	20008810 	.word	0x20008810
 800a20c:	20008804 	.word	0x20008804
 800a210:	20008808 	.word	0x20008808
 800a214:	200087f4 	.word	0x200087f4
 800a218:	2000880e 	.word	0x2000880e
 800a21c:	2302      	movs	r3, #2
 800a21e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a222:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a226:	b29a      	uxth	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a22c:	fb12 f303 	smulbb	r3, r2, r3
 800a230:	b29b      	uxth	r3, r3
 800a232:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a234:	4293      	cmp	r3, r2
 800a236:	bf28      	it	cs
 800a238:	4613      	movcs	r3, r2
 800a23a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a244:	4413      	add	r3, r2
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a24e:	429a      	cmp	r2, r3
 800a250:	d309      	bcc.n	800a266 <tcp_receive+0x2c6>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a25a:	4413      	add	r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a264:	e04e      	b.n	800a304 <tcp_receive+0x364>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a26c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a270:	e048      	b.n	800a304 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a278:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a27a:	4413      	add	r3, r2
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a284:	429a      	cmp	r2, r3
 800a286:	d309      	bcc.n	800a29c <tcp_receive+0x2fc>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a28e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a290:	4413      	add	r3, r2
 800a292:	b29a      	uxth	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a29a:	e004      	b.n	800a2a6 <tcp_receive+0x306>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d326      	bcc.n	800a304 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2d6:	4413      	add	r3, r2
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d30a      	bcc.n	800a2fa <tcp_receive+0x35a>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2ee:	4413      	add	r3, r2
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a2f8:	e004      	b.n	800a304 <tcp_receive+0x364>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a300:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a30c:	4a98      	ldr	r2, [pc, #608]	; (800a570 <tcp_receive+0x5d0>)
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff fdca 	bl	8009ea8 <tcp_free_acked_segments>
 800a314:	4602      	mov	r2, r0
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a322:	4a94      	ldr	r2, [pc, #592]	; (800a574 <tcp_receive+0x5d4>)
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fdbf 	bl	8009ea8 <tcp_free_acked_segments>
 800a32a:	4602      	mov	r2, r0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a334:	2b00      	cmp	r3, #0
 800a336:	d104      	bne.n	800a342 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a33e:	861a      	strh	r2, [r3, #48]	; 0x30
 800a340:	e002      	b.n	800a348 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a352:	2b00      	cmp	r3, #0
 800a354:	d103      	bne.n	800a35e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a364:	4b84      	ldr	r3, [pc, #528]	; (800a578 <tcp_receive+0x5d8>)
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	4413      	add	r3, r2
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	8b5b      	ldrh	r3, [r3, #26]
 800a376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d035      	beq.n	800a3ea <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a382:	2b00      	cmp	r3, #0
 800a384:	d118      	bne.n	800a3b8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00c      	beq.n	800a3a8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fb f9f7 	bl	800578e <lwip_htonl>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	dc20      	bgt.n	800a3ea <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	8b5b      	ldrh	r3, [r3, #26]
 800a3ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3b6:	e018      	b.n	800a3ea <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fb f9e2 	bl	800578e <lwip_htonl>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	1ae3      	subs	r3, r4, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dc0b      	bgt.n	800a3ea <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	8b5b      	ldrh	r3, [r3, #26]
 800a3d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3e0:	e003      	b.n	800a3ea <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 ff76 	bl	800c2d4 <tcp_send_empty_ack>
 800a3e8:	e000      	b.n	800a3ec <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a3ea:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d05b      	beq.n	800a4ac <tcp_receive+0x50c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f8:	4b60      	ldr	r3, [pc, #384]	; (800a57c <tcp_receive+0x5dc>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	da54      	bge.n	800a4ac <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a402:	4b5f      	ldr	r3, [pc, #380]	; (800a580 <tcp_receive+0x5e0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	b29b      	uxth	r3, r3
 800a412:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a416:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a420:	10db      	asrs	r3, r3, #3
 800a422:	b21b      	sxth	r3, r3
 800a424:	b29b      	uxth	r3, r3
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	b29b      	uxth	r3, r3
 800a42a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a434:	b29a      	uxth	r2, r3
 800a436:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a43a:	4413      	add	r3, r2
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	b21a      	sxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a444:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da05      	bge.n	800a458 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a44c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a450:	425b      	negs	r3, r3
 800a452:	b29b      	uxth	r3, r3
 800a454:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a458:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a462:	109b      	asrs	r3, r3, #2
 800a464:	b21b      	sxth	r3, r3
 800a466:	b29b      	uxth	r3, r3
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a476:	b29a      	uxth	r2, r3
 800a478:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a47c:	4413      	add	r3, r2
 800a47e:	b29b      	uxth	r3, r3
 800a480:	b21a      	sxth	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a48c:	10db      	asrs	r3, r3, #3
 800a48e:	b21b      	sxth	r3, r3
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a498:	b29b      	uxth	r3, r3
 800a49a:	4413      	add	r3, r2
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	b21a      	sxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a4ac:	4b35      	ldr	r3, [pc, #212]	; (800a584 <tcp_receive+0x5e4>)
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 84e2 	beq.w	800ae7a <tcp_receive+0xeda>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	f200 84dd 	bhi.w	800ae7a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4c4:	4b30      	ldr	r3, [pc, #192]	; (800a588 <tcp_receive+0x5e8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f2c0 808f 	blt.w	800a5f0 <tcp_receive+0x650>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4d6:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <tcp_receive+0x5e4>)
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4b2a      	ldr	r3, [pc, #168]	; (800a588 <tcp_receive+0x5e8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	440b      	add	r3, r1
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f300 8082 	bgt.w	800a5f0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a4ec:	4b27      	ldr	r3, [pc, #156]	; (800a58c <tcp_receive+0x5ec>)
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4f6:	4b24      	ldr	r3, [pc, #144]	; (800a588 <tcp_receive+0x5e8>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a4fe:	4b23      	ldr	r3, [pc, #140]	; (800a58c <tcp_receive+0x5ec>)
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d106      	bne.n	800a514 <tcp_receive+0x574>
 800a506:	4b22      	ldr	r3, [pc, #136]	; (800a590 <tcp_receive+0x5f0>)
 800a508:	f240 5294 	movw	r2, #1428	; 0x594
 800a50c:	4921      	ldr	r1, [pc, #132]	; (800a594 <tcp_receive+0x5f4>)
 800a50e:	4822      	ldr	r0, [pc, #136]	; (800a598 <tcp_receive+0x5f8>)
 800a510:	f004 fec6 	bl	800f2a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d906      	bls.n	800a52c <tcp_receive+0x58c>
 800a51e:	4b1c      	ldr	r3, [pc, #112]	; (800a590 <tcp_receive+0x5f0>)
 800a520:	f240 5295 	movw	r2, #1429	; 0x595
 800a524:	491d      	ldr	r1, [pc, #116]	; (800a59c <tcp_receive+0x5fc>)
 800a526:	481c      	ldr	r0, [pc, #112]	; (800a598 <tcp_receive+0x5f8>)
 800a528:	f004 feba 	bl	800f2a0 <iprintf>
      off = (u16_t)off32;
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a532:	4b16      	ldr	r3, [pc, #88]	; (800a58c <tcp_receive+0x5ec>)
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	891b      	ldrh	r3, [r3, #8]
 800a538:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d906      	bls.n	800a54e <tcp_receive+0x5ae>
 800a540:	4b13      	ldr	r3, [pc, #76]	; (800a590 <tcp_receive+0x5f0>)
 800a542:	f240 5297 	movw	r2, #1431	; 0x597
 800a546:	4916      	ldr	r1, [pc, #88]	; (800a5a0 <tcp_receive+0x600>)
 800a548:	4813      	ldr	r0, [pc, #76]	; (800a598 <tcp_receive+0x5f8>)
 800a54a:	f004 fea9 	bl	800f2a0 <iprintf>
      inseg.len -= off;
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <tcp_receive+0x5ec>)
 800a550:	891a      	ldrh	r2, [r3, #8]
 800a552:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	b29a      	uxth	r2, r3
 800a55a:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <tcp_receive+0x5ec>)
 800a55c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a55e:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <tcp_receive+0x5ec>)
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	891a      	ldrh	r2, [r3, #8]
 800a564:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a56c:	e02a      	b.n	800a5c4 <tcp_receive+0x624>
 800a56e:	bf00      	nop
 800a570:	08011674 	.word	0x08011674
 800a574:	0801167c 	.word	0x0801167c
 800a578:	2000880c 	.word	0x2000880c
 800a57c:	20008808 	.word	0x20008808
 800a580:	200087cc 	.word	0x200087cc
 800a584:	2000880e 	.word	0x2000880e
 800a588:	20008804 	.word	0x20008804
 800a58c:	200087e4 	.word	0x200087e4
 800a590:	0801130c 	.word	0x0801130c
 800a594:	08011684 	.word	0x08011684
 800a598:	08011358 	.word	0x08011358
 800a59c:	08011694 	.word	0x08011694
 800a5a0:	080116a4 	.word	0x080116a4
        off -= p->len;
 800a5a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a6:	895b      	ldrh	r3, [r3, #10]
 800a5a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a5b6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a5be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a5c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5c6:	895b      	ldrh	r3, [r3, #10]
 800a5c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d8e9      	bhi.n	800a5a4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a5d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a5d8:	f7fc fb7c 	bl	8006cd4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	4a91      	ldr	r2, [pc, #580]	; (800a828 <tcp_receive+0x888>)
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	4b91      	ldr	r3, [pc, #580]	; (800a82c <tcp_receive+0x88c>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	4a8f      	ldr	r2, [pc, #572]	; (800a828 <tcp_receive+0x888>)
 800a5ea:	6812      	ldr	r2, [r2, #0]
 800a5ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a5ee:	e00d      	b.n	800a60c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a5f0:	4b8d      	ldr	r3, [pc, #564]	; (800a828 <tcp_receive+0x888>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	da06      	bge.n	800a60c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	8b5b      	ldrh	r3, [r3, #26]
 800a602:	f043 0302 	orr.w	r3, r3, #2
 800a606:	b29a      	uxth	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a60c:	4b86      	ldr	r3, [pc, #536]	; (800a828 <tcp_receive+0x888>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	f2c0 842a 	blt.w	800ae70 <tcp_receive+0xed0>
 800a61c:	4b82      	ldr	r3, [pc, #520]	; (800a828 <tcp_receive+0x888>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a628:	440b      	add	r3, r1
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	3301      	adds	r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f300 841e 	bgt.w	800ae70 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a638:	4b7b      	ldr	r3, [pc, #492]	; (800a828 <tcp_receive+0x888>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	f040 829a 	bne.w	800ab76 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a642:	4b7a      	ldr	r3, [pc, #488]	; (800a82c <tcp_receive+0x88c>)
 800a644:	891c      	ldrh	r4, [r3, #8]
 800a646:	4b79      	ldr	r3, [pc, #484]	; (800a82c <tcp_receive+0x88c>)
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	899b      	ldrh	r3, [r3, #12]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fb f888 	bl	8005764 <lwip_htons>
 800a654:	4603      	mov	r3, r0
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <tcp_receive+0x6c4>
 800a660:	2301      	movs	r3, #1
 800a662:	e000      	b.n	800a666 <tcp_receive+0x6c6>
 800a664:	2300      	movs	r3, #0
 800a666:	4423      	add	r3, r4
 800a668:	b29a      	uxth	r2, r3
 800a66a:	4b71      	ldr	r3, [pc, #452]	; (800a830 <tcp_receive+0x890>)
 800a66c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a672:	4b6f      	ldr	r3, [pc, #444]	; (800a830 <tcp_receive+0x890>)
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d275      	bcs.n	800a766 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a67a:	4b6c      	ldr	r3, [pc, #432]	; (800a82c <tcp_receive+0x88c>)
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	899b      	ldrh	r3, [r3, #12]
 800a680:	b29b      	uxth	r3, r3
 800a682:	4618      	mov	r0, r3
 800a684:	f7fb f86e 	bl	8005764 <lwip_htons>
 800a688:	4603      	mov	r3, r0
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	2b00      	cmp	r3, #0
 800a692:	d01f      	beq.n	800a6d4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a694:	4b65      	ldr	r3, [pc, #404]	; (800a82c <tcp_receive+0x88c>)
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	899b      	ldrh	r3, [r3, #12]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	b21b      	sxth	r3, r3
 800a69e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6a2:	b21c      	sxth	r4, r3
 800a6a4:	4b61      	ldr	r3, [pc, #388]	; (800a82c <tcp_receive+0x88c>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	899b      	ldrh	r3, [r3, #12]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fb f859 	bl	8005764 <lwip_htons>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fb f850 	bl	8005764 <lwip_htons>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	b21b      	sxth	r3, r3
 800a6c8:	4323      	orrs	r3, r4
 800a6ca:	b21a      	sxth	r2, r3
 800a6cc:	4b57      	ldr	r3, [pc, #348]	; (800a82c <tcp_receive+0x88c>)
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	b292      	uxth	r2, r2
 800a6d2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a6d8:	4b54      	ldr	r3, [pc, #336]	; (800a82c <tcp_receive+0x88c>)
 800a6da:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a6dc:	4b53      	ldr	r3, [pc, #332]	; (800a82c <tcp_receive+0x88c>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	899b      	ldrh	r3, [r3, #12]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fb f83d 	bl	8005764 <lwip_htons>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d005      	beq.n	800a702 <tcp_receive+0x762>
            inseg.len -= 1;
 800a6f6:	4b4d      	ldr	r3, [pc, #308]	; (800a82c <tcp_receive+0x88c>)
 800a6f8:	891b      	ldrh	r3, [r3, #8]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	4b4b      	ldr	r3, [pc, #300]	; (800a82c <tcp_receive+0x88c>)
 800a700:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a702:	4b4a      	ldr	r3, [pc, #296]	; (800a82c <tcp_receive+0x88c>)
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	4a49      	ldr	r2, [pc, #292]	; (800a82c <tcp_receive+0x88c>)
 800a708:	8912      	ldrh	r2, [r2, #8]
 800a70a:	4611      	mov	r1, r2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fc f9e1 	bl	8006ad4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a712:	4b46      	ldr	r3, [pc, #280]	; (800a82c <tcp_receive+0x88c>)
 800a714:	891c      	ldrh	r4, [r3, #8]
 800a716:	4b45      	ldr	r3, [pc, #276]	; (800a82c <tcp_receive+0x88c>)
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	899b      	ldrh	r3, [r3, #12]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fb f820 	bl	8005764 <lwip_htons>
 800a724:	4603      	mov	r3, r0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f003 0303 	and.w	r3, r3, #3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <tcp_receive+0x794>
 800a730:	2301      	movs	r3, #1
 800a732:	e000      	b.n	800a736 <tcp_receive+0x796>
 800a734:	2300      	movs	r3, #0
 800a736:	4423      	add	r3, r4
 800a738:	b29a      	uxth	r2, r3
 800a73a:	4b3d      	ldr	r3, [pc, #244]	; (800a830 <tcp_receive+0x890>)
 800a73c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a73e:	4b3c      	ldr	r3, [pc, #240]	; (800a830 <tcp_receive+0x890>)
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	4b38      	ldr	r3, [pc, #224]	; (800a828 <tcp_receive+0x888>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	441a      	add	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a752:	440b      	add	r3, r1
 800a754:	429a      	cmp	r2, r3
 800a756:	d006      	beq.n	800a766 <tcp_receive+0x7c6>
 800a758:	4b36      	ldr	r3, [pc, #216]	; (800a834 <tcp_receive+0x894>)
 800a75a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a75e:	4936      	ldr	r1, [pc, #216]	; (800a838 <tcp_receive+0x898>)
 800a760:	4836      	ldr	r0, [pc, #216]	; (800a83c <tcp_receive+0x89c>)
 800a762:	f004 fd9d 	bl	800f2a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80e7 	beq.w	800a93e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a770:	4b2e      	ldr	r3, [pc, #184]	; (800a82c <tcp_receive+0x88c>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	899b      	ldrh	r3, [r3, #12]
 800a776:	b29b      	uxth	r3, r3
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fa fff3 	bl	8005764 <lwip_htons>
 800a77e:	4603      	mov	r3, r0
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d010      	beq.n	800a7ac <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a78a:	e00a      	b.n	800a7a2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a790:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7fd fd92 	bl	80082c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1f0      	bne.n	800a78c <tcp_receive+0x7ec>
 800a7aa:	e0c8      	b.n	800a93e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a7b2:	e052      	b.n	800a85a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	899b      	ldrh	r3, [r3, #12]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fa ffd1 	bl	8005764 <lwip_htons>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d03d      	beq.n	800a84a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a7ce:	4b17      	ldr	r3, [pc, #92]	; (800a82c <tcp_receive+0x88c>)
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	899b      	ldrh	r3, [r3, #12]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fa ffc4 	bl	8005764 <lwip_htons>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d130      	bne.n	800a84a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a7e8:	4b10      	ldr	r3, [pc, #64]	; (800a82c <tcp_receive+0x88c>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	899b      	ldrh	r3, [r3, #12]
 800a7ee:	b29c      	uxth	r4, r3
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	f7fa ffb7 	bl	8005764 <lwip_htons>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	4b0c      	ldr	r3, [pc, #48]	; (800a82c <tcp_receive+0x88c>)
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	4322      	orrs	r2, r4
 800a800:	b292      	uxth	r2, r2
 800a802:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a804:	4b09      	ldr	r3, [pc, #36]	; (800a82c <tcp_receive+0x88c>)
 800a806:	891c      	ldrh	r4, [r3, #8]
 800a808:	4b08      	ldr	r3, [pc, #32]	; (800a82c <tcp_receive+0x88c>)
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	899b      	ldrh	r3, [r3, #12]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	4618      	mov	r0, r3
 800a812:	f7fa ffa7 	bl	8005764 <lwip_htons>
 800a816:	4603      	mov	r3, r0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f003 0303 	and.w	r3, r3, #3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00e      	beq.n	800a840 <tcp_receive+0x8a0>
 800a822:	2301      	movs	r3, #1
 800a824:	e00d      	b.n	800a842 <tcp_receive+0x8a2>
 800a826:	bf00      	nop
 800a828:	20008804 	.word	0x20008804
 800a82c:	200087e4 	.word	0x200087e4
 800a830:	2000880e 	.word	0x2000880e
 800a834:	0801130c 	.word	0x0801130c
 800a838:	080116b4 	.word	0x080116b4
 800a83c:	08011358 	.word	0x08011358
 800a840:	2300      	movs	r3, #0
 800a842:	4423      	add	r3, r4
 800a844:	b29a      	uxth	r2, r3
 800a846:	4b98      	ldr	r3, [pc, #608]	; (800aaa8 <tcp_receive+0xb08>)
 800a848:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a854:	6938      	ldr	r0, [r7, #16]
 800a856:	f7fd fd36 	bl	80082c6 <tcp_seg_free>
            while (next &&
 800a85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00e      	beq.n	800a87e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a860:	4b91      	ldr	r3, [pc, #580]	; (800aaa8 <tcp_receive+0xb08>)
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	461a      	mov	r2, r3
 800a866:	4b91      	ldr	r3, [pc, #580]	; (800aaac <tcp_receive+0xb0c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	441a      	add	r2, r3
 800a86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a874:	8909      	ldrh	r1, [r1, #8]
 800a876:	440b      	add	r3, r1
 800a878:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	da9a      	bge.n	800a7b4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d059      	beq.n	800a938 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a884:	4b88      	ldr	r3, [pc, #544]	; (800aaa8 <tcp_receive+0xb08>)
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	461a      	mov	r2, r3
 800a88a:	4b88      	ldr	r3, [pc, #544]	; (800aaac <tcp_receive+0xb0c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	441a      	add	r2, r3
 800a890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a898:	2b00      	cmp	r3, #0
 800a89a:	dd4d      	ble.n	800a938 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	4b81      	ldr	r3, [pc, #516]	; (800aaac <tcp_receive+0xb0c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	4b80      	ldr	r3, [pc, #512]	; (800aab0 <tcp_receive+0xb10>)
 800a8b0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a8b2:	4b7f      	ldr	r3, [pc, #508]	; (800aab0 <tcp_receive+0xb10>)
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	899b      	ldrh	r3, [r3, #12]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fa ff52 	bl	8005764 <lwip_htons>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0302 	and.w	r3, r3, #2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <tcp_receive+0x938>
                inseg.len -= 1;
 800a8cc:	4b78      	ldr	r3, [pc, #480]	; (800aab0 <tcp_receive+0xb10>)
 800a8ce:	891b      	ldrh	r3, [r3, #8]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	4b76      	ldr	r3, [pc, #472]	; (800aab0 <tcp_receive+0xb10>)
 800a8d6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a8d8:	4b75      	ldr	r3, [pc, #468]	; (800aab0 <tcp_receive+0xb10>)
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	4a74      	ldr	r2, [pc, #464]	; (800aab0 <tcp_receive+0xb10>)
 800a8de:	8912      	ldrh	r2, [r2, #8]
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fc f8f6 	bl	8006ad4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a8e8:	4b71      	ldr	r3, [pc, #452]	; (800aab0 <tcp_receive+0xb10>)
 800a8ea:	891c      	ldrh	r4, [r3, #8]
 800a8ec:	4b70      	ldr	r3, [pc, #448]	; (800aab0 <tcp_receive+0xb10>)
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	899b      	ldrh	r3, [r3, #12]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fa ff35 	bl	8005764 <lwip_htons>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <tcp_receive+0x96a>
 800a906:	2301      	movs	r3, #1
 800a908:	e000      	b.n	800a90c <tcp_receive+0x96c>
 800a90a:	2300      	movs	r3, #0
 800a90c:	4423      	add	r3, r4
 800a90e:	b29a      	uxth	r2, r3
 800a910:	4b65      	ldr	r3, [pc, #404]	; (800aaa8 <tcp_receive+0xb08>)
 800a912:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a914:	4b64      	ldr	r3, [pc, #400]	; (800aaa8 <tcp_receive+0xb08>)
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	461a      	mov	r2, r3
 800a91a:	4b64      	ldr	r3, [pc, #400]	; (800aaac <tcp_receive+0xb0c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	441a      	add	r2, r3
 800a920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	429a      	cmp	r2, r3
 800a928:	d006      	beq.n	800a938 <tcp_receive+0x998>
 800a92a:	4b62      	ldr	r3, [pc, #392]	; (800aab4 <tcp_receive+0xb14>)
 800a92c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a930:	4961      	ldr	r1, [pc, #388]	; (800aab8 <tcp_receive+0xb18>)
 800a932:	4862      	ldr	r0, [pc, #392]	; (800aabc <tcp_receive+0xb1c>)
 800a934:	f004 fcb4 	bl	800f2a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a93c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a93e:	4b5a      	ldr	r3, [pc, #360]	; (800aaa8 <tcp_receive+0xb08>)
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	4b59      	ldr	r3, [pc, #356]	; (800aaac <tcp_receive+0xb0c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	441a      	add	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a952:	4b55      	ldr	r3, [pc, #340]	; (800aaa8 <tcp_receive+0xb08>)
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	429a      	cmp	r2, r3
 800a958:	d206      	bcs.n	800a968 <tcp_receive+0x9c8>
 800a95a:	4b56      	ldr	r3, [pc, #344]	; (800aab4 <tcp_receive+0xb14>)
 800a95c:	f240 6207 	movw	r2, #1543	; 0x607
 800a960:	4957      	ldr	r1, [pc, #348]	; (800aac0 <tcp_receive+0xb20>)
 800a962:	4856      	ldr	r0, [pc, #344]	; (800aabc <tcp_receive+0xb1c>)
 800a964:	f004 fc9c 	bl	800f2a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a96c:	4b4e      	ldr	r3, [pc, #312]	; (800aaa8 <tcp_receive+0xb08>)
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	b29a      	uxth	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7fc ffc5 	bl	8007908 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a97e:	4b4c      	ldr	r3, [pc, #304]	; (800aab0 <tcp_receive+0xb10>)
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	891b      	ldrh	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d006      	beq.n	800a996 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a988:	4b49      	ldr	r3, [pc, #292]	; (800aab0 <tcp_receive+0xb10>)
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4a4d      	ldr	r2, [pc, #308]	; (800aac4 <tcp_receive+0xb24>)
 800a98e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a990:	4b47      	ldr	r3, [pc, #284]	; (800aab0 <tcp_receive+0xb10>)
 800a992:	2200      	movs	r2, #0
 800a994:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a996:	4b46      	ldr	r3, [pc, #280]	; (800aab0 <tcp_receive+0xb10>)
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	899b      	ldrh	r3, [r3, #12]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fa fee0 	bl	8005764 <lwip_htons>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 80b8 	beq.w	800ab22 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a9b2:	4b45      	ldr	r3, [pc, #276]	; (800aac8 <tcp_receive+0xb28>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	f043 0320 	orr.w	r3, r3, #32
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	4b42      	ldr	r3, [pc, #264]	; (800aac8 <tcp_receive+0xb28>)
 800a9be:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a9c0:	e0af      	b.n	800ab22 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9c6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4a36      	ldr	r2, [pc, #216]	; (800aaac <tcp_receive+0xb0c>)
 800a9d2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	891b      	ldrh	r3, [r3, #8]
 800a9d8:	461c      	mov	r4, r3
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	899b      	ldrh	r3, [r3, #12]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fa febe 	bl	8005764 <lwip_htons>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f003 0303 	and.w	r3, r3, #3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <tcp_receive+0xa58>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e000      	b.n	800a9fa <tcp_receive+0xa5a>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	191a      	adds	r2, r3, r4
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	441a      	add	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa0a:	461c      	mov	r4, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	891b      	ldrh	r3, [r3, #8]
 800aa10:	461d      	mov	r5, r3
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	899b      	ldrh	r3, [r3, #12]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fa fea2 	bl	8005764 <lwip_htons>
 800aa20:	4603      	mov	r3, r0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <tcp_receive+0xa90>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e000      	b.n	800aa32 <tcp_receive+0xa92>
 800aa30:	2300      	movs	r3, #0
 800aa32:	442b      	add	r3, r5
 800aa34:	429c      	cmp	r4, r3
 800aa36:	d206      	bcs.n	800aa46 <tcp_receive+0xaa6>
 800aa38:	4b1e      	ldr	r3, [pc, #120]	; (800aab4 <tcp_receive+0xb14>)
 800aa3a:	f240 622b 	movw	r2, #1579	; 0x62b
 800aa3e:	4923      	ldr	r1, [pc, #140]	; (800aacc <tcp_receive+0xb2c>)
 800aa40:	481e      	ldr	r0, [pc, #120]	; (800aabc <tcp_receive+0xb1c>)
 800aa42:	f004 fc2d 	bl	800f2a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	891b      	ldrh	r3, [r3, #8]
 800aa4a:	461c      	mov	r4, r3
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	899b      	ldrh	r3, [r3, #12]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fa fe85 	bl	8005764 <lwip_htons>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <tcp_receive+0xaca>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <tcp_receive+0xacc>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	1919      	adds	r1, r3, r4
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa72:	b28b      	uxth	r3, r1
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7fc ff43 	bl	8007908 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	891b      	ldrh	r3, [r3, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d028      	beq.n	800aade <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <tcp_receive+0xb24>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d01d      	beq.n	800aad0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800aa94:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <tcp_receive+0xb24>)
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	f7fc fa60 	bl	8006f64 <pbuf_cat>
 800aaa4:	e018      	b.n	800aad8 <tcp_receive+0xb38>
 800aaa6:	bf00      	nop
 800aaa8:	2000880e 	.word	0x2000880e
 800aaac:	20008804 	.word	0x20008804
 800aab0:	200087e4 	.word	0x200087e4
 800aab4:	0801130c 	.word	0x0801130c
 800aab8:	080116ec 	.word	0x080116ec
 800aabc:	08011358 	.word	0x08011358
 800aac0:	08011728 	.word	0x08011728
 800aac4:	20008814 	.word	0x20008814
 800aac8:	20008811 	.word	0x20008811
 800aacc:	08011748 	.word	0x08011748
            } else {
              recv_data = cseg->p;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	4a70      	ldr	r2, [pc, #448]	; (800ac98 <tcp_receive+0xcf8>)
 800aad6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2200      	movs	r2, #0
 800aadc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	899b      	ldrh	r3, [r3, #12]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fa fe3c 	bl	8005764 <lwip_htons>
 800aaec:	4603      	mov	r3, r0
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00d      	beq.n	800ab14 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aaf8:	4b68      	ldr	r3, [pc, #416]	; (800ac9c <tcp_receive+0xcfc>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f043 0320 	orr.w	r3, r3, #32
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	4b66      	ldr	r3, [pc, #408]	; (800ac9c <tcp_receive+0xcfc>)
 800ab04:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	7d1b      	ldrb	r3, [r3, #20]
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d102      	bne.n	800ab14 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2207      	movs	r2, #7
 800ab12:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ab1c:	68b8      	ldr	r0, [r7, #8]
 800ab1e:	f7fd fbd2 	bl	80082c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d008      	beq.n	800ab3c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ab36:	429a      	cmp	r2, r3
 800ab38:	f43f af43 	beq.w	800a9c2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	8b5b      	ldrh	r3, [r3, #26]
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00e      	beq.n	800ab66 <tcp_receive+0xbc6>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8b5b      	ldrh	r3, [r3, #26]
 800ab4c:	f023 0301 	bic.w	r3, r3, #1
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	835a      	strh	r2, [r3, #26]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8b5b      	ldrh	r3, [r3, #26]
 800ab5a:	f043 0302 	orr.w	r3, r3, #2
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab64:	e188      	b.n	800ae78 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	8b5b      	ldrh	r3, [r3, #26]
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab74:	e180      	b.n	800ae78 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ab7e:	4848      	ldr	r0, [pc, #288]	; (800aca0 <tcp_receive+0xd00>)
 800ab80:	f7fd fbba 	bl	80082f8 <tcp_seg_copy>
 800ab84:	4602      	mov	r2, r0
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	675a      	str	r2, [r3, #116]	; 0x74
 800ab8a:	e16d      	b.n	800ae68 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab94:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab96:	e157      	b.n	800ae48 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ab98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	4b41      	ldr	r3, [pc, #260]	; (800aca4 <tcp_receive+0xd04>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d11d      	bne.n	800abe2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800aba6:	4b3e      	ldr	r3, [pc, #248]	; (800aca0 <tcp_receive+0xd00>)
 800aba8:	891a      	ldrh	r2, [r3, #8]
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	891b      	ldrh	r3, [r3, #8]
 800abae:	429a      	cmp	r2, r3
 800abb0:	f240 814f 	bls.w	800ae52 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abb4:	483a      	ldr	r0, [pc, #232]	; (800aca0 <tcp_receive+0xd00>)
 800abb6:	f7fd fb9f 	bl	80082f8 <tcp_seg_copy>
 800abba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 8149 	beq.w	800ae56 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800abc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <tcp_receive+0xc32>
                    prev->next = cseg;
 800abca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	e002      	b.n	800abd8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800abd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f7ff f8dc 	bl	8009d98 <tcp_oos_insert_segment>
                }
                break;
 800abe0:	e139      	b.n	800ae56 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d117      	bne.n	800ac18 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800abe8:	4b2e      	ldr	r3, [pc, #184]	; (800aca4 <tcp_receive+0xd04>)
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	da57      	bge.n	800aca8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abf8:	4829      	ldr	r0, [pc, #164]	; (800aca0 <tcp_receive+0xd00>)
 800abfa:	f7fd fb7d 	bl	80082f8 <tcp_seg_copy>
 800abfe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 8129 	beq.w	800ae5a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ac0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac10:	69b8      	ldr	r0, [r7, #24]
 800ac12:	f7ff f8c1 	bl	8009d98 <tcp_oos_insert_segment>
                  }
                  break;
 800ac16:	e120      	b.n	800ae5a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ac18:	4b22      	ldr	r3, [pc, #136]	; (800aca4 <tcp_receive+0xd04>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	3b01      	subs	r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	db3e      	blt.n	800aca8 <tcp_receive+0xd08>
 800ac2a:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <tcp_receive+0xd04>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	3301      	adds	r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dc35      	bgt.n	800aca8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac3c:	4818      	ldr	r0, [pc, #96]	; (800aca0 <tcp_receive+0xd00>)
 800ac3e:	f7fd fb5b 	bl	80082f8 <tcp_seg_copy>
 800ac42:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f000 8109 	beq.w	800ae5e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ac4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac54:	8912      	ldrh	r2, [r2, #8]
 800ac56:	441a      	add	r2, r3
 800ac58:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <tcp_receive+0xd04>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dd12      	ble.n	800ac88 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ac62:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <tcp_receive+0xd04>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac76:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ac78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	891b      	ldrh	r3, [r3, #8]
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f7fb ff26 	bl	8006ad4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ac88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8a:	69fa      	ldr	r2, [r7, #28]
 800ac8c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ac8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac90:	69f8      	ldr	r0, [r7, #28]
 800ac92:	f7ff f881 	bl	8009d98 <tcp_oos_insert_segment>
                  }
                  break;
 800ac96:	e0e2      	b.n	800ae5e <tcp_receive+0xebe>
 800ac98:	20008814 	.word	0x20008814
 800ac9c:	20008811 	.word	0x20008811
 800aca0:	200087e4 	.word	0x200087e4
 800aca4:	20008804 	.word	0x20008804
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f040 80c6 	bne.w	800ae42 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800acb6:	4b80      	ldr	r3, [pc, #512]	; (800aeb8 <tcp_receive+0xf18>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f340 80bd 	ble.w	800ae42 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	899b      	ldrh	r3, [r3, #12]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fa fd47 	bl	8005764 <lwip_htons>
 800acd6:	4603      	mov	r3, r0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f040 80bf 	bne.w	800ae62 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ace4:	4875      	ldr	r0, [pc, #468]	; (800aebc <tcp_receive+0xf1c>)
 800ace6:	f7fd fb07 	bl	80082f8 <tcp_seg_copy>
 800acea:	4602      	mov	r2, r0
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 80b6 	beq.w	800ae66 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad02:	8912      	ldrh	r2, [r2, #8]
 800ad04:	441a      	add	r2, r3
 800ad06:	4b6c      	ldr	r3, [pc, #432]	; (800aeb8 <tcp_receive+0xf18>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dd12      	ble.n	800ad36 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ad10:	4b69      	ldr	r3, [pc, #420]	; (800aeb8 <tcp_receive+0xf18>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	891b      	ldrh	r3, [r3, #8]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7fb fecf 	bl	8006ad4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ad36:	4b62      	ldr	r3, [pc, #392]	; (800aec0 <tcp_receive+0xf20>)
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4b5e      	ldr	r3, [pc, #376]	; (800aeb8 <tcp_receive+0xf18>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	441a      	add	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad4a:	440b      	add	r3, r1
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f340 8089 	ble.w	800ae66 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	899b      	ldrh	r3, [r3, #12]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fa fd00 	bl	8005764 <lwip_htons>
 800ad64:	4603      	mov	r3, r0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d022      	beq.n	800adb6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	899b      	ldrh	r3, [r3, #12]
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	b21b      	sxth	r3, r3
 800ad7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad80:	b21c      	sxth	r4, r3
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	899b      	ldrh	r3, [r3, #12]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fa fce9 	bl	8005764 <lwip_htons>
 800ad92:	4603      	mov	r3, r0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fa fce0 	bl	8005764 <lwip_htons>
 800ada4:	4603      	mov	r3, r0
 800ada6:	b21b      	sxth	r3, r3
 800ada8:	4323      	orrs	r3, r4
 800adaa:	b21a      	sxth	r2, r3
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	b292      	uxth	r2, r2
 800adb4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	b29a      	uxth	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adc0:	4413      	add	r3, r2
 800adc2:	b299      	uxth	r1, r3
 800adc4:	4b3c      	ldr	r3, [pc, #240]	; (800aeb8 <tcp_receive+0xf18>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	b29a      	uxth	r2, r3
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	1a8a      	subs	r2, r1, r2
 800add0:	b292      	uxth	r2, r2
 800add2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	891b      	ldrh	r3, [r3, #8]
 800ade0:	4619      	mov	r1, r3
 800ade2:	4610      	mov	r0, r2
 800ade4:	f7fb fe76 	bl	8006ad4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	891c      	ldrh	r4, [r3, #8]
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	899b      	ldrh	r3, [r3, #12]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fa fcb3 	bl	8005764 <lwip_htons>
 800adfe:	4603      	mov	r3, r0
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <tcp_receive+0xe6e>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <tcp_receive+0xe70>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4423      	add	r3, r4
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	4b2a      	ldr	r3, [pc, #168]	; (800aec0 <tcp_receive+0xf20>)
 800ae16:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ae18:	4b29      	ldr	r3, [pc, #164]	; (800aec0 <tcp_receive+0xf20>)
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4b26      	ldr	r3, [pc, #152]	; (800aeb8 <tcp_receive+0xf18>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	441a      	add	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae2c:	440b      	add	r3, r1
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d019      	beq.n	800ae66 <tcp_receive+0xec6>
 800ae32:	4b24      	ldr	r3, [pc, #144]	; (800aec4 <tcp_receive+0xf24>)
 800ae34:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ae38:	4923      	ldr	r1, [pc, #140]	; (800aec8 <tcp_receive+0xf28>)
 800ae3a:	4824      	ldr	r0, [pc, #144]	; (800aecc <tcp_receive+0xf2c>)
 800ae3c:	f004 fa30 	bl	800f2a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ae40:	e011      	b.n	800ae66 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f47f aea4 	bne.w	800ab98 <tcp_receive+0xbf8>
 800ae50:	e00a      	b.n	800ae68 <tcp_receive+0xec8>
                break;
 800ae52:	bf00      	nop
 800ae54:	e008      	b.n	800ae68 <tcp_receive+0xec8>
                break;
 800ae56:	bf00      	nop
 800ae58:	e006      	b.n	800ae68 <tcp_receive+0xec8>
                  break;
 800ae5a:	bf00      	nop
 800ae5c:	e004      	b.n	800ae68 <tcp_receive+0xec8>
                  break;
 800ae5e:	bf00      	nop
 800ae60:	e002      	b.n	800ae68 <tcp_receive+0xec8>
                  break;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <tcp_receive+0xec8>
                break;
 800ae66:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 fa33 	bl	800c2d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ae6e:	e003      	b.n	800ae78 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 fa2f 	bl	800c2d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae76:	e01a      	b.n	800aeae <tcp_receive+0xf0e>
 800ae78:	e019      	b.n	800aeae <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ae7a:	4b0f      	ldr	r3, [pc, #60]	; (800aeb8 <tcp_receive+0xf18>)
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	db0a      	blt.n	800ae9e <tcp_receive+0xefe>
 800ae88:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <tcp_receive+0xf18>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae94:	440b      	add	r3, r1
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	3301      	adds	r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd07      	ble.n	800aeae <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	8b5b      	ldrh	r3, [r3, #26]
 800aea2:	f043 0302 	orr.w	r3, r3, #2
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800aeac:	e7ff      	b.n	800aeae <tcp_receive+0xf0e>
 800aeae:	bf00      	nop
 800aeb0:	3750      	adds	r7, #80	; 0x50
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bdb0      	pop	{r4, r5, r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20008804 	.word	0x20008804
 800aebc:	200087e4 	.word	0x200087e4
 800aec0:	2000880e 	.word	0x2000880e
 800aec4:	0801130c 	.word	0x0801130c
 800aec8:	080116b4 	.word	0x080116b4
 800aecc:	08011358 	.word	0x08011358

0800aed0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800aed6:	4b15      	ldr	r3, [pc, #84]	; (800af2c <tcp_get_next_optbyte+0x5c>)
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	b291      	uxth	r1, r2
 800aede:	4a13      	ldr	r2, [pc, #76]	; (800af2c <tcp_get_next_optbyte+0x5c>)
 800aee0:	8011      	strh	r1, [r2, #0]
 800aee2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800aee4:	4b12      	ldr	r3, [pc, #72]	; (800af30 <tcp_get_next_optbyte+0x60>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <tcp_get_next_optbyte+0x26>
 800aeec:	4b11      	ldr	r3, [pc, #68]	; (800af34 <tcp_get_next_optbyte+0x64>)
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	88fa      	ldrh	r2, [r7, #6]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d208      	bcs.n	800af08 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800aef6:	4b10      	ldr	r3, [pc, #64]	; (800af38 <tcp_get_next_optbyte+0x68>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3314      	adds	r3, #20
 800aefc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800aefe:	88fb      	ldrh	r3, [r7, #6]
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	4413      	add	r3, r2
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	e00b      	b.n	800af20 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800af08:	88fb      	ldrh	r3, [r7, #6]
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	4b09      	ldr	r3, [pc, #36]	; (800af34 <tcp_get_next_optbyte+0x64>)
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b2db      	uxtb	r3, r3
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800af16:	4b06      	ldr	r3, [pc, #24]	; (800af30 <tcp_get_next_optbyte+0x60>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	797b      	ldrb	r3, [r7, #5]
 800af1c:	4413      	add	r3, r2
 800af1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	20008800 	.word	0x20008800
 800af30:	200087fc 	.word	0x200087fc
 800af34:	200087fa 	.word	0x200087fa
 800af38:	200087f4 	.word	0x200087f4

0800af3c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d106      	bne.n	800af58 <tcp_parseopt+0x1c>
 800af4a:	4b32      	ldr	r3, [pc, #200]	; (800b014 <tcp_parseopt+0xd8>)
 800af4c:	f240 727d 	movw	r2, #1917	; 0x77d
 800af50:	4931      	ldr	r1, [pc, #196]	; (800b018 <tcp_parseopt+0xdc>)
 800af52:	4832      	ldr	r0, [pc, #200]	; (800b01c <tcp_parseopt+0xe0>)
 800af54:	f004 f9a4 	bl	800f2a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800af58:	4b31      	ldr	r3, [pc, #196]	; (800b020 <tcp_parseopt+0xe4>)
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d055      	beq.n	800b00c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af60:	4b30      	ldr	r3, [pc, #192]	; (800b024 <tcp_parseopt+0xe8>)
 800af62:	2200      	movs	r2, #0
 800af64:	801a      	strh	r2, [r3, #0]
 800af66:	e045      	b.n	800aff4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800af68:	f7ff ffb2 	bl	800aed0 <tcp_get_next_optbyte>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	2b02      	cmp	r3, #2
 800af74:	d006      	beq.n	800af84 <tcp_parseopt+0x48>
 800af76:	2b02      	cmp	r3, #2
 800af78:	dc2b      	bgt.n	800afd2 <tcp_parseopt+0x96>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d041      	beq.n	800b002 <tcp_parseopt+0xc6>
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d127      	bne.n	800afd2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800af82:	e037      	b.n	800aff4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800af84:	f7ff ffa4 	bl	800aed0 <tcp_get_next_optbyte>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d13b      	bne.n	800b006 <tcp_parseopt+0xca>
 800af8e:	4b25      	ldr	r3, [pc, #148]	; (800b024 <tcp_parseopt+0xe8>)
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	4a22      	ldr	r2, [pc, #136]	; (800b020 <tcp_parseopt+0xe4>)
 800af96:	8812      	ldrh	r2, [r2, #0]
 800af98:	4293      	cmp	r3, r2
 800af9a:	da34      	bge.n	800b006 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800af9c:	f7ff ff98 	bl	800aed0 <tcp_get_next_optbyte>
 800afa0:	4603      	mov	r3, r0
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	021b      	lsls	r3, r3, #8
 800afa6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800afa8:	f7ff ff92 	bl	800aed0 <tcp_get_next_optbyte>
 800afac:	4603      	mov	r3, r0
 800afae:	b29a      	uxth	r2, r3
 800afb0:	89bb      	ldrh	r3, [r7, #12]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800afb6:	89bb      	ldrh	r3, [r7, #12]
 800afb8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800afbc:	d804      	bhi.n	800afc8 <tcp_parseopt+0x8c>
 800afbe:	89bb      	ldrh	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <tcp_parseopt+0x8c>
 800afc4:	89ba      	ldrh	r2, [r7, #12]
 800afc6:	e001      	b.n	800afcc <tcp_parseopt+0x90>
 800afc8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800afd0:	e010      	b.n	800aff4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800afd2:	f7ff ff7d 	bl	800aed0 <tcp_get_next_optbyte>
 800afd6:	4603      	mov	r3, r0
 800afd8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800afda:	7afb      	ldrb	r3, [r7, #11]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d914      	bls.n	800b00a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800afe0:	7afb      	ldrb	r3, [r7, #11]
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	4b0f      	ldr	r3, [pc, #60]	; (800b024 <tcp_parseopt+0xe8>)
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	4413      	add	r3, r2
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b02      	subs	r3, #2
 800afee:	b29a      	uxth	r2, r3
 800aff0:	4b0c      	ldr	r3, [pc, #48]	; (800b024 <tcp_parseopt+0xe8>)
 800aff2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <tcp_parseopt+0xe8>)
 800aff6:	881a      	ldrh	r2, [r3, #0]
 800aff8:	4b09      	ldr	r3, [pc, #36]	; (800b020 <tcp_parseopt+0xe4>)
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d3b3      	bcc.n	800af68 <tcp_parseopt+0x2c>
 800b000:	e004      	b.n	800b00c <tcp_parseopt+0xd0>
          return;
 800b002:	bf00      	nop
 800b004:	e002      	b.n	800b00c <tcp_parseopt+0xd0>
            return;
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <tcp_parseopt+0xd0>
            return;
 800b00a:	bf00      	nop
      }
    }
  }
}
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	0801130c 	.word	0x0801130c
 800b018:	08011770 	.word	0x08011770
 800b01c:	08011358 	.word	0x08011358
 800b020:	200087f8 	.word	0x200087f8
 800b024:	20008800 	.word	0x20008800

0800b028 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <tcp_trigger_input_pcb_close+0x1c>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f043 0310 	orr.w	r3, r3, #16
 800b034:	b2da      	uxtb	r2, r3
 800b036:	4b03      	ldr	r3, [pc, #12]	; (800b044 <tcp_trigger_input_pcb_close+0x1c>)
 800b038:	701a      	strb	r2, [r3, #0]
}
 800b03a:	bf00      	nop
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	20008811 	.word	0x20008811

0800b048 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <tcp_route+0x28>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	7a1b      	ldrb	r3, [r3, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d006      	beq.n	800b070 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	7a1b      	ldrb	r3, [r3, #8]
 800b066:	4618      	mov	r0, r3
 800b068:	f7fb fb7a 	bl	8006760 <netif_get_by_index>
 800b06c:	4603      	mov	r3, r0
 800b06e:	e003      	b.n	800b078 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f002 fe3b 	bl	800dcec <ip4_route>
 800b076:	4603      	mov	r3, r0
  }
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b080:	b590      	push	{r4, r7, lr}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	4613      	mov	r3, r2
 800b08e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d105      	bne.n	800b0a2 <tcp_create_segment+0x22>
 800b096:	4b44      	ldr	r3, [pc, #272]	; (800b1a8 <tcp_create_segment+0x128>)
 800b098:	22a3      	movs	r2, #163	; 0xa3
 800b09a:	4944      	ldr	r1, [pc, #272]	; (800b1ac <tcp_create_segment+0x12c>)
 800b09c:	4844      	ldr	r0, [pc, #272]	; (800b1b0 <tcp_create_segment+0x130>)
 800b09e:	f004 f8ff 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d105      	bne.n	800b0b4 <tcp_create_segment+0x34>
 800b0a8:	4b3f      	ldr	r3, [pc, #252]	; (800b1a8 <tcp_create_segment+0x128>)
 800b0aa:	22a4      	movs	r2, #164	; 0xa4
 800b0ac:	4941      	ldr	r1, [pc, #260]	; (800b1b4 <tcp_create_segment+0x134>)
 800b0ae:	4840      	ldr	r0, [pc, #256]	; (800b1b0 <tcp_create_segment+0x130>)
 800b0b0:	f004 f8f6 	bl	800f2a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b0b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b0c2:	2003      	movs	r0, #3
 800b0c4:	f7fa ffc6 	bl	8006054 <memp_malloc>
 800b0c8:	6138      	str	r0, [r7, #16]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d104      	bne.n	800b0da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b0d0:	68b8      	ldr	r0, [r7, #8]
 800b0d2:	f7fb fe85 	bl	8006de0 <pbuf_free>
    return NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	e061      	b.n	800b19e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b0e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	891a      	ldrh	r2, [r3, #8]
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d205      	bcs.n	800b106 <tcp_create_segment+0x86>
 800b0fa:	4b2b      	ldr	r3, [pc, #172]	; (800b1a8 <tcp_create_segment+0x128>)
 800b0fc:	22b0      	movs	r2, #176	; 0xb0
 800b0fe:	492e      	ldr	r1, [pc, #184]	; (800b1b8 <tcp_create_segment+0x138>)
 800b100:	482b      	ldr	r0, [pc, #172]	; (800b1b0 <tcp_create_segment+0x130>)
 800b102:	f004 f8cd 	bl	800f2a0 <iprintf>
  seg->len = p->tot_len - optlen;
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	891a      	ldrh	r2, [r3, #8]
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	b29a      	uxth	r2, r3
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b116:	2114      	movs	r1, #20
 800b118:	68b8      	ldr	r0, [r7, #8]
 800b11a:	f7fb fdcb 	bl	8006cb4 <pbuf_add_header>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d004      	beq.n	800b12e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b124:	6938      	ldr	r0, [r7, #16]
 800b126:	f7fd f8ce 	bl	80082c6 <tcp_seg_free>
    return NULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	e037      	b.n	800b19e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	8ada      	ldrh	r2, [r3, #22]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	68dc      	ldr	r4, [r3, #12]
 800b140:	4610      	mov	r0, r2
 800b142:	f7fa fb0f 	bl	8005764 <lwip_htons>
 800b146:	4603      	mov	r3, r0
 800b148:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	8b1a      	ldrh	r2, [r3, #24]
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	68dc      	ldr	r4, [r3, #12]
 800b152:	4610      	mov	r0, r2
 800b154:	f7fa fb06 	bl	8005764 <lwip_htons>
 800b158:	4603      	mov	r3, r0
 800b15a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	68dc      	ldr	r4, [r3, #12]
 800b160:	6838      	ldr	r0, [r7, #0]
 800b162:	f7fa fb14 	bl	800578e <lwip_htonl>
 800b166:	4603      	mov	r3, r0
 800b168:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	089b      	lsrs	r3, r3, #2
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	b29b      	uxth	r3, r3
 800b172:	3305      	adds	r3, #5
 800b174:	b29b      	uxth	r3, r3
 800b176:	031b      	lsls	r3, r3, #12
 800b178:	b29a      	uxth	r2, r3
 800b17a:	79fb      	ldrb	r3, [r7, #7]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	4313      	orrs	r3, r2
 800b180:	b29a      	uxth	r2, r3
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	68dc      	ldr	r4, [r3, #12]
 800b186:	4610      	mov	r0, r2
 800b188:	f7fa faec 	bl	8005764 <lwip_htons>
 800b18c:	4603      	mov	r3, r0
 800b18e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	749a      	strb	r2, [r3, #18]
 800b198:	2200      	movs	r2, #0
 800b19a:	74da      	strb	r2, [r3, #19]
  return seg;
 800b19c:	693b      	ldr	r3, [r7, #16]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd90      	pop	{r4, r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	0801178c 	.word	0x0801178c
 800b1ac:	080117c0 	.word	0x080117c0
 800b1b0:	080117e0 	.word	0x080117e0
 800b1b4:	08011808 	.word	0x08011808
 800b1b8:	0801182c 	.word	0x0801182c

0800b1bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b1bc:	b590      	push	{r4, r7, lr}
 800b1be:	b08b      	sub	sp, #44	; 0x2c
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	61fb      	str	r3, [r7, #28]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <tcp_split_unsent_seg+0x2c>
 800b1da:	4b95      	ldr	r3, [pc, #596]	; (800b430 <tcp_split_unsent_seg+0x274>)
 800b1dc:	f240 324b 	movw	r2, #843	; 0x34b
 800b1e0:	4994      	ldr	r1, [pc, #592]	; (800b434 <tcp_split_unsent_seg+0x278>)
 800b1e2:	4895      	ldr	r0, [pc, #596]	; (800b438 <tcp_split_unsent_seg+0x27c>)
 800b1e4:	f004 f85c 	bl	800f2a0 <iprintf>

  useg = pcb->unsent;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d102      	bne.n	800b1fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f8:	e116      	b.n	800b428 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b1fa:	887b      	ldrh	r3, [r7, #2]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d109      	bne.n	800b214 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b200:	4b8b      	ldr	r3, [pc, #556]	; (800b430 <tcp_split_unsent_seg+0x274>)
 800b202:	f240 3253 	movw	r2, #851	; 0x353
 800b206:	498d      	ldr	r1, [pc, #564]	; (800b43c <tcp_split_unsent_seg+0x280>)
 800b208:	488b      	ldr	r0, [pc, #556]	; (800b438 <tcp_split_unsent_seg+0x27c>)
 800b20a:	f004 f849 	bl	800f2a0 <iprintf>
    return ERR_VAL;
 800b20e:	f06f 0305 	mvn.w	r3, #5
 800b212:	e109      	b.n	800b428 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	891b      	ldrh	r3, [r3, #8]
 800b218:	887a      	ldrh	r2, [r7, #2]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d301      	bcc.n	800b222 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	e102      	b.n	800b428 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b226:	887a      	ldrh	r2, [r7, #2]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d906      	bls.n	800b23a <tcp_split_unsent_seg+0x7e>
 800b22c:	4b80      	ldr	r3, [pc, #512]	; (800b430 <tcp_split_unsent_seg+0x274>)
 800b22e:	f240 325b 	movw	r2, #859	; 0x35b
 800b232:	4983      	ldr	r1, [pc, #524]	; (800b440 <tcp_split_unsent_seg+0x284>)
 800b234:	4880      	ldr	r0, [pc, #512]	; (800b438 <tcp_split_unsent_seg+0x27c>)
 800b236:	f004 f833 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	891b      	ldrh	r3, [r3, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <tcp_split_unsent_seg+0x94>
 800b242:	4b7b      	ldr	r3, [pc, #492]	; (800b430 <tcp_split_unsent_seg+0x274>)
 800b244:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b248:	497e      	ldr	r1, [pc, #504]	; (800b444 <tcp_split_unsent_seg+0x288>)
 800b24a:	487b      	ldr	r0, [pc, #492]	; (800b438 <tcp_split_unsent_seg+0x27c>)
 800b24c:	f004 f828 	bl	800f2a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	7a9b      	ldrb	r3, [r3, #10]
 800b254:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b256:	7bfb      	ldrb	r3, [r7, #15]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	891a      	ldrh	r2, [r3, #8]
 800b266:	887b      	ldrh	r3, [r7, #2]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	b29a      	uxth	r2, r3
 800b270:	89bb      	ldrh	r3, [r7, #12]
 800b272:	4413      	add	r3, r2
 800b274:	b29b      	uxth	r3, r3
 800b276:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b27a:	4619      	mov	r1, r3
 800b27c:	2036      	movs	r0, #54	; 0x36
 800b27e:	f7fb facb 	bl	8006818 <pbuf_alloc>
 800b282:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 80b7 	beq.w	800b3fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	891a      	ldrh	r2, [r3, #8]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	891b      	ldrh	r3, [r3, #8]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	b29a      	uxth	r2, r3
 800b29a:	887b      	ldrh	r3, [r7, #2]
 800b29c:	4413      	add	r3, r2
 800b29e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	6858      	ldr	r0, [r3, #4]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	7bbb      	ldrb	r3, [r7, #14]
 800b2aa:	18d1      	adds	r1, r2, r3
 800b2ac:	897b      	ldrh	r3, [r7, #10]
 800b2ae:	89ba      	ldrh	r2, [r7, #12]
 800b2b0:	f7fb ff80 	bl	80071b4 <pbuf_copy_partial>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	89bb      	ldrh	r3, [r7, #12]
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	f040 809f 	bne.w	800b3fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	899b      	ldrh	r3, [r3, #12]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fa fa4b 	bl	8005764 <lwip_htons>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b2d8:	2300      	movs	r3, #0
 800b2da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b2dc:	7efb      	ldrb	r3, [r7, #27]
 800b2de:	f003 0308 	and.w	r3, r3, #8
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d007      	beq.n	800b2f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b2e6:	7efb      	ldrb	r3, [r7, #27]
 800b2e8:	f023 0308 	bic.w	r3, r3, #8
 800b2ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b2ee:	7ebb      	ldrb	r3, [r7, #26]
 800b2f0:	f043 0308 	orr.w	r3, r3, #8
 800b2f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b2f6:	7efb      	ldrb	r3, [r7, #27]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d007      	beq.n	800b310 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b300:	7efb      	ldrb	r3, [r7, #27]
 800b302:	f023 0301 	bic.w	r3, r3, #1
 800b306:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b308:	7ebb      	ldrb	r3, [r7, #26]
 800b30a:	f043 0301 	orr.w	r3, r3, #1
 800b30e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	4618      	mov	r0, r3
 800b318:	f7fa fa39 	bl	800578e <lwip_htonl>
 800b31c:	4602      	mov	r2, r0
 800b31e:	887b      	ldrh	r3, [r7, #2]
 800b320:	18d1      	adds	r1, r2, r3
 800b322:	7eba      	ldrb	r2, [r7, #26]
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	460b      	mov	r3, r1
 800b32a:	6939      	ldr	r1, [r7, #16]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7ff fea7 	bl	800b080 <tcp_create_segment>
 800b332:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d063      	beq.n	800b402 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fb fdd6 	bl	8006ef0 <pbuf_clen>
 800b344:	4603      	mov	r3, r0
 800b346:	461a      	mov	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b34e:	1a9b      	subs	r3, r3, r2
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	6858      	ldr	r0, [r3, #4]
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	891a      	ldrh	r2, [r3, #8]
 800b362:	89bb      	ldrh	r3, [r7, #12]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	b29b      	uxth	r3, r3
 800b368:	4619      	mov	r1, r3
 800b36a:	f7fb fbb3 	bl	8006ad4 <pbuf_realloc>
  useg->len -= remainder;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	891a      	ldrh	r2, [r3, #8]
 800b372:	89bb      	ldrh	r3, [r7, #12]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	b29a      	uxth	r2, r3
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	899b      	ldrh	r3, [r3, #12]
 800b382:	b29c      	uxth	r4, r3
 800b384:	7efb      	ldrb	r3, [r7, #27]
 800b386:	b29b      	uxth	r3, r3
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fa f9eb 	bl	8005764 <lwip_htons>
 800b38e:	4603      	mov	r3, r0
 800b390:	461a      	mov	r2, r3
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	4322      	orrs	r2, r4
 800b398:	b292      	uxth	r2, r2
 800b39a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fb fda5 	bl	8006ef0 <pbuf_clen>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3b0:	4413      	add	r3, r2
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fb fd96 	bl	8006ef0 <pbuf_clen>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3ce:	4413      	add	r3, r2
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	69fa      	ldr	r2, [r7, #28]
 800b3e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d103      	bne.n	800b3f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	e016      	b.n	800b428 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b3fa:	bf00      	nop
 800b3fc:	e002      	b.n	800b404 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b3fe:	bf00      	nop
 800b400:	e000      	b.n	800b404 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b402:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d006      	beq.n	800b418 <tcp_split_unsent_seg+0x25c>
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <tcp_split_unsent_seg+0x274>)
 800b40c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b410:	490d      	ldr	r1, [pc, #52]	; (800b448 <tcp_split_unsent_seg+0x28c>)
 800b412:	4809      	ldr	r0, [pc, #36]	; (800b438 <tcp_split_unsent_seg+0x27c>)
 800b414:	f003 ff44 	bl	800f2a0 <iprintf>
  if (p != NULL) {
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d002      	beq.n	800b424 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b41e:	6938      	ldr	r0, [r7, #16]
 800b420:	f7fb fcde 	bl	8006de0 <pbuf_free>
  }

  return ERR_MEM;
 800b424:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3724      	adds	r7, #36	; 0x24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd90      	pop	{r4, r7, pc}
 800b430:	0801178c 	.word	0x0801178c
 800b434:	08011b20 	.word	0x08011b20
 800b438:	080117e0 	.word	0x080117e0
 800b43c:	08011b44 	.word	0x08011b44
 800b440:	08011b68 	.word	0x08011b68
 800b444:	08011b78 	.word	0x08011b78
 800b448:	08011b88 	.word	0x08011b88

0800b44c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <tcp_send_fin+0x1c>
 800b45a:	4b21      	ldr	r3, [pc, #132]	; (800b4e0 <tcp_send_fin+0x94>)
 800b45c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b460:	4920      	ldr	r1, [pc, #128]	; (800b4e4 <tcp_send_fin+0x98>)
 800b462:	4821      	ldr	r0, [pc, #132]	; (800b4e8 <tcp_send_fin+0x9c>)
 800b464:	f003 ff1c 	bl	800f2a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d02e      	beq.n	800b4ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	e002      	b.n	800b47e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1f8      	bne.n	800b478 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	899b      	ldrh	r3, [r3, #12]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fa f968 	bl	8005764 <lwip_htons>
 800b494:	4603      	mov	r3, r0
 800b496:	b2db      	uxtb	r3, r3
 800b498:	f003 0307 	and.w	r3, r3, #7
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d116      	bne.n	800b4ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	899b      	ldrh	r3, [r3, #12]
 800b4a6:	b29c      	uxth	r4, r3
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	f7fa f95b 	bl	8005764 <lwip_htons>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	4322      	orrs	r2, r4
 800b4b8:	b292      	uxth	r2, r2
 800b4ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	8b5b      	ldrh	r3, [r3, #26]
 800b4c0:	f043 0320 	orr.w	r3, r3, #32
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e004      	b.n	800b4d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f80b 	bl	800b4ec <tcp_enqueue_flags>
 800b4d6:	4603      	mov	r3, r0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd90      	pop	{r4, r7, pc}
 800b4e0:	0801178c 	.word	0x0801178c
 800b4e4:	08011b94 	.word	0x08011b94
 800b4e8:	080117e0 	.word	0x080117e0

0800b4ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08a      	sub	sp, #40	; 0x28
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <tcp_enqueue_flags+0x2c>
 800b50a:	4b67      	ldr	r3, [pc, #412]	; (800b6a8 <tcp_enqueue_flags+0x1bc>)
 800b50c:	f240 4211 	movw	r2, #1041	; 0x411
 800b510:	4966      	ldr	r1, [pc, #408]	; (800b6ac <tcp_enqueue_flags+0x1c0>)
 800b512:	4867      	ldr	r0, [pc, #412]	; (800b6b0 <tcp_enqueue_flags+0x1c4>)
 800b514:	f003 fec4 	bl	800f2a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <tcp_enqueue_flags+0x40>
 800b51e:	4b62      	ldr	r3, [pc, #392]	; (800b6a8 <tcp_enqueue_flags+0x1bc>)
 800b520:	f240 4213 	movw	r2, #1043	; 0x413
 800b524:	4963      	ldr	r1, [pc, #396]	; (800b6b4 <tcp_enqueue_flags+0x1c8>)
 800b526:	4862      	ldr	r0, [pc, #392]	; (800b6b0 <tcp_enqueue_flags+0x1c4>)
 800b528:	f003 feba 	bl	800f2a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b536:	2301      	movs	r3, #1
 800b538:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b53a:	7ffb      	ldrb	r3, [r7, #31]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b54e:	4619      	mov	r1, r3
 800b550:	2036      	movs	r0, #54	; 0x36
 800b552:	f7fb f961 	bl	8006818 <pbuf_alloc>
 800b556:	6138      	str	r0, [r7, #16]
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d109      	bne.n	800b572 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	8b5b      	ldrh	r3, [r3, #26]
 800b562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b566:	b29a      	uxth	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295
 800b570:	e095      	b.n	800b69e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	895a      	ldrh	r2, [r3, #10]
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d206      	bcs.n	800b58c <tcp_enqueue_flags+0xa0>
 800b57e:	4b4a      	ldr	r3, [pc, #296]	; (800b6a8 <tcp_enqueue_flags+0x1bc>)
 800b580:	f240 4239 	movw	r2, #1081	; 0x439
 800b584:	494c      	ldr	r1, [pc, #304]	; (800b6b8 <tcp_enqueue_flags+0x1cc>)
 800b586:	484a      	ldr	r0, [pc, #296]	; (800b6b0 <tcp_enqueue_flags+0x1c4>)
 800b588:	f003 fe8a 	bl	800f2a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b590:	78fa      	ldrb	r2, [r7, #3]
 800b592:	7ffb      	ldrb	r3, [r7, #31]
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	460b      	mov	r3, r1
 800b598:	6939      	ldr	r1, [r7, #16]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff fd70 	bl	800b080 <tcp_create_segment>
 800b5a0:	60f8      	str	r0, [r7, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d109      	bne.n	800b5bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	8b5b      	ldrh	r3, [r3, #26]
 800b5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ba:	e070      	b.n	800b69e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f003 0303 	and.w	r3, r3, #3
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d006      	beq.n	800b5d6 <tcp_enqueue_flags+0xea>
 800b5c8:	4b37      	ldr	r3, [pc, #220]	; (800b6a8 <tcp_enqueue_flags+0x1bc>)
 800b5ca:	f240 4242 	movw	r2, #1090	; 0x442
 800b5ce:	493b      	ldr	r1, [pc, #236]	; (800b6bc <tcp_enqueue_flags+0x1d0>)
 800b5d0:	4837      	ldr	r0, [pc, #220]	; (800b6b0 <tcp_enqueue_flags+0x1c4>)
 800b5d2:	f003 fe65 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	891b      	ldrh	r3, [r3, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d006      	beq.n	800b5ec <tcp_enqueue_flags+0x100>
 800b5de:	4b32      	ldr	r3, [pc, #200]	; (800b6a8 <tcp_enqueue_flags+0x1bc>)
 800b5e0:	f240 4243 	movw	r2, #1091	; 0x443
 800b5e4:	4936      	ldr	r1, [pc, #216]	; (800b6c0 <tcp_enqueue_flags+0x1d4>)
 800b5e6:	4832      	ldr	r0, [pc, #200]	; (800b6b0 <tcp_enqueue_flags+0x1c4>)
 800b5e8:	f003 fe5a 	bl	800f2a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d103      	bne.n	800b5fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b5fa:	e00d      	b.n	800b618 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b600:	61bb      	str	r3, [r7, #24]
 800b602:	e002      	b.n	800b60a <tcp_enqueue_flags+0x11e>
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1f8      	bne.n	800b604 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d104      	bne.n	800b634 <tcp_enqueue_flags+0x148>
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d004      	beq.n	800b63e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b63e:	78fb      	ldrb	r3, [r7, #3]
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	2b00      	cmp	r3, #0
 800b646:	d006      	beq.n	800b656 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	8b5b      	ldrh	r3, [r3, #26]
 800b64c:	f043 0320 	orr.w	r3, r3, #32
 800b650:	b29a      	uxth	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fb fc48 	bl	8006ef0 <pbuf_clen>
 800b660:	4603      	mov	r3, r0
 800b662:	461a      	mov	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b66a:	4413      	add	r3, r2
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00e      	beq.n	800b69c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <tcp_enqueue_flags+0x1b0>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <tcp_enqueue_flags+0x1b0>
 800b68e:	4b06      	ldr	r3, [pc, #24]	; (800b6a8 <tcp_enqueue_flags+0x1bc>)
 800b690:	f240 4265 	movw	r2, #1125	; 0x465
 800b694:	490b      	ldr	r1, [pc, #44]	; (800b6c4 <tcp_enqueue_flags+0x1d8>)
 800b696:	4806      	ldr	r0, [pc, #24]	; (800b6b0 <tcp_enqueue_flags+0x1c4>)
 800b698:	f003 fe02 	bl	800f2a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	0801178c 	.word	0x0801178c
 800b6ac:	08011bb0 	.word	0x08011bb0
 800b6b0:	080117e0 	.word	0x080117e0
 800b6b4:	08011c08 	.word	0x08011c08
 800b6b8:	08011c28 	.word	0x08011c28
 800b6bc:	08011c64 	.word	0x08011c64
 800b6c0:	08011c7c 	.word	0x08011c7c
 800b6c4:	08011ca8 	.word	0x08011ca8

0800b6c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b6c8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <tcp_output+0x1c>
 800b6d6:	4b8a      	ldr	r3, [pc, #552]	; (800b900 <tcp_output+0x238>)
 800b6d8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b6dc:	4989      	ldr	r1, [pc, #548]	; (800b904 <tcp_output+0x23c>)
 800b6de:	488a      	ldr	r0, [pc, #552]	; (800b908 <tcp_output+0x240>)
 800b6e0:	f003 fdde 	bl	800f2a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	7d1b      	ldrb	r3, [r3, #20]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d106      	bne.n	800b6fa <tcp_output+0x32>
 800b6ec:	4b84      	ldr	r3, [pc, #528]	; (800b900 <tcp_output+0x238>)
 800b6ee:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b6f2:	4986      	ldr	r1, [pc, #536]	; (800b90c <tcp_output+0x244>)
 800b6f4:	4884      	ldr	r0, [pc, #528]	; (800b908 <tcp_output+0x240>)
 800b6f6:	f003 fdd3 	bl	800f2a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b6fa:	4b85      	ldr	r3, [pc, #532]	; (800b910 <tcp_output+0x248>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d101      	bne.n	800b708 <tcp_output+0x40>
    return ERR_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	e1ce      	b.n	800baa6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b714:	4293      	cmp	r3, r2
 800b716:	bf28      	it	cs
 800b718:	4613      	movcs	r3, r2
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b722:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10b      	bne.n	800b742 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8b5b      	ldrh	r3, [r3, #26]
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 81aa 	beq.w	800ba8c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fdcb 	bl	800c2d4 <tcp_send_empty_ack>
 800b73e:	4603      	mov	r3, r0
 800b740:	e1b1      	b.n	800baa6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b742:	6879      	ldr	r1, [r7, #4]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3304      	adds	r3, #4
 800b748:	461a      	mov	r2, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7ff fc7c 	bl	800b048 <tcp_route>
 800b750:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <tcp_output+0x96>
    return ERR_RTE;
 800b758:	f06f 0303 	mvn.w	r3, #3
 800b75c:	e1a3      	b.n	800baa6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <tcp_output+0xa4>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d111      	bne.n	800b790 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d002      	beq.n	800b778 <tcp_output+0xb0>
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	3304      	adds	r3, #4
 800b776:	e000      	b.n	800b77a <tcp_output+0xb2>
 800b778:	2300      	movs	r3, #0
 800b77a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d102      	bne.n	800b788 <tcp_output+0xc0>
      return ERR_RTE;
 800b782:	f06f 0303 	mvn.w	r3, #3
 800b786:	e18e      	b.n	800baa6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	4618      	mov	r0, r3
 800b798:	f7f9 fff9 	bl	800578e <lwip_htonl>
 800b79c:	4602      	mov	r2, r0
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a6:	8912      	ldrh	r2, [r2, #8]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	69ba      	ldr	r2, [r7, #24]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d227      	bcs.n	800b800 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d114      	bne.n	800b7e8 <tcp_output+0x120>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d110      	bne.n	800b7e8 <tcp_output+0x120>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10b      	bne.n	800b7e8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	8b5b      	ldrh	r3, [r3, #26]
 800b7ec:	f003 0302 	and.w	r3, r3, #2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 814d 	beq.w	800ba90 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fd6c 	bl	800c2d4 <tcp_send_empty_ack>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	e152      	b.n	800baa6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 811c 	beq.w	800ba4e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b816:	e002      	b.n	800b81e <tcp_output+0x156>
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	623b      	str	r3, [r7, #32]
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1f8      	bne.n	800b818 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b826:	e112      	b.n	800ba4e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	899b      	ldrh	r3, [r3, #12]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	4618      	mov	r0, r3
 800b832:	f7f9 ff97 	bl	8005764 <lwip_htons>
 800b836:	4603      	mov	r3, r0
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	f003 0304 	and.w	r3, r3, #4
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d006      	beq.n	800b850 <tcp_output+0x188>
 800b842:	4b2f      	ldr	r3, [pc, #188]	; (800b900 <tcp_output+0x238>)
 800b844:	f240 5236 	movw	r2, #1334	; 0x536
 800b848:	4932      	ldr	r1, [pc, #200]	; (800b914 <tcp_output+0x24c>)
 800b84a:	482f      	ldr	r0, [pc, #188]	; (800b908 <tcp_output+0x240>)
 800b84c:	f003 fd28 	bl	800f2a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01f      	beq.n	800b898 <tcp_output+0x1d0>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	8b5b      	ldrh	r3, [r3, #26]
 800b85c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b860:	2b00      	cmp	r3, #0
 800b862:	d119      	bne.n	800b898 <tcp_output+0x1d0>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00b      	beq.n	800b884 <tcp_output+0x1bc>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d110      	bne.n	800b898 <tcp_output+0x1d0>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b87a:	891a      	ldrh	r2, [r3, #8]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b880:	429a      	cmp	r2, r3
 800b882:	d209      	bcs.n	800b898 <tcp_output+0x1d0>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d004      	beq.n	800b898 <tcp_output+0x1d0>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b894:	2b08      	cmp	r3, #8
 800b896:	d901      	bls.n	800b89c <tcp_output+0x1d4>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <tcp_output+0x1d6>
 800b89c:	2300      	movs	r3, #0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d106      	bne.n	800b8b0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8b5b      	ldrh	r3, [r3, #26]
 800b8a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 80e4 	beq.w	800ba78 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	7d1b      	ldrb	r3, [r3, #20]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d00d      	beq.n	800b8d4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	899b      	ldrh	r3, [r3, #12]
 800b8be:	b29c      	uxth	r4, r3
 800b8c0:	2010      	movs	r0, #16
 800b8c2:	f7f9 ff4f 	bl	8005764 <lwip_htons>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	4322      	orrs	r2, r4
 800b8d0:	b292      	uxth	r2, r2
 800b8d2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8da:	f000 f909 	bl	800baf0 <tcp_output_segment>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d016      	beq.n	800b918 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	8b5b      	ldrh	r3, [r3, #26]
 800b8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	835a      	strh	r2, [r3, #26]
      return err;
 800b8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8fc:	e0d3      	b.n	800baa6 <tcp_output+0x3de>
 800b8fe:	bf00      	nop
 800b900:	0801178c 	.word	0x0801178c
 800b904:	08011cd0 	.word	0x08011cd0
 800b908:	080117e0 	.word	0x080117e0
 800b90c:	08011ce8 	.word	0x08011ce8
 800b910:	20008818 	.word	0x20008818
 800b914:	08011d10 	.word	0x08011d10
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	7d1b      	ldrb	r3, [r3, #20]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d006      	beq.n	800b936 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	8b5b      	ldrh	r3, [r3, #26]
 800b92c:	f023 0303 	bic.w	r3, r3, #3
 800b930:	b29a      	uxth	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7f9 ff26 	bl	800578e <lwip_htonl>
 800b942:	4604      	mov	r4, r0
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	891b      	ldrh	r3, [r3, #8]
 800b948:	461d      	mov	r5, r3
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	899b      	ldrh	r3, [r3, #12]
 800b950:	b29b      	uxth	r3, r3
 800b952:	4618      	mov	r0, r3
 800b954:	f7f9 ff06 	bl	8005764 <lwip_htons>
 800b958:	4603      	mov	r3, r0
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	f003 0303 	and.w	r3, r3, #3
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <tcp_output+0x2a0>
 800b964:	2301      	movs	r3, #1
 800b966:	e000      	b.n	800b96a <tcp_output+0x2a2>
 800b968:	2300      	movs	r3, #0
 800b96a:	442b      	add	r3, r5
 800b96c:	4423      	add	r3, r4
 800b96e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	da02      	bge.n	800b982 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	891b      	ldrh	r3, [r3, #8]
 800b986:	461c      	mov	r4, r3
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	899b      	ldrh	r3, [r3, #12]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	4618      	mov	r0, r3
 800b992:	f7f9 fee7 	bl	8005764 <lwip_htons>
 800b996:	4603      	mov	r3, r0
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <tcp_output+0x2de>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <tcp_output+0x2e0>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4423      	add	r3, r4
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d049      	beq.n	800ba42 <tcp_output+0x37a>
      seg->next = NULL;
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d105      	bne.n	800b9c8 <tcp_output+0x300>
        pcb->unacked = seg;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	623b      	str	r3, [r7, #32]
 800b9c6:	e03f      	b.n	800ba48 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7f9 fedd 	bl	800578e <lwip_htonl>
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7f9 fed6 	bl	800578e <lwip_htonl>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	1ae3      	subs	r3, r4, r3
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	da24      	bge.n	800ba34 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3370      	adds	r3, #112	; 0x70
 800b9ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b9f0:	e002      	b.n	800b9f8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d011      	beq.n	800ba24 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f9 fec0 	bl	800578e <lwip_htonl>
 800ba0e:	4604      	mov	r4, r0
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7f9 feb9 	bl	800578e <lwip_htonl>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dbe6      	blt.n	800b9f2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba30:	601a      	str	r2, [r3, #0]
 800ba32:	e009      	b.n	800ba48 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba38:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ba3a:	6a3b      	ldr	r3, [r7, #32]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	623b      	str	r3, [r7, #32]
 800ba40:	e002      	b.n	800ba48 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ba42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba44:	f7fc fc3f 	bl	80082c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d012      	beq.n	800ba7a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f9 fe97 	bl	800578e <lwip_htonl>
 800ba60:	4602      	mov	r2, r0
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba6a:	8912      	ldrh	r2, [r2, #8]
 800ba6c:	4413      	add	r3, r2
  while (seg != NULL &&
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	f4bf aed9 	bcs.w	800b828 <tcp_output+0x160>
 800ba76:	e000      	b.n	800ba7a <tcp_output+0x3b2>
      break;
 800ba78:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d108      	bne.n	800ba94 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ba8a:	e004      	b.n	800ba96 <tcp_output+0x3ce>
    goto output_done;
 800ba8c:	bf00      	nop
 800ba8e:	e002      	b.n	800ba96 <tcp_output+0x3ce>
    goto output_done;
 800ba90:	bf00      	nop
 800ba92:	e000      	b.n	800ba96 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ba94:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	8b5b      	ldrh	r3, [r3, #26]
 800ba9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3728      	adds	r7, #40	; 0x28
 800baaa:	46bd      	mov	sp, r7
 800baac:	bdb0      	pop	{r4, r5, r7, pc}
 800baae:	bf00      	nop

0800bab0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <tcp_output_segment_busy+0x1c>
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <tcp_output_segment_busy+0x34>)
 800bac0:	f240 529a 	movw	r2, #1434	; 0x59a
 800bac4:	4908      	ldr	r1, [pc, #32]	; (800bae8 <tcp_output_segment_busy+0x38>)
 800bac6:	4809      	ldr	r0, [pc, #36]	; (800baec <tcp_output_segment_busy+0x3c>)
 800bac8:	f003 fbea 	bl	800f2a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	7b9b      	ldrb	r3, [r3, #14]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d001      	beq.n	800bada <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e000      	b.n	800badc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	0801178c 	.word	0x0801178c
 800bae8:	08011d28 	.word	0x08011d28
 800baec:	080117e0 	.word	0x080117e0

0800baf0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800baf0:	b5b0      	push	{r4, r5, r7, lr}
 800baf2:	b08c      	sub	sp, #48	; 0x30
 800baf4:	af04      	add	r7, sp, #16
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <tcp_output_segment+0x20>
 800bb02:	4b64      	ldr	r3, [pc, #400]	; (800bc94 <tcp_output_segment+0x1a4>)
 800bb04:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bb08:	4963      	ldr	r1, [pc, #396]	; (800bc98 <tcp_output_segment+0x1a8>)
 800bb0a:	4864      	ldr	r0, [pc, #400]	; (800bc9c <tcp_output_segment+0x1ac>)
 800bb0c:	f003 fbc8 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d106      	bne.n	800bb24 <tcp_output_segment+0x34>
 800bb16:	4b5f      	ldr	r3, [pc, #380]	; (800bc94 <tcp_output_segment+0x1a4>)
 800bb18:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bb1c:	4960      	ldr	r1, [pc, #384]	; (800bca0 <tcp_output_segment+0x1b0>)
 800bb1e:	485f      	ldr	r0, [pc, #380]	; (800bc9c <tcp_output_segment+0x1ac>)
 800bb20:	f003 fbbe 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d106      	bne.n	800bb38 <tcp_output_segment+0x48>
 800bb2a:	4b5a      	ldr	r3, [pc, #360]	; (800bc94 <tcp_output_segment+0x1a4>)
 800bb2c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bb30:	495c      	ldr	r1, [pc, #368]	; (800bca4 <tcp_output_segment+0x1b4>)
 800bb32:	485a      	ldr	r0, [pc, #360]	; (800bc9c <tcp_output_segment+0x1ac>)
 800bb34:	f003 fbb4 	bl	800f2a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f7ff ffb9 	bl	800bab0 <tcp_output_segment_busy>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	e0a1      	b.n	800bc8c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	68dc      	ldr	r4, [r3, #12]
 800bb50:	4610      	mov	r0, r2
 800bb52:	f7f9 fe1c 	bl	800578e <lwip_htonl>
 800bb56:	4603      	mov	r3, r0
 800bb58:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	68dc      	ldr	r4, [r3, #12]
 800bb62:	4610      	mov	r0, r2
 800bb64:	f7f9 fdfe 	bl	8005764 <lwip_htons>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bb74:	441a      	add	r2, r3
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	3314      	adds	r3, #20
 800bb80:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	7a9b      	ldrb	r3, [r3, #10]
 800bb86:	f003 0301 	and.w	r3, r3, #1
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d015      	beq.n	800bbba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	3304      	adds	r3, #4
 800bb92:	461a      	mov	r2, r3
 800bb94:	6879      	ldr	r1, [r7, #4]
 800bb96:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bb9a:	f7fc fe8b 	bl	80088b4 <tcp_eff_send_mss_netif>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bba2:	8b7b      	ldrh	r3, [r7, #26]
 800bba4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7f9 fdf0 	bl	800578e <lwip_htonl>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	da02      	bge.n	800bbca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10c      	bne.n	800bbec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bbd2:	4b35      	ldr	r3, [pc, #212]	; (800bca8 <tcp_output_segment+0x1b8>)
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7f9 fdd4 	bl	800578e <lwip_htonl>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	68da      	ldr	r2, [r3, #12]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	8959      	ldrh	r1, [r3, #10]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	8b3a      	ldrh	r2, [r7, #24]
 800bc06:	1a8a      	subs	r2, r1, r2
 800bc08:	b292      	uxth	r2, r2
 800bc0a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	8919      	ldrh	r1, [r3, #8]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	8b3a      	ldrh	r2, [r7, #24]
 800bc18:	1a8a      	subs	r2, r1, r2
 800bc1a:	b292      	uxth	r2, r2
 800bc1c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	68d2      	ldr	r2, [r2, #12]
 800bc26:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	741a      	strb	r2, [r3, #16]
 800bc30:	2200      	movs	r2, #0
 800bc32:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	7a9b      	ldrb	r3, [r3, #10]
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <tcp_output_segment+0x158>
 800bc44:	2318      	movs	r3, #24
 800bc46:	e000      	b.n	800bc4a <tcp_output_segment+0x15a>
 800bc48:	2314      	movs	r3, #20
 800bc4a:	4413      	add	r3, r2
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d006      	beq.n	800bc60 <tcp_output_segment+0x170>
 800bc52:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <tcp_output_segment+0x1a4>)
 800bc54:	f240 621c 	movw	r2, #1564	; 0x61c
 800bc58:	4914      	ldr	r1, [pc, #80]	; (800bcac <tcp_output_segment+0x1bc>)
 800bc5a:	4810      	ldr	r0, [pc, #64]	; (800bc9c <tcp_output_segment+0x1ac>)
 800bc5c:	f003 fb20 	bl	800f2a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6858      	ldr	r0, [r3, #4]
 800bc64:	68b9      	ldr	r1, [r7, #8]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	1d1c      	adds	r4, r3, #4
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	7add      	ldrb	r5, [r3, #11]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	7a9b      	ldrb	r3, [r3, #10]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	9202      	str	r2, [sp, #8]
 800bc76:	2206      	movs	r2, #6
 800bc78:	9201      	str	r2, [sp, #4]
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	4622      	mov	r2, r4
 800bc80:	f002 f9f2 	bl	800e068 <ip4_output_if>
 800bc84:	4603      	mov	r3, r0
 800bc86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bc88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3720      	adds	r7, #32
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bdb0      	pop	{r4, r5, r7, pc}
 800bc94:	0801178c 	.word	0x0801178c
 800bc98:	08011d50 	.word	0x08011d50
 800bc9c:	080117e0 	.word	0x080117e0
 800bca0:	08011d70 	.word	0x08011d70
 800bca4:	08011d90 	.word	0x08011d90
 800bca8:	200087cc 	.word	0x200087cc
 800bcac:	08011db4 	.word	0x08011db4

0800bcb0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bcb0:	b5b0      	push	{r4, r5, r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <tcp_rexmit_rto_prepare+0x1c>
 800bcbe:	4b31      	ldr	r3, [pc, #196]	; (800bd84 <tcp_rexmit_rto_prepare+0xd4>)
 800bcc0:	f240 6263 	movw	r2, #1635	; 0x663
 800bcc4:	4930      	ldr	r1, [pc, #192]	; (800bd88 <tcp_rexmit_rto_prepare+0xd8>)
 800bcc6:	4831      	ldr	r0, [pc, #196]	; (800bd8c <tcp_rexmit_rto_prepare+0xdc>)
 800bcc8:	f003 faea 	bl	800f2a0 <iprintf>

  if (pcb->unacked == NULL) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bcd4:	f06f 0305 	mvn.w	r3, #5
 800bcd8:	e050      	b.n	800bd7c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcde:	60fb      	str	r3, [r7, #12]
 800bce0:	e00b      	b.n	800bcfa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f7ff fee4 	bl	800bab0 <tcp_output_segment_busy>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bcee:	f06f 0305 	mvn.w	r3, #5
 800bcf2:	e043      	b.n	800bd7c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1ef      	bne.n	800bce2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff fed4 	bl	800bab0 <tcp_output_segment_busy>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d002      	beq.n	800bd14 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bd0e:	f06f 0305 	mvn.w	r3, #5
 800bd12:	e033      	b.n	800bd7c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	8b5b      	ldrh	r3, [r3, #26]
 800bd2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7f9 fd25 	bl	800578e <lwip_htonl>
 800bd44:	4604      	mov	r4, r0
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	891b      	ldrh	r3, [r3, #8]
 800bd4a:	461d      	mov	r5, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	899b      	ldrh	r3, [r3, #12]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f9 fd05 	bl	8005764 <lwip_htons>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0303 	and.w	r3, r3, #3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <tcp_rexmit_rto_prepare+0xba>
 800bd66:	2301      	movs	r3, #1
 800bd68:	e000      	b.n	800bd6c <tcp_rexmit_rto_prepare+0xbc>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	442b      	add	r3, r5
 800bd6e:	18e2      	adds	r2, r4, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bdb0      	pop	{r4, r5, r7, pc}
 800bd84:	0801178c 	.word	0x0801178c
 800bd88:	08011dc8 	.word	0x08011dc8
 800bd8c:	080117e0 	.word	0x080117e0

0800bd90 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d106      	bne.n	800bdac <tcp_rexmit_rto_commit+0x1c>
 800bd9e:	4b0d      	ldr	r3, [pc, #52]	; (800bdd4 <tcp_rexmit_rto_commit+0x44>)
 800bda0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bda4:	490c      	ldr	r1, [pc, #48]	; (800bdd8 <tcp_rexmit_rto_commit+0x48>)
 800bda6:	480d      	ldr	r0, [pc, #52]	; (800bddc <tcp_rexmit_rto_commit+0x4c>)
 800bda8:	f003 fa7a 	bl	800f2a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdb2:	2bff      	cmp	r3, #255	; 0xff
 800bdb4:	d007      	beq.n	800bdc6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7ff fc7e 	bl	800b6c8 <tcp_output>
}
 800bdcc:	bf00      	nop
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	0801178c 	.word	0x0801178c
 800bdd8:	08011dec 	.word	0x08011dec
 800bddc:	080117e0 	.word	0x080117e0

0800bde0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d106      	bne.n	800bdfc <tcp_rexmit_rto+0x1c>
 800bdee:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <tcp_rexmit_rto+0x38>)
 800bdf0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bdf4:	4909      	ldr	r1, [pc, #36]	; (800be1c <tcp_rexmit_rto+0x3c>)
 800bdf6:	480a      	ldr	r0, [pc, #40]	; (800be20 <tcp_rexmit_rto+0x40>)
 800bdf8:	f003 fa52 	bl	800f2a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff ff57 	bl	800bcb0 <tcp_rexmit_rto_prepare>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7ff ffc1 	bl	800bd90 <tcp_rexmit_rto_commit>
  }
}
 800be0e:	bf00      	nop
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	0801178c 	.word	0x0801178c
 800be1c:	08011e10 	.word	0x08011e10
 800be20:	080117e0 	.word	0x080117e0

0800be24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <tcp_rexmit+0x1c>
 800be32:	4b2f      	ldr	r3, [pc, #188]	; (800bef0 <tcp_rexmit+0xcc>)
 800be34:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800be38:	492e      	ldr	r1, [pc, #184]	; (800bef4 <tcp_rexmit+0xd0>)
 800be3a:	482f      	ldr	r0, [pc, #188]	; (800bef8 <tcp_rexmit+0xd4>)
 800be3c:	f003 fa30 	bl	800f2a0 <iprintf>

  if (pcb->unacked == NULL) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be44:	2b00      	cmp	r3, #0
 800be46:	d102      	bne.n	800be4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800be48:	f06f 0305 	mvn.w	r3, #5
 800be4c:	e04c      	b.n	800bee8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800be54:	68b8      	ldr	r0, [r7, #8]
 800be56:	f7ff fe2b 	bl	800bab0 <tcp_output_segment_busy>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800be60:	f06f 0305 	mvn.w	r3, #5
 800be64:	e040      	b.n	800bee8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	336c      	adds	r3, #108	; 0x6c
 800be72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be74:	e002      	b.n	800be7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d011      	beq.n	800bea8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7f9 fc7e 	bl	800578e <lwip_htonl>
 800be92:	4604      	mov	r4, r0
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7f9 fc77 	bl	800578e <lwip_htonl>
 800bea0:	4603      	mov	r3, r0
 800bea2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dbe6      	blt.n	800be76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d103      	bne.n	800bec6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800becc:	2bff      	cmp	r3, #255	; 0xff
 800bece:	d007      	beq.n	800bee0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bed6:	3301      	adds	r3, #1
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3714      	adds	r7, #20
 800beec:	46bd      	mov	sp, r7
 800beee:	bd90      	pop	{r4, r7, pc}
 800bef0:	0801178c 	.word	0x0801178c
 800bef4:	08011e2c 	.word	0x08011e2c
 800bef8:	080117e0 	.word	0x080117e0

0800befc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d106      	bne.n	800bf18 <tcp_rexmit_fast+0x1c>
 800bf0a:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <tcp_rexmit_fast+0xb8>)
 800bf0c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bf10:	4929      	ldr	r1, [pc, #164]	; (800bfb8 <tcp_rexmit_fast+0xbc>)
 800bf12:	482a      	ldr	r0, [pc, #168]	; (800bfbc <tcp_rexmit_fast+0xc0>)
 800bf14:	f003 f9c4 	bl	800f2a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d045      	beq.n	800bfac <tcp_rexmit_fast+0xb0>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	8b5b      	ldrh	r3, [r3, #26]
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d13f      	bne.n	800bfac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff ff79 	bl	800be24 <tcp_rexmit>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d139      	bne.n	800bfac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf44:	4293      	cmp	r3, r2
 800bf46:	bf28      	it	cs
 800bf48:	4613      	movcs	r3, r2
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	da00      	bge.n	800bf52 <tcp_rexmit_fast+0x56>
 800bf50:	3301      	adds	r3, #1
 800bf52:	105b      	asrs	r3, r3, #1
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bf62:	461a      	mov	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d206      	bcs.n	800bf7c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf86:	4619      	mov	r1, r3
 800bf88:	0049      	lsls	r1, r1, #1
 800bf8a:	440b      	add	r3, r1
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	4413      	add	r3, r2
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	8b5b      	ldrh	r3, [r3, #26]
 800bf9c:	f043 0304 	orr.w	r3, r3, #4
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	0801178c 	.word	0x0801178c
 800bfb8:	08011e44 	.word	0x08011e44
 800bfbc:	080117e0 	.word	0x080117e0

0800bfc0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	607b      	str	r3, [r7, #4]
 800bfca:	460b      	mov	r3, r1
 800bfcc:	817b      	strh	r3, [r7, #10]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bfd2:	897a      	ldrh	r2, [r7, #10]
 800bfd4:	893b      	ldrh	r3, [r7, #8]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	3314      	adds	r3, #20
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	2022      	movs	r0, #34	; 0x22
 800bfe6:	f7fa fc17 	bl	8006818 <pbuf_alloc>
 800bfea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d04d      	beq.n	800c08e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bff2:	897b      	ldrh	r3, [r7, #10]
 800bff4:	3313      	adds	r3, #19
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	8952      	ldrh	r2, [r2, #10]
 800bffa:	4293      	cmp	r3, r2
 800bffc:	db06      	blt.n	800c00c <tcp_output_alloc_header_common+0x4c>
 800bffe:	4b26      	ldr	r3, [pc, #152]	; (800c098 <tcp_output_alloc_header_common+0xd8>)
 800c000:	f240 7223 	movw	r2, #1827	; 0x723
 800c004:	4925      	ldr	r1, [pc, #148]	; (800c09c <tcp_output_alloc_header_common+0xdc>)
 800c006:	4826      	ldr	r0, [pc, #152]	; (800c0a0 <tcp_output_alloc_header_common+0xe0>)
 800c008:	f003 f94a 	bl	800f2a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c012:	8c3b      	ldrh	r3, [r7, #32]
 800c014:	4618      	mov	r0, r3
 800c016:	f7f9 fba5 	bl	8005764 <lwip_htons>
 800c01a:	4603      	mov	r3, r0
 800c01c:	461a      	mov	r2, r3
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c024:	4618      	mov	r0, r3
 800c026:	f7f9 fb9d 	bl	8005764 <lwip_htons>
 800c02a:	4603      	mov	r3, r0
 800c02c:	461a      	mov	r2, r3
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7f9 fba8 	bl	800578e <lwip_htonl>
 800c03e:	4602      	mov	r2, r0
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c044:	897b      	ldrh	r3, [r7, #10]
 800c046:	089b      	lsrs	r3, r3, #2
 800c048:	b29b      	uxth	r3, r3
 800c04a:	3305      	adds	r3, #5
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	031b      	lsls	r3, r3, #12
 800c050:	b29a      	uxth	r2, r3
 800c052:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c056:	b29b      	uxth	r3, r3
 800c058:	4313      	orrs	r3, r2
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7f9 fb81 	bl	8005764 <lwip_htons>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c06a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f9 fb79 	bl	8005764 <lwip_htons>
 800c072:	4603      	mov	r3, r0
 800c074:	461a      	mov	r2, r3
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	2200      	movs	r2, #0
 800c07e:	741a      	strb	r2, [r3, #16]
 800c080:	2200      	movs	r2, #0
 800c082:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	2200      	movs	r2, #0
 800c088:	749a      	strb	r2, [r3, #18]
 800c08a:	2200      	movs	r2, #0
 800c08c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c08e:	697b      	ldr	r3, [r7, #20]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	0801178c 	.word	0x0801178c
 800c09c:	08011e64 	.word	0x08011e64
 800c0a0:	080117e0 	.word	0x080117e0

0800c0a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c0a4:	b5b0      	push	{r4, r5, r7, lr}
 800c0a6:	b08a      	sub	sp, #40	; 0x28
 800c0a8:	af04      	add	r7, sp, #16
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	817b      	strh	r3, [r7, #10]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <tcp_output_alloc_header+0x26>
 800c0bc:	4b15      	ldr	r3, [pc, #84]	; (800c114 <tcp_output_alloc_header+0x70>)
 800c0be:	f240 7242 	movw	r2, #1858	; 0x742
 800c0c2:	4915      	ldr	r1, [pc, #84]	; (800c118 <tcp_output_alloc_header+0x74>)
 800c0c4:	4815      	ldr	r0, [pc, #84]	; (800c11c <tcp_output_alloc_header+0x78>)
 800c0c6:	f003 f8eb 	bl	800f2a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	8adb      	ldrh	r3, [r3, #22]
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	8b12      	ldrh	r2, [r2, #24]
 800c0d6:	68f9      	ldr	r1, [r7, #12]
 800c0d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c0da:	893d      	ldrh	r5, [r7, #8]
 800c0dc:	897c      	ldrh	r4, [r7, #10]
 800c0de:	9103      	str	r1, [sp, #12]
 800c0e0:	2110      	movs	r1, #16
 800c0e2:	9102      	str	r1, [sp, #8]
 800c0e4:	9201      	str	r2, [sp, #4]
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f7ff ff67 	bl	800bfc0 <tcp_output_alloc_header_common>
 800c0f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d006      	beq.n	800c108 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c102:	441a      	add	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c108:	697b      	ldr	r3, [r7, #20]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3718      	adds	r7, #24
 800c10e:	46bd      	mov	sp, r7
 800c110:	bdb0      	pop	{r4, r5, r7, pc}
 800c112:	bf00      	nop
 800c114:	0801178c 	.word	0x0801178c
 800c118:	08011e94 	.word	0x08011e94
 800c11c:	080117e0 	.word	0x080117e0

0800c120 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	4611      	mov	r1, r2
 800c12c:	461a      	mov	r2, r3
 800c12e:	460b      	mov	r3, r1
 800c130:	71fb      	strb	r3, [r7, #7]
 800c132:	4613      	mov	r3, r2
 800c134:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <tcp_output_fill_options+0x2e>
 800c140:	4b12      	ldr	r3, [pc, #72]	; (800c18c <tcp_output_fill_options+0x6c>)
 800c142:	f240 7256 	movw	r2, #1878	; 0x756
 800c146:	4912      	ldr	r1, [pc, #72]	; (800c190 <tcp_output_fill_options+0x70>)
 800c148:	4812      	ldr	r0, [pc, #72]	; (800c194 <tcp_output_fill_options+0x74>)
 800c14a:	f003 f8a9 	bl	800f2a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	3314      	adds	r3, #20
 800c158:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c15a:	8bfb      	ldrh	r3, [r7, #30]
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	461a      	mov	r2, r3
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	f003 0304 	and.w	r3, r3, #4
 800c168:	4413      	add	r3, r2
 800c16a:	3314      	adds	r3, #20
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	4413      	add	r3, r2
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	429a      	cmp	r2, r3
 800c174:	d006      	beq.n	800c184 <tcp_output_fill_options+0x64>
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <tcp_output_fill_options+0x6c>)
 800c178:	f240 7275 	movw	r2, #1909	; 0x775
 800c17c:	4906      	ldr	r1, [pc, #24]	; (800c198 <tcp_output_fill_options+0x78>)
 800c17e:	4805      	ldr	r0, [pc, #20]	; (800c194 <tcp_output_fill_options+0x74>)
 800c180:	f003 f88e 	bl	800f2a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c184:	bf00      	nop
 800c186:	3720      	adds	r7, #32
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	0801178c 	.word	0x0801178c
 800c190:	08011ebc 	.word	0x08011ebc
 800c194:	080117e0 	.word	0x080117e0
 800c198:	08011db4 	.word	0x08011db4

0800c19c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	; 0x28
 800c1a0:	af04      	add	r7, sp, #16
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d106      	bne.n	800c1be <tcp_output_control_segment+0x22>
 800c1b0:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <tcp_output_control_segment+0x88>)
 800c1b2:	f240 7287 	movw	r2, #1927	; 0x787
 800c1b6:	491c      	ldr	r1, [pc, #112]	; (800c228 <tcp_output_control_segment+0x8c>)
 800c1b8:	481c      	ldr	r0, [pc, #112]	; (800c22c <tcp_output_control_segment+0x90>)
 800c1ba:	f003 f871 	bl	800f2a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7fe ff40 	bl	800b048 <tcp_route>
 800c1c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c1d0:	23fc      	movs	r3, #252	; 0xfc
 800c1d2:	75fb      	strb	r3, [r7, #23]
 800c1d4:	e01c      	b.n	800c210 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d006      	beq.n	800c1ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	7adb      	ldrb	r3, [r3, #11]
 800c1e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	7a9b      	ldrb	r3, [r3, #10]
 800c1e6:	757b      	strb	r3, [r7, #21]
 800c1e8:	e003      	b.n	800c1f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c1ea:	23ff      	movs	r3, #255	; 0xff
 800c1ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c1f2:	7dba      	ldrb	r2, [r7, #22]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	2306      	movs	r3, #6
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	7d7b      	ldrb	r3, [r7, #21]
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	4613      	mov	r3, r2
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	68b8      	ldr	r0, [r7, #8]
 800c208:	f001 ff2e 	bl	800e068 <ip4_output_if>
 800c20c:	4603      	mov	r3, r0
 800c20e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c210:	68b8      	ldr	r0, [r7, #8]
 800c212:	f7fa fde5 	bl	8006de0 <pbuf_free>
  return err;
 800c216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	0801178c 	.word	0x0801178c
 800c228:	08011ee4 	.word	0x08011ee4
 800c22c:	080117e0 	.word	0x080117e0

0800c230 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c230:	b590      	push	{r4, r7, lr}
 800c232:	b08b      	sub	sp, #44	; 0x2c
 800c234:	af04      	add	r7, sp, #16
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <tcp_rst+0x22>
 800c244:	4b1f      	ldr	r3, [pc, #124]	; (800c2c4 <tcp_rst+0x94>)
 800c246:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c24a:	491f      	ldr	r1, [pc, #124]	; (800c2c8 <tcp_rst+0x98>)
 800c24c:	481f      	ldr	r0, [pc, #124]	; (800c2cc <tcp_rst+0x9c>)
 800c24e:	f003 f827 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	2b00      	cmp	r3, #0
 800c256:	d106      	bne.n	800c266 <tcp_rst+0x36>
 800c258:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <tcp_rst+0x94>)
 800c25a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c25e:	491c      	ldr	r1, [pc, #112]	; (800c2d0 <tcp_rst+0xa0>)
 800c260:	481a      	ldr	r0, [pc, #104]	; (800c2cc <tcp_rst+0x9c>)
 800c262:	f003 f81d 	bl	800f2a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c266:	2300      	movs	r3, #0
 800c268:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c26a:	f246 0308 	movw	r3, #24584	; 0x6008
 800c26e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	b29c      	uxth	r4, r3
 800c274:	68b8      	ldr	r0, [r7, #8]
 800c276:	f7f9 fa8a 	bl	800578e <lwip_htonl>
 800c27a:	4602      	mov	r2, r0
 800c27c:	8abb      	ldrh	r3, [r7, #20]
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	2314      	movs	r3, #20
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c286:	9301      	str	r3, [sp, #4]
 800c288:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	4613      	mov	r3, r2
 800c28e:	2200      	movs	r2, #0
 800c290:	4621      	mov	r1, r4
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fe94 	bl	800bfc0 <tcp_output_alloc_header_common>
 800c298:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00c      	beq.n	800c2ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	6939      	ldr	r1, [r7, #16]
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7ff ff3a 	bl	800c120 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	6939      	ldr	r1, [r7, #16]
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7ff ff72 	bl	800c19c <tcp_output_control_segment>
 800c2b8:	e000      	b.n	800c2bc <tcp_rst+0x8c>
    return;
 800c2ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c2bc:	371c      	adds	r7, #28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd90      	pop	{r4, r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0801178c 	.word	0x0801178c
 800c2c8:	08011f10 	.word	0x08011f10
 800c2cc:	080117e0 	.word	0x080117e0
 800c2d0:	08011f2c 	.word	0x08011f2c

0800c2d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c2d4:	b590      	push	{r4, r7, lr}
 800c2d6:	b087      	sub	sp, #28
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d106      	bne.n	800c2f8 <tcp_send_empty_ack+0x24>
 800c2ea:	4b28      	ldr	r3, [pc, #160]	; (800c38c <tcp_send_empty_ack+0xb8>)
 800c2ec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c2f0:	4927      	ldr	r1, [pc, #156]	; (800c390 <tcp_send_empty_ack+0xbc>)
 800c2f2:	4828      	ldr	r0, [pc, #160]	; (800c394 <tcp_send_empty_ack+0xc0>)
 800c2f4:	f002 ffd4 	bl	800f2a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	f003 0304 	and.w	r3, r3, #4
 800c302:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c304:	7d7b      	ldrb	r3, [r7, #21]
 800c306:	b29c      	uxth	r4, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7f9 fa3e 	bl	800578e <lwip_htonl>
 800c312:	4603      	mov	r3, r0
 800c314:	2200      	movs	r2, #0
 800c316:	4621      	mov	r1, r4
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff fec3 	bl	800c0a4 <tcp_output_alloc_header>
 800c31e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d109      	bne.n	800c33a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	8b5b      	ldrh	r3, [r3, #26]
 800c32a:	f043 0303 	orr.w	r3, r3, #3
 800c32e:	b29a      	uxth	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c334:	f06f 0301 	mvn.w	r3, #1
 800c338:	e023      	b.n	800c382 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c33a:	7dbb      	ldrb	r3, [r7, #22]
 800c33c:	7dfa      	ldrb	r2, [r7, #23]
 800c33e:	6939      	ldr	r1, [r7, #16]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff feed 	bl	800c120 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3304      	adds	r3, #4
 800c34c:	6939      	ldr	r1, [r7, #16]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff ff24 	bl	800c19c <tcp_output_control_segment>
 800c354:	4603      	mov	r3, r0
 800c356:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d007      	beq.n	800c370 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	8b5b      	ldrh	r3, [r3, #26]
 800c364:	f043 0303 	orr.w	r3, r3, #3
 800c368:	b29a      	uxth	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	835a      	strh	r2, [r3, #26]
 800c36e:	e006      	b.n	800c37e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	8b5b      	ldrh	r3, [r3, #26]
 800c374:	f023 0303 	bic.w	r3, r3, #3
 800c378:	b29a      	uxth	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c382:	4618      	mov	r0, r3
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	bd90      	pop	{r4, r7, pc}
 800c38a:	bf00      	nop
 800c38c:	0801178c 	.word	0x0801178c
 800c390:	08011f48 	.word	0x08011f48
 800c394:	080117e0 	.word	0x080117e0

0800c398 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c398:	b590      	push	{r4, r7, lr}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d106      	bne.n	800c3b8 <tcp_keepalive+0x20>
 800c3aa:	4b18      	ldr	r3, [pc, #96]	; (800c40c <tcp_keepalive+0x74>)
 800c3ac:	f640 0224 	movw	r2, #2084	; 0x824
 800c3b0:	4917      	ldr	r1, [pc, #92]	; (800c410 <tcp_keepalive+0x78>)
 800c3b2:	4818      	ldr	r0, [pc, #96]	; (800c414 <tcp_keepalive+0x7c>)
 800c3b4:	f002 ff74 	bl	800f2a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	b29c      	uxth	r4, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7f9 f9e3 	bl	800578e <lwip_htonl>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff fe68 	bl	800c0a4 <tcp_output_alloc_header>
 800c3d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d102      	bne.n	800c3e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e0:	e010      	b.n	800c404 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	6939      	ldr	r1, [r7, #16]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff fe99 	bl	800c120 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	6939      	ldr	r1, [r7, #16]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff fed0 	bl	800c19c <tcp_output_control_segment>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c404:	4618      	mov	r0, r3
 800c406:	371c      	adds	r7, #28
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd90      	pop	{r4, r7, pc}
 800c40c:	0801178c 	.word	0x0801178c
 800c410:	08011f68 	.word	0x08011f68
 800c414:	080117e0 	.word	0x080117e0

0800c418 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c418:	b590      	push	{r4, r7, lr}
 800c41a:	b08b      	sub	sp, #44	; 0x2c
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c420:	2300      	movs	r3, #0
 800c422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d106      	bne.n	800c43a <tcp_zero_window_probe+0x22>
 800c42c:	4b4c      	ldr	r3, [pc, #304]	; (800c560 <tcp_zero_window_probe+0x148>)
 800c42e:	f640 024f 	movw	r2, #2127	; 0x84f
 800c432:	494c      	ldr	r1, [pc, #304]	; (800c564 <tcp_zero_window_probe+0x14c>)
 800c434:	484c      	ldr	r0, [pc, #304]	; (800c568 <tcp_zero_window_probe+0x150>)
 800c436:	f002 ff33 	bl	800f2a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c43e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	e086      	b.n	800c558 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c450:	2bff      	cmp	r3, #255	; 0xff
 800c452:	d007      	beq.n	800c464 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c45a:	3301      	adds	r3, #1
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	899b      	ldrh	r3, [r3, #12]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f9 f979 	bl	8005764 <lwip_htons>
 800c472:	4603      	mov	r3, r0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <tcp_zero_window_probe+0x72>
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	891b      	ldrh	r3, [r3, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <tcp_zero_window_probe+0x72>
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <tcp_zero_window_probe+0x74>
 800c48a:	2300      	movs	r3, #0
 800c48c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c48e:	7ffb      	ldrb	r3, [r7, #31]
 800c490:	2b00      	cmp	r3, #0
 800c492:	bf0c      	ite	eq
 800c494:	2301      	moveq	r3, #1
 800c496:	2300      	movne	r3, #0
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a0:	b299      	uxth	r1, r3
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	8bba      	ldrh	r2, [r7, #28]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff fdfa 	bl	800c0a4 <tcp_output_alloc_header>
 800c4b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d102      	bne.n	800c4be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4bc:	e04c      	b.n	800c558 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c4c4:	7ffb      	ldrb	r3, [r7, #31]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d011      	beq.n	800c4ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	899b      	ldrh	r3, [r3, #12]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	b21b      	sxth	r3, r3
 800c4d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c4d6:	b21c      	sxth	r4, r3
 800c4d8:	2011      	movs	r0, #17
 800c4da:	f7f9 f943 	bl	8005764 <lwip_htons>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	b21b      	sxth	r3, r3
 800c4e2:	4323      	orrs	r3, r4
 800c4e4:	b21b      	sxth	r3, r3
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	819a      	strh	r2, [r3, #12]
 800c4ec:	e010      	b.n	800c510 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	3314      	adds	r3, #20
 800c4f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	6858      	ldr	r0, [r3, #4]
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	891a      	ldrh	r2, [r3, #8]
 800c500:	6a3b      	ldr	r3, [r7, #32]
 800c502:	891b      	ldrh	r3, [r3, #8]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	b29b      	uxth	r3, r3
 800c508:	2201      	movs	r2, #1
 800c50a:	6939      	ldr	r1, [r7, #16]
 800c50c:	f7fa fe52 	bl	80071b4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	f7f9 f939 	bl	800578e <lwip_htonl>
 800c51c:	4603      	mov	r3, r0
 800c51e:	3301      	adds	r3, #1
 800c520:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	da02      	bge.n	800c534 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c538:	2200      	movs	r2, #0
 800c53a:	69b9      	ldr	r1, [r7, #24]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff fdef 	bl	800c120 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	3304      	adds	r3, #4
 800c548:	69b9      	ldr	r1, [r7, #24]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff fe26 	bl	800c19c <tcp_output_control_segment>
 800c550:	4603      	mov	r3, r0
 800c552:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c554:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	372c      	adds	r7, #44	; 0x2c
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd90      	pop	{r4, r7, pc}
 800c560:	0801178c 	.word	0x0801178c
 800c564:	08011f84 	.word	0x08011f84
 800c568:	080117e0 	.word	0x080117e0

0800c56c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c574:	f7fa ff0c 	bl	8007390 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c578:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <tcpip_tcp_timer+0x38>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d103      	bne.n	800c588 <tcpip_tcp_timer+0x1c>
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <tcpip_tcp_timer+0x3c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d005      	beq.n	800c594 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c588:	2200      	movs	r2, #0
 800c58a:	4908      	ldr	r1, [pc, #32]	; (800c5ac <tcpip_tcp_timer+0x40>)
 800c58c:	20fa      	movs	r0, #250	; 0xfa
 800c58e:	f000 f8f3 	bl	800c778 <sys_timeout>
 800c592:	e003      	b.n	800c59c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <tcpip_tcp_timer+0x44>)
 800c596:	2200      	movs	r2, #0
 800c598:	601a      	str	r2, [r3, #0]
  }
}
 800c59a:	bf00      	nop
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	200087d8 	.word	0x200087d8
 800c5a8:	200087dc 	.word	0x200087dc
 800c5ac:	0800c56d 	.word	0x0800c56d
 800c5b0:	20008824 	.word	0x20008824

0800c5b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c5b8:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <tcp_timer_needed+0x30>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10f      	bne.n	800c5e0 <tcp_timer_needed+0x2c>
 800c5c0:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <tcp_timer_needed+0x34>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d103      	bne.n	800c5d0 <tcp_timer_needed+0x1c>
 800c5c8:	4b08      	ldr	r3, [pc, #32]	; (800c5ec <tcp_timer_needed+0x38>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d007      	beq.n	800c5e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c5d0:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <tcp_timer_needed+0x30>)
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	4905      	ldr	r1, [pc, #20]	; (800c5f0 <tcp_timer_needed+0x3c>)
 800c5da:	20fa      	movs	r0, #250	; 0xfa
 800c5dc:	f000 f8cc 	bl	800c778 <sys_timeout>
  }
}
 800c5e0:	bf00      	nop
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20008824 	.word	0x20008824
 800c5e8:	200087d8 	.word	0x200087d8
 800c5ec:	200087dc 	.word	0x200087dc
 800c5f0:	0800c56d 	.word	0x0800c56d

0800c5f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c600:	2006      	movs	r0, #6
 800c602:	f7f9 fd27 	bl	8006054 <memp_malloc>
 800c606:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d151      	bne.n	800c6b8 <sys_timeout_abs+0xc4>
 800c614:	4b2a      	ldr	r3, [pc, #168]	; (800c6c0 <sys_timeout_abs+0xcc>)
 800c616:	22be      	movs	r2, #190	; 0xbe
 800c618:	492a      	ldr	r1, [pc, #168]	; (800c6c4 <sys_timeout_abs+0xd0>)
 800c61a:	482b      	ldr	r0, [pc, #172]	; (800c6c8 <sys_timeout_abs+0xd4>)
 800c61c:	f002 fe40 	bl	800f2a0 <iprintf>
    return;
 800c620:	e04a      	b.n	800c6b8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	2200      	movs	r2, #0
 800c626:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c63a:	4b24      	ldr	r3, [pc, #144]	; (800c6cc <sys_timeout_abs+0xd8>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c642:	4a22      	ldr	r2, [pc, #136]	; (800c6cc <sys_timeout_abs+0xd8>)
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	6013      	str	r3, [r2, #0]
    return;
 800c648:	e037      	b.n	800c6ba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	4b1f      	ldr	r3, [pc, #124]	; (800c6cc <sys_timeout_abs+0xd8>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	0fdb      	lsrs	r3, r3, #31
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d007      	beq.n	800c672 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c662:	4b1a      	ldr	r3, [pc, #104]	; (800c6cc <sys_timeout_abs+0xd8>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c66a:	4a18      	ldr	r2, [pc, #96]	; (800c6cc <sys_timeout_abs+0xd8>)
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	e023      	b.n	800c6ba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c672:	4b16      	ldr	r3, [pc, #88]	; (800c6cc <sys_timeout_abs+0xd8>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	e01a      	b.n	800c6b0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00b      	beq.n	800c69a <sys_timeout_abs+0xa6>
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	0fdb      	lsrs	r3, r3, #31
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	b2db      	uxtb	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d007      	beq.n	800c6aa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	601a      	str	r2, [r3, #0]
        break;
 800c6a8:	e007      	b.n	800c6ba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	617b      	str	r3, [r7, #20]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e1      	bne.n	800c67a <sys_timeout_abs+0x86>
 800c6b6:	e000      	b.n	800c6ba <sys_timeout_abs+0xc6>
    return;
 800c6b8:	bf00      	nop
      }
    }
  }
}
 800c6ba:	3718      	adds	r7, #24
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	08011fa8 	.word	0x08011fa8
 800c6c4:	08011fdc 	.word	0x08011fdc
 800c6c8:	0801201c 	.word	0x0801201c
 800c6cc:	2000881c 	.word	0x2000881c

0800c6d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4798      	blx	r3

  now = sys_now();
 800c6e2:	f7f8 fe23 	bl	800532c <sys_now>
 800c6e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <lwip_cyclic_timer+0x5c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	0fdb      	lsrs	r3, r3, #31
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	4413      	add	r3, r2
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	4907      	ldr	r1, [pc, #28]	; (800c730 <lwip_cyclic_timer+0x60>)
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff ff6e 	bl	800c5f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c718:	e004      	b.n	800c724 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	4904      	ldr	r1, [pc, #16]	; (800c730 <lwip_cyclic_timer+0x60>)
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7ff ff68 	bl	800c5f4 <sys_timeout_abs>
}
 800c724:	bf00      	nop
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20008820 	.word	0x20008820
 800c730:	0800c6d1 	.word	0x0800c6d1

0800c734 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c73a:	2301      	movs	r3, #1
 800c73c:	607b      	str	r3, [r7, #4]
 800c73e:	e00e      	b.n	800c75e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c740:	4a0b      	ldr	r2, [pc, #44]	; (800c770 <sys_timeouts_init+0x3c>)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	4a08      	ldr	r2, [pc, #32]	; (800c770 <sys_timeouts_init+0x3c>)
 800c74e:	4413      	add	r3, r2
 800c750:	461a      	mov	r2, r3
 800c752:	4908      	ldr	r1, [pc, #32]	; (800c774 <sys_timeouts_init+0x40>)
 800c754:	f000 f810 	bl	800c778 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3301      	adds	r3, #1
 800c75c:	607b      	str	r3, [r7, #4]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d9ed      	bls.n	800c740 <sys_timeouts_init+0xc>
  }
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	08012b94 	.word	0x08012b94
 800c774:	0800c6d1 	.word	0x0800c6d1

0800c778 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c78a:	d306      	bcc.n	800c79a <sys_timeout+0x22>
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <sys_timeout+0x40>)
 800c78e:	f240 1229 	movw	r2, #297	; 0x129
 800c792:	490a      	ldr	r1, [pc, #40]	; (800c7bc <sys_timeout+0x44>)
 800c794:	480a      	ldr	r0, [pc, #40]	; (800c7c0 <sys_timeout+0x48>)
 800c796:	f002 fd83 	bl	800f2a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c79a:	f7f8 fdc7 	bl	800532c <sys_now>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68b9      	ldr	r1, [r7, #8]
 800c7aa:	6978      	ldr	r0, [r7, #20]
 800c7ac:	f7ff ff22 	bl	800c5f4 <sys_timeout_abs>
#endif
}
 800c7b0:	bf00      	nop
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	08011fa8 	.word	0x08011fa8
 800c7bc:	08012044 	.word	0x08012044
 800c7c0:	0801201c 	.word	0x0801201c

0800c7c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c7c8:	f002 fc7c 	bl	800f0c4 <rand>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	4b01      	ldr	r3, [pc, #4]	; (800c7e4 <udp_init+0x20>)
 800c7de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c7e0:	bf00      	nop
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20000028 	.word	0x20000028

0800c7e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d105      	bne.n	800c808 <udp_input_local_match+0x20>
 800c7fc:	4b27      	ldr	r3, [pc, #156]	; (800c89c <udp_input_local_match+0xb4>)
 800c7fe:	2287      	movs	r2, #135	; 0x87
 800c800:	4927      	ldr	r1, [pc, #156]	; (800c8a0 <udp_input_local_match+0xb8>)
 800c802:	4828      	ldr	r0, [pc, #160]	; (800c8a4 <udp_input_local_match+0xbc>)
 800c804:	f002 fd4c 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d105      	bne.n	800c81a <udp_input_local_match+0x32>
 800c80e:	4b23      	ldr	r3, [pc, #140]	; (800c89c <udp_input_local_match+0xb4>)
 800c810:	2288      	movs	r2, #136	; 0x88
 800c812:	4925      	ldr	r1, [pc, #148]	; (800c8a8 <udp_input_local_match+0xc0>)
 800c814:	4823      	ldr	r0, [pc, #140]	; (800c8a4 <udp_input_local_match+0xbc>)
 800c816:	f002 fd43 	bl	800f2a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	7a1b      	ldrb	r3, [r3, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00b      	beq.n	800c83a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	7a1a      	ldrb	r2, [r3, #8]
 800c826:	4b21      	ldr	r3, [pc, #132]	; (800c8ac <udp_input_local_match+0xc4>)
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c82e:	3301      	adds	r3, #1
 800c830:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c832:	429a      	cmp	r2, r3
 800c834:	d001      	beq.n	800c83a <udp_input_local_match+0x52>
    return 0;
 800c836:	2300      	movs	r3, #0
 800c838:	e02b      	b.n	800c892 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c83a:	79fb      	ldrb	r3, [r7, #7]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d018      	beq.n	800c872 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d013      	beq.n	800c86e <udp_input_local_match+0x86>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00f      	beq.n	800c86e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c84e:	4b17      	ldr	r3, [pc, #92]	; (800c8ac <udp_input_local_match+0xc4>)
 800c850:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c856:	d00a      	beq.n	800c86e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	4b13      	ldr	r3, [pc, #76]	; (800c8ac <udp_input_local_match+0xc4>)
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	405a      	eors	r2, r3
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	3308      	adds	r3, #8
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d110      	bne.n	800c890 <udp_input_local_match+0xa8>
          return 1;
 800c86e:	2301      	movs	r3, #1
 800c870:	e00f      	b.n	800c892 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d009      	beq.n	800c88c <udp_input_local_match+0xa4>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d005      	beq.n	800c88c <udp_input_local_match+0xa4>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	4b09      	ldr	r3, [pc, #36]	; (800c8ac <udp_input_local_match+0xc4>)
 800c886:	695b      	ldr	r3, [r3, #20]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d101      	bne.n	800c890 <udp_input_local_match+0xa8>
        return 1;
 800c88c:	2301      	movs	r3, #1
 800c88e:	e000      	b.n	800c892 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	08012090 	.word	0x08012090
 800c8a0:	080120c0 	.word	0x080120c0
 800c8a4:	080120e4 	.word	0x080120e4
 800c8a8:	0801210c 	.word	0x0801210c
 800c8ac:	2000525c 	.word	0x2000525c

0800c8b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c8b0:	b590      	push	{r4, r7, lr}
 800c8b2:	b08d      	sub	sp, #52	; 0x34
 800c8b4:	af02      	add	r7, sp, #8
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d105      	bne.n	800c8d0 <udp_input+0x20>
 800c8c4:	4b7c      	ldr	r3, [pc, #496]	; (800cab8 <udp_input+0x208>)
 800c8c6:	22cf      	movs	r2, #207	; 0xcf
 800c8c8:	497c      	ldr	r1, [pc, #496]	; (800cabc <udp_input+0x20c>)
 800c8ca:	487d      	ldr	r0, [pc, #500]	; (800cac0 <udp_input+0x210>)
 800c8cc:	f002 fce8 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d105      	bne.n	800c8e2 <udp_input+0x32>
 800c8d6:	4b78      	ldr	r3, [pc, #480]	; (800cab8 <udp_input+0x208>)
 800c8d8:	22d0      	movs	r2, #208	; 0xd0
 800c8da:	497a      	ldr	r1, [pc, #488]	; (800cac4 <udp_input+0x214>)
 800c8dc:	4878      	ldr	r0, [pc, #480]	; (800cac0 <udp_input+0x210>)
 800c8de:	f002 fcdf 	bl	800f2a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	895b      	ldrh	r3, [r3, #10]
 800c8e6:	2b07      	cmp	r3, #7
 800c8e8:	d803      	bhi.n	800c8f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7fa fa78 	bl	8006de0 <pbuf_free>
    goto end;
 800c8f0:	e0de      	b.n	800cab0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c8f8:	4b73      	ldr	r3, [pc, #460]	; (800cac8 <udp_input+0x218>)
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	4a72      	ldr	r2, [pc, #456]	; (800cac8 <udp_input+0x218>)
 800c8fe:	6812      	ldr	r2, [r2, #0]
 800c900:	4611      	mov	r1, r2
 800c902:	4618      	mov	r0, r3
 800c904:	f001 fc88 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800c908:	4603      	mov	r3, r0
 800c90a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	b29b      	uxth	r3, r3
 800c912:	4618      	mov	r0, r3
 800c914:	f7f8 ff26 	bl	8005764 <lwip_htons>
 800c918:	4603      	mov	r3, r0
 800c91a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	885b      	ldrh	r3, [r3, #2]
 800c920:	b29b      	uxth	r3, r3
 800c922:	4618      	mov	r0, r3
 800c924:	f7f8 ff1e 	bl	8005764 <lwip_htons>
 800c928:	4603      	mov	r3, r0
 800c92a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c92c:	2300      	movs	r3, #0
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c930:	2300      	movs	r3, #0
 800c932:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c938:	4b64      	ldr	r3, [pc, #400]	; (800cacc <udp_input+0x21c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
 800c93e:	e054      	b.n	800c9ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	8a5b      	ldrh	r3, [r3, #18]
 800c944:	89fa      	ldrh	r2, [r7, #14]
 800c946:	429a      	cmp	r2, r3
 800c948:	d14a      	bne.n	800c9e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c94a:	7cfb      	ldrb	r3, [r7, #19]
 800c94c:	461a      	mov	r2, r3
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c952:	f7ff ff49 	bl	800c7e8 <udp_input_local_match>
 800c956:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d041      	beq.n	800c9e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	7c1b      	ldrb	r3, [r3, #16]
 800c960:	f003 0304 	and.w	r3, r3, #4
 800c964:	2b00      	cmp	r3, #0
 800c966:	d11d      	bne.n	800c9a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	61fb      	str	r3, [r7, #28]
 800c972:	e017      	b.n	800c9a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c974:	7cfb      	ldrb	r3, [r7, #19]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d014      	beq.n	800c9a4 <udp_input+0xf4>
 800c97a:	4b53      	ldr	r3, [pc, #332]	; (800cac8 <udp_input+0x218>)
 800c97c:	695b      	ldr	r3, [r3, #20]
 800c97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c982:	d10f      	bne.n	800c9a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	3304      	adds	r3, #4
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d008      	beq.n	800c9a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	3304      	adds	r3, #4
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d101      	bne.n	800c9a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	8a9b      	ldrh	r3, [r3, #20]
 800c9a8:	8a3a      	ldrh	r2, [r7, #16]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d118      	bne.n	800c9e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d005      	beq.n	800c9c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	4b43      	ldr	r3, [pc, #268]	; (800cac8 <udp_input+0x218>)
 800c9bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d10e      	bne.n	800c9e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c9c2:	6a3b      	ldr	r3, [r7, #32]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d014      	beq.n	800c9f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	68da      	ldr	r2, [r3, #12]
 800c9cc:	6a3b      	ldr	r3, [r7, #32]
 800c9ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c9d0:	4b3e      	ldr	r3, [pc, #248]	; (800cacc <udp_input+0x21c>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c9d8:	4a3c      	ldr	r2, [pc, #240]	; (800cacc <udp_input+0x21c>)
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c9de:	e008      	b.n	800c9f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1a7      	bne.n	800c940 <udp_input+0x90>
 800c9f0:	e000      	b.n	800c9f4 <udp_input+0x144>
        break;
 800c9f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <udp_input+0x14e>
    pcb = uncon_pcb;
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <udp_input+0x15a>
    for_us = 1;
 800ca04:	2301      	movs	r3, #1
 800ca06:	76fb      	strb	r3, [r7, #27]
 800ca08:	e00a      	b.n	800ca20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	4b2d      	ldr	r3, [pc, #180]	; (800cac8 <udp_input+0x218>)
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	bf0c      	ite	eq
 800ca18:	2301      	moveq	r3, #1
 800ca1a:	2300      	movne	r3, #0
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ca20:	7efb      	ldrb	r3, [r7, #27]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d041      	beq.n	800caaa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ca26:	2108      	movs	r1, #8
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7fa f953 	bl	8006cd4 <pbuf_remove_header>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00a      	beq.n	800ca4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ca34:	4b20      	ldr	r3, [pc, #128]	; (800cab8 <udp_input+0x208>)
 800ca36:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ca3a:	4925      	ldr	r1, [pc, #148]	; (800cad0 <udp_input+0x220>)
 800ca3c:	4820      	ldr	r0, [pc, #128]	; (800cac0 <udp_input+0x210>)
 800ca3e:	f002 fc2f 	bl	800f2a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7fa f9cc 	bl	8006de0 <pbuf_free>
      goto end;
 800ca48:	e032      	b.n	800cab0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d012      	beq.n	800ca76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00a      	beq.n	800ca6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5a:	699c      	ldr	r4, [r3, #24]
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	69d8      	ldr	r0, [r3, #28]
 800ca60:	8a3b      	ldrh	r3, [r7, #16]
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	4b1b      	ldr	r3, [pc, #108]	; (800cad4 <udp_input+0x224>)
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ca6c:	e021      	b.n	800cab2 <udp_input+0x202>
        pbuf_free(p);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7fa f9b6 	bl	8006de0 <pbuf_free>
        goto end;
 800ca74:	e01c      	b.n	800cab0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ca76:	7cfb      	ldrb	r3, [r7, #19]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d112      	bne.n	800caa2 <udp_input+0x1f2>
 800ca7c:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <udp_input+0x218>)
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca84:	2be0      	cmp	r3, #224	; 0xe0
 800ca86:	d00c      	beq.n	800caa2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ca88:	4b0f      	ldr	r3, [pc, #60]	; (800cac8 <udp_input+0x218>)
 800ca8a:	899b      	ldrh	r3, [r3, #12]
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	b21b      	sxth	r3, r3
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7fa f990 	bl	8006dba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ca9a:	2103      	movs	r1, #3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 f89b 	bl	800dbd8 <icmp_dest_unreach>
      pbuf_free(p);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7fa f99c 	bl	8006de0 <pbuf_free>
  return;
 800caa8:	e003      	b.n	800cab2 <udp_input+0x202>
    pbuf_free(p);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7fa f998 	bl	8006de0 <pbuf_free>
  return;
 800cab0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cab2:	372c      	adds	r7, #44	; 0x2c
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd90      	pop	{r4, r7, pc}
 800cab8:	08012090 	.word	0x08012090
 800cabc:	08012134 	.word	0x08012134
 800cac0:	080120e4 	.word	0x080120e4
 800cac4:	0801214c 	.word	0x0801214c
 800cac8:	2000525c 	.word	0x2000525c
 800cacc:	20008828 	.word	0x20008828
 800cad0:	08012168 	.word	0x08012168
 800cad4:	2000526c 	.word	0x2000526c

0800cad8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01e      	beq.n	800cb26 <udp_netif_ip_addr_changed+0x4e>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d01a      	beq.n	800cb26 <udp_netif_ip_addr_changed+0x4e>
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d017      	beq.n	800cb26 <udp_netif_ip_addr_changed+0x4e>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d013      	beq.n	800cb26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cafe:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <udp_netif_ip_addr_changed+0x5c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	e00c      	b.n	800cb20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d103      	bne.n	800cb1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	60fb      	str	r3, [r7, #12]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1ef      	bne.n	800cb06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cb26:	bf00      	nop
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	20008828 	.word	0x20008828

0800cb38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cb40:	4915      	ldr	r1, [pc, #84]	; (800cb98 <etharp_free_entry+0x60>)
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	4613      	mov	r3, r2
 800cb46:	005b      	lsls	r3, r3, #1
 800cb48:	4413      	add	r3, r2
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	440b      	add	r3, r1
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d013      	beq.n	800cb7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cb54:	4910      	ldr	r1, [pc, #64]	; (800cb98 <etharp_free_entry+0x60>)
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	440b      	add	r3, r1
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7fa f93b 	bl	8006de0 <pbuf_free>
    arp_table[i].q = NULL;
 800cb6a:	490b      	ldr	r1, [pc, #44]	; (800cb98 <etharp_free_entry+0x60>)
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	4413      	add	r3, r2
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	440b      	add	r3, r1
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cb7c:	4906      	ldr	r1, [pc, #24]	; (800cb98 <etharp_free_entry+0x60>)
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	4613      	mov	r3, r2
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	4413      	add	r3, r2
 800cb86:	00db      	lsls	r3, r3, #3
 800cb88:	440b      	add	r3, r1
 800cb8a:	3314      	adds	r3, #20
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cb90:	bf00      	nop
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	2000882c 	.word	0x2000882c

0800cb9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cba2:	2300      	movs	r3, #0
 800cba4:	607b      	str	r3, [r7, #4]
 800cba6:	e096      	b.n	800ccd6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cba8:	494f      	ldr	r1, [pc, #316]	; (800cce8 <etharp_tmr+0x14c>)
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	4613      	mov	r3, r2
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	4413      	add	r3, r2
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	440b      	add	r3, r1
 800cbb6:	3314      	adds	r3, #20
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cbbc:	78fb      	ldrb	r3, [r7, #3]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f000 8086 	beq.w	800ccd0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cbc4:	4948      	ldr	r1, [pc, #288]	; (800cce8 <etharp_tmr+0x14c>)
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	4413      	add	r3, r2
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	440b      	add	r3, r1
 800cbd2:	3312      	adds	r3, #18
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	b298      	uxth	r0, r3
 800cbda:	4943      	ldr	r1, [pc, #268]	; (800cce8 <etharp_tmr+0x14c>)
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3312      	adds	r3, #18
 800cbea:	4602      	mov	r2, r0
 800cbec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cbee:	493e      	ldr	r1, [pc, #248]	; (800cce8 <etharp_tmr+0x14c>)
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	440b      	add	r3, r1
 800cbfc:	3312      	adds	r3, #18
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cc04:	d215      	bcs.n	800cc32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc06:	4938      	ldr	r1, [pc, #224]	; (800cce8 <etharp_tmr+0x14c>)
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	3314      	adds	r3, #20
 800cc16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d10e      	bne.n	800cc3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cc1c:	4932      	ldr	r1, [pc, #200]	; (800cce8 <etharp_tmr+0x14c>)
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	4613      	mov	r3, r2
 800cc22:	005b      	lsls	r3, r3, #1
 800cc24:	4413      	add	r3, r2
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	440b      	add	r3, r1
 800cc2a:	3312      	adds	r3, #18
 800cc2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc2e:	2b04      	cmp	r3, #4
 800cc30:	d903      	bls.n	800cc3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff ff80 	bl	800cb38 <etharp_free_entry>
 800cc38:	e04a      	b.n	800ccd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cc3a:	492b      	ldr	r1, [pc, #172]	; (800cce8 <etharp_tmr+0x14c>)
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	4413      	add	r3, r2
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	440b      	add	r3, r1
 800cc48:	3314      	adds	r3, #20
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	2b03      	cmp	r3, #3
 800cc4e:	d10a      	bne.n	800cc66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cc50:	4925      	ldr	r1, [pc, #148]	; (800cce8 <etharp_tmr+0x14c>)
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	4613      	mov	r3, r2
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	4413      	add	r3, r2
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	440b      	add	r3, r1
 800cc5e:	3314      	adds	r3, #20
 800cc60:	2204      	movs	r2, #4
 800cc62:	701a      	strb	r2, [r3, #0]
 800cc64:	e034      	b.n	800ccd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cc66:	4920      	ldr	r1, [pc, #128]	; (800cce8 <etharp_tmr+0x14c>)
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	005b      	lsls	r3, r3, #1
 800cc6e:	4413      	add	r3, r2
 800cc70:	00db      	lsls	r3, r3, #3
 800cc72:	440b      	add	r3, r1
 800cc74:	3314      	adds	r3, #20
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d10a      	bne.n	800cc92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cc7c:	491a      	ldr	r1, [pc, #104]	; (800cce8 <etharp_tmr+0x14c>)
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	4613      	mov	r3, r2
 800cc82:	005b      	lsls	r3, r3, #1
 800cc84:	4413      	add	r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	440b      	add	r3, r1
 800cc8a:	3314      	adds	r3, #20
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	e01e      	b.n	800ccd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cc92:	4915      	ldr	r1, [pc, #84]	; (800cce8 <etharp_tmr+0x14c>)
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	4613      	mov	r3, r2
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	4413      	add	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	440b      	add	r3, r1
 800cca0:	3314      	adds	r3, #20
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d113      	bne.n	800ccd0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cca8:	490f      	ldr	r1, [pc, #60]	; (800cce8 <etharp_tmr+0x14c>)
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	4613      	mov	r3, r2
 800ccae:	005b      	lsls	r3, r3, #1
 800ccb0:	4413      	add	r3, r2
 800ccb2:	00db      	lsls	r3, r3, #3
 800ccb4:	440b      	add	r3, r1
 800ccb6:	3308      	adds	r3, #8
 800ccb8:	6818      	ldr	r0, [r3, #0]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	005b      	lsls	r3, r3, #1
 800ccc0:	4413      	add	r3, r2
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	4a08      	ldr	r2, [pc, #32]	; (800cce8 <etharp_tmr+0x14c>)
 800ccc6:	4413      	add	r3, r2
 800ccc8:	3304      	adds	r3, #4
 800ccca:	4619      	mov	r1, r3
 800cccc:	f000 fe6e 	bl	800d9ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	607b      	str	r3, [r7, #4]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b09      	cmp	r3, #9
 800ccda:	f77f af65 	ble.w	800cba8 <etharp_tmr+0xc>
      }
    }
  }
}
 800ccde:	bf00      	nop
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	2000882c 	.word	0x2000882c

0800ccec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08a      	sub	sp, #40	; 0x28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	607a      	str	r2, [r7, #4]
 800ccf8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ccfa:	230a      	movs	r3, #10
 800ccfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ccfe:	230a      	movs	r3, #10
 800cd00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cd02:	230a      	movs	r3, #10
 800cd04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cd0a:	230a      	movs	r3, #10
 800cd0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	83bb      	strh	r3, [r7, #28]
 800cd12:	2300      	movs	r3, #0
 800cd14:	837b      	strh	r3, [r7, #26]
 800cd16:	2300      	movs	r3, #0
 800cd18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	843b      	strh	r3, [r7, #32]
 800cd1e:	e0ae      	b.n	800ce7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cd20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd24:	49a6      	ldr	r1, [pc, #664]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cd26:	4613      	mov	r3, r2
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	4413      	add	r3, r2
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	440b      	add	r3, r1
 800cd30:	3314      	adds	r3, #20
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cd36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd3a:	2b0a      	cmp	r3, #10
 800cd3c:	d105      	bne.n	800cd4a <etharp_find_entry+0x5e>
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d102      	bne.n	800cd4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cd44:	8c3b      	ldrh	r3, [r7, #32]
 800cd46:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd48:	e095      	b.n	800ce76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 8092 	beq.w	800ce76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d009      	beq.n	800cd6c <etharp_find_entry+0x80>
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d806      	bhi.n	800cd6c <etharp_find_entry+0x80>
 800cd5e:	4b99      	ldr	r3, [pc, #612]	; (800cfc4 <etharp_find_entry+0x2d8>)
 800cd60:	f240 1223 	movw	r2, #291	; 0x123
 800cd64:	4998      	ldr	r1, [pc, #608]	; (800cfc8 <etharp_find_entry+0x2dc>)
 800cd66:	4899      	ldr	r0, [pc, #612]	; (800cfcc <etharp_find_entry+0x2e0>)
 800cd68:	f002 fa9a 	bl	800f2a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d020      	beq.n	800cdb4 <etharp_find_entry+0xc8>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6819      	ldr	r1, [r3, #0]
 800cd76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd7a:	4891      	ldr	r0, [pc, #580]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	4413      	add	r3, r2
 800cd82:	00db      	lsls	r3, r3, #3
 800cd84:	4403      	add	r3, r0
 800cd86:	3304      	adds	r3, #4
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4299      	cmp	r1, r3
 800cd8c:	d112      	bne.n	800cdb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00c      	beq.n	800cdae <etharp_find_entry+0xc2>
 800cd94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd98:	4989      	ldr	r1, [pc, #548]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	4413      	add	r3, r2
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	440b      	add	r3, r1
 800cda4:	3308      	adds	r3, #8
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d102      	bne.n	800cdb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cdae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cdb2:	e100      	b.n	800cfb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d140      	bne.n	800ce3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cdba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdbe:	4980      	ldr	r1, [pc, #512]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	4413      	add	r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	440b      	add	r3, r1
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01a      	beq.n	800ce06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cdd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdd4:	497a      	ldr	r1, [pc, #488]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3312      	adds	r3, #18
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	8bba      	ldrh	r2, [r7, #28]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d845      	bhi.n	800ce76 <etharp_find_entry+0x18a>
            old_queue = i;
 800cdea:	8c3b      	ldrh	r3, [r7, #32]
 800cdec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cdee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdf2:	4973      	ldr	r1, [pc, #460]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3312      	adds	r3, #18
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	83bb      	strh	r3, [r7, #28]
 800ce04:	e037      	b.n	800ce76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ce06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce0a:	496d      	ldr	r1, [pc, #436]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	4413      	add	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	440b      	add	r3, r1
 800ce16:	3312      	adds	r3, #18
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	8b7a      	ldrh	r2, [r7, #26]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d82a      	bhi.n	800ce76 <etharp_find_entry+0x18a>
            old_pending = i;
 800ce20:	8c3b      	ldrh	r3, [r7, #32]
 800ce22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ce24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce28:	4965      	ldr	r1, [pc, #404]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	005b      	lsls	r3, r3, #1
 800ce2e:	4413      	add	r3, r2
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	440b      	add	r3, r1
 800ce34:	3312      	adds	r3, #18
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	837b      	strh	r3, [r7, #26]
 800ce3a:	e01c      	b.n	800ce76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d919      	bls.n	800ce76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ce42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce46:	495e      	ldr	r1, [pc, #376]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800ce48:	4613      	mov	r3, r2
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	4413      	add	r3, r2
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	440b      	add	r3, r1
 800ce52:	3312      	adds	r3, #18
 800ce54:	881b      	ldrh	r3, [r3, #0]
 800ce56:	8b3a      	ldrh	r2, [r7, #24]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d80c      	bhi.n	800ce76 <etharp_find_entry+0x18a>
            old_stable = i;
 800ce5c:	8c3b      	ldrh	r3, [r7, #32]
 800ce5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ce60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce64:	4956      	ldr	r1, [pc, #344]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800ce66:	4613      	mov	r3, r2
 800ce68:	005b      	lsls	r3, r3, #1
 800ce6a:	4413      	add	r3, r2
 800ce6c:	00db      	lsls	r3, r3, #3
 800ce6e:	440b      	add	r3, r1
 800ce70:	3312      	adds	r3, #18
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce76:	8c3b      	ldrh	r3, [r7, #32]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	843b      	strh	r3, [r7, #32]
 800ce7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce82:	2b09      	cmp	r3, #9
 800ce84:	f77f af4c 	ble.w	800cd20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ce88:	7afb      	ldrb	r3, [r7, #11]
 800ce8a:	f003 0302 	and.w	r3, r3, #2
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d108      	bne.n	800cea4 <etharp_find_entry+0x1b8>
 800ce92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ce96:	2b0a      	cmp	r3, #10
 800ce98:	d107      	bne.n	800ceaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ce9a:	7afb      	ldrb	r3, [r7, #11]
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d102      	bne.n	800ceaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295
 800cea8:	e085      	b.n	800cfb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ceaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ceae:	2b09      	cmp	r3, #9
 800ceb0:	dc02      	bgt.n	800ceb8 <etharp_find_entry+0x1cc>
    i = empty;
 800ceb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceb4:	843b      	strh	r3, [r7, #32]
 800ceb6:	e039      	b.n	800cf2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ceb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cebc:	2b09      	cmp	r3, #9
 800cebe:	dc14      	bgt.n	800ceea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cec4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cec8:	493d      	ldr	r1, [pc, #244]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800ceca:	4613      	mov	r3, r2
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	4413      	add	r3, r2
 800ced0:	00db      	lsls	r3, r3, #3
 800ced2:	440b      	add	r3, r1
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d018      	beq.n	800cf0c <etharp_find_entry+0x220>
 800ceda:	4b3a      	ldr	r3, [pc, #232]	; (800cfc4 <etharp_find_entry+0x2d8>)
 800cedc:	f240 126d 	movw	r2, #365	; 0x16d
 800cee0:	493b      	ldr	r1, [pc, #236]	; (800cfd0 <etharp_find_entry+0x2e4>)
 800cee2:	483a      	ldr	r0, [pc, #232]	; (800cfcc <etharp_find_entry+0x2e0>)
 800cee4:	f002 f9dc 	bl	800f2a0 <iprintf>
 800cee8:	e010      	b.n	800cf0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ceea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ceee:	2b09      	cmp	r3, #9
 800cef0:	dc02      	bgt.n	800cef8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cef4:	843b      	strh	r3, [r7, #32]
 800cef6:	e009      	b.n	800cf0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cef8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cefc:	2b09      	cmp	r3, #9
 800cefe:	dc02      	bgt.n	800cf06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cf00:	8bfb      	ldrh	r3, [r7, #30]
 800cf02:	843b      	strh	r3, [r7, #32]
 800cf04:	e002      	b.n	800cf0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cf06:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0a:	e054      	b.n	800cfb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf10:	2b09      	cmp	r3, #9
 800cf12:	dd06      	ble.n	800cf22 <etharp_find_entry+0x236>
 800cf14:	4b2b      	ldr	r3, [pc, #172]	; (800cfc4 <etharp_find_entry+0x2d8>)
 800cf16:	f240 127f 	movw	r2, #383	; 0x17f
 800cf1a:	492e      	ldr	r1, [pc, #184]	; (800cfd4 <etharp_find_entry+0x2e8>)
 800cf1c:	482b      	ldr	r0, [pc, #172]	; (800cfcc <etharp_find_entry+0x2e0>)
 800cf1e:	f002 f9bf 	bl	800f2a0 <iprintf>
    etharp_free_entry(i);
 800cf22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7ff fe06 	bl	800cb38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf30:	2b09      	cmp	r3, #9
 800cf32:	dd06      	ble.n	800cf42 <etharp_find_entry+0x256>
 800cf34:	4b23      	ldr	r3, [pc, #140]	; (800cfc4 <etharp_find_entry+0x2d8>)
 800cf36:	f240 1283 	movw	r2, #387	; 0x183
 800cf3a:	4926      	ldr	r1, [pc, #152]	; (800cfd4 <etharp_find_entry+0x2e8>)
 800cf3c:	4823      	ldr	r0, [pc, #140]	; (800cfcc <etharp_find_entry+0x2e0>)
 800cf3e:	f002 f9af 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cf42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf46:	491e      	ldr	r1, [pc, #120]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cf48:	4613      	mov	r3, r2
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	4413      	add	r3, r2
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	440b      	add	r3, r1
 800cf52:	3314      	adds	r3, #20
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d006      	beq.n	800cf68 <etharp_find_entry+0x27c>
 800cf5a:	4b1a      	ldr	r3, [pc, #104]	; (800cfc4 <etharp_find_entry+0x2d8>)
 800cf5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cf60:	491d      	ldr	r1, [pc, #116]	; (800cfd8 <etharp_find_entry+0x2ec>)
 800cf62:	481a      	ldr	r0, [pc, #104]	; (800cfcc <etharp_find_entry+0x2e0>)
 800cf64:	f002 f99c 	bl	800f2a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00b      	beq.n	800cf86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cf6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	4812      	ldr	r0, [pc, #72]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cf78:	4613      	mov	r3, r2
 800cf7a:	005b      	lsls	r3, r3, #1
 800cf7c:	4413      	add	r3, r2
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	4403      	add	r3, r0
 800cf82:	3304      	adds	r3, #4
 800cf84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cf86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf8a:	490d      	ldr	r1, [pc, #52]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	440b      	add	r3, r1
 800cf96:	3312      	adds	r3, #18
 800cf98:	2200      	movs	r2, #0
 800cf9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cf9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfa0:	4907      	ldr	r1, [pc, #28]	; (800cfc0 <etharp_find_entry+0x2d4>)
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	005b      	lsls	r3, r3, #1
 800cfa6:	4413      	add	r3, r2
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	440b      	add	r3, r1
 800cfac:	3308      	adds	r3, #8
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cfb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3728      	adds	r7, #40	; 0x28
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	2000882c 	.word	0x2000882c
 800cfc4:	080123f4 	.word	0x080123f4
 800cfc8:	0801242c 	.word	0x0801242c
 800cfcc:	0801246c 	.word	0x0801246c
 800cfd0:	08012494 	.word	0x08012494
 800cfd4:	080124ac 	.word	0x080124ac
 800cfd8:	080124c0 	.word	0x080124c0

0800cfdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b088      	sub	sp, #32
 800cfe0:	af02      	add	r7, sp, #8
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cff0:	2b06      	cmp	r3, #6
 800cff2:	d006      	beq.n	800d002 <etharp_update_arp_entry+0x26>
 800cff4:	4b48      	ldr	r3, [pc, #288]	; (800d118 <etharp_update_arp_entry+0x13c>)
 800cff6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cffa:	4948      	ldr	r1, [pc, #288]	; (800d11c <etharp_update_arp_entry+0x140>)
 800cffc:	4848      	ldr	r0, [pc, #288]	; (800d120 <etharp_update_arp_entry+0x144>)
 800cffe:	f002 f94f 	bl	800f2a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d012      	beq.n	800d02e <etharp_update_arp_entry+0x52>
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00e      	beq.n	800d02e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68f9      	ldr	r1, [r7, #12]
 800d016:	4618      	mov	r0, r3
 800d018:	f001 f8fe 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800d01c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d105      	bne.n	800d02e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d02a:	2be0      	cmp	r3, #224	; 0xe0
 800d02c:	d102      	bne.n	800d034 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d02e:	f06f 030f 	mvn.w	r3, #15
 800d032:	e06c      	b.n	800d10e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	4619      	mov	r1, r3
 800d03a:	68b8      	ldr	r0, [r7, #8]
 800d03c:	f7ff fe56 	bl	800ccec <etharp_find_entry>
 800d040:	4603      	mov	r3, r0
 800d042:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d044:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	da02      	bge.n	800d052 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d04c:	8afb      	ldrh	r3, [r7, #22]
 800d04e:	b25b      	sxtb	r3, r3
 800d050:	e05d      	b.n	800d10e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d052:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d056:	4933      	ldr	r1, [pc, #204]	; (800d124 <etharp_update_arp_entry+0x148>)
 800d058:	4613      	mov	r3, r2
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	4413      	add	r3, r2
 800d05e:	00db      	lsls	r3, r3, #3
 800d060:	440b      	add	r3, r1
 800d062:	3314      	adds	r3, #20
 800d064:	2202      	movs	r2, #2
 800d066:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d068:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d06c:	492d      	ldr	r1, [pc, #180]	; (800d124 <etharp_update_arp_entry+0x148>)
 800d06e:	4613      	mov	r3, r2
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	4413      	add	r3, r2
 800d074:	00db      	lsls	r3, r3, #3
 800d076:	440b      	add	r3, r1
 800d078:	3308      	adds	r3, #8
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d07e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d082:	4613      	mov	r3, r2
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	4413      	add	r3, r2
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	3308      	adds	r3, #8
 800d08c:	4a25      	ldr	r2, [pc, #148]	; (800d124 <etharp_update_arp_entry+0x148>)
 800d08e:	4413      	add	r3, r2
 800d090:	3304      	adds	r3, #4
 800d092:	2206      	movs	r2, #6
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	4618      	mov	r0, r3
 800d098:	f002 f9dc 	bl	800f454 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d09c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0a0:	4920      	ldr	r1, [pc, #128]	; (800d124 <etharp_update_arp_entry+0x148>)
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	4413      	add	r3, r2
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	440b      	add	r3, r1
 800d0ac:	3312      	adds	r3, #18
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d0b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0b6:	491b      	ldr	r1, [pc, #108]	; (800d124 <etharp_update_arp_entry+0x148>)
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	005b      	lsls	r3, r3, #1
 800d0bc:	4413      	add	r3, r2
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	440b      	add	r3, r1
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d021      	beq.n	800d10c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d0c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0cc:	4915      	ldr	r1, [pc, #84]	; (800d124 <etharp_update_arp_entry+0x148>)
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	005b      	lsls	r3, r3, #1
 800d0d2:	4413      	add	r3, r2
 800d0d4:	00db      	lsls	r3, r3, #3
 800d0d6:	440b      	add	r3, r1
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d0dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0e0:	4910      	ldr	r1, [pc, #64]	; (800d124 <etharp_update_arp_entry+0x148>)
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	4413      	add	r3, r2
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	440b      	add	r3, r1
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d0f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6939      	ldr	r1, [r7, #16]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f001 ff97 	bl	800f034 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d106:	6938      	ldr	r0, [r7, #16]
 800d108:	f7f9 fe6a 	bl	8006de0 <pbuf_free>
  }
  return ERR_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	080123f4 	.word	0x080123f4
 800d11c:	080124ec 	.word	0x080124ec
 800d120:	0801246c 	.word	0x0801246c
 800d124:	2000882c 	.word	0x2000882c

0800d128 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d130:	2300      	movs	r3, #0
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	e01e      	b.n	800d174 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d136:	4913      	ldr	r1, [pc, #76]	; (800d184 <etharp_cleanup_netif+0x5c>)
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	4613      	mov	r3, r2
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	4413      	add	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	440b      	add	r3, r1
 800d144:	3314      	adds	r3, #20
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d14a:	7afb      	ldrb	r3, [r7, #11]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00e      	beq.n	800d16e <etharp_cleanup_netif+0x46>
 800d150:	490c      	ldr	r1, [pc, #48]	; (800d184 <etharp_cleanup_netif+0x5c>)
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	4613      	mov	r3, r2
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	4413      	add	r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	440b      	add	r3, r1
 800d15e:	3308      	adds	r3, #8
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	429a      	cmp	r2, r3
 800d166:	d102      	bne.n	800d16e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff fce5 	bl	800cb38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3301      	adds	r3, #1
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b09      	cmp	r3, #9
 800d178:	dddd      	ble.n	800d136 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d17a:	bf00      	nop
 800d17c:	bf00      	nop
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	2000882c 	.word	0x2000882c

0800d188 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d188:	b5b0      	push	{r4, r5, r7, lr}
 800d18a:	b08a      	sub	sp, #40	; 0x28
 800d18c:	af04      	add	r7, sp, #16
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d107      	bne.n	800d1a8 <etharp_input+0x20>
 800d198:	4b3d      	ldr	r3, [pc, #244]	; (800d290 <etharp_input+0x108>)
 800d19a:	f240 228a 	movw	r2, #650	; 0x28a
 800d19e:	493d      	ldr	r1, [pc, #244]	; (800d294 <etharp_input+0x10c>)
 800d1a0:	483d      	ldr	r0, [pc, #244]	; (800d298 <etharp_input+0x110>)
 800d1a2:	f002 f87d 	bl	800f2a0 <iprintf>
 800d1a6:	e06f      	b.n	800d288 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	881b      	ldrh	r3, [r3, #0]
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1b8:	d10c      	bne.n	800d1d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d1be:	2b06      	cmp	r3, #6
 800d1c0:	d108      	bne.n	800d1d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1c6:	2b04      	cmp	r3, #4
 800d1c8:	d104      	bne.n	800d1d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	885b      	ldrh	r3, [r3, #2]
 800d1ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d1d0:	2b08      	cmp	r3, #8
 800d1d2:	d003      	beq.n	800d1dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7f9 fe03 	bl	8006de0 <pbuf_free>
    return;
 800d1da:	e055      	b.n	800d288 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	330e      	adds	r3, #14
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	3318      	adds	r3, #24
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d102      	bne.n	800d1fc <etharp_input+0x74>
    for_us = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	75fb      	strb	r3, [r7, #23]
 800d1fa:	e009      	b.n	800d210 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	3304      	adds	r3, #4
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	429a      	cmp	r2, r3
 800d206:	bf0c      	ite	eq
 800d208:	2301      	moveq	r3, #1
 800d20a:	2300      	movne	r3, #0
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f103 0208 	add.w	r2, r3, #8
 800d216:	7dfb      	ldrb	r3, [r7, #23]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <etharp_input+0x98>
 800d21c:	2301      	movs	r3, #1
 800d21e:	e000      	b.n	800d222 <etharp_input+0x9a>
 800d220:	2302      	movs	r3, #2
 800d222:	f107 010c 	add.w	r1, r7, #12
 800d226:	6838      	ldr	r0, [r7, #0]
 800d228:	f7ff fed8 	bl	800cfdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	88db      	ldrh	r3, [r3, #6]
 800d230:	b29b      	uxth	r3, r3
 800d232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d236:	d003      	beq.n	800d240 <etharp_input+0xb8>
 800d238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d23c:	d01e      	beq.n	800d27c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d23e:	e020      	b.n	800d282 <etharp_input+0xfa>
      if (for_us) {
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d01c      	beq.n	800d280 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d260:	2102      	movs	r1, #2
 800d262:	9103      	str	r1, [sp, #12]
 800d264:	f107 010c 	add.w	r1, r7, #12
 800d268:	9102      	str	r1, [sp, #8]
 800d26a:	9201      	str	r2, [sp, #4]
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	462b      	mov	r3, r5
 800d270:	4622      	mov	r2, r4
 800d272:	4601      	mov	r1, r0
 800d274:	6838      	ldr	r0, [r7, #0]
 800d276:	f000 faeb 	bl	800d850 <etharp_raw>
      break;
 800d27a:	e001      	b.n	800d280 <etharp_input+0xf8>
      break;
 800d27c:	bf00      	nop
 800d27e:	e000      	b.n	800d282 <etharp_input+0xfa>
      break;
 800d280:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7f9 fdac 	bl	8006de0 <pbuf_free>
}
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bdb0      	pop	{r4, r5, r7, pc}
 800d28e:	bf00      	nop
 800d290:	080123f4 	.word	0x080123f4
 800d294:	08012544 	.word	0x08012544
 800d298:	0801246c 	.word	0x0801246c

0800d29c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af02      	add	r7, sp, #8
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d2aa:	79fa      	ldrb	r2, [r7, #7]
 800d2ac:	4944      	ldr	r1, [pc, #272]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	005b      	lsls	r3, r3, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	00db      	lsls	r3, r3, #3
 800d2b6:	440b      	add	r3, r1
 800d2b8:	3314      	adds	r3, #20
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d806      	bhi.n	800d2ce <etharp_output_to_arp_index+0x32>
 800d2c0:	4b40      	ldr	r3, [pc, #256]	; (800d3c4 <etharp_output_to_arp_index+0x128>)
 800d2c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d2c6:	4940      	ldr	r1, [pc, #256]	; (800d3c8 <etharp_output_to_arp_index+0x12c>)
 800d2c8:	4840      	ldr	r0, [pc, #256]	; (800d3cc <etharp_output_to_arp_index+0x130>)
 800d2ca:	f001 ffe9 	bl	800f2a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d2ce:	79fa      	ldrb	r2, [r7, #7]
 800d2d0:	493b      	ldr	r1, [pc, #236]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	4413      	add	r3, r2
 800d2d8:	00db      	lsls	r3, r3, #3
 800d2da:	440b      	add	r3, r1
 800d2dc:	3314      	adds	r3, #20
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d153      	bne.n	800d38c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d2e4:	79fa      	ldrb	r2, [r7, #7]
 800d2e6:	4936      	ldr	r1, [pc, #216]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	4413      	add	r3, r2
 800d2ee:	00db      	lsls	r3, r3, #3
 800d2f0:	440b      	add	r3, r1
 800d2f2:	3312      	adds	r3, #18
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d2fa:	d919      	bls.n	800d330 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d2fc:	79fa      	ldrb	r2, [r7, #7]
 800d2fe:	4613      	mov	r3, r2
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	4413      	add	r3, r2
 800d304:	00db      	lsls	r3, r3, #3
 800d306:	4a2e      	ldr	r2, [pc, #184]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d308:	4413      	add	r3, r2
 800d30a:	3304      	adds	r3, #4
 800d30c:	4619      	mov	r1, r3
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f000 fb4c 	bl	800d9ac <etharp_request>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d138      	bne.n	800d38c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d31a:	79fa      	ldrb	r2, [r7, #7]
 800d31c:	4928      	ldr	r1, [pc, #160]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d31e:	4613      	mov	r3, r2
 800d320:	005b      	lsls	r3, r3, #1
 800d322:	4413      	add	r3, r2
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	440b      	add	r3, r1
 800d328:	3314      	adds	r3, #20
 800d32a:	2203      	movs	r2, #3
 800d32c:	701a      	strb	r2, [r3, #0]
 800d32e:	e02d      	b.n	800d38c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d330:	79fa      	ldrb	r2, [r7, #7]
 800d332:	4923      	ldr	r1, [pc, #140]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d334:	4613      	mov	r3, r2
 800d336:	005b      	lsls	r3, r3, #1
 800d338:	4413      	add	r3, r2
 800d33a:	00db      	lsls	r3, r3, #3
 800d33c:	440b      	add	r3, r1
 800d33e:	3312      	adds	r3, #18
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d346:	d321      	bcc.n	800d38c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d348:	79fa      	ldrb	r2, [r7, #7]
 800d34a:	4613      	mov	r3, r2
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	4413      	add	r3, r2
 800d350:	00db      	lsls	r3, r3, #3
 800d352:	4a1b      	ldr	r2, [pc, #108]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d354:	4413      	add	r3, r2
 800d356:	1d19      	adds	r1, r3, #4
 800d358:	79fa      	ldrb	r2, [r7, #7]
 800d35a:	4613      	mov	r3, r2
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	4413      	add	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	3308      	adds	r3, #8
 800d364:	4a16      	ldr	r2, [pc, #88]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d366:	4413      	add	r3, r2
 800d368:	3304      	adds	r3, #4
 800d36a:	461a      	mov	r2, r3
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f000 fafb 	bl	800d968 <etharp_request_dst>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d109      	bne.n	800d38c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d378:	79fa      	ldrb	r2, [r7, #7]
 800d37a:	4911      	ldr	r1, [pc, #68]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d37c:	4613      	mov	r3, r2
 800d37e:	005b      	lsls	r3, r3, #1
 800d380:	4413      	add	r3, r2
 800d382:	00db      	lsls	r3, r3, #3
 800d384:	440b      	add	r3, r1
 800d386:	3314      	adds	r3, #20
 800d388:	2203      	movs	r2, #3
 800d38a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d392:	79fa      	ldrb	r2, [r7, #7]
 800d394:	4613      	mov	r3, r2
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	4413      	add	r3, r2
 800d39a:	00db      	lsls	r3, r3, #3
 800d39c:	3308      	adds	r3, #8
 800d39e:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <etharp_output_to_arp_index+0x124>)
 800d3a0:	4413      	add	r3, r2
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3a8:	9200      	str	r2, [sp, #0]
 800d3aa:	460a      	mov	r2, r1
 800d3ac:	68b9      	ldr	r1, [r7, #8]
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f001 fe40 	bl	800f034 <ethernet_output>
 800d3b4:	4603      	mov	r3, r0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	2000882c 	.word	0x2000882c
 800d3c4:	080123f4 	.word	0x080123f4
 800d3c8:	08012564 	.word	0x08012564
 800d3cc:	0801246c 	.word	0x0801246c

0800d3d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b08a      	sub	sp, #40	; 0x28
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d106      	bne.n	800d3f4 <etharp_output+0x24>
 800d3e6:	4b73      	ldr	r3, [pc, #460]	; (800d5b4 <etharp_output+0x1e4>)
 800d3e8:	f240 321e 	movw	r2, #798	; 0x31e
 800d3ec:	4972      	ldr	r1, [pc, #456]	; (800d5b8 <etharp_output+0x1e8>)
 800d3ee:	4873      	ldr	r0, [pc, #460]	; (800d5bc <etharp_output+0x1ec>)
 800d3f0:	f001 ff56 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d106      	bne.n	800d408 <etharp_output+0x38>
 800d3fa:	4b6e      	ldr	r3, [pc, #440]	; (800d5b4 <etharp_output+0x1e4>)
 800d3fc:	f240 321f 	movw	r2, #799	; 0x31f
 800d400:	496f      	ldr	r1, [pc, #444]	; (800d5c0 <etharp_output+0x1f0>)
 800d402:	486e      	ldr	r0, [pc, #440]	; (800d5bc <etharp_output+0x1ec>)
 800d404:	f001 ff4c 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <etharp_output+0x4c>
 800d40e:	4b69      	ldr	r3, [pc, #420]	; (800d5b4 <etharp_output+0x1e4>)
 800d410:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d414:	496b      	ldr	r1, [pc, #428]	; (800d5c4 <etharp_output+0x1f4>)
 800d416:	4869      	ldr	r0, [pc, #420]	; (800d5bc <etharp_output+0x1ec>)
 800d418:	f001 ff42 	bl	800f2a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68f9      	ldr	r1, [r7, #12]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fef8 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d42e:	4b66      	ldr	r3, [pc, #408]	; (800d5c8 <etharp_output+0x1f8>)
 800d430:	61fb      	str	r3, [r7, #28]
 800d432:	e0af      	b.n	800d594 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d43c:	2be0      	cmp	r3, #224	; 0xe0
 800d43e:	d118      	bne.n	800d472 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d440:	2301      	movs	r3, #1
 800d442:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d444:	2300      	movs	r3, #0
 800d446:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d448:	235e      	movs	r3, #94	; 0x5e
 800d44a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3301      	adds	r3, #1
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d456:	b2db      	uxtb	r3, r3
 800d458:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	3302      	adds	r3, #2
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	3303      	adds	r3, #3
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d46a:	f107 0310 	add.w	r3, r7, #16
 800d46e:	61fb      	str	r3, [r7, #28]
 800d470:	e090      	b.n	800d594 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3304      	adds	r3, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	405a      	eors	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3308      	adds	r3, #8
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4013      	ands	r3, r2
 800d486:	2b00      	cmp	r3, #0
 800d488:	d012      	beq.n	800d4b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d490:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d494:	4293      	cmp	r3, r2
 800d496:	d00b      	beq.n	800d4b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	330c      	adds	r3, #12
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	330c      	adds	r3, #12
 800d4a6:	61bb      	str	r3, [r7, #24]
 800d4a8:	e002      	b.n	800d4b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d4aa:	f06f 0303 	mvn.w	r3, #3
 800d4ae:	e07d      	b.n	800d5ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d4b0:	4b46      	ldr	r3, [pc, #280]	; (800d5cc <etharp_output+0x1fc>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4a46      	ldr	r2, [pc, #280]	; (800d5d0 <etharp_output+0x200>)
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	440b      	add	r3, r1
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	4413      	add	r3, r2
 800d4c2:	3314      	adds	r3, #20
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d925      	bls.n	800d516 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d4ca:	4b40      	ldr	r3, [pc, #256]	; (800d5cc <etharp_output+0x1fc>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4a3f      	ldr	r2, [pc, #252]	; (800d5d0 <etharp_output+0x200>)
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	440b      	add	r3, r1
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	4413      	add	r3, r2
 800d4dc:	3308      	adds	r3, #8
 800d4de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d117      	bne.n	800d516 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	4b38      	ldr	r3, [pc, #224]	; (800d5cc <etharp_output+0x1fc>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	4937      	ldr	r1, [pc, #220]	; (800d5d0 <etharp_output+0x200>)
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	4403      	add	r3, r0
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	440b      	add	r3, r1
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d500:	429a      	cmp	r2, r3
 800d502:	d108      	bne.n	800d516 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d504:	4b31      	ldr	r3, [pc, #196]	; (800d5cc <etharp_output+0x1fc>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	461a      	mov	r2, r3
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f7ff fec5 	bl	800d29c <etharp_output_to_arp_index>
 800d512:	4603      	mov	r3, r0
 800d514:	e04a      	b.n	800d5ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d516:	2300      	movs	r3, #0
 800d518:	75fb      	strb	r3, [r7, #23]
 800d51a:	e031      	b.n	800d580 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d51c:	7dfa      	ldrb	r2, [r7, #23]
 800d51e:	492c      	ldr	r1, [pc, #176]	; (800d5d0 <etharp_output+0x200>)
 800d520:	4613      	mov	r3, r2
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	4413      	add	r3, r2
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	440b      	add	r3, r1
 800d52a:	3314      	adds	r3, #20
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d923      	bls.n	800d57a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d532:	7dfa      	ldrb	r2, [r7, #23]
 800d534:	4926      	ldr	r1, [pc, #152]	; (800d5d0 <etharp_output+0x200>)
 800d536:	4613      	mov	r3, r2
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	4413      	add	r3, r2
 800d53c:	00db      	lsls	r3, r3, #3
 800d53e:	440b      	add	r3, r1
 800d540:	3308      	adds	r3, #8
 800d542:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	429a      	cmp	r2, r3
 800d548:	d117      	bne.n	800d57a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	6819      	ldr	r1, [r3, #0]
 800d54e:	7dfa      	ldrb	r2, [r7, #23]
 800d550:	481f      	ldr	r0, [pc, #124]	; (800d5d0 <etharp_output+0x200>)
 800d552:	4613      	mov	r3, r2
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	4413      	add	r3, r2
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	4403      	add	r3, r0
 800d55c:	3304      	adds	r3, #4
 800d55e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d560:	4299      	cmp	r1, r3
 800d562:	d10a      	bne.n	800d57a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d564:	4a19      	ldr	r2, [pc, #100]	; (800d5cc <etharp_output+0x1fc>)
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
 800d56c:	461a      	mov	r2, r3
 800d56e:	68b9      	ldr	r1, [r7, #8]
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7ff fe93 	bl	800d29c <etharp_output_to_arp_index>
 800d576:	4603      	mov	r3, r0
 800d578:	e018      	b.n	800d5ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
 800d57c:	3301      	adds	r3, #1
 800d57e:	75fb      	strb	r3, [r7, #23]
 800d580:	7dfb      	ldrb	r3, [r7, #23]
 800d582:	2b09      	cmp	r3, #9
 800d584:	d9ca      	bls.n	800d51c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	69b9      	ldr	r1, [r7, #24]
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f000 f822 	bl	800d5d4 <etharp_query>
 800d590:	4603      	mov	r3, r0
 800d592:	e00b      	b.n	800d5ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d59a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f001 fd45 	bl	800f034 <ethernet_output>
 800d5aa:	4603      	mov	r3, r0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3720      	adds	r7, #32
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	080123f4 	.word	0x080123f4
 800d5b8:	08012544 	.word	0x08012544
 800d5bc:	0801246c 	.word	0x0801246c
 800d5c0:	08012594 	.word	0x08012594
 800d5c4:	08012534 	.word	0x08012534
 800d5c8:	08012bb0 	.word	0x08012bb0
 800d5cc:	2000891c 	.word	0x2000891c
 800d5d0:	2000882c 	.word	0x2000882c

0800d5d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b08c      	sub	sp, #48	; 0x30
 800d5d8:	af02      	add	r7, sp, #8
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3326      	adds	r3, #38	; 0x26
 800d5e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d5e6:	23ff      	movs	r3, #255	; 0xff
 800d5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68f9      	ldr	r1, [r7, #12]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 fe0e 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10c      	bne.n	800d61c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d60a:	2be0      	cmp	r3, #224	; 0xe0
 800d60c:	d006      	beq.n	800d61c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d102      	bne.n	800d622 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d61c:	f06f 030f 	mvn.w	r3, #15
 800d620:	e101      	b.n	800d826 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	2101      	movs	r1, #1
 800d626:	68b8      	ldr	r0, [r7, #8]
 800d628:	f7ff fb60 	bl	800ccec <etharp_find_entry>
 800d62c:	4603      	mov	r3, r0
 800d62e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d630:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d634:	2b00      	cmp	r3, #0
 800d636:	da02      	bge.n	800d63e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d638:	8a7b      	ldrh	r3, [r7, #18]
 800d63a:	b25b      	sxtb	r3, r3
 800d63c:	e0f3      	b.n	800d826 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d63e:	8a7b      	ldrh	r3, [r7, #18]
 800d640:	2b7e      	cmp	r3, #126	; 0x7e
 800d642:	d906      	bls.n	800d652 <etharp_query+0x7e>
 800d644:	4b7a      	ldr	r3, [pc, #488]	; (800d830 <etharp_query+0x25c>)
 800d646:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d64a:	497a      	ldr	r1, [pc, #488]	; (800d834 <etharp_query+0x260>)
 800d64c:	487a      	ldr	r0, [pc, #488]	; (800d838 <etharp_query+0x264>)
 800d64e:	f001 fe27 	bl	800f2a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d652:	8a7b      	ldrh	r3, [r7, #18]
 800d654:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d656:	7c7a      	ldrb	r2, [r7, #17]
 800d658:	4978      	ldr	r1, [pc, #480]	; (800d83c <etharp_query+0x268>)
 800d65a:	4613      	mov	r3, r2
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	4413      	add	r3, r2
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	440b      	add	r3, r1
 800d664:	3314      	adds	r3, #20
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d115      	bne.n	800d698 <etharp_query+0xc4>
    is_new_entry = 1;
 800d66c:	2301      	movs	r3, #1
 800d66e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d670:	7c7a      	ldrb	r2, [r7, #17]
 800d672:	4972      	ldr	r1, [pc, #456]	; (800d83c <etharp_query+0x268>)
 800d674:	4613      	mov	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	4413      	add	r3, r2
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	440b      	add	r3, r1
 800d67e:	3314      	adds	r3, #20
 800d680:	2201      	movs	r2, #1
 800d682:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d684:	7c7a      	ldrb	r2, [r7, #17]
 800d686:	496d      	ldr	r1, [pc, #436]	; (800d83c <etharp_query+0x268>)
 800d688:	4613      	mov	r3, r2
 800d68a:	005b      	lsls	r3, r3, #1
 800d68c:	4413      	add	r3, r2
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	440b      	add	r3, r1
 800d692:	3308      	adds	r3, #8
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d698:	7c7a      	ldrb	r2, [r7, #17]
 800d69a:	4968      	ldr	r1, [pc, #416]	; (800d83c <etharp_query+0x268>)
 800d69c:	4613      	mov	r3, r2
 800d69e:	005b      	lsls	r3, r3, #1
 800d6a0:	4413      	add	r3, r2
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	440b      	add	r3, r1
 800d6a6:	3314      	adds	r3, #20
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d011      	beq.n	800d6d2 <etharp_query+0xfe>
 800d6ae:	7c7a      	ldrb	r2, [r7, #17]
 800d6b0:	4962      	ldr	r1, [pc, #392]	; (800d83c <etharp_query+0x268>)
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	4413      	add	r3, r2
 800d6b8:	00db      	lsls	r3, r3, #3
 800d6ba:	440b      	add	r3, r1
 800d6bc:	3314      	adds	r3, #20
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d806      	bhi.n	800d6d2 <etharp_query+0xfe>
 800d6c4:	4b5a      	ldr	r3, [pc, #360]	; (800d830 <etharp_query+0x25c>)
 800d6c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d6ca:	495d      	ldr	r1, [pc, #372]	; (800d840 <etharp_query+0x26c>)
 800d6cc:	485a      	ldr	r0, [pc, #360]	; (800d838 <etharp_query+0x264>)
 800d6ce:	f001 fde7 	bl	800f2a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <etharp_query+0x10a>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10c      	bne.n	800d6f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d6de:	68b9      	ldr	r1, [r7, #8]
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 f963 	bl	800d9ac <etharp_request>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d102      	bne.n	800d6f8 <etharp_query+0x124>
      return result;
 800d6f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6f6:	e096      	b.n	800d826 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d106      	bne.n	800d70c <etharp_query+0x138>
 800d6fe:	4b4c      	ldr	r3, [pc, #304]	; (800d830 <etharp_query+0x25c>)
 800d700:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d704:	494f      	ldr	r1, [pc, #316]	; (800d844 <etharp_query+0x270>)
 800d706:	484c      	ldr	r0, [pc, #304]	; (800d838 <etharp_query+0x264>)
 800d708:	f001 fdca 	bl	800f2a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d70c:	7c7a      	ldrb	r2, [r7, #17]
 800d70e:	494b      	ldr	r1, [pc, #300]	; (800d83c <etharp_query+0x268>)
 800d710:	4613      	mov	r3, r2
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	4413      	add	r3, r2
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	440b      	add	r3, r1
 800d71a:	3314      	adds	r3, #20
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d917      	bls.n	800d752 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d722:	4a49      	ldr	r2, [pc, #292]	; (800d848 <etharp_query+0x274>)
 800d724:	7c7b      	ldrb	r3, [r7, #17]
 800d726:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d728:	7c7a      	ldrb	r2, [r7, #17]
 800d72a:	4613      	mov	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4413      	add	r3, r2
 800d730:	00db      	lsls	r3, r3, #3
 800d732:	3308      	adds	r3, #8
 800d734:	4a41      	ldr	r2, [pc, #260]	; (800d83c <etharp_query+0x268>)
 800d736:	4413      	add	r3, r2
 800d738:	3304      	adds	r3, #4
 800d73a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d73e:	9200      	str	r2, [sp, #0]
 800d740:	697a      	ldr	r2, [r7, #20]
 800d742:	6879      	ldr	r1, [r7, #4]
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f001 fc75 	bl	800f034 <ethernet_output>
 800d74a:	4603      	mov	r3, r0
 800d74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d750:	e067      	b.n	800d822 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d752:	7c7a      	ldrb	r2, [r7, #17]
 800d754:	4939      	ldr	r1, [pc, #228]	; (800d83c <etharp_query+0x268>)
 800d756:	4613      	mov	r3, r2
 800d758:	005b      	lsls	r3, r3, #1
 800d75a:	4413      	add	r3, r2
 800d75c:	00db      	lsls	r3, r3, #3
 800d75e:	440b      	add	r3, r1
 800d760:	3314      	adds	r3, #20
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d15c      	bne.n	800d822 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d770:	e01c      	b.n	800d7ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	895a      	ldrh	r2, [r3, #10]
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	891b      	ldrh	r3, [r3, #8]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d10a      	bne.n	800d794 <etharp_query+0x1c0>
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d006      	beq.n	800d794 <etharp_query+0x1c0>
 800d786:	4b2a      	ldr	r3, [pc, #168]	; (800d830 <etharp_query+0x25c>)
 800d788:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d78c:	492f      	ldr	r1, [pc, #188]	; (800d84c <etharp_query+0x278>)
 800d78e:	482a      	ldr	r0, [pc, #168]	; (800d838 <etharp_query+0x264>)
 800d790:	f001 fd86 	bl	800f2a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	7b1b      	ldrb	r3, [r3, #12]
 800d798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <etharp_query+0x1d2>
        copy_needed = 1;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	61bb      	str	r3, [r7, #24]
        break;
 800d7a4:	e005      	b.n	800d7b2 <etharp_query+0x1de>
      }
      p = p->next;
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1df      	bne.n	800d772 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d007      	beq.n	800d7c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d7be:	200e      	movs	r0, #14
 800d7c0:	f7f9 fd6a 	bl	8007298 <pbuf_clone>
 800d7c4:	61f8      	str	r0, [r7, #28]
 800d7c6:	e004      	b.n	800d7d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d7cc:	69f8      	ldr	r0, [r7, #28]
 800d7ce:	f7f9 fba7 	bl	8006f20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d021      	beq.n	800d81c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d7d8:	7c7a      	ldrb	r2, [r7, #17]
 800d7da:	4918      	ldr	r1, [pc, #96]	; (800d83c <etharp_query+0x268>)
 800d7dc:	4613      	mov	r3, r2
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	4413      	add	r3, r2
 800d7e2:	00db      	lsls	r3, r3, #3
 800d7e4:	440b      	add	r3, r1
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00a      	beq.n	800d802 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d7ec:	7c7a      	ldrb	r2, [r7, #17]
 800d7ee:	4913      	ldr	r1, [pc, #76]	; (800d83c <etharp_query+0x268>)
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	4413      	add	r3, r2
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	440b      	add	r3, r1
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7f9 faef 	bl	8006de0 <pbuf_free>
      }
      arp_table[i].q = p;
 800d802:	7c7a      	ldrb	r2, [r7, #17]
 800d804:	490d      	ldr	r1, [pc, #52]	; (800d83c <etharp_query+0x268>)
 800d806:	4613      	mov	r3, r2
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	4413      	add	r3, r2
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	440b      	add	r3, r1
 800d810:	69fa      	ldr	r2, [r7, #28]
 800d812:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d814:	2300      	movs	r3, #0
 800d816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d81a:	e002      	b.n	800d822 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d81c:	23ff      	movs	r3, #255	; 0xff
 800d81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d826:	4618      	mov	r0, r3
 800d828:	3728      	adds	r7, #40	; 0x28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	080123f4 	.word	0x080123f4
 800d834:	080125a0 	.word	0x080125a0
 800d838:	0801246c 	.word	0x0801246c
 800d83c:	2000882c 	.word	0x2000882c
 800d840:	080125b0 	.word	0x080125b0
 800d844:	08012594 	.word	0x08012594
 800d848:	2000891c 	.word	0x2000891c
 800d84c:	080125d8 	.word	0x080125d8

0800d850 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08a      	sub	sp, #40	; 0x28
 800d854:	af02      	add	r7, sp, #8
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d106      	bne.n	800d876 <etharp_raw+0x26>
 800d868:	4b3a      	ldr	r3, [pc, #232]	; (800d954 <etharp_raw+0x104>)
 800d86a:	f240 4257 	movw	r2, #1111	; 0x457
 800d86e:	493a      	ldr	r1, [pc, #232]	; (800d958 <etharp_raw+0x108>)
 800d870:	483a      	ldr	r0, [pc, #232]	; (800d95c <etharp_raw+0x10c>)
 800d872:	f001 fd15 	bl	800f2a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d876:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d87a:	211c      	movs	r1, #28
 800d87c:	200e      	movs	r0, #14
 800d87e:	f7f8 ffcb 	bl	8006818 <pbuf_alloc>
 800d882:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d102      	bne.n	800d890 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d88a:	f04f 33ff 	mov.w	r3, #4294967295
 800d88e:	e05d      	b.n	800d94c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	895b      	ldrh	r3, [r3, #10]
 800d894:	2b1b      	cmp	r3, #27
 800d896:	d806      	bhi.n	800d8a6 <etharp_raw+0x56>
 800d898:	4b2e      	ldr	r3, [pc, #184]	; (800d954 <etharp_raw+0x104>)
 800d89a:	f240 4262 	movw	r2, #1122	; 0x462
 800d89e:	4930      	ldr	r1, [pc, #192]	; (800d960 <etharp_raw+0x110>)
 800d8a0:	482e      	ldr	r0, [pc, #184]	; (800d95c <etharp_raw+0x10c>)
 800d8a2:	f001 fcfd 	bl	800f2a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d8ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7f7 ff58 	bl	8005764 <lwip_htons>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8c2:	2b06      	cmp	r3, #6
 800d8c4:	d006      	beq.n	800d8d4 <etharp_raw+0x84>
 800d8c6:	4b23      	ldr	r3, [pc, #140]	; (800d954 <etharp_raw+0x104>)
 800d8c8:	f240 4269 	movw	r2, #1129	; 0x469
 800d8cc:	4925      	ldr	r1, [pc, #148]	; (800d964 <etharp_raw+0x114>)
 800d8ce:	4823      	ldr	r0, [pc, #140]	; (800d95c <etharp_raw+0x10c>)
 800d8d0:	f001 fce6 	bl	800f2a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	3308      	adds	r3, #8
 800d8d8:	2206      	movs	r2, #6
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f001 fdb9 	bl	800f454 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	3312      	adds	r3, #18
 800d8e6:	2206      	movs	r2, #6
 800d8e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f001 fdb2 	bl	800f454 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	330e      	adds	r3, #14
 800d8f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8f6:	6812      	ldr	r2, [r2, #0]
 800d8f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	3318      	adds	r3, #24
 800d8fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d900:	6812      	ldr	r2, [r2, #0]
 800d902:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2200      	movs	r2, #0
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f042 0201 	orr.w	r2, r2, #1
 800d910:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2200      	movs	r2, #0
 800d916:	f042 0208 	orr.w	r2, r2, #8
 800d91a:	709a      	strb	r2, [r3, #2]
 800d91c:	2200      	movs	r2, #0
 800d91e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	2206      	movs	r2, #6
 800d924:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2204      	movs	r2, #4
 800d92a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d92c:	f640 0306 	movw	r3, #2054	; 0x806
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	69b9      	ldr	r1, [r7, #24]
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f001 fb7b 	bl	800f034 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d93e:	69b8      	ldr	r0, [r7, #24]
 800d940:	f7f9 fa4e 	bl	8006de0 <pbuf_free>
  p = NULL;
 800d944:	2300      	movs	r3, #0
 800d946:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3720      	adds	r7, #32
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	080123f4 	.word	0x080123f4
 800d958:	08012544 	.word	0x08012544
 800d95c:	0801246c 	.word	0x0801246c
 800d960:	080125f4 	.word	0x080125f4
 800d964:	08012628 	.word	0x08012628

0800d968 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b088      	sub	sp, #32
 800d96c:	af04      	add	r7, sp, #16
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d984:	2201      	movs	r2, #1
 800d986:	9203      	str	r2, [sp, #12]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	9202      	str	r2, [sp, #8]
 800d98c:	4a06      	ldr	r2, [pc, #24]	; (800d9a8 <etharp_request_dst+0x40>)
 800d98e:	9201      	str	r2, [sp, #4]
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	4603      	mov	r3, r0
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f7ff ff5a 	bl	800d850 <etharp_raw>
 800d99c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	08012bb8 	.word	0x08012bb8

0800d9ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d9b6:	4a05      	ldr	r2, [pc, #20]	; (800d9cc <etharp_request+0x20>)
 800d9b8:	6839      	ldr	r1, [r7, #0]
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7ff ffd4 	bl	800d968 <etharp_request_dst>
 800d9c0:	4603      	mov	r3, r0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	08012bb0 	.word	0x08012bb0

0800d9d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b08e      	sub	sp, #56	; 0x38
 800d9d4:	af04      	add	r7, sp, #16
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d9da:	4b79      	ldr	r3, [pc, #484]	; (800dbc0 <icmp_input+0x1f0>)
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	f003 030f 	and.w	r3, r3, #15
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d9f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9f2:	2b13      	cmp	r3, #19
 800d9f4:	f240 80cd 	bls.w	800db92 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	895b      	ldrh	r3, [r3, #10]
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	f240 80ca 	bls.w	800db96 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800da0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 80b7 	beq.w	800db84 <icmp_input+0x1b4>
 800da16:	2b08      	cmp	r3, #8
 800da18:	f040 80b7 	bne.w	800db8a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800da1c:	4b69      	ldr	r3, [pc, #420]	; (800dbc4 <icmp_input+0x1f4>)
 800da1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da20:	4b67      	ldr	r3, [pc, #412]	; (800dbc0 <icmp_input+0x1f0>)
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da28:	2be0      	cmp	r3, #224	; 0xe0
 800da2a:	f000 80bb 	beq.w	800dba4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da2e:	4b64      	ldr	r3, [pc, #400]	; (800dbc0 <icmp_input+0x1f0>)
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	4a63      	ldr	r2, [pc, #396]	; (800dbc0 <icmp_input+0x1f0>)
 800da34:	6812      	ldr	r2, [r2, #0]
 800da36:	4611      	mov	r1, r2
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 fbed 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	f040 80b1 	bne.w	800dba8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	891b      	ldrh	r3, [r3, #8]
 800da4a:	2b07      	cmp	r3, #7
 800da4c:	f240 80a5 	bls.w	800db9a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da52:	330e      	adds	r3, #14
 800da54:	4619      	mov	r1, r3
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7f9 f92c 	bl	8006cb4 <pbuf_add_header>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d04b      	beq.n	800dafa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	891a      	ldrh	r2, [r3, #8]
 800da66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da68:	4413      	add	r3, r2
 800da6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	891b      	ldrh	r3, [r3, #8]
 800da70:	8b7a      	ldrh	r2, [r7, #26]
 800da72:	429a      	cmp	r2, r3
 800da74:	f0c0 809a 	bcc.w	800dbac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800da78:	8b7b      	ldrh	r3, [r7, #26]
 800da7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da7e:	4619      	mov	r1, r3
 800da80:	200e      	movs	r0, #14
 800da82:	f7f8 fec9 	bl	8006818 <pbuf_alloc>
 800da86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 8090 	beq.w	800dbb0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	895b      	ldrh	r3, [r3, #10]
 800da94:	461a      	mov	r2, r3
 800da96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da98:	3308      	adds	r3, #8
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d203      	bcs.n	800daa6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800da9e:	6978      	ldr	r0, [r7, #20]
 800daa0:	f7f9 f99e 	bl	8006de0 <pbuf_free>
          goto icmperr;
 800daa4:	e085      	b.n	800dbb2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800daac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daae:	4618      	mov	r0, r3
 800dab0:	f001 fcd0 	bl	800f454 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dab6:	4619      	mov	r1, r3
 800dab8:	6978      	ldr	r0, [r7, #20]
 800daba:	f7f9 f90b 	bl	8006cd4 <pbuf_remove_header>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d009      	beq.n	800dad8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dac4:	4b40      	ldr	r3, [pc, #256]	; (800dbc8 <icmp_input+0x1f8>)
 800dac6:	22b6      	movs	r2, #182	; 0xb6
 800dac8:	4940      	ldr	r1, [pc, #256]	; (800dbcc <icmp_input+0x1fc>)
 800daca:	4841      	ldr	r0, [pc, #260]	; (800dbd0 <icmp_input+0x200>)
 800dacc:	f001 fbe8 	bl	800f2a0 <iprintf>
          pbuf_free(r);
 800dad0:	6978      	ldr	r0, [r7, #20]
 800dad2:	f7f9 f985 	bl	8006de0 <pbuf_free>
          goto icmperr;
 800dad6:	e06c      	b.n	800dbb2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	6978      	ldr	r0, [r7, #20]
 800dadc:	f7f9 fa98 	bl	8007010 <pbuf_copy>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dae6:	6978      	ldr	r0, [r7, #20]
 800dae8:	f7f9 f97a 	bl	8006de0 <pbuf_free>
          goto icmperr;
 800daec:	e061      	b.n	800dbb2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7f9 f976 	bl	8006de0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	607b      	str	r3, [r7, #4]
 800daf8:	e00f      	b.n	800db1a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dafa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dafc:	330e      	adds	r3, #14
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7f9 f8e7 	bl	8006cd4 <pbuf_remove_header>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d006      	beq.n	800db1a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db0c:	4b2e      	ldr	r3, [pc, #184]	; (800dbc8 <icmp_input+0x1f8>)
 800db0e:	22c7      	movs	r2, #199	; 0xc7
 800db10:	4930      	ldr	r1, [pc, #192]	; (800dbd4 <icmp_input+0x204>)
 800db12:	482f      	ldr	r0, [pc, #188]	; (800dbd0 <icmp_input+0x200>)
 800db14:	f001 fbc4 	bl	800f2a0 <iprintf>
          goto icmperr;
 800db18:	e04b      	b.n	800dbb2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800db20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db22:	4619      	mov	r1, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7f9 f8c5 	bl	8006cb4 <pbuf_add_header>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d12b      	bne.n	800db88 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800db3e:	4b20      	ldr	r3, [pc, #128]	; (800dbc0 <icmp_input+0x1f0>)
 800db40:	691a      	ldr	r2, [r3, #16]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2200      	movs	r2, #0
 800db4a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	2200      	movs	r2, #0
 800db50:	709a      	strb	r2, [r3, #2]
 800db52:	2200      	movs	r2, #0
 800db54:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	22ff      	movs	r2, #255	; 0xff
 800db5a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	729a      	strb	r2, [r3, #10]
 800db62:	2200      	movs	r2, #0
 800db64:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	9302      	str	r3, [sp, #8]
 800db6a:	2301      	movs	r3, #1
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	2300      	movs	r3, #0
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	23ff      	movs	r3, #255	; 0xff
 800db74:	2200      	movs	r2, #0
 800db76:	69f9      	ldr	r1, [r7, #28]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fa75 	bl	800e068 <ip4_output_if>
 800db7e:	4603      	mov	r3, r0
 800db80:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800db82:	e001      	b.n	800db88 <icmp_input+0x1b8>
      break;
 800db84:	bf00      	nop
 800db86:	e000      	b.n	800db8a <icmp_input+0x1ba>
      break;
 800db88:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7f9 f928 	bl	8006de0 <pbuf_free>
  return;
 800db90:	e013      	b.n	800dbba <icmp_input+0x1ea>
    goto lenerr;
 800db92:	bf00      	nop
 800db94:	e002      	b.n	800db9c <icmp_input+0x1cc>
    goto lenerr;
 800db96:	bf00      	nop
 800db98:	e000      	b.n	800db9c <icmp_input+0x1cc>
        goto lenerr;
 800db9a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7f9 f91f 	bl	8006de0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dba2:	e00a      	b.n	800dbba <icmp_input+0x1ea>
        goto icmperr;
 800dba4:	bf00      	nop
 800dba6:	e004      	b.n	800dbb2 <icmp_input+0x1e2>
        goto icmperr;
 800dba8:	bf00      	nop
 800dbaa:	e002      	b.n	800dbb2 <icmp_input+0x1e2>
          goto icmperr;
 800dbac:	bf00      	nop
 800dbae:	e000      	b.n	800dbb2 <icmp_input+0x1e2>
          goto icmperr;
 800dbb0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7f9 f914 	bl	8006de0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbb8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dbba:	3728      	adds	r7, #40	; 0x28
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	2000525c 	.word	0x2000525c
 800dbc4:	20005270 	.word	0x20005270
 800dbc8:	0801266c 	.word	0x0801266c
 800dbcc:	080126a4 	.word	0x080126a4
 800dbd0:	080126dc 	.word	0x080126dc
 800dbd4:	08012704 	.word	0x08012704

0800dbd8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dbe4:	78fb      	ldrb	r3, [r7, #3]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	2103      	movs	r1, #3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f814 	bl	800dc18 <icmp_send_response>
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc04:	78fb      	ldrb	r3, [r7, #3]
 800dc06:	461a      	mov	r2, r3
 800dc08:	210b      	movs	r1, #11
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f804 	bl	800dc18 <icmp_send_response>
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b08c      	sub	sp, #48	; 0x30
 800dc1c:	af04      	add	r7, sp, #16
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	460b      	mov	r3, r1
 800dc22:	70fb      	strb	r3, [r7, #3]
 800dc24:	4613      	mov	r3, r2
 800dc26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dc28:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc2c:	2124      	movs	r1, #36	; 0x24
 800dc2e:	2022      	movs	r0, #34	; 0x22
 800dc30:	f7f8 fdf2 	bl	8006818 <pbuf_alloc>
 800dc34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d04c      	beq.n	800dcd6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	895b      	ldrh	r3, [r3, #10]
 800dc40:	2b23      	cmp	r3, #35	; 0x23
 800dc42:	d806      	bhi.n	800dc52 <icmp_send_response+0x3a>
 800dc44:	4b26      	ldr	r3, [pc, #152]	; (800dce0 <icmp_send_response+0xc8>)
 800dc46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dc4a:	4926      	ldr	r1, [pc, #152]	; (800dce4 <icmp_send_response+0xcc>)
 800dc4c:	4826      	ldr	r0, [pc, #152]	; (800dce8 <icmp_send_response+0xd0>)
 800dc4e:	f001 fb27 	bl	800f2a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	78fa      	ldrb	r2, [r7, #3]
 800dc62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	78ba      	ldrb	r2, [r7, #2]
 800dc68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	711a      	strb	r2, [r3, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	2200      	movs	r2, #0
 800dc78:	719a      	strb	r2, [r3, #6]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	f103 0008 	add.w	r0, r3, #8
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	221c      	movs	r2, #28
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	f001 fbe1 	bl	800f454 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dc98:	f107 030c 	add.w	r3, r7, #12
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 f825 	bl	800dcec <ip4_route>
 800dca2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d011      	beq.n	800dcce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2200      	movs	r2, #0
 800dcae:	709a      	strb	r2, [r3, #2]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dcb4:	f107 020c 	add.w	r2, r7, #12
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	9302      	str	r3, [sp, #8]
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	23ff      	movs	r3, #255	; 0xff
 800dcc6:	2100      	movs	r1, #0
 800dcc8:	69f8      	ldr	r0, [r7, #28]
 800dcca:	f000 f9cd 	bl	800e068 <ip4_output_if>
  }
  pbuf_free(q);
 800dcce:	69f8      	ldr	r0, [r7, #28]
 800dcd0:	f7f9 f886 	bl	8006de0 <pbuf_free>
 800dcd4:	e000      	b.n	800dcd8 <icmp_send_response+0xc0>
    return;
 800dcd6:	bf00      	nop
}
 800dcd8:	3720      	adds	r7, #32
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	0801266c 	.word	0x0801266c
 800dce4:	08012738 	.word	0x08012738
 800dce8:	080126dc 	.word	0x080126dc

0800dcec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dcf4:	4b33      	ldr	r3, [pc, #204]	; (800ddc4 <ip4_route+0xd8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	60fb      	str	r3, [r7, #12]
 800dcfa:	e036      	b.n	800dd6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d02b      	beq.n	800dd64 <ip4_route+0x78>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd12:	089b      	lsrs	r3, r3, #2
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d022      	beq.n	800dd64 <ip4_route+0x78>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	3304      	adds	r3, #4
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d01d      	beq.n	800dd64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	405a      	eors	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3308      	adds	r3, #8
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	e038      	b.n	800ddb6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd4a:	f003 0302 	and.w	r3, r3, #2
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d108      	bne.n	800dd64 <ip4_route+0x78>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	330c      	adds	r3, #12
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d101      	bne.n	800dd64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	e028      	b.n	800ddb6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1c5      	bne.n	800dcfc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dd70:	4b15      	ldr	r3, [pc, #84]	; (800ddc8 <ip4_route+0xdc>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d01a      	beq.n	800ddae <ip4_route+0xc2>
 800dd78:	4b13      	ldr	r3, [pc, #76]	; (800ddc8 <ip4_route+0xdc>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd80:	f003 0301 	and.w	r3, r3, #1
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d012      	beq.n	800ddae <ip4_route+0xc2>
 800dd88:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <ip4_route+0xdc>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd90:	f003 0304 	and.w	r3, r3, #4
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00a      	beq.n	800ddae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dd98:	4b0b      	ldr	r3, [pc, #44]	; (800ddc8 <ip4_route+0xdc>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d004      	beq.n	800ddae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b7f      	cmp	r3, #127	; 0x7f
 800ddac:	d101      	bne.n	800ddb2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e001      	b.n	800ddb6 <ip4_route+0xca>
  }

  return netif_default;
 800ddb2:	4b05      	ldr	r3, [pc, #20]	; (800ddc8 <ip4_route+0xdc>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3714      	adds	r7, #20
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	200087c0 	.word	0x200087c0
 800ddc8:	200087c4 	.word	0x200087c4

0800ddcc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d016      	beq.n	800de12 <ip4_input_accept+0x46>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3304      	adds	r3, #4
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d011      	beq.n	800de12 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ddee:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <ip4_input_accept+0x50>)
 800ddf0:	695a      	ldr	r2, [r3, #20]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d008      	beq.n	800de0e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ddfc:	4b07      	ldr	r3, [pc, #28]	; (800de1c <ip4_input_accept+0x50>)
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	6879      	ldr	r1, [r7, #4]
 800de02:	4618      	mov	r0, r3
 800de04:	f000 fa08 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800de08:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800de0e:	2301      	movs	r3, #1
 800de10:	e000      	b.n	800de14 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800de12:	2300      	movs	r3, #0
}
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	2000525c 	.word	0x2000525c

0800de20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	091b      	lsrs	r3, r3, #4
 800de36:	b2db      	uxtb	r3, r3
 800de38:	2b04      	cmp	r3, #4
 800de3a:	d004      	beq.n	800de46 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7f8 ffcf 	bl	8006de0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800de42:	2300      	movs	r3, #0
 800de44:	e107      	b.n	800e056 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	f003 030f 	and.w	r3, r3, #15
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	b2db      	uxtb	r3, r3
 800de54:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	885b      	ldrh	r3, [r3, #2]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7f7 fc81 	bl	8005764 <lwip_htons>
 800de62:	4603      	mov	r3, r0
 800de64:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	891b      	ldrh	r3, [r3, #8]
 800de6a:	89ba      	ldrh	r2, [r7, #12]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d204      	bcs.n	800de7a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800de70:	89bb      	ldrh	r3, [r7, #12]
 800de72:	4619      	mov	r1, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7f8 fe2d 	bl	8006ad4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	895b      	ldrh	r3, [r3, #10]
 800de7e:	89fa      	ldrh	r2, [r7, #14]
 800de80:	429a      	cmp	r2, r3
 800de82:	d807      	bhi.n	800de94 <ip4_input+0x74>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	891b      	ldrh	r3, [r3, #8]
 800de88:	89ba      	ldrh	r2, [r7, #12]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d802      	bhi.n	800de94 <ip4_input+0x74>
 800de8e:	89fb      	ldrh	r3, [r7, #14]
 800de90:	2b13      	cmp	r3, #19
 800de92:	d804      	bhi.n	800de9e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7f8 ffa3 	bl	8006de0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e0db      	b.n	800e056 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	4a6f      	ldr	r2, [pc, #444]	; (800e060 <ip4_input+0x240>)
 800dea4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	4a6d      	ldr	r2, [pc, #436]	; (800e060 <ip4_input+0x240>)
 800deac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800deae:	4b6c      	ldr	r3, [pc, #432]	; (800e060 <ip4_input+0x240>)
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800deb6:	2be0      	cmp	r3, #224	; 0xe0
 800deb8:	d112      	bne.n	800dee0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d007      	beq.n	800deda <ip4_input+0xba>
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	3304      	adds	r3, #4
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <ip4_input+0xba>
      netif = inp;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	613b      	str	r3, [r7, #16]
 800ded8:	e02a      	b.n	800df30 <ip4_input+0x110>
    } else {
      netif = NULL;
 800deda:	2300      	movs	r3, #0
 800dedc:	613b      	str	r3, [r7, #16]
 800dede:	e027      	b.n	800df30 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dee0:	6838      	ldr	r0, [r7, #0]
 800dee2:	f7ff ff73 	bl	800ddcc <ip4_input_accept>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <ip4_input+0xd2>
      netif = inp;
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	613b      	str	r3, [r7, #16]
 800def0:	e01e      	b.n	800df30 <ip4_input+0x110>
    } else {
      netif = NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800def6:	4b5a      	ldr	r3, [pc, #360]	; (800e060 <ip4_input+0x240>)
 800def8:	695b      	ldr	r3, [r3, #20]
 800defa:	b2db      	uxtb	r3, r3
 800defc:	2b7f      	cmp	r3, #127	; 0x7f
 800defe:	d017      	beq.n	800df30 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800df00:	4b58      	ldr	r3, [pc, #352]	; (800e064 <ip4_input+0x244>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	613b      	str	r3, [r7, #16]
 800df06:	e00e      	b.n	800df26 <ip4_input+0x106>
          if (netif == inp) {
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d006      	beq.n	800df1e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800df10:	6938      	ldr	r0, [r7, #16]
 800df12:	f7ff ff5b 	bl	800ddcc <ip4_input_accept>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d108      	bne.n	800df2e <ip4_input+0x10e>
 800df1c:	e000      	b.n	800df20 <ip4_input+0x100>
            continue;
 800df1e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	613b      	str	r3, [r7, #16]
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1ed      	bne.n	800df08 <ip4_input+0xe8>
 800df2c:	e000      	b.n	800df30 <ip4_input+0x110>
            break;
 800df2e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df30:	4b4b      	ldr	r3, [pc, #300]	; (800e060 <ip4_input+0x240>)
 800df32:	691b      	ldr	r3, [r3, #16]
 800df34:	6839      	ldr	r1, [r7, #0]
 800df36:	4618      	mov	r0, r3
 800df38:	f000 f96e 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d105      	bne.n	800df4e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800df42:	4b47      	ldr	r3, [pc, #284]	; (800e060 <ip4_input+0x240>)
 800df44:	691b      	ldr	r3, [r3, #16]
 800df46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df4a:	2be0      	cmp	r3, #224	; 0xe0
 800df4c:	d104      	bne.n	800df58 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7f8 ff46 	bl	8006de0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800df54:	2300      	movs	r3, #0
 800df56:	e07e      	b.n	800e056 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d104      	bne.n	800df68 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7f8 ff3e 	bl	8006de0 <pbuf_free>
    return ERR_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	e076      	b.n	800e056 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	88db      	ldrh	r3, [r3, #6]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	461a      	mov	r2, r3
 800df70:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800df74:	4013      	ands	r3, r2
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00b      	beq.n	800df92 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fc92 	bl	800e8a4 <ip4_reass>
 800df80:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <ip4_input+0x16c>
      return ERR_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	e064      	b.n	800e056 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800df92:	4a33      	ldr	r2, [pc, #204]	; (800e060 <ip4_input+0x240>)
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800df98:	4a31      	ldr	r2, [pc, #196]	; (800e060 <ip4_input+0x240>)
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800df9e:	4a30      	ldr	r2, [pc, #192]	; (800e060 <ip4_input+0x240>)
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	f003 030f 	and.w	r3, r3, #15
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	4b2a      	ldr	r3, [pc, #168]	; (800e060 <ip4_input+0x240>)
 800dfb6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dfb8:	89fb      	ldrh	r3, [r7, #14]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7f8 fe89 	bl	8006cd4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	7a5b      	ldrb	r3, [r3, #9]
 800dfc6:	2b11      	cmp	r3, #17
 800dfc8:	d006      	beq.n	800dfd8 <ip4_input+0x1b8>
 800dfca:	2b11      	cmp	r3, #17
 800dfcc:	dc13      	bgt.n	800dff6 <ip4_input+0x1d6>
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d00c      	beq.n	800dfec <ip4_input+0x1cc>
 800dfd2:	2b06      	cmp	r3, #6
 800dfd4:	d005      	beq.n	800dfe2 <ip4_input+0x1c2>
 800dfd6:	e00e      	b.n	800dff6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7fe fc68 	bl	800c8b0 <udp_input>
        break;
 800dfe0:	e026      	b.n	800e030 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dfe2:	6839      	ldr	r1, [r7, #0]
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7fa fd23 	bl	8008a30 <tcp_input>
        break;
 800dfea:	e021      	b.n	800e030 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dfec:	6839      	ldr	r1, [r7, #0]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7ff fcee 	bl	800d9d0 <icmp_input>
        break;
 800dff4:	e01c      	b.n	800e030 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dff6:	4b1a      	ldr	r3, [pc, #104]	; (800e060 <ip4_input+0x240>)
 800dff8:	695b      	ldr	r3, [r3, #20]
 800dffa:	6939      	ldr	r1, [r7, #16]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 f90b 	bl	800e218 <ip4_addr_isbroadcast_u32>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10f      	bne.n	800e028 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e008:	4b15      	ldr	r3, [pc, #84]	; (800e060 <ip4_input+0x240>)
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e010:	2be0      	cmp	r3, #224	; 0xe0
 800e012:	d009      	beq.n	800e028 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e018:	4619      	mov	r1, r3
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7f8 fecd 	bl	8006dba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e020:	2102      	movs	r1, #2
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff fdd8 	bl	800dbd8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7f8 fed9 	bl	8006de0 <pbuf_free>
        break;
 800e02e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e030:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <ip4_input+0x240>)
 800e032:	2200      	movs	r2, #0
 800e034:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e036:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <ip4_input+0x240>)
 800e038:	2200      	movs	r2, #0
 800e03a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e03c:	4b08      	ldr	r3, [pc, #32]	; (800e060 <ip4_input+0x240>)
 800e03e:	2200      	movs	r2, #0
 800e040:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e042:	4b07      	ldr	r3, [pc, #28]	; (800e060 <ip4_input+0x240>)
 800e044:	2200      	movs	r2, #0
 800e046:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e048:	4b05      	ldr	r3, [pc, #20]	; (800e060 <ip4_input+0x240>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e04e:	4b04      	ldr	r3, [pc, #16]	; (800e060 <ip4_input+0x240>)
 800e050:	2200      	movs	r2, #0
 800e052:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	2000525c 	.word	0x2000525c
 800e064:	200087c0 	.word	0x200087c0

0800e068 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b08a      	sub	sp, #40	; 0x28
 800e06c:	af04      	add	r7, sp, #16
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d009      	beq.n	800e094 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <ip4_output_if+0x26>
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d102      	bne.n	800e094 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	3304      	adds	r3, #4
 800e092:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e094:	78fa      	ldrb	r2, [r7, #3]
 800e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e098:	9302      	str	r3, [sp, #8]
 800e09a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e09e:	9301      	str	r3, [sp, #4]
 800e0a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	6979      	ldr	r1, [r7, #20]
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f000 f805 	bl	800e0bc <ip4_output_if_src>
 800e0b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3718      	adds	r7, #24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
 800e0c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	7b9b      	ldrb	r3, [r3, #14]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d006      	beq.n	800e0e0 <ip4_output_if_src+0x24>
 800e0d2:	4b4b      	ldr	r3, [pc, #300]	; (800e200 <ip4_output_if_src+0x144>)
 800e0d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e0d8:	494a      	ldr	r1, [pc, #296]	; (800e204 <ip4_output_if_src+0x148>)
 800e0da:	484b      	ldr	r0, [pc, #300]	; (800e208 <ip4_output_if_src+0x14c>)
 800e0dc:	f001 f8e0 	bl	800f2a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d060      	beq.n	800e1a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e0e6:	2314      	movs	r3, #20
 800e0e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e0ea:	2114      	movs	r1, #20
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f7f8 fde1 	bl	8006cb4 <pbuf_add_header>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e0f8:	f06f 0301 	mvn.w	r3, #1
 800e0fc:	e07c      	b.n	800e1f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	895b      	ldrh	r3, [r3, #10]
 800e108:	2b13      	cmp	r3, #19
 800e10a:	d806      	bhi.n	800e11a <ip4_output_if_src+0x5e>
 800e10c:	4b3c      	ldr	r3, [pc, #240]	; (800e200 <ip4_output_if_src+0x144>)
 800e10e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e112:	493e      	ldr	r1, [pc, #248]	; (800e20c <ip4_output_if_src+0x150>)
 800e114:	483c      	ldr	r0, [pc, #240]	; (800e208 <ip4_output_if_src+0x14c>)
 800e116:	f001 f8c3 	bl	800f2a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	78fa      	ldrb	r2, [r7, #3]
 800e11e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e126:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e130:	8b7b      	ldrh	r3, [r7, #26]
 800e132:	089b      	lsrs	r3, r3, #2
 800e134:	b29b      	uxth	r3, r3
 800e136:	b2db      	uxtb	r3, r3
 800e138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e13c:	b2da      	uxtb	r2, r3
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e148:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	891b      	ldrh	r3, [r3, #8]
 800e14e:	4618      	mov	r0, r3
 800e150:	f7f7 fb08 	bl	8005764 <lwip_htons>
 800e154:	4603      	mov	r3, r0
 800e156:	461a      	mov	r2, r3
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	2200      	movs	r2, #0
 800e160:	719a      	strb	r2, [r3, #6]
 800e162:	2200      	movs	r2, #0
 800e164:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e166:	4b2a      	ldr	r3, [pc, #168]	; (800e210 <ip4_output_if_src+0x154>)
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f7 fafa 	bl	8005764 <lwip_htons>
 800e170:	4603      	mov	r3, r0
 800e172:	461a      	mov	r2, r3
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e178:	4b25      	ldr	r3, [pc, #148]	; (800e210 <ip4_output_if_src+0x154>)
 800e17a:	881b      	ldrh	r3, [r3, #0]
 800e17c:	3301      	adds	r3, #1
 800e17e:	b29a      	uxth	r2, r3
 800e180:	4b23      	ldr	r3, [pc, #140]	; (800e210 <ip4_output_if_src+0x154>)
 800e182:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d104      	bne.n	800e194 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e18a:	4b22      	ldr	r3, [pc, #136]	; (800e214 <ip4_output_if_src+0x158>)
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	60da      	str	r2, [r3, #12]
 800e192:	e003      	b.n	800e19c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	729a      	strb	r2, [r3, #10]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	72da      	strb	r2, [r3, #11]
 800e1a6:	e00f      	b.n	800e1c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	895b      	ldrh	r3, [r3, #10]
 800e1ac:	2b13      	cmp	r3, #19
 800e1ae:	d802      	bhi.n	800e1b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e1b0:	f06f 0301 	mvn.w	r3, #1
 800e1b4:	e020      	b.n	800e1f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e1c2:	f107 0314 	add.w	r3, r7, #20
 800e1c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00c      	beq.n	800e1ea <ip4_output_if_src+0x12e>
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	891a      	ldrh	r2, [r3, #8]
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d906      	bls.n	800e1ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f000 fd53 	bl	800ec8c <ip4_frag>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	e006      	b.n	800e1f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	695b      	ldr	r3, [r3, #20]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	68f9      	ldr	r1, [r7, #12]
 800e1f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1f4:	4798      	blx	r3
 800e1f6:	4603      	mov	r3, r0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3720      	adds	r7, #32
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	08012764 	.word	0x08012764
 800e204:	08012798 	.word	0x08012798
 800e208:	080127a4 	.word	0x080127a4
 800e20c:	080127cc 	.word	0x080127cc
 800e210:	2000891e 	.word	0x2000891e
 800e214:	08012bac 	.word	0x08012bac

0800e218 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22c:	d002      	beq.n	800e234 <ip4_addr_isbroadcast_u32+0x1c>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d101      	bne.n	800e238 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e234:	2301      	movs	r3, #1
 800e236:	e02a      	b.n	800e28e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e23e:	f003 0302 	and.w	r3, r3, #2
 800e242:	2b00      	cmp	r3, #0
 800e244:	d101      	bne.n	800e24a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e246:	2300      	movs	r3, #0
 800e248:	e021      	b.n	800e28e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	3304      	adds	r3, #4
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	429a      	cmp	r2, r3
 800e254:	d101      	bne.n	800e25a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e256:	2300      	movs	r3, #0
 800e258:	e019      	b.n	800e28e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	3304      	adds	r3, #4
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	405a      	eors	r2, r3
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	3308      	adds	r3, #8
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4013      	ands	r3, r2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10d      	bne.n	800e28c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	3308      	adds	r3, #8
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	43da      	mvns	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	3308      	adds	r3, #8
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e284:	429a      	cmp	r2, r3
 800e286:	d101      	bne.n	800e28c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e288:	2301      	movs	r3, #1
 800e28a:	e000      	b.n	800e28e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e28c:	2300      	movs	r3, #0
  }
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
	...

0800e29c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2a6:	4b12      	ldr	r3, [pc, #72]	; (800e2f0 <ip_reass_tmr+0x54>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2ac:	e018      	b.n	800e2e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	7fdb      	ldrb	r3, [r3, #31]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00b      	beq.n	800e2ce <ip_reass_tmr+0x32>
      r->timer--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	7fdb      	ldrb	r3, [r3, #31]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	60fb      	str	r3, [r7, #12]
 800e2cc:	e008      	b.n	800e2e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e2d8:	68b9      	ldr	r1, [r7, #8]
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f80a 	bl	800e2f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1e3      	bne.n	800e2ae <ip_reass_tmr+0x12>
    }
  }
}
 800e2e6:	bf00      	nop
 800e2e8:	bf00      	nop
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20008920 	.word	0x20008920

0800e2f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b088      	sub	sp, #32
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e2fe:	2300      	movs	r3, #0
 800e300:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e302:	683a      	ldr	r2, [r7, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	429a      	cmp	r2, r3
 800e308:	d105      	bne.n	800e316 <ip_reass_free_complete_datagram+0x22>
 800e30a:	4b45      	ldr	r3, [pc, #276]	; (800e420 <ip_reass_free_complete_datagram+0x12c>)
 800e30c:	22ab      	movs	r2, #171	; 0xab
 800e30e:	4945      	ldr	r1, [pc, #276]	; (800e424 <ip_reass_free_complete_datagram+0x130>)
 800e310:	4845      	ldr	r0, [pc, #276]	; (800e428 <ip_reass_free_complete_datagram+0x134>)
 800e312:	f000 ffc5 	bl	800f2a0 <iprintf>
  if (prev != NULL) {
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00a      	beq.n	800e332 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	429a      	cmp	r2, r3
 800e324:	d005      	beq.n	800e332 <ip_reass_free_complete_datagram+0x3e>
 800e326:	4b3e      	ldr	r3, [pc, #248]	; (800e420 <ip_reass_free_complete_datagram+0x12c>)
 800e328:	22ad      	movs	r2, #173	; 0xad
 800e32a:	4940      	ldr	r1, [pc, #256]	; (800e42c <ip_reass_free_complete_datagram+0x138>)
 800e32c:	483e      	ldr	r0, [pc, #248]	; (800e428 <ip_reass_free_complete_datagram+0x134>)
 800e32e:	f000 ffb7 	bl	800f2a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	889b      	ldrh	r3, [r3, #4]
 800e33e:	b29b      	uxth	r3, r3
 800e340:	2b00      	cmp	r3, #0
 800e342:	d12a      	bne.n	800e39a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	6858      	ldr	r0, [r3, #4]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3308      	adds	r3, #8
 800e35a:	2214      	movs	r2, #20
 800e35c:	4619      	mov	r1, r3
 800e35e:	f001 f879 	bl	800f454 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e362:	2101      	movs	r1, #1
 800e364:	69b8      	ldr	r0, [r7, #24]
 800e366:	f7ff fc47 	bl	800dbf8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e36a:	69b8      	ldr	r0, [r7, #24]
 800e36c:	f7f8 fdc0 	bl	8006ef0 <pbuf_clen>
 800e370:	4603      	mov	r3, r0
 800e372:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e374:	8bfa      	ldrh	r2, [r7, #30]
 800e376:	8a7b      	ldrh	r3, [r7, #18]
 800e378:	4413      	add	r3, r2
 800e37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e37e:	db05      	blt.n	800e38c <ip_reass_free_complete_datagram+0x98>
 800e380:	4b27      	ldr	r3, [pc, #156]	; (800e420 <ip_reass_free_complete_datagram+0x12c>)
 800e382:	22bc      	movs	r2, #188	; 0xbc
 800e384:	492a      	ldr	r1, [pc, #168]	; (800e430 <ip_reass_free_complete_datagram+0x13c>)
 800e386:	4828      	ldr	r0, [pc, #160]	; (800e428 <ip_reass_free_complete_datagram+0x134>)
 800e388:	f000 ff8a 	bl	800f2a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e38c:	8bfa      	ldrh	r2, [r7, #30]
 800e38e:	8a7b      	ldrh	r3, [r7, #18]
 800e390:	4413      	add	r3, r2
 800e392:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e394:	69b8      	ldr	r0, [r7, #24]
 800e396:	f7f8 fd23 	bl	8006de0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3a0:	e01f      	b.n	800e3e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7f8 fd9c 	bl	8006ef0 <pbuf_clen>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3bc:	8bfa      	ldrh	r2, [r7, #30]
 800e3be:	8a7b      	ldrh	r3, [r7, #18]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3c6:	db05      	blt.n	800e3d4 <ip_reass_free_complete_datagram+0xe0>
 800e3c8:	4b15      	ldr	r3, [pc, #84]	; (800e420 <ip_reass_free_complete_datagram+0x12c>)
 800e3ca:	22cc      	movs	r2, #204	; 0xcc
 800e3cc:	4918      	ldr	r1, [pc, #96]	; (800e430 <ip_reass_free_complete_datagram+0x13c>)
 800e3ce:	4816      	ldr	r0, [pc, #88]	; (800e428 <ip_reass_free_complete_datagram+0x134>)
 800e3d0:	f000 ff66 	bl	800f2a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3d4:	8bfa      	ldrh	r2, [r7, #30]
 800e3d6:	8a7b      	ldrh	r3, [r7, #18]
 800e3d8:	4413      	add	r3, r2
 800e3da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f7f8 fcff 	bl	8006de0 <pbuf_free>
  while (p != NULL) {
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1dc      	bne.n	800e3a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f8c2 	bl	800e574 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e3f0:	4b10      	ldr	r3, [pc, #64]	; (800e434 <ip_reass_free_complete_datagram+0x140>)
 800e3f2:	881b      	ldrh	r3, [r3, #0]
 800e3f4:	8bfa      	ldrh	r2, [r7, #30]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d905      	bls.n	800e406 <ip_reass_free_complete_datagram+0x112>
 800e3fa:	4b09      	ldr	r3, [pc, #36]	; (800e420 <ip_reass_free_complete_datagram+0x12c>)
 800e3fc:	22d2      	movs	r2, #210	; 0xd2
 800e3fe:	490e      	ldr	r1, [pc, #56]	; (800e438 <ip_reass_free_complete_datagram+0x144>)
 800e400:	4809      	ldr	r0, [pc, #36]	; (800e428 <ip_reass_free_complete_datagram+0x134>)
 800e402:	f000 ff4d 	bl	800f2a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e406:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <ip_reass_free_complete_datagram+0x140>)
 800e408:	881a      	ldrh	r2, [r3, #0]
 800e40a:	8bfb      	ldrh	r3, [r7, #30]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	b29a      	uxth	r2, r3
 800e410:	4b08      	ldr	r3, [pc, #32]	; (800e434 <ip_reass_free_complete_datagram+0x140>)
 800e412:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e414:	8bfb      	ldrh	r3, [r7, #30]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3720      	adds	r7, #32
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	080127fc 	.word	0x080127fc
 800e424:	08012838 	.word	0x08012838
 800e428:	08012844 	.word	0x08012844
 800e42c:	0801286c 	.word	0x0801286c
 800e430:	08012880 	.word	0x08012880
 800e434:	20008924 	.word	0x20008924
 800e438:	080128a0 	.word	0x080128a0

0800e43c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08a      	sub	sp, #40	; 0x28
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e446:	2300      	movs	r3, #0
 800e448:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e44a:	2300      	movs	r3, #0
 800e44c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e452:	2300      	movs	r3, #0
 800e454:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e45a:	4b28      	ldr	r3, [pc, #160]	; (800e4fc <ip_reass_remove_oldest_datagram+0xc0>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e460:	e030      	b.n	800e4c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e464:	695a      	ldr	r2, [r3, #20]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d10c      	bne.n	800e488 <ip_reass_remove_oldest_datagram+0x4c>
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	699a      	ldr	r2, [r3, #24]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	429a      	cmp	r2, r3
 800e478:	d106      	bne.n	800e488 <ip_reass_remove_oldest_datagram+0x4c>
 800e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47c:	899a      	ldrh	r2, [r3, #12]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	889b      	ldrh	r3, [r3, #4]
 800e482:	b29b      	uxth	r3, r3
 800e484:	429a      	cmp	r2, r3
 800e486:	d014      	beq.n	800e4b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	3301      	adds	r3, #1
 800e48c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e48e:	6a3b      	ldr	r3, [r7, #32]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d104      	bne.n	800e49e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	61bb      	str	r3, [r7, #24]
 800e49c:	e009      	b.n	800e4b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a0:	7fda      	ldrb	r2, [r3, #31]
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	7fdb      	ldrb	r3, [r3, #31]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d803      	bhi.n	800e4b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1cb      	bne.n	800e462 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d008      	beq.n	800e4e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e4d0:	69b9      	ldr	r1, [r7, #24]
 800e4d2:	6a38      	ldr	r0, [r7, #32]
 800e4d4:	f7ff ff0e 	bl	800e2f4 <ip_reass_free_complete_datagram>
 800e4d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4413      	add	r3, r2
 800e4e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e4e2:	697a      	ldr	r2, [r7, #20]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	da02      	bge.n	800e4f0 <ip_reass_remove_oldest_datagram+0xb4>
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	dcac      	bgt.n	800e44a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e4f0:	697b      	ldr	r3, [r7, #20]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3728      	adds	r7, #40	; 0x28
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	20008920 	.word	0x20008920

0800e500 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e50a:	2004      	movs	r0, #4
 800e50c:	f7f7 fda2 	bl	8006054 <memp_malloc>
 800e510:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d110      	bne.n	800e53a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f7ff ff8e 	bl	800e43c <ip_reass_remove_oldest_datagram>
 800e520:	4602      	mov	r2, r0
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	4293      	cmp	r3, r2
 800e526:	dc03      	bgt.n	800e530 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e528:	2004      	movs	r0, #4
 800e52a:	f7f7 fd93 	bl	8006054 <memp_malloc>
 800e52e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d101      	bne.n	800e53a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e536:	2300      	movs	r3, #0
 800e538:	e016      	b.n	800e568 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e53a:	2220      	movs	r2, #32
 800e53c:	2100      	movs	r1, #0
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f000 ff13 	bl	800f36a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	220f      	movs	r2, #15
 800e548:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e54a:	4b09      	ldr	r3, [pc, #36]	; (800e570 <ip_reass_enqueue_new_datagram+0x70>)
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e552:	4a07      	ldr	r2, [pc, #28]	; (800e570 <ip_reass_enqueue_new_datagram+0x70>)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3308      	adds	r3, #8
 800e55c:	2214      	movs	r2, #20
 800e55e:	6879      	ldr	r1, [r7, #4]
 800e560:	4618      	mov	r0, r3
 800e562:	f000 ff77 	bl	800f454 <memcpy>
  return ipr;
 800e566:	68fb      	ldr	r3, [r7, #12]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20008920 	.word	0x20008920

0800e574 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e57e:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <ip_reass_dequeue_datagram+0x4c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	429a      	cmp	r2, r3
 800e586:	d104      	bne.n	800e592 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a0c      	ldr	r2, [pc, #48]	; (800e5c0 <ip_reass_dequeue_datagram+0x4c>)
 800e58e:	6013      	str	r3, [r2, #0]
 800e590:	e00d      	b.n	800e5ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d106      	bne.n	800e5a6 <ip_reass_dequeue_datagram+0x32>
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <ip_reass_dequeue_datagram+0x50>)
 800e59a:	f240 1245 	movw	r2, #325	; 0x145
 800e59e:	490a      	ldr	r1, [pc, #40]	; (800e5c8 <ip_reass_dequeue_datagram+0x54>)
 800e5a0:	480a      	ldr	r0, [pc, #40]	; (800e5cc <ip_reass_dequeue_datagram+0x58>)
 800e5a2:	f000 fe7d 	bl	800f2a0 <iprintf>
    prev->next = ipr->next;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5ae:	6879      	ldr	r1, [r7, #4]
 800e5b0:	2004      	movs	r0, #4
 800e5b2:	f7f7 fdbf 	bl	8006134 <memp_free>
}
 800e5b6:	bf00      	nop
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20008920 	.word	0x20008920
 800e5c4:	080127fc 	.word	0x080127fc
 800e5c8:	080128c4 	.word	0x080128c4
 800e5cc:	08012844 	.word	0x08012844

0800e5d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08c      	sub	sp, #48	; 0x30
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	885b      	ldrh	r3, [r3, #2]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7f7 f8b7 	bl	8005764 <lwip_htons>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	f003 030f 	and.w	r3, r3, #15
 800e602:	b2db      	uxtb	r3, r3
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e608:	7e7b      	ldrb	r3, [r7, #25]
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	8b7a      	ldrh	r2, [r7, #26]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d202      	bcs.n	800e618 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e612:	f04f 33ff 	mov.w	r3, #4294967295
 800e616:	e135      	b.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e618:	7e7b      	ldrb	r3, [r7, #25]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	8b7a      	ldrh	r2, [r7, #26]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	88db      	ldrh	r3, [r3, #6]
 800e626:	b29b      	uxth	r3, r3
 800e628:	4618      	mov	r0, r3
 800e62a:	f7f7 f89b 	bl	8005764 <lwip_htons>
 800e62e:	4603      	mov	r3, r0
 800e630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e634:	b29b      	uxth	r3, r3
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	2200      	movs	r2, #0
 800e644:	701a      	strb	r2, [r3, #0]
 800e646:	2200      	movs	r2, #0
 800e648:	705a      	strb	r2, [r3, #1]
 800e64a:	2200      	movs	r2, #0
 800e64c:	709a      	strb	r2, [r3, #2]
 800e64e:	2200      	movs	r2, #0
 800e650:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e654:	8afa      	ldrh	r2, [r7, #22]
 800e656:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e658:	8afa      	ldrh	r2, [r7, #22]
 800e65a:	8b7b      	ldrh	r3, [r7, #26]
 800e65c:	4413      	add	r3, r2
 800e65e:	b29a      	uxth	r2, r3
 800e660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e662:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	88db      	ldrh	r3, [r3, #6]
 800e668:	b29b      	uxth	r3, r3
 800e66a:	8afa      	ldrh	r2, [r7, #22]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d902      	bls.n	800e676 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e670:	f04f 33ff 	mov.w	r3, #4294967295
 800e674:	e106      	b.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	627b      	str	r3, [r7, #36]	; 0x24
 800e67c:	e068      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e686:	889b      	ldrh	r3, [r3, #4]
 800e688:	b29a      	uxth	r2, r3
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	889b      	ldrh	r3, [r3, #4]
 800e68e:	b29b      	uxth	r3, r3
 800e690:	429a      	cmp	r2, r3
 800e692:	d235      	bcs.n	800e700 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e698:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d020      	beq.n	800e6e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	889b      	ldrh	r3, [r3, #4]
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	88db      	ldrh	r3, [r3, #6]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d307      	bcc.n	800e6c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	88db      	ldrh	r3, [r3, #6]
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	889b      	ldrh	r3, [r3, #4]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d902      	bls.n	800e6c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c4:	e0de      	b.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	88db      	ldrh	r3, [r3, #6]
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d4:	889b      	ldrh	r3, [r3, #4]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d03d      	beq.n	800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e6e0:	e03a      	b.n	800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	88db      	ldrh	r3, [r3, #6]
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	889b      	ldrh	r3, [r3, #4]
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d902      	bls.n	800e6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f6:	e0c5      	b.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	605a      	str	r2, [r3, #4]
      break;
 800e6fe:	e02b      	b.n	800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	889b      	ldrh	r3, [r3, #4]
 800e704:	b29a      	uxth	r2, r3
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	889b      	ldrh	r3, [r3, #4]
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d102      	bne.n	800e716 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e710:	f04f 33ff 	mov.w	r3, #4294967295
 800e714:	e0b6      	b.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	889b      	ldrh	r3, [r3, #4]
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	88db      	ldrh	r3, [r3, #6]
 800e720:	b29b      	uxth	r3, r3
 800e722:	429a      	cmp	r2, r3
 800e724:	d202      	bcs.n	800e72c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e726:	f04f 33ff 	mov.w	r3, #4294967295
 800e72a:	e0ab      	b.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d009      	beq.n	800e746 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	88db      	ldrh	r3, [r3, #6]
 800e736:	b29a      	uxth	r2, r3
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	889b      	ldrh	r3, [r3, #4]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	429a      	cmp	r2, r3
 800e740:	d001      	beq.n	800e746 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	2b00      	cmp	r3, #0
 800e754:	d193      	bne.n	800e67e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e756:	e000      	b.n	800e75a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e758:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d12d      	bne.n	800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	d01c      	beq.n	800e7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	88db      	ldrh	r3, [r3, #6]
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76e:	889b      	ldrh	r3, [r3, #4]
 800e770:	b29b      	uxth	r3, r3
 800e772:	429a      	cmp	r2, r3
 800e774:	d906      	bls.n	800e784 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e776:	4b45      	ldr	r3, [pc, #276]	; (800e88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e778:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e77c:	4944      	ldr	r1, [pc, #272]	; (800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e77e:	4845      	ldr	r0, [pc, #276]	; (800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e780:	f000 fd8e 	bl	800f2a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e786:	68ba      	ldr	r2, [r7, #8]
 800e788:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78c:	88db      	ldrh	r3, [r3, #6]
 800e78e:	b29a      	uxth	r2, r3
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	889b      	ldrh	r3, [r3, #4]
 800e794:	b29b      	uxth	r3, r3
 800e796:	429a      	cmp	r2, r3
 800e798:	d010      	beq.n	800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	623b      	str	r3, [r7, #32]
 800e79e:	e00d      	b.n	800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d006      	beq.n	800e7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7a8:	4b38      	ldr	r3, [pc, #224]	; (800e88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7aa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e7ae:	493a      	ldr	r1, [pc, #232]	; (800e898 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e7b0:	4838      	ldr	r0, [pc, #224]	; (800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7b2:	f000 fd75 	bl	800f2a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	7f9b      	ldrb	r3, [r3, #30]
 800e7c6:	f003 0301 	and.w	r3, r3, #1
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d059      	beq.n	800e882 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e7ce:	6a3b      	ldr	r3, [r7, #32]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d04f      	beq.n	800e874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d006      	beq.n	800e7ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	889b      	ldrh	r3, [r3, #4]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d002      	beq.n	800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	623b      	str	r3, [r7, #32]
 800e7ee:	e041      	b.n	800e874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e7fa:	e012      	b.n	800e822 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e804:	88db      	ldrh	r3, [r3, #6]
 800e806:	b29a      	uxth	r2, r3
 800e808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80a:	889b      	ldrh	r3, [r3, #4]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	429a      	cmp	r2, r3
 800e810:	d002      	beq.n	800e818 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e812:	2300      	movs	r3, #0
 800e814:	623b      	str	r3, [r7, #32]
            break;
 800e816:	e007      	b.n	800e828 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1e9      	bne.n	800e7fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e828:	6a3b      	ldr	r3, [r7, #32]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d022      	beq.n	800e874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d106      	bne.n	800e844 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e836:	4b15      	ldr	r3, [pc, #84]	; (800e88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e838:	f240 12df 	movw	r2, #479	; 0x1df
 800e83c:	4917      	ldr	r1, [pc, #92]	; (800e89c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e83e:	4815      	ldr	r0, [pc, #84]	; (800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e840:	f000 fd2e 	bl	800f2a0 <iprintf>
          LWIP_ASSERT("sanity check",
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d106      	bne.n	800e85e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e850:	4b0e      	ldr	r3, [pc, #56]	; (800e88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e852:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e856:	4911      	ldr	r1, [pc, #68]	; (800e89c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e858:	480e      	ldr	r0, [pc, #56]	; (800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e85a:	f000 fd21 	bl	800f2a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d006      	beq.n	800e874 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e866:	4b09      	ldr	r3, [pc, #36]	; (800e88c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e868:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e86c:	490c      	ldr	r1, [pc, #48]	; (800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e86e:	4809      	ldr	r0, [pc, #36]	; (800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e870:	f000 fd16 	bl	800f2a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	2b00      	cmp	r3, #0
 800e878:	bf14      	ite	ne
 800e87a:	2301      	movne	r3, #1
 800e87c:	2300      	moveq	r3, #0
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	e000      	b.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3730      	adds	r7, #48	; 0x30
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	080127fc 	.word	0x080127fc
 800e890:	080128e0 	.word	0x080128e0
 800e894:	08012844 	.word	0x08012844
 800e898:	08012900 	.word	0x08012900
 800e89c:	08012938 	.word	0x08012938
 800e8a0:	08012948 	.word	0x08012948

0800e8a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b08e      	sub	sp, #56	; 0x38
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	f003 030f 	and.w	r3, r3, #15
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b14      	cmp	r3, #20
 800e8c2:	f040 8171 	bne.w	800eba8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	88db      	ldrh	r3, [r3, #6]
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7f6 ff49 	bl	8005764 <lwip_htons>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	00db      	lsls	r3, r3, #3
 800e8dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	885b      	ldrh	r3, [r3, #2]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7f6 ff3d 	bl	8005764 <lwip_htons>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	f003 030f 	and.w	r3, r3, #15
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e8fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e902:	b29b      	uxth	r3, r3
 800e904:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e906:	429a      	cmp	r2, r3
 800e908:	f0c0 8150 	bcc.w	800ebac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e90c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e910:	b29b      	uxth	r3, r3
 800e912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7f8 fae9 	bl	8006ef0 <pbuf_clen>
 800e91e:	4603      	mov	r3, r0
 800e920:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e922:	4b8c      	ldr	r3, [pc, #560]	; (800eb54 <ip4_reass+0x2b0>)
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	461a      	mov	r2, r3
 800e928:	8c3b      	ldrh	r3, [r7, #32]
 800e92a:	4413      	add	r3, r2
 800e92c:	2b0a      	cmp	r3, #10
 800e92e:	dd10      	ble.n	800e952 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e930:	8c3b      	ldrh	r3, [r7, #32]
 800e932:	4619      	mov	r1, r3
 800e934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e936:	f7ff fd81 	bl	800e43c <ip_reass_remove_oldest_datagram>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 8137 	beq.w	800ebb0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e942:	4b84      	ldr	r3, [pc, #528]	; (800eb54 <ip4_reass+0x2b0>)
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	8c3b      	ldrh	r3, [r7, #32]
 800e94a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e94c:	2b0a      	cmp	r3, #10
 800e94e:	f300 812f 	bgt.w	800ebb0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e952:	4b81      	ldr	r3, [pc, #516]	; (800eb58 <ip4_reass+0x2b4>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	633b      	str	r3, [r7, #48]	; 0x30
 800e958:	e015      	b.n	800e986 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	695a      	ldr	r2, [r3, #20]
 800e95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	429a      	cmp	r2, r3
 800e964:	d10c      	bne.n	800e980 <ip4_reass+0xdc>
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	699a      	ldr	r2, [r3, #24]
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d106      	bne.n	800e980 <ip4_reass+0xdc>
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	899a      	ldrh	r2, [r3, #12]
 800e976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e978:	889b      	ldrh	r3, [r3, #4]
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d006      	beq.n	800e98e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	633b      	str	r3, [r7, #48]	; 0x30
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1e6      	bne.n	800e95a <ip4_reass+0xb6>
 800e98c:	e000      	b.n	800e990 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e98e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e992:	2b00      	cmp	r3, #0
 800e994:	d109      	bne.n	800e9aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e996:	8c3b      	ldrh	r3, [r7, #32]
 800e998:	4619      	mov	r1, r3
 800e99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e99c:	f7ff fdb0 	bl	800e500 <ip_reass_enqueue_new_datagram>
 800e9a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d11c      	bne.n	800e9e2 <ip4_reass+0x13e>
      goto nullreturn;
 800e9a8:	e105      	b.n	800ebb6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	88db      	ldrh	r3, [r3, #6]
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7f6 fed7 	bl	8005764 <lwip_htons>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d110      	bne.n	800e9e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c2:	89db      	ldrh	r3, [r3, #14]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f6 fecd 	bl	8005764 <lwip_htons>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d006      	beq.n	800e9e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	2214      	movs	r2, #20
 800e9da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 fd39 	bl	800f454 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	88db      	ldrh	r3, [r3, #6]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	f003 0320 	and.w	r3, r3, #32
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	bf0c      	ite	eq
 800e9f0:	2301      	moveq	r3, #1
 800e9f2:	2300      	movne	r3, #0
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00e      	beq.n	800ea1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e9fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea02:	4413      	add	r3, r2
 800ea04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea06:	8b7a      	ldrh	r2, [r7, #26]
 800ea08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	f0c0 80a0 	bcc.w	800eb50 <ip4_reass+0x2ac>
 800ea10:	8b7b      	ldrh	r3, [r7, #26]
 800ea12:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ea16:	4293      	cmp	r3, r2
 800ea18:	f200 809a 	bhi.w	800eb50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea1c:	69fa      	ldr	r2, [r7, #28]
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea22:	f7ff fdd5 	bl	800e5d0 <ip_reass_chain_frag_into_datagram_and_validate>
 800ea26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2e:	f000 809b 	beq.w	800eb68 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea32:	4b48      	ldr	r3, [pc, #288]	; (800eb54 <ip4_reass+0x2b0>)
 800ea34:	881a      	ldrh	r2, [r3, #0]
 800ea36:	8c3b      	ldrh	r3, [r7, #32]
 800ea38:	4413      	add	r3, r2
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	4b45      	ldr	r3, [pc, #276]	; (800eb54 <ip4_reass+0x2b0>)
 800ea3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00d      	beq.n	800ea62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea4a:	4413      	add	r3, r2
 800ea4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	8a7a      	ldrh	r2, [r7, #18]
 800ea52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ea54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea56:	7f9b      	ldrb	r3, [r3, #30]
 800ea58:	f043 0301 	orr.w	r3, r3, #1
 800ea5c:	b2da      	uxtb	r2, r3
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d171      	bne.n	800eb4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	8b9b      	ldrh	r3, [r3, #28]
 800ea6c:	3314      	adds	r3, #20
 800ea6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	3308      	adds	r3, #8
 800ea86:	2214      	movs	r2, #20
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea8c:	f000 fce2 	bl	800f454 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ea90:	8a3b      	ldrh	r3, [r7, #16]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7f6 fe66 	bl	8005764 <lwip_htons>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	719a      	strb	r2, [r3, #6]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	2200      	movs	r2, #0
 800eaae:	729a      	strb	r2, [r3, #10]
 800eab0:	2200      	movs	r2, #0
 800eab2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eaba:	e00d      	b.n	800ead8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eac2:	2114      	movs	r1, #20
 800eac4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eac6:	f7f8 f905 	bl	8006cd4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eaca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7f8 fa49 	bl	8006f64 <pbuf_cat>
      r = iprh->next_pbuf;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ead8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1ee      	bne.n	800eabc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eade:	4b1e      	ldr	r3, [pc, #120]	; (800eb58 <ip4_reass+0x2b4>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d102      	bne.n	800eaee <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eae8:	2300      	movs	r3, #0
 800eaea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaec:	e010      	b.n	800eb10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eaee:	4b1a      	ldr	r3, [pc, #104]	; (800eb58 <ip4_reass+0x2b4>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaf4:	e007      	b.n	800eb06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d006      	beq.n	800eb0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f4      	bne.n	800eaf6 <ip4_reass+0x252>
 800eb0c:	e000      	b.n	800eb10 <ip4_reass+0x26c>
          break;
 800eb0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb14:	f7ff fd2e 	bl	800e574 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7f8 f9e9 	bl	8006ef0 <pbuf_clen>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb22:	4b0c      	ldr	r3, [pc, #48]	; (800eb54 <ip4_reass+0x2b0>)
 800eb24:	881b      	ldrh	r3, [r3, #0]
 800eb26:	8c3a      	ldrh	r2, [r7, #32]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d906      	bls.n	800eb3a <ip4_reass+0x296>
 800eb2c:	4b0b      	ldr	r3, [pc, #44]	; (800eb5c <ip4_reass+0x2b8>)
 800eb2e:	f240 229b 	movw	r2, #667	; 0x29b
 800eb32:	490b      	ldr	r1, [pc, #44]	; (800eb60 <ip4_reass+0x2bc>)
 800eb34:	480b      	ldr	r0, [pc, #44]	; (800eb64 <ip4_reass+0x2c0>)
 800eb36:	f000 fbb3 	bl	800f2a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb3a:	4b06      	ldr	r3, [pc, #24]	; (800eb54 <ip4_reass+0x2b0>)
 800eb3c:	881a      	ldrh	r2, [r3, #0]
 800eb3e:	8c3b      	ldrh	r3, [r7, #32]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	4b03      	ldr	r3, [pc, #12]	; (800eb54 <ip4_reass+0x2b0>)
 800eb46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	e038      	b.n	800ebbe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	e036      	b.n	800ebbe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800eb50:	bf00      	nop
 800eb52:	e00a      	b.n	800eb6a <ip4_reass+0x2c6>
 800eb54:	20008924 	.word	0x20008924
 800eb58:	20008920 	.word	0x20008920
 800eb5c:	080127fc 	.word	0x080127fc
 800eb60:	0801296c 	.word	0x0801296c
 800eb64:	08012844 	.word	0x08012844
    goto nullreturn_ipr;
 800eb68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d106      	bne.n	800eb7e <ip4_reass+0x2da>
 800eb70:	4b15      	ldr	r3, [pc, #84]	; (800ebc8 <ip4_reass+0x324>)
 800eb72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800eb76:	4915      	ldr	r1, [pc, #84]	; (800ebcc <ip4_reass+0x328>)
 800eb78:	4815      	ldr	r0, [pc, #84]	; (800ebd0 <ip4_reass+0x32c>)
 800eb7a:	f000 fb91 	bl	800f2a0 <iprintf>
  if (ipr->p == NULL) {
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d116      	bne.n	800ebb4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800eb86:	4b13      	ldr	r3, [pc, #76]	; (800ebd4 <ip4_reass+0x330>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d006      	beq.n	800eb9e <ip4_reass+0x2fa>
 800eb90:	4b0d      	ldr	r3, [pc, #52]	; (800ebc8 <ip4_reass+0x324>)
 800eb92:	f240 22ab 	movw	r2, #683	; 0x2ab
 800eb96:	4910      	ldr	r1, [pc, #64]	; (800ebd8 <ip4_reass+0x334>)
 800eb98:	480d      	ldr	r0, [pc, #52]	; (800ebd0 <ip4_reass+0x32c>)
 800eb9a:	f000 fb81 	bl	800f2a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800eb9e:	2100      	movs	r1, #0
 800eba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eba2:	f7ff fce7 	bl	800e574 <ip_reass_dequeue_datagram>
 800eba6:	e006      	b.n	800ebb6 <ip4_reass+0x312>
    goto nullreturn;
 800eba8:	bf00      	nop
 800ebaa:	e004      	b.n	800ebb6 <ip4_reass+0x312>
    goto nullreturn;
 800ebac:	bf00      	nop
 800ebae:	e002      	b.n	800ebb6 <ip4_reass+0x312>
      goto nullreturn;
 800ebb0:	bf00      	nop
 800ebb2:	e000      	b.n	800ebb6 <ip4_reass+0x312>
  }

nullreturn:
 800ebb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7f8 f912 	bl	8006de0 <pbuf_free>
  return NULL;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3738      	adds	r7, #56	; 0x38
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	080127fc 	.word	0x080127fc
 800ebcc:	08012988 	.word	0x08012988
 800ebd0:	08012844 	.word	0x08012844
 800ebd4:	20008920 	.word	0x20008920
 800ebd8:	08012994 	.word	0x08012994

0800ebdc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ebe0:	2005      	movs	r0, #5
 800ebe2:	f7f7 fa37 	bl	8006054 <memp_malloc>
 800ebe6:	4603      	mov	r3, r0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d106      	bne.n	800ec08 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ebfa:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ebfc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec00:	4906      	ldr	r1, [pc, #24]	; (800ec1c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec02:	4807      	ldr	r0, [pc, #28]	; (800ec20 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec04:	f000 fb4c 	bl	800f2a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec08:	6879      	ldr	r1, [r7, #4]
 800ec0a:	2005      	movs	r0, #5
 800ec0c:	f7f7 fa92 	bl	8006134 <memp_free>
}
 800ec10:	bf00      	nop
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	080127fc 	.word	0x080127fc
 800ec1c:	080129b4 	.word	0x080129b4
 800ec20:	08012844 	.word	0x08012844

0800ec24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d106      	bne.n	800ec44 <ipfrag_free_pbuf_custom+0x20>
 800ec36:	4b11      	ldr	r3, [pc, #68]	; (800ec7c <ipfrag_free_pbuf_custom+0x58>)
 800ec38:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ec3c:	4910      	ldr	r1, [pc, #64]	; (800ec80 <ipfrag_free_pbuf_custom+0x5c>)
 800ec3e:	4811      	ldr	r0, [pc, #68]	; (800ec84 <ipfrag_free_pbuf_custom+0x60>)
 800ec40:	f000 fb2e 	bl	800f2a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d006      	beq.n	800ec5a <ipfrag_free_pbuf_custom+0x36>
 800ec4c:	4b0b      	ldr	r3, [pc, #44]	; (800ec7c <ipfrag_free_pbuf_custom+0x58>)
 800ec4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ec52:	490d      	ldr	r1, [pc, #52]	; (800ec88 <ipfrag_free_pbuf_custom+0x64>)
 800ec54:	480b      	ldr	r0, [pc, #44]	; (800ec84 <ipfrag_free_pbuf_custom+0x60>)
 800ec56:	f000 fb23 	bl	800f2a0 <iprintf>
  if (pcr->original != NULL) {
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	695b      	ldr	r3, [r3, #20]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d004      	beq.n	800ec6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7f8 f8ba 	bl	8006de0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f7ff ffbd 	bl	800ebec <ip_frag_free_pbuf_custom_ref>
}
 800ec72:	bf00      	nop
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	080127fc 	.word	0x080127fc
 800ec80:	080129c0 	.word	0x080129c0
 800ec84:	08012844 	.word	0x08012844
 800ec88:	080129cc 	.word	0x080129cc

0800ec8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b094      	sub	sp, #80	; 0x50
 800ec90:	af02      	add	r7, sp, #8
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eca2:	3b14      	subs	r3, #20
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	da00      	bge.n	800ecaa <ip4_frag+0x1e>
 800eca8:	3307      	adds	r3, #7
 800ecaa:	10db      	asrs	r3, r3, #3
 800ecac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ecae:	2314      	movs	r3, #20
 800ecb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ecb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	f003 030f 	and.w	r3, r3, #15
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b14      	cmp	r3, #20
 800eccc:	d002      	beq.n	800ecd4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ecce:	f06f 0305 	mvn.w	r3, #5
 800ecd2:	e110      	b.n	800eef6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	895b      	ldrh	r3, [r3, #10]
 800ecd8:	2b13      	cmp	r3, #19
 800ecda:	d809      	bhi.n	800ecf0 <ip4_frag+0x64>
 800ecdc:	4b88      	ldr	r3, [pc, #544]	; (800ef00 <ip4_frag+0x274>)
 800ecde:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ece2:	4988      	ldr	r1, [pc, #544]	; (800ef04 <ip4_frag+0x278>)
 800ece4:	4888      	ldr	r0, [pc, #544]	; (800ef08 <ip4_frag+0x27c>)
 800ece6:	f000 fadb 	bl	800f2a0 <iprintf>
 800ecea:	f06f 0305 	mvn.w	r3, #5
 800ecee:	e102      	b.n	800eef6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf2:	88db      	ldrh	r3, [r3, #6]
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7f6 fd34 	bl	8005764 <lwip_htons>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed10:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	891b      	ldrh	r3, [r3, #8]
 800ed16:	3b14      	subs	r3, #20
 800ed18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ed1c:	e0e1      	b.n	800eee2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed20:	00db      	lsls	r3, r3, #3
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	bf28      	it	cs
 800ed2c:	4613      	movcs	r3, r2
 800ed2e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed30:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed34:	2114      	movs	r1, #20
 800ed36:	200e      	movs	r0, #14
 800ed38:	f7f7 fd6e 	bl	8006818 <pbuf_alloc>
 800ed3c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f000 80d5 	beq.w	800eef0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed48:	895b      	ldrh	r3, [r3, #10]
 800ed4a:	2b13      	cmp	r3, #19
 800ed4c:	d806      	bhi.n	800ed5c <ip4_frag+0xd0>
 800ed4e:	4b6c      	ldr	r3, [pc, #432]	; (800ef00 <ip4_frag+0x274>)
 800ed50:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ed54:	496d      	ldr	r1, [pc, #436]	; (800ef0c <ip4_frag+0x280>)
 800ed56:	486c      	ldr	r0, [pc, #432]	; (800ef08 <ip4_frag+0x27c>)
 800ed58:	f000 faa2 	bl	800f2a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	2214      	movs	r2, #20
 800ed62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed64:	4618      	mov	r0, r3
 800ed66:	f000 fb75 	bl	800f454 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ed70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ed76:	e064      	b.n	800ee42 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	895a      	ldrh	r2, [r3, #10]
 800ed7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	895b      	ldrh	r3, [r3, #10]
 800ed86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d906      	bls.n	800ed9a <ip4_frag+0x10e>
 800ed8c:	4b5c      	ldr	r3, [pc, #368]	; (800ef00 <ip4_frag+0x274>)
 800ed8e:	f240 322d 	movw	r2, #813	; 0x32d
 800ed92:	495f      	ldr	r1, [pc, #380]	; (800ef10 <ip4_frag+0x284>)
 800ed94:	485c      	ldr	r0, [pc, #368]	; (800ef08 <ip4_frag+0x27c>)
 800ed96:	f000 fa83 	bl	800f2a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ed9a:	8bfa      	ldrh	r2, [r7, #30]
 800ed9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eda0:	4293      	cmp	r3, r2
 800eda2:	bf28      	it	cs
 800eda4:	4613      	movcs	r3, r2
 800eda6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <ip4_frag+0x132>
        poff = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	60fb      	str	r3, [r7, #12]
        continue;
 800edbc:	e041      	b.n	800ee42 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edbe:	f7ff ff0d 	bl	800ebdc <ip_frag_alloc_pbuf_custom_ref>
 800edc2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d103      	bne.n	800edd2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800edca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edcc:	f7f8 f808 	bl	8006de0 <pbuf_free>
        goto memerr;
 800edd0:	e08f      	b.n	800eef2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edd2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edda:	4413      	add	r3, r2
 800eddc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ede0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ede4:	9201      	str	r2, [sp, #4]
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	4603      	mov	r3, r0
 800edea:	2241      	movs	r2, #65	; 0x41
 800edec:	2000      	movs	r0, #0
 800edee:	f7f7 fe3d 	bl	8006a6c <pbuf_alloced_custom>
 800edf2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d106      	bne.n	800ee08 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800edfa:	69b8      	ldr	r0, [r7, #24]
 800edfc:	f7ff fef6 	bl	800ebec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee02:	f7f7 ffed 	bl	8006de0 <pbuf_free>
        goto memerr;
 800ee06:	e074      	b.n	800eef2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f7f8 f889 	bl	8006f20 <pbuf_ref>
      pcr->original = p;
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	4a3f      	ldr	r2, [pc, #252]	; (800ef14 <ip4_frag+0x288>)
 800ee18:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee1a:	6979      	ldr	r1, [r7, #20]
 800ee1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee1e:	f7f8 f8a1 	bl	8006f64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee22:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ee26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ee30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d004      	beq.n	800ee42 <ip4_frag+0x1b6>
        poff = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d196      	bne.n	800ed78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee50:	4413      	add	r3, r2
 800ee52:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee58:	f1a3 0213 	sub.w	r2, r3, #19
 800ee5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee60:	429a      	cmp	r2, r3
 800ee62:	bfcc      	ite	gt
 800ee64:	2301      	movgt	r3, #1
 800ee66:	2300      	movle	r3, #0
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ee6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d002      	beq.n	800ee82 <ip4_frag+0x1f6>
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d003      	beq.n	800ee8a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ee82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ee88:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ee8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f6 fc69 	bl	8005764 <lwip_htons>
 800ee92:	4603      	mov	r3, r0
 800ee94:	461a      	mov	r2, r3
 800ee96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee98:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ee9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee9c:	3314      	adds	r3, #20
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7f6 fc5f 	bl	8005764 <lwip_htons>
 800eea6:	4603      	mov	r3, r0
 800eea8:	461a      	mov	r2, r3
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	729a      	strb	r2, [r3, #10]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	695b      	ldr	r3, [r3, #20]
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eec0:	68b8      	ldr	r0, [r7, #8]
 800eec2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eec6:	f7f7 ff8b 	bl	8006de0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eeca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800eed6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eeda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eedc:	4413      	add	r3, r2
 800eede:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800eee2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f47f af19 	bne.w	800ed1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	e002      	b.n	800eef6 <ip4_frag+0x26a>
      goto memerr;
 800eef0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3748      	adds	r7, #72	; 0x48
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	080127fc 	.word	0x080127fc
 800ef04:	080129d8 	.word	0x080129d8
 800ef08:	08012844 	.word	0x08012844
 800ef0c:	080129f4 	.word	0x080129f4
 800ef10:	08012a14 	.word	0x08012a14
 800ef14:	0800ec25 	.word	0x0800ec25

0800ef18 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef22:	230e      	movs	r3, #14
 800ef24:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	895b      	ldrh	r3, [r3, #10]
 800ef2a:	2b0e      	cmp	r3, #14
 800ef2c:	d96e      	bls.n	800f00c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	7bdb      	ldrb	r3, [r3, #15]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d106      	bne.n	800ef44 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	7b1a      	ldrb	r2, [r3, #12]
 800ef4e:	7b5b      	ldrb	r3, [r3, #13]
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	4313      	orrs	r3, r2
 800ef54:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d023      	beq.n	800efaa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d10f      	bne.n	800ef8a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	785b      	ldrb	r3, [r3, #1]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d11b      	bne.n	800efaa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef76:	2b5e      	cmp	r3, #94	; 0x5e
 800ef78:	d117      	bne.n	800efaa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	7b5b      	ldrb	r3, [r3, #13]
 800ef7e:	f043 0310 	orr.w	r3, r3, #16
 800ef82:	b2da      	uxtb	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	735a      	strb	r2, [r3, #13]
 800ef88:	e00f      	b.n	800efaa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	2206      	movs	r2, #6
 800ef8e:	4928      	ldr	r1, [pc, #160]	; (800f030 <ethernet_input+0x118>)
 800ef90:	4618      	mov	r0, r3
 800ef92:	f000 f9da 	bl	800f34a <memcmp>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	7b5b      	ldrb	r3, [r3, #13]
 800efa0:	f043 0308 	orr.w	r3, r3, #8
 800efa4:	b2da      	uxtb	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efaa:	89fb      	ldrh	r3, [r7, #14]
 800efac:	2b08      	cmp	r3, #8
 800efae:	d003      	beq.n	800efb8 <ethernet_input+0xa0>
 800efb0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800efb4:	d014      	beq.n	800efe0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800efb6:	e032      	b.n	800f01e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efbe:	f003 0308 	and.w	r3, r3, #8
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d024      	beq.n	800f010 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800efc6:	8afb      	ldrh	r3, [r7, #22]
 800efc8:	4619      	mov	r1, r3
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f7f7 fe82 	bl	8006cd4 <pbuf_remove_header>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d11e      	bne.n	800f014 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f7fe ff21 	bl	800de20 <ip4_input>
      break;
 800efde:	e013      	b.n	800f008 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efe6:	f003 0308 	and.w	r3, r3, #8
 800efea:	2b00      	cmp	r3, #0
 800efec:	d014      	beq.n	800f018 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800efee:	8afb      	ldrh	r3, [r7, #22]
 800eff0:	4619      	mov	r1, r3
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7f7 fe6e 	bl	8006cd4 <pbuf_remove_header>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10e      	bne.n	800f01c <ethernet_input+0x104>
        etharp_input(p, netif);
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7fe f8c1 	bl	800d188 <etharp_input>
      break;
 800f006:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f008:	2300      	movs	r3, #0
 800f00a:	e00c      	b.n	800f026 <ethernet_input+0x10e>
    goto free_and_return;
 800f00c:	bf00      	nop
 800f00e:	e006      	b.n	800f01e <ethernet_input+0x106>
        goto free_and_return;
 800f010:	bf00      	nop
 800f012:	e004      	b.n	800f01e <ethernet_input+0x106>
        goto free_and_return;
 800f014:	bf00      	nop
 800f016:	e002      	b.n	800f01e <ethernet_input+0x106>
        goto free_and_return;
 800f018:	bf00      	nop
 800f01a:	e000      	b.n	800f01e <ethernet_input+0x106>
        goto free_and_return;
 800f01c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7f7 fede 	bl	8006de0 <pbuf_free>
  return ERR_OK;
 800f024:	2300      	movs	r3, #0
}
 800f026:	4618      	mov	r0, r3
 800f028:	3718      	adds	r7, #24
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	08012bb0 	.word	0x08012bb0

0800f034 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f042:	8c3b      	ldrh	r3, [r7, #32]
 800f044:	4618      	mov	r0, r3
 800f046:	f7f6 fb8d 	bl	8005764 <lwip_htons>
 800f04a:	4603      	mov	r3, r0
 800f04c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f04e:	210e      	movs	r1, #14
 800f050:	68b8      	ldr	r0, [r7, #8]
 800f052:	f7f7 fe2f 	bl	8006cb4 <pbuf_add_header>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d125      	bne.n	800f0a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	8afa      	ldrh	r2, [r7, #22]
 800f066:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2206      	movs	r2, #6
 800f06c:	6839      	ldr	r1, [r7, #0]
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 f9f0 	bl	800f454 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	3306      	adds	r3, #6
 800f078:	2206      	movs	r2, #6
 800f07a:	6879      	ldr	r1, [r7, #4]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f000 f9e9 	bl	800f454 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f088:	2b06      	cmp	r3, #6
 800f08a:	d006      	beq.n	800f09a <ethernet_output+0x66>
 800f08c:	4b0a      	ldr	r3, [pc, #40]	; (800f0b8 <ethernet_output+0x84>)
 800f08e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f092:	490a      	ldr	r1, [pc, #40]	; (800f0bc <ethernet_output+0x88>)
 800f094:	480a      	ldr	r0, [pc, #40]	; (800f0c0 <ethernet_output+0x8c>)
 800f096:	f000 f903 	bl	800f2a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	68b9      	ldr	r1, [r7, #8]
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	4798      	blx	r3
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	e002      	b.n	800f0ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0aa:	f06f 0301 	mvn.w	r3, #1
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	08012a24 	.word	0x08012a24
 800f0bc:	08012a5c 	.word	0x08012a5c
 800f0c0:	08012a90 	.word	0x08012a90

0800f0c4 <rand>:
 800f0c4:	4b16      	ldr	r3, [pc, #88]	; (800f120 <rand+0x5c>)
 800f0c6:	b510      	push	{r4, lr}
 800f0c8:	681c      	ldr	r4, [r3, #0]
 800f0ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0cc:	b9b3      	cbnz	r3, 800f0fc <rand+0x38>
 800f0ce:	2018      	movs	r0, #24
 800f0d0:	f000 fa38 	bl	800f544 <malloc>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	6320      	str	r0, [r4, #48]	; 0x30
 800f0d8:	b920      	cbnz	r0, 800f0e4 <rand+0x20>
 800f0da:	4b12      	ldr	r3, [pc, #72]	; (800f124 <rand+0x60>)
 800f0dc:	4812      	ldr	r0, [pc, #72]	; (800f128 <rand+0x64>)
 800f0de:	2152      	movs	r1, #82	; 0x52
 800f0e0:	f000 f9c6 	bl	800f470 <__assert_func>
 800f0e4:	4911      	ldr	r1, [pc, #68]	; (800f12c <rand+0x68>)
 800f0e6:	4b12      	ldr	r3, [pc, #72]	; (800f130 <rand+0x6c>)
 800f0e8:	e9c0 1300 	strd	r1, r3, [r0]
 800f0ec:	4b11      	ldr	r3, [pc, #68]	; (800f134 <rand+0x70>)
 800f0ee:	6083      	str	r3, [r0, #8]
 800f0f0:	230b      	movs	r3, #11
 800f0f2:	8183      	strh	r3, [r0, #12]
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	2001      	movs	r0, #1
 800f0f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f0fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f0fe:	480e      	ldr	r0, [pc, #56]	; (800f138 <rand+0x74>)
 800f100:	690b      	ldr	r3, [r1, #16]
 800f102:	694c      	ldr	r4, [r1, #20]
 800f104:	4a0d      	ldr	r2, [pc, #52]	; (800f13c <rand+0x78>)
 800f106:	4358      	muls	r0, r3
 800f108:	fb02 0004 	mla	r0, r2, r4, r0
 800f10c:	fba3 3202 	umull	r3, r2, r3, r2
 800f110:	3301      	adds	r3, #1
 800f112:	eb40 0002 	adc.w	r0, r0, r2
 800f116:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f11a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f11e:	bd10      	pop	{r4, pc}
 800f120:	20000084 	.word	0x20000084
 800f124:	08012bbe 	.word	0x08012bbe
 800f128:	08012bd5 	.word	0x08012bd5
 800f12c:	abcd330e 	.word	0xabcd330e
 800f130:	e66d1234 	.word	0xe66d1234
 800f134:	0005deec 	.word	0x0005deec
 800f138:	5851f42d 	.word	0x5851f42d
 800f13c:	4c957f2d 	.word	0x4c957f2d

0800f140 <std>:
 800f140:	2300      	movs	r3, #0
 800f142:	b510      	push	{r4, lr}
 800f144:	4604      	mov	r4, r0
 800f146:	e9c0 3300 	strd	r3, r3, [r0]
 800f14a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f14e:	6083      	str	r3, [r0, #8]
 800f150:	8181      	strh	r1, [r0, #12]
 800f152:	6643      	str	r3, [r0, #100]	; 0x64
 800f154:	81c2      	strh	r2, [r0, #14]
 800f156:	6183      	str	r3, [r0, #24]
 800f158:	4619      	mov	r1, r3
 800f15a:	2208      	movs	r2, #8
 800f15c:	305c      	adds	r0, #92	; 0x5c
 800f15e:	f000 f904 	bl	800f36a <memset>
 800f162:	4b05      	ldr	r3, [pc, #20]	; (800f178 <std+0x38>)
 800f164:	6263      	str	r3, [r4, #36]	; 0x24
 800f166:	4b05      	ldr	r3, [pc, #20]	; (800f17c <std+0x3c>)
 800f168:	62a3      	str	r3, [r4, #40]	; 0x28
 800f16a:	4b05      	ldr	r3, [pc, #20]	; (800f180 <std+0x40>)
 800f16c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f16e:	4b05      	ldr	r3, [pc, #20]	; (800f184 <std+0x44>)
 800f170:	6224      	str	r4, [r4, #32]
 800f172:	6323      	str	r3, [r4, #48]	; 0x30
 800f174:	bd10      	pop	{r4, pc}
 800f176:	bf00      	nop
 800f178:	0800f2c5 	.word	0x0800f2c5
 800f17c:	0800f2e7 	.word	0x0800f2e7
 800f180:	0800f31f 	.word	0x0800f31f
 800f184:	0800f343 	.word	0x0800f343

0800f188 <stdio_exit_handler>:
 800f188:	4a02      	ldr	r2, [pc, #8]	; (800f194 <stdio_exit_handler+0xc>)
 800f18a:	4903      	ldr	r1, [pc, #12]	; (800f198 <stdio_exit_handler+0x10>)
 800f18c:	4803      	ldr	r0, [pc, #12]	; (800f19c <stdio_exit_handler+0x14>)
 800f18e:	f000 b869 	b.w	800f264 <_fwalk_sglue>
 800f192:	bf00      	nop
 800f194:	2000002c 	.word	0x2000002c
 800f198:	0800fd61 	.word	0x0800fd61
 800f19c:	20000038 	.word	0x20000038

0800f1a0 <cleanup_stdio>:
 800f1a0:	6841      	ldr	r1, [r0, #4]
 800f1a2:	4b0c      	ldr	r3, [pc, #48]	; (800f1d4 <cleanup_stdio+0x34>)
 800f1a4:	4299      	cmp	r1, r3
 800f1a6:	b510      	push	{r4, lr}
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	d001      	beq.n	800f1b0 <cleanup_stdio+0x10>
 800f1ac:	f000 fdd8 	bl	800fd60 <_fflush_r>
 800f1b0:	68a1      	ldr	r1, [r4, #8]
 800f1b2:	4b09      	ldr	r3, [pc, #36]	; (800f1d8 <cleanup_stdio+0x38>)
 800f1b4:	4299      	cmp	r1, r3
 800f1b6:	d002      	beq.n	800f1be <cleanup_stdio+0x1e>
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 fdd1 	bl	800fd60 <_fflush_r>
 800f1be:	68e1      	ldr	r1, [r4, #12]
 800f1c0:	4b06      	ldr	r3, [pc, #24]	; (800f1dc <cleanup_stdio+0x3c>)
 800f1c2:	4299      	cmp	r1, r3
 800f1c4:	d004      	beq.n	800f1d0 <cleanup_stdio+0x30>
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1cc:	f000 bdc8 	b.w	800fd60 <_fflush_r>
 800f1d0:	bd10      	pop	{r4, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20008928 	.word	0x20008928
 800f1d8:	20008990 	.word	0x20008990
 800f1dc:	200089f8 	.word	0x200089f8

0800f1e0 <global_stdio_init.part.0>:
 800f1e0:	b510      	push	{r4, lr}
 800f1e2:	4b0b      	ldr	r3, [pc, #44]	; (800f210 <global_stdio_init.part.0+0x30>)
 800f1e4:	4c0b      	ldr	r4, [pc, #44]	; (800f214 <global_stdio_init.part.0+0x34>)
 800f1e6:	4a0c      	ldr	r2, [pc, #48]	; (800f218 <global_stdio_init.part.0+0x38>)
 800f1e8:	601a      	str	r2, [r3, #0]
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	2104      	movs	r1, #4
 800f1f0:	f7ff ffa6 	bl	800f140 <std>
 800f1f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	2109      	movs	r1, #9
 800f1fc:	f7ff ffa0 	bl	800f140 <std>
 800f200:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f204:	2202      	movs	r2, #2
 800f206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f20a:	2112      	movs	r1, #18
 800f20c:	f7ff bf98 	b.w	800f140 <std>
 800f210:	20008a60 	.word	0x20008a60
 800f214:	20008928 	.word	0x20008928
 800f218:	0800f189 	.word	0x0800f189

0800f21c <__sfp_lock_acquire>:
 800f21c:	4801      	ldr	r0, [pc, #4]	; (800f224 <__sfp_lock_acquire+0x8>)
 800f21e:	f000 b917 	b.w	800f450 <__retarget_lock_acquire_recursive>
 800f222:	bf00      	nop
 800f224:	20008a69 	.word	0x20008a69

0800f228 <__sfp_lock_release>:
 800f228:	4801      	ldr	r0, [pc, #4]	; (800f230 <__sfp_lock_release+0x8>)
 800f22a:	f000 b912 	b.w	800f452 <__retarget_lock_release_recursive>
 800f22e:	bf00      	nop
 800f230:	20008a69 	.word	0x20008a69

0800f234 <__sinit>:
 800f234:	b510      	push	{r4, lr}
 800f236:	4604      	mov	r4, r0
 800f238:	f7ff fff0 	bl	800f21c <__sfp_lock_acquire>
 800f23c:	6a23      	ldr	r3, [r4, #32]
 800f23e:	b11b      	cbz	r3, 800f248 <__sinit+0x14>
 800f240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f244:	f7ff bff0 	b.w	800f228 <__sfp_lock_release>
 800f248:	4b04      	ldr	r3, [pc, #16]	; (800f25c <__sinit+0x28>)
 800f24a:	6223      	str	r3, [r4, #32]
 800f24c:	4b04      	ldr	r3, [pc, #16]	; (800f260 <__sinit+0x2c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1f5      	bne.n	800f240 <__sinit+0xc>
 800f254:	f7ff ffc4 	bl	800f1e0 <global_stdio_init.part.0>
 800f258:	e7f2      	b.n	800f240 <__sinit+0xc>
 800f25a:	bf00      	nop
 800f25c:	0800f1a1 	.word	0x0800f1a1
 800f260:	20008a60 	.word	0x20008a60

0800f264 <_fwalk_sglue>:
 800f264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f268:	4607      	mov	r7, r0
 800f26a:	4688      	mov	r8, r1
 800f26c:	4614      	mov	r4, r2
 800f26e:	2600      	movs	r6, #0
 800f270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f274:	f1b9 0901 	subs.w	r9, r9, #1
 800f278:	d505      	bpl.n	800f286 <_fwalk_sglue+0x22>
 800f27a:	6824      	ldr	r4, [r4, #0]
 800f27c:	2c00      	cmp	r4, #0
 800f27e:	d1f7      	bne.n	800f270 <_fwalk_sglue+0xc>
 800f280:	4630      	mov	r0, r6
 800f282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f286:	89ab      	ldrh	r3, [r5, #12]
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d907      	bls.n	800f29c <_fwalk_sglue+0x38>
 800f28c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f290:	3301      	adds	r3, #1
 800f292:	d003      	beq.n	800f29c <_fwalk_sglue+0x38>
 800f294:	4629      	mov	r1, r5
 800f296:	4638      	mov	r0, r7
 800f298:	47c0      	blx	r8
 800f29a:	4306      	orrs	r6, r0
 800f29c:	3568      	adds	r5, #104	; 0x68
 800f29e:	e7e9      	b.n	800f274 <_fwalk_sglue+0x10>

0800f2a0 <iprintf>:
 800f2a0:	b40f      	push	{r0, r1, r2, r3}
 800f2a2:	b507      	push	{r0, r1, r2, lr}
 800f2a4:	4906      	ldr	r1, [pc, #24]	; (800f2c0 <iprintf+0x20>)
 800f2a6:	ab04      	add	r3, sp, #16
 800f2a8:	6808      	ldr	r0, [r1, #0]
 800f2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ae:	6881      	ldr	r1, [r0, #8]
 800f2b0:	9301      	str	r3, [sp, #4]
 800f2b2:	f000 fa25 	bl	800f700 <_vfiprintf_r>
 800f2b6:	b003      	add	sp, #12
 800f2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2bc:	b004      	add	sp, #16
 800f2be:	4770      	bx	lr
 800f2c0:	20000084 	.word	0x20000084

0800f2c4 <__sread>:
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2cc:	f000 f878 	bl	800f3c0 <_read_r>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	bfab      	itete	ge
 800f2d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f2d8:	181b      	addge	r3, r3, r0
 800f2da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2de:	bfac      	ite	ge
 800f2e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2e2:	81a3      	strhlt	r3, [r4, #12]
 800f2e4:	bd10      	pop	{r4, pc}

0800f2e6 <__swrite>:
 800f2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ea:	461f      	mov	r7, r3
 800f2ec:	898b      	ldrh	r3, [r1, #12]
 800f2ee:	05db      	lsls	r3, r3, #23
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	460c      	mov	r4, r1
 800f2f4:	4616      	mov	r6, r2
 800f2f6:	d505      	bpl.n	800f304 <__swrite+0x1e>
 800f2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	2200      	movs	r2, #0
 800f300:	f000 f84c 	bl	800f39c <_lseek_r>
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f30a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f30e:	81a3      	strh	r3, [r4, #12]
 800f310:	4632      	mov	r2, r6
 800f312:	463b      	mov	r3, r7
 800f314:	4628      	mov	r0, r5
 800f316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f31a:	f000 b863 	b.w	800f3e4 <_write_r>

0800f31e <__sseek>:
 800f31e:	b510      	push	{r4, lr}
 800f320:	460c      	mov	r4, r1
 800f322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f326:	f000 f839 	bl	800f39c <_lseek_r>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	bf15      	itete	ne
 800f330:	6560      	strne	r0, [r4, #84]	; 0x54
 800f332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f33a:	81a3      	strheq	r3, [r4, #12]
 800f33c:	bf18      	it	ne
 800f33e:	81a3      	strhne	r3, [r4, #12]
 800f340:	bd10      	pop	{r4, pc}

0800f342 <__sclose>:
 800f342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f346:	f000 b819 	b.w	800f37c <_close_r>

0800f34a <memcmp>:
 800f34a:	b510      	push	{r4, lr}
 800f34c:	3901      	subs	r1, #1
 800f34e:	4402      	add	r2, r0
 800f350:	4290      	cmp	r0, r2
 800f352:	d101      	bne.n	800f358 <memcmp+0xe>
 800f354:	2000      	movs	r0, #0
 800f356:	e005      	b.n	800f364 <memcmp+0x1a>
 800f358:	7803      	ldrb	r3, [r0, #0]
 800f35a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f35e:	42a3      	cmp	r3, r4
 800f360:	d001      	beq.n	800f366 <memcmp+0x1c>
 800f362:	1b18      	subs	r0, r3, r4
 800f364:	bd10      	pop	{r4, pc}
 800f366:	3001      	adds	r0, #1
 800f368:	e7f2      	b.n	800f350 <memcmp+0x6>

0800f36a <memset>:
 800f36a:	4402      	add	r2, r0
 800f36c:	4603      	mov	r3, r0
 800f36e:	4293      	cmp	r3, r2
 800f370:	d100      	bne.n	800f374 <memset+0xa>
 800f372:	4770      	bx	lr
 800f374:	f803 1b01 	strb.w	r1, [r3], #1
 800f378:	e7f9      	b.n	800f36e <memset+0x4>
	...

0800f37c <_close_r>:
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	4d06      	ldr	r5, [pc, #24]	; (800f398 <_close_r+0x1c>)
 800f380:	2300      	movs	r3, #0
 800f382:	4604      	mov	r4, r0
 800f384:	4608      	mov	r0, r1
 800f386:	602b      	str	r3, [r5, #0]
 800f388:	f7f1 fc2b 	bl	8000be2 <_close>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d102      	bne.n	800f396 <_close_r+0x1a>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	b103      	cbz	r3, 800f396 <_close_r+0x1a>
 800f394:	6023      	str	r3, [r4, #0]
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	20008a64 	.word	0x20008a64

0800f39c <_lseek_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d07      	ldr	r5, [pc, #28]	; (800f3bc <_lseek_r+0x20>)
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	4608      	mov	r0, r1
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	602a      	str	r2, [r5, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f7f1 fc40 	bl	8000c30 <_lseek>
 800f3b0:	1c43      	adds	r3, r0, #1
 800f3b2:	d102      	bne.n	800f3ba <_lseek_r+0x1e>
 800f3b4:	682b      	ldr	r3, [r5, #0]
 800f3b6:	b103      	cbz	r3, 800f3ba <_lseek_r+0x1e>
 800f3b8:	6023      	str	r3, [r4, #0]
 800f3ba:	bd38      	pop	{r3, r4, r5, pc}
 800f3bc:	20008a64 	.word	0x20008a64

0800f3c0 <_read_r>:
 800f3c0:	b538      	push	{r3, r4, r5, lr}
 800f3c2:	4d07      	ldr	r5, [pc, #28]	; (800f3e0 <_read_r+0x20>)
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	4608      	mov	r0, r1
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	602a      	str	r2, [r5, #0]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	f7f1 fbce 	bl	8000b70 <_read>
 800f3d4:	1c43      	adds	r3, r0, #1
 800f3d6:	d102      	bne.n	800f3de <_read_r+0x1e>
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	b103      	cbz	r3, 800f3de <_read_r+0x1e>
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	bd38      	pop	{r3, r4, r5, pc}
 800f3e0:	20008a64 	.word	0x20008a64

0800f3e4 <_write_r>:
 800f3e4:	b538      	push	{r3, r4, r5, lr}
 800f3e6:	4d07      	ldr	r5, [pc, #28]	; (800f404 <_write_r+0x20>)
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	4608      	mov	r0, r1
 800f3ec:	4611      	mov	r1, r2
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	602a      	str	r2, [r5, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	f7f1 fbd9 	bl	8000baa <_write>
 800f3f8:	1c43      	adds	r3, r0, #1
 800f3fa:	d102      	bne.n	800f402 <_write_r+0x1e>
 800f3fc:	682b      	ldr	r3, [r5, #0]
 800f3fe:	b103      	cbz	r3, 800f402 <_write_r+0x1e>
 800f400:	6023      	str	r3, [r4, #0]
 800f402:	bd38      	pop	{r3, r4, r5, pc}
 800f404:	20008a64 	.word	0x20008a64

0800f408 <__libc_init_array>:
 800f408:	b570      	push	{r4, r5, r6, lr}
 800f40a:	4d0d      	ldr	r5, [pc, #52]	; (800f440 <__libc_init_array+0x38>)
 800f40c:	4c0d      	ldr	r4, [pc, #52]	; (800f444 <__libc_init_array+0x3c>)
 800f40e:	1b64      	subs	r4, r4, r5
 800f410:	10a4      	asrs	r4, r4, #2
 800f412:	2600      	movs	r6, #0
 800f414:	42a6      	cmp	r6, r4
 800f416:	d109      	bne.n	800f42c <__libc_init_array+0x24>
 800f418:	4d0b      	ldr	r5, [pc, #44]	; (800f448 <__libc_init_array+0x40>)
 800f41a:	4c0c      	ldr	r4, [pc, #48]	; (800f44c <__libc_init_array+0x44>)
 800f41c:	f000 fe50 	bl	80100c0 <_init>
 800f420:	1b64      	subs	r4, r4, r5
 800f422:	10a4      	asrs	r4, r4, #2
 800f424:	2600      	movs	r6, #0
 800f426:	42a6      	cmp	r6, r4
 800f428:	d105      	bne.n	800f436 <__libc_init_array+0x2e>
 800f42a:	bd70      	pop	{r4, r5, r6, pc}
 800f42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f430:	4798      	blx	r3
 800f432:	3601      	adds	r6, #1
 800f434:	e7ee      	b.n	800f414 <__libc_init_array+0xc>
 800f436:	f855 3b04 	ldr.w	r3, [r5], #4
 800f43a:	4798      	blx	r3
 800f43c:	3601      	adds	r6, #1
 800f43e:	e7f2      	b.n	800f426 <__libc_init_array+0x1e>
 800f440:	08012ca4 	.word	0x08012ca4
 800f444:	08012ca4 	.word	0x08012ca4
 800f448:	08012ca4 	.word	0x08012ca4
 800f44c:	08012ca8 	.word	0x08012ca8

0800f450 <__retarget_lock_acquire_recursive>:
 800f450:	4770      	bx	lr

0800f452 <__retarget_lock_release_recursive>:
 800f452:	4770      	bx	lr

0800f454 <memcpy>:
 800f454:	440a      	add	r2, r1
 800f456:	4291      	cmp	r1, r2
 800f458:	f100 33ff 	add.w	r3, r0, #4294967295
 800f45c:	d100      	bne.n	800f460 <memcpy+0xc>
 800f45e:	4770      	bx	lr
 800f460:	b510      	push	{r4, lr}
 800f462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f46a:	4291      	cmp	r1, r2
 800f46c:	d1f9      	bne.n	800f462 <memcpy+0xe>
 800f46e:	bd10      	pop	{r4, pc}

0800f470 <__assert_func>:
 800f470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f472:	4614      	mov	r4, r2
 800f474:	461a      	mov	r2, r3
 800f476:	4b09      	ldr	r3, [pc, #36]	; (800f49c <__assert_func+0x2c>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4605      	mov	r5, r0
 800f47c:	68d8      	ldr	r0, [r3, #12]
 800f47e:	b14c      	cbz	r4, 800f494 <__assert_func+0x24>
 800f480:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <__assert_func+0x30>)
 800f482:	9100      	str	r1, [sp, #0]
 800f484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f488:	4906      	ldr	r1, [pc, #24]	; (800f4a4 <__assert_func+0x34>)
 800f48a:	462b      	mov	r3, r5
 800f48c:	f000 fc90 	bl	800fdb0 <fiprintf>
 800f490:	f000 fd46 	bl	800ff20 <abort>
 800f494:	4b04      	ldr	r3, [pc, #16]	; (800f4a8 <__assert_func+0x38>)
 800f496:	461c      	mov	r4, r3
 800f498:	e7f3      	b.n	800f482 <__assert_func+0x12>
 800f49a:	bf00      	nop
 800f49c:	20000084 	.word	0x20000084
 800f4a0:	08012c2d 	.word	0x08012c2d
 800f4a4:	08012c3a 	.word	0x08012c3a
 800f4a8:	08012c68 	.word	0x08012c68

0800f4ac <_free_r>:
 800f4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4ae:	2900      	cmp	r1, #0
 800f4b0:	d044      	beq.n	800f53c <_free_r+0x90>
 800f4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4b6:	9001      	str	r0, [sp, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f1a1 0404 	sub.w	r4, r1, #4
 800f4be:	bfb8      	it	lt
 800f4c0:	18e4      	addlt	r4, r4, r3
 800f4c2:	f000 f8e7 	bl	800f694 <__malloc_lock>
 800f4c6:	4a1e      	ldr	r2, [pc, #120]	; (800f540 <_free_r+0x94>)
 800f4c8:	9801      	ldr	r0, [sp, #4]
 800f4ca:	6813      	ldr	r3, [r2, #0]
 800f4cc:	b933      	cbnz	r3, 800f4dc <_free_r+0x30>
 800f4ce:	6063      	str	r3, [r4, #4]
 800f4d0:	6014      	str	r4, [r2, #0]
 800f4d2:	b003      	add	sp, #12
 800f4d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4d8:	f000 b8e2 	b.w	800f6a0 <__malloc_unlock>
 800f4dc:	42a3      	cmp	r3, r4
 800f4de:	d908      	bls.n	800f4f2 <_free_r+0x46>
 800f4e0:	6825      	ldr	r5, [r4, #0]
 800f4e2:	1961      	adds	r1, r4, r5
 800f4e4:	428b      	cmp	r3, r1
 800f4e6:	bf01      	itttt	eq
 800f4e8:	6819      	ldreq	r1, [r3, #0]
 800f4ea:	685b      	ldreq	r3, [r3, #4]
 800f4ec:	1949      	addeq	r1, r1, r5
 800f4ee:	6021      	streq	r1, [r4, #0]
 800f4f0:	e7ed      	b.n	800f4ce <_free_r+0x22>
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	b10b      	cbz	r3, 800f4fc <_free_r+0x50>
 800f4f8:	42a3      	cmp	r3, r4
 800f4fa:	d9fa      	bls.n	800f4f2 <_free_r+0x46>
 800f4fc:	6811      	ldr	r1, [r2, #0]
 800f4fe:	1855      	adds	r5, r2, r1
 800f500:	42a5      	cmp	r5, r4
 800f502:	d10b      	bne.n	800f51c <_free_r+0x70>
 800f504:	6824      	ldr	r4, [r4, #0]
 800f506:	4421      	add	r1, r4
 800f508:	1854      	adds	r4, r2, r1
 800f50a:	42a3      	cmp	r3, r4
 800f50c:	6011      	str	r1, [r2, #0]
 800f50e:	d1e0      	bne.n	800f4d2 <_free_r+0x26>
 800f510:	681c      	ldr	r4, [r3, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	6053      	str	r3, [r2, #4]
 800f516:	440c      	add	r4, r1
 800f518:	6014      	str	r4, [r2, #0]
 800f51a:	e7da      	b.n	800f4d2 <_free_r+0x26>
 800f51c:	d902      	bls.n	800f524 <_free_r+0x78>
 800f51e:	230c      	movs	r3, #12
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	e7d6      	b.n	800f4d2 <_free_r+0x26>
 800f524:	6825      	ldr	r5, [r4, #0]
 800f526:	1961      	adds	r1, r4, r5
 800f528:	428b      	cmp	r3, r1
 800f52a:	bf04      	itt	eq
 800f52c:	6819      	ldreq	r1, [r3, #0]
 800f52e:	685b      	ldreq	r3, [r3, #4]
 800f530:	6063      	str	r3, [r4, #4]
 800f532:	bf04      	itt	eq
 800f534:	1949      	addeq	r1, r1, r5
 800f536:	6021      	streq	r1, [r4, #0]
 800f538:	6054      	str	r4, [r2, #4]
 800f53a:	e7ca      	b.n	800f4d2 <_free_r+0x26>
 800f53c:	b003      	add	sp, #12
 800f53e:	bd30      	pop	{r4, r5, pc}
 800f540:	20008a6c 	.word	0x20008a6c

0800f544 <malloc>:
 800f544:	4b02      	ldr	r3, [pc, #8]	; (800f550 <malloc+0xc>)
 800f546:	4601      	mov	r1, r0
 800f548:	6818      	ldr	r0, [r3, #0]
 800f54a:	f000 b823 	b.w	800f594 <_malloc_r>
 800f54e:	bf00      	nop
 800f550:	20000084 	.word	0x20000084

0800f554 <sbrk_aligned>:
 800f554:	b570      	push	{r4, r5, r6, lr}
 800f556:	4e0e      	ldr	r6, [pc, #56]	; (800f590 <sbrk_aligned+0x3c>)
 800f558:	460c      	mov	r4, r1
 800f55a:	6831      	ldr	r1, [r6, #0]
 800f55c:	4605      	mov	r5, r0
 800f55e:	b911      	cbnz	r1, 800f566 <sbrk_aligned+0x12>
 800f560:	f000 fcce 	bl	800ff00 <_sbrk_r>
 800f564:	6030      	str	r0, [r6, #0]
 800f566:	4621      	mov	r1, r4
 800f568:	4628      	mov	r0, r5
 800f56a:	f000 fcc9 	bl	800ff00 <_sbrk_r>
 800f56e:	1c43      	adds	r3, r0, #1
 800f570:	d00a      	beq.n	800f588 <sbrk_aligned+0x34>
 800f572:	1cc4      	adds	r4, r0, #3
 800f574:	f024 0403 	bic.w	r4, r4, #3
 800f578:	42a0      	cmp	r0, r4
 800f57a:	d007      	beq.n	800f58c <sbrk_aligned+0x38>
 800f57c:	1a21      	subs	r1, r4, r0
 800f57e:	4628      	mov	r0, r5
 800f580:	f000 fcbe 	bl	800ff00 <_sbrk_r>
 800f584:	3001      	adds	r0, #1
 800f586:	d101      	bne.n	800f58c <sbrk_aligned+0x38>
 800f588:	f04f 34ff 	mov.w	r4, #4294967295
 800f58c:	4620      	mov	r0, r4
 800f58e:	bd70      	pop	{r4, r5, r6, pc}
 800f590:	20008a70 	.word	0x20008a70

0800f594 <_malloc_r>:
 800f594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f598:	1ccd      	adds	r5, r1, #3
 800f59a:	f025 0503 	bic.w	r5, r5, #3
 800f59e:	3508      	adds	r5, #8
 800f5a0:	2d0c      	cmp	r5, #12
 800f5a2:	bf38      	it	cc
 800f5a4:	250c      	movcc	r5, #12
 800f5a6:	2d00      	cmp	r5, #0
 800f5a8:	4607      	mov	r7, r0
 800f5aa:	db01      	blt.n	800f5b0 <_malloc_r+0x1c>
 800f5ac:	42a9      	cmp	r1, r5
 800f5ae:	d905      	bls.n	800f5bc <_malloc_r+0x28>
 800f5b0:	230c      	movs	r3, #12
 800f5b2:	603b      	str	r3, [r7, #0]
 800f5b4:	2600      	movs	r6, #0
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f690 <_malloc_r+0xfc>
 800f5c0:	f000 f868 	bl	800f694 <__malloc_lock>
 800f5c4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5c8:	461c      	mov	r4, r3
 800f5ca:	bb5c      	cbnz	r4, 800f624 <_malloc_r+0x90>
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	f7ff ffc0 	bl	800f554 <sbrk_aligned>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	d155      	bne.n	800f686 <_malloc_r+0xf2>
 800f5da:	f8d8 4000 	ldr.w	r4, [r8]
 800f5de:	4626      	mov	r6, r4
 800f5e0:	2e00      	cmp	r6, #0
 800f5e2:	d145      	bne.n	800f670 <_malloc_r+0xdc>
 800f5e4:	2c00      	cmp	r4, #0
 800f5e6:	d048      	beq.n	800f67a <_malloc_r+0xe6>
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	4631      	mov	r1, r6
 800f5ec:	4638      	mov	r0, r7
 800f5ee:	eb04 0903 	add.w	r9, r4, r3
 800f5f2:	f000 fc85 	bl	800ff00 <_sbrk_r>
 800f5f6:	4581      	cmp	r9, r0
 800f5f8:	d13f      	bne.n	800f67a <_malloc_r+0xe6>
 800f5fa:	6821      	ldr	r1, [r4, #0]
 800f5fc:	1a6d      	subs	r5, r5, r1
 800f5fe:	4629      	mov	r1, r5
 800f600:	4638      	mov	r0, r7
 800f602:	f7ff ffa7 	bl	800f554 <sbrk_aligned>
 800f606:	3001      	adds	r0, #1
 800f608:	d037      	beq.n	800f67a <_malloc_r+0xe6>
 800f60a:	6823      	ldr	r3, [r4, #0]
 800f60c:	442b      	add	r3, r5
 800f60e:	6023      	str	r3, [r4, #0]
 800f610:	f8d8 3000 	ldr.w	r3, [r8]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d038      	beq.n	800f68a <_malloc_r+0xf6>
 800f618:	685a      	ldr	r2, [r3, #4]
 800f61a:	42a2      	cmp	r2, r4
 800f61c:	d12b      	bne.n	800f676 <_malloc_r+0xe2>
 800f61e:	2200      	movs	r2, #0
 800f620:	605a      	str	r2, [r3, #4]
 800f622:	e00f      	b.n	800f644 <_malloc_r+0xb0>
 800f624:	6822      	ldr	r2, [r4, #0]
 800f626:	1b52      	subs	r2, r2, r5
 800f628:	d41f      	bmi.n	800f66a <_malloc_r+0xd6>
 800f62a:	2a0b      	cmp	r2, #11
 800f62c:	d917      	bls.n	800f65e <_malloc_r+0xca>
 800f62e:	1961      	adds	r1, r4, r5
 800f630:	42a3      	cmp	r3, r4
 800f632:	6025      	str	r5, [r4, #0]
 800f634:	bf18      	it	ne
 800f636:	6059      	strne	r1, [r3, #4]
 800f638:	6863      	ldr	r3, [r4, #4]
 800f63a:	bf08      	it	eq
 800f63c:	f8c8 1000 	streq.w	r1, [r8]
 800f640:	5162      	str	r2, [r4, r5]
 800f642:	604b      	str	r3, [r1, #4]
 800f644:	4638      	mov	r0, r7
 800f646:	f104 060b 	add.w	r6, r4, #11
 800f64a:	f000 f829 	bl	800f6a0 <__malloc_unlock>
 800f64e:	f026 0607 	bic.w	r6, r6, #7
 800f652:	1d23      	adds	r3, r4, #4
 800f654:	1af2      	subs	r2, r6, r3
 800f656:	d0ae      	beq.n	800f5b6 <_malloc_r+0x22>
 800f658:	1b9b      	subs	r3, r3, r6
 800f65a:	50a3      	str	r3, [r4, r2]
 800f65c:	e7ab      	b.n	800f5b6 <_malloc_r+0x22>
 800f65e:	42a3      	cmp	r3, r4
 800f660:	6862      	ldr	r2, [r4, #4]
 800f662:	d1dd      	bne.n	800f620 <_malloc_r+0x8c>
 800f664:	f8c8 2000 	str.w	r2, [r8]
 800f668:	e7ec      	b.n	800f644 <_malloc_r+0xb0>
 800f66a:	4623      	mov	r3, r4
 800f66c:	6864      	ldr	r4, [r4, #4]
 800f66e:	e7ac      	b.n	800f5ca <_malloc_r+0x36>
 800f670:	4634      	mov	r4, r6
 800f672:	6876      	ldr	r6, [r6, #4]
 800f674:	e7b4      	b.n	800f5e0 <_malloc_r+0x4c>
 800f676:	4613      	mov	r3, r2
 800f678:	e7cc      	b.n	800f614 <_malloc_r+0x80>
 800f67a:	230c      	movs	r3, #12
 800f67c:	603b      	str	r3, [r7, #0]
 800f67e:	4638      	mov	r0, r7
 800f680:	f000 f80e 	bl	800f6a0 <__malloc_unlock>
 800f684:	e797      	b.n	800f5b6 <_malloc_r+0x22>
 800f686:	6025      	str	r5, [r4, #0]
 800f688:	e7dc      	b.n	800f644 <_malloc_r+0xb0>
 800f68a:	605b      	str	r3, [r3, #4]
 800f68c:	deff      	udf	#255	; 0xff
 800f68e:	bf00      	nop
 800f690:	20008a6c 	.word	0x20008a6c

0800f694 <__malloc_lock>:
 800f694:	4801      	ldr	r0, [pc, #4]	; (800f69c <__malloc_lock+0x8>)
 800f696:	f7ff bedb 	b.w	800f450 <__retarget_lock_acquire_recursive>
 800f69a:	bf00      	nop
 800f69c:	20008a68 	.word	0x20008a68

0800f6a0 <__malloc_unlock>:
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__malloc_unlock+0x8>)
 800f6a2:	f7ff bed6 	b.w	800f452 <__retarget_lock_release_recursive>
 800f6a6:	bf00      	nop
 800f6a8:	20008a68 	.word	0x20008a68

0800f6ac <__sfputc_r>:
 800f6ac:	6893      	ldr	r3, [r2, #8]
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	b410      	push	{r4}
 800f6b4:	6093      	str	r3, [r2, #8]
 800f6b6:	da08      	bge.n	800f6ca <__sfputc_r+0x1e>
 800f6b8:	6994      	ldr	r4, [r2, #24]
 800f6ba:	42a3      	cmp	r3, r4
 800f6bc:	db01      	blt.n	800f6c2 <__sfputc_r+0x16>
 800f6be:	290a      	cmp	r1, #10
 800f6c0:	d103      	bne.n	800f6ca <__sfputc_r+0x1e>
 800f6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6c6:	f000 bb85 	b.w	800fdd4 <__swbuf_r>
 800f6ca:	6813      	ldr	r3, [r2, #0]
 800f6cc:	1c58      	adds	r0, r3, #1
 800f6ce:	6010      	str	r0, [r2, #0]
 800f6d0:	7019      	strb	r1, [r3, #0]
 800f6d2:	4608      	mov	r0, r1
 800f6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6d8:	4770      	bx	lr

0800f6da <__sfputs_r>:
 800f6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6dc:	4606      	mov	r6, r0
 800f6de:	460f      	mov	r7, r1
 800f6e0:	4614      	mov	r4, r2
 800f6e2:	18d5      	adds	r5, r2, r3
 800f6e4:	42ac      	cmp	r4, r5
 800f6e6:	d101      	bne.n	800f6ec <__sfputs_r+0x12>
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	e007      	b.n	800f6fc <__sfputs_r+0x22>
 800f6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6f0:	463a      	mov	r2, r7
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7ff ffda 	bl	800f6ac <__sfputc_r>
 800f6f8:	1c43      	adds	r3, r0, #1
 800f6fa:	d1f3      	bne.n	800f6e4 <__sfputs_r+0xa>
 800f6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f700 <_vfiprintf_r>:
 800f700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f704:	460d      	mov	r5, r1
 800f706:	b09d      	sub	sp, #116	; 0x74
 800f708:	4614      	mov	r4, r2
 800f70a:	4698      	mov	r8, r3
 800f70c:	4606      	mov	r6, r0
 800f70e:	b118      	cbz	r0, 800f718 <_vfiprintf_r+0x18>
 800f710:	6a03      	ldr	r3, [r0, #32]
 800f712:	b90b      	cbnz	r3, 800f718 <_vfiprintf_r+0x18>
 800f714:	f7ff fd8e 	bl	800f234 <__sinit>
 800f718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f71a:	07d9      	lsls	r1, r3, #31
 800f71c:	d405      	bmi.n	800f72a <_vfiprintf_r+0x2a>
 800f71e:	89ab      	ldrh	r3, [r5, #12]
 800f720:	059a      	lsls	r2, r3, #22
 800f722:	d402      	bmi.n	800f72a <_vfiprintf_r+0x2a>
 800f724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f726:	f7ff fe93 	bl	800f450 <__retarget_lock_acquire_recursive>
 800f72a:	89ab      	ldrh	r3, [r5, #12]
 800f72c:	071b      	lsls	r3, r3, #28
 800f72e:	d501      	bpl.n	800f734 <_vfiprintf_r+0x34>
 800f730:	692b      	ldr	r3, [r5, #16]
 800f732:	b99b      	cbnz	r3, 800f75c <_vfiprintf_r+0x5c>
 800f734:	4629      	mov	r1, r5
 800f736:	4630      	mov	r0, r6
 800f738:	f000 fb8a 	bl	800fe50 <__swsetup_r>
 800f73c:	b170      	cbz	r0, 800f75c <_vfiprintf_r+0x5c>
 800f73e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f740:	07dc      	lsls	r4, r3, #31
 800f742:	d504      	bpl.n	800f74e <_vfiprintf_r+0x4e>
 800f744:	f04f 30ff 	mov.w	r0, #4294967295
 800f748:	b01d      	add	sp, #116	; 0x74
 800f74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74e:	89ab      	ldrh	r3, [r5, #12]
 800f750:	0598      	lsls	r0, r3, #22
 800f752:	d4f7      	bmi.n	800f744 <_vfiprintf_r+0x44>
 800f754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f756:	f7ff fe7c 	bl	800f452 <__retarget_lock_release_recursive>
 800f75a:	e7f3      	b.n	800f744 <_vfiprintf_r+0x44>
 800f75c:	2300      	movs	r3, #0
 800f75e:	9309      	str	r3, [sp, #36]	; 0x24
 800f760:	2320      	movs	r3, #32
 800f762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f766:	f8cd 800c 	str.w	r8, [sp, #12]
 800f76a:	2330      	movs	r3, #48	; 0x30
 800f76c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f920 <_vfiprintf_r+0x220>
 800f770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f774:	f04f 0901 	mov.w	r9, #1
 800f778:	4623      	mov	r3, r4
 800f77a:	469a      	mov	sl, r3
 800f77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f780:	b10a      	cbz	r2, 800f786 <_vfiprintf_r+0x86>
 800f782:	2a25      	cmp	r2, #37	; 0x25
 800f784:	d1f9      	bne.n	800f77a <_vfiprintf_r+0x7a>
 800f786:	ebba 0b04 	subs.w	fp, sl, r4
 800f78a:	d00b      	beq.n	800f7a4 <_vfiprintf_r+0xa4>
 800f78c:	465b      	mov	r3, fp
 800f78e:	4622      	mov	r2, r4
 800f790:	4629      	mov	r1, r5
 800f792:	4630      	mov	r0, r6
 800f794:	f7ff ffa1 	bl	800f6da <__sfputs_r>
 800f798:	3001      	adds	r0, #1
 800f79a:	f000 80a9 	beq.w	800f8f0 <_vfiprintf_r+0x1f0>
 800f79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7a0:	445a      	add	r2, fp
 800f7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800f7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f000 80a1 	beq.w	800f8f0 <_vfiprintf_r+0x1f0>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7b8:	f10a 0a01 	add.w	sl, sl, #1
 800f7bc:	9304      	str	r3, [sp, #16]
 800f7be:	9307      	str	r3, [sp, #28]
 800f7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800f7c6:	4654      	mov	r4, sl
 800f7c8:	2205      	movs	r2, #5
 800f7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ce:	4854      	ldr	r0, [pc, #336]	; (800f920 <_vfiprintf_r+0x220>)
 800f7d0:	f7f0 fd1e 	bl	8000210 <memchr>
 800f7d4:	9a04      	ldr	r2, [sp, #16]
 800f7d6:	b9d8      	cbnz	r0, 800f810 <_vfiprintf_r+0x110>
 800f7d8:	06d1      	lsls	r1, r2, #27
 800f7da:	bf44      	itt	mi
 800f7dc:	2320      	movmi	r3, #32
 800f7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7e2:	0713      	lsls	r3, r2, #28
 800f7e4:	bf44      	itt	mi
 800f7e6:	232b      	movmi	r3, #43	; 0x2b
 800f7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f7f2:	d015      	beq.n	800f820 <_vfiprintf_r+0x120>
 800f7f4:	9a07      	ldr	r2, [sp, #28]
 800f7f6:	4654      	mov	r4, sl
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	f04f 0c0a 	mov.w	ip, #10
 800f7fe:	4621      	mov	r1, r4
 800f800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f804:	3b30      	subs	r3, #48	; 0x30
 800f806:	2b09      	cmp	r3, #9
 800f808:	d94d      	bls.n	800f8a6 <_vfiprintf_r+0x1a6>
 800f80a:	b1b0      	cbz	r0, 800f83a <_vfiprintf_r+0x13a>
 800f80c:	9207      	str	r2, [sp, #28]
 800f80e:	e014      	b.n	800f83a <_vfiprintf_r+0x13a>
 800f810:	eba0 0308 	sub.w	r3, r0, r8
 800f814:	fa09 f303 	lsl.w	r3, r9, r3
 800f818:	4313      	orrs	r3, r2
 800f81a:	9304      	str	r3, [sp, #16]
 800f81c:	46a2      	mov	sl, r4
 800f81e:	e7d2      	b.n	800f7c6 <_vfiprintf_r+0xc6>
 800f820:	9b03      	ldr	r3, [sp, #12]
 800f822:	1d19      	adds	r1, r3, #4
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	9103      	str	r1, [sp, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	bfbb      	ittet	lt
 800f82c:	425b      	neglt	r3, r3
 800f82e:	f042 0202 	orrlt.w	r2, r2, #2
 800f832:	9307      	strge	r3, [sp, #28]
 800f834:	9307      	strlt	r3, [sp, #28]
 800f836:	bfb8      	it	lt
 800f838:	9204      	strlt	r2, [sp, #16]
 800f83a:	7823      	ldrb	r3, [r4, #0]
 800f83c:	2b2e      	cmp	r3, #46	; 0x2e
 800f83e:	d10c      	bne.n	800f85a <_vfiprintf_r+0x15a>
 800f840:	7863      	ldrb	r3, [r4, #1]
 800f842:	2b2a      	cmp	r3, #42	; 0x2a
 800f844:	d134      	bne.n	800f8b0 <_vfiprintf_r+0x1b0>
 800f846:	9b03      	ldr	r3, [sp, #12]
 800f848:	1d1a      	adds	r2, r3, #4
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	9203      	str	r2, [sp, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	bfb8      	it	lt
 800f852:	f04f 33ff 	movlt.w	r3, #4294967295
 800f856:	3402      	adds	r4, #2
 800f858:	9305      	str	r3, [sp, #20]
 800f85a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f930 <_vfiprintf_r+0x230>
 800f85e:	7821      	ldrb	r1, [r4, #0]
 800f860:	2203      	movs	r2, #3
 800f862:	4650      	mov	r0, sl
 800f864:	f7f0 fcd4 	bl	8000210 <memchr>
 800f868:	b138      	cbz	r0, 800f87a <_vfiprintf_r+0x17a>
 800f86a:	9b04      	ldr	r3, [sp, #16]
 800f86c:	eba0 000a 	sub.w	r0, r0, sl
 800f870:	2240      	movs	r2, #64	; 0x40
 800f872:	4082      	lsls	r2, r0
 800f874:	4313      	orrs	r3, r2
 800f876:	3401      	adds	r4, #1
 800f878:	9304      	str	r3, [sp, #16]
 800f87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f87e:	4829      	ldr	r0, [pc, #164]	; (800f924 <_vfiprintf_r+0x224>)
 800f880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f884:	2206      	movs	r2, #6
 800f886:	f7f0 fcc3 	bl	8000210 <memchr>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d03f      	beq.n	800f90e <_vfiprintf_r+0x20e>
 800f88e:	4b26      	ldr	r3, [pc, #152]	; (800f928 <_vfiprintf_r+0x228>)
 800f890:	bb1b      	cbnz	r3, 800f8da <_vfiprintf_r+0x1da>
 800f892:	9b03      	ldr	r3, [sp, #12]
 800f894:	3307      	adds	r3, #7
 800f896:	f023 0307 	bic.w	r3, r3, #7
 800f89a:	3308      	adds	r3, #8
 800f89c:	9303      	str	r3, [sp, #12]
 800f89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8a0:	443b      	add	r3, r7
 800f8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8a4:	e768      	b.n	800f778 <_vfiprintf_r+0x78>
 800f8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	2001      	movs	r0, #1
 800f8ae:	e7a6      	b.n	800f7fe <_vfiprintf_r+0xfe>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	3401      	adds	r4, #1
 800f8b4:	9305      	str	r3, [sp, #20]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	f04f 0c0a 	mov.w	ip, #10
 800f8bc:	4620      	mov	r0, r4
 800f8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8c2:	3a30      	subs	r2, #48	; 0x30
 800f8c4:	2a09      	cmp	r2, #9
 800f8c6:	d903      	bls.n	800f8d0 <_vfiprintf_r+0x1d0>
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d0c6      	beq.n	800f85a <_vfiprintf_r+0x15a>
 800f8cc:	9105      	str	r1, [sp, #20]
 800f8ce:	e7c4      	b.n	800f85a <_vfiprintf_r+0x15a>
 800f8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e7f0      	b.n	800f8bc <_vfiprintf_r+0x1bc>
 800f8da:	ab03      	add	r3, sp, #12
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	462a      	mov	r2, r5
 800f8e0:	4b12      	ldr	r3, [pc, #72]	; (800f92c <_vfiprintf_r+0x22c>)
 800f8e2:	a904      	add	r1, sp, #16
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f3af 8000 	nop.w
 800f8ea:	4607      	mov	r7, r0
 800f8ec:	1c78      	adds	r0, r7, #1
 800f8ee:	d1d6      	bne.n	800f89e <_vfiprintf_r+0x19e>
 800f8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8f2:	07d9      	lsls	r1, r3, #31
 800f8f4:	d405      	bmi.n	800f902 <_vfiprintf_r+0x202>
 800f8f6:	89ab      	ldrh	r3, [r5, #12]
 800f8f8:	059a      	lsls	r2, r3, #22
 800f8fa:	d402      	bmi.n	800f902 <_vfiprintf_r+0x202>
 800f8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8fe:	f7ff fda8 	bl	800f452 <__retarget_lock_release_recursive>
 800f902:	89ab      	ldrh	r3, [r5, #12]
 800f904:	065b      	lsls	r3, r3, #25
 800f906:	f53f af1d 	bmi.w	800f744 <_vfiprintf_r+0x44>
 800f90a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f90c:	e71c      	b.n	800f748 <_vfiprintf_r+0x48>
 800f90e:	ab03      	add	r3, sp, #12
 800f910:	9300      	str	r3, [sp, #0]
 800f912:	462a      	mov	r2, r5
 800f914:	4b05      	ldr	r3, [pc, #20]	; (800f92c <_vfiprintf_r+0x22c>)
 800f916:	a904      	add	r1, sp, #16
 800f918:	4630      	mov	r0, r6
 800f91a:	f000 f879 	bl	800fa10 <_printf_i>
 800f91e:	e7e4      	b.n	800f8ea <_vfiprintf_r+0x1ea>
 800f920:	08012c69 	.word	0x08012c69
 800f924:	08012c73 	.word	0x08012c73
 800f928:	00000000 	.word	0x00000000
 800f92c:	0800f6db 	.word	0x0800f6db
 800f930:	08012c6f 	.word	0x08012c6f

0800f934 <_printf_common>:
 800f934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f938:	4616      	mov	r6, r2
 800f93a:	4699      	mov	r9, r3
 800f93c:	688a      	ldr	r2, [r1, #8]
 800f93e:	690b      	ldr	r3, [r1, #16]
 800f940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f944:	4293      	cmp	r3, r2
 800f946:	bfb8      	it	lt
 800f948:	4613      	movlt	r3, r2
 800f94a:	6033      	str	r3, [r6, #0]
 800f94c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f950:	4607      	mov	r7, r0
 800f952:	460c      	mov	r4, r1
 800f954:	b10a      	cbz	r2, 800f95a <_printf_common+0x26>
 800f956:	3301      	adds	r3, #1
 800f958:	6033      	str	r3, [r6, #0]
 800f95a:	6823      	ldr	r3, [r4, #0]
 800f95c:	0699      	lsls	r1, r3, #26
 800f95e:	bf42      	ittt	mi
 800f960:	6833      	ldrmi	r3, [r6, #0]
 800f962:	3302      	addmi	r3, #2
 800f964:	6033      	strmi	r3, [r6, #0]
 800f966:	6825      	ldr	r5, [r4, #0]
 800f968:	f015 0506 	ands.w	r5, r5, #6
 800f96c:	d106      	bne.n	800f97c <_printf_common+0x48>
 800f96e:	f104 0a19 	add.w	sl, r4, #25
 800f972:	68e3      	ldr	r3, [r4, #12]
 800f974:	6832      	ldr	r2, [r6, #0]
 800f976:	1a9b      	subs	r3, r3, r2
 800f978:	42ab      	cmp	r3, r5
 800f97a:	dc26      	bgt.n	800f9ca <_printf_common+0x96>
 800f97c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f980:	1e13      	subs	r3, r2, #0
 800f982:	6822      	ldr	r2, [r4, #0]
 800f984:	bf18      	it	ne
 800f986:	2301      	movne	r3, #1
 800f988:	0692      	lsls	r2, r2, #26
 800f98a:	d42b      	bmi.n	800f9e4 <_printf_common+0xb0>
 800f98c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f990:	4649      	mov	r1, r9
 800f992:	4638      	mov	r0, r7
 800f994:	47c0      	blx	r8
 800f996:	3001      	adds	r0, #1
 800f998:	d01e      	beq.n	800f9d8 <_printf_common+0xa4>
 800f99a:	6823      	ldr	r3, [r4, #0]
 800f99c:	6922      	ldr	r2, [r4, #16]
 800f99e:	f003 0306 	and.w	r3, r3, #6
 800f9a2:	2b04      	cmp	r3, #4
 800f9a4:	bf02      	ittt	eq
 800f9a6:	68e5      	ldreq	r5, [r4, #12]
 800f9a8:	6833      	ldreq	r3, [r6, #0]
 800f9aa:	1aed      	subeq	r5, r5, r3
 800f9ac:	68a3      	ldr	r3, [r4, #8]
 800f9ae:	bf0c      	ite	eq
 800f9b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9b4:	2500      	movne	r5, #0
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	bfc4      	itt	gt
 800f9ba:	1a9b      	subgt	r3, r3, r2
 800f9bc:	18ed      	addgt	r5, r5, r3
 800f9be:	2600      	movs	r6, #0
 800f9c0:	341a      	adds	r4, #26
 800f9c2:	42b5      	cmp	r5, r6
 800f9c4:	d11a      	bne.n	800f9fc <_printf_common+0xc8>
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	e008      	b.n	800f9dc <_printf_common+0xa8>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	4652      	mov	r2, sl
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	47c0      	blx	r8
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	d103      	bne.n	800f9e0 <_printf_common+0xac>
 800f9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9e0:	3501      	adds	r5, #1
 800f9e2:	e7c6      	b.n	800f972 <_printf_common+0x3e>
 800f9e4:	18e1      	adds	r1, r4, r3
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	2030      	movs	r0, #48	; 0x30
 800f9ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9ee:	4422      	add	r2, r4
 800f9f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9f8:	3302      	adds	r3, #2
 800f9fa:	e7c7      	b.n	800f98c <_printf_common+0x58>
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	4622      	mov	r2, r4
 800fa00:	4649      	mov	r1, r9
 800fa02:	4638      	mov	r0, r7
 800fa04:	47c0      	blx	r8
 800fa06:	3001      	adds	r0, #1
 800fa08:	d0e6      	beq.n	800f9d8 <_printf_common+0xa4>
 800fa0a:	3601      	adds	r6, #1
 800fa0c:	e7d9      	b.n	800f9c2 <_printf_common+0x8e>
	...

0800fa10 <_printf_i>:
 800fa10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa14:	7e0f      	ldrb	r7, [r1, #24]
 800fa16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa18:	2f78      	cmp	r7, #120	; 0x78
 800fa1a:	4691      	mov	r9, r2
 800fa1c:	4680      	mov	r8, r0
 800fa1e:	460c      	mov	r4, r1
 800fa20:	469a      	mov	sl, r3
 800fa22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa26:	d807      	bhi.n	800fa38 <_printf_i+0x28>
 800fa28:	2f62      	cmp	r7, #98	; 0x62
 800fa2a:	d80a      	bhi.n	800fa42 <_printf_i+0x32>
 800fa2c:	2f00      	cmp	r7, #0
 800fa2e:	f000 80d4 	beq.w	800fbda <_printf_i+0x1ca>
 800fa32:	2f58      	cmp	r7, #88	; 0x58
 800fa34:	f000 80c0 	beq.w	800fbb8 <_printf_i+0x1a8>
 800fa38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa40:	e03a      	b.n	800fab8 <_printf_i+0xa8>
 800fa42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa46:	2b15      	cmp	r3, #21
 800fa48:	d8f6      	bhi.n	800fa38 <_printf_i+0x28>
 800fa4a:	a101      	add	r1, pc, #4	; (adr r1, 800fa50 <_printf_i+0x40>)
 800fa4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa50:	0800faa9 	.word	0x0800faa9
 800fa54:	0800fabd 	.word	0x0800fabd
 800fa58:	0800fa39 	.word	0x0800fa39
 800fa5c:	0800fa39 	.word	0x0800fa39
 800fa60:	0800fa39 	.word	0x0800fa39
 800fa64:	0800fa39 	.word	0x0800fa39
 800fa68:	0800fabd 	.word	0x0800fabd
 800fa6c:	0800fa39 	.word	0x0800fa39
 800fa70:	0800fa39 	.word	0x0800fa39
 800fa74:	0800fa39 	.word	0x0800fa39
 800fa78:	0800fa39 	.word	0x0800fa39
 800fa7c:	0800fbc1 	.word	0x0800fbc1
 800fa80:	0800fae9 	.word	0x0800fae9
 800fa84:	0800fb7b 	.word	0x0800fb7b
 800fa88:	0800fa39 	.word	0x0800fa39
 800fa8c:	0800fa39 	.word	0x0800fa39
 800fa90:	0800fbe3 	.word	0x0800fbe3
 800fa94:	0800fa39 	.word	0x0800fa39
 800fa98:	0800fae9 	.word	0x0800fae9
 800fa9c:	0800fa39 	.word	0x0800fa39
 800faa0:	0800fa39 	.word	0x0800fa39
 800faa4:	0800fb83 	.word	0x0800fb83
 800faa8:	682b      	ldr	r3, [r5, #0]
 800faaa:	1d1a      	adds	r2, r3, #4
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	602a      	str	r2, [r5, #0]
 800fab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fab8:	2301      	movs	r3, #1
 800faba:	e09f      	b.n	800fbfc <_printf_i+0x1ec>
 800fabc:	6820      	ldr	r0, [r4, #0]
 800fabe:	682b      	ldr	r3, [r5, #0]
 800fac0:	0607      	lsls	r7, r0, #24
 800fac2:	f103 0104 	add.w	r1, r3, #4
 800fac6:	6029      	str	r1, [r5, #0]
 800fac8:	d501      	bpl.n	800face <_printf_i+0xbe>
 800faca:	681e      	ldr	r6, [r3, #0]
 800facc:	e003      	b.n	800fad6 <_printf_i+0xc6>
 800face:	0646      	lsls	r6, r0, #25
 800fad0:	d5fb      	bpl.n	800faca <_printf_i+0xba>
 800fad2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	da03      	bge.n	800fae2 <_printf_i+0xd2>
 800fada:	232d      	movs	r3, #45	; 0x2d
 800fadc:	4276      	negs	r6, r6
 800fade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fae2:	485a      	ldr	r0, [pc, #360]	; (800fc4c <_printf_i+0x23c>)
 800fae4:	230a      	movs	r3, #10
 800fae6:	e012      	b.n	800fb0e <_printf_i+0xfe>
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	6820      	ldr	r0, [r4, #0]
 800faec:	1d19      	adds	r1, r3, #4
 800faee:	6029      	str	r1, [r5, #0]
 800faf0:	0605      	lsls	r5, r0, #24
 800faf2:	d501      	bpl.n	800faf8 <_printf_i+0xe8>
 800faf4:	681e      	ldr	r6, [r3, #0]
 800faf6:	e002      	b.n	800fafe <_printf_i+0xee>
 800faf8:	0641      	lsls	r1, r0, #25
 800fafa:	d5fb      	bpl.n	800faf4 <_printf_i+0xe4>
 800fafc:	881e      	ldrh	r6, [r3, #0]
 800fafe:	4853      	ldr	r0, [pc, #332]	; (800fc4c <_printf_i+0x23c>)
 800fb00:	2f6f      	cmp	r7, #111	; 0x6f
 800fb02:	bf0c      	ite	eq
 800fb04:	2308      	moveq	r3, #8
 800fb06:	230a      	movne	r3, #10
 800fb08:	2100      	movs	r1, #0
 800fb0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb0e:	6865      	ldr	r5, [r4, #4]
 800fb10:	60a5      	str	r5, [r4, #8]
 800fb12:	2d00      	cmp	r5, #0
 800fb14:	bfa2      	ittt	ge
 800fb16:	6821      	ldrge	r1, [r4, #0]
 800fb18:	f021 0104 	bicge.w	r1, r1, #4
 800fb1c:	6021      	strge	r1, [r4, #0]
 800fb1e:	b90e      	cbnz	r6, 800fb24 <_printf_i+0x114>
 800fb20:	2d00      	cmp	r5, #0
 800fb22:	d04b      	beq.n	800fbbc <_printf_i+0x1ac>
 800fb24:	4615      	mov	r5, r2
 800fb26:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb2a:	fb03 6711 	mls	r7, r3, r1, r6
 800fb2e:	5dc7      	ldrb	r7, [r0, r7]
 800fb30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb34:	4637      	mov	r7, r6
 800fb36:	42bb      	cmp	r3, r7
 800fb38:	460e      	mov	r6, r1
 800fb3a:	d9f4      	bls.n	800fb26 <_printf_i+0x116>
 800fb3c:	2b08      	cmp	r3, #8
 800fb3e:	d10b      	bne.n	800fb58 <_printf_i+0x148>
 800fb40:	6823      	ldr	r3, [r4, #0]
 800fb42:	07de      	lsls	r6, r3, #31
 800fb44:	d508      	bpl.n	800fb58 <_printf_i+0x148>
 800fb46:	6923      	ldr	r3, [r4, #16]
 800fb48:	6861      	ldr	r1, [r4, #4]
 800fb4a:	4299      	cmp	r1, r3
 800fb4c:	bfde      	ittt	le
 800fb4e:	2330      	movle	r3, #48	; 0x30
 800fb50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb58:	1b52      	subs	r2, r2, r5
 800fb5a:	6122      	str	r2, [r4, #16]
 800fb5c:	f8cd a000 	str.w	sl, [sp]
 800fb60:	464b      	mov	r3, r9
 800fb62:	aa03      	add	r2, sp, #12
 800fb64:	4621      	mov	r1, r4
 800fb66:	4640      	mov	r0, r8
 800fb68:	f7ff fee4 	bl	800f934 <_printf_common>
 800fb6c:	3001      	adds	r0, #1
 800fb6e:	d14a      	bne.n	800fc06 <_printf_i+0x1f6>
 800fb70:	f04f 30ff 	mov.w	r0, #4294967295
 800fb74:	b004      	add	sp, #16
 800fb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb7a:	6823      	ldr	r3, [r4, #0]
 800fb7c:	f043 0320 	orr.w	r3, r3, #32
 800fb80:	6023      	str	r3, [r4, #0]
 800fb82:	4833      	ldr	r0, [pc, #204]	; (800fc50 <_printf_i+0x240>)
 800fb84:	2778      	movs	r7, #120	; 0x78
 800fb86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	6829      	ldr	r1, [r5, #0]
 800fb8e:	061f      	lsls	r7, r3, #24
 800fb90:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb94:	d402      	bmi.n	800fb9c <_printf_i+0x18c>
 800fb96:	065f      	lsls	r7, r3, #25
 800fb98:	bf48      	it	mi
 800fb9a:	b2b6      	uxthmi	r6, r6
 800fb9c:	07df      	lsls	r7, r3, #31
 800fb9e:	bf48      	it	mi
 800fba0:	f043 0320 	orrmi.w	r3, r3, #32
 800fba4:	6029      	str	r1, [r5, #0]
 800fba6:	bf48      	it	mi
 800fba8:	6023      	strmi	r3, [r4, #0]
 800fbaa:	b91e      	cbnz	r6, 800fbb4 <_printf_i+0x1a4>
 800fbac:	6823      	ldr	r3, [r4, #0]
 800fbae:	f023 0320 	bic.w	r3, r3, #32
 800fbb2:	6023      	str	r3, [r4, #0]
 800fbb4:	2310      	movs	r3, #16
 800fbb6:	e7a7      	b.n	800fb08 <_printf_i+0xf8>
 800fbb8:	4824      	ldr	r0, [pc, #144]	; (800fc4c <_printf_i+0x23c>)
 800fbba:	e7e4      	b.n	800fb86 <_printf_i+0x176>
 800fbbc:	4615      	mov	r5, r2
 800fbbe:	e7bd      	b.n	800fb3c <_printf_i+0x12c>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	6826      	ldr	r6, [r4, #0]
 800fbc4:	6961      	ldr	r1, [r4, #20]
 800fbc6:	1d18      	adds	r0, r3, #4
 800fbc8:	6028      	str	r0, [r5, #0]
 800fbca:	0635      	lsls	r5, r6, #24
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	d501      	bpl.n	800fbd4 <_printf_i+0x1c4>
 800fbd0:	6019      	str	r1, [r3, #0]
 800fbd2:	e002      	b.n	800fbda <_printf_i+0x1ca>
 800fbd4:	0670      	lsls	r0, r6, #25
 800fbd6:	d5fb      	bpl.n	800fbd0 <_printf_i+0x1c0>
 800fbd8:	8019      	strh	r1, [r3, #0]
 800fbda:	2300      	movs	r3, #0
 800fbdc:	6123      	str	r3, [r4, #16]
 800fbde:	4615      	mov	r5, r2
 800fbe0:	e7bc      	b.n	800fb5c <_printf_i+0x14c>
 800fbe2:	682b      	ldr	r3, [r5, #0]
 800fbe4:	1d1a      	adds	r2, r3, #4
 800fbe6:	602a      	str	r2, [r5, #0]
 800fbe8:	681d      	ldr	r5, [r3, #0]
 800fbea:	6862      	ldr	r2, [r4, #4]
 800fbec:	2100      	movs	r1, #0
 800fbee:	4628      	mov	r0, r5
 800fbf0:	f7f0 fb0e 	bl	8000210 <memchr>
 800fbf4:	b108      	cbz	r0, 800fbfa <_printf_i+0x1ea>
 800fbf6:	1b40      	subs	r0, r0, r5
 800fbf8:	6060      	str	r0, [r4, #4]
 800fbfa:	6863      	ldr	r3, [r4, #4]
 800fbfc:	6123      	str	r3, [r4, #16]
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc04:	e7aa      	b.n	800fb5c <_printf_i+0x14c>
 800fc06:	6923      	ldr	r3, [r4, #16]
 800fc08:	462a      	mov	r2, r5
 800fc0a:	4649      	mov	r1, r9
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	47d0      	blx	sl
 800fc10:	3001      	adds	r0, #1
 800fc12:	d0ad      	beq.n	800fb70 <_printf_i+0x160>
 800fc14:	6823      	ldr	r3, [r4, #0]
 800fc16:	079b      	lsls	r3, r3, #30
 800fc18:	d413      	bmi.n	800fc42 <_printf_i+0x232>
 800fc1a:	68e0      	ldr	r0, [r4, #12]
 800fc1c:	9b03      	ldr	r3, [sp, #12]
 800fc1e:	4298      	cmp	r0, r3
 800fc20:	bfb8      	it	lt
 800fc22:	4618      	movlt	r0, r3
 800fc24:	e7a6      	b.n	800fb74 <_printf_i+0x164>
 800fc26:	2301      	movs	r3, #1
 800fc28:	4632      	mov	r2, r6
 800fc2a:	4649      	mov	r1, r9
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	47d0      	blx	sl
 800fc30:	3001      	adds	r0, #1
 800fc32:	d09d      	beq.n	800fb70 <_printf_i+0x160>
 800fc34:	3501      	adds	r5, #1
 800fc36:	68e3      	ldr	r3, [r4, #12]
 800fc38:	9903      	ldr	r1, [sp, #12]
 800fc3a:	1a5b      	subs	r3, r3, r1
 800fc3c:	42ab      	cmp	r3, r5
 800fc3e:	dcf2      	bgt.n	800fc26 <_printf_i+0x216>
 800fc40:	e7eb      	b.n	800fc1a <_printf_i+0x20a>
 800fc42:	2500      	movs	r5, #0
 800fc44:	f104 0619 	add.w	r6, r4, #25
 800fc48:	e7f5      	b.n	800fc36 <_printf_i+0x226>
 800fc4a:	bf00      	nop
 800fc4c:	08012c7a 	.word	0x08012c7a
 800fc50:	08012c8b 	.word	0x08012c8b

0800fc54 <__sflush_r>:
 800fc54:	898a      	ldrh	r2, [r1, #12]
 800fc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5a:	4605      	mov	r5, r0
 800fc5c:	0710      	lsls	r0, r2, #28
 800fc5e:	460c      	mov	r4, r1
 800fc60:	d458      	bmi.n	800fd14 <__sflush_r+0xc0>
 800fc62:	684b      	ldr	r3, [r1, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	dc05      	bgt.n	800fc74 <__sflush_r+0x20>
 800fc68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	dc02      	bgt.n	800fc74 <__sflush_r+0x20>
 800fc6e:	2000      	movs	r0, #0
 800fc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc76:	2e00      	cmp	r6, #0
 800fc78:	d0f9      	beq.n	800fc6e <__sflush_r+0x1a>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc80:	682f      	ldr	r7, [r5, #0]
 800fc82:	6a21      	ldr	r1, [r4, #32]
 800fc84:	602b      	str	r3, [r5, #0]
 800fc86:	d032      	beq.n	800fcee <__sflush_r+0x9a>
 800fc88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc8a:	89a3      	ldrh	r3, [r4, #12]
 800fc8c:	075a      	lsls	r2, r3, #29
 800fc8e:	d505      	bpl.n	800fc9c <__sflush_r+0x48>
 800fc90:	6863      	ldr	r3, [r4, #4]
 800fc92:	1ac0      	subs	r0, r0, r3
 800fc94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc96:	b10b      	cbz	r3, 800fc9c <__sflush_r+0x48>
 800fc98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc9a:	1ac0      	subs	r0, r0, r3
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	4602      	mov	r2, r0
 800fca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fca2:	6a21      	ldr	r1, [r4, #32]
 800fca4:	4628      	mov	r0, r5
 800fca6:	47b0      	blx	r6
 800fca8:	1c43      	adds	r3, r0, #1
 800fcaa:	89a3      	ldrh	r3, [r4, #12]
 800fcac:	d106      	bne.n	800fcbc <__sflush_r+0x68>
 800fcae:	6829      	ldr	r1, [r5, #0]
 800fcb0:	291d      	cmp	r1, #29
 800fcb2:	d82b      	bhi.n	800fd0c <__sflush_r+0xb8>
 800fcb4:	4a29      	ldr	r2, [pc, #164]	; (800fd5c <__sflush_r+0x108>)
 800fcb6:	410a      	asrs	r2, r1
 800fcb8:	07d6      	lsls	r6, r2, #31
 800fcba:	d427      	bmi.n	800fd0c <__sflush_r+0xb8>
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	6062      	str	r2, [r4, #4]
 800fcc0:	04d9      	lsls	r1, r3, #19
 800fcc2:	6922      	ldr	r2, [r4, #16]
 800fcc4:	6022      	str	r2, [r4, #0]
 800fcc6:	d504      	bpl.n	800fcd2 <__sflush_r+0x7e>
 800fcc8:	1c42      	adds	r2, r0, #1
 800fcca:	d101      	bne.n	800fcd0 <__sflush_r+0x7c>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b903      	cbnz	r3, 800fcd2 <__sflush_r+0x7e>
 800fcd0:	6560      	str	r0, [r4, #84]	; 0x54
 800fcd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcd4:	602f      	str	r7, [r5, #0]
 800fcd6:	2900      	cmp	r1, #0
 800fcd8:	d0c9      	beq.n	800fc6e <__sflush_r+0x1a>
 800fcda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcde:	4299      	cmp	r1, r3
 800fce0:	d002      	beq.n	800fce8 <__sflush_r+0x94>
 800fce2:	4628      	mov	r0, r5
 800fce4:	f7ff fbe2 	bl	800f4ac <_free_r>
 800fce8:	2000      	movs	r0, #0
 800fcea:	6360      	str	r0, [r4, #52]	; 0x34
 800fcec:	e7c0      	b.n	800fc70 <__sflush_r+0x1c>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	47b0      	blx	r6
 800fcf4:	1c41      	adds	r1, r0, #1
 800fcf6:	d1c8      	bne.n	800fc8a <__sflush_r+0x36>
 800fcf8:	682b      	ldr	r3, [r5, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d0c5      	beq.n	800fc8a <__sflush_r+0x36>
 800fcfe:	2b1d      	cmp	r3, #29
 800fd00:	d001      	beq.n	800fd06 <__sflush_r+0xb2>
 800fd02:	2b16      	cmp	r3, #22
 800fd04:	d101      	bne.n	800fd0a <__sflush_r+0xb6>
 800fd06:	602f      	str	r7, [r5, #0]
 800fd08:	e7b1      	b.n	800fc6e <__sflush_r+0x1a>
 800fd0a:	89a3      	ldrh	r3, [r4, #12]
 800fd0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd10:	81a3      	strh	r3, [r4, #12]
 800fd12:	e7ad      	b.n	800fc70 <__sflush_r+0x1c>
 800fd14:	690f      	ldr	r7, [r1, #16]
 800fd16:	2f00      	cmp	r7, #0
 800fd18:	d0a9      	beq.n	800fc6e <__sflush_r+0x1a>
 800fd1a:	0793      	lsls	r3, r2, #30
 800fd1c:	680e      	ldr	r6, [r1, #0]
 800fd1e:	bf08      	it	eq
 800fd20:	694b      	ldreq	r3, [r1, #20]
 800fd22:	600f      	str	r7, [r1, #0]
 800fd24:	bf18      	it	ne
 800fd26:	2300      	movne	r3, #0
 800fd28:	eba6 0807 	sub.w	r8, r6, r7
 800fd2c:	608b      	str	r3, [r1, #8]
 800fd2e:	f1b8 0f00 	cmp.w	r8, #0
 800fd32:	dd9c      	ble.n	800fc6e <__sflush_r+0x1a>
 800fd34:	6a21      	ldr	r1, [r4, #32]
 800fd36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd38:	4643      	mov	r3, r8
 800fd3a:	463a      	mov	r2, r7
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	47b0      	blx	r6
 800fd40:	2800      	cmp	r0, #0
 800fd42:	dc06      	bgt.n	800fd52 <__sflush_r+0xfe>
 800fd44:	89a3      	ldrh	r3, [r4, #12]
 800fd46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd4a:	81a3      	strh	r3, [r4, #12]
 800fd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd50:	e78e      	b.n	800fc70 <__sflush_r+0x1c>
 800fd52:	4407      	add	r7, r0
 800fd54:	eba8 0800 	sub.w	r8, r8, r0
 800fd58:	e7e9      	b.n	800fd2e <__sflush_r+0xda>
 800fd5a:	bf00      	nop
 800fd5c:	dfbffffe 	.word	0xdfbffffe

0800fd60 <_fflush_r>:
 800fd60:	b538      	push	{r3, r4, r5, lr}
 800fd62:	690b      	ldr	r3, [r1, #16]
 800fd64:	4605      	mov	r5, r0
 800fd66:	460c      	mov	r4, r1
 800fd68:	b913      	cbnz	r3, 800fd70 <_fflush_r+0x10>
 800fd6a:	2500      	movs	r5, #0
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	bd38      	pop	{r3, r4, r5, pc}
 800fd70:	b118      	cbz	r0, 800fd7a <_fflush_r+0x1a>
 800fd72:	6a03      	ldr	r3, [r0, #32]
 800fd74:	b90b      	cbnz	r3, 800fd7a <_fflush_r+0x1a>
 800fd76:	f7ff fa5d 	bl	800f234 <__sinit>
 800fd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d0f3      	beq.n	800fd6a <_fflush_r+0xa>
 800fd82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd84:	07d0      	lsls	r0, r2, #31
 800fd86:	d404      	bmi.n	800fd92 <_fflush_r+0x32>
 800fd88:	0599      	lsls	r1, r3, #22
 800fd8a:	d402      	bmi.n	800fd92 <_fflush_r+0x32>
 800fd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd8e:	f7ff fb5f 	bl	800f450 <__retarget_lock_acquire_recursive>
 800fd92:	4628      	mov	r0, r5
 800fd94:	4621      	mov	r1, r4
 800fd96:	f7ff ff5d 	bl	800fc54 <__sflush_r>
 800fd9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd9c:	07da      	lsls	r2, r3, #31
 800fd9e:	4605      	mov	r5, r0
 800fda0:	d4e4      	bmi.n	800fd6c <_fflush_r+0xc>
 800fda2:	89a3      	ldrh	r3, [r4, #12]
 800fda4:	059b      	lsls	r3, r3, #22
 800fda6:	d4e1      	bmi.n	800fd6c <_fflush_r+0xc>
 800fda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdaa:	f7ff fb52 	bl	800f452 <__retarget_lock_release_recursive>
 800fdae:	e7dd      	b.n	800fd6c <_fflush_r+0xc>

0800fdb0 <fiprintf>:
 800fdb0:	b40e      	push	{r1, r2, r3}
 800fdb2:	b503      	push	{r0, r1, lr}
 800fdb4:	4601      	mov	r1, r0
 800fdb6:	ab03      	add	r3, sp, #12
 800fdb8:	4805      	ldr	r0, [pc, #20]	; (800fdd0 <fiprintf+0x20>)
 800fdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdbe:	6800      	ldr	r0, [r0, #0]
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	f7ff fc9d 	bl	800f700 <_vfiprintf_r>
 800fdc6:	b002      	add	sp, #8
 800fdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdcc:	b003      	add	sp, #12
 800fdce:	4770      	bx	lr
 800fdd0:	20000084 	.word	0x20000084

0800fdd4 <__swbuf_r>:
 800fdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdd6:	460e      	mov	r6, r1
 800fdd8:	4614      	mov	r4, r2
 800fdda:	4605      	mov	r5, r0
 800fddc:	b118      	cbz	r0, 800fde6 <__swbuf_r+0x12>
 800fdde:	6a03      	ldr	r3, [r0, #32]
 800fde0:	b90b      	cbnz	r3, 800fde6 <__swbuf_r+0x12>
 800fde2:	f7ff fa27 	bl	800f234 <__sinit>
 800fde6:	69a3      	ldr	r3, [r4, #24]
 800fde8:	60a3      	str	r3, [r4, #8]
 800fdea:	89a3      	ldrh	r3, [r4, #12]
 800fdec:	071a      	lsls	r2, r3, #28
 800fdee:	d525      	bpl.n	800fe3c <__swbuf_r+0x68>
 800fdf0:	6923      	ldr	r3, [r4, #16]
 800fdf2:	b31b      	cbz	r3, 800fe3c <__swbuf_r+0x68>
 800fdf4:	6823      	ldr	r3, [r4, #0]
 800fdf6:	6922      	ldr	r2, [r4, #16]
 800fdf8:	1a98      	subs	r0, r3, r2
 800fdfa:	6963      	ldr	r3, [r4, #20]
 800fdfc:	b2f6      	uxtb	r6, r6
 800fdfe:	4283      	cmp	r3, r0
 800fe00:	4637      	mov	r7, r6
 800fe02:	dc04      	bgt.n	800fe0e <__swbuf_r+0x3a>
 800fe04:	4621      	mov	r1, r4
 800fe06:	4628      	mov	r0, r5
 800fe08:	f7ff ffaa 	bl	800fd60 <_fflush_r>
 800fe0c:	b9e0      	cbnz	r0, 800fe48 <__swbuf_r+0x74>
 800fe0e:	68a3      	ldr	r3, [r4, #8]
 800fe10:	3b01      	subs	r3, #1
 800fe12:	60a3      	str	r3, [r4, #8]
 800fe14:	6823      	ldr	r3, [r4, #0]
 800fe16:	1c5a      	adds	r2, r3, #1
 800fe18:	6022      	str	r2, [r4, #0]
 800fe1a:	701e      	strb	r6, [r3, #0]
 800fe1c:	6962      	ldr	r2, [r4, #20]
 800fe1e:	1c43      	adds	r3, r0, #1
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d004      	beq.n	800fe2e <__swbuf_r+0x5a>
 800fe24:	89a3      	ldrh	r3, [r4, #12]
 800fe26:	07db      	lsls	r3, r3, #31
 800fe28:	d506      	bpl.n	800fe38 <__swbuf_r+0x64>
 800fe2a:	2e0a      	cmp	r6, #10
 800fe2c:	d104      	bne.n	800fe38 <__swbuf_r+0x64>
 800fe2e:	4621      	mov	r1, r4
 800fe30:	4628      	mov	r0, r5
 800fe32:	f7ff ff95 	bl	800fd60 <_fflush_r>
 800fe36:	b938      	cbnz	r0, 800fe48 <__swbuf_r+0x74>
 800fe38:	4638      	mov	r0, r7
 800fe3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 f806 	bl	800fe50 <__swsetup_r>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d0d5      	beq.n	800fdf4 <__swbuf_r+0x20>
 800fe48:	f04f 37ff 	mov.w	r7, #4294967295
 800fe4c:	e7f4      	b.n	800fe38 <__swbuf_r+0x64>
	...

0800fe50 <__swsetup_r>:
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	4b2a      	ldr	r3, [pc, #168]	; (800fefc <__swsetup_r+0xac>)
 800fe54:	4605      	mov	r5, r0
 800fe56:	6818      	ldr	r0, [r3, #0]
 800fe58:	460c      	mov	r4, r1
 800fe5a:	b118      	cbz	r0, 800fe64 <__swsetup_r+0x14>
 800fe5c:	6a03      	ldr	r3, [r0, #32]
 800fe5e:	b90b      	cbnz	r3, 800fe64 <__swsetup_r+0x14>
 800fe60:	f7ff f9e8 	bl	800f234 <__sinit>
 800fe64:	89a3      	ldrh	r3, [r4, #12]
 800fe66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe6a:	0718      	lsls	r0, r3, #28
 800fe6c:	d422      	bmi.n	800feb4 <__swsetup_r+0x64>
 800fe6e:	06d9      	lsls	r1, r3, #27
 800fe70:	d407      	bmi.n	800fe82 <__swsetup_r+0x32>
 800fe72:	2309      	movs	r3, #9
 800fe74:	602b      	str	r3, [r5, #0]
 800fe76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe7a:	81a3      	strh	r3, [r4, #12]
 800fe7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe80:	e034      	b.n	800feec <__swsetup_r+0x9c>
 800fe82:	0758      	lsls	r0, r3, #29
 800fe84:	d512      	bpl.n	800feac <__swsetup_r+0x5c>
 800fe86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe88:	b141      	cbz	r1, 800fe9c <__swsetup_r+0x4c>
 800fe8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe8e:	4299      	cmp	r1, r3
 800fe90:	d002      	beq.n	800fe98 <__swsetup_r+0x48>
 800fe92:	4628      	mov	r0, r5
 800fe94:	f7ff fb0a 	bl	800f4ac <_free_r>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	6363      	str	r3, [r4, #52]	; 0x34
 800fe9c:	89a3      	ldrh	r3, [r4, #12]
 800fe9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fea2:	81a3      	strh	r3, [r4, #12]
 800fea4:	2300      	movs	r3, #0
 800fea6:	6063      	str	r3, [r4, #4]
 800fea8:	6923      	ldr	r3, [r4, #16]
 800feaa:	6023      	str	r3, [r4, #0]
 800feac:	89a3      	ldrh	r3, [r4, #12]
 800feae:	f043 0308 	orr.w	r3, r3, #8
 800feb2:	81a3      	strh	r3, [r4, #12]
 800feb4:	6923      	ldr	r3, [r4, #16]
 800feb6:	b94b      	cbnz	r3, 800fecc <__swsetup_r+0x7c>
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800febe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fec2:	d003      	beq.n	800fecc <__swsetup_r+0x7c>
 800fec4:	4621      	mov	r1, r4
 800fec6:	4628      	mov	r0, r5
 800fec8:	f000 f857 	bl	800ff7a <__smakebuf_r>
 800fecc:	89a0      	ldrh	r0, [r4, #12]
 800fece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fed2:	f010 0301 	ands.w	r3, r0, #1
 800fed6:	d00a      	beq.n	800feee <__swsetup_r+0x9e>
 800fed8:	2300      	movs	r3, #0
 800feda:	60a3      	str	r3, [r4, #8]
 800fedc:	6963      	ldr	r3, [r4, #20]
 800fede:	425b      	negs	r3, r3
 800fee0:	61a3      	str	r3, [r4, #24]
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	b943      	cbnz	r3, 800fef8 <__swsetup_r+0xa8>
 800fee6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800feea:	d1c4      	bne.n	800fe76 <__swsetup_r+0x26>
 800feec:	bd38      	pop	{r3, r4, r5, pc}
 800feee:	0781      	lsls	r1, r0, #30
 800fef0:	bf58      	it	pl
 800fef2:	6963      	ldrpl	r3, [r4, #20]
 800fef4:	60a3      	str	r3, [r4, #8]
 800fef6:	e7f4      	b.n	800fee2 <__swsetup_r+0x92>
 800fef8:	2000      	movs	r0, #0
 800fefa:	e7f7      	b.n	800feec <__swsetup_r+0x9c>
 800fefc:	20000084 	.word	0x20000084

0800ff00 <_sbrk_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4d06      	ldr	r5, [pc, #24]	; (800ff1c <_sbrk_r+0x1c>)
 800ff04:	2300      	movs	r3, #0
 800ff06:	4604      	mov	r4, r0
 800ff08:	4608      	mov	r0, r1
 800ff0a:	602b      	str	r3, [r5, #0]
 800ff0c:	f7f0 fe9e 	bl	8000c4c <_sbrk>
 800ff10:	1c43      	adds	r3, r0, #1
 800ff12:	d102      	bne.n	800ff1a <_sbrk_r+0x1a>
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	b103      	cbz	r3, 800ff1a <_sbrk_r+0x1a>
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	bd38      	pop	{r3, r4, r5, pc}
 800ff1c:	20008a64 	.word	0x20008a64

0800ff20 <abort>:
 800ff20:	b508      	push	{r3, lr}
 800ff22:	2006      	movs	r0, #6
 800ff24:	f000 f88e 	bl	8010044 <raise>
 800ff28:	2001      	movs	r0, #1
 800ff2a:	f7f0 fe17 	bl	8000b5c <_exit>

0800ff2e <__swhatbuf_r>:
 800ff2e:	b570      	push	{r4, r5, r6, lr}
 800ff30:	460c      	mov	r4, r1
 800ff32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff36:	2900      	cmp	r1, #0
 800ff38:	b096      	sub	sp, #88	; 0x58
 800ff3a:	4615      	mov	r5, r2
 800ff3c:	461e      	mov	r6, r3
 800ff3e:	da0d      	bge.n	800ff5c <__swhatbuf_r+0x2e>
 800ff40:	89a3      	ldrh	r3, [r4, #12]
 800ff42:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ff46:	f04f 0100 	mov.w	r1, #0
 800ff4a:	bf0c      	ite	eq
 800ff4c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ff50:	2340      	movne	r3, #64	; 0x40
 800ff52:	2000      	movs	r0, #0
 800ff54:	6031      	str	r1, [r6, #0]
 800ff56:	602b      	str	r3, [r5, #0]
 800ff58:	b016      	add	sp, #88	; 0x58
 800ff5a:	bd70      	pop	{r4, r5, r6, pc}
 800ff5c:	466a      	mov	r2, sp
 800ff5e:	f000 f879 	bl	8010054 <_fstat_r>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	dbec      	blt.n	800ff40 <__swhatbuf_r+0x12>
 800ff66:	9901      	ldr	r1, [sp, #4]
 800ff68:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ff6c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ff70:	4259      	negs	r1, r3
 800ff72:	4159      	adcs	r1, r3
 800ff74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff78:	e7eb      	b.n	800ff52 <__swhatbuf_r+0x24>

0800ff7a <__smakebuf_r>:
 800ff7a:	898b      	ldrh	r3, [r1, #12]
 800ff7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff7e:	079d      	lsls	r5, r3, #30
 800ff80:	4606      	mov	r6, r0
 800ff82:	460c      	mov	r4, r1
 800ff84:	d507      	bpl.n	800ff96 <__smakebuf_r+0x1c>
 800ff86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff8a:	6023      	str	r3, [r4, #0]
 800ff8c:	6123      	str	r3, [r4, #16]
 800ff8e:	2301      	movs	r3, #1
 800ff90:	6163      	str	r3, [r4, #20]
 800ff92:	b002      	add	sp, #8
 800ff94:	bd70      	pop	{r4, r5, r6, pc}
 800ff96:	ab01      	add	r3, sp, #4
 800ff98:	466a      	mov	r2, sp
 800ff9a:	f7ff ffc8 	bl	800ff2e <__swhatbuf_r>
 800ff9e:	9900      	ldr	r1, [sp, #0]
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f7ff faf6 	bl	800f594 <_malloc_r>
 800ffa8:	b948      	cbnz	r0, 800ffbe <__smakebuf_r+0x44>
 800ffaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffae:	059a      	lsls	r2, r3, #22
 800ffb0:	d4ef      	bmi.n	800ff92 <__smakebuf_r+0x18>
 800ffb2:	f023 0303 	bic.w	r3, r3, #3
 800ffb6:	f043 0302 	orr.w	r3, r3, #2
 800ffba:	81a3      	strh	r3, [r4, #12]
 800ffbc:	e7e3      	b.n	800ff86 <__smakebuf_r+0xc>
 800ffbe:	89a3      	ldrh	r3, [r4, #12]
 800ffc0:	6020      	str	r0, [r4, #0]
 800ffc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffc6:	81a3      	strh	r3, [r4, #12]
 800ffc8:	9b00      	ldr	r3, [sp, #0]
 800ffca:	6163      	str	r3, [r4, #20]
 800ffcc:	9b01      	ldr	r3, [sp, #4]
 800ffce:	6120      	str	r0, [r4, #16]
 800ffd0:	b15b      	cbz	r3, 800ffea <__smakebuf_r+0x70>
 800ffd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	f000 f84e 	bl	8010078 <_isatty_r>
 800ffdc:	b128      	cbz	r0, 800ffea <__smakebuf_r+0x70>
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	f023 0303 	bic.w	r3, r3, #3
 800ffe4:	f043 0301 	orr.w	r3, r3, #1
 800ffe8:	81a3      	strh	r3, [r4, #12]
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	431d      	orrs	r5, r3
 800ffee:	81a5      	strh	r5, [r4, #12]
 800fff0:	e7cf      	b.n	800ff92 <__smakebuf_r+0x18>

0800fff2 <_raise_r>:
 800fff2:	291f      	cmp	r1, #31
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	4604      	mov	r4, r0
 800fff8:	460d      	mov	r5, r1
 800fffa:	d904      	bls.n	8010006 <_raise_r+0x14>
 800fffc:	2316      	movs	r3, #22
 800fffe:	6003      	str	r3, [r0, #0]
 8010000:	f04f 30ff 	mov.w	r0, #4294967295
 8010004:	bd38      	pop	{r3, r4, r5, pc}
 8010006:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010008:	b112      	cbz	r2, 8010010 <_raise_r+0x1e>
 801000a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801000e:	b94b      	cbnz	r3, 8010024 <_raise_r+0x32>
 8010010:	4620      	mov	r0, r4
 8010012:	f000 f853 	bl	80100bc <_getpid_r>
 8010016:	462a      	mov	r2, r5
 8010018:	4601      	mov	r1, r0
 801001a:	4620      	mov	r0, r4
 801001c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010020:	f000 b83a 	b.w	8010098 <_kill_r>
 8010024:	2b01      	cmp	r3, #1
 8010026:	d00a      	beq.n	801003e <_raise_r+0x4c>
 8010028:	1c59      	adds	r1, r3, #1
 801002a:	d103      	bne.n	8010034 <_raise_r+0x42>
 801002c:	2316      	movs	r3, #22
 801002e:	6003      	str	r3, [r0, #0]
 8010030:	2001      	movs	r0, #1
 8010032:	e7e7      	b.n	8010004 <_raise_r+0x12>
 8010034:	2400      	movs	r4, #0
 8010036:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801003a:	4628      	mov	r0, r5
 801003c:	4798      	blx	r3
 801003e:	2000      	movs	r0, #0
 8010040:	e7e0      	b.n	8010004 <_raise_r+0x12>
	...

08010044 <raise>:
 8010044:	4b02      	ldr	r3, [pc, #8]	; (8010050 <raise+0xc>)
 8010046:	4601      	mov	r1, r0
 8010048:	6818      	ldr	r0, [r3, #0]
 801004a:	f7ff bfd2 	b.w	800fff2 <_raise_r>
 801004e:	bf00      	nop
 8010050:	20000084 	.word	0x20000084

08010054 <_fstat_r>:
 8010054:	b538      	push	{r3, r4, r5, lr}
 8010056:	4d07      	ldr	r5, [pc, #28]	; (8010074 <_fstat_r+0x20>)
 8010058:	2300      	movs	r3, #0
 801005a:	4604      	mov	r4, r0
 801005c:	4608      	mov	r0, r1
 801005e:	4611      	mov	r1, r2
 8010060:	602b      	str	r3, [r5, #0]
 8010062:	f7f0 fdca 	bl	8000bfa <_fstat>
 8010066:	1c43      	adds	r3, r0, #1
 8010068:	d102      	bne.n	8010070 <_fstat_r+0x1c>
 801006a:	682b      	ldr	r3, [r5, #0]
 801006c:	b103      	cbz	r3, 8010070 <_fstat_r+0x1c>
 801006e:	6023      	str	r3, [r4, #0]
 8010070:	bd38      	pop	{r3, r4, r5, pc}
 8010072:	bf00      	nop
 8010074:	20008a64 	.word	0x20008a64

08010078 <_isatty_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d06      	ldr	r5, [pc, #24]	; (8010094 <_isatty_r+0x1c>)
 801007c:	2300      	movs	r3, #0
 801007e:	4604      	mov	r4, r0
 8010080:	4608      	mov	r0, r1
 8010082:	602b      	str	r3, [r5, #0]
 8010084:	f7f0 fdc9 	bl	8000c1a <_isatty>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d102      	bne.n	8010092 <_isatty_r+0x1a>
 801008c:	682b      	ldr	r3, [r5, #0]
 801008e:	b103      	cbz	r3, 8010092 <_isatty_r+0x1a>
 8010090:	6023      	str	r3, [r4, #0]
 8010092:	bd38      	pop	{r3, r4, r5, pc}
 8010094:	20008a64 	.word	0x20008a64

08010098 <_kill_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4d07      	ldr	r5, [pc, #28]	; (80100b8 <_kill_r+0x20>)
 801009c:	2300      	movs	r3, #0
 801009e:	4604      	mov	r4, r0
 80100a0:	4608      	mov	r0, r1
 80100a2:	4611      	mov	r1, r2
 80100a4:	602b      	str	r3, [r5, #0]
 80100a6:	f7f0 fd47 	bl	8000b38 <_kill>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	d102      	bne.n	80100b4 <_kill_r+0x1c>
 80100ae:	682b      	ldr	r3, [r5, #0]
 80100b0:	b103      	cbz	r3, 80100b4 <_kill_r+0x1c>
 80100b2:	6023      	str	r3, [r4, #0]
 80100b4:	bd38      	pop	{r3, r4, r5, pc}
 80100b6:	bf00      	nop
 80100b8:	20008a64 	.word	0x20008a64

080100bc <_getpid_r>:
 80100bc:	f7f0 bd34 	b.w	8000b28 <_getpid>

080100c0 <_init>:
 80100c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c2:	bf00      	nop
 80100c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100c6:	bc08      	pop	{r3}
 80100c8:	469e      	mov	lr, r3
 80100ca:	4770      	bx	lr

080100cc <_fini>:
 80100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ce:	bf00      	nop
 80100d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100d2:	bc08      	pop	{r3}
 80100d4:	469e      	mov	lr, r3
 80100d6:	4770      	bx	lr
