
RTconcepts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004afc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08005020  08005020  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005020  08005020  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b20  2000009c  080050c4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bbc  080050c4  00024bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c14a  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001db0  00000000  00000000  0002c259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cf  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037ea  00000000  00000000  0002f227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b78d  00000000  00000000  00032a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec3d6  00000000  00000000  0003e19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032b0  00000000  00000000  0012a574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cb4 	.word	0x08004cb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08004cb4 	.word	0x08004cb4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08c      	sub	sp, #48	; 0x30
 80002b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	department_list[POLICE] = police_dep;
 80002b6:	4b5f      	ldr	r3, [pc, #380]	; (8000434 <main+0x184>)
 80002b8:	4a5f      	ldr	r2, [pc, #380]	; (8000438 <main+0x188>)
 80002ba:	6812      	ldr	r2, [r2, #0]
 80002bc:	4611      	mov	r1, r2
 80002be:	8019      	strh	r1, [r3, #0]
 80002c0:	3302      	adds	r3, #2
 80002c2:	0c12      	lsrs	r2, r2, #16
 80002c4:	701a      	strb	r2, [r3, #0]
		department_list[FIRE] = fire_dep ;
 80002c6:	4b5b      	ldr	r3, [pc, #364]	; (8000434 <main+0x184>)
 80002c8:	4a5c      	ldr	r2, [pc, #368]	; (800043c <main+0x18c>)
 80002ca:	3303      	adds	r3, #3
 80002cc:	8811      	ldrh	r1, [r2, #0]
 80002ce:	7892      	ldrb	r2, [r2, #2]
 80002d0:	8019      	strh	r1, [r3, #0]
 80002d2:	709a      	strb	r2, [r3, #2]
		department_list[AMBULANCE] = ambulance_dep;
 80002d4:	4b57      	ldr	r3, [pc, #348]	; (8000434 <main+0x184>)
 80002d6:	4a5a      	ldr	r2, [pc, #360]	; (8000440 <main+0x190>)
 80002d8:	3306      	adds	r3, #6
 80002da:	8811      	ldrh	r1, [r2, #0]
 80002dc:	7892      	ldrb	r2, [r2, #2]
 80002de:	8019      	strh	r1, [r3, #0]
 80002e0:	709a      	strb	r2, [r3, #2]
		department_list[CORONA] = corona_dep;
 80002e2:	4b54      	ldr	r3, [pc, #336]	; (8000434 <main+0x184>)
 80002e4:	4a57      	ldr	r2, [pc, #348]	; (8000444 <main+0x194>)
 80002e6:	3309      	adds	r3, #9
 80002e8:	8811      	ldrh	r1, [r2, #0]
 80002ea:	7892      	ldrb	r2, [r2, #2]
 80002ec:	8019      	strh	r1, [r3, #0]
 80002ee:	709a      	strb	r2, [r3, #2]

	policeSemaphore = xSemaphoreCreateCounting(
 80002f0:	2103      	movs	r1, #3
 80002f2:	2003      	movs	r0, #3
 80002f4:	f000 fe7d 	bl	8000ff2 <xQueueCreateCountingSemaphore>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4a53      	ldr	r2, [pc, #332]	; (8000448 <main+0x198>)
 80002fc:	6013      	str	r3, [r2, #0]
	    MIN(POLICE_CONCURRENT_NUM, INIT_POLICE_NUM),
	    MIN(POLICE_CONCURRENT_NUM, INIT_POLICE_NUM)
	);
	fireSemaphore = xSemaphoreCreateCounting(
 80002fe:	2102      	movs	r1, #2
 8000300:	2002      	movs	r0, #2
 8000302:	f000 fe76 	bl	8000ff2 <xQueueCreateCountingSemaphore>
 8000306:	4603      	mov	r3, r0
 8000308:	4a50      	ldr	r2, [pc, #320]	; (800044c <main+0x19c>)
 800030a:	6013      	str	r3, [r2, #0]
	    MIN(FIRE_CONCURRENT_NUM, INIT_FIRE_NUM),
	    MIN(FIRE_CONCURRENT_NUM, INIT_FIRE_NUM)
	);
	ambulanceSemaphore = xSemaphoreCreateCounting(
 800030c:	2104      	movs	r1, #4
 800030e:	2004      	movs	r0, #4
 8000310:	f000 fe6f 	bl	8000ff2 <xQueueCreateCountingSemaphore>
 8000314:	4603      	mov	r3, r0
 8000316:	4a4e      	ldr	r2, [pc, #312]	; (8000450 <main+0x1a0>)
 8000318:	6013      	str	r3, [r2, #0]
	    MIN(AMBULANCE_CONCURRENT_NUM, INIT_AMBULANCE_NUM),
	    MIN(AMBULANCE_CONCURRENT_NUM, INIT_AMBULANCE_NUM)
	);

	coronaSemaphore = xSemaphoreCreateCounting(
 800031a:	2104      	movs	r1, #4
 800031c:	2004      	movs	r0, #4
 800031e:	f000 fe68 	bl	8000ff2 <xQueueCreateCountingSemaphore>
 8000322:	4603      	mov	r3, r0
 8000324:	4a4b      	ldr	r2, [pc, #300]	; (8000454 <main+0x1a4>)
 8000326:	6013      	str	r3, [r2, #0]
	    MIN(CORONA_CONCURRENT_NUM, INIT_CORONA_NUM),
	    MIN(CORONA_CONCURRENT_NUM, INIT_CORONA_NUM)
	);

	globalSemaphore=xSemaphoreCreateCounting(MAX_NUM_REQUESTED_VEHICLES,
 8000328:	2105      	movs	r1, #5
 800032a:	2005      	movs	r0, #5
 800032c:	f000 fe61 	bl	8000ff2 <xQueueCreateCountingSemaphore>
 8000330:	4603      	mov	r3, r0
 8000332:	4a49      	ldr	r2, [pc, #292]	; (8000458 <main+0x1a8>)
 8000334:	6013      	str	r3, [r2, #0]
	                                        MAX_NUM_REQUESTED_VEHICLES);

	SemaphoreHandle_t semaphoreList[DEPARTMENTS_NUM]={policeSemaphore,fireSemaphore,ambulanceSemaphore,coronaSemaphore};
 8000336:	4b44      	ldr	r3, [pc, #272]	; (8000448 <main+0x198>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	4b43      	ldr	r3, [pc, #268]	; (800044c <main+0x19c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	4b43      	ldr	r3, [pc, #268]	; (8000450 <main+0x1a0>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	4b42      	ldr	r3, [pc, #264]	; (8000454 <main+0x1a4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	60fb      	str	r3, [r7, #12]

	  /* Create the queue(s) */
	  /* creation of DispatchQueue */
	  DispatchQueueHandle = xQueueCreate  (DISPATCH_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t));
 800034e:	2200      	movs	r2, #0
 8000350:	2104      	movs	r1, #4
 8000352:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000356:	f000 fde7 	bl	8000f28 <xQueueGenericCreate>
 800035a:	4603      	mov	r3, r0
 800035c:	4a3f      	ldr	r2, [pc, #252]	; (800045c <main+0x1ac>)
 800035e:	6013      	str	r3, [r2, #0]

	  /* creation of AmbulanceQueue */
	  AmbulanceQueueHandle = xQueueCreate (AMBULANCE_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t));
 8000360:	2200      	movs	r2, #0
 8000362:	2104      	movs	r1, #4
 8000364:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000368:	f000 fdde 	bl	8000f28 <xQueueGenericCreate>
 800036c:	4603      	mov	r3, r0
 800036e:	4a3c      	ldr	r2, [pc, #240]	; (8000460 <main+0x1b0>)
 8000370:	6013      	str	r3, [r2, #0]

	  /* creation of PoliceQueue */
	  PoliceQueueHandle = xQueueCreate (POLICE_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t));
 8000372:	2200      	movs	r2, #0
 8000374:	2104      	movs	r1, #4
 8000376:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800037a:	f000 fdd5 	bl	8000f28 <xQueueGenericCreate>
 800037e:	4603      	mov	r3, r0
 8000380:	4a38      	ldr	r2, [pc, #224]	; (8000464 <main+0x1b4>)
 8000382:	6013      	str	r3, [r2, #0]

	  /* creation of FireQueue */
	  FireQueueHandle = xQueueCreate (FIRE_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t));
 8000384:	2200      	movs	r2, #0
 8000386:	2104      	movs	r1, #4
 8000388:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800038c:	f000 fdcc 	bl	8000f28 <xQueueGenericCreate>
 8000390:	4603      	mov	r3, r0
 8000392:	4a35      	ldr	r2, [pc, #212]	; (8000468 <main+0x1b8>)
 8000394:	6013      	str	r3, [r2, #0]

	  /* creation of CoronaQueue */
	  CoronaQueueHandle = xQueueCreate (CORONA_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t));
 8000396:	2200      	movs	r2, #0
 8000398:	2104      	movs	r1, #4
 800039a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800039e:	f000 fdc3 	bl	8000f28 <xQueueGenericCreate>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a31      	ldr	r2, [pc, #196]	; (800046c <main+0x1bc>)
 80003a6:	6013      	str	r3, [r2, #0]

	  /* creation of loggingThread */
	  //BaseType_t log_thread = xTaskCreate(&loggingStartThread,(const char*) "loggingStartThread",(const) LOG_THREAD_BUFFER_SIZE, NULL, (UBaseType_t)LOGGING_THREAD_PRIORITY,(TaskHandle_t * const) &loggingThreadHandle);

	  /* USER CODE BEGIN RTOS_THREADS */
	  BaseType_t generate_thread = xTaskCreate(generateTask,
 80003a8:	4b31      	ldr	r3, [pc, #196]	; (8000470 <main+0x1c0>)
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	2318      	movs	r3, #24
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2300      	movs	r3, #0
 80003b2:	225a      	movs	r2, #90	; 0x5a
 80003b4:	492f      	ldr	r1, [pc, #188]	; (8000474 <main+0x1c4>)
 80003b6:	4830      	ldr	r0, [pc, #192]	; (8000478 <main+0x1c8>)
 80003b8:	f001 fbdb 	bl	8001b72 <xTaskCreate>
 80003bc:	6278      	str	r0, [r7, #36]	; 0x24
											  (const char*) "generateThread",
											  (const configSTACK_DEPTH_TYPE) 90,
											  NULL,
											  (UBaseType_t)GENERATE_THREAD_PRIORITY,
											  (TaskHandle_t * const) &generateThreadHandle);
	  BaseType_t dispatch_thread = xTaskCreate(dispatchTask,
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <main+0x1cc>)
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2318      	movs	r3, #24
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2300      	movs	r3, #0
 80003c8:	225a      	movs	r2, #90	; 0x5a
 80003ca:	492d      	ldr	r1, [pc, #180]	; (8000480 <main+0x1d0>)
 80003cc:	482d      	ldr	r0, [pc, #180]	; (8000484 <main+0x1d4>)
 80003ce:	f001 fbd0 	bl	8001b72 <xTaskCreate>
 80003d2:	6238      	str	r0, [r7, #32]
											  (const configSTACK_DEPTH_TYPE) 90,
											  NULL,
											  (UBaseType_t)DISPATCH_THREAD_PRIORITY,
											  (TaskHandle_t * const) &dispatchThreadHandle);

	  BaseType_t police_thread = xTaskCreate(departmentTask,
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <main+0x1d8>)
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	2318      	movs	r3, #24
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2300      	movs	r3, #0
 80003de:	225a      	movs	r2, #90	; 0x5a
 80003e0:	492a      	ldr	r1, [pc, #168]	; (800048c <main+0x1dc>)
 80003e2:	482b      	ldr	r0, [pc, #172]	; (8000490 <main+0x1e0>)
 80003e4:	f001 fbc5 	bl	8001b72 <xTaskCreate>
 80003e8:	61f8      	str	r0, [r7, #28]
											  (const configSTACK_DEPTH_TYPE) 90 ,
											  (void * const)POLICE,
											  (UBaseType_t)POLICE_THREAD_PRIORITY,
											  (TaskHandle_t * const) &policeThreadHandle);

	  BaseType_t fire_thread = xTaskCreate(	  departmentTask,
 80003ea:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <main+0x1e4>)
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	2318      	movs	r3, #24
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2301      	movs	r3, #1
 80003f4:	225a      	movs	r2, #90	; 0x5a
 80003f6:	4928      	ldr	r1, [pc, #160]	; (8000498 <main+0x1e8>)
 80003f8:	4825      	ldr	r0, [pc, #148]	; (8000490 <main+0x1e0>)
 80003fa:	f001 fbba 	bl	8001b72 <xTaskCreate>
 80003fe:	61b8      	str	r0, [r7, #24]
											  (const char*) "fireThread",
											  (const configSTACK_DEPTH_TYPE) 90,
											  (void * const)FIRE,
											  (UBaseType_t)FIRE_THREAD_PRIORITY,
											  (TaskHandle_t * const) &fireThreadHandle);
	  BaseType_t ambulnace_thread = xTaskCreate(departmentTask,
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <main+0x1ec>)
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	2318      	movs	r3, #24
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	2302      	movs	r3, #2
 800040a:	225a      	movs	r2, #90	; 0x5a
 800040c:	4924      	ldr	r1, [pc, #144]	; (80004a0 <main+0x1f0>)
 800040e:	4820      	ldr	r0, [pc, #128]	; (8000490 <main+0x1e0>)
 8000410:	f001 fbaf 	bl	8001b72 <xTaskCreate>
 8000414:	6178      	str	r0, [r7, #20]
											  (const char*) "ambulanceThread",
											  (const configSTACK_DEPTH_TYPE) 90,
											  (void * const)AMBULANCE,
											  (UBaseType_t)AMBULANCE_THREAD_PRIORITY,
											  (TaskHandle_t * const) &ambulanceThreadHandle);
	  BaseType_t corona_thread = xTaskCreate(departmentTask,
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <main+0x1f4>)
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2318      	movs	r3, #24
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2303      	movs	r3, #3
 8000420:	225a      	movs	r2, #90	; 0x5a
 8000422:	4921      	ldr	r1, [pc, #132]	; (80004a8 <main+0x1f8>)
 8000424:	481a      	ldr	r0, [pc, #104]	; (8000490 <main+0x1e0>)
 8000426:	f001 fba4 	bl	8001b72 <xTaskCreate>
 800042a:	6138      	str	r0, [r7, #16]
											  (UBaseType_t)CORONA_THREAD_PRIORITY ,
											  (TaskHandle_t * const) &coronaThreadHandle);



	  vTaskStartScheduler();
 800042c:	f001 fe4c 	bl	80020c8 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	e7fe      	b.n	8000430 <main+0x180>
 8000432:	bf00      	nop
 8000434:	200000b8 	.word	0x200000b8
 8000438:	20000014 	.word	0x20000014
 800043c:	20000018 	.word	0x20000018
 8000440:	2000001c 	.word	0x2000001c
 8000444:	20000020 	.word	0x20000020
 8000448:	200000c4 	.word	0x200000c4
 800044c:	200000d0 	.word	0x200000d0
 8000450:	200000cc 	.word	0x200000cc
 8000454:	200000d4 	.word	0x200000d4
 8000458:	200000c8 	.word	0x200000c8
 800045c:	200000f0 	.word	0x200000f0
 8000460:	200000f4 	.word	0x200000f4
 8000464:	200000f8 	.word	0x200000f8
 8000468:	200000fc 	.word	0x200000fc
 800046c:	20000100 	.word	0x20000100
 8000470:	200000d8 	.word	0x200000d8
 8000474:	08004ccc 	.word	0x08004ccc
 8000478:	08000879 	.word	0x08000879
 800047c:	200000dc 	.word	0x200000dc
 8000480:	08004cdc 	.word	0x08004cdc
 8000484:	080004ad 	.word	0x080004ad
 8000488:	200000e0 	.word	0x200000e0
 800048c:	08004cec 	.word	0x08004cec
 8000490:	080005c5 	.word	0x080005c5
 8000494:	200000e4 	.word	0x200000e4
 8000498:	08004cfc 	.word	0x08004cfc
 800049c:	200000e8 	.word	0x200000e8
 80004a0:	08004d08 	.word	0x08004d08
 80004a4:	200000ec 	.word	0x200000ec
 80004a8:	08004d18 	.word	0x08004d18

080004ac <dispatchTask>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 // @brief: takes request from dispatcher queue and send to relevant department queue
TaskFunction_t dispatchTask(void *argument){
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b08f      	sub	sp, #60	; 0x3c
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

  BaseType_t retval_Sent_From_Dispatch_Queue=0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	637b      	str	r3, [r7, #52]	; 0x34
  BaseType_t retval_Police_Send=0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	633b      	str	r3, [r7, #48]	; 0x30
  BaseType_t retval_Fire_Send=0;
 80004bc:	2300      	movs	r3, #0
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
  BaseType_t retval_Corona_Send=0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  BaseType_t retval_Ambulance_Send=0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24

  BaseType_t retval_Send_to_dep_list[DEPARTMENTS_NUM]={retval_Police_Send,retval_Fire_Send, retval_Ambulance_Send,retval_Corona_Send};
 80004c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d2:	61bb      	str	r3, [r7, #24]
 80004d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d6:	61fb      	str	r3, [r7, #28]
  department_queue_handles_lists[POLICE]=PoliceQueueHandle;
 80004d8:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <dispatchTask+0xec>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a2f      	ldr	r2, [pc, #188]	; (800059c <dispatchTask+0xf0>)
 80004de:	6013      	str	r3, [r2, #0]
  department_queue_handles_lists[FIRE]=FireQueueHandle;
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <dispatchTask+0xf4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a2d      	ldr	r2, [pc, #180]	; (800059c <dispatchTask+0xf0>)
 80004e6:	6053      	str	r3, [r2, #4]
  department_queue_handles_lists[AMBULANCE]=AmbulanceQueueHandle;
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <dispatchTask+0xf8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a2b      	ldr	r2, [pc, #172]	; (800059c <dispatchTask+0xf0>)
 80004ee:	6093      	str	r3, [r2, #8]
  department_queue_handles_lists[CORONA]=CoronaQueueHandle;
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <dispatchTask+0xfc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a29      	ldr	r2, [pc, #164]	; (800059c <dispatchTask+0xf0>)
 80004f6:	60d3      	str	r3, [r2, #12]



	request req;
	while(1){
    if ((retval_Sent_From_Dispatch_Queue= xQueueReceive(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT )) == pdPASS){
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <dispatchTask+0x100>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f107 0108 	add.w	r1, r7, #8
 8000500:	f04f 32ff 	mov.w	r2, #4294967295
 8000504:	4618      	mov	r0, r3
 8000506:	f000 ff51 	bl	80013ac <xQueueReceive>
 800050a:	6378      	str	r0, [r7, #52]	; 0x34
 800050c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800050e:	2b01      	cmp	r3, #1
 8000510:	d1f2      	bne.n	80004f8 <dispatchTask+0x4c>

			department_id id=req.dep_id;
 8000512:	7a3b      	ldrb	r3, [r7, #8]
 8000514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if ((retval_Send_to_dep_list[id]= xQueueSend(department_queue_handles_lists[id], &req, QueueTimeoutList[id])) == pdPASS ){
 8000518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800051c:	4a1f      	ldr	r2, [pc, #124]	; (800059c <dispatchTask+0xf0>)
 800051e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <dispatchTask+0x104>)
 8000528:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052c:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8000530:	f107 0108 	add.w	r1, r7, #8
 8000534:	2300      	movs	r3, #0
 8000536:	f000 fd93 	bl	8001060 <xQueueGenericSend>
 800053a:	4602      	mov	r2, r0
 800053c:	00a3      	lsls	r3, r4, #2
 800053e:	3338      	adds	r3, #56	; 0x38
 8000540:	443b      	add	r3, r7
 8000542:	f843 2c28 	str.w	r2, [r3, #-40]
 8000546:	00a3      	lsls	r3, r4, #2
 8000548:	3338      	adds	r3, #56	; 0x38
 800054a:	443b      	add	r3, r7
 800054c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d1d1      	bne.n	80004f8 <dispatchTask+0x4c>
        switch (id){
 8000554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000558:	2b03      	cmp	r3, #3
 800055a:	d81b      	bhi.n	8000594 <dispatchTask+0xe8>
 800055c:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <dispatchTask+0xb8>)
 800055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000562:	bf00      	nop
 8000564:	0800058d 	.word	0x0800058d
 8000568:	08000575 	.word	0x08000575
 800056c:	0800057d 	.word	0x0800057d
 8000570:	08000585 	.word	0x08000585
          case FIRE:
            printf("Fire request was sent to department!\r\n");
 8000574:	480f      	ldr	r0, [pc, #60]	; (80005b4 <dispatchTask+0x108>)
 8000576:	f003 fca3 	bl	8003ec0 <puts>
            break;
 800057a:	e00c      	b.n	8000596 <dispatchTask+0xea>
          case AMBULANCE:
            printf("Ambulance request was sent to department!\r\n");
 800057c:	480e      	ldr	r0, [pc, #56]	; (80005b8 <dispatchTask+0x10c>)
 800057e:	f003 fc9f 	bl	8003ec0 <puts>
            break;
 8000582:	e008      	b.n	8000596 <dispatchTask+0xea>
          case CORONA:
            printf("Corona request was sent to department!\r\n");
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <dispatchTask+0x110>)
 8000586:	f003 fc9b 	bl	8003ec0 <puts>
            break;
 800058a:	e004      	b.n	8000596 <dispatchTask+0xea>
          case POLICE:
            printf("Police request was sent to department!\r\n");
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <dispatchTask+0x114>)
 800058e:	f003 fc97 	bl	8003ec0 <puts>
            break;
 8000592:	e000      	b.n	8000596 <dispatchTask+0xea>
          default:
            break;
 8000594:	bf00      	nop
    if ((retval_Sent_From_Dispatch_Queue= xQueueReceive(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT )) == pdPASS){
 8000596:	e7af      	b.n	80004f8 <dispatchTask+0x4c>
 8000598:	200000f8 	.word	0x200000f8
 800059c:	20000104 	.word	0x20000104
 80005a0:	200000fc 	.word	0x200000fc
 80005a4:	200000f4 	.word	0x200000f4
 80005a8:	20000100 	.word	0x20000100
 80005ac:	200000f0 	.word	0x200000f0
 80005b0:	20000024 	.word	0x20000024
 80005b4:	08004d28 	.word	0x08004d28
 80005b8:	08004d50 	.word	0x08004d50
 80005bc:	08004d7c 	.word	0x08004d7c
 80005c0:	08004da4 	.word	0x08004da4

080005c4 <departmentTask>:
}


// @brief: this function takes request from department queue and send to execute thread
TaskFunction_t departmentTask(void *dep_id) //argument is speartment_id
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b0a3      	sub	sp, #140	; 0x8c
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
    department_id depar_id = *((department_id *) dep_id);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    BaseType_t retval_SR_thread;
    request police_req;
    request ambulance_req;
    request fire_req;
    request corona_req;
    request departments_req_list[DEPARTMENTS_NUM]={police_req,fire_req,ambulance_req,corona_req};
 80005d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80005dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80005e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80005ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80005f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	e883 0003 	stmia.w	r3, {r0, r1}
 8000604:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000608:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
    int thread_buffer_list[DEPARTMENTS_NUM]={POLICE_SR_THREAD_BUFFER_SIZE, FIRE_SR_THREAD_BUFFER_SIZE, AMBULANCE_SR_THREAD_BUFFER_SIZE,CORONA_SR_THREAD_BUFFER_SIZE};
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <departmentTask+0x12c>)
 8000616:	f107 0418 	add.w	r4, r7, #24
 800061a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    TaskHandle_t department_SR_handles[DEPARTMENTS_NUM]={policeSRHandle, fireSRHandle, ambulanceSRHandle, coronaSRHandle };
 8000620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800062e:	617b      	str	r3, [r7, #20]



    while (1)
    {
        if (xQueueReceive(department_queue_handles_lists[depar_id], (void const*)&departments_req_list[depar_id], QueueTimeoutList[depar_id]) == pdPASS)
 8000630:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000634:	4a2f      	ldr	r2, [pc, #188]	; (80006f4 <departmentTask+0x130>)
 8000636:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800063e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	18d1      	adds	r1, r2, r3
 8000646:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800064a:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <departmentTask+0x134>)
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	461a      	mov	r2, r3
 8000652:	f000 feab 	bl	80013ac <xQueueReceive>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d1e9      	bne.n	8000630 <departmentTask+0x6c>
        {
          switch(depar_id){
 800065c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000660:	2b03      	cmp	r3, #3
 8000662:	d81b      	bhi.n	800069c <departmentTask+0xd8>
 8000664:	a201      	add	r2, pc, #4	; (adr r2, 800066c <departmentTask+0xa8>)
 8000666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066a:	bf00      	nop
 800066c:	0800068d 	.word	0x0800068d
 8000670:	0800067d 	.word	0x0800067d
 8000674:	08000685 	.word	0x08000685
 8000678:	08000695 	.word	0x08000695
            case FIRE:
              printf("Got request from fire department!\r\n");
 800067c:	481f      	ldr	r0, [pc, #124]	; (80006fc <departmentTask+0x138>)
 800067e:	f003 fc1f 	bl	8003ec0 <puts>
              break;
 8000682:	e00b      	b.n	800069c <departmentTask+0xd8>
            case AMBULANCE:
              printf("Got request from ambulance department!\r\n");
 8000684:	481e      	ldr	r0, [pc, #120]	; (8000700 <departmentTask+0x13c>)
 8000686:	f003 fc1b 	bl	8003ec0 <puts>
              break;
 800068a:	e007      	b.n	800069c <departmentTask+0xd8>
            case POLICE:
              printf("Got request from police department!\r\n");
 800068c:	481d      	ldr	r0, [pc, #116]	; (8000704 <departmentTask+0x140>)
 800068e:	f003 fc17 	bl	8003ec0 <puts>
              break;
 8000692:	e003      	b.n	800069c <departmentTask+0xd8>
            case CORONA:
              printf("Got request from corona department!\r\n");
 8000694:	481c      	ldr	r0, [pc, #112]	; (8000708 <departmentTask+0x144>)
 8000696:	f003 fc13 	bl	8003ec0 <puts>
              break;
 800069a:	bf00      	nop
          }
          if ((retval_SR_thread = xTaskCreate(
                    ServiceRoutine,
                    (const char *)"ServiceRoutineThread",
                    thread_buffer_list[depar_id],
 800069c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	3380      	adds	r3, #128	; 0x80
 80006a4:	443b      	add	r3, r7
 80006a6:	f853 3c68 	ldr.w	r3, [r3, #-104]
          if ((retval_SR_thread = xTaskCreate(
 80006aa:	b299      	uxth	r1, r3
                    (void const*)&departments_req_list[depar_id], //request to be passed
 80006ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	18d0      	adds	r0, r2, r3
                    department_thread_priority[depar_id],
 80006b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <departmentTask+0x148>)
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
          if ((retval_SR_thread = xTaskCreate(
 80006c2:	461c      	mov	r4, r3
                    (const TaskHandle_t *)&department_SR_handles[depar_id])) == pdPASS)
 80006c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006c8:	f107 0208 	add.w	r2, r7, #8
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
          if ((retval_SR_thread = xTaskCreate(
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	9400      	str	r4, [sp, #0]
 80006d4:	4603      	mov	r3, r0
 80006d6:	460a      	mov	r2, r1
 80006d8:	490d      	ldr	r1, [pc, #52]	; (8000710 <departmentTask+0x14c>)
 80006da:	480e      	ldr	r0, [pc, #56]	; (8000714 <departmentTask+0x150>)
 80006dc:	f001 fa49 	bl	8001b72 <xTaskCreate>
 80006e0:	66b8      	str	r0, [r7, #104]	; 0x68
 80006e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d1a3      	bne.n	8000630 <departmentTask+0x6c>
          {
              printf("New SR!\r\n");
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <departmentTask+0x154>)
 80006ea:	f003 fbe9 	bl	8003ec0 <puts>
        if (xQueueReceive(department_queue_handles_lists[depar_id], (void const*)&departments_req_list[depar_id], QueueTimeoutList[depar_id]) == pdPASS)
 80006ee:	e79f      	b.n	8000630 <departmentTask+0x6c>
 80006f0:	08004e8c 	.word	0x08004e8c
 80006f4:	20000104 	.word	0x20000104
 80006f8:	20000024 	.word	0x20000024
 80006fc:	08004dcc 	.word	0x08004dcc
 8000700:	08004df0 	.word	0x08004df0
 8000704:	08004e18 	.word	0x08004e18
 8000708:	08004e40 	.word	0x08004e40
 800070c:	20000004 	.word	0x20000004
 8000710:	08004e68 	.word	0x08004e68
 8000714:	0800071d 	.word	0x0800071d
 8000718:	08004e80 	.word	0x08004e80

0800071c <ServiceRoutine>:
          }
        }
    }
}

TaskFunction_t ServiceRoutine(void* req){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	request* reques = (request*) req ;//
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	613b      	str	r3, [r7, #16]
  department_id depar_id=reques->dep_id;
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	73fb      	strb	r3, [r7, #15]
  SemaphoreHandle_t department_semaphore= semaphoreList[depar_id];
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <ServiceRoutine+0xd0>)
 8000732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000736:	60bb      	str	r3, [r7, #8]

	int i=0;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  while (i <reques->requested_vehicles){
 800073c:	e04b      	b.n	80007d6 <ServiceRoutine+0xba>

    if (xSemaphoreTake(globalSemaphore,0) ==pdPASS && xSemaphoreTake(semaphoreList[depar_id], 0) == pdPASS ){
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <ServiceRoutine+0xd4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f000 ff17 	bl	8001578 <xQueueSemaphoreTake>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d13b      	bne.n	80007c8 <ServiceRoutine+0xac>
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	4a26      	ldr	r2, [pc, #152]	; (80007ec <ServiceRoutine+0xd0>)
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f000 ff0c 	bl	8001578 <xQueueSemaphoreTake>
 8000760:	4603      	mov	r3, r0
 8000762:	2b01      	cmp	r3, #1
 8000764:	d130      	bne.n	80007c8 <ServiceRoutine+0xac>
      vTaskPrioritySet(NULL, uxTaskPriorityGet(NULL) + 1);// increases prioirity by one
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fbf4 	bl	8001f54 <uxTaskPriorityGet>
 800076c:	4603      	mov	r3, r0
 800076e:	3301      	adds	r3, #1
 8000770:	4619      	mov	r1, r3
 8000772:	2000      	movs	r0, #0
 8000774:	f001 fc08 	bl	8001f88 <vTaskPrioritySet>
      i++;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3301      	adds	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
      totalVehicles--;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <ServiceRoutine+0xd8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3b01      	subs	r3, #1
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <ServiceRoutine+0xd8>)
 8000786:	6013      	str	r3, [r2, #0]
      department_list[POLICE].available_num--;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <ServiceRoutine+0xdc>)
 800078a:	789b      	ldrb	r3, [r3, #2]
 800078c:	3b01      	subs	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <ServiceRoutine+0xdc>)
 8000792:	709a      	strb	r2, [r3, #2]
      department_list[POLICE].concurrent_num--;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <ServiceRoutine+0xdc>)
 8000796:	785b      	ldrb	r3, [r3, #1]
 8000798:	3b01      	subs	r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <ServiceRoutine+0xdc>)
 800079e:	705a      	strb	r2, [r3, #1]
      /* in case all resources for execution acquired, exectues, releases all semaphores and end task*/
      if (i==reques->requested_vehicles-1){
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	785b      	ldrb	r3, [r3, #1]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d114      	bne.n	80007d6 <ServiceRoutine+0xba>
        vTaskDelay(reques->time_to_complete);
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fb99 	bl	8001ee8 <vTaskDelay>
        releaseResources(i, depar_id);
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4619      	mov	r1, r3
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f000 f81e 	bl	80007fc <releaseResources>
        vTaskDelete(NULL);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f001 fb1d 	bl	8001e00 <vTaskDelete>
      if (i==reques->requested_vehicles-1){
 80007c6:	e006      	b.n	80007d6 <ServiceRoutine+0xba>
      }
    }
    else{
      /* in deadlock releases all semaphores acquired and then start again*/
      releaseResources(i, depar_id);
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4619      	mov	r1, r3
 80007cc:	6978      	ldr	r0, [r7, #20]
 80007ce:	f000 f815 	bl	80007fc <releaseResources>
      i=0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  while (i <reques->requested_vehicles){
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	461a      	mov	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	4293      	cmp	r3, r2
 80007e0:	dbad      	blt.n	800073e <ServiceRoutine+0x22>


    }
  }
}
 80007e2:	bf00      	nop
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000114 	.word	0x20000114
 80007f0:	200000c8 	.word	0x200000c8
 80007f4:	20000000 	.word	0x20000000
 80007f8:	200000b8 	.word	0x200000b8

080007fc <releaseResources>:



void releaseResources(int i,department_id depar_id){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
  for (int j=0; j<i;j++){
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e023      	b.n	8000856 <releaseResources+0x5a>
      xSemaphoreGive(globalSemaphore);
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <releaseResources+0x6c>)
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	f000 fc22 	bl	8001060 <xQueueGenericSend>
      xSemaphoreGive(semaphoreList[depar_id]);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <releaseResources+0x70>)
 8000820:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000824:	2300      	movs	r3, #0
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	f000 fc19 	bl	8001060 <xQueueGenericSend>
      totalVehicles++;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <releaseResources+0x74>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <releaseResources+0x74>)
 8000836:	6013      	str	r3, [r2, #0]
      department_list[POLICE].concurrent_num++;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <releaseResources+0x78>)
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	3301      	adds	r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <releaseResources+0x78>)
 8000842:	705a      	strb	r2, [r3, #1]
      department_list[POLICE].available_num++;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <releaseResources+0x78>)
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	3301      	adds	r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <releaseResources+0x78>)
 800084e:	709a      	strb	r2, [r3, #2]
  for (int j=0; j<i;j++){
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	429a      	cmp	r2, r3
 800085c:	dbd7      	blt.n	800080e <releaseResources+0x12>
      //to add delay time to break symmetry?
  }
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000c8 	.word	0x200000c8
 800086c:	20000114 	.word	0x20000114
 8000870:	20000000 	.word	0x20000000
 8000874:	200000b8 	.word	0x200000b8

08000878 <generateTask>:


TaskFunction_t generateTask(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  BaseType_t retval_Send_To_Dispatch_Queue=0;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
	while (1) {
		department_id dep =rand() % DEPARTMENTS_NUM;
 8000884:	f003 f9da 	bl	8003c3c <rand>
 8000888:	4603      	mov	r3, r0
 800088a:	425a      	negs	r2, r3
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	f002 0203 	and.w	r2, r2, #3
 8000894:	bf58      	it	pl
 8000896:	4253      	negpl	r3, r2
 8000898:	76fb      	strb	r3, [r7, #27]
		TickType_t active_time= rand() % XTICKS_MAX;
 800089a:	f003 f9cf 	bl	8003c3c <rand>
 800089e:	4601      	mov	r1, r0
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <generateTask+0x8c>)
 80008a2:	fb83 2301 	smull	r2, r3, r3, r1
 80008a6:	105a      	asrs	r2, r3, #1
 80008a8:	17cb      	asrs	r3, r1, #31
 80008aa:	1ad2      	subs	r2, r2, r3
 80008ac:	4613      	mov	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	1aca      	subs	r2, r1, r3
 80008b4:	617a      	str	r2, [r7, #20]
		uint8_t vehicle_num_to_dispatch= rand() % MAX_NUM_REQUESTED_VEHICLES;
 80008b6:	f003 f9c1 	bl	8003c3c <rand>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <generateTask+0x8c>)
 80008be:	fb83 1302 	smull	r1, r3, r3, r2
 80008c2:	1059      	asrs	r1, r3, #1
 80008c4:	17d3      	asrs	r3, r2, #31
 80008c6:	1ac9      	subs	r1, r1, r3
 80008c8:	460b      	mov	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	1ad1      	subs	r1, r2, r3
 80008d0:	460b      	mov	r3, r1
 80008d2:	74fb      	strb	r3, [r7, #19]
		request req= {dep,active_time,vehicle_num_to_dispatch};
 80008d4:	7efb      	ldrb	r3, [r7, #27]
 80008d6:	723b      	strb	r3, [r7, #8]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	727b      	strb	r3, [r7, #9]
 80008de:	7cfb      	ldrb	r3, [r7, #19]
 80008e0:	60fb      	str	r3, [r7, #12]
		if ((retval_Send_To_Dispatch_Queue= xQueueSend(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT )) == pdPASS){
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <generateTask+0x90>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f107 0108 	add.w	r1, r7, #8
 80008ea:	2300      	movs	r3, #0
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	f000 fbb6 	bl	8001060 <xQueueGenericSend>
 80008f4:	61f8      	str	r0, [r7, #28]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d1c3      	bne.n	8000884 <generateTask+0xc>
			printf("request was put inside dispatch queue!\r\n");
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <generateTask+0x94>)
 80008fe:	f003 fadf 	bl	8003ec0 <puts>
	while (1) {
 8000902:	e7bf      	b.n	8000884 <generateTask+0xc>
 8000904:	66666667 	.word	0x66666667
 8000908:	200000f0 	.word	0x200000f0
 800090c:	08004e9c 	.word	0x08004e9c

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 f90a 	bl	8000b58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000944:	f002 f81e 	bl	8002984 <xTaskGetSchedulerState>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d001      	beq.n	8000952 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800094e:	f002 fefb 	bl	8003748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}

08000956 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  return 1;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_kill>:

int _kill(int pid, int sig)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000970:	f003 fbd4 	bl	800411c <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	2216      	movs	r2, #22
 8000978:	601a      	str	r2, [r3, #0]
  return -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_exit>:

void _exit (int status)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800098e:	f04f 31ff 	mov.w	r1, #4294967295
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffe7 	bl	8000966 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000998:	e7fe      	b.n	8000998 <_exit+0x12>

0800099a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e00a      	b.n	80009c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ac:	f3af 8000 	nop.w
 80009b0:	4601      	mov	r1, r0
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	60ba      	str	r2, [r7, #8]
 80009b8:	b2ca      	uxtb	r2, r1
 80009ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	3301      	adds	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	dbf0      	blt.n	80009ac <_read+0x12>
  }

  return len;
 80009ca:	687b      	ldr	r3, [r7, #4]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e009      	b.n	80009fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	60ba      	str	r2, [r7, #8]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbf1      	blt.n	80009e6 <_write+0x12>
  }
  return len;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_close>:

int _close(int file)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a34:	605a      	str	r2, [r3, #4]
  return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_isatty>:

int _isatty(int file)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f003 fb3a 	bl	800411c <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20050000 	.word	0x20050000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	20000124 	.word	0x20000124
 8000adc:	20004bc0 	.word	0x20004bc0

08000ae0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 faf9 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fbbb 	bl	80002b0 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000b48:	08005028 	.word	0x08005028
  ldr r2, =_sbss
 8000b4c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000b50:	20004bbc 	.word	0x20004bbc

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000038 	.word	0x20000038
 8000b7c:	20000128 	.word	0x20000128

08000b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <vApplicationGetIdleTaskMemory+0x2c>)
 8000b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8000b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000012c 	.word	0x2000012c
 8000bb0:	20000188 	.word	0x20000188

08000bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <vApplicationGetTimerTaskMemory+0x30>)
 8000bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	20000388 	.word	0x20000388
 8000be4:	200003e4 	.word	0x200003e4

08000be8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f103 0208 	add.w	r2, r3, #8
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f103 0208 	add.w	r2, r3, #8
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f103 0208 	add.w	r2, r3, #8
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c42:	b480      	push	{r7}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b085      	sub	sp, #20
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d103      	bne.n	8000caa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e00c      	b.n	8000cc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3308      	adds	r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e002      	b.n	8000cb8 <vListInsert+0x2e>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d2f6      	bcs.n	8000cb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6892      	ldr	r2, [r2, #8]
 8000d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6852      	ldr	r2, [r2, #4]
 8000d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d103      	bne.n	8000d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10c      	bne.n	8000d7e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d68:	b672      	cpsid	i
 8000d6a:	f383 8811 	msr	BASEPRI, r3
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	b662      	cpsie	i
 8000d78:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d7a:	bf00      	nop
 8000d7c:	e7fe      	b.n	8000d7c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8000d7e:	f002 fc4d 	bl	800361c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	441a      	add	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dae:	3b01      	subs	r3, #1
 8000db0:	68f9      	ldr	r1, [r7, #12]
 8000db2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	441a      	add	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d114      	bne.n	8000dfe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d01a      	beq.n	8000e12 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3310      	adds	r3, #16
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fc09 	bl	80025f8 <xTaskRemoveFromEventList>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d012      	beq.n	8000e12 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <xQueueGenericReset+0xd0>)
 8000dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	f3bf 8f4f 	dsb	sy
 8000df8:	f3bf 8f6f 	isb	sy
 8000dfc:	e009      	b.n	8000e12 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3310      	adds	r3, #16
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fef0 	bl	8000be8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3324      	adds	r3, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff feeb 	bl	8000be8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e12:	f002 fc37 	bl	8003684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	e000ed04 	.word	0xe000ed04

08000e24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10c      	bne.n	8000e52 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8000e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3c:	b672      	cpsid	i
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	b662      	cpsie	i
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000e4e:	bf00      	nop
 8000e50:	e7fe      	b.n	8000e50 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10c      	bne.n	8000e72 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8000e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e5c:	b672      	cpsid	i
 8000e5e:	f383 8811 	msr	BASEPRI, r3
 8000e62:	f3bf 8f6f 	isb	sy
 8000e66:	f3bf 8f4f 	dsb	sy
 8000e6a:	b662      	cpsie	i
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000e6e:	bf00      	nop
 8000e70:	e7fe      	b.n	8000e70 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <xQueueGenericCreateStatic+0x5a>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <xQueueGenericCreateStatic+0x5e>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <xQueueGenericCreateStatic+0x60>
 8000e82:	2300      	movs	r3, #0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10c      	bne.n	8000ea2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8000e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8c:	b672      	cpsid	i
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	b662      	cpsie	i
 8000e9c:	623b      	str	r3, [r7, #32]
}
 8000e9e:	bf00      	nop
 8000ea0:	e7fe      	b.n	8000ea0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <xQueueGenericCreateStatic+0x8a>
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <xQueueGenericCreateStatic+0x8e>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <xQueueGenericCreateStatic+0x90>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10c      	bne.n	8000ed2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	b672      	cpsid	i
 8000ebe:	f383 8811 	msr	BASEPRI, r3
 8000ec2:	f3bf 8f6f 	isb	sy
 8000ec6:	f3bf 8f4f 	dsb	sy
 8000eca:	b662      	cpsie	i
 8000ecc:	61fb      	str	r3, [r7, #28]
}
 8000ece:	bf00      	nop
 8000ed0:	e7fe      	b.n	8000ed0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000ed2:	2350      	movs	r3, #80	; 0x50
 8000ed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b50      	cmp	r3, #80	; 0x50
 8000eda:	d00c      	beq.n	8000ef6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8000edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee0:	b672      	cpsid	i
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	f3bf 8f6f 	isb	sy
 8000eea:	f3bf 8f4f 	dsb	sy
 8000eee:	b662      	cpsie	i
 8000ef0:	61bb      	str	r3, [r7, #24]
}
 8000ef2:	bf00      	nop
 8000ef4:	e7fe      	b.n	8000ef4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000ef6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00d      	beq.n	8000f1e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4613      	mov	r3, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 f847 	bl	8000fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4613      	mov	r3, r2
 8000f34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10c      	bne.n	8000f56 <xQueueGenericCreate+0x2e>
	__asm volatile
 8000f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f40:	b672      	cpsid	i
 8000f42:	f383 8811 	msr	BASEPRI, r3
 8000f46:	f3bf 8f6f 	isb	sy
 8000f4a:	f3bf 8f4f 	dsb	sy
 8000f4e:	b662      	cpsie	i
 8000f50:	613b      	str	r3, [r7, #16]
}
 8000f52:	bf00      	nop
 8000f54:	e7fe      	b.n	8000f54 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e004      	b.n	8000f6c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3350      	adds	r3, #80	; 0x50
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fc7f 	bl	8003874 <pvPortMalloc>
 8000f76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d011      	beq.n	8000fa2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3350      	adds	r3, #80	; 0x50
 8000f86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4613      	mov	r3, r2
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f805 	bl	8000fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e002      	b.n	8000fce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000fda:	2101      	movs	r1, #1
 8000fdc:	69b8      	ldr	r0, [r7, #24]
 8000fde:	f7ff feb7 	bl	8000d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8001002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001006:	b672      	cpsid	i
 8001008:	f383 8811 	msr	BASEPRI, r3
 800100c:	f3bf 8f6f 	isb	sy
 8001010:	f3bf 8f4f 	dsb	sy
 8001014:	b662      	cpsie	i
 8001016:	613b      	str	r3, [r7, #16]
}
 8001018:	bf00      	nop
 800101a:	e7fe      	b.n	800101a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d90c      	bls.n	800103e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8001024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001028:	b672      	cpsid	i
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	b662      	cpsie	i
 8001038:	60fb      	str	r3, [r7, #12]
}
 800103a:	bf00      	nop
 800103c:	e7fe      	b.n	800103c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800103e:	2202      	movs	r2, #2
 8001040:	2100      	movs	r1, #0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff70 	bl	8000f28 <xQueueGenericCreate>
 8001048:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001056:	697b      	ldr	r3, [r7, #20]
	}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	; 0x38
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10c      	bne.n	8001096 <xQueueGenericSend+0x36>
	__asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001080:	b672      	cpsid	i
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	b662      	cpsie	i
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001092:	bf00      	nop
 8001094:	e7fe      	b.n	8001094 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <xQueueGenericSend+0x44>
 800109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <xQueueGenericSend+0x48>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <xQueueGenericSend+0x4a>
 80010a8:	2300      	movs	r3, #0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <xQueueGenericSend+0x68>
	__asm volatile
 80010ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b2:	b672      	cpsid	i
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	b662      	cpsie	i
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80010c4:	bf00      	nop
 80010c6:	e7fe      	b.n	80010c6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d103      	bne.n	80010d6 <xQueueGenericSend+0x76>
 80010ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <xQueueGenericSend+0x7a>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <xQueueGenericSend+0x7c>
 80010da:	2300      	movs	r3, #0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10c      	bne.n	80010fa <xQueueGenericSend+0x9a>
	__asm volatile
 80010e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e4:	b672      	cpsid	i
 80010e6:	f383 8811 	msr	BASEPRI, r3
 80010ea:	f3bf 8f6f 	isb	sy
 80010ee:	f3bf 8f4f 	dsb	sy
 80010f2:	b662      	cpsie	i
 80010f4:	623b      	str	r3, [r7, #32]
}
 80010f6:	bf00      	nop
 80010f8:	e7fe      	b.n	80010f8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010fa:	f001 fc43 	bl	8002984 <xTaskGetSchedulerState>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <xQueueGenericSend+0xaa>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <xQueueGenericSend+0xae>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <xQueueGenericSend+0xb0>
 800110e:	2300      	movs	r3, #0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10c      	bne.n	800112e <xQueueGenericSend+0xce>
	__asm volatile
 8001114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001118:	b672      	cpsid	i
 800111a:	f383 8811 	msr	BASEPRI, r3
 800111e:	f3bf 8f6f 	isb	sy
 8001122:	f3bf 8f4f 	dsb	sy
 8001126:	b662      	cpsie	i
 8001128:	61fb      	str	r3, [r7, #28]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800112e:	f002 fa75 	bl	800361c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113a:	429a      	cmp	r2, r3
 800113c:	d302      	bcc.n	8001144 <xQueueGenericSend+0xe4>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d129      	bne.n	8001198 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800114a:	f000 fb41 	bl	80017d0 <prvCopyDataToQueue>
 800114e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	2b00      	cmp	r3, #0
 8001156:	d010      	beq.n	800117a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800115a:	3324      	adds	r3, #36	; 0x24
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fa4b 	bl	80025f8 <xTaskRemoveFromEventList>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <xQueueGenericSend+0x208>)
 800116a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	f3bf 8f4f 	dsb	sy
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	e00a      	b.n	8001190 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117c:	2b00      	cmp	r3, #0
 800117e:	d007      	beq.n	8001190 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <xQueueGenericSend+0x208>)
 8001182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	f3bf 8f4f 	dsb	sy
 800118c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001190:	f002 fa78 	bl	8003684 <vPortExitCritical>
				return pdPASS;
 8001194:	2301      	movs	r3, #1
 8001196:	e063      	b.n	8001260 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800119e:	f002 fa71 	bl	8003684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e05c      	b.n	8001260 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fa87 	bl	80026c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011ba:	f002 fa63 	bl	8003684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011be:	f000 ffed 	bl	800219c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80011c2:	f002 fa2b 	bl	800361c <vPortEnterCritical>
 80011c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d2:	d103      	bne.n	80011dc <xQueueGenericSend+0x17c>
 80011d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d103      	bne.n	80011f2 <xQueueGenericSend+0x192>
 80011ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011f2:	f002 fa47 	bl	8003684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011f6:	1d3a      	adds	r2, r7, #4
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fa76 	bl	80026f0 <xTaskCheckForTimeOut>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d124      	bne.n	8001254 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800120a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800120c:	f000 fbd8 	bl	80019c0 <prvIsQueueFull>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d018      	beq.n	8001248 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001218:	3310      	adds	r3, #16
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 f996 	bl	8002550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001226:	f000 fb63 	bl	80018f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800122a:	f000 ffc5 	bl	80021b8 <xTaskResumeAll>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	f47f af7c 	bne.w	800112e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <xQueueGenericSend+0x208>)
 8001238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	f3bf 8f4f 	dsb	sy
 8001242:	f3bf 8f6f 	isb	sy
 8001246:	e772      	b.n	800112e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800124a:	f000 fb51 	bl	80018f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800124e:	f000 ffb3 	bl	80021b8 <xTaskResumeAll>
 8001252:	e76c      	b.n	800112e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001256:	f000 fb4b 	bl	80018f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800125a:	f000 ffad 	bl	80021b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800125e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001260:	4618      	mov	r0, r3
 8001262:	3738      	adds	r7, #56	; 0x38
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	e000ed04 	.word	0xe000ed04

0800126c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10c      	bne.n	800129e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8001284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001288:	b672      	cpsid	i
 800128a:	f383 8811 	msr	BASEPRI, r3
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	f3bf 8f4f 	dsb	sy
 8001296:	b662      	cpsie	i
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
}
 800129a:	bf00      	nop
 800129c:	e7fe      	b.n	800129c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <xQueueGenericSendFromISR+0x40>
 80012a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <xQueueGenericSendFromISR+0x44>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <xQueueGenericSendFromISR+0x46>
 80012b0:	2300      	movs	r3, #0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10c      	bne.n	80012d0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80012b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ba:	b672      	cpsid	i
 80012bc:	f383 8811 	msr	BASEPRI, r3
 80012c0:	f3bf 8f6f 	isb	sy
 80012c4:	f3bf 8f4f 	dsb	sy
 80012c8:	b662      	cpsie	i
 80012ca:	623b      	str	r3, [r7, #32]
}
 80012cc:	bf00      	nop
 80012ce:	e7fe      	b.n	80012ce <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d103      	bne.n	80012de <xQueueGenericSendFromISR+0x72>
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <xQueueGenericSendFromISR+0x76>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <xQueueGenericSendFromISR+0x78>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10c      	bne.n	8001302 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	b672      	cpsid	i
 80012ee:	f383 8811 	msr	BASEPRI, r3
 80012f2:	f3bf 8f6f 	isb	sy
 80012f6:	f3bf 8f4f 	dsb	sy
 80012fa:	b662      	cpsie	i
 80012fc:	61fb      	str	r3, [r7, #28]
}
 80012fe:	bf00      	nop
 8001300:	e7fe      	b.n	8001300 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001302:	f002 fa73 	bl	80037ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001306:	f3ef 8211 	mrs	r2, BASEPRI
 800130a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130e:	b672      	cpsid	i
 8001310:	f383 8811 	msr	BASEPRI, r3
 8001314:	f3bf 8f6f 	isb	sy
 8001318:	f3bf 8f4f 	dsb	sy
 800131c:	b662      	cpsie	i
 800131e:	61ba      	str	r2, [r7, #24]
 8001320:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001322:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132e:	429a      	cmp	r2, r3
 8001330:	d302      	bcc.n	8001338 <xQueueGenericSendFromISR+0xcc>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d12c      	bne.n	8001392 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800133e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001348:	f000 fa42 	bl	80017d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800134c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d112      	bne.n	800137c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	d016      	beq.n	800138c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001360:	3324      	adds	r3, #36	; 0x24
 8001362:	4618      	mov	r0, r3
 8001364:	f001 f948 	bl	80025f8 <xTaskRemoveFromEventList>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00e      	beq.n	800138c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e007      	b.n	800138c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800137c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001380:	3301      	adds	r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	b25a      	sxtb	r2, r3
 8001386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800138c:	2301      	movs	r3, #1
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001390:	e001      	b.n	8001396 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80013a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3738      	adds	r7, #56	; 0x38
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	; 0x30
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <xQueueReceive+0x34>
	__asm volatile
 80013c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ca:	b672      	cpsid	i
 80013cc:	f383 8811 	msr	BASEPRI, r3
 80013d0:	f3bf 8f6f 	isb	sy
 80013d4:	f3bf 8f4f 	dsb	sy
 80013d8:	b662      	cpsie	i
 80013da:	623b      	str	r3, [r7, #32]
}
 80013dc:	bf00      	nop
 80013de:	e7fe      	b.n	80013de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <xQueueReceive+0x42>
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <xQueueReceive+0x46>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <xQueueReceive+0x48>
 80013f2:	2300      	movs	r3, #0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10c      	bne.n	8001412 <xQueueReceive+0x66>
	__asm volatile
 80013f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fc:	b672      	cpsid	i
 80013fe:	f383 8811 	msr	BASEPRI, r3
 8001402:	f3bf 8f6f 	isb	sy
 8001406:	f3bf 8f4f 	dsb	sy
 800140a:	b662      	cpsie	i
 800140c:	61fb      	str	r3, [r7, #28]
}
 800140e:	bf00      	nop
 8001410:	e7fe      	b.n	8001410 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001412:	f001 fab7 	bl	8002984 <xTaskGetSchedulerState>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <xQueueReceive+0x76>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <xQueueReceive+0x7a>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <xQueueReceive+0x7c>
 8001426:	2300      	movs	r3, #0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10c      	bne.n	8001446 <xQueueReceive+0x9a>
	__asm volatile
 800142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001430:	b672      	cpsid	i
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	f3bf 8f6f 	isb	sy
 800143a:	f3bf 8f4f 	dsb	sy
 800143e:	b662      	cpsie	i
 8001440:	61bb      	str	r3, [r7, #24]
}
 8001442:	bf00      	nop
 8001444:	e7fe      	b.n	8001444 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001446:	f002 f8e9 	bl	800361c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	2b00      	cmp	r3, #0
 8001454:	d01f      	beq.n	8001496 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800145a:	f000 fa23 	bl	80018a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00f      	beq.n	800148e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001470:	3310      	adds	r3, #16
 8001472:	4618      	mov	r0, r3
 8001474:	f001 f8c0 	bl	80025f8 <xTaskRemoveFromEventList>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <xQueueReceive+0x1c8>)
 8001480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800148e:	f002 f8f9 	bl	8003684 <vPortExitCritical>
				return pdPASS;
 8001492:	2301      	movs	r3, #1
 8001494:	e069      	b.n	800156a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800149c:	f002 f8f2 	bl	8003684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e062      	b.n	800156a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f908 	bl	80026c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80014b4:	2301      	movs	r3, #1
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80014b8:	f002 f8e4 	bl	8003684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80014bc:	f000 fe6e 	bl	800219c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80014c0:	f002 f8ac 	bl	800361c <vPortEnterCritical>
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d103      	bne.n	80014da <xQueueReceive+0x12e>
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e6:	d103      	bne.n	80014f0 <xQueueReceive+0x144>
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014f0:	f002 f8c8 	bl	8003684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80014f4:	1d3a      	adds	r2, r7, #4
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f8f7 	bl	80026f0 <xTaskCheckForTimeOut>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d123      	bne.n	8001550 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800150a:	f000 fa43 	bl	8001994 <prvIsQueueEmpty>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d017      	beq.n	8001544 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	3324      	adds	r3, #36	; 0x24
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f001 f817 	bl	8002550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001524:	f000 f9e4 	bl	80018f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001528:	f000 fe46 	bl	80021b8 <xTaskResumeAll>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d189      	bne.n	8001446 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <xQueueReceive+0x1c8>)
 8001534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	f3bf 8f6f 	isb	sy
 8001542:	e780      	b.n	8001446 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001546:	f000 f9d3 	bl	80018f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800154a:	f000 fe35 	bl	80021b8 <xTaskResumeAll>
 800154e:	e77a      	b.n	8001446 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001552:	f000 f9cd 	bl	80018f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001556:	f000 fe2f 	bl	80021b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800155a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800155c:	f000 fa1a 	bl	8001994 <prvIsQueueEmpty>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	f43f af6f 	beq.w	8001446 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800156a:	4618      	mov	r0, r3
 800156c:	3730      	adds	r7, #48	; 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000ed04 	.word	0xe000ed04

08001578 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001582:	2300      	movs	r3, #0
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8001594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001598:	b672      	cpsid	i
 800159a:	f383 8811 	msr	BASEPRI, r3
 800159e:	f3bf 8f6f 	isb	sy
 80015a2:	f3bf 8f4f 	dsb	sy
 80015a6:	b662      	cpsie	i
 80015a8:	623b      	str	r3, [r7, #32]
}
 80015aa:	bf00      	nop
 80015ac:	e7fe      	b.n	80015ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ba:	b672      	cpsid	i
 80015bc:	f383 8811 	msr	BASEPRI, r3
 80015c0:	f3bf 8f6f 	isb	sy
 80015c4:	f3bf 8f4f 	dsb	sy
 80015c8:	b662      	cpsie	i
 80015ca:	61fb      	str	r3, [r7, #28]
}
 80015cc:	bf00      	nop
 80015ce:	e7fe      	b.n	80015ce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015d0:	f001 f9d8 	bl	8002984 <xTaskGetSchedulerState>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <xQueueSemaphoreTake+0x68>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <xQueueSemaphoreTake+0x6c>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <xQueueSemaphoreTake+0x6e>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80015ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ee:	b672      	cpsid	i
 80015f0:	f383 8811 	msr	BASEPRI, r3
 80015f4:	f3bf 8f6f 	isb	sy
 80015f8:	f3bf 8f4f 	dsb	sy
 80015fc:	b662      	cpsie	i
 80015fe:	61bb      	str	r3, [r7, #24]
}
 8001600:	bf00      	nop
 8001602:	e7fe      	b.n	8001602 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001604:	f002 f80a 	bl	800361c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	2b00      	cmp	r3, #0
 8001612:	d024      	beq.n	800165e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	1e5a      	subs	r2, r3, #1
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d104      	bne.n	800162e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001624:	f001 fb2c 	bl	8002c80 <pvTaskIncrementMutexHeldCount>
 8001628:	4602      	mov	r2, r0
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00f      	beq.n	8001656 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	3310      	adds	r3, #16
 800163a:	4618      	mov	r0, r3
 800163c:	f000 ffdc 	bl	80025f8 <xTaskRemoveFromEventList>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001646:	4b55      	ldr	r3, [pc, #340]	; (800179c <xQueueSemaphoreTake+0x224>)
 8001648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f3bf 8f4f 	dsb	sy
 8001652:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001656:	f002 f815 	bl	8003684 <vPortExitCritical>
				return pdPASS;
 800165a:	2301      	movs	r3, #1
 800165c:	e099      	b.n	8001792 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d113      	bne.n	800168c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	b672      	cpsid	i
 8001670:	f383 8811 	msr	BASEPRI, r3
 8001674:	f3bf 8f6f 	isb	sy
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	b662      	cpsie	i
 800167e:	617b      	str	r3, [r7, #20]
}
 8001680:	bf00      	nop
 8001682:	e7fe      	b.n	8001682 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001684:	f001 fffe 	bl	8003684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001688:	2300      	movs	r3, #0
 800168a:	e082      	b.n	8001792 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4618      	mov	r0, r3
 8001698:	f001 f814 	bl	80026c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800169c:	2301      	movs	r3, #1
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80016a0:	f001 fff0 	bl	8003684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80016a4:	f000 fd7a 	bl	800219c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016a8:	f001 ffb8 	bl	800361c <vPortEnterCritical>
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d103      	bne.n	80016c2 <xQueueSemaphoreTake+0x14a>
 80016ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ce:	d103      	bne.n	80016d8 <xQueueSemaphoreTake+0x160>
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016d8:	f001 ffd4 	bl	8003684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016dc:	463a      	mov	r2, r7
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 f803 	bl	80026f0 <xTaskCheckForTimeOut>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d132      	bne.n	8001756 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016f2:	f000 f94f 	bl	8001994 <prvIsQueueEmpty>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d026      	beq.n	800174a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8001704:	f001 ff8a 	bl	800361c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 f957 	bl	80029c0 <xTaskPriorityInherit>
 8001712:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001714:	f001 ffb6 	bl	8003684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	3324      	adds	r3, #36	; 0x24
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 ff15 	bl	8002550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001728:	f000 f8e2 	bl	80018f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800172c:	f000 fd44 	bl	80021b8 <xTaskResumeAll>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f af66 	bne.w	8001604 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <xQueueSemaphoreTake+0x224>)
 800173a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f3bf 8f4f 	dsb	sy
 8001744:	f3bf 8f6f 	isb	sy
 8001748:	e75c      	b.n	8001604 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800174a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800174c:	f000 f8d0 	bl	80018f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001750:	f000 fd32 	bl	80021b8 <xTaskResumeAll>
 8001754:	e756      	b.n	8001604 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001758:	f000 f8ca 	bl	80018f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800175c:	f000 fd2c 	bl	80021b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001762:	f000 f917 	bl	8001994 <prvIsQueueEmpty>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	f43f af4b 	beq.w	8001604 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00d      	beq.n	8001790 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8001774:	f001 ff52 	bl	800361c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800177a:	f000 f811 	bl	80017a0 <prvGetDisinheritPriorityAfterTimeout>
 800177e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001786:	4618      	mov	r0, r3
 8001788:	f001 f9f4 	bl	8002b74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800178c:	f001 ff7a 	bl	8003684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001790:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001792:	4618      	mov	r0, r3
 8001794:	3738      	adds	r7, #56	; 0x38
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000ed04 	.word	0xe000ed04

080017a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e001      	b.n	80017c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80017c2:	68fb      	ldr	r3, [r7, #12]
	}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10d      	bne.n	800180a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d14d      	bne.n	8001892 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 f948 	bl	8002a90 <xTaskPriorityDisinherit>
 8001800:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	e043      	b.n	8001892 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d119      	bne.n	8001844 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6858      	ldr	r0, [r3, #4]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	461a      	mov	r2, r3
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	f002 fcaa 	bl	8004174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	441a      	add	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d32b      	bcc.n	8001892 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	e026      	b.n	8001892 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	68d8      	ldr	r0, [r3, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	461a      	mov	r2, r3
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	f002 fc90 	bl	8004174 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	425b      	negs	r3, r3
 800185e:	441a      	add	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	425b      	negs	r3, r3
 800187a:	441a      	add	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d105      	bne.n	8001892 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3b01      	subs	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800189a:	697b      	ldr	r3, [r7, #20]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d018      	beq.n	80018e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	441a      	add	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d303      	bcc.n	80018d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68d9      	ldr	r1, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	461a      	mov	r2, r3
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f002 fc46 	bl	8004174 <memcpy>
	}
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80018f8:	f001 fe90 	bl	800361c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001902:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001904:	e011      	b.n	800192a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d012      	beq.n	8001934 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3324      	adds	r3, #36	; 0x24
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fe70 	bl	80025f8 <xTaskRemoveFromEventList>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800191e:	f000 ff4d 	bl	80027bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	3b01      	subs	r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dce9      	bgt.n	8001906 <prvUnlockQueue+0x16>
 8001932:	e000      	b.n	8001936 <prvUnlockQueue+0x46>
					break;
 8001934:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	22ff      	movs	r2, #255	; 0xff
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800193e:	f001 fea1 	bl	8003684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001942:	f001 fe6b 	bl	800361c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800194c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800194e:	e011      	b.n	8001974 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d012      	beq.n	800197e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3310      	adds	r3, #16
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fe4b 	bl	80025f8 <xTaskRemoveFromEventList>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001968:	f000 ff28 	bl	80027bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	3b01      	subs	r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001978:	2b00      	cmp	r3, #0
 800197a:	dce9      	bgt.n	8001950 <prvUnlockQueue+0x60>
 800197c:	e000      	b.n	8001980 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800197e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	22ff      	movs	r2, #255	; 0xff
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001988:	f001 fe7c 	bl	8003684 <vPortExitCritical>
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800199c:	f001 fe3e 	bl	800361c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e001      	b.n	80019b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80019b2:	f001 fe67 	bl	8003684 <vPortExitCritical>

	return xReturn;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80019c8:	f001 fe28 	bl	800361c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d102      	bne.n	80019de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80019d8:	2301      	movs	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e001      	b.n	80019e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80019e2:	f001 fe4f 	bl	8003684 <vPortExitCritical>

	return xReturn;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e014      	b.n	8001a2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <vQueueAddToRegistry+0x50>)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10b      	bne.n	8001a24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <vQueueAddToRegistry+0x50>)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <vQueueAddToRegistry+0x50>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001a22:	e006      	b.n	8001a32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b07      	cmp	r3, #7
 8001a2e:	d9e7      	bls.n	8001a00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200007e4 	.word	0x200007e4

08001a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001a54:	f001 fde2 	bl	800361c <vPortEnterCritical>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d103      	bne.n	8001a6e <vQueueWaitForMessageRestricted+0x2a>
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7a:	d103      	bne.n	8001a84 <vQueueWaitForMessageRestricted+0x40>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a84:	f001 fdfe 	bl	8003684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d106      	bne.n	8001a9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3324      	adds	r3, #36	; 0x24
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fd7f 	bl	800259c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff26 	bl	80018f0 <prvUnlockQueue>
	}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	; 0x38
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10c      	bne.n	8001ada <xTaskCreateStatic+0x2e>
	__asm volatile
 8001ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac4:	b672      	cpsid	i
 8001ac6:	f383 8811 	msr	BASEPRI, r3
 8001aca:	f3bf 8f6f 	isb	sy
 8001ace:	f3bf 8f4f 	dsb	sy
 8001ad2:	b662      	cpsie	i
 8001ad4:	623b      	str	r3, [r7, #32]
}
 8001ad6:	bf00      	nop
 8001ad8:	e7fe      	b.n	8001ad8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8001ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10c      	bne.n	8001afa <xTaskCreateStatic+0x4e>
	__asm volatile
 8001ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae4:	b672      	cpsid	i
 8001ae6:	f383 8811 	msr	BASEPRI, r3
 8001aea:	f3bf 8f6f 	isb	sy
 8001aee:	f3bf 8f4f 	dsb	sy
 8001af2:	b662      	cpsie	i
 8001af4:	61fb      	str	r3, [r7, #28]
}
 8001af6:	bf00      	nop
 8001af8:	e7fe      	b.n	8001af8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001afa:	235c      	movs	r3, #92	; 0x5c
 8001afc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b5c      	cmp	r3, #92	; 0x5c
 8001b02:	d00c      	beq.n	8001b1e <xTaskCreateStatic+0x72>
	__asm volatile
 8001b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b08:	b672      	cpsid	i
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	b662      	cpsie	i
 8001b18:	61bb      	str	r3, [r7, #24]
}
 8001b1a:	bf00      	nop
 8001b1c:	e7fe      	b.n	8001b1c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001b1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01e      	beq.n	8001b64 <xTaskCreateStatic+0xb8>
 8001b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01b      	beq.n	8001b64 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	2202      	movs	r2, #2
 8001b3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9303      	str	r3, [sp, #12]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f850 	bl	8001bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b5e:	f000 f8df 	bl	8001d20 <prvAddNewTaskToReadyList>
 8001b62:	e001      	b.n	8001b68 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001b68:	697b      	ldr	r3, [r7, #20]
	}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b08c      	sub	sp, #48	; 0x30
 8001b76:	af04      	add	r7, sp, #16
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fe74 	bl	8003874 <pvPortMalloc>
 8001b8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00e      	beq.n	8001bb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b94:	205c      	movs	r0, #92	; 0x5c
 8001b96:	f001 fe6d 	bl	8003874 <pvPortMalloc>
 8001b9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba8:	e005      	b.n	8001bb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f001 ff2c 	bl	8003a08 <vPortFree>
 8001bb0:	e001      	b.n	8001bb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d017      	beq.n	8001bec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9303      	str	r3, [sp, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f80e 	bl	8001bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001be0:	69f8      	ldr	r0, [r7, #28]
 8001be2:	f000 f89d 	bl	8001d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e002      	b.n	8001bf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
	}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	461a      	mov	r2, r3
 8001c14:	21a5      	movs	r1, #165	; 0xa5
 8001c16:	f002 fa33 	bl	8004080 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001c24:	440b      	add	r3, r1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f023 0307 	bic.w	r3, r3, #7
 8001c32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00c      	beq.n	8001c58 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8001c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c42:	b672      	cpsid	i
 8001c44:	f383 8811 	msr	BASEPRI, r3
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	b662      	cpsie	i
 8001c52:	617b      	str	r3, [r7, #20]
}
 8001c54:	bf00      	nop
 8001c56:	e7fe      	b.n	8001c56 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01f      	beq.n	8001c9e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e012      	b.n	8001c8a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	7819      	ldrb	r1, [r3, #0]
 8001c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4413      	add	r3, r2
 8001c72:	3334      	adds	r3, #52	; 0x34
 8001c74:	460a      	mov	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	3301      	adds	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d9e9      	bls.n	8001c64 <prvInitialiseNewTask+0x68>
 8001c90:	e000      	b.n	8001c94 <prvInitialiseNewTask+0x98>
			{
				break;
 8001c92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c9c:	e003      	b.n	8001ca6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	2b37      	cmp	r3, #55	; 0x37
 8001caa:	d901      	bls.n	8001cb0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001cac:	2337      	movs	r3, #55	; 0x37
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe ffae 	bl	8000c28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	3318      	adds	r3, #24
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe ffa9 	bl	8000c28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	69b8      	ldr	r0, [r7, #24]
 8001d00:	f001 fb82 	bl	8003408 <pxPortInitialiseStack>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d28:	f001 fc78 	bl	800361c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <prvAddNewTaskToReadyList+0xc4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <prvAddNewTaskToReadyList+0xc4>)
 8001d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <prvAddNewTaskToReadyList+0xc8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <prvAddNewTaskToReadyList+0xc8>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <prvAddNewTaskToReadyList+0xc4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d110      	bne.n	8001d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001d4c:	f000 fd5a 	bl	8002804 <prvInitialiseTaskLists>
 8001d50:	e00d      	b.n	8001d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <prvAddNewTaskToReadyList+0xcc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <prvAddNewTaskToReadyList+0xc8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d802      	bhi.n	8001d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001d68:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <prvAddNewTaskToReadyList+0xc8>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <prvAddNewTaskToReadyList+0xd0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <prvAddNewTaskToReadyList+0xd0>)
 8001d76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <prvAddNewTaskToReadyList+0xd0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <prvAddNewTaskToReadyList+0xd4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d903      	bls.n	8001d94 <prvAddNewTaskToReadyList+0x74>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <prvAddNewTaskToReadyList+0xd4>)
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <prvAddNewTaskToReadyList+0xd8>)
 8001da2:	441a      	add	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f7fe ff49 	bl	8000c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001db0:	f001 fc68 	bl	8003684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <prvAddNewTaskToReadyList+0xcc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00e      	beq.n	8001dda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <prvAddNewTaskToReadyList+0xc8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d207      	bcs.n	8001dda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <prvAddNewTaskToReadyList+0xdc>)
 8001dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000cf8 	.word	0x20000cf8
 8001de8:	20000824 	.word	0x20000824
 8001dec:	20000d04 	.word	0x20000d04
 8001df0:	20000d14 	.word	0x20000d14
 8001df4:	20000d00 	.word	0x20000d00
 8001df8:	20000828 	.word	0x20000828
 8001dfc:	e000ed04 	.word	0xe000ed04

08001e00 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001e08:	f001 fc08 	bl	800361c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <vTaskDelete+0x18>
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <vTaskDelete+0xc8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	e000      	b.n	8001e1a <vTaskDelete+0x1a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff6b 	bl	8000cfc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3318      	adds	r3, #24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ff62 	bl	8000cfc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <vTaskDelete+0xcc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <vTaskDelete+0xcc>)
 8001e40:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <vTaskDelete+0xc8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10b      	bne.n	8001e64 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <vTaskDelete+0xd0>)
 8001e54:	f7fe fef5 	bl	8000c42 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <vTaskDelete+0xd4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <vTaskDelete+0xd4>)
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e009      	b.n	8001e78 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <vTaskDelete+0xd8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <vTaskDelete+0xd8>)
 8001e6c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fd36 	bl	80028e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001e74:	f000 fd66 	bl	8002944 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001e78:	f001 fc04 	bl	8003684 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <vTaskDelete+0xdc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01d      	beq.n	8001ec0 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <vTaskDelete+0xc8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d118      	bne.n	8001ec0 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <vTaskDelete+0xe0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <vTaskDelete+0xb0>
	__asm volatile
 8001e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9a:	b672      	cpsid	i
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	b662      	cpsie	i
 8001eaa:	60bb      	str	r3, [r7, #8]
}
 8001eac:	bf00      	nop
 8001eae:	e7fe      	b.n	8001eae <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <vTaskDelete+0xe4>)
 8001eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000824 	.word	0x20000824
 8001ecc:	20000d14 	.word	0x20000d14
 8001ed0:	20000ccc 	.word	0x20000ccc
 8001ed4:	20000ce0 	.word	0x20000ce0
 8001ed8:	20000cf8 	.word	0x20000cf8
 8001edc:	20000d04 	.word	0x20000d04
 8001ee0:	20000d20 	.word	0x20000d20
 8001ee4:	e000ed04 	.word	0xe000ed04

08001ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <vTaskDelay+0x64>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <vTaskDelay+0x34>
	__asm volatile
 8001f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f06:	b672      	cpsid	i
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	b662      	cpsie	i
 8001f16:	60bb      	str	r3, [r7, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	e7fe      	b.n	8001f1a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8001f1c:	f000 f93e 	bl	800219c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fec0 	bl	8002ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001f28:	f000 f946 	bl	80021b8 <xTaskResumeAll>
 8001f2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <vTaskDelay+0x68>)
 8001f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000d20 	.word	0x20000d20
 8001f50:	e000ed04 	.word	0xe000ed04

08001f54 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8001f5c:	f001 fb5e 	bl	800361c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <uxTaskPriorityGet+0x18>
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <uxTaskPriorityGet+0x30>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e000      	b.n	8001f6e <uxTaskPriorityGet+0x1a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8001f76:	f001 fb85 	bl	8003684 <vPortExitCritical>

		return uxReturn;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
	}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000824 	.word	0x20000824

08001f88 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b37      	cmp	r3, #55	; 0x37
 8001f9a:	d90c      	bls.n	8001fb6 <vTaskPrioritySet+0x2e>
	__asm volatile
 8001f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa0:	b672      	cpsid	i
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	b662      	cpsie	i
 8001fb0:	60fb      	str	r3, [r7, #12]
}
 8001fb2:	bf00      	nop
 8001fb4:	e7fe      	b.n	8001fb4 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b37      	cmp	r3, #55	; 0x37
 8001fba:	d901      	bls.n	8001fc0 <vTaskPrioritySet+0x38>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001fbc:	2337      	movs	r3, #55	; 0x37
 8001fbe:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001fc0:	f001 fb2c 	bl	800361c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <vTaskPrioritySet+0x48>
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <vTaskPrioritySet+0x130>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e000      	b.n	8001fd2 <vTaskPrioritySet+0x4a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d063      	beq.n	80020aa <vTaskPrioritySet+0x122>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d90d      	bls.n	8002006 <vTaskPrioritySet+0x7e>
				{
					if( pxTCB != pxCurrentTCB )
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <vTaskPrioritySet+0x130>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d00f      	beq.n	8002014 <vTaskPrioritySet+0x8c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <vTaskPrioritySet+0x130>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d309      	bcc.n	8002014 <vTaskPrioritySet+0x8c>
						{
							xYieldRequired = pdTRUE;
 8002000:	2301      	movs	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	e006      	b.n	8002014 <vTaskPrioritySet+0x8c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <vTaskPrioritySet+0x130>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	429a      	cmp	r2, r3
 800200e:	d101      	bne.n	8002014 <vTaskPrioritySet+0x8c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8002010:	2301      	movs	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	429a      	cmp	r2, r3
 8002024:	d102      	bne.n	800202c <vTaskPrioritySet+0xa4>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db04      	blt.n	8002044 <vTaskPrioritySet+0xbc>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6959      	ldr	r1, [r3, #20]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <vTaskPrioritySet+0x134>)
 8002054:	4413      	add	r3, r2
 8002056:	4299      	cmp	r1, r3
 8002058:	d11c      	bne.n	8002094 <vTaskPrioritySet+0x10c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3304      	adds	r3, #4
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fe4c 	bl	8000cfc <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <vTaskPrioritySet+0x138>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d903      	bls.n	8002078 <vTaskPrioritySet+0xf0>
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <vTaskPrioritySet+0x138>)
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <vTaskPrioritySet+0x134>)
 8002086:	441a      	add	r2, r3
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	3304      	adds	r3, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f7fe fdd7 	bl	8000c42 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <vTaskPrioritySet+0x122>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <vTaskPrioritySet+0x13c>)
 800209c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80020aa:	f001 faeb 	bl	8003684 <vPortExitCritical>
	}
 80020ae:	bf00      	nop
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000824 	.word	0x20000824
 80020bc:	20000828 	.word	0x20000828
 80020c0:	20000d00 	.word	0x20000d00
 80020c4:	e000ed04 	.word	0xe000ed04

080020c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020d6:	463a      	mov	r2, r7
 80020d8:	1d39      	adds	r1, r7, #4
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fd4e 	bl	8000b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	9202      	str	r2, [sp, #8]
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2300      	movs	r3, #0
 80020f4:	460a      	mov	r2, r1
 80020f6:	4923      	ldr	r1, [pc, #140]	; (8002184 <vTaskStartScheduler+0xbc>)
 80020f8:	4823      	ldr	r0, [pc, #140]	; (8002188 <vTaskStartScheduler+0xc0>)
 80020fa:	f7ff fcd7 	bl	8001aac <xTaskCreateStatic>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <vTaskStartScheduler+0xc4>)
 8002102:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <vTaskStartScheduler+0xc4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e001      	b.n	8002116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800211c:	f000 fe18 	bl	8002d50 <xTimerCreateTimerTask>
 8002120:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d118      	bne.n	800215a <vTaskStartScheduler+0x92>
	__asm volatile
 8002128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212c:	b672      	cpsid	i
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	b662      	cpsie	i
 800213c:	613b      	str	r3, [r7, #16]
}
 800213e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <vTaskStartScheduler+0xc8>)
 8002142:	f04f 32ff 	mov.w	r2, #4294967295
 8002146:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <vTaskStartScheduler+0xcc>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <vTaskStartScheduler+0xd0>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002154:	f001 f9e4 	bl	8003520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002158:	e010      	b.n	800217c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d10c      	bne.n	800217c <vTaskStartScheduler+0xb4>
	__asm volatile
 8002162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002166:	b672      	cpsid	i
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	b662      	cpsie	i
 8002176:	60fb      	str	r3, [r7, #12]
}
 8002178:	bf00      	nop
 800217a:	e7fe      	b.n	800217a <vTaskStartScheduler+0xb2>
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	08004f2c 	.word	0x08004f2c
 8002188:	080027d5 	.word	0x080027d5
 800218c:	20000d1c 	.word	0x20000d1c
 8002190:	20000d18 	.word	0x20000d18
 8002194:	20000d04 	.word	0x20000d04
 8002198:	20000cfc 	.word	0x20000cfc

0800219c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <vTaskSuspendAll+0x18>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <vTaskSuspendAll+0x18>)
 80021a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000d20 	.word	0x20000d20

080021b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <xTaskResumeAll+0x11c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <xTaskResumeAll+0x30>
	__asm volatile
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	b672      	cpsid	i
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	b662      	cpsie	i
 80021e2:	603b      	str	r3, [r7, #0]
}
 80021e4:	bf00      	nop
 80021e6:	e7fe      	b.n	80021e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021e8:	f001 fa18 	bl	800361c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <xTaskResumeAll+0x11c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <xTaskResumeAll+0x11c>)
 80021f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <xTaskResumeAll+0x11c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d162      	bne.n	80022c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <xTaskResumeAll+0x120>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d05e      	beq.n	80022c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002206:	e02f      	b.n	8002268 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <xTaskResumeAll+0x124>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3318      	adds	r3, #24
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd71 	bl	8000cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3304      	adds	r3, #4
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fd6c 	bl	8000cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <xTaskResumeAll+0x128>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d903      	bls.n	8002238 <xTaskResumeAll+0x80>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <xTaskResumeAll+0x128>)
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <xTaskResumeAll+0x12c>)
 8002246:	441a      	add	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3304      	adds	r3, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7fe fcf7 	bl	8000c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <xTaskResumeAll+0x130>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	429a      	cmp	r2, r3
 8002260:	d302      	bcc.n	8002268 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <xTaskResumeAll+0x134>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <xTaskResumeAll+0x124>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1cb      	bne.n	8002208 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002276:	f000 fb65 	bl	8002944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <xTaskResumeAll+0x138>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d010      	beq.n	80022a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002286:	f000 f847 	bl	8002318 <xTaskIncrementTick>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <xTaskResumeAll+0x134>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3b01      	subs	r3, #1
 800229a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f1      	bne.n	8002286 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <xTaskResumeAll+0x138>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <xTaskResumeAll+0x134>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <xTaskResumeAll+0x13c>)
 80022b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80022c4:	f001 f9de 	bl	8003684 <vPortExitCritical>

	return xAlreadyYielded;
 80022c8:	68bb      	ldr	r3, [r7, #8]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000d20 	.word	0x20000d20
 80022d8:	20000cf8 	.word	0x20000cf8
 80022dc:	20000cb8 	.word	0x20000cb8
 80022e0:	20000d00 	.word	0x20000d00
 80022e4:	20000828 	.word	0x20000828
 80022e8:	20000824 	.word	0x20000824
 80022ec:	20000d0c 	.word	0x20000d0c
 80022f0:	20000d08 	.word	0x20000d08
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <xTaskGetTickCount+0x1c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000cfc 	.word	0x20000cfc

08002318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <xTaskIncrementTick+0x14c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 808b 	bne.w	8002442 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800232c:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <xTaskIncrementTick+0x150>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002334:	4a4c      	ldr	r2, [pc, #304]	; (8002468 <xTaskIncrementTick+0x150>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d122      	bne.n	8002386 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8002340:	4b4a      	ldr	r3, [pc, #296]	; (800246c <xTaskIncrementTick+0x154>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <xTaskIncrementTick+0x4c>
	__asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	b672      	cpsid	i
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	b662      	cpsie	i
 800235e:	603b      	str	r3, [r7, #0]
}
 8002360:	bf00      	nop
 8002362:	e7fe      	b.n	8002362 <xTaskIncrementTick+0x4a>
 8002364:	4b41      	ldr	r3, [pc, #260]	; (800246c <xTaskIncrementTick+0x154>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <xTaskIncrementTick+0x158>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <xTaskIncrementTick+0x154>)
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4a3f      	ldr	r2, [pc, #252]	; (8002470 <xTaskIncrementTick+0x158>)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <xTaskIncrementTick+0x15c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <xTaskIncrementTick+0x15c>)
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	f000 fadf 	bl	8002944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002386:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <xTaskIncrementTick+0x160>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d349      	bcc.n	8002424 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <xTaskIncrementTick+0x154>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <xTaskIncrementTick+0x160>)
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	601a      	str	r2, [r3, #0]
					break;
 80023a2:	e03f      	b.n	8002424 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023a4:	4b31      	ldr	r3, [pc, #196]	; (800246c <xTaskIncrementTick+0x154>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d203      	bcs.n	80023c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80023bc:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <xTaskIncrementTick+0x160>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80023c2:	e02f      	b.n	8002424 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fc97 	bl	8000cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3318      	adds	r3, #24
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fc8e 	bl	8000cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <xTaskIncrementTick+0x164>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d903      	bls.n	80023f4 <xTaskIncrementTick+0xdc>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <xTaskIncrementTick+0x164>)
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <xTaskIncrementTick+0x168>)
 8002402:	441a      	add	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f7fe fc19 	bl	8000c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <xTaskIncrementTick+0x16c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	429a      	cmp	r2, r3
 800241c:	d3b8      	bcc.n	8002390 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002422:	e7b5      	b.n	8002390 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <xTaskIncrementTick+0x16c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242a:	4915      	ldr	r1, [pc, #84]	; (8002480 <xTaskIncrementTick+0x168>)
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d907      	bls.n	800244c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800243c:	2301      	movs	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e004      	b.n	800244c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <xTaskIncrementTick+0x170>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <xTaskIncrementTick+0x170>)
 800244a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <xTaskIncrementTick+0x174>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002458:	697b      	ldr	r3, [r7, #20]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000d20 	.word	0x20000d20
 8002468:	20000cfc 	.word	0x20000cfc
 800246c:	20000cb0 	.word	0x20000cb0
 8002470:	20000cb4 	.word	0x20000cb4
 8002474:	20000d10 	.word	0x20000d10
 8002478:	20000d18 	.word	0x20000d18
 800247c:	20000d00 	.word	0x20000d00
 8002480:	20000828 	.word	0x20000828
 8002484:	20000824 	.word	0x20000824
 8002488:	20000d08 	.word	0x20000d08
 800248c:	20000d0c 	.word	0x20000d0c

08002490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <vTaskSwitchContext+0xac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <vTaskSwitchContext+0xb0>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024a4:	e043      	b.n	800252e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <vTaskSwitchContext+0xb0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <vTaskSwitchContext+0xb4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e012      	b.n	80024da <vTaskSwitchContext+0x4a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <vTaskSwitchContext+0x44>
	__asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024be:	b672      	cpsid	i
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	b662      	cpsie	i
 80024ce:	607b      	str	r3, [r7, #4]
}
 80024d0:	bf00      	nop
 80024d2:	e7fe      	b.n	80024d2 <vTaskSwitchContext+0x42>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	491b      	ldr	r1, [pc, #108]	; (8002548 <vTaskSwitchContext+0xb8>)
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0e2      	beq.n	80024b4 <vTaskSwitchContext+0x24>
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <vTaskSwitchContext+0xb8>)
 80024fa:	4413      	add	r3, r2
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	3308      	adds	r3, #8
 8002510:	429a      	cmp	r2, r3
 8002512:	d104      	bne.n	800251e <vTaskSwitchContext+0x8e>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <vTaskSwitchContext+0xbc>)
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <vTaskSwitchContext+0xb4>)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000d20 	.word	0x20000d20
 8002540:	20000d0c 	.word	0x20000d0c
 8002544:	20000d00 	.word	0x20000d00
 8002548:	20000828 	.word	0x20000828
 800254c:	20000824 	.word	0x20000824

08002550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10c      	bne.n	800257a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	b672      	cpsid	i
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	b662      	cpsie	i
 8002574:	60fb      	str	r3, [r7, #12]
}
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <vTaskPlaceOnEventList+0x48>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3318      	adds	r3, #24
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fb81 	bl	8000c8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002588:	2101      	movs	r1, #1
 800258a:	6838      	ldr	r0, [r7, #0]
 800258c:	f000 fb8c 	bl	8002ca8 <prvAddCurrentTaskToDelayedList>
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000824 	.word	0x20000824

0800259c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10c      	bne.n	80025c8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	b672      	cpsid	i
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	b662      	cpsie	i
 80025c2:	617b      	str	r3, [r7, #20]
}
 80025c4:	bf00      	nop
 80025c6:	e7fe      	b.n	80025c6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <vTaskPlaceOnEventListRestricted+0x58>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3318      	adds	r3, #24
 80025ce:	4619      	mov	r1, r3
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7fe fb36 	bl	8000c42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68b8      	ldr	r0, [r7, #8]
 80025e6:	f000 fb5f 	bl	8002ca8 <prvAddCurrentTaskToDelayedList>
	}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000824 	.word	0x20000824

080025f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	b672      	cpsid	i
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	b662      	cpsie	i
 8002622:	60fb      	str	r3, [r7, #12]
}
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	3318      	adds	r3, #24
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fb65 	bl	8000cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <xTaskRemoveFromEventList+0xb4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d11d      	bne.n	8002676 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	3304      	adds	r3, #4
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fb5c 	bl	8000cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <xTaskRemoveFromEventList+0xb8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d903      	bls.n	8002658 <xTaskRemoveFromEventList+0x60>
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <xTaskRemoveFromEventList+0xb8>)
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <xTaskRemoveFromEventList+0xbc>)
 8002666:	441a      	add	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f7fe fae7 	bl	8000c42 <vListInsertEnd>
 8002674:	e005      	b.n	8002682 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	3318      	adds	r3, #24
 800267a:	4619      	mov	r1, r3
 800267c:	480e      	ldr	r0, [pc, #56]	; (80026b8 <xTaskRemoveFromEventList+0xc0>)
 800267e:	f7fe fae0 	bl	8000c42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <xTaskRemoveFromEventList+0xc4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	429a      	cmp	r2, r3
 800268e:	d905      	bls.n	800269c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <xTaskRemoveFromEventList+0xc8>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e001      	b.n	80026a0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80026a0:	697b      	ldr	r3, [r7, #20]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000d20 	.word	0x20000d20
 80026b0:	20000d00 	.word	0x20000d00
 80026b4:	20000828 	.word	0x20000828
 80026b8:	20000cb8 	.word	0x20000cb8
 80026bc:	20000824 	.word	0x20000824
 80026c0:	20000d0c 	.word	0x20000d0c

080026c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <vTaskInternalSetTimeOutState+0x24>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <vTaskInternalSetTimeOutState+0x28>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	605a      	str	r2, [r3, #4]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	20000d10 	.word	0x20000d10
 80026ec:	20000cfc 	.word	0x20000cfc

080026f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10c      	bne.n	800271a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	b672      	cpsid	i
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	b662      	cpsie	i
 8002714:	613b      	str	r3, [r7, #16]
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	b672      	cpsid	i
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	b662      	cpsie	i
 8002734:	60fb      	str	r3, [r7, #12]
}
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800273a:	f000 ff6f 	bl	800361c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <xTaskCheckForTimeOut+0xc4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d102      	bne.n	800275e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	e023      	b.n	80027a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <xTaskCheckForTimeOut+0xc8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d007      	beq.n	800277a <xTaskCheckForTimeOut+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002774:	2301      	movs	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	e015      	b.n	80027a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	429a      	cmp	r2, r3
 8002782:	d20b      	bcs.n	800279c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	1ad2      	subs	r2, r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff97 	bl	80026c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	e004      	b.n	80027a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80027a6:	f000 ff6d 	bl	8003684 <vPortExitCritical>

	return xReturn;
 80027aa:	69fb      	ldr	r3, [r7, #28]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000cfc 	.word	0x20000cfc
 80027b8:	20000d10 	.word	0x20000d10

080027bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <vTaskMissedYield+0x14>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	20000d0c 	.word	0x20000d0c

080027d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80027dc:	f000 f852 	bl	8002884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <prvIdleTask+0x28>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d9f9      	bls.n	80027dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <prvIdleTask+0x2c>)
 80027ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80027f8:	e7f0      	b.n	80027dc <prvIdleTask+0x8>
 80027fa:	bf00      	nop
 80027fc:	20000828 	.word	0x20000828
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	e00c      	b.n	800282a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <prvInitialiseTaskLists+0x60>)
 800281c:	4413      	add	r3, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe f9e2 	bl	8000be8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3301      	adds	r3, #1
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b37      	cmp	r3, #55	; 0x37
 800282e:	d9ef      	bls.n	8002810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <prvInitialiseTaskLists+0x64>)
 8002832:	f7fe f9d9 	bl	8000be8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <prvInitialiseTaskLists+0x68>)
 8002838:	f7fe f9d6 	bl	8000be8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <prvInitialiseTaskLists+0x6c>)
 800283e:	f7fe f9d3 	bl	8000be8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002842:	480c      	ldr	r0, [pc, #48]	; (8002874 <prvInitialiseTaskLists+0x70>)
 8002844:	f7fe f9d0 	bl	8000be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <prvInitialiseTaskLists+0x74>)
 800284a:	f7fe f9cd 	bl	8000be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <prvInitialiseTaskLists+0x78>)
 8002850:	4a05      	ldr	r2, [pc, #20]	; (8002868 <prvInitialiseTaskLists+0x64>)
 8002852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <prvInitialiseTaskLists+0x7c>)
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <prvInitialiseTaskLists+0x68>)
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000828 	.word	0x20000828
 8002868:	20000c88 	.word	0x20000c88
 800286c:	20000c9c 	.word	0x20000c9c
 8002870:	20000cb8 	.word	0x20000cb8
 8002874:	20000ccc 	.word	0x20000ccc
 8002878:	20000ce4 	.word	0x20000ce4
 800287c:	20000cb0 	.word	0x20000cb0
 8002880:	20000cb4 	.word	0x20000cb4

08002884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800288a:	e019      	b.n	80028c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800288c:	f000 fec6 	bl	800361c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <prvCheckTasksWaitingTermination+0x50>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fa2d 	bl	8000cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <prvCheckTasksWaitingTermination+0x54>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <prvCheckTasksWaitingTermination+0x54>)
 80028aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <prvCheckTasksWaitingTermination+0x58>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <prvCheckTasksWaitingTermination+0x58>)
 80028b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80028b6:	f000 fee5 	bl	8003684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f810 	bl	80028e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <prvCheckTasksWaitingTermination+0x58>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e1      	bne.n	800288c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000ccc 	.word	0x20000ccc
 80028d8:	20000cf8 	.word	0x20000cf8
 80028dc:	20000ce0 	.word	0x20000ce0

080028e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f886 	bl	8003a08 <vPortFree>
				vPortFree( pxTCB );
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f001 f883 	bl	8003a08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002902:	e01a      	b.n	800293a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800290a:	2b01      	cmp	r3, #1
 800290c:	d103      	bne.n	8002916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f001 f87a 	bl	8003a08 <vPortFree>
	}
 8002914:	e011      	b.n	800293a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800291c:	2b02      	cmp	r3, #2
 800291e:	d00c      	beq.n	800293a <prvDeleteTCB+0x5a>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002924:	b672      	cpsid	i
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	b662      	cpsie	i
 8002934:	60fb      	str	r3, [r7, #12]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <prvDeleteTCB+0x58>
	}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <prvResetNextTaskUnblockTime+0x38>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <prvResetNextTaskUnblockTime+0x3c>)
 8002956:	f04f 32ff 	mov.w	r2, #4294967295
 800295a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800295c:	e008      	b.n	8002970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <prvResetNextTaskUnblockTime+0x38>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <prvResetNextTaskUnblockTime+0x3c>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	20000cb0 	.word	0x20000cb0
 8002980:	20000d18 	.word	0x20000d18

08002984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <xTaskGetSchedulerState+0x34>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002992:	2301      	movs	r3, #1
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	e008      	b.n	80029aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <xTaskGetSchedulerState+0x38>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80029a0:	2302      	movs	r3, #2
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e001      	b.n	80029aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80029aa:	687b      	ldr	r3, [r7, #4]
	}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	20000d04 	.word	0x20000d04
 80029bc:	20000d20 	.word	0x20000d20

080029c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d051      	beq.n	8002a7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <xTaskPriorityInherit+0xc4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d241      	bcs.n	8002a68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db06      	blt.n	80029fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <xTaskPriorityInherit+0xc4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6959      	ldr	r1, [r3, #20]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <xTaskPriorityInherit+0xc8>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4299      	cmp	r1, r3
 8002a10:	d122      	bne.n	8002a58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f970 	bl	8000cfc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <xTaskPriorityInherit+0xc4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <xTaskPriorityInherit+0xcc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d903      	bls.n	8002a3a <xTaskPriorityInherit+0x7a>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <xTaskPriorityInherit+0xcc>)
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <xTaskPriorityInherit+0xc8>)
 8002a48:	441a      	add	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fe f8f6 	bl	8000c42 <vListInsertEnd>
 8002a56:	e004      	b.n	8002a62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <xTaskPriorityInherit+0xc4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002a62:	2301      	movs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e008      	b.n	8002a7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <xTaskPriorityInherit+0xc4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d201      	bcs.n	8002a7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002a76:	2301      	movs	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000824 	.word	0x20000824
 8002a88:	20000828 	.word	0x20000828
 8002a8c:	20000d00 	.word	0x20000d00

08002a90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d05a      	beq.n	8002b5c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002aa6:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <xTaskPriorityDisinherit+0xd8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d00c      	beq.n	8002aca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	b672      	cpsid	i
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	b662      	cpsie	i
 8002ac4:	60fb      	str	r3, [r7, #12]
}
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	b672      	cpsid	i
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	b662      	cpsie	i
 8002ae6:	60bb      	str	r3, [r7, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	e7fe      	b.n	8002aea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	1e5a      	subs	r2, r3, #1
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d02c      	beq.n	8002b5c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d128      	bne.n	8002b5c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe f8f4 	bl	8000cfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <xTaskPriorityDisinherit+0xdc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d903      	bls.n	8002b3c <xTaskPriorityDisinherit+0xac>
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <xTaskPriorityDisinherit+0xdc>)
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <xTaskPriorityDisinherit+0xe0>)
 8002b4a:	441a      	add	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f7fe f875 	bl	8000c42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002b5c:	697b      	ldr	r3, [r7, #20]
	}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000824 	.word	0x20000824
 8002b6c:	20000d00 	.word	0x20000d00
 8002b70:	20000828 	.word	0x20000828

08002b74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d06e      	beq.n	8002c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10c      	bne.n	8002bae <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	b672      	cpsid	i
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	b662      	cpsie	i
 8002ba8:	60fb      	str	r3, [r7, #12]
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d902      	bls.n	8002bbe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	e002      	b.n	8002bc4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d04d      	beq.n	8002c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d148      	bne.n	8002c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d10c      	bne.n	8002bfc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	b672      	cpsid	i
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	b662      	cpsie	i
 8002bf6:	60bb      	str	r3, [r7, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db04      	blt.n	8002c1a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6959      	ldr	r1, [r3, #20]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4299      	cmp	r1, r3
 8002c2e:	d11c      	bne.n	8002c6a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f861 	bl	8000cfc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d903      	bls.n	8002c4e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8002c5c:	441a      	add	r2, r3
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f7fd ffec 	bl	8000c42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000824 	.word	0x20000824
 8002c78:	20000828 	.word	0x20000828
 8002c7c:	20000d00 	.word	0x20000d00

08002c80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002c84:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c92:	3201      	adds	r2, #1
 8002c94:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8002c96:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8002c98:	681b      	ldr	r3, [r3, #0]
	}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	20000824 	.word	0x20000824

08002ca8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <prvAddCurrentTaskToDelayedList+0x90>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe f81c 	bl	8000cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d10a      	bne.n	8002ce2 <prvAddCurrentTaskToDelayedList+0x3a>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4819      	ldr	r0, [pc, #100]	; (8002d40 <prvAddCurrentTaskToDelayedList+0x98>)
 8002cdc:	f7fd ffb1 	bl	8000c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ce0:	e026      	b.n	8002d30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d209      	bcs.n	8002d0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7fd ffbf 	bl	8000c8a <vListInsert>
}
 8002d0c:	e010      	b.n	8002d30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f7fd ffb5 	bl	8000c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d202      	bcs.n	8002d30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002d2a:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000cfc 	.word	0x20000cfc
 8002d3c:	20000824 	.word	0x20000824
 8002d40:	20000ce4 	.word	0x20000ce4
 8002d44:	20000cb4 	.word	0x20000cb4
 8002d48:	20000cb0 	.word	0x20000cb0
 8002d4c:	20000d18 	.word	0x20000d18

08002d50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002d5a:	f000 fb15 	bl	8003388 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <xTimerCreateTimerTask+0x84>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d021      	beq.n	8002daa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002d6e:	1d3a      	adds	r2, r7, #4
 8002d70:	f107 0108 	add.w	r1, r7, #8
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd ff1b 	bl	8000bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	9202      	str	r2, [sp, #8]
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	2302      	movs	r3, #2
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	460a      	mov	r2, r1
 8002d90:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <xTimerCreateTimerTask+0x88>)
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <xTimerCreateTimerTask+0x8c>)
 8002d94:	f7fe fe8a 	bl	8001aac <xTaskCreateStatic>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <xTimerCreateTimerTask+0x90>)
 8002d9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <xTimerCreateTimerTask+0x90>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002da6:	2301      	movs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10c      	bne.n	8002dca <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	b672      	cpsid	i
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	b662      	cpsie	i
 8002dc4:	613b      	str	r3, [r7, #16]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8002dca:	697b      	ldr	r3, [r7, #20]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000d54 	.word	0x20000d54
 8002dd8:	08004f34 	.word	0x08004f34
 8002ddc:	08002f21 	.word	0x08002f21
 8002de0:	20000d58 	.word	0x20000d58

08002de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10c      	bne.n	8002e16 <xTimerGenericCommand+0x32>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	b672      	cpsid	i
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	b662      	cpsie	i
 8002e10:	623b      	str	r3, [r7, #32]
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <xTimerGenericCommand+0x9c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d02a      	beq.n	8002e74 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	dc18      	bgt.n	8002e62 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002e30:	f7ff fda8 	bl	8002984 <xTaskGetSchedulerState>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d109      	bne.n	8002e4e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <xTimerGenericCommand+0x9c>)
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	f107 0110 	add.w	r1, r7, #16
 8002e42:	2300      	movs	r3, #0
 8002e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e46:	f7fe f90b 	bl	8001060 <xQueueGenericSend>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8002e4c:	e012      	b.n	8002e74 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <xTimerGenericCommand+0x9c>)
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	f107 0110 	add.w	r1, r7, #16
 8002e56:	2300      	movs	r3, #0
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f7fe f901 	bl	8001060 <xQueueGenericSend>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8002e60:	e008      	b.n	8002e74 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <xTimerGenericCommand+0x9c>)
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	f107 0110 	add.w	r1, r7, #16
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	f7fe f9fd 	bl	800126c <xQueueGenericSendFromISR>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3728      	adds	r7, #40	; 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000d54 	.word	0x20000d54

08002e84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e8e:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <prvProcessExpiredTimer+0x98>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd ff2d 	bl	8000cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d024      	beq.n	8002efa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	18d1      	adds	r1, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	6978      	ldr	r0, [r7, #20]
 8002ebe:	f000 f8d3 	bl	8003068 <prvInsertTimerInActiveList>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d021      	beq.n	8002f0c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff ff86 	bl	8002de4 <xTimerGenericCommand>
 8002ed8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8002ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee4:	b672      	cpsid	i
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	b662      	cpsie	i
 8002ef4:	60fb      	str	r3, [r7, #12]
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	6978      	ldr	r0, [r7, #20]
 8002f12:	4798      	blx	r3
}
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000d4c 	.word	0x20000d4c

08002f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f857 	bl	8002fe0 <prvGetNextExpireTime>
 8002f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4619      	mov	r1, r3
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f803 	bl	8002f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002f3e:	f000 f8d5 	bl	80030ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f42:	e7f1      	b.n	8002f28 <prvTimerTask+0x8>

08002f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002f4e:	f7ff f925 	bl	800219c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f866 	bl	8003028 <prvSampleTimeNow>
 8002f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d130      	bne.n	8002fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <prvProcessTimerOrBlockTask+0x3c>
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d806      	bhi.n	8002f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002f72:	f7ff f921 	bl	80021b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ff83 	bl	8002e84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002f7e:	e024      	b.n	8002fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <prvProcessTimerOrBlockTask+0x90>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <prvProcessTimerOrBlockTask+0x50>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <prvProcessTimerOrBlockTask+0x52>
 8002f94:	2300      	movs	r3, #0
 8002f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <prvProcessTimerOrBlockTask+0x94>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fe fd4d 	bl	8001a44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002faa:	f7ff f905 	bl	80021b8 <xTaskResumeAll>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <prvProcessTimerOrBlockTask+0x98>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
}
 8002fc4:	e001      	b.n	8002fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002fc6:	f7ff f8f7 	bl	80021b8 <xTaskResumeAll>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000d50 	.word	0x20000d50
 8002fd8:	20000d54 	.word	0x20000d54
 8002fdc:	e000ed04 	.word	0xe000ed04

08002fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <prvGetNextExpireTime+0x44>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <prvGetNextExpireTime+0x16>
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	e000      	b.n	8002ff8 <prvGetNextExpireTime+0x18>
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <prvGetNextExpireTime+0x44>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e001      	b.n	8003014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003014:	68fb      	ldr	r3, [r7, #12]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000d4c 	.word	0x20000d4c

08003028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003030:	f7ff f962 	bl	80022f8 <xTaskGetTickCount>
 8003034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <prvSampleTimeNow+0x3c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d205      	bcs.n	800304c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003040:	f000 f93c 	bl	80032bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e002      	b.n	8003052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <prvSampleTimeNow+0x3c>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003058:	68fb      	ldr	r3, [r7, #12]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000d5c 	.word	0x20000d5c

08003068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	d812      	bhi.n	80030b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	429a      	cmp	r2, r3
 800309a:	d302      	bcc.n	80030a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800309c:	2301      	movs	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e01b      	b.n	80030da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <prvInsertTimerInActiveList+0x7c>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f7fd fdec 	bl	8000c8a <vListInsert>
 80030b2:	e012      	b.n	80030da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d206      	bcs.n	80030ca <prvInsertTimerInActiveList+0x62>
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80030c4:	2301      	movs	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e007      	b.n	80030da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <prvInsertTimerInActiveList+0x80>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7fd fdd8 	bl	8000c8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80030da:	697b      	ldr	r3, [r7, #20]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000d50 	.word	0x20000d50
 80030e8:	20000d4c 	.word	0x20000d4c

080030ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80030f2:	e0d0      	b.n	8003296 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	da1a      	bge.n	8003130 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	3304      	adds	r3, #4
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	b672      	cpsid	i
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	b662      	cpsie	i
 800311a:	61fb      	str	r3, [r7, #28]
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003126:	6850      	ldr	r0, [r2, #4]
 8003128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312a:	6892      	ldr	r2, [r2, #8]
 800312c:	4611      	mov	r1, r2
 800312e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f2c0 80af 	blt.w	8003296 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	3304      	adds	r3, #4
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fdd7 	bl	8000cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800314e:	463b      	mov	r3, r7
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff69 	bl	8003028 <prvSampleTimeNow>
 8003156:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b09      	cmp	r3, #9
 800315c:	f200 809a 	bhi.w	8003294 <prvProcessReceivedCommands+0x1a8>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <prvProcessReceivedCommands+0x7c>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	08003191 	.word	0x08003191
 800316c:	08003191 	.word	0x08003191
 8003170:	08003191 	.word	0x08003191
 8003174:	08003209 	.word	0x08003209
 8003178:	0800321d 	.word	0x0800321d
 800317c:	0800326b 	.word	0x0800326b
 8003180:	08003191 	.word	0x08003191
 8003184:	08003191 	.word	0x08003191
 8003188:	08003209 	.word	0x08003209
 800318c:	0800321d 	.word	0x0800321d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	b2da      	uxtb	r2, r3
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	18d1      	adds	r1, r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b0:	f7ff ff5a 	bl	8003068 <prvInsertTimerInActiveList>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d06d      	beq.n	8003296 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d062      	beq.n	8003296 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	441a      	add	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	2100      	movs	r1, #0
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f7ff fdff 	bl	8002de4 <xTimerGenericCommand>
 80031e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d153      	bne.n	8003296 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	b672      	cpsid	i
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	b662      	cpsie	i
 8003202:	61bb      	str	r3, [r7, #24]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800321a:	e03c      	b.n	8003296 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	b2da      	uxtb	r2, r3
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10c      	bne.n	8003256 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	b672      	cpsid	i
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	b662      	cpsie	i
 8003250:	617b      	str	r3, [r7, #20]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	18d1      	adds	r1, r2, r3
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003264:	f7ff ff00 	bl	8003068 <prvInsertTimerInActiveList>
					break;
 8003268:	e015      	b.n	8003296 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8003278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800327a:	f000 fbc5 	bl	8003a08 <vPortFree>
 800327e:	e00a      	b.n	8003296 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003292:	e000      	b.n	8003296 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8003294:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <prvProcessReceivedCommands+0x1cc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1d39      	adds	r1, r7, #4
 800329c:	2200      	movs	r2, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f884 	bl	80013ac <xQueueReceive>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f47f af24 	bne.w	80030f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3730      	adds	r7, #48	; 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000d54 	.word	0x20000d54

080032bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032c2:	e04a      	b.n	800335a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032c4:	4b2e      	ldr	r3, [pc, #184]	; (8003380 <prvSwitchTimerLists+0xc4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ce:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <prvSwitchTimerLists+0xc4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3304      	adds	r3, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fd0d 	bl	8000cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d030      	beq.n	800335a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90e      	bls.n	8003328 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <prvSwitchTimerLists+0xc4>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7fd fcb2 	bl	8000c8a <vListInsert>
 8003326:	e018      	b.n	800335a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003328:	2300      	movs	r3, #0
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2300      	movs	r3, #0
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	2100      	movs	r1, #0
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff fd56 	bl	8002de4 <xTimerGenericCommand>
 8003338:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	b672      	cpsid	i
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	b662      	cpsie	i
 8003354:	603b      	str	r3, [r7, #0]
}
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <prvSwitchTimerLists+0xc4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1af      	bne.n	80032c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <prvSwitchTimerLists+0xc4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <prvSwitchTimerLists+0xc8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <prvSwitchTimerLists+0xc4>)
 8003370:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <prvSwitchTimerLists+0xc8>)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000d4c 	.word	0x20000d4c
 8003384:	20000d50 	.word	0x20000d50

08003388 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800338e:	f000 f945 	bl	800361c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <prvCheckForValidListAndQueue+0x60>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d120      	bne.n	80033dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800339a:	4814      	ldr	r0, [pc, #80]	; (80033ec <prvCheckForValidListAndQueue+0x64>)
 800339c:	f7fd fc24 	bl	8000be8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80033a0:	4813      	ldr	r0, [pc, #76]	; (80033f0 <prvCheckForValidListAndQueue+0x68>)
 80033a2:	f7fd fc21 	bl	8000be8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <prvCheckForValidListAndQueue+0x6c>)
 80033a8:	4a10      	ldr	r2, [pc, #64]	; (80033ec <prvCheckForValidListAndQueue+0x64>)
 80033aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <prvCheckForValidListAndQueue+0x70>)
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <prvCheckForValidListAndQueue+0x68>)
 80033b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80033b2:	2300      	movs	r3, #0
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <prvCheckForValidListAndQueue+0x74>)
 80033b8:	4a11      	ldr	r2, [pc, #68]	; (8003400 <prvCheckForValidListAndQueue+0x78>)
 80033ba:	2110      	movs	r1, #16
 80033bc:	200a      	movs	r0, #10
 80033be:	f7fd fd31 	bl	8000e24 <xQueueGenericCreateStatic>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <prvCheckForValidListAndQueue+0x60>)
 80033c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <prvCheckForValidListAndQueue+0x60>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <prvCheckForValidListAndQueue+0x60>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <prvCheckForValidListAndQueue+0x7c>)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fb0a 	bl	80019f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033dc:	f000 f952 	bl	8003684 <vPortExitCritical>
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000d54 	.word	0x20000d54
 80033ec:	20000d24 	.word	0x20000d24
 80033f0:	20000d38 	.word	0x20000d38
 80033f4:	20000d4c 	.word	0x20000d4c
 80033f8:	20000d50 	.word	0x20000d50
 80033fc:	20000e00 	.word	0x20000e00
 8003400:	20000d60 	.word	0x20000d60
 8003404:	08004f3c 	.word	0x08004f3c

08003408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3b04      	subs	r3, #4
 8003418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3b04      	subs	r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b04      	subs	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <pxPortInitialiseStack+0x64>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b14      	subs	r3, #20
 8003442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b04      	subs	r3, #4
 800344e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f06f 0202 	mvn.w	r2, #2
 8003456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3b20      	subs	r3, #32
 800345c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	08003471 	.word	0x08003471

08003470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <prvTaskExitError+0x5c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d00c      	beq.n	800349e <prvTaskExitError+0x2e>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	b672      	cpsid	i
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	b662      	cpsie	i
 8003498:	60fb      	str	r3, [r7, #12]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <prvTaskExitError+0x2c>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	b672      	cpsid	i
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	b662      	cpsie	i
 80034b2:	60bb      	str	r3, [r7, #8]
}
 80034b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034b6:	bf00      	nop
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0fc      	beq.n	80034b8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	2000003c 	.word	0x2000003c

080034d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <pxCurrentTCBConst2>)
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	6808      	ldr	r0, [r1, #0]
 80034d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034da:	f380 8809 	msr	PSP, r0
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f380 8811 	msr	BASEPRI, r0
 80034ea:	4770      	bx	lr
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst2>:
 80034f0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034f8:	4808      	ldr	r0, [pc, #32]	; (800351c <prvPortStartFirstTask+0x24>)
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	6800      	ldr	r0, [r0, #0]
 80034fe:	f380 8808 	msr	MSP, r0
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f380 8814 	msr	CONTROL, r0
 800350a:	b662      	cpsie	i
 800350c:	b661      	cpsie	f
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	df00      	svc	0
 8003518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800351a:	bf00      	nop
 800351c:	e000ed08 	.word	0xe000ed08

08003520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <xPortStartScheduler+0xe4>)
 8003528:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4b2f      	ldr	r3, [pc, #188]	; (8003608 <xPortStartScheduler+0xe8>)
 800354c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800354e:	4b2f      	ldr	r3, [pc, #188]	; (800360c <xPortStartScheduler+0xec>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003554:	e009      	b.n	800356a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003556:	4b2d      	ldr	r3, [pc, #180]	; (800360c <xPortStartScheduler+0xec>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <xPortStartScheduler+0xec>)
 800355e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d0ef      	beq.n	8003556 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <xPortStartScheduler+0xec>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	d00c      	beq.n	800359c <xPortStartScheduler+0x7c>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	b672      	cpsid	i
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	b662      	cpsie	i
 8003596:	60bb      	str	r3, [r7, #8]
}
 8003598:	bf00      	nop
 800359a:	e7fe      	b.n	800359a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <xPortStartScheduler+0xec>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <xPortStartScheduler+0xec>)
 80035a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <xPortStartScheduler+0xec>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <xPortStartScheduler+0xec>)
 80035b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <xPortStartScheduler+0xf0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a14      	ldr	r2, [pc, #80]	; (8003610 <xPortStartScheduler+0xf0>)
 80035c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <xPortStartScheduler+0xf0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a11      	ldr	r2, [pc, #68]	; (8003610 <xPortStartScheduler+0xf0>)
 80035cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035d2:	f000 f8dd 	bl	8003790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <xPortStartScheduler+0xf4>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035dc:	f000 f8fc 	bl	80037d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <xPortStartScheduler+0xf8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <xPortStartScheduler+0xf8>)
 80035e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035ec:	f7ff ff84 	bl	80034f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035f0:	f7fe ff4e 	bl	8002490 <vTaskSwitchContext>
	prvTaskExitError();
 80035f4:	f7ff ff3c 	bl	8003470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	e000e400 	.word	0xe000e400
 8003608:	20000e50 	.word	0x20000e50
 800360c:	20000e54 	.word	0x20000e54
 8003610:	e000ed20 	.word	0xe000ed20
 8003614:	2000003c 	.word	0x2000003c
 8003618:	e000ef34 	.word	0xe000ef34

0800361c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	b672      	cpsid	i
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	b662      	cpsie	i
 8003636:	607b      	str	r3, [r7, #4]
}
 8003638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <vPortEnterCritical+0x60>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	4a0e      	ldr	r2, [pc, #56]	; (800367c <vPortEnterCritical+0x60>)
 8003642:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <vPortEnterCritical+0x60>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d111      	bne.n	8003670 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <vPortEnterCritical+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <vPortEnterCritical+0x54>
	__asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	b672      	cpsid	i
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	b662      	cpsie	i
 800366a:	603b      	str	r3, [r7, #0]
}
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <vPortEnterCritical+0x52>
	}
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	2000003c 	.word	0x2000003c
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <vPortExitCritical+0x54>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <vPortExitCritical+0x28>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	b672      	cpsid	i
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	b662      	cpsie	i
 80036a6:	607b      	str	r3, [r7, #4]
}
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <vPortExitCritical+0x54>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <vPortExitCritical+0x54>)
 80036b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <vPortExitCritical+0x54>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <vPortExitCritical+0x46>
 80036be:	2300      	movs	r3, #0
 80036c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f383 8811 	msr	BASEPRI, r3
}
 80036c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	2000003c 	.word	0x2000003c
 80036dc:	00000000 	.word	0x00000000

080036e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036e0:	f3ef 8009 	mrs	r0, PSP
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <pxCurrentTCBConst>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f01e 0f10 	tst.w	lr, #16
 80036f0:	bf08      	it	eq
 80036f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fa:	6010      	str	r0, [r2, #0]
 80036fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003704:	b672      	cpsid	i
 8003706:	f380 8811 	msr	BASEPRI, r0
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	b662      	cpsie	i
 8003714:	f7fe febc 	bl	8002490 <vTaskSwitchContext>
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f380 8811 	msr	BASEPRI, r0
 8003720:	bc09      	pop	{r0, r3}
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	6808      	ldr	r0, [r1, #0]
 8003726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	f01e 0f10 	tst.w	lr, #16
 800372e:	bf08      	it	eq
 8003730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003734:	f380 8809 	msr	PSP, r0
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <pxCurrentTCBConst>:
 8003740:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop

08003748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	b672      	cpsid	i
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	b662      	cpsie	i
 8003762:	607b      	str	r3, [r7, #4]
}
 8003764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003766:	f7fe fdd7 	bl	8002318 <xTaskIncrementTick>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <xPortSysTickHandler+0x44>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	2300      	movs	r3, #0
 800377a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f383 8811 	msr	BASEPRI, r3
}
 8003782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	e000ed04 	.word	0xe000ed04

08003790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <vPortSetupTimerInterrupt+0x34>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <vPortSetupTimerInterrupt+0x38>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <vPortSetupTimerInterrupt+0x3c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <vPortSetupTimerInterrupt+0x40>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <vPortSetupTimerInterrupt+0x44>)
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037b2:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <vPortSetupTimerInterrupt+0x34>)
 80037b4:	2207      	movs	r2, #7
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010
 80037c8:	e000e018 	.word	0xe000e018
 80037cc:	20000034 	.word	0x20000034
 80037d0:	10624dd3 	.word	0x10624dd3
 80037d4:	e000e014 	.word	0xe000e014

080037d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037e8 <vPortEnableVFP+0x10>
 80037dc:	6801      	ldr	r1, [r0, #0]
 80037de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037e2:	6001      	str	r1, [r0, #0]
 80037e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037e6:	bf00      	nop
 80037e8:	e000ed88 	.word	0xe000ed88

080037ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80037f2:	f3ef 8305 	mrs	r3, IPSR
 80037f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b0f      	cmp	r3, #15
 80037fc:	d916      	bls.n	800382c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <vPortValidateInterruptPriority+0x78>)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003808:	4b17      	ldr	r3, [pc, #92]	; (8003868 <vPortValidateInterruptPriority+0x7c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	7afa      	ldrb	r2, [r7, #11]
 800380e:	429a      	cmp	r2, r3
 8003810:	d20c      	bcs.n	800382c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	b672      	cpsid	i
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	b662      	cpsie	i
 8003826:	607b      	str	r3, [r7, #4]
}
 8003828:	bf00      	nop
 800382a:	e7fe      	b.n	800382a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <vPortValidateInterruptPriority+0x80>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <vPortValidateInterruptPriority+0x84>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d90c      	bls.n	8003856 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	b672      	cpsid	i
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	b662      	cpsie	i
 8003850:	603b      	str	r3, [r7, #0]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <vPortValidateInterruptPriority+0x68>
	}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	e000e3f0 	.word	0xe000e3f0
 8003868:	20000e50 	.word	0x20000e50
 800386c:	e000ed0c 	.word	0xe000ed0c
 8003870:	20000e54 	.word	0x20000e54

08003874 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	; 0x28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003880:	f7fe fc8c 	bl	800219c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003884:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <pvPortMalloc+0x180>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800388c:	f000 f91a 	bl	8003ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <pvPortMalloc+0x184>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 8092 	bne.w	80039c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01f      	beq.n	80038e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80038a4:	2208      	movs	r2, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f023 0307 	bic.w	r3, r3, #7
 80038bc:	3308      	adds	r3, #8
 80038be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <pvPortMalloc+0x70>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	b672      	cpsid	i
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	b662      	cpsie	i
 80038de:	617b      	str	r3, [r7, #20]
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d06b      	beq.n	80039c2 <pvPortMalloc+0x14e>
 80038ea:	4b44      	ldr	r3, [pc, #272]	; (80039fc <pvPortMalloc+0x188>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d866      	bhi.n	80039c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038f4:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <pvPortMalloc+0x18c>)
 80038f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <pvPortMalloc+0x18c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038fe:	e004      	b.n	800390a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d903      	bls.n	800391c <pvPortMalloc+0xa8>
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f1      	bne.n	8003900 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800391c:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <pvPortMalloc+0x180>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	429a      	cmp	r2, r3
 8003924:	d04d      	beq.n	80039c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2208      	movs	r2, #8
 800392c:	4413      	add	r3, r2
 800392e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	2308      	movs	r3, #8
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	429a      	cmp	r2, r3
 8003946:	d921      	bls.n	800398c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <pvPortMalloc+0x100>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	b672      	cpsid	i
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	b662      	cpsie	i
 800396e:	613b      	str	r3, [r7, #16]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad2      	subs	r2, r2, r3
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003986:	69b8      	ldr	r0, [r7, #24]
 8003988:	f000 f8fe 	bl	8003b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <pvPortMalloc+0x188>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	4a19      	ldr	r2, [pc, #100]	; (80039fc <pvPortMalloc+0x188>)
 8003998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <pvPortMalloc+0x188>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <pvPortMalloc+0x190>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d203      	bcs.n	80039ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <pvPortMalloc+0x188>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <pvPortMalloc+0x190>)
 80039ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <pvPortMalloc+0x184>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039c2:	f7fe fbf9 	bl	80021b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <pvPortMalloc+0x176>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	b672      	cpsid	i
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	b662      	cpsie	i
 80039e4:	60fb      	str	r3, [r7, #12]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <pvPortMalloc+0x174>
	return pvReturn;
 80039ea:	69fb      	ldr	r3, [r7, #28]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3728      	adds	r7, #40	; 0x28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20004a60 	.word	0x20004a60
 80039f8:	20004a6c 	.word	0x20004a6c
 80039fc:	20004a64 	.word	0x20004a64
 8003a00:	20004a58 	.word	0x20004a58
 8003a04:	20004a68 	.word	0x20004a68

08003a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d04c      	beq.n	8003ab4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	425b      	negs	r3, r3
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4413      	add	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	4b23      	ldr	r3, [pc, #140]	; (8003abc <vPortFree+0xb4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <vPortFree+0x48>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	b672      	cpsid	i
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	b662      	cpsie	i
 8003a4a:	60fb      	str	r3, [r7, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <vPortFree+0x6a>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	b672      	cpsid	i
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	b662      	cpsie	i
 8003a6c:	60bb      	str	r3, [r7, #8]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <vPortFree+0xb4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d019      	beq.n	8003ab4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d115      	bne.n	8003ab4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <vPortFree+0xb4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	401a      	ands	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a98:	f7fe fb80 	bl	800219c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <vPortFree+0xb8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4a06      	ldr	r2, [pc, #24]	; (8003ac0 <vPortFree+0xb8>)
 8003aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aaa:	6938      	ldr	r0, [r7, #16]
 8003aac:	f000 f86c 	bl	8003b88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ab0:	f7fe fb82 	bl	80021b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ab4:	bf00      	nop
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20004a6c 	.word	0x20004a6c
 8003ac0:	20004a64 	.word	0x20004a64

08003ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003aca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <prvHeapInit+0xac>)
 8003ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3307      	adds	r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0307 	bic.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <prvHeapInit+0xac>)
 8003af4:	4413      	add	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003afc:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <prvHeapInit+0xb0>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <prvHeapInit+0xb0>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b10:	2208      	movs	r2, #8
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <prvHeapInit+0xb4>)
 8003b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <prvHeapInit+0xb4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <prvHeapInit+0xb4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	1ad2      	subs	r2, r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <prvHeapInit+0xb4>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <prvHeapInit+0xb8>)
 8003b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <prvHeapInit+0xbc>)
 8003b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <prvHeapInit+0xc0>)
 8003b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b62:	601a      	str	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	20000e58 	.word	0x20000e58
 8003b74:	20004a58 	.word	0x20004a58
 8003b78:	20004a60 	.word	0x20004a60
 8003b7c:	20004a68 	.word	0x20004a68
 8003b80:	20004a64 	.word	0x20004a64
 8003b84:	20004a6c 	.word	0x20004a6c

08003b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <prvInsertBlockIntoFreeList+0xac>)
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e002      	b.n	8003b9c <prvInsertBlockIntoFreeList+0x14>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d8f7      	bhi.n	8003b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d108      	bne.n	8003bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	441a      	add	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d118      	bne.n	8003c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <prvInsertBlockIntoFreeList+0xb0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d00d      	beq.n	8003c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e008      	b.n	8003c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <prvInsertBlockIntoFreeList+0xb0>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e003      	b.n	8003c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d002      	beq.n	8003c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20004a58 	.word	0x20004a58
 8003c38:	20004a60 	.word	0x20004a60

08003c3c <rand>:
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <rand+0x5c>)
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	681c      	ldr	r4, [r3, #0]
 8003c42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c44:	b9b3      	cbnz	r3, 8003c74 <rand+0x38>
 8003c46:	2018      	movs	r0, #24
 8003c48:	f000 fb0c 	bl	8004264 <malloc>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6320      	str	r0, [r4, #48]	; 0x30
 8003c50:	b920      	cbnz	r0, 8003c5c <rand+0x20>
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <rand+0x60>)
 8003c54:	4812      	ldr	r0, [pc, #72]	; (8003ca0 <rand+0x64>)
 8003c56:	2152      	movs	r1, #82	; 0x52
 8003c58:	f000 fa9a 	bl	8004190 <__assert_func>
 8003c5c:	4911      	ldr	r1, [pc, #68]	; (8003ca4 <rand+0x68>)
 8003c5e:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <rand+0x6c>)
 8003c60:	e9c0 1300 	strd	r1, r3, [r0]
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <rand+0x70>)
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	230b      	movs	r3, #11
 8003c6a:	8183      	strh	r3, [r0, #12]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	2001      	movs	r0, #1
 8003c70:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c74:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c76:	480e      	ldr	r0, [pc, #56]	; (8003cb0 <rand+0x74>)
 8003c78:	690b      	ldr	r3, [r1, #16]
 8003c7a:	694c      	ldr	r4, [r1, #20]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <rand+0x78>)
 8003c7e:	4358      	muls	r0, r3
 8003c80:	fb02 0004 	mla	r0, r2, r4, r0
 8003c84:	fba3 3202 	umull	r3, r2, r3, r2
 8003c88:	3301      	adds	r3, #1
 8003c8a:	eb40 0002 	adc.w	r0, r0, r2
 8003c8e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003c92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c96:	bd10      	pop	{r4, pc}
 8003c98:	20000098 	.word	0x20000098
 8003c9c:	08004f41 	.word	0x08004f41
 8003ca0:	08004f58 	.word	0x08004f58
 8003ca4:	abcd330e 	.word	0xabcd330e
 8003ca8:	e66d1234 	.word	0xe66d1234
 8003cac:	0005deec 	.word	0x0005deec
 8003cb0:	5851f42d 	.word	0x5851f42d
 8003cb4:	4c957f2d 	.word	0x4c957f2d

08003cb8 <std>:
 8003cb8:	2300      	movs	r3, #0
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8003cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cc6:	6083      	str	r3, [r0, #8]
 8003cc8:	8181      	strh	r1, [r0, #12]
 8003cca:	6643      	str	r3, [r0, #100]	; 0x64
 8003ccc:	81c2      	strh	r2, [r0, #14]
 8003cce:	6183      	str	r3, [r0, #24]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	305c      	adds	r0, #92	; 0x5c
 8003cd6:	f000 f9d3 	bl	8004080 <memset>
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <std+0x38>)
 8003cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <std+0x3c>)
 8003ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <std+0x40>)
 8003ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <std+0x44>)
 8003ce8:	6224      	str	r4, [r4, #32]
 8003cea:	6323      	str	r3, [r4, #48]	; 0x30
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	bf00      	nop
 8003cf0:	08003ed1 	.word	0x08003ed1
 8003cf4:	08003ef3 	.word	0x08003ef3
 8003cf8:	08003f2b 	.word	0x08003f2b
 8003cfc:	08003f4f 	.word	0x08003f4f

08003d00 <stdio_exit_handler>:
 8003d00:	4a02      	ldr	r2, [pc, #8]	; (8003d0c <stdio_exit_handler+0xc>)
 8003d02:	4903      	ldr	r1, [pc, #12]	; (8003d10 <stdio_exit_handler+0x10>)
 8003d04:	4803      	ldr	r0, [pc, #12]	; (8003d14 <stdio_exit_handler+0x14>)
 8003d06:	f000 b869 	b.w	8003ddc <_fwalk_sglue>
 8003d0a:	bf00      	nop
 8003d0c:	20000040 	.word	0x20000040
 8003d10:	08004a81 	.word	0x08004a81
 8003d14:	2000004c 	.word	0x2000004c

08003d18 <cleanup_stdio>:
 8003d18:	6841      	ldr	r1, [r0, #4]
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <cleanup_stdio+0x34>)
 8003d1c:	4299      	cmp	r1, r3
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	4604      	mov	r4, r0
 8003d22:	d001      	beq.n	8003d28 <cleanup_stdio+0x10>
 8003d24:	f000 feac 	bl	8004a80 <_fflush_r>
 8003d28:	68a1      	ldr	r1, [r4, #8]
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <cleanup_stdio+0x38>)
 8003d2c:	4299      	cmp	r1, r3
 8003d2e:	d002      	beq.n	8003d36 <cleanup_stdio+0x1e>
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 fea5 	bl	8004a80 <_fflush_r>
 8003d36:	68e1      	ldr	r1, [r4, #12]
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <cleanup_stdio+0x3c>)
 8003d3a:	4299      	cmp	r1, r3
 8003d3c:	d004      	beq.n	8003d48 <cleanup_stdio+0x30>
 8003d3e:	4620      	mov	r0, r4
 8003d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d44:	f000 be9c 	b.w	8004a80 <_fflush_r>
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20004a70 	.word	0x20004a70
 8003d50:	20004ad8 	.word	0x20004ad8
 8003d54:	20004b40 	.word	0x20004b40

08003d58 <global_stdio_init.part.0>:
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <global_stdio_init.part.0+0x30>)
 8003d5c:	4c0b      	ldr	r4, [pc, #44]	; (8003d8c <global_stdio_init.part.0+0x34>)
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <global_stdio_init.part.0+0x38>)
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	4620      	mov	r0, r4
 8003d64:	2200      	movs	r2, #0
 8003d66:	2104      	movs	r1, #4
 8003d68:	f7ff ffa6 	bl	8003cb8 <std>
 8003d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d70:	2201      	movs	r2, #1
 8003d72:	2109      	movs	r1, #9
 8003d74:	f7ff ffa0 	bl	8003cb8 <std>
 8003d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d82:	2112      	movs	r1, #18
 8003d84:	f7ff bf98 	b.w	8003cb8 <std>
 8003d88:	20004ba8 	.word	0x20004ba8
 8003d8c:	20004a70 	.word	0x20004a70
 8003d90:	08003d01 	.word	0x08003d01

08003d94 <__sfp_lock_acquire>:
 8003d94:	4801      	ldr	r0, [pc, #4]	; (8003d9c <__sfp_lock_acquire+0x8>)
 8003d96:	f000 b9eb 	b.w	8004170 <__retarget_lock_acquire_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	20004bb1 	.word	0x20004bb1

08003da0 <__sfp_lock_release>:
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <__sfp_lock_release+0x8>)
 8003da2:	f000 b9e6 	b.w	8004172 <__retarget_lock_release_recursive>
 8003da6:	bf00      	nop
 8003da8:	20004bb1 	.word	0x20004bb1

08003dac <__sinit>:
 8003dac:	b510      	push	{r4, lr}
 8003dae:	4604      	mov	r4, r0
 8003db0:	f7ff fff0 	bl	8003d94 <__sfp_lock_acquire>
 8003db4:	6a23      	ldr	r3, [r4, #32]
 8003db6:	b11b      	cbz	r3, 8003dc0 <__sinit+0x14>
 8003db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dbc:	f7ff bff0 	b.w	8003da0 <__sfp_lock_release>
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <__sinit+0x28>)
 8003dc2:	6223      	str	r3, [r4, #32]
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__sinit+0x2c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f5      	bne.n	8003db8 <__sinit+0xc>
 8003dcc:	f7ff ffc4 	bl	8003d58 <global_stdio_init.part.0>
 8003dd0:	e7f2      	b.n	8003db8 <__sinit+0xc>
 8003dd2:	bf00      	nop
 8003dd4:	08003d19 	.word	0x08003d19
 8003dd8:	20004ba8 	.word	0x20004ba8

08003ddc <_fwalk_sglue>:
 8003ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de0:	4607      	mov	r7, r0
 8003de2:	4688      	mov	r8, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	2600      	movs	r6, #0
 8003de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dec:	f1b9 0901 	subs.w	r9, r9, #1
 8003df0:	d505      	bpl.n	8003dfe <_fwalk_sglue+0x22>
 8003df2:	6824      	ldr	r4, [r4, #0]
 8003df4:	2c00      	cmp	r4, #0
 8003df6:	d1f7      	bne.n	8003de8 <_fwalk_sglue+0xc>
 8003df8:	4630      	mov	r0, r6
 8003dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d907      	bls.n	8003e14 <_fwalk_sglue+0x38>
 8003e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	d003      	beq.n	8003e14 <_fwalk_sglue+0x38>
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4638      	mov	r0, r7
 8003e10:	47c0      	blx	r8
 8003e12:	4306      	orrs	r6, r0
 8003e14:	3568      	adds	r5, #104	; 0x68
 8003e16:	e7e9      	b.n	8003dec <_fwalk_sglue+0x10>

08003e18 <_puts_r>:
 8003e18:	6a03      	ldr	r3, [r0, #32]
 8003e1a:	b570      	push	{r4, r5, r6, lr}
 8003e1c:	6884      	ldr	r4, [r0, #8]
 8003e1e:	4605      	mov	r5, r0
 8003e20:	460e      	mov	r6, r1
 8003e22:	b90b      	cbnz	r3, 8003e28 <_puts_r+0x10>
 8003e24:	f7ff ffc2 	bl	8003dac <__sinit>
 8003e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2a:	07db      	lsls	r3, r3, #31
 8003e2c:	d405      	bmi.n	8003e3a <_puts_r+0x22>
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	0598      	lsls	r0, r3, #22
 8003e32:	d402      	bmi.n	8003e3a <_puts_r+0x22>
 8003e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e36:	f000 f99b 	bl	8004170 <__retarget_lock_acquire_recursive>
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	0719      	lsls	r1, r3, #28
 8003e3e:	d513      	bpl.n	8003e68 <_puts_r+0x50>
 8003e40:	6923      	ldr	r3, [r4, #16]
 8003e42:	b18b      	cbz	r3, 8003e68 <_puts_r+0x50>
 8003e44:	3e01      	subs	r6, #1
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	60a3      	str	r3, [r4, #8]
 8003e50:	b9e9      	cbnz	r1, 8003e8e <_puts_r+0x76>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	da2e      	bge.n	8003eb4 <_puts_r+0x9c>
 8003e56:	4622      	mov	r2, r4
 8003e58:	210a      	movs	r1, #10
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f000 f87b 	bl	8003f56 <__swbuf_r>
 8003e60:	3001      	adds	r0, #1
 8003e62:	d007      	beq.n	8003e74 <_puts_r+0x5c>
 8003e64:	250a      	movs	r5, #10
 8003e66:	e007      	b.n	8003e78 <_puts_r+0x60>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f000 f8b0 	bl	8003fd0 <__swsetup_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d0e7      	beq.n	8003e44 <_puts_r+0x2c>
 8003e74:	f04f 35ff 	mov.w	r5, #4294967295
 8003e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e7a:	07da      	lsls	r2, r3, #31
 8003e7c:	d405      	bmi.n	8003e8a <_puts_r+0x72>
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	059b      	lsls	r3, r3, #22
 8003e82:	d402      	bmi.n	8003e8a <_puts_r+0x72>
 8003e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e86:	f000 f974 	bl	8004172 <__retarget_lock_release_recursive>
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da04      	bge.n	8003e9c <_puts_r+0x84>
 8003e92:	69a2      	ldr	r2, [r4, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dc06      	bgt.n	8003ea6 <_puts_r+0x8e>
 8003e98:	290a      	cmp	r1, #10
 8003e9a:	d004      	beq.n	8003ea6 <_puts_r+0x8e>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	6022      	str	r2, [r4, #0]
 8003ea2:	7019      	strb	r1, [r3, #0]
 8003ea4:	e7cf      	b.n	8003e46 <_puts_r+0x2e>
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f854 	bl	8003f56 <__swbuf_r>
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d1c9      	bne.n	8003e46 <_puts_r+0x2e>
 8003eb2:	e7df      	b.n	8003e74 <_puts_r+0x5c>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	250a      	movs	r5, #10
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	6022      	str	r2, [r4, #0]
 8003ebc:	701d      	strb	r5, [r3, #0]
 8003ebe:	e7db      	b.n	8003e78 <_puts_r+0x60>

08003ec0 <puts>:
 8003ec0:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <puts+0xc>)
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	f7ff bfa7 	b.w	8003e18 <_puts_r>
 8003eca:	bf00      	nop
 8003ecc:	20000098 	.word	0x20000098

08003ed0 <__sread>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed8:	f000 f8fc 	bl	80040d4 <_read_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	bfab      	itete	ge
 8003ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee4:	181b      	addge	r3, r3, r0
 8003ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eea:	bfac      	ite	ge
 8003eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eee:	81a3      	strhlt	r3, [r4, #12]
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <__swrite>:
 8003ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef6:	461f      	mov	r7, r3
 8003ef8:	898b      	ldrh	r3, [r1, #12]
 8003efa:	05db      	lsls	r3, r3, #23
 8003efc:	4605      	mov	r5, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	4616      	mov	r6, r2
 8003f02:	d505      	bpl.n	8003f10 <__swrite+0x1e>
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	2302      	movs	r3, #2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f000 f8d0 	bl	80040b0 <_lseek_r>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f1a:	81a3      	strh	r3, [r4, #12]
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	463b      	mov	r3, r7
 8003f20:	4628      	mov	r0, r5
 8003f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	f000 b8e7 	b.w	80040f8 <_write_r>

08003f2a <__sseek>:
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f32:	f000 f8bd 	bl	80040b0 <_lseek_r>
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	bf15      	itete	ne
 8003f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f46:	81a3      	strheq	r3, [r4, #12]
 8003f48:	bf18      	it	ne
 8003f4a:	81a3      	strhne	r3, [r4, #12]
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <__sclose>:
 8003f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f52:	f000 b89d 	b.w	8004090 <_close_r>

08003f56 <__swbuf_r>:
 8003f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f58:	460e      	mov	r6, r1
 8003f5a:	4614      	mov	r4, r2
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	b118      	cbz	r0, 8003f68 <__swbuf_r+0x12>
 8003f60:	6a03      	ldr	r3, [r0, #32]
 8003f62:	b90b      	cbnz	r3, 8003f68 <__swbuf_r+0x12>
 8003f64:	f7ff ff22 	bl	8003dac <__sinit>
 8003f68:	69a3      	ldr	r3, [r4, #24]
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	071a      	lsls	r2, r3, #28
 8003f70:	d525      	bpl.n	8003fbe <__swbuf_r+0x68>
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	b31b      	cbz	r3, 8003fbe <__swbuf_r+0x68>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	6922      	ldr	r2, [r4, #16]
 8003f7a:	1a98      	subs	r0, r3, r2
 8003f7c:	6963      	ldr	r3, [r4, #20]
 8003f7e:	b2f6      	uxtb	r6, r6
 8003f80:	4283      	cmp	r3, r0
 8003f82:	4637      	mov	r7, r6
 8003f84:	dc04      	bgt.n	8003f90 <__swbuf_r+0x3a>
 8003f86:	4621      	mov	r1, r4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 fd79 	bl	8004a80 <_fflush_r>
 8003f8e:	b9e0      	cbnz	r0, 8003fca <__swbuf_r+0x74>
 8003f90:	68a3      	ldr	r3, [r4, #8]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	60a3      	str	r3, [r4, #8]
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	6022      	str	r2, [r4, #0]
 8003f9c:	701e      	strb	r6, [r3, #0]
 8003f9e:	6962      	ldr	r2, [r4, #20]
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d004      	beq.n	8003fb0 <__swbuf_r+0x5a>
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	07db      	lsls	r3, r3, #31
 8003faa:	d506      	bpl.n	8003fba <__swbuf_r+0x64>
 8003fac:	2e0a      	cmp	r6, #10
 8003fae:	d104      	bne.n	8003fba <__swbuf_r+0x64>
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 fd64 	bl	8004a80 <_fflush_r>
 8003fb8:	b938      	cbnz	r0, 8003fca <__swbuf_r+0x74>
 8003fba:	4638      	mov	r0, r7
 8003fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f000 f805 	bl	8003fd0 <__swsetup_r>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d0d5      	beq.n	8003f76 <__swbuf_r+0x20>
 8003fca:	f04f 37ff 	mov.w	r7, #4294967295
 8003fce:	e7f4      	b.n	8003fba <__swbuf_r+0x64>

08003fd0 <__swsetup_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	; (800407c <__swsetup_r+0xac>)
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	460c      	mov	r4, r1
 8003fda:	b118      	cbz	r0, 8003fe4 <__swsetup_r+0x14>
 8003fdc:	6a03      	ldr	r3, [r0, #32]
 8003fde:	b90b      	cbnz	r3, 8003fe4 <__swsetup_r+0x14>
 8003fe0:	f7ff fee4 	bl	8003dac <__sinit>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fea:	0718      	lsls	r0, r3, #28
 8003fec:	d422      	bmi.n	8004034 <__swsetup_r+0x64>
 8003fee:	06d9      	lsls	r1, r3, #27
 8003ff0:	d407      	bmi.n	8004002 <__swsetup_r+0x32>
 8003ff2:	2309      	movs	r3, #9
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e034      	b.n	800406c <__swsetup_r+0x9c>
 8004002:	0758      	lsls	r0, r3, #29
 8004004:	d512      	bpl.n	800402c <__swsetup_r+0x5c>
 8004006:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004008:	b141      	cbz	r1, 800401c <__swsetup_r+0x4c>
 800400a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800400e:	4299      	cmp	r1, r3
 8004010:	d002      	beq.n	8004018 <__swsetup_r+0x48>
 8004012:	4628      	mov	r0, r5
 8004014:	f000 f8da 	bl	80041cc <_free_r>
 8004018:	2300      	movs	r3, #0
 800401a:	6363      	str	r3, [r4, #52]	; 0x34
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004022:	81a3      	strh	r3, [r4, #12]
 8004024:	2300      	movs	r3, #0
 8004026:	6063      	str	r3, [r4, #4]
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	6023      	str	r3, [r4, #0]
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f043 0308 	orr.w	r3, r3, #8
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	b94b      	cbnz	r3, 800404c <__swsetup_r+0x7c>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800403e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004042:	d003      	beq.n	800404c <__swsetup_r+0x7c>
 8004044:	4621      	mov	r1, r4
 8004046:	4628      	mov	r0, r5
 8004048:	f000 fd7a 	bl	8004b40 <__smakebuf_r>
 800404c:	89a0      	ldrh	r0, [r4, #12]
 800404e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004052:	f010 0301 	ands.w	r3, r0, #1
 8004056:	d00a      	beq.n	800406e <__swsetup_r+0x9e>
 8004058:	2300      	movs	r3, #0
 800405a:	60a3      	str	r3, [r4, #8]
 800405c:	6963      	ldr	r3, [r4, #20]
 800405e:	425b      	negs	r3, r3
 8004060:	61a3      	str	r3, [r4, #24]
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	b943      	cbnz	r3, 8004078 <__swsetup_r+0xa8>
 8004066:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800406a:	d1c4      	bne.n	8003ff6 <__swsetup_r+0x26>
 800406c:	bd38      	pop	{r3, r4, r5, pc}
 800406e:	0781      	lsls	r1, r0, #30
 8004070:	bf58      	it	pl
 8004072:	6963      	ldrpl	r3, [r4, #20]
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	e7f4      	b.n	8004062 <__swsetup_r+0x92>
 8004078:	2000      	movs	r0, #0
 800407a:	e7f7      	b.n	800406c <__swsetup_r+0x9c>
 800407c:	20000098 	.word	0x20000098

08004080 <memset>:
 8004080:	4402      	add	r2, r0
 8004082:	4603      	mov	r3, r0
 8004084:	4293      	cmp	r3, r2
 8004086:	d100      	bne.n	800408a <memset+0xa>
 8004088:	4770      	bx	lr
 800408a:	f803 1b01 	strb.w	r1, [r3], #1
 800408e:	e7f9      	b.n	8004084 <memset+0x4>

08004090 <_close_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4d06      	ldr	r5, [pc, #24]	; (80040ac <_close_r+0x1c>)
 8004094:	2300      	movs	r3, #0
 8004096:	4604      	mov	r4, r0
 8004098:	4608      	mov	r0, r1
 800409a:	602b      	str	r3, [r5, #0]
 800409c:	f7fc fcb6 	bl	8000a0c <_close>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_close_r+0x1a>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_close_r+0x1a>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	20004bac 	.word	0x20004bac

080040b0 <_lseek_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d07      	ldr	r5, [pc, #28]	; (80040d0 <_lseek_r+0x20>)
 80040b4:	4604      	mov	r4, r0
 80040b6:	4608      	mov	r0, r1
 80040b8:	4611      	mov	r1, r2
 80040ba:	2200      	movs	r2, #0
 80040bc:	602a      	str	r2, [r5, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f7fc fccb 	bl	8000a5a <_lseek>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_lseek_r+0x1e>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_lseek_r+0x1e>
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	20004bac 	.word	0x20004bac

080040d4 <_read_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4d07      	ldr	r5, [pc, #28]	; (80040f4 <_read_r+0x20>)
 80040d8:	4604      	mov	r4, r0
 80040da:	4608      	mov	r0, r1
 80040dc:	4611      	mov	r1, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	602a      	str	r2, [r5, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7fc fc59 	bl	800099a <_read>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d102      	bne.n	80040f2 <_read_r+0x1e>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	b103      	cbz	r3, 80040f2 <_read_r+0x1e>
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	20004bac 	.word	0x20004bac

080040f8 <_write_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4d07      	ldr	r5, [pc, #28]	; (8004118 <_write_r+0x20>)
 80040fc:	4604      	mov	r4, r0
 80040fe:	4608      	mov	r0, r1
 8004100:	4611      	mov	r1, r2
 8004102:	2200      	movs	r2, #0
 8004104:	602a      	str	r2, [r5, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f7fc fc64 	bl	80009d4 <_write>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_write_r+0x1e>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_write_r+0x1e>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20004bac 	.word	0x20004bac

0800411c <__errno>:
 800411c:	4b01      	ldr	r3, [pc, #4]	; (8004124 <__errno+0x8>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000098 	.word	0x20000098

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4d0d      	ldr	r5, [pc, #52]	; (8004160 <__libc_init_array+0x38>)
 800412c:	4c0d      	ldr	r4, [pc, #52]	; (8004164 <__libc_init_array+0x3c>)
 800412e:	1b64      	subs	r4, r4, r5
 8004130:	10a4      	asrs	r4, r4, #2
 8004132:	2600      	movs	r6, #0
 8004134:	42a6      	cmp	r6, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	4d0b      	ldr	r5, [pc, #44]	; (8004168 <__libc_init_array+0x40>)
 800413a:	4c0c      	ldr	r4, [pc, #48]	; (800416c <__libc_init_array+0x44>)
 800413c:	f000 fdba 	bl	8004cb4 <_init>
 8004140:	1b64      	subs	r4, r4, r5
 8004142:	10a4      	asrs	r4, r4, #2
 8004144:	2600      	movs	r6, #0
 8004146:	42a6      	cmp	r6, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004150:	4798      	blx	r3
 8004152:	3601      	adds	r6, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	f855 3b04 	ldr.w	r3, [r5], #4
 800415a:	4798      	blx	r3
 800415c:	3601      	adds	r6, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	08005020 	.word	0x08005020
 8004164:	08005020 	.word	0x08005020
 8004168:	08005020 	.word	0x08005020
 800416c:	08005024 	.word	0x08005024

08004170 <__retarget_lock_acquire_recursive>:
 8004170:	4770      	bx	lr

08004172 <__retarget_lock_release_recursive>:
 8004172:	4770      	bx	lr

08004174 <memcpy>:
 8004174:	440a      	add	r2, r1
 8004176:	4291      	cmp	r1, r2
 8004178:	f100 33ff 	add.w	r3, r0, #4294967295
 800417c:	d100      	bne.n	8004180 <memcpy+0xc>
 800417e:	4770      	bx	lr
 8004180:	b510      	push	{r4, lr}
 8004182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800418a:	4291      	cmp	r1, r2
 800418c:	d1f9      	bne.n	8004182 <memcpy+0xe>
 800418e:	bd10      	pop	{r4, pc}

08004190 <__assert_func>:
 8004190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004192:	4614      	mov	r4, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <__assert_func+0x2c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4605      	mov	r5, r0
 800419c:	68d8      	ldr	r0, [r3, #12]
 800419e:	b14c      	cbz	r4, 80041b4 <__assert_func+0x24>
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <__assert_func+0x30>)
 80041a2:	9100      	str	r1, [sp, #0]
 80041a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041a8:	4906      	ldr	r1, [pc, #24]	; (80041c4 <__assert_func+0x34>)
 80041aa:	462b      	mov	r3, r5
 80041ac:	f000 fc90 	bl	8004ad0 <fiprintf>
 80041b0:	f000 fd34 	bl	8004c1c <abort>
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <__assert_func+0x38>)
 80041b6:	461c      	mov	r4, r3
 80041b8:	e7f3      	b.n	80041a2 <__assert_func+0x12>
 80041ba:	bf00      	nop
 80041bc:	20000098 	.word	0x20000098
 80041c0:	08004fb0 	.word	0x08004fb0
 80041c4:	08004fbd 	.word	0x08004fbd
 80041c8:	08004feb 	.word	0x08004feb

080041cc <_free_r>:
 80041cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ce:	2900      	cmp	r1, #0
 80041d0:	d044      	beq.n	800425c <_free_r+0x90>
 80041d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d6:	9001      	str	r0, [sp, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f1a1 0404 	sub.w	r4, r1, #4
 80041de:	bfb8      	it	lt
 80041e0:	18e4      	addlt	r4, r4, r3
 80041e2:	f000 f8e7 	bl	80043b4 <__malloc_lock>
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <_free_r+0x94>)
 80041e8:	9801      	ldr	r0, [sp, #4]
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	b933      	cbnz	r3, 80041fc <_free_r+0x30>
 80041ee:	6063      	str	r3, [r4, #4]
 80041f0:	6014      	str	r4, [r2, #0]
 80041f2:	b003      	add	sp, #12
 80041f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041f8:	f000 b8e2 	b.w	80043c0 <__malloc_unlock>
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d908      	bls.n	8004212 <_free_r+0x46>
 8004200:	6825      	ldr	r5, [r4, #0]
 8004202:	1961      	adds	r1, r4, r5
 8004204:	428b      	cmp	r3, r1
 8004206:	bf01      	itttt	eq
 8004208:	6819      	ldreq	r1, [r3, #0]
 800420a:	685b      	ldreq	r3, [r3, #4]
 800420c:	1949      	addeq	r1, r1, r5
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	e7ed      	b.n	80041ee <_free_r+0x22>
 8004212:	461a      	mov	r2, r3
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b10b      	cbz	r3, 800421c <_free_r+0x50>
 8004218:	42a3      	cmp	r3, r4
 800421a:	d9fa      	bls.n	8004212 <_free_r+0x46>
 800421c:	6811      	ldr	r1, [r2, #0]
 800421e:	1855      	adds	r5, r2, r1
 8004220:	42a5      	cmp	r5, r4
 8004222:	d10b      	bne.n	800423c <_free_r+0x70>
 8004224:	6824      	ldr	r4, [r4, #0]
 8004226:	4421      	add	r1, r4
 8004228:	1854      	adds	r4, r2, r1
 800422a:	42a3      	cmp	r3, r4
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	d1e0      	bne.n	80041f2 <_free_r+0x26>
 8004230:	681c      	ldr	r4, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	6053      	str	r3, [r2, #4]
 8004236:	440c      	add	r4, r1
 8004238:	6014      	str	r4, [r2, #0]
 800423a:	e7da      	b.n	80041f2 <_free_r+0x26>
 800423c:	d902      	bls.n	8004244 <_free_r+0x78>
 800423e:	230c      	movs	r3, #12
 8004240:	6003      	str	r3, [r0, #0]
 8004242:	e7d6      	b.n	80041f2 <_free_r+0x26>
 8004244:	6825      	ldr	r5, [r4, #0]
 8004246:	1961      	adds	r1, r4, r5
 8004248:	428b      	cmp	r3, r1
 800424a:	bf04      	itt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	bf04      	itt	eq
 8004254:	1949      	addeq	r1, r1, r5
 8004256:	6021      	streq	r1, [r4, #0]
 8004258:	6054      	str	r4, [r2, #4]
 800425a:	e7ca      	b.n	80041f2 <_free_r+0x26>
 800425c:	b003      	add	sp, #12
 800425e:	bd30      	pop	{r4, r5, pc}
 8004260:	20004bb4 	.word	0x20004bb4

08004264 <malloc>:
 8004264:	4b02      	ldr	r3, [pc, #8]	; (8004270 <malloc+0xc>)
 8004266:	4601      	mov	r1, r0
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	f000 b823 	b.w	80042b4 <_malloc_r>
 800426e:	bf00      	nop
 8004270:	20000098 	.word	0x20000098

08004274 <sbrk_aligned>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4e0e      	ldr	r6, [pc, #56]	; (80042b0 <sbrk_aligned+0x3c>)
 8004278:	460c      	mov	r4, r1
 800427a:	6831      	ldr	r1, [r6, #0]
 800427c:	4605      	mov	r5, r0
 800427e:	b911      	cbnz	r1, 8004286 <sbrk_aligned+0x12>
 8004280:	f000 fcbc 	bl	8004bfc <_sbrk_r>
 8004284:	6030      	str	r0, [r6, #0]
 8004286:	4621      	mov	r1, r4
 8004288:	4628      	mov	r0, r5
 800428a:	f000 fcb7 	bl	8004bfc <_sbrk_r>
 800428e:	1c43      	adds	r3, r0, #1
 8004290:	d00a      	beq.n	80042a8 <sbrk_aligned+0x34>
 8004292:	1cc4      	adds	r4, r0, #3
 8004294:	f024 0403 	bic.w	r4, r4, #3
 8004298:	42a0      	cmp	r0, r4
 800429a:	d007      	beq.n	80042ac <sbrk_aligned+0x38>
 800429c:	1a21      	subs	r1, r4, r0
 800429e:	4628      	mov	r0, r5
 80042a0:	f000 fcac 	bl	8004bfc <_sbrk_r>
 80042a4:	3001      	adds	r0, #1
 80042a6:	d101      	bne.n	80042ac <sbrk_aligned+0x38>
 80042a8:	f04f 34ff 	mov.w	r4, #4294967295
 80042ac:	4620      	mov	r0, r4
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	20004bb8 	.word	0x20004bb8

080042b4 <_malloc_r>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	1ccd      	adds	r5, r1, #3
 80042ba:	f025 0503 	bic.w	r5, r5, #3
 80042be:	3508      	adds	r5, #8
 80042c0:	2d0c      	cmp	r5, #12
 80042c2:	bf38      	it	cc
 80042c4:	250c      	movcc	r5, #12
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	4607      	mov	r7, r0
 80042ca:	db01      	blt.n	80042d0 <_malloc_r+0x1c>
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d905      	bls.n	80042dc <_malloc_r+0x28>
 80042d0:	230c      	movs	r3, #12
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	2600      	movs	r6, #0
 80042d6:	4630      	mov	r0, r6
 80042d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043b0 <_malloc_r+0xfc>
 80042e0:	f000 f868 	bl	80043b4 <__malloc_lock>
 80042e4:	f8d8 3000 	ldr.w	r3, [r8]
 80042e8:	461c      	mov	r4, r3
 80042ea:	bb5c      	cbnz	r4, 8004344 <_malloc_r+0x90>
 80042ec:	4629      	mov	r1, r5
 80042ee:	4638      	mov	r0, r7
 80042f0:	f7ff ffc0 	bl	8004274 <sbrk_aligned>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	4604      	mov	r4, r0
 80042f8:	d155      	bne.n	80043a6 <_malloc_r+0xf2>
 80042fa:	f8d8 4000 	ldr.w	r4, [r8]
 80042fe:	4626      	mov	r6, r4
 8004300:	2e00      	cmp	r6, #0
 8004302:	d145      	bne.n	8004390 <_malloc_r+0xdc>
 8004304:	2c00      	cmp	r4, #0
 8004306:	d048      	beq.n	800439a <_malloc_r+0xe6>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	4631      	mov	r1, r6
 800430c:	4638      	mov	r0, r7
 800430e:	eb04 0903 	add.w	r9, r4, r3
 8004312:	f000 fc73 	bl	8004bfc <_sbrk_r>
 8004316:	4581      	cmp	r9, r0
 8004318:	d13f      	bne.n	800439a <_malloc_r+0xe6>
 800431a:	6821      	ldr	r1, [r4, #0]
 800431c:	1a6d      	subs	r5, r5, r1
 800431e:	4629      	mov	r1, r5
 8004320:	4638      	mov	r0, r7
 8004322:	f7ff ffa7 	bl	8004274 <sbrk_aligned>
 8004326:	3001      	adds	r0, #1
 8004328:	d037      	beq.n	800439a <_malloc_r+0xe6>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	442b      	add	r3, r5
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	f8d8 3000 	ldr.w	r3, [r8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d038      	beq.n	80043aa <_malloc_r+0xf6>
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	42a2      	cmp	r2, r4
 800433c:	d12b      	bne.n	8004396 <_malloc_r+0xe2>
 800433e:	2200      	movs	r2, #0
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	e00f      	b.n	8004364 <_malloc_r+0xb0>
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	1b52      	subs	r2, r2, r5
 8004348:	d41f      	bmi.n	800438a <_malloc_r+0xd6>
 800434a:	2a0b      	cmp	r2, #11
 800434c:	d917      	bls.n	800437e <_malloc_r+0xca>
 800434e:	1961      	adds	r1, r4, r5
 8004350:	42a3      	cmp	r3, r4
 8004352:	6025      	str	r5, [r4, #0]
 8004354:	bf18      	it	ne
 8004356:	6059      	strne	r1, [r3, #4]
 8004358:	6863      	ldr	r3, [r4, #4]
 800435a:	bf08      	it	eq
 800435c:	f8c8 1000 	streq.w	r1, [r8]
 8004360:	5162      	str	r2, [r4, r5]
 8004362:	604b      	str	r3, [r1, #4]
 8004364:	4638      	mov	r0, r7
 8004366:	f104 060b 	add.w	r6, r4, #11
 800436a:	f000 f829 	bl	80043c0 <__malloc_unlock>
 800436e:	f026 0607 	bic.w	r6, r6, #7
 8004372:	1d23      	adds	r3, r4, #4
 8004374:	1af2      	subs	r2, r6, r3
 8004376:	d0ae      	beq.n	80042d6 <_malloc_r+0x22>
 8004378:	1b9b      	subs	r3, r3, r6
 800437a:	50a3      	str	r3, [r4, r2]
 800437c:	e7ab      	b.n	80042d6 <_malloc_r+0x22>
 800437e:	42a3      	cmp	r3, r4
 8004380:	6862      	ldr	r2, [r4, #4]
 8004382:	d1dd      	bne.n	8004340 <_malloc_r+0x8c>
 8004384:	f8c8 2000 	str.w	r2, [r8]
 8004388:	e7ec      	b.n	8004364 <_malloc_r+0xb0>
 800438a:	4623      	mov	r3, r4
 800438c:	6864      	ldr	r4, [r4, #4]
 800438e:	e7ac      	b.n	80042ea <_malloc_r+0x36>
 8004390:	4634      	mov	r4, r6
 8004392:	6876      	ldr	r6, [r6, #4]
 8004394:	e7b4      	b.n	8004300 <_malloc_r+0x4c>
 8004396:	4613      	mov	r3, r2
 8004398:	e7cc      	b.n	8004334 <_malloc_r+0x80>
 800439a:	230c      	movs	r3, #12
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4638      	mov	r0, r7
 80043a0:	f000 f80e 	bl	80043c0 <__malloc_unlock>
 80043a4:	e797      	b.n	80042d6 <_malloc_r+0x22>
 80043a6:	6025      	str	r5, [r4, #0]
 80043a8:	e7dc      	b.n	8004364 <_malloc_r+0xb0>
 80043aa:	605b      	str	r3, [r3, #4]
 80043ac:	deff      	udf	#255	; 0xff
 80043ae:	bf00      	nop
 80043b0:	20004bb4 	.word	0x20004bb4

080043b4 <__malloc_lock>:
 80043b4:	4801      	ldr	r0, [pc, #4]	; (80043bc <__malloc_lock+0x8>)
 80043b6:	f7ff bedb 	b.w	8004170 <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	20004bb0 	.word	0x20004bb0

080043c0 <__malloc_unlock>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__malloc_unlock+0x8>)
 80043c2:	f7ff bed6 	b.w	8004172 <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	20004bb0 	.word	0x20004bb0

080043cc <__sfputc_r>:
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	b410      	push	{r4}
 80043d4:	6093      	str	r3, [r2, #8]
 80043d6:	da08      	bge.n	80043ea <__sfputc_r+0x1e>
 80043d8:	6994      	ldr	r4, [r2, #24]
 80043da:	42a3      	cmp	r3, r4
 80043dc:	db01      	blt.n	80043e2 <__sfputc_r+0x16>
 80043de:	290a      	cmp	r1, #10
 80043e0:	d103      	bne.n	80043ea <__sfputc_r+0x1e>
 80043e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e6:	f7ff bdb6 	b.w	8003f56 <__swbuf_r>
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	1c58      	adds	r0, r3, #1
 80043ee:	6010      	str	r0, [r2, #0]
 80043f0:	7019      	strb	r1, [r3, #0]
 80043f2:	4608      	mov	r0, r1
 80043f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <__sfputs_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	4614      	mov	r4, r2
 8004402:	18d5      	adds	r5, r2, r3
 8004404:	42ac      	cmp	r4, r5
 8004406:	d101      	bne.n	800440c <__sfputs_r+0x12>
 8004408:	2000      	movs	r0, #0
 800440a:	e007      	b.n	800441c <__sfputs_r+0x22>
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	463a      	mov	r2, r7
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff ffda 	bl	80043cc <__sfputc_r>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d1f3      	bne.n	8004404 <__sfputs_r+0xa>
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004420 <_vfiprintf_r>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	460d      	mov	r5, r1
 8004426:	b09d      	sub	sp, #116	; 0x74
 8004428:	4614      	mov	r4, r2
 800442a:	4698      	mov	r8, r3
 800442c:	4606      	mov	r6, r0
 800442e:	b118      	cbz	r0, 8004438 <_vfiprintf_r+0x18>
 8004430:	6a03      	ldr	r3, [r0, #32]
 8004432:	b90b      	cbnz	r3, 8004438 <_vfiprintf_r+0x18>
 8004434:	f7ff fcba 	bl	8003dac <__sinit>
 8004438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800443a:	07d9      	lsls	r1, r3, #31
 800443c:	d405      	bmi.n	800444a <_vfiprintf_r+0x2a>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	059a      	lsls	r2, r3, #22
 8004442:	d402      	bmi.n	800444a <_vfiprintf_r+0x2a>
 8004444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004446:	f7ff fe93 	bl	8004170 <__retarget_lock_acquire_recursive>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	d501      	bpl.n	8004454 <_vfiprintf_r+0x34>
 8004450:	692b      	ldr	r3, [r5, #16]
 8004452:	b99b      	cbnz	r3, 800447c <_vfiprintf_r+0x5c>
 8004454:	4629      	mov	r1, r5
 8004456:	4630      	mov	r0, r6
 8004458:	f7ff fdba 	bl	8003fd0 <__swsetup_r>
 800445c:	b170      	cbz	r0, 800447c <_vfiprintf_r+0x5c>
 800445e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004460:	07dc      	lsls	r4, r3, #31
 8004462:	d504      	bpl.n	800446e <_vfiprintf_r+0x4e>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	b01d      	add	sp, #116	; 0x74
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	0598      	lsls	r0, r3, #22
 8004472:	d4f7      	bmi.n	8004464 <_vfiprintf_r+0x44>
 8004474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004476:	f7ff fe7c 	bl	8004172 <__retarget_lock_release_recursive>
 800447a:	e7f3      	b.n	8004464 <_vfiprintf_r+0x44>
 800447c:	2300      	movs	r3, #0
 800447e:	9309      	str	r3, [sp, #36]	; 0x24
 8004480:	2320      	movs	r3, #32
 8004482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004486:	f8cd 800c 	str.w	r8, [sp, #12]
 800448a:	2330      	movs	r3, #48	; 0x30
 800448c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004640 <_vfiprintf_r+0x220>
 8004490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004494:	f04f 0901 	mov.w	r9, #1
 8004498:	4623      	mov	r3, r4
 800449a:	469a      	mov	sl, r3
 800449c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044a0:	b10a      	cbz	r2, 80044a6 <_vfiprintf_r+0x86>
 80044a2:	2a25      	cmp	r2, #37	; 0x25
 80044a4:	d1f9      	bne.n	800449a <_vfiprintf_r+0x7a>
 80044a6:	ebba 0b04 	subs.w	fp, sl, r4
 80044aa:	d00b      	beq.n	80044c4 <_vfiprintf_r+0xa4>
 80044ac:	465b      	mov	r3, fp
 80044ae:	4622      	mov	r2, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ffa1 	bl	80043fa <__sfputs_r>
 80044b8:	3001      	adds	r0, #1
 80044ba:	f000 80a9 	beq.w	8004610 <_vfiprintf_r+0x1f0>
 80044be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044c0:	445a      	add	r2, fp
 80044c2:	9209      	str	r2, [sp, #36]	; 0x24
 80044c4:	f89a 3000 	ldrb.w	r3, [sl]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80a1 	beq.w	8004610 <_vfiprintf_r+0x1f0>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d8:	f10a 0a01 	add.w	sl, sl, #1
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	9307      	str	r3, [sp, #28]
 80044e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044e4:	931a      	str	r3, [sp, #104]	; 0x68
 80044e6:	4654      	mov	r4, sl
 80044e8:	2205      	movs	r2, #5
 80044ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ee:	4854      	ldr	r0, [pc, #336]	; (8004640 <_vfiprintf_r+0x220>)
 80044f0:	f7fb fe8e 	bl	8000210 <memchr>
 80044f4:	9a04      	ldr	r2, [sp, #16]
 80044f6:	b9d8      	cbnz	r0, 8004530 <_vfiprintf_r+0x110>
 80044f8:	06d1      	lsls	r1, r2, #27
 80044fa:	bf44      	itt	mi
 80044fc:	2320      	movmi	r3, #32
 80044fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004502:	0713      	lsls	r3, r2, #28
 8004504:	bf44      	itt	mi
 8004506:	232b      	movmi	r3, #43	; 0x2b
 8004508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800450c:	f89a 3000 	ldrb.w	r3, [sl]
 8004510:	2b2a      	cmp	r3, #42	; 0x2a
 8004512:	d015      	beq.n	8004540 <_vfiprintf_r+0x120>
 8004514:	9a07      	ldr	r2, [sp, #28]
 8004516:	4654      	mov	r4, sl
 8004518:	2000      	movs	r0, #0
 800451a:	f04f 0c0a 	mov.w	ip, #10
 800451e:	4621      	mov	r1, r4
 8004520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004524:	3b30      	subs	r3, #48	; 0x30
 8004526:	2b09      	cmp	r3, #9
 8004528:	d94d      	bls.n	80045c6 <_vfiprintf_r+0x1a6>
 800452a:	b1b0      	cbz	r0, 800455a <_vfiprintf_r+0x13a>
 800452c:	9207      	str	r2, [sp, #28]
 800452e:	e014      	b.n	800455a <_vfiprintf_r+0x13a>
 8004530:	eba0 0308 	sub.w	r3, r0, r8
 8004534:	fa09 f303 	lsl.w	r3, r9, r3
 8004538:	4313      	orrs	r3, r2
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	46a2      	mov	sl, r4
 800453e:	e7d2      	b.n	80044e6 <_vfiprintf_r+0xc6>
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	1d19      	adds	r1, r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	9103      	str	r1, [sp, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	bfbb      	ittet	lt
 800454c:	425b      	neglt	r3, r3
 800454e:	f042 0202 	orrlt.w	r2, r2, #2
 8004552:	9307      	strge	r3, [sp, #28]
 8004554:	9307      	strlt	r3, [sp, #28]
 8004556:	bfb8      	it	lt
 8004558:	9204      	strlt	r2, [sp, #16]
 800455a:	7823      	ldrb	r3, [r4, #0]
 800455c:	2b2e      	cmp	r3, #46	; 0x2e
 800455e:	d10c      	bne.n	800457a <_vfiprintf_r+0x15a>
 8004560:	7863      	ldrb	r3, [r4, #1]
 8004562:	2b2a      	cmp	r3, #42	; 0x2a
 8004564:	d134      	bne.n	80045d0 <_vfiprintf_r+0x1b0>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	9203      	str	r2, [sp, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfb8      	it	lt
 8004572:	f04f 33ff 	movlt.w	r3, #4294967295
 8004576:	3402      	adds	r4, #2
 8004578:	9305      	str	r3, [sp, #20]
 800457a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004650 <_vfiprintf_r+0x230>
 800457e:	7821      	ldrb	r1, [r4, #0]
 8004580:	2203      	movs	r2, #3
 8004582:	4650      	mov	r0, sl
 8004584:	f7fb fe44 	bl	8000210 <memchr>
 8004588:	b138      	cbz	r0, 800459a <_vfiprintf_r+0x17a>
 800458a:	9b04      	ldr	r3, [sp, #16]
 800458c:	eba0 000a 	sub.w	r0, r0, sl
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	4082      	lsls	r2, r0
 8004594:	4313      	orrs	r3, r2
 8004596:	3401      	adds	r4, #1
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459e:	4829      	ldr	r0, [pc, #164]	; (8004644 <_vfiprintf_r+0x224>)
 80045a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045a4:	2206      	movs	r2, #6
 80045a6:	f7fb fe33 	bl	8000210 <memchr>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d03f      	beq.n	800462e <_vfiprintf_r+0x20e>
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <_vfiprintf_r+0x228>)
 80045b0:	bb1b      	cbnz	r3, 80045fa <_vfiprintf_r+0x1da>
 80045b2:	9b03      	ldr	r3, [sp, #12]
 80045b4:	3307      	adds	r3, #7
 80045b6:	f023 0307 	bic.w	r3, r3, #7
 80045ba:	3308      	adds	r3, #8
 80045bc:	9303      	str	r3, [sp, #12]
 80045be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c0:	443b      	add	r3, r7
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
 80045c4:	e768      	b.n	8004498 <_vfiprintf_r+0x78>
 80045c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ca:	460c      	mov	r4, r1
 80045cc:	2001      	movs	r0, #1
 80045ce:	e7a6      	b.n	800451e <_vfiprintf_r+0xfe>
 80045d0:	2300      	movs	r3, #0
 80045d2:	3401      	adds	r4, #1
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	4619      	mov	r1, r3
 80045d8:	f04f 0c0a 	mov.w	ip, #10
 80045dc:	4620      	mov	r0, r4
 80045de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045e2:	3a30      	subs	r2, #48	; 0x30
 80045e4:	2a09      	cmp	r2, #9
 80045e6:	d903      	bls.n	80045f0 <_vfiprintf_r+0x1d0>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0c6      	beq.n	800457a <_vfiprintf_r+0x15a>
 80045ec:	9105      	str	r1, [sp, #20]
 80045ee:	e7c4      	b.n	800457a <_vfiprintf_r+0x15a>
 80045f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f4:	4604      	mov	r4, r0
 80045f6:	2301      	movs	r3, #1
 80045f8:	e7f0      	b.n	80045dc <_vfiprintf_r+0x1bc>
 80045fa:	ab03      	add	r3, sp, #12
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	462a      	mov	r2, r5
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <_vfiprintf_r+0x22c>)
 8004602:	a904      	add	r1, sp, #16
 8004604:	4630      	mov	r0, r6
 8004606:	f3af 8000 	nop.w
 800460a:	4607      	mov	r7, r0
 800460c:	1c78      	adds	r0, r7, #1
 800460e:	d1d6      	bne.n	80045be <_vfiprintf_r+0x19e>
 8004610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004612:	07d9      	lsls	r1, r3, #31
 8004614:	d405      	bmi.n	8004622 <_vfiprintf_r+0x202>
 8004616:	89ab      	ldrh	r3, [r5, #12]
 8004618:	059a      	lsls	r2, r3, #22
 800461a:	d402      	bmi.n	8004622 <_vfiprintf_r+0x202>
 800461c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800461e:	f7ff fda8 	bl	8004172 <__retarget_lock_release_recursive>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	065b      	lsls	r3, r3, #25
 8004626:	f53f af1d 	bmi.w	8004464 <_vfiprintf_r+0x44>
 800462a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800462c:	e71c      	b.n	8004468 <_vfiprintf_r+0x48>
 800462e:	ab03      	add	r3, sp, #12
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	462a      	mov	r2, r5
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <_vfiprintf_r+0x22c>)
 8004636:	a904      	add	r1, sp, #16
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f879 	bl	8004730 <_printf_i>
 800463e:	e7e4      	b.n	800460a <_vfiprintf_r+0x1ea>
 8004640:	08004fec 	.word	0x08004fec
 8004644:	08004ff6 	.word	0x08004ff6
 8004648:	00000000 	.word	0x00000000
 800464c:	080043fb 	.word	0x080043fb
 8004650:	08004ff2 	.word	0x08004ff2

08004654 <_printf_common>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	4616      	mov	r6, r2
 800465a:	4699      	mov	r9, r3
 800465c:	688a      	ldr	r2, [r1, #8]
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004664:	4293      	cmp	r3, r2
 8004666:	bfb8      	it	lt
 8004668:	4613      	movlt	r3, r2
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004670:	4607      	mov	r7, r0
 8004672:	460c      	mov	r4, r1
 8004674:	b10a      	cbz	r2, 800467a <_printf_common+0x26>
 8004676:	3301      	adds	r3, #1
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	0699      	lsls	r1, r3, #26
 800467e:	bf42      	ittt	mi
 8004680:	6833      	ldrmi	r3, [r6, #0]
 8004682:	3302      	addmi	r3, #2
 8004684:	6033      	strmi	r3, [r6, #0]
 8004686:	6825      	ldr	r5, [r4, #0]
 8004688:	f015 0506 	ands.w	r5, r5, #6
 800468c:	d106      	bne.n	800469c <_printf_common+0x48>
 800468e:	f104 0a19 	add.w	sl, r4, #25
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	6832      	ldr	r2, [r6, #0]
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	42ab      	cmp	r3, r5
 800469a:	dc26      	bgt.n	80046ea <_printf_common+0x96>
 800469c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a0:	1e13      	subs	r3, r2, #0
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	bf18      	it	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	0692      	lsls	r2, r2, #26
 80046aa:	d42b      	bmi.n	8004704 <_printf_common+0xb0>
 80046ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b0:	4649      	mov	r1, r9
 80046b2:	4638      	mov	r0, r7
 80046b4:	47c0      	blx	r8
 80046b6:	3001      	adds	r0, #1
 80046b8:	d01e      	beq.n	80046f8 <_printf_common+0xa4>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	6922      	ldr	r2, [r4, #16]
 80046be:	f003 0306 	and.w	r3, r3, #6
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	bf02      	ittt	eq
 80046c6:	68e5      	ldreq	r5, [r4, #12]
 80046c8:	6833      	ldreq	r3, [r6, #0]
 80046ca:	1aed      	subeq	r5, r5, r3
 80046cc:	68a3      	ldr	r3, [r4, #8]
 80046ce:	bf0c      	ite	eq
 80046d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d4:	2500      	movne	r5, #0
 80046d6:	4293      	cmp	r3, r2
 80046d8:	bfc4      	itt	gt
 80046da:	1a9b      	subgt	r3, r3, r2
 80046dc:	18ed      	addgt	r5, r5, r3
 80046de:	2600      	movs	r6, #0
 80046e0:	341a      	adds	r4, #26
 80046e2:	42b5      	cmp	r5, r6
 80046e4:	d11a      	bne.n	800471c <_printf_common+0xc8>
 80046e6:	2000      	movs	r0, #0
 80046e8:	e008      	b.n	80046fc <_printf_common+0xa8>
 80046ea:	2301      	movs	r3, #1
 80046ec:	4652      	mov	r2, sl
 80046ee:	4649      	mov	r1, r9
 80046f0:	4638      	mov	r0, r7
 80046f2:	47c0      	blx	r8
 80046f4:	3001      	adds	r0, #1
 80046f6:	d103      	bne.n	8004700 <_printf_common+0xac>
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004700:	3501      	adds	r5, #1
 8004702:	e7c6      	b.n	8004692 <_printf_common+0x3e>
 8004704:	18e1      	adds	r1, r4, r3
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	2030      	movs	r0, #48	; 0x30
 800470a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800470e:	4422      	add	r2, r4
 8004710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004718:	3302      	adds	r3, #2
 800471a:	e7c7      	b.n	80046ac <_printf_common+0x58>
 800471c:	2301      	movs	r3, #1
 800471e:	4622      	mov	r2, r4
 8004720:	4649      	mov	r1, r9
 8004722:	4638      	mov	r0, r7
 8004724:	47c0      	blx	r8
 8004726:	3001      	adds	r0, #1
 8004728:	d0e6      	beq.n	80046f8 <_printf_common+0xa4>
 800472a:	3601      	adds	r6, #1
 800472c:	e7d9      	b.n	80046e2 <_printf_common+0x8e>
	...

08004730 <_printf_i>:
 8004730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	7e0f      	ldrb	r7, [r1, #24]
 8004736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004738:	2f78      	cmp	r7, #120	; 0x78
 800473a:	4691      	mov	r9, r2
 800473c:	4680      	mov	r8, r0
 800473e:	460c      	mov	r4, r1
 8004740:	469a      	mov	sl, r3
 8004742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004746:	d807      	bhi.n	8004758 <_printf_i+0x28>
 8004748:	2f62      	cmp	r7, #98	; 0x62
 800474a:	d80a      	bhi.n	8004762 <_printf_i+0x32>
 800474c:	2f00      	cmp	r7, #0
 800474e:	f000 80d4 	beq.w	80048fa <_printf_i+0x1ca>
 8004752:	2f58      	cmp	r7, #88	; 0x58
 8004754:	f000 80c0 	beq.w	80048d8 <_printf_i+0x1a8>
 8004758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800475c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004760:	e03a      	b.n	80047d8 <_printf_i+0xa8>
 8004762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004766:	2b15      	cmp	r3, #21
 8004768:	d8f6      	bhi.n	8004758 <_printf_i+0x28>
 800476a:	a101      	add	r1, pc, #4	; (adr r1, 8004770 <_printf_i+0x40>)
 800476c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047dd 	.word	0x080047dd
 8004778:	08004759 	.word	0x08004759
 800477c:	08004759 	.word	0x08004759
 8004780:	08004759 	.word	0x08004759
 8004784:	08004759 	.word	0x08004759
 8004788:	080047dd 	.word	0x080047dd
 800478c:	08004759 	.word	0x08004759
 8004790:	08004759 	.word	0x08004759
 8004794:	08004759 	.word	0x08004759
 8004798:	08004759 	.word	0x08004759
 800479c:	080048e1 	.word	0x080048e1
 80047a0:	08004809 	.word	0x08004809
 80047a4:	0800489b 	.word	0x0800489b
 80047a8:	08004759 	.word	0x08004759
 80047ac:	08004759 	.word	0x08004759
 80047b0:	08004903 	.word	0x08004903
 80047b4:	08004759 	.word	0x08004759
 80047b8:	08004809 	.word	0x08004809
 80047bc:	08004759 	.word	0x08004759
 80047c0:	08004759 	.word	0x08004759
 80047c4:	080048a3 	.word	0x080048a3
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	1d1a      	adds	r2, r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	602a      	str	r2, [r5, #0]
 80047d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d8:	2301      	movs	r3, #1
 80047da:	e09f      	b.n	800491c <_printf_i+0x1ec>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	682b      	ldr	r3, [r5, #0]
 80047e0:	0607      	lsls	r7, r0, #24
 80047e2:	f103 0104 	add.w	r1, r3, #4
 80047e6:	6029      	str	r1, [r5, #0]
 80047e8:	d501      	bpl.n	80047ee <_printf_i+0xbe>
 80047ea:	681e      	ldr	r6, [r3, #0]
 80047ec:	e003      	b.n	80047f6 <_printf_i+0xc6>
 80047ee:	0646      	lsls	r6, r0, #25
 80047f0:	d5fb      	bpl.n	80047ea <_printf_i+0xba>
 80047f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	da03      	bge.n	8004802 <_printf_i+0xd2>
 80047fa:	232d      	movs	r3, #45	; 0x2d
 80047fc:	4276      	negs	r6, r6
 80047fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004802:	485a      	ldr	r0, [pc, #360]	; (800496c <_printf_i+0x23c>)
 8004804:	230a      	movs	r3, #10
 8004806:	e012      	b.n	800482e <_printf_i+0xfe>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	1d19      	adds	r1, r3, #4
 800480e:	6029      	str	r1, [r5, #0]
 8004810:	0605      	lsls	r5, r0, #24
 8004812:	d501      	bpl.n	8004818 <_printf_i+0xe8>
 8004814:	681e      	ldr	r6, [r3, #0]
 8004816:	e002      	b.n	800481e <_printf_i+0xee>
 8004818:	0641      	lsls	r1, r0, #25
 800481a:	d5fb      	bpl.n	8004814 <_printf_i+0xe4>
 800481c:	881e      	ldrh	r6, [r3, #0]
 800481e:	4853      	ldr	r0, [pc, #332]	; (800496c <_printf_i+0x23c>)
 8004820:	2f6f      	cmp	r7, #111	; 0x6f
 8004822:	bf0c      	ite	eq
 8004824:	2308      	moveq	r3, #8
 8004826:	230a      	movne	r3, #10
 8004828:	2100      	movs	r1, #0
 800482a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800482e:	6865      	ldr	r5, [r4, #4]
 8004830:	60a5      	str	r5, [r4, #8]
 8004832:	2d00      	cmp	r5, #0
 8004834:	bfa2      	ittt	ge
 8004836:	6821      	ldrge	r1, [r4, #0]
 8004838:	f021 0104 	bicge.w	r1, r1, #4
 800483c:	6021      	strge	r1, [r4, #0]
 800483e:	b90e      	cbnz	r6, 8004844 <_printf_i+0x114>
 8004840:	2d00      	cmp	r5, #0
 8004842:	d04b      	beq.n	80048dc <_printf_i+0x1ac>
 8004844:	4615      	mov	r5, r2
 8004846:	fbb6 f1f3 	udiv	r1, r6, r3
 800484a:	fb03 6711 	mls	r7, r3, r1, r6
 800484e:	5dc7      	ldrb	r7, [r0, r7]
 8004850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004854:	4637      	mov	r7, r6
 8004856:	42bb      	cmp	r3, r7
 8004858:	460e      	mov	r6, r1
 800485a:	d9f4      	bls.n	8004846 <_printf_i+0x116>
 800485c:	2b08      	cmp	r3, #8
 800485e:	d10b      	bne.n	8004878 <_printf_i+0x148>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	07de      	lsls	r6, r3, #31
 8004864:	d508      	bpl.n	8004878 <_printf_i+0x148>
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	6861      	ldr	r1, [r4, #4]
 800486a:	4299      	cmp	r1, r3
 800486c:	bfde      	ittt	le
 800486e:	2330      	movle	r3, #48	; 0x30
 8004870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004878:	1b52      	subs	r2, r2, r5
 800487a:	6122      	str	r2, [r4, #16]
 800487c:	f8cd a000 	str.w	sl, [sp]
 8004880:	464b      	mov	r3, r9
 8004882:	aa03      	add	r2, sp, #12
 8004884:	4621      	mov	r1, r4
 8004886:	4640      	mov	r0, r8
 8004888:	f7ff fee4 	bl	8004654 <_printf_common>
 800488c:	3001      	adds	r0, #1
 800488e:	d14a      	bne.n	8004926 <_printf_i+0x1f6>
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	b004      	add	sp, #16
 8004896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	f043 0320 	orr.w	r3, r3, #32
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	4833      	ldr	r0, [pc, #204]	; (8004970 <_printf_i+0x240>)
 80048a4:	2778      	movs	r7, #120	; 0x78
 80048a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	6829      	ldr	r1, [r5, #0]
 80048ae:	061f      	lsls	r7, r3, #24
 80048b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80048b4:	d402      	bmi.n	80048bc <_printf_i+0x18c>
 80048b6:	065f      	lsls	r7, r3, #25
 80048b8:	bf48      	it	mi
 80048ba:	b2b6      	uxthmi	r6, r6
 80048bc:	07df      	lsls	r7, r3, #31
 80048be:	bf48      	it	mi
 80048c0:	f043 0320 	orrmi.w	r3, r3, #32
 80048c4:	6029      	str	r1, [r5, #0]
 80048c6:	bf48      	it	mi
 80048c8:	6023      	strmi	r3, [r4, #0]
 80048ca:	b91e      	cbnz	r6, 80048d4 <_printf_i+0x1a4>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	f023 0320 	bic.w	r3, r3, #32
 80048d2:	6023      	str	r3, [r4, #0]
 80048d4:	2310      	movs	r3, #16
 80048d6:	e7a7      	b.n	8004828 <_printf_i+0xf8>
 80048d8:	4824      	ldr	r0, [pc, #144]	; (800496c <_printf_i+0x23c>)
 80048da:	e7e4      	b.n	80048a6 <_printf_i+0x176>
 80048dc:	4615      	mov	r5, r2
 80048de:	e7bd      	b.n	800485c <_printf_i+0x12c>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	6826      	ldr	r6, [r4, #0]
 80048e4:	6961      	ldr	r1, [r4, #20]
 80048e6:	1d18      	adds	r0, r3, #4
 80048e8:	6028      	str	r0, [r5, #0]
 80048ea:	0635      	lsls	r5, r6, #24
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	d501      	bpl.n	80048f4 <_printf_i+0x1c4>
 80048f0:	6019      	str	r1, [r3, #0]
 80048f2:	e002      	b.n	80048fa <_printf_i+0x1ca>
 80048f4:	0670      	lsls	r0, r6, #25
 80048f6:	d5fb      	bpl.n	80048f0 <_printf_i+0x1c0>
 80048f8:	8019      	strh	r1, [r3, #0]
 80048fa:	2300      	movs	r3, #0
 80048fc:	6123      	str	r3, [r4, #16]
 80048fe:	4615      	mov	r5, r2
 8004900:	e7bc      	b.n	800487c <_printf_i+0x14c>
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	1d1a      	adds	r2, r3, #4
 8004906:	602a      	str	r2, [r5, #0]
 8004908:	681d      	ldr	r5, [r3, #0]
 800490a:	6862      	ldr	r2, [r4, #4]
 800490c:	2100      	movs	r1, #0
 800490e:	4628      	mov	r0, r5
 8004910:	f7fb fc7e 	bl	8000210 <memchr>
 8004914:	b108      	cbz	r0, 800491a <_printf_i+0x1ea>
 8004916:	1b40      	subs	r0, r0, r5
 8004918:	6060      	str	r0, [r4, #4]
 800491a:	6863      	ldr	r3, [r4, #4]
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	2300      	movs	r3, #0
 8004920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004924:	e7aa      	b.n	800487c <_printf_i+0x14c>
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	462a      	mov	r2, r5
 800492a:	4649      	mov	r1, r9
 800492c:	4640      	mov	r0, r8
 800492e:	47d0      	blx	sl
 8004930:	3001      	adds	r0, #1
 8004932:	d0ad      	beq.n	8004890 <_printf_i+0x160>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	079b      	lsls	r3, r3, #30
 8004938:	d413      	bmi.n	8004962 <_printf_i+0x232>
 800493a:	68e0      	ldr	r0, [r4, #12]
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	4298      	cmp	r0, r3
 8004940:	bfb8      	it	lt
 8004942:	4618      	movlt	r0, r3
 8004944:	e7a6      	b.n	8004894 <_printf_i+0x164>
 8004946:	2301      	movs	r3, #1
 8004948:	4632      	mov	r2, r6
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	47d0      	blx	sl
 8004950:	3001      	adds	r0, #1
 8004952:	d09d      	beq.n	8004890 <_printf_i+0x160>
 8004954:	3501      	adds	r5, #1
 8004956:	68e3      	ldr	r3, [r4, #12]
 8004958:	9903      	ldr	r1, [sp, #12]
 800495a:	1a5b      	subs	r3, r3, r1
 800495c:	42ab      	cmp	r3, r5
 800495e:	dcf2      	bgt.n	8004946 <_printf_i+0x216>
 8004960:	e7eb      	b.n	800493a <_printf_i+0x20a>
 8004962:	2500      	movs	r5, #0
 8004964:	f104 0619 	add.w	r6, r4, #25
 8004968:	e7f5      	b.n	8004956 <_printf_i+0x226>
 800496a:	bf00      	nop
 800496c:	08004ffd 	.word	0x08004ffd
 8004970:	0800500e 	.word	0x0800500e

08004974 <__sflush_r>:
 8004974:	898a      	ldrh	r2, [r1, #12]
 8004976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497a:	4605      	mov	r5, r0
 800497c:	0710      	lsls	r0, r2, #28
 800497e:	460c      	mov	r4, r1
 8004980:	d458      	bmi.n	8004a34 <__sflush_r+0xc0>
 8004982:	684b      	ldr	r3, [r1, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	dc05      	bgt.n	8004994 <__sflush_r+0x20>
 8004988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	dc02      	bgt.n	8004994 <__sflush_r+0x20>
 800498e:	2000      	movs	r0, #0
 8004990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004996:	2e00      	cmp	r6, #0
 8004998:	d0f9      	beq.n	800498e <__sflush_r+0x1a>
 800499a:	2300      	movs	r3, #0
 800499c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049a0:	682f      	ldr	r7, [r5, #0]
 80049a2:	6a21      	ldr	r1, [r4, #32]
 80049a4:	602b      	str	r3, [r5, #0]
 80049a6:	d032      	beq.n	8004a0e <__sflush_r+0x9a>
 80049a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	075a      	lsls	r2, r3, #29
 80049ae:	d505      	bpl.n	80049bc <__sflush_r+0x48>
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	1ac0      	subs	r0, r0, r3
 80049b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049b6:	b10b      	cbz	r3, 80049bc <__sflush_r+0x48>
 80049b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049ba:	1ac0      	subs	r0, r0, r3
 80049bc:	2300      	movs	r3, #0
 80049be:	4602      	mov	r2, r0
 80049c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049c2:	6a21      	ldr	r1, [r4, #32]
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b0      	blx	r6
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	d106      	bne.n	80049dc <__sflush_r+0x68>
 80049ce:	6829      	ldr	r1, [r5, #0]
 80049d0:	291d      	cmp	r1, #29
 80049d2:	d82b      	bhi.n	8004a2c <__sflush_r+0xb8>
 80049d4:	4a29      	ldr	r2, [pc, #164]	; (8004a7c <__sflush_r+0x108>)
 80049d6:	410a      	asrs	r2, r1
 80049d8:	07d6      	lsls	r6, r2, #31
 80049da:	d427      	bmi.n	8004a2c <__sflush_r+0xb8>
 80049dc:	2200      	movs	r2, #0
 80049de:	6062      	str	r2, [r4, #4]
 80049e0:	04d9      	lsls	r1, r3, #19
 80049e2:	6922      	ldr	r2, [r4, #16]
 80049e4:	6022      	str	r2, [r4, #0]
 80049e6:	d504      	bpl.n	80049f2 <__sflush_r+0x7e>
 80049e8:	1c42      	adds	r2, r0, #1
 80049ea:	d101      	bne.n	80049f0 <__sflush_r+0x7c>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b903      	cbnz	r3, 80049f2 <__sflush_r+0x7e>
 80049f0:	6560      	str	r0, [r4, #84]	; 0x54
 80049f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049f4:	602f      	str	r7, [r5, #0]
 80049f6:	2900      	cmp	r1, #0
 80049f8:	d0c9      	beq.n	800498e <__sflush_r+0x1a>
 80049fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049fe:	4299      	cmp	r1, r3
 8004a00:	d002      	beq.n	8004a08 <__sflush_r+0x94>
 8004a02:	4628      	mov	r0, r5
 8004a04:	f7ff fbe2 	bl	80041cc <_free_r>
 8004a08:	2000      	movs	r0, #0
 8004a0a:	6360      	str	r0, [r4, #52]	; 0x34
 8004a0c:	e7c0      	b.n	8004990 <__sflush_r+0x1c>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b0      	blx	r6
 8004a14:	1c41      	adds	r1, r0, #1
 8004a16:	d1c8      	bne.n	80049aa <__sflush_r+0x36>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0c5      	beq.n	80049aa <__sflush_r+0x36>
 8004a1e:	2b1d      	cmp	r3, #29
 8004a20:	d001      	beq.n	8004a26 <__sflush_r+0xb2>
 8004a22:	2b16      	cmp	r3, #22
 8004a24:	d101      	bne.n	8004a2a <__sflush_r+0xb6>
 8004a26:	602f      	str	r7, [r5, #0]
 8004a28:	e7b1      	b.n	800498e <__sflush_r+0x1a>
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a30:	81a3      	strh	r3, [r4, #12]
 8004a32:	e7ad      	b.n	8004990 <__sflush_r+0x1c>
 8004a34:	690f      	ldr	r7, [r1, #16]
 8004a36:	2f00      	cmp	r7, #0
 8004a38:	d0a9      	beq.n	800498e <__sflush_r+0x1a>
 8004a3a:	0793      	lsls	r3, r2, #30
 8004a3c:	680e      	ldr	r6, [r1, #0]
 8004a3e:	bf08      	it	eq
 8004a40:	694b      	ldreq	r3, [r1, #20]
 8004a42:	600f      	str	r7, [r1, #0]
 8004a44:	bf18      	it	ne
 8004a46:	2300      	movne	r3, #0
 8004a48:	eba6 0807 	sub.w	r8, r6, r7
 8004a4c:	608b      	str	r3, [r1, #8]
 8004a4e:	f1b8 0f00 	cmp.w	r8, #0
 8004a52:	dd9c      	ble.n	800498e <__sflush_r+0x1a>
 8004a54:	6a21      	ldr	r1, [r4, #32]
 8004a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a58:	4643      	mov	r3, r8
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b0      	blx	r6
 8004a60:	2800      	cmp	r0, #0
 8004a62:	dc06      	bgt.n	8004a72 <__sflush_r+0xfe>
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6a:	81a3      	strh	r3, [r4, #12]
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	e78e      	b.n	8004990 <__sflush_r+0x1c>
 8004a72:	4407      	add	r7, r0
 8004a74:	eba8 0800 	sub.w	r8, r8, r0
 8004a78:	e7e9      	b.n	8004a4e <__sflush_r+0xda>
 8004a7a:	bf00      	nop
 8004a7c:	dfbffffe 	.word	0xdfbffffe

08004a80 <_fflush_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	690b      	ldr	r3, [r1, #16]
 8004a84:	4605      	mov	r5, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	b913      	cbnz	r3, 8004a90 <_fflush_r+0x10>
 8004a8a:	2500      	movs	r5, #0
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	b118      	cbz	r0, 8004a9a <_fflush_r+0x1a>
 8004a92:	6a03      	ldr	r3, [r0, #32]
 8004a94:	b90b      	cbnz	r3, 8004a9a <_fflush_r+0x1a>
 8004a96:	f7ff f989 	bl	8003dac <__sinit>
 8004a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f3      	beq.n	8004a8a <_fflush_r+0xa>
 8004aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004aa4:	07d0      	lsls	r0, r2, #31
 8004aa6:	d404      	bmi.n	8004ab2 <_fflush_r+0x32>
 8004aa8:	0599      	lsls	r1, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <_fflush_r+0x32>
 8004aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aae:	f7ff fb5f 	bl	8004170 <__retarget_lock_acquire_recursive>
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	f7ff ff5d 	bl	8004974 <__sflush_r>
 8004aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004abc:	07da      	lsls	r2, r3, #31
 8004abe:	4605      	mov	r5, r0
 8004ac0:	d4e4      	bmi.n	8004a8c <_fflush_r+0xc>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	059b      	lsls	r3, r3, #22
 8004ac6:	d4e1      	bmi.n	8004a8c <_fflush_r+0xc>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aca:	f7ff fb52 	bl	8004172 <__retarget_lock_release_recursive>
 8004ace:	e7dd      	b.n	8004a8c <_fflush_r+0xc>

08004ad0 <fiprintf>:
 8004ad0:	b40e      	push	{r1, r2, r3}
 8004ad2:	b503      	push	{r0, r1, lr}
 8004ad4:	4601      	mov	r1, r0
 8004ad6:	ab03      	add	r3, sp, #12
 8004ad8:	4805      	ldr	r0, [pc, #20]	; (8004af0 <fiprintf+0x20>)
 8004ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	f7ff fc9d 	bl	8004420 <_vfiprintf_r>
 8004ae6:	b002      	add	sp, #8
 8004ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aec:	b003      	add	sp, #12
 8004aee:	4770      	bx	lr
 8004af0:	20000098 	.word	0x20000098

08004af4 <__swhatbuf_r>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	460c      	mov	r4, r1
 8004af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afc:	2900      	cmp	r1, #0
 8004afe:	b096      	sub	sp, #88	; 0x58
 8004b00:	4615      	mov	r5, r2
 8004b02:	461e      	mov	r6, r3
 8004b04:	da0d      	bge.n	8004b22 <__swhatbuf_r+0x2e>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	bf0c      	ite	eq
 8004b12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b16:	2340      	movne	r3, #64	; 0x40
 8004b18:	2000      	movs	r0, #0
 8004b1a:	6031      	str	r1, [r6, #0]
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	b016      	add	sp, #88	; 0x58
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	466a      	mov	r2, sp
 8004b24:	f000 f848 	bl	8004bb8 <_fstat_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	dbec      	blt.n	8004b06 <__swhatbuf_r+0x12>
 8004b2c:	9901      	ldr	r1, [sp, #4]
 8004b2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b36:	4259      	negs	r1, r3
 8004b38:	4159      	adcs	r1, r3
 8004b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3e:	e7eb      	b.n	8004b18 <__swhatbuf_r+0x24>

08004b40 <__smakebuf_r>:
 8004b40:	898b      	ldrh	r3, [r1, #12]
 8004b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b44:	079d      	lsls	r5, r3, #30
 8004b46:	4606      	mov	r6, r0
 8004b48:	460c      	mov	r4, r1
 8004b4a:	d507      	bpl.n	8004b5c <__smakebuf_r+0x1c>
 8004b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	2301      	movs	r3, #1
 8004b56:	6163      	str	r3, [r4, #20]
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	ab01      	add	r3, sp, #4
 8004b5e:	466a      	mov	r2, sp
 8004b60:	f7ff ffc8 	bl	8004af4 <__swhatbuf_r>
 8004b64:	9900      	ldr	r1, [sp, #0]
 8004b66:	4605      	mov	r5, r0
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f7ff fba3 	bl	80042b4 <_malloc_r>
 8004b6e:	b948      	cbnz	r0, 8004b84 <__smakebuf_r+0x44>
 8004b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b74:	059a      	lsls	r2, r3, #22
 8004b76:	d4ef      	bmi.n	8004b58 <__smakebuf_r+0x18>
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	e7e3      	b.n	8004b4c <__smakebuf_r+0xc>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	6020      	str	r0, [r4, #0]
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	9b00      	ldr	r3, [sp, #0]
 8004b90:	6163      	str	r3, [r4, #20]
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	6120      	str	r0, [r4, #16]
 8004b96:	b15b      	cbz	r3, 8004bb0 <__smakebuf_r+0x70>
 8004b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	f000 f81d 	bl	8004bdc <_isatty_r>
 8004ba2:	b128      	cbz	r0, 8004bb0 <__smakebuf_r+0x70>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	431d      	orrs	r5, r3
 8004bb4:	81a5      	strh	r5, [r4, #12]
 8004bb6:	e7cf      	b.n	8004b58 <__smakebuf_r+0x18>

08004bb8 <_fstat_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4d07      	ldr	r5, [pc, #28]	; (8004bd8 <_fstat_r+0x20>)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	f7fb ff2d 	bl	8000a24 <_fstat>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	d102      	bne.n	8004bd4 <_fstat_r+0x1c>
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	b103      	cbz	r3, 8004bd4 <_fstat_r+0x1c>
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20004bac 	.word	0x20004bac

08004bdc <_isatty_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d06      	ldr	r5, [pc, #24]	; (8004bf8 <_isatty_r+0x1c>)
 8004be0:	2300      	movs	r3, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	f7fb ff2c 	bl	8000a44 <_isatty>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_isatty_r+0x1a>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_isatty_r+0x1a>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	20004bac 	.word	0x20004bac

08004bfc <_sbrk_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d06      	ldr	r5, [pc, #24]	; (8004c18 <_sbrk_r+0x1c>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	f7fb ff34 	bl	8000a74 <_sbrk>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_sbrk_r+0x1a>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_sbrk_r+0x1a>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	20004bac 	.word	0x20004bac

08004c1c <abort>:
 8004c1c:	b508      	push	{r3, lr}
 8004c1e:	2006      	movs	r0, #6
 8004c20:	f000 f82c 	bl	8004c7c <raise>
 8004c24:	2001      	movs	r0, #1
 8004c26:	f7fb feae 	bl	8000986 <_exit>

08004c2a <_raise_r>:
 8004c2a:	291f      	cmp	r1, #31
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4604      	mov	r4, r0
 8004c30:	460d      	mov	r5, r1
 8004c32:	d904      	bls.n	8004c3e <_raise_r+0x14>
 8004c34:	2316      	movs	r3, #22
 8004c36:	6003      	str	r3, [r0, #0]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004c40:	b112      	cbz	r2, 8004c48 <_raise_r+0x1e>
 8004c42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c46:	b94b      	cbnz	r3, 8004c5c <_raise_r+0x32>
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 f831 	bl	8004cb0 <_getpid_r>
 8004c4e:	462a      	mov	r2, r5
 8004c50:	4601      	mov	r1, r0
 8004c52:	4620      	mov	r0, r4
 8004c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c58:	f000 b818 	b.w	8004c8c <_kill_r>
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d00a      	beq.n	8004c76 <_raise_r+0x4c>
 8004c60:	1c59      	adds	r1, r3, #1
 8004c62:	d103      	bne.n	8004c6c <_raise_r+0x42>
 8004c64:	2316      	movs	r3, #22
 8004c66:	6003      	str	r3, [r0, #0]
 8004c68:	2001      	movs	r0, #1
 8004c6a:	e7e7      	b.n	8004c3c <_raise_r+0x12>
 8004c6c:	2400      	movs	r4, #0
 8004c6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c72:	4628      	mov	r0, r5
 8004c74:	4798      	blx	r3
 8004c76:	2000      	movs	r0, #0
 8004c78:	e7e0      	b.n	8004c3c <_raise_r+0x12>
	...

08004c7c <raise>:
 8004c7c:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <raise+0xc>)
 8004c7e:	4601      	mov	r1, r0
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	f7ff bfd2 	b.w	8004c2a <_raise_r>
 8004c86:	bf00      	nop
 8004c88:	20000098 	.word	0x20000098

08004c8c <_kill_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d07      	ldr	r5, [pc, #28]	; (8004cac <_kill_r+0x20>)
 8004c90:	2300      	movs	r3, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	602b      	str	r3, [r5, #0]
 8004c9a:	f7fb fe64 	bl	8000966 <_kill>
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	d102      	bne.n	8004ca8 <_kill_r+0x1c>
 8004ca2:	682b      	ldr	r3, [r5, #0]
 8004ca4:	b103      	cbz	r3, 8004ca8 <_kill_r+0x1c>
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	bd38      	pop	{r3, r4, r5, pc}
 8004caa:	bf00      	nop
 8004cac:	20004bac 	.word	0x20004bac

08004cb0 <_getpid_r>:
 8004cb0:	f7fb be51 	b.w	8000956 <_getpid>

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	bf00      	nop
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	bf00      	nop
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
